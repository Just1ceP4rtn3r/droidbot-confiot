
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _Main = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _miot = _$$_REQUIRE(_dependencyMap[2]);

  _miot.PackageEvent.packageAuthorizationCancel.addListener(function () {
    console.log("packageAuthorizationCancel");

    _miot.Package.exit();
  });

  _miot.PackageEvent.packageViewWillAppear.addListener(function () {
    console.log("packageViewWillAppear");
  });

  _miot.PackageEvent.packageWillLoad.addListener(function () {
    console.log("packageWillLoad");
  });

  _miot.PackageEvent.packageDidLoaded.addListener(function () {
    console.log("packageDidLoaded");
  });

  _miot.PackageEvent.packageDidResume.addListener(function () {
    console.log("packageDidResume");
  });

  _miot.PackageEvent.packageWillPause.addListener(function () {
    console.log("packageWillPause");
  });

  _miot.PackageEvent.packageWillExit.addListener(function () {
    console.log("packageWillExit");
  });

  switch (_miot.Package.entrance) {
    case _miot.Entrance.Scene:
      _miot.Package.entry(_$$_REQUIRE(_dependencyMap[3]), function (_) {});

      break;

    default:
      _miot.Package.entry(_Main.default, function (_) {});

      break;
  }
},10001,[14305,10004,10074,10007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _ui = _$$_REQUIRE(_dependencyMap[8]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[9]);

  var _CommonSetting = _$$_REQUIRE(_dependencyMap[10]);

  var _MainPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var _SettingPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _DeviceControl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _HistoryLinePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _IntermediateFilterPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _FilterPurchasePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _FilterIntroducePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _TimeListPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _AddTimePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _CustomTimePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _DayTimePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _TestPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[24]);

  var _CustomTitleBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var RootStack = (0, _reactNavigation.createStackNavigator)({
    MoreSetting: _CommonSetting.MoreSetting,
    FirmwareUpgrade: _CommonSetting.FirmwareUpgrade,
    Home: _MainPage.default,
    Setting: _SettingPage.default,
    Control: _DeviceControl.default,
    HistoryLine: _HistoryLinePage.default,
    Intermediate: _IntermediateFilterPage.default,
    FilterPurchase: _FilterPurchasePage.default,
    FilterIntroduce: _FilterIntroducePage.default,
    TimeList: _TimeListPage.default,
    AddTime: _AddTimePage.default,
    CustomTime: _CustomTimePage.default,
    DayTime: _DayTimePage.default,
    Test: _TestPage.default
  }, {
    initialRouteName: 'Home',
    navigationOptions: function navigationOptions(_ref) {
      var navigation = _ref.navigation;
      return {
        header: _react.default.createElement(_ui.TitleBarBlack, {
          title: navigation.state.params ? navigation.state.params.title : '',
          style: {
            backgroundColor: '#fff'
          },
          onPressLeft: function onPressLeft() {
            navigation.goBack();
          }
        })
      };
    },
    headerMode: 'screen',
    transitionConfig: function transitionConfig() {
      return _miot.Host.isAndroid ? {
        screenInterpolator: interpolator
      } : {};
    }
  });

  function interpolator(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return function (props) {
        var navigation = props.navigation,
            scene = props.scene;
        var focused = navigation.state.index === scene.index;
        var opacity = focused ? 1 : 0;
        var translate = focused ? 0 : 1000000;
        return {
          opacity: opacity,
          transform: [{
            translateX: translate
          }, {
            translateY: translate
          }]
        };
      };
    }

    var interpolate = function interpolate(props) {
      var scene = props.scene,
          scenes = props.scenes;
      var index = scene.index;
      var lastSceneIndexInScenes = scenes.length - 1;
      var isBack = !scenes[lastSceneIndexInScenes].isActive;

      if (isBack) {
        var currentSceneIndexInScenes = scenes.findIndex(function (item) {
          return item === scene;
        });
        var targetSceneIndexInScenes = scenes.findIndex(function (item) {
          return item.isActive;
        });
        var targetSceneIndex = scenes[targetSceneIndexInScenes].index;
        var lastSceneIndex = scenes[lastSceneIndexInScenes].index;

        if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {
          return {
            first: Math.min(targetSceneIndex, index - 1),
            last: index + 1
          };
        } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {
          return {
            first: index - 1,
            last: Math.max(lastSceneIndex, index + 1)
          };
        } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {
          return null;
        } else {
          return {
            first: index - 1,
            last: index + 1
          };
        }
      } else {
        return {
          first: index - 1,
          last: index + 1
        };
      }
    };

    if (!interpolate) return {
      opacity: 0
    };
    var p = interpolate(props);
    if (!p) return;
    var first = p.first,
        last = p.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var width = layout.initWidth;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [width, 0, width * -0.3]
    });
    var translateY = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  var App = function (_React$Component) {
    (0, _inherits2.default)(App, _React$Component);

    function App() {
      (0, _classCallCheck2.default)(this, App);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(App).apply(this, arguments));
    }

    (0, _createClass2.default)(App, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(RootStack, null);
      }
    }]);
    return App;
  }(_react.default.Component);

  exports.default = App;
},10004,[14305,14320,14323,14371,14377,14386,10297,10033,10230,10918,10353,10007,10074,10325,10337,10346,10379,10397,10400,10403,10430,10469,10472,10475,10010,10328]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[13]);

  var _CustomTitleNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _SperateView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _SlideModal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _PtcPickView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LoveAreaView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _MainpageCurveLineView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _CustomItemView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _CustomModeView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _FontSizeConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[23]));

  var _OtherConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[26]));

  var _reactNativeVideo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));

  var _VideoUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));

  var _ConfirmDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[29]));

  var _reactNativeEasyToast = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[30]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[31]));

  var _ui = _$$_REQUIRE(_dependencyMap[32]);

  var _RequestHelp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[33]));

  var _RpcManage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[34]));

  var MarginToTop = _MHGlobalData.default.naviHeight;

  var ItemHeight = _DataUtils.default.roundSize(87);

  var ItemIconHeight = _DataUtils.default.roundSize(37);

  var ItemModeHeight = _DataUtils.default.roundSize(150);

  var ItemHistoryHeight = _DataUtils.default.roundSize(364);

  var ItemSettingHeight = _DataUtils.default.roundSize(76);

  var ItemSettingBckH = ItemSettingHeight * 5 + 15;

  var curTipH = _DataUtils.default.roundSize(50);

  var curViewH = _DataUtils.default.roundSize(88);

  var curViewBlankH = _DataUtils.default.roundSize(27);

  var curViewBlankMidH = _DataUtils.default.roundSize(24.5);

  var curViewBlankBotH = _DataUtils.default.roundSize(23.5);

  var historyCheckH = ItemHistoryHeight - curTipH - curViewH * 2 - curViewBlankH - curViewBlankMidH - curViewBlankBotH - _DataUtils.default.roundSize(12 * _MHGlobalData.default.HeightPersent);

  var alphaHeight = 150;
  var alphaHeightTip = 75;
  var alphaHeightCO2 = 190;
  var alphaHeightAirDes = 220;

  var airDesHeight = _DataUtils.default.roundSize(0.1195 * (0, _MHGlobalData.getWindowHeight)());

  var loveModelHeight = 227 * _MHGlobalData.default.HeightPersent;
  var pm25StartAnimatedY = curTipH + curViewBlankH;
  var co2StartAnimatedY = pm25StartAnimatedY + curViewH + curViewBlankMidH;
  var marginLeft = 4;
  var transparentColor = 'transparent';
  var isRequesting = false;
  var startY = 0.0;
  var persentOfBlank = 0.15;
  global.firstLoaded = true;
  global.pm25AnimatedLoad = false;
  global.co2AnimatedLoad = false;
  global.language = "zh";
  var CO2DataArr = [];
  var PM25DataArr = [];
  var cacheDictionary = {};
  var bckForChangeImageOpacity = new _reactNative.Animated.Value(0);
  var bckCurrentImageOpacity = new _reactNative.Animated.Value(1);
  var bckImageOpacity = new _reactNative.Animated.Value(0);
  var videoOpacity = new _reactNative.Animated.Value(0);
  var videoCurrentOpacity = new _reactNative.Animated.Value(1);
  var contentViewOpacity = new _reactNative.Animated.Value(0);
  var bckVideoUri = _MHGlobalData.default.isIphoneX ? 'good_day_x.mp4' : '/good_day.mp4';
  var currentVideoUri = _MHGlobalData.default.isIphoneX ? 'good_day_x.mp4' : '/good_day.mp4';
  var videoImageName = 'good_day_bg.png';
  var bckImageName = 'good_day_off_bg.png';
  var bckCurrentImageNamge = 'good_day_off_bg.png';
  var devicePropsArray = ["pm25", "co2", "temperature_outside", "favourite_speed", "filter_rate", "filter_day", "control_speed", "power", "mode", "ptc_on", "ptc_status", "child_lock", "sound", "display"];
  var pageProps = ["prop.filter_rate", "prop.filter_day", "prop.pm25", "prop.co2", "prop.power", "prop.mode", "prop.ptc_on", "prop.ptc_status", "prop.favourite_speed", "prop.temperature_outside", "prop.child_lock", "prop.sound", "prop.display"];
  var opacityArray = [1, 0];
  var HomeScrollView = _reactNative.ScrollView;

  if (_miot.Host.isAndroid && _ui.MiotAndroidScrollView) {
    HomeScrollView = _ui.MiotAndroidScrollView;
  }

  var MainPage = function (_React$Component) {
    (0, _inherits2.default)(MainPage, _React$Component);

    function MainPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, MainPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MainPage).call(this, props, context));
      _this.titleAlpha = 1;
      _this.titleAlpha2 = 0;
      _this.PM25TipAlpha = 1;
      _this.PM25NumberAlpha = 1;
      _this.Co2NumberAlpha = 1;
      _this.AirDesAlpha = 1;
      _this.favouriteSetName = "favouriteSet";
      _this.favouriteSet = "false";
      _this.favouriteFile = _MHGlobalData.default.userId + _MHGlobalData.default.deviceId + _this.favouriteSetName;
      _this.requesetCount = 0;
      _this.prePower = true;
      _this.pm25MidYValue = 0;
      _this.co2MidYValue = 0;
      _this.requestedWeatherApi = false;
      _this.showModalFromModeView = false;

      _this.renderLove = function () {
        return _react.default.createElement(_reactNative.View, {
          style: styles.lovePickParentStyle
        }, _react.default.createElement(_LoveAreaView.default, {
          style: styles.lovePickStyle,
          dataSourse: _this.state.loveAreaDataSource
        }));
      };

      _this.renderDialog = function () {
        return _react.default.createElement(_ConfirmDialog.default, {
          title: (0, _MHLocalizableString.getString)('loveModeName'),
          message: (0, _MHLocalizableString.getString)('loveModeTip'),
          modalHeight: _miot.Host.isAndroid ? 170 : 170,
          contentStyle: {
            marginHorizontal: 40
          },
          messageStyle: {
            lineHeight: 22
          },
          dialogBackgroundColor: "#f7f7f7",
          positiveButton: {
            title: (0, _MHLocalizableString.getString)('loveModeSeting'),
            onPress: _this.optionFavoriteYes.bind((0, _assertThisInitialized2.default)(_this)),
            titleStyle: {
              color: "#4a8dfc"
            },
            style: {
              backgroundColor: "#f2f2f2",
              borderBottomLeftRadius: 6,
              borderBottomRightRadius: 6
            }
          }
        });
      };

      _this.preY = 0;

      _this.onScroll = function (e) {
        var offsetY = e.nativeEvent.contentOffset.y;
        var curY = parseInt(offsetY / 10.0);

        if (offsetY < 0 && !_miot.Host.isAndroid) {
          var persentScale = Number(Math.abs(offsetY) / 1000.0);
          persentScale = persentScale >= .2 ? .2 : persentScale;

          _this.refs.desContentView.setNativeProps({
            style: {
              marginTop: airDesHeight + offsetY * 0.5,
              transform: [{
                scale: persentScale + 1
              }, {
                translateX: persentScale * 70
              }]
            }
          });
        }

        if (offsetY >= 0 && offsetY <= alphaHeightAirDes) {
          offsetY = curY * 10;
          _this.preY = curY;
          var alphaPM25Tip = 1 - offsetY / alphaHeightTip;
          var alphaPM25Number = 1 - (offsetY - alphaPM25Tip) / (alphaHeight - alphaPM25Tip);
          var alphaCo2Number = offsetY - alphaHeight >= 0 ? 1 - (offsetY - alphaHeight) / 40 : 1;
          var alphaAirDes = offsetY - alphaHeightCO2 >= 0 ? 1 - (offsetY - alphaHeightCO2) / 30 : 1;
          var alphaTitle = offsetY - alphaHeight >= 0 ? (offsetY - alphaHeight) / 70 : 0;
          _this.titleAlpha = alphaPM25Number <= 0.5 ? 0.5 : alphaPM25Number;
          _this.titleAlpha2 = _this.titleAlpha <= 0.0 ? alphaTitle + 0.5 : alphaTitle;
          _this.PM25TipAlpha = alphaPM25Tip;
          _this.PM25NumberAlpha = alphaPM25Number;
          _this.Co2NumberAlpha = alphaCo2Number;
          _this.AirDesAlpha = alphaAirDes;
          _this.refs.pm25TipView && _this.refs.pm25TipView.setNativeProps({
            style: {
              opacity: _this.PM25TipAlpha
            }
          });
          _this.refs.pm25NumberView && _this.refs.pm25NumberView.setNativeProps({
            style: {
              opacity: _this.PM25NumberAlpha
            }
          });
          _this.refs.co2NumberView && _this.refs.co2NumberView.setNativeProps({
            style: {
              opacity: _this.Co2NumberAlpha
            }
          });
          _this.refs.airDesView && _this.refs.airDesView.setNativeProps({
            style: {
              opacity: _this.AirDesAlpha
            }
          });

          _this.refs.titleNavigation.setNativeProps({
            titleOpacity: _this.titleAlpha,
            subTitleOpacity: _this.titleAlpha2
          });
        }

        if (offsetY > alphaHeight) {
          _this.refs.titleNavigation.setNativeProps({
            titleOpacity: 0
          });
        }

        if (offsetY >= alphaHeightAirDes) {
          _this.refs.titleNavigation.setNativeProps({
            subTitleOpacity: 1
          });
        }

        if (offsetY >= pm25StartAnimatedY) {
          if (global.pm25AnimatedLoad == false && _this.refs.pm25Lineview) {
            _this.refs.pm25Lineview.setNativeProps({
              animate: true,
              midValue: _this.pm25MidYValue
            });

            global.pm25AnimatedLoad = true;
          }
        }

        if (offsetY >= co2StartAnimatedY) {
          if (global.pm25AnimatedLoad == false && _this.refs.pm25Lineview) {
            _this.refs.pm25Lineview.setNativeProps({
              animate: true,
              midValue: _this.pm25MidYValue
            });

            global.pm25AnimatedLoad = true;
          }

          if (global.co2AnimatedLoad == false && _this.refs.co2Lineview) {
            _this.refs.co2Lineview.setNativeProps({
              animate: true,
              midValue: _this.co2MidYValue
            });

            global.co2AnimatedLoad = true;
          }
        }

        if (offsetY <= curTipH + curViewBlankH) {
          if (_this.refs.pm25Lineview) {
            _this.refs.pm25Lineview.setNativeProps({
              animate: false,
              midValue: _this.pm25MidYValue
            });
          }

          global.pm25AnimatedLoad = false;

          if (_this.refs.co2Lineview) {
            _this.refs.co2Lineview.setNativeProps({
              animate: false,
              midValue: _this.co2MidYValue
            });
          }

          global.co2AnimatedLoad = false;
        }
      };

      _this.onScrollBeginDrag = function (e) {
        var offsetY = e.nativeEvent.contentOffset.y;

        if (offsetY <= (0, _MHGlobalData.getVideoHeight)()) {
          startY = offsetY;
        }
      };

      _this.onScrollEndDrag = function (e) {
        var offsetY = e.nativeEvent.contentOffset.y;
        var alphaIconH = (0, _MHGlobalData.getVideoHeight)() - 100 - MarginToTop;
        var videoH = (0, _MHGlobalData.getVideoHeight)();

        if (offsetY <= videoH) {
          if (offsetY >= (videoH - MarginToTop) * 0.4) {
            if (_this.titleAlpha != 0) {
              _this.titleAlpha = 0;
            }

            if (_this.titleAlpha2 != 1) {
              _this.titleAlpha2 = 1;
            }

            _this.PM25TipAlpha = 0;
            _this.PM25NumberAlpha = 0;
            _this.Co2NumberAlpha = 0;
            _this.AirDesAlpha = 0;
          } else {
            _this.PM25TipAlpha = 1;
            _this.PM25NumberAlpha = 1;
            _this.Co2NumberAlpha = 1;
            _this.AirDesAlpha = 1;
          }

          if (offsetY > 0) {
            if (startY >= offsetY) {
              if (startY - offsetY >= (videoH - MarginToTop) * 0.25) {
                startY = 0;
              } else {
                startY = videoH - MarginToTop;

                if (global.pm25AnimatedLoad == false && _this.refs.pm25Lineview) {
                  _this.refs.pm25Lineview.setNativeProps({
                    animate: true,
                    midValue: _this.pm25MidYValue
                  });

                  global.pm25AnimatedLoad = true;
                }

                if (global.co2AnimatedLoad == false && _this.refs.co2Lineview) {
                  _this.refs.co2Lineview.setNativeProps({
                    animate: true,
                    midValue: _this.co2MidYValue
                  });

                  global.co2AnimatedLoad = true;
                }
              }
            } else {
              if (offsetY - startY >= (videoH - MarginToTop) * 0.25) {
                startY = videoH - MarginToTop;

                if (global.pm25AnimatedLoad == false && _this.refs.pm25Lineview) {
                  _this.refs.pm25Lineview.setNativeProps({
                    animate: true,
                    midValue: _this.pm25MidYValue
                  });

                  global.pm25AnimatedLoad = true;
                }

                if (global.co2AnimatedLoad == false && _this.refs.co2Lineview) {
                  _this.refs.co2Lineview.setNativeProps({
                    animate: true,
                    midValue: _this.co2MidYValue
                  });

                  global.co2AnimatedLoad = true;
                }
              } else {
                startY = 0;
              }
            }
          }
        } else {
          if (_this.titleAlpha != 0) {
            _this.titleAlpha = 0;
          }

          if (_this.titleAlpha2 != 1) {
            _this.titleAlpha2 = 1;
          }
        }
      };

      _this.onMomentumScrollEnd = function (e) {
        var offsetY = e.nativeEvent.contentOffset.y;

        if (offsetY <= curTipH + curViewBlankH) {
          if (_this.refs.pm25Lineview) {
            _this.refs.pm25Lineview.setNativeProps({
              animate: false,
              midValue: _this.pm25MidYValue
            });
          }

          global.pm25AnimatedLoad = false;

          if (_this.refs.co2Lineview) {
            _this.refs.co2Lineview.setNativeProps({
              animate: false,
              midValue: _this.co2MidYValue
            });
          }

          global.co2AnimatedLoad = false;
        }
      };

      var loveData = _this._loveAreaData();

      _this.loveAreaDataSource = loveData;

      var uri = _VideoUtils.default.returnVideoUri(bckVideoUri);

      var currentUri = _VideoUtils.default.returnVideoUri(currentVideoUri);

      var bckImage = _VideoUtils.default.returnImage(bckImageName);

      var bckCurrentImage = _VideoUtils.default.returnImage(bckCurrentImageNamge);

      var videoImage = _VideoUtils.default.returnImage(videoImageName);

      var bckState = "good_day";
      var bckCurrentState = "good_day";
      _this.state = {
        deviceName: _miot.Device.name,
        compoundFilterPersent: '100',
        compoundFilterLeftDay: '180',
        co2Num: '-1',
        pm25Num: '-1',
        pm25OutNum: '-1',
        power: true,
        mode: 'sleep',
        ptc_status: 'standby',
        ptc_on: true,
        light: true,
        favourite_speed: "60",
        currentSpeed: '0',
        city: '',
        tempOut: '',
        childLock: '',
        airDes: '--',
        timeDes: '',
        loveAreaDataSource: loveData,
        controlViewDataSource: _this._modeViewData(),
        timePointArr: [],
        PM25Data: _this._PM25Data(),
        CO2Data: _this._CO2Data(),
        timeListArray: [],
        videoUri: uri,
        videoCurrentUri: currentUri,
        videoImage: videoImage,
        bckImage: bckImage,
        bckCurrentImage: bckCurrentImage,
        bckState: bckState,
        bckCurrentState: bckCurrentState,
        showFavoriteDialog: false,
        loveAreaModalVisible: false
      };
      _this.hasMeasureWindow = !_miot.Host.isAndroid;
      return _this;
    }

    (0, _createClass2.default)(MainPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.loadPrivacyAuthed();

        this._layoutAnimation();

        this._loadDataFromMHPluginFS();

        this._loadDataFromCache();

        this._getPropFromApiWithPropArrs();

        this._getCallBackFromSubscribe();

        this._requestTimeListDataSource();

        this._getHistoryData(["co2", "pm25"]);

        this._loadLanguage();

        this._timerGetSensorData();

        this._timerGetTimeListData();

        this._timerGetOutdoorData();

        this.listerDeviceNameChangeed();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.msgSubscription && this.msgSubscription.remove();
        this.deviceListener && this.deviceListener.remove();

        this._deviceNameChangedListener.remove();

        this.timer && clearTimeout(this.timer);
        this.timeListTimer && clearTimeout(this.timeListTimer);
        this.outdoorTimer && clearTimeout(this.outdoorTimer);
      }
    }, {
      key: "_timerGetSensorData",
      value: function _timerGetSensorData() {
        var _this2 = this;

        this.timer = setInterval(function () {
          _this2._getPropFromApiWithSensor();
        }, 2000);
      }
    }, {
      key: "_timerGetTimeListData",
      value: function _timerGetTimeListData() {
        var _this3 = this;

        this.timeListTimer = setInterval(function () {
          _this3._requestTimeListDataSource();
        }, 60000);
      }
    }, {
      key: "_timerGetOutdoorData",
      value: function _timerGetOutdoorData() {
        var _this4 = this;

        this.outdoorTimer = setInterval(function () {
          _this4._getOutdoorInfo();
        }, 120000);
      }
    }, {
      key: "_randomOutdoorData",
      value: function _randomOutdoorData() {
        var _this5 = this;

        var dataArray = [_MHLocalizableString.LocalizedStrings.airFresh, _MHLocalizableString.LocalizedStrings.airDense, _MHLocalizableString.LocalizedStrings.airMildAnoxia, _MHLocalizableString.LocalizedStrings.airBadAnoxia, _MHLocalizableString.LocalizedStrings.airPollutedSlightly, _MHLocalizableString.LocalizedStrings.airPollutedMiddle, _MHLocalizableString.LocalizedStrings.airPollutedBad];
        this.randomTimer = setInterval(function () {
          var index = Math.floor(Math.random() * dataArray.length);
          var des = dataArray[index];

          if (des == _this5.state.airDes) {
            index = Math.floor(Math.random() * dataArray.length);
            des = dataArray[index];

            _this5.setState({
              airDes: des
            });
          }

          _this5.setState({
            airDes: des
          });

          _this5._setVideoUri();
        }, 5000);
      }
    }, {
      key: "_layoutAnimation",
      value: function _layoutAnimation() {
        _reactNative.Animated.parallel([_reactNative.Animated.timing(contentViewOpacity, {
          duration: 1000,
          toValue: 1
        })]).start();
      }
    }, {
      key: "_loadDataFromMHPluginFS",
      value: function _loadDataFromMHPluginFS() {
        var _this6 = this;

        _miot.Host.file.isFileExists(this.favouriteFile).then(function (res) {
          _this6.favouriteSet = res;
        }).catch(function (err) {});

        var locationCache = [_MHGlobalData.default.locationDataUrl];

        _miot.Host.storage.load(locationCache).then(function (res) {
          console.log('load cache succeed', res);
          _MHGlobalData.default.cachedLocationData = true;
          _MHGlobalData.default.locationData = res[0];

          _this6._getOutdoorInfo();
        }).catch(function (err) {
          console.log('load cache failed', err);

          _this6._getOutdoorInfo();
        });
      }
    }, {
      key: "_loadDataFromCache",
      value: function _loadDataFromCache() {
        var _this7 = this;

        var cachePropArray = _DataUtils.default.addPrefixForItem(devicePropsArray);

        var otherCache = ['videoImageName', 'uri', 'currentUri', 'city', 'pm25_out', 'bckImageName'];
        var sizeCache = ['window_width', 'window_height'];
        var cacheArr = cachePropArray.concat(_DataUtils.default.addPrefixForItem(otherCache), sizeCache);
        (0, _MHGlobalData.print)('cacheArr---', JSON.stringify(cacheArr));

        _miot.Host.storage.load(cacheArr).then(function (res) {
          var state = {};
          (0, _MHGlobalData.print)('cacheArr---', JSON.stringify(res));
          var cacheData = res;

          if (cacheData[0]) {
            if (cacheData[0].length > 3) {
              cacheData[0] = '999';
            }

            if (_DataUtils.default.toNumber(cacheData[0]) !== _DataUtils.default.toNumber(_this7.state.pm25Num)) {
              state = (0, _objectSpread2.default)({}, state, {
                pm25Num: _LocalTimeStrings.default.addZero(String(cacheData[0]), 3)
              });
            }
          }

          if (cacheData[1]) {
            if (_DataUtils.default.toNumber(cacheData[1]) !== _DataUtils.default.toNumber(_this7.state.co2Num)) {
              state = (0, _objectSpread2.default)({}, state, {
                co2Num: cacheData[1]
              });
            }
          }

          if (cacheData[3]) {
            var speed = cacheData[3];
            speed = _DataUtils.default.toNumber(speed);
            speed = Math.max(_OtherConstant.default.ConstantOfMinSpeed, speed);
            speed = Math.min(_OtherConstant.default.ConstantOfMaxSpeed, speed);
            state = _this7.changeFavoriteSpeed(speed, state);
          }

          if (cacheData[4]) {
            if (_DataUtils.default.toNumber(cacheData[4]) !== _DataUtils.default.toNumber(_this7.state.compoundFilterPersent)) {
              state = (0, _objectSpread2.default)({}, state, {
                compoundFilterPersent: cacheData[4]
              });
            }
          }

          if (cacheData[5]) {
            if (_DataUtils.default.toNumber(cacheData[5]) !== _DataUtils.default.toNumber(_this7.state.compoundFilterLeftDay)) {
              state = (0, _objectSpread2.default)({}, state, {
                compoundFilterLeftDay: cacheData[5]
              });
            }
          }

          if (_DataUtils.default.checkBoolProp(cacheData[7])) {
            if (_DataUtils.default.toBool(cacheData[7]) !== _DataUtils.default.toBool(_this7.state.power)) {
              state = (0, _objectSpread2.default)({}, state, {
                power: cacheData[7]
              });
            }
          }

          if (cacheData[8]) {
            if (cacheData[8] != _this7.state.mode) {
              state = (0, _objectSpread2.default)({}, state, {
                mode: cacheData[8]
              });
            }
          }

          if (_DataUtils.default.checkBoolProp(cacheData[9])) {
            if (_DataUtils.default.toBool(cacheData[9]) !== _DataUtils.default.toBool(_this7.state.ptc_on)) {
              state = (0, _objectSpread2.default)({}, state, {
                ptc_on: cacheData[9]
              });
            }
          }

          if (cacheData[10]) {
            if (cacheData[10] != _this7.state.ptc_status) {
              state = (0, _objectSpread2.default)({}, state, {
                ptc_status: cacheData[10]
              });
            }
          }

          if (_DataUtils.default.checkBoolProp(cacheData[13])) {
            if (_DataUtils.default.toBool(cacheData[13]) !== _DataUtils.default.toBool(_this7.state.light)) {
              state = (0, _objectSpread2.default)({}, state, {
                light: cacheData[13]
              });
            }
          }

          if (cacheData[14]) {
            var image = _VideoUtils.default.returnImage(cacheData[14]);

            if (image !== _this7.state.videoImage) {
              state = (0, _objectSpread2.default)({}, state, {
                videoImage: cacheData[14]
              });
            }
          }

          if (cacheData[15]) {
            var videoUri = _VideoUtils.default.returnVideoUri(cacheData[15]);

            if (videoUri != _this7.state.videoUri) {
              state = (0, _objectSpread2.default)({}, state, {
                videoUri: videoUri
              });
            }
          }

          if (cacheData[16]) {
            var currentUri = _VideoUtils.default.returnVideoUri(cacheData[16]);

            if (currentUri != _this7.state.videoCurrentUri) {
              state = (0, _objectSpread2.default)({}, state, {
                videoCurrentUri: currentUri
              });
            }
          }

          if (cacheData[17]) {
            if (cacheData[17] !== _this7.state.city) {
              state = (0, _objectSpread2.default)({}, state, {
                city: cacheData[17]
              });
            }
          }

          if (cacheData[18]) {
            if (_DataUtils.default.toNumber(cacheData[18]) !== _DataUtils.default.toNumber(_this7.state.pm25OutNum)) {
              state = (0, _objectSpread2.default)({}, state, {
                pm25OutNum: cacheData[18]
              });
            }
          }

          if (cacheData[19]) {
            var bckImage = _VideoUtils.default.returnImage(cacheData[19]);

            if (bckImage !== _this7.state.bckImage) {
              state = (0, _objectSpread2.default)({}, state, {
                bckImage: bckImage
              });
            }
          }

          if (cacheData[20] && cacheData[21]) {
            _MHGlobalData.default.windowWidth = cacheData[20];
            _MHGlobalData.default.windowHeight = cacheData[21];
            _this7.hasMeasureWindow = true;
          }

          _this7.setState(state);

          _this7._getEnviromentDescription();

          _this7._initVideoUri();
        });
      }
    }, {
      key: "_getCallBackFromSubscribe",
      value: function _getCallBackFromSubscribe() {
        var _Device$getDeviceWifi,
            _this8 = this;

        (_Device$getDeviceWifi = _miot.Device.getDeviceWifi()).subscribeMessages.apply(_Device$getDeviceWifi, pageProps).then(function (subcription) {
          _this8.msgSubscription = subcription;
        });

        this.deviceListener = _miot.DeviceEvent.deviceReceivedMessages.addListener(function (device, messages) {
          var stateDic = {};

          if (messages.has("prop.co2")) {
            var co2 = _DataUtils.default.getValueFromMap(messages, "prop.co2");

            stateDic = (0, _objectSpread2.default)({}, stateDic, {
              co2Num: co2
            });

            _this8.updateCacheData("co2", co2);
          }

          if (messages.has("prop.pm25")) {
            var pm25 = _DataUtils.default.getValueFromMap(messages, "prop.pm25");

            if (pm25.length > 3) {
              pm25 = '999';
            }

            var cachePm25 = _LocalTimeStrings.default.addZero(String(pm25), 3);

            if (_DataUtils.default.toNumber(pm25) !== _DataUtils.default.toNumber(_this8.state.pm25Num)) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                pm25Num: cachePm25
              });
            }

            _this8.updateCacheData("pm25", cachePm25);
          }

          if (messages.has("prop.filter_rate")) {
            var filter_rate = _DataUtils.default.getValueFromMap(messages, "prop.filter_rate");

            if (_DataUtils.default.toNumber(filter_rate) !== _DataUtils.default.toNumber(_this8.state.compoundFilterPersent)) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                compoundFilterPersent: filter_rate
              });
            }

            _this8.updateCacheData("filter_rate", filter_rate);
          }

          if (messages.has("prop.filter_day")) {
            var filter_day = _DataUtils.default.getValueFromMap(messages, "prop.filter_day");

            if (_DataUtils.default.toNumber(filter_day) !== _DataUtils.default.toNumber(_this8.state.compoundFilterLeftDay)) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                compoundFilterLeftDay: filter_day
              });
            }

            _this8.updateCacheData("filter_day", filter_day);
          }

          if (messages.has("prop.power")) {
            _this8._requestTimeListDataSource();

            var power = _this8._checkValueParm(_DataUtils.default.getValueFromMap(messages, "prop.power"));

            if (power != _this8.state.power) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                power: power
              });
            }

            _this8.updateCacheData("power", power);
          }

          if (messages.has("prop.mode")) {
            var mode = _DataUtils.default.getValueFromMap(messages, "prop.mode");

            if (mode != _this8.state.mode) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                mode: mode
              });
            }

            _this8.updateCacheData("mode", mode);
          }

          if (messages.has("prop.ptc_on")) {
            var ptc = _this8._checkValueParm(_DataUtils.default.getValueFromMap(messages, "prop.ptc_on"));

            if (ptc != _this8.state.ptc_on) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                ptc_on: ptc
              });
            }

            _this8.updateCacheData("ptc_on", ptc);
          }

          if (messages.has("prop.ptc_status")) {
            var ptc_status = _this8._checkValueParm(_DataUtils.default.getValueFromMap(messages, "prop.ptc_status"));

            if (ptc_status != _this8.state.ptc_status) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                ptc_status: ptc_status
              });
            }

            _this8.updateCacheData("ptc_status", ptc_status);
          }

          if (messages.has("prop.favourite_speed")) {
            var speed = _DataUtils.default.getValueFromMap(messages, "prop.favourite_speed");

            speed = _DataUtils.default.toNumber(speed);
            speed = Math.max(_OtherConstant.default.ConstantOfMinSpeed, speed);
            speed = Math.min(_OtherConstant.default.ConstantOfMaxSpeed, speed);
            stateDic = _this8.changeFavoriteSpeed(speed, stateDic);

            _this8.updateCacheData("favourite_speed", speed);
          }

          if (messages.has("prop.temperature_outside")) {
            var temperature_outside = _DataUtils.default.getValueFromMap(messages, "prop.temperature_outside");

            if (_DataUtils.default.toNumber(temperature_outside) !== _DataUtils.default.toNumber(_this8.state.tempOut)) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                tempOut: temperature_outside
              });
            }

            if (_DataUtils.default.toNumber(temperature_outside) > 20 && _this8.state.ptc_on) {
              _this8.refs.toast.show(_MHLocalizableString.LocalizedStrings.ptcTipDesc);
            }

            _this8.updateCacheData("temperature_outside", temperature_outside);
          }

          if (messages.has("prop.child_lock")) {
            var child_lock = _DataUtils.default.getValueFromMap(messages, "prop.child_lock");

            var lock = _this8._checkValueParm(child_lock);

            if (lock != _this8.state.childLock) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                childLock: lock
              });
            }

            _this8.updateCacheData("child_lock", lock);
          }

          if (messages.has("prop.sound")) {
            var sound = _this8._checkValueParm(_DataUtils.default.getValueFromMap(messages, "prop.sound"));

            _this8.updateCacheData("sound", sound);
          }

          if (messages.has("prop.display")) {
            var display = _this8._checkValueParm(_DataUtils.default.getValueFromMap(messages, "prop.display"));

            _this8.updateCacheData("display", display);

            if (display !== _this8.state.light) {
              stateDic = (0, _objectSpread2.default)({}, stateDic, {
                light: display
              });
            }
          }

          _this8._setState(stateDic);

          _this8._getEnviromentDescription();

          _this8._setVideoUri();
        });
      }
    }, {
      key: "_requestTimeListDataSource",
      value: function _requestTimeListDataSource() {
        var _this9 = this;

        if (!_miot.Device.isOnline) {
          return;
        }

        var timeMargin = 3600;
        var weekTimeMargin = 604800;
        var currentTime = parseInt(_LocalTimeStrings.default.getCurrentSecond());
        var totalHour = parseInt(currentTime / timeMargin);
        var currentWeek = new Date(currentTime * 1000).getDay();
        var currentHour = new Date(currentTime * 1000).getHours();
        var today_start = (totalHour - currentHour) * timeMargin;

        var weekTimes = _LocalTimeStrings.default.getCurrnentWeekTime(currentWeek, today_start);

        var timeListArr = [];
        var timeArr = [];

        _RpcManage.default.getInstance().rpcRequest("get_timer", null, function () {
          _RequestHelp.default.getTimeList(null).then(function (callback) {
            if (callback.code == 0) {
              var daysBinaryArr = [];
              var dayArr = [];

              if (callback.result) {
                var data = _LocalTimeStrings.default.filterTimeListData(callback.result);

                if (data.length > 0) {
                  for (var i = 0; i < data.length; i++) {
                    var item = _LocalTimeStrings.default.initTimeItemData(data[i], i);

                    timeListArr.push(item);

                    if (item.isEmpty == false) {
                      dayArr.push(item);

                      if (item.hexSum && item.status == "enable") {
                        var days = _LocalTimeStrings.default.hexToBinaryFrom1To7(item.hexSum);

                        timeArr.push(item);
                        daysBinaryArr.push(days);
                      }
                    }
                  }

                  if (dayArr.length > 0) {
                    if (daysBinaryArr.length > 0) {
                      var totalMinArr = [];

                      for (var j = 0; j < daysBinaryArr.length; j++) {
                        var _item = String(daysBinaryArr[j]);

                        var tempArrayStart = [];
                        var tempArrayEnd = [];
                        var is_start = false;

                        for (var k = 0; k < _item.length; k++) {
                          if (_item.substr(k, 1) == 1) {
                            if (timeArr[j].startTime != _LocalTimeStrings.default.blank) {
                              var itemTime = weekTimes[k];
                              var propsArray = [];
                              propsArray = String(timeArr[j].startTime).split(":");
                              itemTime = itemTime + parseInt(propsArray[0]) * 3600 + parseInt(propsArray[1]) * 60;

                              if (itemTime < currentTime) {
                                itemTime = weekTimeMargin + itemTime;
                              }

                              tempArrayStart.push(itemTime);
                            }

                            if (timeArr[j].endTime !== _LocalTimeStrings.default.blank) {
                              var itemTimeEnd = weekTimes[k];
                              var endArray = [];
                              endArray = String(timeArr[j].endTime).split(":");
                              itemTimeEnd = itemTimeEnd + parseInt(endArray[0]) * 3600 + parseInt(endArray[1]) * 60;

                              if (itemTimeEnd < currentTime) {
                                itemTimeEnd = weekTimeMargin + itemTimeEnd;
                              }

                              tempArrayEnd.push(itemTimeEnd);
                            }
                          }
                        }

                        var min_time_start = Math.min.apply(null, tempArrayStart);
                        var min_time_end = Math.min.apply(null, tempArrayEnd);
                        var min_time = min_time_start > min_time_end ? min_time_end : min_time_start;
                        is_start = min_time_start > min_time_end ? false : true;
                        var min_item = {
                          "time": min_time,
                          "is_start": is_start
                        };
                        totalMinArr.push(min_item);
                      }

                      var temp_min = totalMinArr[0].time;
                      var temp_index = 0;

                      for (var h = 0; h < totalMinArr.length; h++) {
                        if (temp_min >= totalMinArr[h].time) {
                          temp_min = totalMinArr[h].time;
                          temp_index = h;
                        }
                      }

                      var time_margin = totalMinArr[temp_index].time - currentTime;
                      var left_hours = parseInt(time_margin / 3600);
                      var left_hour = parseInt(left_hours / 24) > 0 ? parseInt(left_hours % 24) : left_hours;
                      var left_day_tip = parseInt(left_hours / 24) > 0 ? parseInt(left_hours / 24) + (parseInt(left_hours / 24) ? _MHLocalizableString.LocalizedStrings.days : _MHLocalizableString.LocalizedStrings.day) : '';
                      var left_minutes = parseInt(time_margin % 3600);
                      var left_minute = parseInt(left_minutes % 60) == 0 ? parseInt(left_minutes / 60) : parseInt(left_minutes / 60) + 1;
                      var state_dis = totalMinArr[temp_index].is_start == true ? _MHLocalizableString.LocalizedStrings.open_dis : _MHLocalizableString.LocalizedStrings.close_dis;
                      state_dis = _MHGlobalData.default.isEnglish ? state_dis : '';
                      var state = totalMinArr[temp_index].is_start == true ? _MHLocalizableString.LocalizedStrings.open : _MHLocalizableString.LocalizedStrings.close;
                      var left_hour_tip = left_hour == 0 ? '' : left_hour + (left_hour > 1 ? _MHLocalizableString.LocalizedStrings.hours : _MHLocalizableString.LocalizedStrings.hour);
                      left_hour_tip = left_minute == 60 ? left_hour + 1 + (left_hour >= 1 ? _MHLocalizableString.LocalizedStrings.hours : _MHLocalizableString.LocalizedStrings.hour) + _MHLocalizableString.LocalizedStrings.later : left_hour_tip;
                      var left_minute_tip = left_minute == 0 ? '' : left_minute + (left_minute >= 1 ? _MHLocalizableString.LocalizedStrings.minutes : _MHLocalizableString.LocalizedStrings.minute) + _MHLocalizableString.LocalizedStrings.later;
                      left_minute_tip = left_minute == 60 ? '' : left_minute_tip;
                      var left_tip = state_dis + left_day_tip + left_hour_tip + left_minute_tip + state;

                      if (left_tip != _this9.state.timeDes) {
                        _this9.setState({
                          timeDes: left_tip
                        });
                      }
                    } else {
                      _this9.setState({
                        timeDes: _MHLocalizableString.LocalizedStrings.notStart
                      });
                    }
                  } else {
                    _this9.setState({
                      timeDes: _MHLocalizableString.LocalizedStrings.notAdd
                    });
                  }
                } else {
                  _this9.setState({
                    timeDes: _MHLocalizableString.LocalizedStrings.notAdd
                  });
                }

                _this9.setState({
                  timeListArray: timeListArr
                });
              }
            }
          }).catch(function (err) {});
        });
      }
    }, {
      key: "loadPrivacyAuthed",
      value: function loadPrivacyAuthed() {
        var params = {
          'did': _miot.Device.deviceID,
          'props': ["prop.s_auth_config"]
        };

        _miot.Service.smarthome.batchGetDeviceDatas([params]).then(function (res) {
          var alreadyAuthed = false;
          var result = res[_miot.Device.deviceID];
          var config;

          if (result && result['prop.s_auth_config']) {
            config = result['prop.s_auth_config'];
          }

          if (config) {
            try {
              var authJson = JSON.parse(config);
              alreadyAuthed = authJson.privacyAuthed && true;
            } catch (err) {}
          }

          if (alreadyAuthed) {
            return new Promise.resolve("已经授权");
          } else {
            _miot.Host.ui.openPrivacyLicense(_MHLocalizableString.LocalizedStrings.license, _MHLocalizableString.LocalizedStrings.licenseUrl, _MHLocalizableString.LocalizedStrings.privacy, _MHLocalizableString.LocalizedStrings.privacyUrl).then(function (res) {
              if (res) {
                return _miot.Service.smarthome.batchSetDeviceDatas([{
                  did: _miot.Device.deviceID,
                  props: {
                    "prop.s_auth_config": JSON.stringify({
                      'privacyAuthed': 'true'
                    })
                  }
                }]);
              } else {
                return new Promise.reject("取消授权");
              }
            });
          }
        }).catch(function (err) {
          console.log('授权错误', err);
        });
      }
    }, {
      key: "_getPropFromApiWithPropArrs",
      value: function _getPropFromApiWithPropArrs() {
        var _this10 = this;

        if (!_miot.Device.isOnline) {
          return;
        }

        var cachePropArray = _DataUtils.default.addPrefixForItem(devicePropsArray);

        var props = ["all"];

        _RpcManage.default.getInstance().rpcRequest("get_prop", props, function () {
          _RequestHelp.default.getProps(props).then(function (res) {
            if (res.code == 0) {
              (0, _MHGlobalData.print)("get_prop-----" + JSON.stringify(res));
              _this10.requesetCount = 0;
              var propsArray = String(res.result).split(",");
              var cacheDic = cacheDictionary;
              var stateDic = {};

              if (propsArray[0]) {
                if (propsArray[0].length > 3) {
                  propsArray[0] = '999';
                }

                cacheDic[cachePropArray[0]] = _LocalTimeStrings.default.addZero(String(propsArray[0]), 3);

                if (_DataUtils.default.toNumber(propsArray[0]) !== _DataUtils.default.toNumber(_this10.state.pm25Num)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    pm25Num: _LocalTimeStrings.default.addZero(String(propsArray[0]), 3)
                  });
                }
              }

              if (propsArray[1]) {
                cacheDic[cachePropArray[1]] = propsArray[1];

                if (_DataUtils.default.toNumber(propsArray[1]) !== _DataUtils.default.toNumber(_this10.state.co2Num)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    co2Num: propsArray[1]
                  });
                }
              }

              if (propsArray[2]) {
                cacheDic[cachePropArray[2]] = propsArray[2];

                if (_DataUtils.default.toNumber(propsArray[2]) !== _DataUtils.default.toNumber(_this10.state.tempOut)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    tempOut: propsArray[2]
                  });
                }
              }

              if (propsArray[3]) {
                var speed = propsArray[3];
                speed = _DataUtils.default.toNumber(speed);
                speed = Math.max(_OtherConstant.default.ConstantOfMinSpeed, speed);
                speed = Math.min(_OtherConstant.default.ConstantOfMaxSpeed, speed);
                cacheDic[cachePropArray[3]] = speed;
                stateDic = _this10.changeFavoriteSpeed(speed, stateDic);
              }

              if (propsArray[4]) {
                cacheDic[cachePropArray[4]] = propsArray[4];

                if (_DataUtils.default.toNumber(propsArray[4]) !== _DataUtils.default.toNumber(_this10.state.compoundFilterPersent)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    compoundFilterPersent: propsArray[4]
                  });
                }
              }

              if (propsArray[5]) {
                cacheDic[cachePropArray[5]] = propsArray[5];

                if (_DataUtils.default.toNumber(propsArray[5]) !== _DataUtils.default.toNumber(_this10.state.compoundFilterLeftDay)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    compoundFilterLeftDay: propsArray[5]
                  });
                }
              }

              if (propsArray[6]) {
                cacheDic[cachePropArray[6]] = propsArray[6];

                if (_DataUtils.default.toNumber(propsArray[6]) !== _DataUtils.default.toNumber(_this10.state.currentSpeed)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    currentSpeed: propsArray[6]
                  });
                }
              }

              if (_DataUtils.default.checkBoolProp(propsArray[7])) {
                var power = _this10._checkValueParm(propsArray[7]);

                cacheDic[cachePropArray[7]] = power;

                if (power !== _this10.state.power) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    power: power
                  });
                }
              }

              if (propsArray[8]) {
                var mode = propsArray[8];
                cacheDic[cachePropArray[8]] = mode;

                if (mode !== _this10.state.mode) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    mode: mode
                  });
                }
              }

              if (_DataUtils.default.checkBoolProp(propsArray[9])) {
                var ptc = _this10._checkValueParm(propsArray[9]);

                cacheDic[cachePropArray[9]] = ptc;

                if (ptc !== _this10.state.ptc_on) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    ptc_on: ptc
                  });
                }
              }

              if (propsArray[10]) {
                var ptc_status = _this10._checkValueParm(propsArray[10]);

                cacheDic[cachePropArray[10]] = ptc_status;

                if (ptc_status !== _this10.state.ptc_status) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    ptc_status: ptc_status
                  });
                }
              }

              if (_DataUtils.default.checkBoolProp(propsArray[11])) {
                var lock = _this10._checkValueParm(propsArray[11]);

                cacheDic[cachePropArray[11]] = lock;

                if (lock !== _this10.state.childLock) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    childLock: lock
                  });
                }
              }

              if (_DataUtils.default.checkBoolProp(propsArray[12])) {
                var sound = _this10._checkValueParm(propsArray[12]);

                cacheDic[cachePropArray[12]] = sound;
              }

              if (_DataUtils.default.checkBoolProp(propsArray[13])) {
                var display = _this10._checkValueParm(propsArray[13]);

                cacheDic[cachePropArray[13]] = display;

                if (_this10.state.light !== display) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    light: display
                  });
                }
              }

              if (_this10.state.videoImage) {
                var key = _DataUtils.default.addPrefix(_MHGlobalData.default.cachePrefix, "videoImageName");

                cacheDic[key] = _this10.state.videoImage;
              }

              cacheDictionary = cacheDic;

              _this10._setState(stateDic);

              _this10.storeCache(cacheDic);

              (0, _MHGlobalData.print)('MHGlobal.cachePrefix--', JSON.stringify(cacheDic));

              _this10._getEnviromentDescription();

              _this10._initVideoUri();
            }
          }).catch(function (err) {
            (0, _MHGlobalData.print)("get_prop---err--" + JSON.stringify(err));

            if (err.message == "device offline") {
              return;
            } else {
              _this10.requesetCount++;

              if (_this10.requesetCount < 3) {
                _this10._getPropFromApiWithPropArrs();
              }
            }
          });
        });
      }
    }, {
      key: "_getPropFromApiWithSensor",
      value: function _getPropFromApiWithSensor() {
        var _this11 = this;

        if (!_miot.Device.isOnline) {
          return;
        }

        var propArr = ["pm25", "co2"];

        _RpcManage.default.getInstance().rpcRequest("get_sensor", propArr, function () {
          _RequestHelp.default.getSensor(propArr).then(function (res) {
            if (res.code == 0) {
              console.log("get_sensor-----" + JSON.stringify(res));
              var propsArray = String(res.result).split(",");
              var stateDic = {};

              if (propsArray[0]) {
                if (propsArray[0].length > 3) {
                  propsArray[0] = '999';
                }

                if (_DataUtils.default.toNumber(propsArray[0]) !== _DataUtils.default.toNumber(_this11.state.pm25Num)) {
                  if (propsArray[0].length > 3) {
                    propsArray[0] = "999";
                  }

                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    pm25Num: _LocalTimeStrings.default.addZero(String(propsArray[0]), 3)
                  });

                  _this11.updateCacheData("pm25", _LocalTimeStrings.default.addZero(String(propsArray[0]), 3));
                }
              }

              if (propsArray[1]) {
                if (_DataUtils.default.toNumber(propsArray[1]) !== _DataUtils.default.toNumber(_this11.state.co2Num)) {
                  stateDic = (0, _objectSpread2.default)({}, stateDic, {
                    co2Num: propsArray[1]
                  });

                  _this11.updateCacheData("co2", propsArray[1]);
                }
              }

              _this11._setState(stateDic);

              _reactNative.DeviceEventEmitter.emit('get_sensor_data', {
                "pm25": propsArray[0],
                "co2": propsArray[1]
              });

              _this11._getEnviromentDescription();

              _this11._setVideoUri();
            }
          }).catch(function (err) {
            console.log("get_sensor-----" + JSON.stringify(err));
          });
        });
      }
    }, {
      key: "_getWeatherInfoFromApi",
      value: function _getWeatherInfoFromApi() {
        var _this12 = this;

        _miot.Service.smarthome.getWeatherInfo(_MHGlobalData.default.deviceId).then(function (res) {
          if (Object.prototype.hasOwnProperty.call(res, "city")) {
            var city = res["city"];

            if (city !== _this12.state.city) {
              _this12.setState({
                city: res["city"]
              });
            }

            _this12.updateCacheData("city", city);
          }

          if (Object.prototype.hasOwnProperty.call(res, "pm25")) {
            var pm25Out = res["pm25"];

            if (_DataUtils.default.toNumber(pm25Out) != _DataUtils.default.toNumber(_this12.state.pm25OutNum)) {
              _this12.setState({
                pm25OutNum: pm25Out
              });
            }

            _this12.updateCacheData("pm25_out", pm25Out);
          }
        }).catch(function (err) {});

        this.requestedWeatherApi = true;
      }
    }, {
      key: "_getWeatherInfoFromCacheApi",
      value: function _getWeatherInfoFromCacheApi() {
        var _this13 = this;

        var dataArr = String(_MHGlobalData.default.locationData).split("-");
        var latitude = dataArr[0];
        var longitude = dataArr[1];
        var param = {};
        param["latitude"] = latitude;
        param["longitude"] = longitude;

        _miot.Service.smarthome.getAreaPropInfo(param).then(function (response) {
          if (response.code == 0) {
            if (response["result"]) {
              var resultDic = response["result"];
              var key = Object.keys(resultDic)[0];
              var cityDic = resultDic[key];

              if (cityDic.hasOwnProperty("city_name")) {
                var city = cityDic["city_name"];

                if (city !== _this13.state.city) {
                  _this13.setState({
                    city: city
                  });
                }

                _this13.updateCacheData("city", city);
              }

              if (cityDic.hasOwnProperty("pm2.5")) {
                var pm25Out = cityDic["pm2.5"];

                if (_DataUtils.default.toNumber(pm25Out) !== _DataUtils.default.toNumber(_this13.state.pm25OutNum)) {
                  _this13.setState({
                    pm25OutNum: pm25Out
                  });
                }

                _this13.updateCacheData("pm25_out", pm25Out);
              }
            }
          } else {}
        }).catch(function (err) {});

        this.requestedWeatherApi = true;
      }
    }, {
      key: "_getOutdoorInfo",
      value: function _getOutdoorInfo() {
        if (_MHGlobalData.default.cachedLocationData == false) {
          this._getWeatherInfoFromApi();
        } else {
          if (_MHGlobalData.default.locationData) {
            _MHGlobalData.default.cachedLocationData = false;

            this._getWeatherInfoFromCacheApi();
          } else {
            this._getWeatherInfoFromApi();
          }
        }
      }
    }, {
      key: "_getEnviromentDescription",
      value: function _getEnviromentDescription() {
        var pm25Str = _LocalTimeStrings.default.descriptionOfPm25(this.state.pm25Num);

        var co2Str = _LocalTimeStrings.default.descriptionOfCo2(this.state.co2Num);

        var pm25Index = _LocalTimeStrings.default.indexOfPm25(this.state.pm25Num);

        var co2Index = _LocalTimeStrings.default.indexOfCo2(this.state.co2Num);

        var des = _LocalTimeStrings.default.descriptionOfEnviroment(pm25Str, co2Str, pm25Index, co2Index);

        if (des !== this.state.airDes) {
          this.setState({
            airDes: des
          });
        }
      }
    }, {
      key: "_initVideoUri",
      value: function _initVideoUri() {
        var mode = this.state.mode;
        var power = this.state.power;
        var airDes = this.state.airDes;
        var uri = this.state.videoUri;
        var bckImageUrl = this.state.bckImage;
        var videoImage = this.state.videoImage;
        var videoCurrentUri = uri;
        var bckStateImage = this.state.bckState;
        var videoName = bckVideoUri;

        if (airDes == _MHLocalizableString.localStrings.airFresh) {
          bckStateImage = mode == "sleep" ? "good_night" : "good_day";

          if (power) {
            videoImageName = mode == "sleep" ? 'good_night_bg.png' : 'good_day_bg.png';
            bckImageName = mode == "sleep" ? 'good_night_off_bg.png' : 'good_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'good_night_x.mp4' : 'good_night.mp4' : _MHGlobalData.default.isIphoneX ? 'good_day_x.mp4' : 'good_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'good_night_off_bg.png' : 'good_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'good_night_x.mp4' : 'good_night.mp4' : _MHGlobalData.default.isIphoneX ? 'good_day_x.mp4' : 'good_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }
        }

        if (airDes == _MHLocalizableString.localStrings.airPollutedSlightly || airDes == _MHLocalizableString.localStrings.airDense) {
          bckStateImage = mode == "sleep" ? "mild_night" : "mild_day";

          if (power) {
            bckImageName = mode == "sleep" ? 'medium_night_bg.png' : 'medium_day_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'mild_night_x.mp4' : 'mild_night.mp4' : _MHGlobalData.default.isIphoneX ? 'mild_day_x.mp4' : 'mild_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'medium_night_off_bg.png' : 'medium_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'mild_night_x.mp4' : 'mild_night.mp4' : _MHGlobalData.default.isIphoneX ? 'mild_day_x.mp4' : 'mild_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }
        }

        if (airDes == _MHLocalizableString.localStrings.airPollutedMiddle || airDes == _MHLocalizableString.localStrings.airMildAnoxia) {
          bckStateImage = mode == "sleep" ? "medium_night" : "medium_day";

          if (power) {
            bckImageName = mode == "sleep" ? 'medium_night_bg.png' : 'medium_day_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'medium_night_x.mp4' : 'medium_night.mp4' : _MHGlobalData.default.isIphoneX ? 'medium_day_x.mp4' : 'medium_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'medium_night_off_bg.png' : 'medium_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'medium_night_off_x.mp4' : 'medium_night_off.mp4' : _MHGlobalData.default.isIphoneX ? 'medium_day_off_x.mp4' : 'medium_day_off.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = null;
          }
        }

        if (airDes == _MHLocalizableString.localStrings.airPollutedBad || airDes == _MHLocalizableString.localStrings.airBadAnoxia) {
          bckStateImage = mode == "sleep" ? "bad_night" : "bad_day";

          if (power) {
            bckImageName = mode == "sleep" ? 'bad_night_bg.png' : 'bad_day_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'bad_night_x.mp4' : 'bad_night.mp4' : _MHGlobalData.default.isIphoneX ? 'bad_day_x.mp4' : 'bad_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'bad_night_off_bg.png' : 'bad_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'bad_night_off_x.mp4' : 'bad_night_off.mp4' : _MHGlobalData.default.isIphoneX ? 'bad_day_off_x.mp4' : 'bad_day_off.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = null;
          }
        }

        videoImage = _VideoUtils.default.returnImage(bckImageName);

        if (power !== _DataUtils.default.toBool(this.prePower)) {
          if (bckImageUrl) {
            if (!power) {
              bckForChangeImageOpacity.setValue(0);

              _reactNative.Animated.parallel([_reactNative.Animated.timing(bckForChangeImageOpacity, {
                duration: 500,
                toValue: 1,
                easing: _reactNative.Easing.linear
              })]).start();
            }

            this.prePower = this.state.power;
          }
        }

        this.updateCacheData("videoImageName", videoImageName);
        this.updateCacheData("bckImageName", bckImageName);
        var state = {};

        if (uri !== this.state.videoCurrentUri) {
          state = (0, _objectSpread2.default)({}, state, {
            videoImage: videoImage,
            videoCurrentUri: uri
          });
        }

        if (bckStateImage !== this.state.bckCurrentState) {
          state = (0, _objectSpread2.default)({}, state, {
            bckCurrentImage: bckImageUrl,
            bckState: bckStateImage
          });
        }

        this._setState(state);
      }
    }, {
      key: "_setVideoUri",
      value: function _setVideoUri() {
        var mode = this.state.mode;
        var power = this.state.power;
        var airDes = this.state.airDes;
        var uri = this.state.videoUri;
        var bckImageUrl = this.state.bckImage;
        var videoImage = this.state.videoImage;
        var videoCurrentUri = uri;
        var bckStateImage = this.state.bckState;
        var videoName = bckVideoUri;

        if (airDes == _MHLocalizableString.localStrings.airFresh) {
          bckStateImage = mode == "sleep" ? "good_night" : "good_day";

          if (power) {
            videoImageName = mode == "sleep" ? 'good_night_bg.png' : 'good_day_bg.png';
            bckImageName = mode == "sleep" ? 'good_night_off_bg.png' : 'good_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'good_night_x.mp4' : 'good_night.mp4' : _MHGlobalData.default.isIphoneX ? 'good_day_x.mp4' : 'good_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'good_night_off_bg.png' : 'good_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'good_night_x.mp4' : 'good_night.mp4' : _MHGlobalData.default.isIphoneX ? 'good_day_x.mp4' : 'good_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }
        }

        if (airDes == _MHLocalizableString.localStrings.airPollutedSlightly || airDes == _MHLocalizableString.localStrings.airDense) {
          bckStateImage = mode == "sleep" ? "mild_night" : "mild_day";

          if (power) {
            bckImageName = mode == "sleep" ? 'medium_night_bg.png' : 'medium_day_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'mild_night_x.mp4' : 'mild_night.mp4' : _MHGlobalData.default.isIphoneX ? 'mild_day_x.mp4' : 'mild_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'medium_night_off_bg.png' : 'medium_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'mild_night_x.mp4' : 'mild_night.mp4' : _MHGlobalData.default.isIphoneX ? 'mild_day_x.mp4' : 'mild_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }
        }

        if (airDes == _MHLocalizableString.localStrings.airPollutedMiddle || airDes == _MHLocalizableString.localStrings.airMildAnoxia) {
          bckStateImage = mode == "sleep" ? "medium_night" : "medium_day";

          if (power) {
            bckImageName = mode == "sleep" ? 'medium_night_bg.png' : 'medium_day_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'medium_night_x.mp4' : 'medium_night.mp4' : _MHGlobalData.default.isIphoneX ? 'medium_day_x.mp4' : 'medium_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'medium_night_off_bg.png' : 'medium_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'medium_night_off_x.mp4' : 'medium_night_off.mp4' : _MHGlobalData.default.isIphoneX ? 'medium_day_off_x.mp4' : 'medium_day_off.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = null;
          }
        }

        if (airDes == _MHLocalizableString.localStrings.airPollutedBad || airDes == _MHLocalizableString.localStrings.airBadAnoxia) {
          bckStateImage = mode == "sleep" ? "bad_night" : "bad_day";

          if (power) {
            bckImageName = mode == "sleep" ? 'bad_night_bg.png' : 'bad_day_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'bad_night_x.mp4' : 'bad_night.mp4' : _MHGlobalData.default.isIphoneX ? 'bad_day_x.mp4' : 'bad_day.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = _VideoUtils.default.returnImage(bckImageName);
          }

          if (!power) {
            bckImageName = mode == "sleep" ? 'bad_night_off_bg.png' : 'bad_day_off_bg.png';
            videoName = mode == "sleep" ? _MHGlobalData.default.isIphoneX ? 'bad_night_off_x.mp4' : 'bad_night_off.mp4' : _MHGlobalData.default.isIphoneX ? 'bad_day_off_x.mp4' : 'bad_day_off.mp4';
            uri = _VideoUtils.default.returnVideoUri(videoName);
            bckImageUrl = null;
          }
        }

        videoImage = _VideoUtils.default.returnImage(bckImageName);
        this.updateCacheData("videoImageName", videoImageName);
        this.updateCacheData("bckImageName", bckImageName);

        if (power !== _DataUtils.default.toBool(this.prePower)) {
          if (bckImageUrl) {
            if (power) {
              bckForChangeImageOpacity.setValue(1);

              _reactNative.Animated.parallel([_reactNative.Animated.timing(bckForChangeImageOpacity, {
                duration: 1000,
                toValue: 0,
                easing: _reactNative.Easing.linear
              })]).start();
            }

            if (!power) {
              bckForChangeImageOpacity.setValue(0);

              _reactNative.Animated.parallel([_reactNative.Animated.timing(bckForChangeImageOpacity, {
                duration: 1000,
                toValue: 1,
                easing: _reactNative.Easing.linear
              })]).start();
            }

            this.prePower = this.state.power;
          }
        }

        if (videoCurrentOpacity['_value'] >= 0.50 && videoOpacity['_value'] < 0.5) {
          this.updateCacheData("uri", videoName);

          if (uri != this.state.videoCurrentUri) {
            this.setState({
              videoImage: videoImage,
              videoUri: uri
            });

            _reactNative.Animated.parallel([_reactNative.Animated.timing(videoCurrentOpacity, {
              duration: 1000,
              toValue: 0
            }), _reactNative.Animated.timing(videoOpacity, {
              duration: 1000,
              toValue: 1
            })], {}).start();
          }
        }

        if (videoCurrentOpacity['_value'] < 0.5 && videoOpacity['_value'] >= 0.5) {
          this.updateCacheData("currentUri", videoName);

          if (uri != this.state.videoUri) {
            this.setState({
              videoImage: videoImage,
              videoCurrentUri: uri
            });

            _reactNative.Animated.parallel([_reactNative.Animated.timing(videoCurrentOpacity, {
              duration: 1000,
              toValue: 1
            }), _reactNative.Animated.timing(videoOpacity, {
              duration: 1000,
              toValue: 0
            })], {}).start();
          }
        }

        if (bckStateImage != this.state.bckCurrentState) {
          this.setState({
            bckImage: bckImageUrl,
            bckState: bckStateImage
          });

          if (!power) {
            if (bckCurrentImageOpacity['_value'] >= 0.50 && bckImageOpacity['_value'] < 0.5) {
              bckCurrentImageOpacity.setValue(1);
              bckImageOpacity.setValue(0);

              _reactNative.Animated.parallel([_reactNative.Animated.timing(bckCurrentImageOpacity, {
                duration: 1000,
                toValue: 0,
                easing: _reactNative.Easing.linear
              }), _reactNative.Animated.timing(bckImageOpacity, {
                duration: 1000,
                toValue: 1,
                easing: _reactNative.Easing.linear
              })], {}).start();
            }
          }
        }

        if (bckStateImage != this.state.bckState) {
          this.setState({
            bckCurrentImage: bckImageUrl,
            bckCurrentState: bckStateImage
          });

          if (!power) {
            if (bckCurrentImageOpacity['_value'] < 0.5 && bckImageOpacity['_value'] >= 0.5) {
              bckCurrentImageOpacity.setValue(0);
              bckImageOpacity.setValue(1);

              _reactNative.Animated.parallel([_reactNative.Animated.timing(bckCurrentImageOpacity, {
                duration: 1000,
                toValue: 1,
                easing: _reactNative.Easing.linear
              }), _reactNative.Animated.timing(bckImageOpacity, {
                duration: 1000,
                toValue: 0,
                easing: _reactNative.Easing.linear
              })], {}).start();
            }
          }
        }
      }
    }, {
      key: "listerDeviceNameChangeed",
      value: function listerDeviceNameChangeed() {
        var _this14 = this;

        this._deviceNameChangedListener = _miot.DeviceEvent.deviceNameChanged.addListener(function (device) {
          _this14.setState({
            deviceName: device.name
          });
        });
      }
    }, {
      key: "_getHistoryData",
      value: function _getHistoryData(keys) {
        var _this15 = this;

        if (!_miot.Device.isOnline) {
          return;
        }

        var totalHour = 24;
        var marginMinute = 15;

        var endTime = _LocalTimeStrings.default.getCurrentSecond();

        var startTime = _LocalTimeStrings.default.getMainEndSecond(endTime, totalHour);

        var timePointArr = _LocalTimeStrings.default.getMainTimeArray(endTime, totalHour, marginMinute);

        this.setState({
          timePointArr: timePointArr
        });
        var left = new Promise(function (resolve, reject) {
          _LocalTimeStrings.default.getHistoryData_test(keys[0], startTime, endTime, function (data) {
            resolve(data);
          });
        });
        var right = new Promise(function (resolve, reject) {
          _LocalTimeStrings.default.getHistoryData_test(keys[1], startTime, endTime, function (data) {
            resolve(data);
          });
        });
        Promise.all([left, right]).then(function (values) {
          for (var j = 0; j < values[0].length; j++) {
            _this15._findAreaOfTime(values[0][j]["time"], values[0][j]["value"], keys[0]);
          }

          for (var _j = 0; _j < values[1].length; _j++) {
            _this15._findAreaOfTime(values[1][_j]["time"], values[1][_j]["value"], keys[1]);
          }

          var totalHour = 12;

          var array = _LocalTimeStrings.default.getTimesArray(endTime, totalHour);

          _this15._filterData(array, _this15.state.timePointArr);
        });
      }
    }, {
      key: "_findAreaOfTime",
      value: function _findAreaOfTime(time, value, key) {
        var timePointArr = this.state.timePointArr;

        for (var i = 0; i < timePointArr.length - 1; i++) {
          if (time <= _DataUtils.default.toNumber(timePointArr[i]["time"]) && time > _DataUtils.default.toNumber(timePointArr[i + 1]["time"])) {
            if (key == "co2") {
              timePointArr[i].co2Sum += _DataUtils.default.toNumber(value);
              timePointArr[i].co2Count += 1;
            }

            if (key == "pm25") {
              timePointArr[i].pm25Sum += _DataUtils.default.toNumber(value);
              timePointArr[i].pm25Count += 1;
            }

            break;
          }
        }
      }
    }, {
      key: "changeFavoriteSpeed",
      value: function changeFavoriteSpeed(speed) {
        var dic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (speed !== _DataUtils.default.toNumber(this.state.favourite_speed)) {
          var margin = _DataUtils.default.toNumber(_OtherConstant.default.ConstantOfMaxSpeed - _OtherConstant.default.ConstantOfMinSpeed);

          var value = (speed - _OtherConstant.default.ConstantOfMinSpeed) / margin;
          this.loveAreaDataSource.currentSpeed = speed;
          this.loveAreaDataSource.sliderValue = value;
          dic = (0, _objectSpread2.default)({}, dic, {
            favourite_speed: speed,
            loveAreaDataSource: this.loveAreaDataSource
          });
        }

        return dic;
      }
    }, {
      key: "_loadLanguage",
      value: function _loadLanguage() {
        global.language = _miot.Host.locale.language;
      }
    }, {
      key: "updateCacheData",
      value: function updateCacheData(key, newValue) {
        key = _DataUtils.default.addPrefix(_MHGlobalData.default.cachePrefix, key);

        _miot.Host.storage.set(key, newValue);
      }
    }, {
      key: "storeCache",
      value: function storeCache(dic) {
        if (!_DataUtils.default.isEmptyObject(dic)) {
          _miot.Host.storage.save(dic);
        }
      }
    }, {
      key: "_setState",
      value: function _setState() {
        var stateDic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!_DataUtils.default.isEmptyObject(stateDic)) {
          this.setState(stateDic);
        }
      }
    }, {
      key: "_checkValueParm",
      value: function _checkValueParm(param) {
        var value = false;

        if (param == "true" || param == true) {
          value = true;
        }

        return value;
      }
    }, {
      key: "getPtcSubtitle",
      value: function getPtcSubtitle() {
        var tip = _MHLocalizableString.localStrings.ptcClose;

        if (this.state.ptc_on) {
          tip = parseInt(this.state.tempOut) > 20 ? _MHLocalizableString.localStrings.ptcOnDes : _MHLocalizableString.localStrings.ptcOpen;
        }

        return tip;
      }
    }, {
      key: "getLightSubtitle",
      value: function getLightSubtitle() {
        var tip = this.state.light ? _MHLocalizableString.localStrings.ptcOpen : _MHLocalizableString.localStrings.ptcClose;
        return tip;
      }
    }, {
      key: "_filterData",
      value: function _filterData(array, dataArray) {
        for (var i = 0; i < dataArray.length; i++) {
          var time1 = dataArray[i].time;

          for (var j = 0; j < array.length - 1; j++) {
            var time2 = array[j].time;
            var time3 = array[j + 1].time;

            if (time1 > time2 && time1 <= time3) {
              array[j + 1].co2Count += parseInt(dataArray[i].co2Count);
              array[j + 1].co2Sum += parseInt(dataArray[i].co2Sum);
              array[j + 1].pm25Count += parseInt(dataArray[i].pm25Count);
              array[j + 1].pm25Sum += parseInt(dataArray[i].pm25Sum);
            }
          }
        }

        var co2Array = [];
        var pm25Array = [];

        for (var _i = 1; _i < array.length; _i++) {
          var pm25Value = parseInt(array[_i].pm25Count) == 0 ? -75 : parseInt(array[_i].pm25Sum) / parseInt(array[_i].pm25Count);
          var co2Value = parseInt(array[_i].co2Count) == 0 ? -1000 : parseInt(array[_i].co2Sum) / parseInt(array[_i].co2Count);
          var pm25Item = [];
          pm25Item.push(array[_i].time, parseInt(pm25Value));
          var co2Item = [];
          co2Item.push(array[_i].time, parseInt(co2Value));
          co2Array.push(parseInt(co2Value));
          pm25Array.push(parseInt(pm25Value));
        }

        if (_DataUtils.default.toNumber(co2Array[co2Array.length - 1]) < 0) {
          co2Array[co2Array.length - 1] = _DataUtils.default.toNumber(this.state.co2Num);
        }

        if (_DataUtils.default.toNumber(pm25Array[pm25Array.length - 1]) < 0) {
          pm25Array[pm25Array.length - 1] = _DataUtils.default.toNumber(this.state.pm25Num);
        }

        CO2DataArr = co2Array;
        PM25DataArr = pm25Array;
        this.setState({
          PM25Data: pm25Array,
          CO2Data: co2Array
        });

        this._initAnimateStartY(pm25Array, co2Array);

        (0, _MHGlobalData.print)('PM25Data **' + JSON.stringify(this.state.PM25Data));
        (0, _MHGlobalData.print)('CO2Data **' + JSON.stringify(this.state.CO2Data));
      }
    }, {
      key: "_initAnimateStartY",
      value: function _initAnimateStartY(pm25Array, co2Array) {
        var originalViewH = curViewH - 25 * _MHGlobalData.default.HeightPersent;
        var pm25TempArr = [];

        for (var i = 0; i < pm25Array.length; i++) {
          if (pm25Array[i] >= 0) {
            pm25TempArr.push(pm25Array[i]);
          }
        }

        var pm25MaxNum = pm25TempArr.length > 0 ? Math.max.apply(null, pm25TempArr) : 0;
        var pm25MinNum = pm25TempArr.length > 0 ? Math.min.apply(null, pm25TempArr) : 0;
        this.pm25MidYValue = (pm25MaxNum + pm25MinNum) * 0.5;
        var pm25Region = pm25MaxNum - pm25MinNum;
        var addNumPm25 = persentOfBlank * originalViewH;
        var mid = (this.pm25MidYValue - pm25MinNum) / pm25Region * originalViewH * 0.7 + addNumPm25;
        pm25StartAnimatedY += mid + 11 * _MHGlobalData.default.HeightPersent;

        if (this.refs.pm25Lineview) {
          this.refs.pm25Lineview.setNativeProps({
            midValue: this.pm25MidYValue
          });
        }

        var co2TempArr = [];

        for (var _i2 = 0; _i2 < co2Array.length; _i2++) {
          if (co2Array[_i2] >= 0) {
            co2TempArr.push(co2Array[_i2]);
          }
        }

        var co2MaxNum = co2TempArr.length > 0 ? Math.max.apply(null, co2TempArr) : 0;
        var co2MinNum = co2TempArr.length > 0 ? Math.min.apply(null, co2TempArr) : 0;
        this.co2MidYValue = _DataUtils.default.toNumber(co2MinNum + co2MaxNum) * 0.5;
        var co2Avarage = _DataUtils.default.toNumber(co2MaxNum + co2MinNum) * 0.5;

        var region = _DataUtils.default.toNumber(co2MaxNum - co2MinNum);

        var addNum = _DataUtils.default.toNumber(persentOfBlank * originalViewH);

        var midy = (co2Avarage - co2MinNum) / region * originalViewH * 0.7 + addNum;
        co2StartAnimatedY += _DataUtils.default.toNumber(midy) + 11 * _MHGlobalData.default.HeightPersent;

        if (this.refs.co2Lineview) {
          this.refs.co2Lineview.setNativeProps({
            midValue: this.co2MidYValue
          });
        }

        if (global.pm25AnimatedLoad == true && this.refs.pm25Lineview) {
          this.refs.pm25Lineview.setNativeProps({
            animate: true,
            midValue: this.pm25MidYValue
          });
          global.pm25AnimatedLoad = true;
        }

        if (global.co2AnimatedLoad == true && this.refs.co2Lineview) {
          this.refs.co2Lineview.setNativeProps({
            animate: true,
            midValue: this.co2MidYValue
          });
          global.co2AnimatedLoad = true;
        }
      }
    }, {
      key: "_PM25Data",
      value: function _PM25Data() {
        var pointArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        return pointArray;
      }
    }, {
      key: "_CO2Data",
      value: function _CO2Data() {
        var pointArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        return pointArray;
      }
    }, {
      key: "_timeTipData",
      value: function _timeTipData() {
        var totalHour = 12;

        var endTime = _LocalTimeStrings.default.getCurrentSecond();

        var array = _LocalTimeStrings.default.getTimesArray(endTime, totalHour);

        var startTime = array[1].time;
        var begin = _LocalTimeStrings.default.addZero(new Date(startTime * 1000).getHours(), 2) + ':00';
        var tipArray = [begin, _MHLocalizableString.localStrings.now];
        return tipArray;
      }
    }, {
      key: "_modeViewData",
      value: function _modeViewData() {
        var _this16 = this;

        var dataSourse = {
          list: [{
            normalImage: _$$_REQUIRE(_dependencyMap[35]),
            highlightImage: _$$_REQUIRE(_dependencyMap[36]),
            title: _MHLocalizableString.localStrings.controlAuto,
            mode: 'auto',
            selected: false,
            func: function func(callback) {
              _this16._requestModeWithModeType('auto', callback);
            }
          }, {
            normalImage: _$$_REQUIRE(_dependencyMap[37]),
            highlightImage: _$$_REQUIRE(_dependencyMap[38]),
            title: _MHLocalizableString.localStrings.controlSleep,
            mode: 'sleep',
            selected: false,
            func: function func(callback) {
              _this16._requestModeWithModeType('sleep', callback);
            }
          }, {
            normalImage: _$$_REQUIRE(_dependencyMap[39]),
            highlightImage: _$$_REQUIRE(_dependencyMap[40]),
            title: _MHLocalizableString.localStrings.controlFavourite,
            mode: 'favourite',
            selected: false,
            func: function func(callback) {
              _this16._requestModeWithModeType('favourite', callback);
            }
          }]
        };
        return dataSourse;
      }
    }, {
      key: "_loveAreaData",
      value: function _loveAreaData() {
        var _this17 = this;

        var dataSourse = {
          currentSpeed: _OtherConstant.default.ConstantOfMinSpeed,
          sliderValue: 0.0,
          minSpeedImage: _$$_REQUIRE(_dependencyMap[41]),
          maxSpeedImage: _$$_REQUIRE(_dependencyMap[42]),
          func: function func(sliderValue, speed) {
            _this17._requestLoveWithAreaNum(sliderValue, speed);
          },
          dismissFunc: function dismissFunc(sliderValue, speed) {
            _this17.setState({
              loveAreaModalVisible: false
            });

            _this17.setFavoriteCache();
          }
        };
        return dataSourse;
      }
    }, {
      key: "_rand",
      value: function _rand(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
      }
    }, {
      key: "_getRandData",
      value: function _getRandData() {
        return [this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100), this._rand(-30, 100)];
      }
    }, {
      key: "render",
      value: function render() {
        var _this18 = this;

        var scrollProps;

        if (_miot.Host.isAndroid) {
          scrollProps = {
            snapHeight: (0, _MHGlobalData.getVideoHeight)() - _MHGlobalData.default.naviHeight,
            scrollYDuration: 250
          };
        } else {
          scrollProps = {
            snapToInterval: (0, _MHGlobalData.getVideoHeight)() - _MHGlobalData.default.naviHeight,
            snapToAlignment: 'start'
          };
        }

        return _react.default.createElement(_reactNative.Animated.View, {
          style: {
            flex: 1,
            height: (0, _MHGlobalData.getWindowHeight)(),
            opacity: contentViewOpacity
          },
          onLayout: function onLayout(event) {
            var _event$nativeEvent$la = event.nativeEvent.layout,
                width = _event$nativeEvent$la.width,
                height = _event$nativeEvent$la.height;
            _this18.hasMeasureWindow = true;

            if (_miot.Host.isAndroid && ((0, _MHGlobalData.getWindowWidth)() !== width || (0, _MHGlobalData.getWindowHeight)() !== height)) {
              _MHGlobalData.default.windowHeight = height;
              _MHGlobalData.default.windowWidth = width;

              _this18.storeCache({
                'window_width': width,
                'window_height': height
              });

              _this18.setState({});
            }
          }
        }, _react.default.createElement(_reactNative.View, {
          style: [{
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            position: 'absolute'
          }]
        }, _react.default.createElement(_reactNative.Image, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            position: 'absolute',
            backgroundColor: transparentColor
          },
          source: this.state.bckCurrentImage
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            backgroundColor: transparentColor,
            position: 'absolute'
          }
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            backgroundColor: transparentColor,
            opacity: videoOpacity,
            position: 'absolute'
          }
        }, _react.default.createElement(_reactNativeVideo.default, {
          source: this.state.videoUri,
          rate: 1.0,
          volume: 1.0,
          muted: false,
          paused: false,
          resizeMode: "cover",
          repeat: true,
          playInBackground: true,
          onLoadStart: function onLoadStart(event) {},
          onLoad: function onLoad(event) {},
          onProgress: function onProgress(event) {},
          onEnd: function onEnd(event) {},
          onError: function onError(event) {},
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%'
          }
        })), _react.default.createElement(_reactNative.Animated.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            backgroundColor: transparentColor,
            position: 'absolute',
            opacity: videoCurrentOpacity
          }
        }, _react.default.createElement(_reactNativeVideo.default, {
          source: this.state.videoCurrentUri,
          rate: 1.0,
          volume: 1.0,
          muted: false,
          paused: false,
          resizeMode: "cover",
          repeat: true,
          playInBackground: true,
          onLoadStart: function onLoadStart() {},
          onLoad: function onLoad() {},
          onProgress: function onProgress() {},
          onEnd: function onEnd() {},
          onError: function onError() {},
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%'
          }
        }))), _react.default.createElement(_reactNative.Animated.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            backgroundColor: transparentColor,
            position: 'absolute',
            opacity: bckForChangeImageOpacity
          }
        }, _react.default.createElement(_reactNative.Animated.Image, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            backgroundColor: transparentColor,
            opacity: bckImageOpacity
          },
          source: this.state.bckImage
        }), _react.default.createElement(_reactNative.Animated.Image, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: '100%',
            backgroundColor: transparentColor,
            position: 'absolute',
            opacity: bckCurrentImageOpacity
          },
          source: this.state.bckCurrentImage
        }))), _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "light-content",
          backgroundColor: transparentColor,
          animated: true
        }), _react.default.createElement(_CustomTitleNavigation.default, {
          titleArray: [this.state.deviceName, this.state.city + ' ' + _MHLocalizableString.localStrings.pm25Outdoor + ' ' + (parseInt(this.state.pm25OutNum) >= 0 ? this.state.pm25OutNum : '--'), 'PM2.5', parseInt(this.state.pm25Num) >= 0 ? this.state.pm25Num : '--', 'CO2', parseInt(this.state.co2Num) >= 0 ? this.state.co2Num : '--'],
          titleColorArray: ['white', 'rgba(255, 255, 255, 0.6)', 'white', 'white', 'white', 'white'],
          titleFontArray: [(0, _FontSizeConstant.setSpTextNew)(14), (0, _FontSizeConstant.setSpTextNew)(11), (0, _FontSizeConstant.setSpTextNew)(10), (0, _FontSizeConstant.setSpTextNew)(18), (0, _FontSizeConstant.setSpTextNew)(10), (0, _FontSizeConstant.setSpTextNew)(18)],
          style: {
            backgroundColor: transparentColor
          },
          opacityArray: opacityArray,
          onPressLeft: function onPressLeft() {
            _miot.Package.exit();
          },
          onPressRight: function onPressRight() {
            _this18.props.navigation.navigate('Setting');
          },
          ref: "titleNavigation"
        }), !this.hasMeasureWindow ? _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: transparentColor,
            width: (0, _MHGlobalData.getWindowWidth)(),
            flex: 1,
            flexDirection: 'column',
            alignItems: 'flex-start',
            justifyContent: 'space-between'
          }
        }, this.renderDesView()) : _react.default.createElement(HomeScrollView, (0, _extends2.default)({}, scrollProps, {
          style: {
            flex: 1
          },
          contentContainerStyle: [styles.scrollViewStyle],
          showsVerticalScrollIndicator: false,
          bounces: _miot.Host.isAndroid ? false : true,
          automaticallyAdjustContentInsets: true,
          onScroll: this.onScroll,
          overScrollMode: "never",
          scrollEventThrottle: 1,
          decelerationRate: 0.9,
          onScrollBeginDrag: this.onScrollBeginDrag,
          onScrollEndDrag: this.onScrollEndDrag,
          onMomentumScrollEnd: this.onMomentumScrollEnd,
          ref: "scrollView",
          zoomScale: 0.2
        }), _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: transparentColor,
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: (0, _MHGlobalData.getVideoHeight)() - _MHGlobalData.default.naviHeight,
            flexDirection: 'column',
            display: 'flex',
            alignItems: 'flex-start',
            justifyContent: 'space-between'
          }
        }, this.renderDesView()), _react.default.createElement(_CustomItemView.default, {
          ItemHeight: ItemHeight,
          iconOfItemHeight: ItemIconHeight,
          imageH: 17,
          imageW: 16,
          imageSource: _$$_REQUIRE(_dependencyMap[43]),
          iconSource: _$$_REQUIRE(_dependencyMap[44]),
          font: (0, _FontSizeConstant.setSpTextNew)(15),
          textColor: '#000000',
          bckColor: !this.state.power ? _ColorConstant.default.ColorOfMainBlue : '#fd723f',
          textTitle: !this.state.power ? _MHLocalizableString.localStrings.controlOn : _MHLocalizableString.LocalizedStrings.controlOff,
          hasBckImage: true,
          ref: "powerView",
          onPressFunc: function onPressFunc(callback) {
            var staus = !_this18.state.power;

            _this18._requestPowerWithStatus(staus, callback);
          }
        }), _react.default.createElement(_CustomModeView.default, {
          ItemHeight: ItemModeHeight,
          iconOfItemHeight: ItemIconHeight,
          power: this.state.power,
          imageSource: _$$_REQUIRE(_dependencyMap[45]),
          hasBckImage: true,
          dataSource: this.state.controlViewDataSource,
          mode: this.state.mode,
          ref: "modeView"
        }), _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            height: ItemHistoryHeight,
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column'
          }
        }, _react.default.createElement(_reactNative.Image, {
          resizeMode: 'stretch',
          style: {
            height: ItemHistoryHeight,
            marginLeft: marginLeft,
            marginRight: 3.5,
            width: (0, _MHGlobalData.getWindowWidth)() - 8 - 3
          },
          source: _$$_REQUIRE(_dependencyMap[46])
        }), _react.default.createElement(_reactNative.View, {
          style: [styles.curveStyle, {
            height: ItemHistoryHeight - 6
          }]
        }, _react.default.createElement(_reactNative.View, {
          style: styles.curveDesStyle
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.curveDesTitle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.localStrings.airStatusOfLatelyHalfDay)), _react.default.createElement(_reactNative.View, {
          style: {
            height: _reactNative.StyleSheet.hairlineWidth,
            marginLeft: 22,
            backgroundColor: _ColorConstant.default.ColorOfSperate,
            marginRight: 22
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.curveViewStyle
        }, _react.default.createElement(_reactNative.View, {
          style: {
            height: curViewBlankH
          }
        }), _react.default.createElement(_MainpageCurveLineView.default, {
          dataSource: this.state.PM25Data,
          ref: "pm25Lineview",
          timeTipData: this._timeTipData(),
          width: (0, _MHGlobalData.getWindowWidth)() - 54,
          height: curViewH,
          strokeColor: _ColorConstant.default.ColorOfMainBlue,
          typeName: "PM2.5",
          standard: 75,
          animateTime: 500
        }), _react.default.createElement(_reactNative.View, {
          style: {
            height: curViewBlankMidH
          }
        }), _react.default.createElement(_MainpageCurveLineView.default, {
          dataSource: this.state.CO2Data,
          ref: "co2Lineview",
          timeTipData: this._timeTipData(),
          width: (0, _MHGlobalData.getWindowWidth)() - 54,
          height: curViewH,
          strokeColor: _ColorConstant.default.ColorOf00C9DC,
          typeName: "CO2",
          standard: 1000,
          animateTime: 500
        }), _react.default.createElement(_reactNative.View, {
          style: {
            height: curViewBlankBotH
          }
        })), _react.default.createElement(_reactNative.View, {
          style: styles.curveHistoryStyle
        }, _react.default.createElement(_reactNative.View, {
          style: {
            height: _reactNative.StyleSheet.hairlineWidth,
            marginLeft: 12,
            backgroundColor: _ColorConstant.default.ColorOfSperate,
            marginRight: 11
          }
        }), _react.default.createElement(_reactNative.TouchableHighlight, {
          style: styles.curveHistoryBtn,
          activeOpacity: 1.0,
          underlayColor: _MHGlobalData.default.ItemSelectedColor,
          onPress: function onPress() {
            _this18.props.navigation.navigate('HistoryLine', {
              'pm25Num': _this18.state.pm25Num,
              'co2Num': _this18.state.co2Num
            });
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.curveHistoryTitle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.localStrings.airCheckHistoryLine))))), _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            height: ItemSettingBckH,
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column',
            marginBottom: _miot.Host.isAndroid ? 4 : 27
          }
        }, _react.default.createElement(_reactNative.Image, {
          resizeMode: 'stretch',
          style: {
            height: ItemSettingBckH,
            marginLeft: marginLeft,
            marginRight: marginLeft,
            width: (0, _MHGlobalData.getWindowWidth)() - 8 - 3
          },
          source: _$$_REQUIRE(_dependencyMap[47])
        }), _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
            position: 'absolute'
          }
        }, _react.default.createElement(_CustomItemView.default, {
          hasSwitch: true,
          ItemHeight: ItemSettingHeight,
          iconOfItemHeight: ItemIconHeight,
          imageH: 16,
          imageW: 16,
          iconSource: _$$_REQUIRE(_dependencyMap[48]),
          font: (0, _FontSizeConstant.setSpTextNew)(15),
          textColor: !this.state.power ? '#cacaca' : '#010101',
          subTitleColor: !this.state.power ? '#cacaca' : 'rgba(1, 1, 1, 0.4)',
          bckColor: !this.state.power ? 'rgba(74,141,252,0.3)' : _ColorConstant.default.ColorOfMainBlue,
          textTitle: _MHLocalizableString.LocalizedStrings.ptcHeat,
          subTitle: this.getPtcSubtitle(),
          ref: "ptcView",
          hasLine: true,
          value: this.state.ptc_on,
          onTintColor: !this.state.power ? 'rgba(74,141,252,0.3)' : _ColorConstant.default.ColorOfMainBlue,
          disabled: !this.state.power ? true : false,
          onValueChange: function onValueChange(value) {
            _this18.setState({
              ptc_on: value
            });

            _this18._requestPtcWithValue(value);
          }
        }), _react.default.createElement(_CustomItemView.default, {
          hasSwitch: true,
          ItemHeight: ItemSettingHeight,
          iconOfItemHeight: ItemIconHeight,
          imageH: 20,
          imageW: 16,
          iconSource: _$$_REQUIRE(_dependencyMap[49]),
          font: (0, _FontSizeConstant.setSpTextNew)(15),
          textColor: !this.state.power ? '#cacaca' : '#010101',
          subTitleColor: !this.state.power ? '#cacaca' : 'rgba(1, 1, 1, 0.4)',
          bckColor: !this.state.power ? 'rgba(74,141,252,0.3)' : _ColorConstant.default.ColorOfMainBlue,
          textTitle: _MHLocalizableString.LocalizedStrings.deviceLight,
          subTitle: this.getLightSubtitle(),
          ref: "lightView",
          hasLine: true,
          value: this.state.light,
          onTintColor: !this.state.power ? 'rgba(74,141,252,0.3)' : _ColorConstant.default.ColorOfMainBlue,
          disabled: !this.state.power ? true : false,
          onValueChange: function onValueChange(value) {
            _this18.setState({
              light: value
            });

            _this18.setDisplay(value);
          }
        }), _react.default.createElement(_CustomItemView.default, {
          ItemHeight: ItemSettingHeight,
          iconOfItemHeight: ItemIconHeight,
          imageH: 13,
          imageW: 16,
          iconSource: _$$_REQUIRE(_dependencyMap[50]),
          rightIconSource: _$$_REQUIRE(_dependencyMap[51]),
          font: (0, _FontSizeConstant.setSpTextNew)(15),
          textColor: '#010101',
          bckColor: _ColorConstant.default.ColorOfMainBlue,
          textTitle: _MHLocalizableString.localStrings.compoundFilterTitle + this.state.compoundFilterPersent + '%',
          subTitle: _MHLocalizableString.localStrings.filterDayLeftTip + this.state.compoundFilterLeftDay + (parseInt(this.state.compoundFilterLeftDay) > 1 ? _MHLocalizableString.localStrings.days : _MHLocalizableString.localStrings.day),
          hasBckImage: false,
          ref: "midFilterView",
          hasLine: true,
          onPressFunc: function onPressFunc() {
            _this18.props.navigation.navigate('Intermediate', {
              'compoundFilterPersent': _this18.state.compoundFilterPersent,
              'compoundFilterLeftDay': _this18.state.compoundFilterLeftDay
            });
          }
        }), _react.default.createElement(_CustomItemView.default, {
          ItemHeight: ItemSettingHeight,
          iconOfItemHeight: ItemIconHeight,
          imageH: 17,
          imageW: 17,
          iconSource: _$$_REQUIRE(_dependencyMap[52]),
          rightIconSource: _$$_REQUIRE(_dependencyMap[51]),
          font: (0, _FontSizeConstant.setSpTextNew)(15),
          textColor: '#010101',
          bckColor: _ColorConstant.default.ColorOfMainBlue,
          textTitle: _MHLocalizableString.LocalizedStrings.timeTip,
          subTitle: this.state.timeDes,
          hasBckImage: false,
          ref: "timeView",
          hasLine: true,
          onPressFunc: function onPressFunc() {
            _this18.props.navigation.navigate('TimeList', {
              timeListArray: _this18.state.timeListArray,
              callback: function callback(_callback) {
                _this18.setState({
                  timeListArray: _callback
                });

                _this18._requestTimeListDataSource();
              }
            });
          }
        }), _react.default.createElement(_CustomItemView.default, {
          ItemHeight: ItemSettingHeight,
          iconOfItemHeight: ItemIconHeight,
          imageH: 15,
          imageW: 15,
          iconSource: _$$_REQUIRE(_dependencyMap[53]),
          rightIconSource: _$$_REQUIRE(_dependencyMap[51]),
          font: (0, _FontSizeConstant.setSpTextNew)(15),
          textColor: '#010101',
          bckColor: _ColorConstant.default.ColorOfMainBlue,
          textTitle: _MHLocalizableString.LocalizedStrings.loveAreaSetting,
          subTitle: _DataUtils.default.faviriteAreaTip(this.state.favourite_speed),
          hasBckImage: false,
          ref: "loveAreaView",
          hasLine: false,
          onPressFunc: function onPressFunc() {
            _this18.setState({
              loveAreaModalVisible: true
            });
          }
        })))), _react.default.createElement(_SperateView.default, null), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this18.setState({
              loveAreaModalVisible: visible
            }, cbk);

            if (!visible && _this18.showModalFromModeView) {
              _this18.showModalFromModeView = false;
            }
          },
          visible: this.state.loveAreaModalVisible,
          modalHeight: loveModelHeight + 8,
          animateTime: 250,
          renderCbk: this.renderLove
        }), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this18.setState({
              showFavoriteDialog: visible
            }, cbk);
          },
          visible: this.state.showFavoriteDialog,
          modalHeight: _miot.Host.isAndroid ? 170 : 170,
          renderCbk: this.renderDialog
        }), _react.default.createElement(_reactNativeEasyToast.default, {
          ref: "toast",
          opacity: 0.8,
          textStyle: {
            fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight,
            textAlign: 'center',
            color: '#ffffff'
          },
          style: {
            marginHorizontal: 20
          },
          fadeOutDuration: 1000
        }));
      }
    }, {
      key: "renderDesView",
      value: function renderDesView() {
        return _react.default.createElement(_reactNative.View, {
          style: styles.enviromentDesViewStyle,
          ref: "desContentView"
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.pm25TitleStyle, _MHGlobalData.default.baseFontStyle],
          ref: "pm25TipView"
        }, _MHLocalizableString.localStrings.pm25Tip), _react.default.createElement(_reactNative.View, {
          style: styles.pm25NumberViewStyle,
          ref: "pm25NumberView"
        }, _react.default.createElement(_reactNative.Text, {
          style: _DataUtils.default.toNumber(this.state.pm25Num) > 0 ? _DataUtils.default.toNumber(this.state.pm25Num.substr(0, 1)) > 0 ? styles.pm25NormalNumberStyle : styles.pm25AlphaNumberStyle : styles.pm25AlphaNumberStyle
        }, _DataUtils.default.toNumber(this.state.pm25Num) > 0 ? this.state.pm25Num.substr(0, 1) : 0), _react.default.createElement(_reactNative.Text, {
          style: _DataUtils.default.toNumber(this.state.pm25Num) > 0 ? _DataUtils.default.toNumber(this.state.pm25Num.substr(0, 2)) == 0 ? styles.pm25AlphaNumberStyle : styles.pm25NormalNumberStyle : styles.pm25AlphaNumberStyle
        }, _DataUtils.default.toNumber(this.state.pm25Num) > 0 ? this.state.pm25Num.substr(1, 1) : 0), _react.default.createElement(_reactNative.Text, {
          style: _DataUtils.default.toNumber(this.state.pm25Num) < 0 ? styles.pm25AlphaNumberStyle : styles.pm25NormalNumberStyle
        }, _DataUtils.default.toNumber(this.state.pm25Num) > 0 ? this.state.pm25Num.substr(2, 1) : 0)), _react.default.createElement(_reactNative.View, {
          style: styles.co2ViewStyle,
          ref: "co2NumberView"
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.co2TitleStyle, _MHGlobalData.default.baseFontStyle]
        }, "CO"), _react.default.createElement(_reactNative.Text, {
          style: styles.co2NumberStyle
        }, "2"), _react.default.createElement(_reactNative.View, {
          style: styles.co2SperateStyle
        }), _react.default.createElement(_reactNative.Text, {
          style: [styles.co2NumTitleStyle, _MHGlobalData.default.baseFontStyle]
        }, _DataUtils.default.toNumber(this.state.co2Num) >= 0 ? this.state.co2Num : '--')), _react.default.createElement(_reactNative.Text, {
          style: [styles.airDesViewStyle, _MHGlobalData.default.baseFontStyle],
          ref: "airDesView"
        }, _MHLocalizableString.localStrings.airIndoor, " ", this.state.airDes));
      }
    }, {
      key: "optionFavoriteYes",
      value: function optionFavoriteYes() {
        this.showModalFromModeView = true;
        this.setState({
          showFavoriteDialog: false,
          loveAreaModalVisible: true
        });

        if (this.requestFavoriteCallback) {
          this.requestFavoriteCallback();
        }
      }
    }, {
      key: "_guideSetAreaTip",
      value: function _guideSetAreaTip(bck) {
        this.setState({
          showFavoriteDialog: true
        });
      }
    }, {
      key: "_cacheFavoriteFlag",
      value: function _cacheFavoriteFlag(fileName, content) {
        if (fileName == this.favouriteSetName) {
          if (this.favouriteSet != "true") {
            this.favouriteSet = "true";

            _miot.Host.file.writeFile(this.favouriteFile, content).then(function (_) {});
          }
        }
      }
    }, {
      key: "_writeToFile",
      value: function _writeToFile(fileName, content) {
        if (fileName == this.favouriteSetName) {
          if (this.favouriteSet != "true") {
            this.favouriteSet = "true";

            this._setModeWithType("favourite");

            _miot.Host.file.writeFile(this.favouriteFile, content).then(function (_) {});
          }
        }
      }
    }, {
      key: "setFavoriteCache",
      value: function setFavoriteCache() {
        if (this.showModalFromModeView) {
          this._writeToFile(this.favouriteSetName, "true");

          this.showModalFromModeView = false;
        } else {
          this._cacheFavoriteFlag(this.favouriteSetName, "true");
        }
      }
    }, {
      key: "setDisplay",
      value: function setDisplay(value) {
        var _this19 = this;

        _RpcManage.default.getInstance().rpcRequest("set_display", value, function () {
          _RequestHelp.default.setLight(value).then(function (result) {
            (0, _MHGlobalData.print)('set display', result);
            var success = result && 'ok' === result.result[0];

            if (!success) {
              _this19.setState({
                light: !value
              });
            }
          }).catch(function (err) {
            (0, _MHGlobalData.print)('set display failed', err);

            _this19.setState({
              light: !value
            });
          });
        });
      }
    }, {
      key: "_requestPtcWithValue",
      value: function _requestPtcWithValue(value) {
        var _this20 = this;

        _RpcManage.default.getInstance().rpcRequest("set_ptc_on", value, function () {
          _RequestHelp.default.setPTC(value).then(function (callback) {
            if (callback.code == 0) {} else {
              _this20.setState({
                ptc_on: !value
              });

              _this20.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestPtcFailTip);
            }
          }).catch(function (err) {
            _this20.setState({
              ptc_on: !value
            });
          });
        });
      }
    }, {
      key: "_requestLoveWithAreaNum",
      value: function _requestLoveWithAreaNum(sliderValue, areaNum) {
        var _this21 = this;

        var num = parseInt(areaNum);

        _RpcManage.default.getInstance().rpcRequest("set_favourite_speed", num, function () {
          _RequestHelp.default.setSpeed(num).then(function (callback) {
            if (callback.code == 0) {
              if (_DataUtils.default.toNumber(_this21.loveAreaDataSource.currentSpeed) !== _DataUtils.default.toNumber(areaNum)) {
                _this21.loveAreaDataSource.currentSpeed = areaNum;
              }

              if (_DataUtils.default.toNumber(_this21.loveAreaDataSource.sliderValue) !== _DataUtils.default.toNumber(sliderValue)) {
                _this21.loveAreaDataSource.sliderValue = sliderValue;
              }

              _this21.setState({
                favourite_speed: _this21.loveAreaDataSource.currentSpeed,
                loveAreaDataSource: _this21.loveAreaDataSource
              });

              _this21.setFavoriteCache();
            } else {
              _this21.setState({
                favourite_speed: _this21.loveAreaDataSource.currentSpeed,
                loveAreaDataSource: _this21.loveAreaDataSource
              });

              _this21.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestFavoriteFailTip);
            }
          }).catch(function (err) {
            _this21.setState({
              favourite_speed: _this21.loveAreaDataSource.currentSpeed,
              loveAreaDataSource: _this21.loveAreaDataSource
            });

            _this21.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestFavoriteFailTip);
          });
        });
      }
    }, {
      key: "_requestPowerWithStatus",
      value: function _requestPowerWithStatus(status, requsetCallback) {
        var _this22 = this;

        var power = status;

        _RpcManage.default.getInstance().rpcRequest("set_power", power, function () {
          _RequestHelp.default.setPower(power).then(function (callback) {
            requsetCallback(true);

            if (callback.code == 0) {
              _this22.setState({
                power: status
              });

              _this22._setVideoUri();
            } else {
              _this22.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestSwitchFailTip);

              _this22.setState({
                power: !status
              });

              _this22._setVideoUri();
            }
          }).catch(function (err) {
            _this22.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestSwitchFailTip);

            requsetCallback(true);
          });
        });
      }
    }, {
      key: "_requestModeWithModeType",
      value: function _requestModeWithModeType(type, requsetCallback) {
        var _this23 = this;

        if (type == "favourite") {
          if (this.favouriteSet == "false" || this.favouriteSet == false) {
            this.requestFavoriteCallback = requsetCallback;

            this._guideSetAreaTip();

            requsetCallback(false);
            return;
          }
        }

        if (isRequesting == true || this.state.mode == type) {
          requsetCallback(true);
          return;
        }

        isRequesting = true;

        _RpcManage.default.getInstance().rpcRequest("set_mode", type, function () {
          _RequestHelp.default.setMode(type).then(function (callback) {
            requsetCallback(true);

            if (callback.code == 0) {
              _this23.setState({
                mode: type,
                power: true
              });

              _this23._setVideoUri();
            } else {
              _this23.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestModeFailTip);
            }

            isRequesting = false;
          }).catch(function (err) {
            _this23.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestModeFailTip);

            requsetCallback(false);
          });
        });
      }
    }, {
      key: "_setModeWithType",
      value: function _setModeWithType(type) {
        var _this24 = this;

        _RpcManage.default.getInstance().rpcRequest("set_mode", type, function () {
          _RequestHelp.default.setMode(type).then(function (callback) {
            if (callback.code == 0) {
              _this24.setState({
                mode: type
              });

              _this24._setVideoUri();
            } else {}
          }).catch(function (err) {});
        });
      }
    }]);
    return MainPage;
  }(_react.default.Component);

  exports.default = MainPage;

  MainPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    scrollViewStyle: {
      backgroundColor: transparentColor
    },
    enviromentDesViewStyle: {
      alignItems: 'flex-start',
      justifyContent: 'flex-end',
      marginTop: airDesHeight,
      marginLeft: 27,
      position: 'absolute',
      flex: 1
    },
    pm25TitleStyle: {
      textAlign: 'left',
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: (0, _FontSizeConstant.setSpTextNew)(12)
    },
    pm25NumberViewStyle: {
      marginTop: _miot.Host.isAndroid ? -5 : 18,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      marginLeft: -5
    },
    pm25AlphaNumberStyle: {
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: 'rgba(255,255,255,0.2)',
      fontSize: _FontSizeConstant.default.FontOfMainPagePm25Number
    },
    pm25NormalNumberStyle: {
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: _FontSizeConstant.default.FontOfMainPagePm25Number
    },
    co2ViewStyle: {
      flexDirection: 'row',
      marginTop: -5,
      alignItems: 'center',
      justifyContent: 'center'
    },
    co2TitleStyle: {
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: _FontSizeConstant.default.FontOfMainPageCo2Title
    },
    co2NumberStyle: {
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: _FontSizeConstant.default.FontOfMainPageCo2NumberTitle,
      marginTop: 2.5
    },
    co2SperateStyle: {
      width: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: 'rgba(255,255,255,0.4)',
      marginLeft: 7,
      height: 10
    },
    co2NumTitleStyle: {
      marginLeft: 7,
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: _FontSizeConstant.default.FontOfMainPageCo2Title
    },
    airDesViewStyle: {
      textAlign: 'left',
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: _FontSizeConstant.default.FontOfMainPageAirTitle,
      marginTop: 5
    },
    curveStyle: {
      flexDirection: 'column',
      position: 'absolute'
    },
    curveDesStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: curTipH,
      alignItems: 'flex-start',
      justifyContent: 'flex-end'
    },
    curveDesTitle: {
      textAlign: 'left',
      marginLeft: 27,
      marginBottom: _DataUtils.default.roundSize(8.5 * _MHGlobalData.default.HeightPersent),
      fontSize: _FontSizeConstant.default.FontOfMainPageCurveDesTitle,
      color: _ColorConstant.default.ColorMainPageCurveDesTitle
    },
    curveViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)()
    },
    curveHistoryStyle: {
      height: historyCheckH
    },
    curveHistoryBtn: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      marginLeft: 12,
      width: (0, _MHGlobalData.getWindowWidth)() - 24,
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0,
      borderBottomLeftRadius: 8,
      borderBottomRightRadius: 8
    },
    curveHistoryTitle: {
      textAlign: 'center',
      fontSize: _FontSizeConstant.default.FontOfMainPageCurveHitoryTitle,
      color: _ColorConstant.default.ColorMainPageCurveHitoryTitle
    },
    lovePickStyle: {
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: loveModelHeight
    },
    lovePickParentStyle: {
      backgroundColor: _ColorConstant.default.ColorOfWhite,
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: loveModelHeight,
      justifyContent: 'center',
      alignSelf: 'flex-end',
      alignItems: 'center',
      marginLeft: 8,
      marginRight: 8,
      borderRadius: 10,
      marginBottom: _MHGlobalData.default.isIphoneX ? 35 : 8
    }
  });
},10007,[14308,14305,14344,14314,14320,14323,14371,14377,14374,14386,10297,10074,10033,10010,10028,10061,10064,10067,10070,10079,10085,10091,10046,10034,10073,10040,10031,10124,10139,10250,10259,10037,10230,10262,10265,10268,10271,10274,10277,10280,10283,10286,10289,10292,10295,10298,10301,10304,10307,10310,10313,10316,10319,10322]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getString = getString;
  exports.LocalizedStrings = exports.localStrings = exports.strings = undefined;

  var _LocalizedStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _intlMessageformat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  _$$_REQUIRE(_dependencyMap[3]);

  _$$_REQUIRE(_dependencyMap[4]);

  _$$_REQUIRE(_dependencyMap[5]);

  _$$_REQUIRE(_dependencyMap[6]);

  _$$_REQUIRE(_dependencyMap[7]);

  var strings = {
    "en": {
      setting: "Setting",
      featureSetting: "Shortcut settings",
      commonSetting: "Common settings",
      deviceName: "Device name",
      locationManagement: "Locations",
      shareDevice: "Share device",
      ifttt: "Automation",
      voiceAuth: 'Voice authorization',
      firmwareUpgrate: "Firmware updates",
      moreSetting: "Additional settings",
      addToDesktop: "Add to Home screen",
      resetDevice: "Delete device",
      help: 'Help',
      licenseAndPolicy: "User Agreement & Privacy Policy",
      security: 'Security settings',
      feedback: 'Feedback',
      timezone: 'Device time zone',
      addToDesk: 'Add to Home screen',
      controlDevice: "Device controls",
      productIntroduce: "Product presentation",
      license: "User Agreement",
      privacy: "Privacy Policy",
      now: "Now",
      day: " day ",
      hour: " hour ",
      minute: " minute ",
      days: " days ",
      hours: " hours ",
      minutes: " minutes ",
      pick_h: "h",
      pick_m: "min",
      hourP: ":",
      minuteP: "",
      later: "",
      open: "",
      close: "",
      ptcOpen: "Power-on",
      ptcClose: "Power-off",
      open_dis: "Power-on in ",
      close_dis: "Power-off in ",
      notStart: "Not enabled",
      notAdd: "Not added",
      left: "Remaining ",
      cancel: "Cancel",
      conformBlank: "OK",
      conform: "OK",
      reset: "Reset",
      refreshing: "Refreshing...",
      edit: "Edit",
      achieve: "OK",
      repeat: "Repeat",
      remove: "Remove",
      delete: "Delete",
      custom: "Custom",
      pm25Tip: "PM2.5 Reference Value",
      pm25Outdoor: "Outdoor PM2.5",
      airIndoor: "Indoor air",
      airStatusOfLatelyHalfDay: "Indoor air quality over the last 12 hours",
      airCheckHistoryLine: "View history",
      ptcHeat: "Auxiliary heat",
      ptcOff: "Off",
      ptcLevel1: "Level 1",
      ptcLevel2: "Level 2",
      ptcLevel3: "Level 3",
      ptcTip: "请待室外温度降低时\n再手动打开辅热",
      ptcTipDesc: "When the outdoor temperature is above 20°C, the auxiliary heat will be temporarily turned off",
      ptcShowTip: "室外温度较高 辅热自动关闭",
      compoundFilterTitle: "Composite filter life remaining: ",
      filterDayLeftTip: "Estimated remaining life: ",
      filterDayLeftTip_dis: "of estimated remaining life, ",
      timeTip: "Scheduled on/off",
      loveAreaSetting: "Manual mode settings",
      filterBuyTip: "Coming soon",
      ptcOnDes: "Power-on(Temporary turned off)",
      childLock: "Parental controls",
      childLockTip: "After enabling parental controls, the device can only be controlled via the app",
      deviceSound: "Notification sounds",
      deviceLight: "Light",
      deviceLocation: "Fresh air ventilator position",
      wifiSignal: "Wi-Fi signal strength",
      screenDirection: "Display direction",
      ptcTimerPower: "Auxiliary heat Timer",
      lightTimerPower: "Light Timer",
      screenForward: "Normal",
      screenLeft: "Counterclockwise 90°",
      screenRight: "Clockwise 90°",
      airFresh: "Fresh",
      airDense: "Turbid",
      airFreshDis: "Fresh air",
      airDenseDis: "Turbid air",
      airMildAnoxia: "Light oxygen deficiency",
      airBadAnoxia: "Severe oxygen deficiency",
      airPollutedSlightly: "Light pollution",
      airPollutedMiddle: "Moderate pollution",
      airPollutedBad: "Heavy pollution",
      controlOff: "Turn off",
      controlOn: "Turn on",
      controlAuto: "Automatic",
      controlSleep: "Sleep",
      controlFavourite: "Manual",
      buyFilter: "Purchase replacement filters",
      resetFilter: "Reset filter life tracker",
      buyFilterSuggestion: "please\npurchase a new filter soon.",
      replaceFilterSuggestion: "please\nreplace the filter soon.",
      filterBuyTip: "Coming soon",
      filterResetTitle: "Reset filter life tracker",
      filterResetTip: "After resetting, the filter life will be recalculated. Please replace the filter and confirm the reset.",
      middleFilterDes: "Filter pro and filter are combined together, up to\nH13 level HEPA, which can effectively filter pollen,\nPM0.3 and other particulates",
      suitAreaTitle: "Applicable Area ",
      timeListFullTip: "Too many scheduled times, please delete some before adding more.",
      timeListEmptyTip: "No scheduled time added yet",
      timeAddTitle: "Add",
      endTime: "Power-off time",
      startTime: "Power-on time",
      timeRegion: "On for",
      unSetting: "Not set",
      autoStartTime: "Power-on time",
      autoCloseTime: "Power-off time",
      timeCancleTiptitle: "No scheduled time set yet",
      timeCancleTipDetailTitle: "Abort this operation?",
      timeCancleTipDetailTitle1: "确认放弃本次修改?",
      timeCancleTiptitle2: "Discard the changes to the scheduled time?",
      timeCancleTip: "No scheduled time set yet",
      timeCancleTip1: "The power-on and power-off times are the same, please modify them.",
      timeDeleteTip: "Delete scheduled time",
      locationConformTiTle: "Adjust location",
      locationConformTip: "Fresh Air Ventilator will use your phone's location, please make sure your phone is close to the Fresh Air Ventilator",
      timeCancleConform: "OK",
      loveModeName: "Manual Mode",
      loveModeTip: "Please set the area of your home",
      loveModeKnown: "OK",
      loveModeSeting: "Go to Settings",
      Sunday: "Sun",
      Monday: "Mon",
      Tuesday: "Tue",
      Wednesday: "Wed",
      Thursday: "Thu",
      Friday: "Fri",
      Saturday: "Sat",
      everyDay: "Daily",
      weekday: "Working days",
      weekend: "Weekends",
      timeTo: " to ",
      day_dis: "Day",
      week_dis: "Week",
      month_dis: "Month",
      requestFailTip: "Setting failed",
      requestModeFailTip: "Could not set up the mode",
      requestSwitchFailTip: "Could not set up the switch",
      requestPtcFailTip: "Could not set up the auxiliary heat",
      requestScreenFailTip: "Could not set the display direction",
      requestFavoriteFailTip: "Could not set as favorite area",
      requestTimeFailTip: "Could not set scheduled time",
      resetCompoundFilterSuccess: "Filter reset successfully",
      requestCityFailTip: "Could not locate your city",
      requestPtcTimerFailTip: "Could not set Auxiliary heat timer",
      requestRemoveTimeFailTip: "Could not delete scheduled settings",
      navigationTitleCompound: "Composite filter",
      navigationTitleTime: "Scheduled on/off",
      navigationTitleTimeSetting: "Timer Settings",
      navigationTitleTimeRepeat: "Repeat",
      navigationTitleTimeCustom: "Custom",
      navigationTitleHistory: "History",
      navigationTitleMiddleIntroduce: "Replace the Composite Filter",
      navigationTitlePtcTimer: "Auxiliary heat Timer Settings",
      navigationTitleLightTimer: "Light Timer Settings",
      licenseUrl: _$$_REQUIRE(_dependencyMap[8]),
      privacyUrl: _$$_REQUIRE(_dependencyMap[9]),
      middleFilterUrl: "http://apphelp.dream-maker.com/doc/mi/en/filter_change/intermediate.html",
      filterBuyUrl: "https://search.mi.com/search_米家新风机滤芯",
      middleFilterBuyUrl: "https://item.mi.com/1190500007.html"
    },
    'zh': {
      setting: "设置",
      featureSetting: "功能设置",
      commonSetting: "通用设置",
      deviceName: "设备名称",
      locationManagement: "位置管理",
      shareDevice: "设备共享",
      ifttt: '智能场景',
      voiceAuth: '语音授权',
      firmwareUpgrate: "固件升级",
      moreSetting: "更多设置",
      addToDesktop: "添加到桌面",
      resetDevice: "删除设备",
      licenseAndPolicy: "法律信息",
      help: '使用帮助',
      controlDevice: "设备控制",
      productIntroduce: "产品介绍",
      security: '安全设置',
      feedback: '反馈问题',
      timezone: '设备时区',
      addToDesk: '添加桌面快捷方式',
      license: "用户协议",
      privacy: "隐私政策",
      now: "现在",
      day: "天",
      pick_h: "时",
      pick_m: "分",
      hour: "小时",
      minute: "分钟",
      days: "天",
      hours: "小时",
      minutes: "分钟",
      hourP: "点",
      minuteP: "分",
      later: "后",
      open: "开启",
      close: "关闭",
      ptcOpen: "开启",
      ptcClose: "关闭",
      open_dis: "",
      close_dis: "",
      notStart: "未启用",
      notAdd: "未添加",
      left: "剩余",
      cancel: "取消",
      conformBlank: "确 定",
      conform: "确定",
      reset: "重置",
      refreshing: "正在刷新...",
      edit: "编辑",
      achieve: "完成",
      repeat: "重复",
      remove: "移除",
      delete: "删除",
      custom: "自定义",
      pm25Tip: "PM2.5参考值",
      pm25Outdoor: "室外PM2.5",
      airIndoor: "室内空气",
      airStatusOfLatelyHalfDay: "最近12小时室内空气状态",
      airCheckHistoryLine: "查看历史记录",
      ptcHeat: "辅热",
      ptcOff: "关闭",
      ptcLevel1: "一挡",
      ptcLevel2: "二挡",
      ptcLevel3: "三挡",
      ptcTip: "请待室外温度降低时\n再手动打开辅热",
      ptcTipDesc: "当室外温度高于20℃时，辅热将临时关闭",
      ptcShowTip: "室外温度较高 辅热自动关闭",
      compoundFilterTitle: "复合滤芯剩余",
      filterDayLeftTip: "预计还可使用",
      filterDayLeftTip_dis: "",
      timeTip: "定时开关机",
      loveAreaSetting: "手动模式风量设置",
      filterBuyTip: "滤芯购买稍后上线",
      ptcOnDes: "开启(室外大于20度,已临时关闭)",
      childLock: "儿童锁",
      childLockTip: "儿童锁开启后，只可通过app控制产品运行",
      deviceSound: "提示音",
      deviceLight: "灯光",
      deviceLocation: "新风机位置",
      wifiSignal: "Wi-Fi信号强度",
      screenDirection: "显示屏方向",
      ptcTimerPower: "辅热定时开关",
      lightTimerPower: "灯光定时开关",
      screenForward: "正向",
      screenLeft: "逆时针90°",
      screenRight: "顺时针90°",
      airFresh: "清新",
      airDense: "浑浊",
      airFreshDis: "空气清新",
      airDenseDis: "空气浑浊",
      airMildAnoxia: "轻度缺氧",
      airBadAnoxia: "严重缺氧",
      airPollutedSlightly: "轻度污染",
      airPollutedMiddle: "中度污染",
      airPollutedBad: "重度污染",
      controlOff: "关机",
      controlOn: "开机",
      controlAuto: "自动",
      controlSleep: "睡眠",
      controlFavourite: "手动",
      buyFilter: "购买滤芯",
      resetFilter: "重置滤芯寿命",
      buyFilterSuggestion: "建议及时购买滤芯",
      replaceFilterSuggestion: "建议及时更换滤芯",
      filterBuyTip: "滤芯购买稍后上线",
      filterResetTitle: "重置滤芯寿命",
      filterResetTip: "重置后将重新计算滤芯寿命，请更换滤芯后再确认重置",
      middleFilterDes: "高效与中效滤芯二合一，最高H13级HEPA\n有效过滤花粉、PM0.3 等颗粒物",
      suitAreaTitle: "适用面积",
      timeListFullTip: "定时开关机已满，请先删除再添加",
      timeListEmptyTip: "还未添加定时",
      timeAddTitle: "添加",
      endTime: "关闭时间",
      startTime: "开启时间",
      timeRegion: "开启时段",
      unSetting: "未设置",
      autoStartTime: "开启时间",
      autoCloseTime: "关闭时间",
      timeCancleTiptitle: "还未设置时间",
      timeCancleTipDetailTitle: "放弃本次操作?",
      timeCancleTipDetailTitle1: "确认放弃本次修改?",
      timeCancleTiptitle2: "放弃对本次定时的更改?",
      timeCancleTip: "还未设置定时",
      timeCancleTip1: "您设置的开关时间相同，请重新设置",
      timeDeleteTip: "删除定时",
      locationConformTiTle: "校准新风机位置",
      locationConformTip: "新风机需要使用手机当前位置，请确保手机靠近新风机",
      timeCancleConform: "确认放弃",
      loveModeName: "手动模式",
      loveModeTip: "请设置您的房屋面积范围",
      loveModeKnown: "知道了",
      loveModeSeting: "去设置",
      Sunday: "周日",
      Monday: "周一",
      Tuesday: "周二",
      Wednesday: "周三",
      Thursday: "周四",
      Friday: "周五",
      Saturday: "周六",
      everyDay: "每天",
      weekday: "工作日",
      weekend: "周末",
      timeTo: "至",
      day_dis: "日",
      week_dis: "周",
      month_dis: "月",
      requestFailTip: "设置失败",
      requestModeFailTip: "模式设置失败",
      requestSwitchFailTip: "开关设置失败",
      requestPtcFailTip: "辅热设置失败",
      requestScreenFailTip: "显示屏方向设置失败",
      requestFavoriteFailTip: "最爱面积设置失败",
      requestTimeFailTip: "设置定时失败",
      resetCompoundFilterSuccess: "复合滤芯重置成功",
      requestCityFailTip: "无法定位城市",
      requestPtcTimerFailTip: "辅热定时请求失败",
      requestRemoveTimeFailTip: "定时删除失败",
      navigationTitleCompound: "复合滤芯",
      navigationTitleTime: "定时开关机",
      navigationTitleTimeSetting: "定时设置",
      navigationTitleTimeRepeat: "重复",
      navigationTitleTimeCustom: "自定义",
      navigationTitleHistory: "历史记录",
      navigationTitleMiddleIntroduce: "复合滤芯更换方法",
      navigationTitlePtcTimer: "辅热定时设置",
      navigationTitleLightTimer: "灯光定时设置",
      licenseUrl: _$$_REQUIRE(_dependencyMap[10]),
      privacyUrl: _$$_REQUIRE(_dependencyMap[11]),
      middleFilterUrl: "http://apphelp.dream-maker.com/doc/mi/cn/filter_change/intermediate.html",
      filterBuyUrl: "https://search.mi.com/search_米家新风机滤芯",
      middleFilterBuyUrl: "https://item.mi.com/1190500007.html"
    },
    'zh-tw': {
      setting: "設置",
      featureSetting: "功能設定",
      commonSetting: "一般設定",
      deviceName: "裝置名稱",
      locationManagement: "位置管理",
      shareDevice: "裝置共用",
      ifttt: '智能場景',
      voiceAuth: '語音授權',
      firmwareUpgrate: "固件升級",
      moreSetting: "更多設定",
      addToDesktop: "新增到桌面",
      resetDevice: "刪除裝置",
      help: '使用帮助',
      licenseAndPolicy: "法律信息",
      security: '安全設定',
      feedback: '反饋問題',
      timezone: '裝置時區',
      addToDesk: '新増捷徑至桌面',
      controlDevice: "設備控制",
      productIntroduce: "產品介紹",
      license: "用户协议",
      privacy: "隱私政策",
      now: "現在",
      day: "天",
      pick_h: "時",
      pick_m: "分",
      hour: "小時",
      minute: "分鐘",
      days: "天",
      hours: "小時",
      minutes: "分鐘",
      hourP: "点",
      minuteP: "分",
      later: "後",
      open: "開啟",
      close: "關閉",
      ptcOpen: "開啟",
      ptcClose: "關閉",
      open_dis: "",
      close_dis: "",
      notStart: "未啟用",
      notAdd: "未添加",
      left: "剩余",
      cancel: "取消",
      conformBlank: "確 定",
      conform: "確定",
      reset: "重置",
      refreshing: "正在刷新...",
      edit: "編輯",
      achieve: "完成",
      repeat: "重復",
      remove: "移除",
      delete: "删除",
      custom: "自定義",
      pm25Tip: "PM2.5參考值",
      pm25Outdoor: "室外PM2.5",
      airIndoor: "室內空氣",
      airStatusOfLatelyHalfDay: "最近12小時室內空氣狀態",
      airCheckHistoryLine: "查看歷史記錄",
      ptcHeat: "輔熱",
      ptcOff: "關閉",
      ptcLevel1: "壹擋",
      ptcLevel2: "二擋",
      ptcLevel3: "三擋",
      ptcTip: "請待室外溫度降低時\n再手動打開輔熱",
      ptcTipDesc: "当室外温度高于20℃时，辅热将临时关闭",
      ptcShowTip: "室外溫度較高 輔熱自動關閉",
      compoundFilterTitle: "復合濾芯剩余",
      filterDayLeftTip: "預計還可使用",
      filterDayLeftTip_dis: "",
      timeTip: "定時開關機",
      loveAreaSetting: "手動模式風量設置",
      filterBuyTip: "濾芯購買稍後上線",
      ptcOnDes: "開啟(室外大於20度,已臨時關閉)",
      childLock: "兒童鎖",
      childLockTip: "兒童鎖開啟後，只可通過app控制產品運行",
      deviceSound: "提示音",
      deviceLight: "灯光",
      deviceLocation: "新風機位置",
      wifiSignal: "Wi-Fi信号强度",
      screenDirection: "显示屏方向",
      ptcTimerPower: "輔熱定時開關",
      lightTimerPower: "灯光定時開關",
      screenForward: "正向",
      screenLeft: "逆時針90°",
      screenRight: "順時針90°",
      airFresh: "清新",
      airDense: "浑濁",
      airFreshDis: "空氣清新",
      airDenseDis: "空氣浑濁",
      airMildAnoxia: "輕度缺氧",
      airBadAnoxia: "嚴重缺氧",
      airPollutedSlightly: "輕度汙染",
      airPollutedMiddle: "中度汙染",
      airPollutedBad: "重度汗染",
      controlOff: "關機",
      controlOn: "開機",
      controlAuto: "自動",
      controlSleep: "睡眠",
      controlFavourite: "手動",
      buyFilter: "購買濾芯",
      resetFilter: "重置濾芯壽命",
      buyFilterSuggestion: "建議及时購買濾芯",
      replaceFilterSuggestion: "建議及时更換濾芯",
      filterBuyTip: "濾芯購買稍後上線",
      filterResetTitle: "重置濾芯壽命",
      filterResetTip: "重置後將重新計算濾芯壽命，請更換濾芯後再確認重置",
      middleFilterDes: "高效與中效濾芯二合一，最高H13級HEPA\n有效過濾花粉、PM0.3 等顆粒物",
      suitAreaTitle: "適用面積",
      timeListFullTip: "定時開關機已滿，請先刪除再添加",
      timeListEmptyTip: "還未添加定時",
      timeAddTitle: "添加",
      endTime: "關閉時間",
      startTime: "開啟時間",
      timeRegion: "開啟時段",
      unSetting: "未設置",
      autoStartTime: "開啟時間",
      autoCloseTime: "關閉時間",
      timeCancleTiptitle: "還未設置時間",
      timeCancleTipDetailTitle: "放棄本次操作?",
      timeCancleTipDetailTitle1: "確認放棄本次修改?",
      timeCancleTiptitle2: "放棄對本次定時的更改?",
      timeCancleTip: "還未設置定時",
      timeCancleTip1: "您設置的開關時間相同，請重新設置",
      timeDeleteTip: "删除定時",
      locationConformTiTle: "校准新风机位置",
      locationConformTip: "新风机需要使用手机当前位置,请确保手机靠近新风机",
      timeCancleConform: "确认放弃",
      loveModeName: "手動模式",
      loveModeTip: "請設置您的房屋面積範圍",
      loveModeKnown: "知道了",
      loveModeSeting: "去設置",
      Sunday: "周日",
      Monday: "周壹",
      Tuesday: "周二",
      Wednesday: "周三",
      Thursday: "周四",
      Friday: "周五",
      Saturday: "周六",
      everyDay: "每天",
      weekday: "工作日",
      weekend: "周末",
      timeTo: "至",
      day_dis: "日",
      week_dis: "周",
      month_dis: "月",
      requestFailTip: "設置失敗",
      requestModeFailTip: "模式設置失敗",
      requestSwitchFailTip: "開關設置失敗",
      requestPtcFailTip: "辅热设置失败",
      requestScreenFailTip: "显示屏方向设置失败",
      requestFavoriteFailTip: "最爱面积设置失败",
      requestTimeFailTip: "设置定时失败",
      resetCompoundFilterSuccess: "復合濾芯重置成功",
      requestCityFailTip: "無法定位城市",
      requestPtcTimerFailTip: "辅热定时请求失败",
      requestRemoveTimeFailTip: "定時刪除失敗",
      navigationTitleCompound: "復合濾芯",
      navigationTitleTime: "定時開關機",
      navigationTitleTimeSetting: "定時設置",
      navigationTitleTimeRepeat: "重復",
      navigationTitleTimeCustom: "自定義",
      navigationTitleHistory: "歷史記錄",
      navigationTitleMiddleIntroduce: "復合濾芯更換方法",
      navigationTitlePtcTimer: "辅热定时设置",
      navigationTitleLightTimer: "灯光定时设置",
      licenseUrl: _$$_REQUIRE(_dependencyMap[10]),
      privacyUrl: _$$_REQUIRE(_dependencyMap[11]),
      middleFilterUrl: "http://apphelp.dream-maker.com/doc/mi/cn/filter_change/intermediate.html",
      filterBuyUrl: "https://search.mi.com/search_米家新风机滤芯",
      middleFilterBuyUrl: "https://item.mi.com/1190500007.html"
    },
    'zh-hk': {
      setting: "設置",
      featureSetting: "feature setting",
      commonSetting: "一般設定",
      deviceName: "裝置名稱",
      locationManagement: "位置管理",
      shareDevice: "裝置共用",
      ifttt: '智能場景',
      voiceAuth: '語音授權',
      firmwareUpgrate: "固件升級",
      moreSetting: "更多設定",
      addToDesktop: "新增到桌面",
      resetDevice: "刪除裝置",
      help: '使用帮助',
      licenseAndPolicy: "法律信息",
      security: '安全設定',
      feedback: '反饋問題',
      timezone: '裝置時區',
      addToDesk: '新増捷徑至桌面',
      controlDevice: "設備控制",
      productIntroduce: "產品介紹",
      license: "用戶協議",
      privacy: "隱私政策",
      now: "現在",
      day: "天",
      pick_h: "時",
      pick_m: "分",
      hour: "小時",
      minute: "分鐘",
      days: "天",
      hours: "小時",
      minutes: "分鐘",
      hourP: "点",
      minuteP: "分",
      later: "後",
      open: "開啟",
      close: "關閉",
      ptcOpen: "開啟",
      ptcClose: "關閉",
      open_dis: "",
      close_dis: "",
      notStart: "未啟用",
      notAdd: "未添加",
      left: "剩余",
      cancel: "取消",
      conformBlank: "確 定",
      conform: "確定",
      reset: "重置",
      refreshing: "正在刷新...",
      edit: "編輯",
      achieve: "完成",
      repeat: "重復",
      remove: "移除",
      delete: "删除",
      custom: "自定義",
      pm25Tip: "PM2.5參考值",
      pm25Outdoor: "室外PM2.5",
      airIndoor: "室內空氣",
      airStatusOfLatelyHalfDay: "最近12小時室內空氣狀態",
      airCheckHistoryLine: "查看歷史記錄",
      ptcHeat: "輔熱",
      ptcOff: "關閉",
      ptcLevel1: "壹擋",
      ptcLevel2: "二擋",
      ptcLevel3: "三擋",
      ptcTip: "請待室外溫度降低時\n再手動打開輔熱",
      ptcTipDesc: "当室外温度高于20℃时，辅热将临时关闭",
      ptcShowTip: "室外溫度較高 輔熱自動關閉",
      compoundFilterTitle: "復合濾芯剩余",
      filterDayLeftTip: "預計還可使用",
      filterDayLeftTip_dis: "",
      timeTip: "定時開關機",
      loveAreaSetting: "手動模式風量設置",
      filterBuyTip: "濾芯購買稍後上線",
      ptcOnDes: "開啟(室外大於20度,已臨時關閉)",
      childLock: "兒童鎖",
      childLockTip: "兒童鎖開啟後，只可通過app控制產品運行",
      deviceSound: "提示音",
      deviceLight: "灯光",
      deviceLocation: "新風機位置",
      wifiSignal: "Wi-Fi信号强度",
      screenDirection: "显示屏方向",
      ptcTimerPower: "輔熱定時開關",
      lightTimerPower: "灯光定時開關",
      screenForward: "正向",
      screenLeft: "逆時針90°",
      screenRight: "順時針90°",
      airFresh: "清新",
      airDense: "浑濁",
      airFreshDis: "空氣清新",
      airDenseDis: "空氣浑濁",
      airMildAnoxia: "輕度缺氧",
      airBadAnoxia: "嚴重缺氧",
      airPollutedSlightly: "輕度汙染",
      airPollutedMiddle: "中度汙染",
      airPollutedBad: "重度汗染",
      controlOff: "關機",
      controlOn: "開機",
      controlAuto: "自動",
      controlSleep: "睡眠",
      controlFavourite: "手動",
      buyFilter: "購買濾芯",
      resetFilter: "重置濾芯壽命",
      buyFilterSuggestion: "建議及时購買濾芯",
      replaceFilterSuggestion: "建議及时更換濾芯",
      filterBuyTip: "濾芯購買稍後上線",
      filterResetTitle: "重置濾芯壽命",
      filterResetTip: "重置後將重新計算濾芯壽命，請更換濾芯後再確認重置",
      middleFilterDes: "高效與中效濾芯二合一，最高H13級HEPA\n有效過濾花粉、PM0.3 等顆粒物",
      suitAreaTitle: "適用面積",
      timeListFullTip: "定時開關機已滿，請先刪除再添加",
      timeListEmptyTip: "還未添加定時",
      timeAddTitle: "添加",
      endTime: "關閉時間",
      startTime: "開啟時間",
      timeRegion: "開啟時段",
      unSetting: "未設置",
      autoStartTime: "開啟時間",
      autoCloseTime: "關閉時間",
      timeCancleTiptitle: "還未設置時間",
      timeCancleTipDetailTitle: "放棄本次操作?",
      timeCancleTipDetailTitle1: "確認放棄本次修改?",
      timeCancleTiptitle2: "放棄對本次定時的更改?",
      timeCancleTip: "還未設置定時",
      timeCancleTip1: "您設置的開關時間相同，請重新設置",
      timeDeleteTip: "删除定時",
      locationConformTiTle: "校准新风机位置",
      locationConformTip: "新风机需要使用手机当前位置,请确保手机靠近新风机",
      timeCancleConform: "确认放弃",
      loveModeName: "手動模式",
      loveModeTip: "請設置您的房屋面積範圍",
      loveModeKnown: "知道了",
      loveModeSeting: "去設置",
      Sunday: "周日",
      Monday: "周壹",
      Tuesday: "周二",
      Wednesday: "周三",
      Thursday: "周四",
      Friday: "周五",
      Saturday: "周六",
      everyDay: "每天",
      weekday: "工作日",
      weekend: "周末",
      timeTo: "至",
      day_dis: "日",
      week_dis: "周",
      month_dis: "月",
      requestFailTip: "設置失敗",
      requestModeFailTip: "模式設置失敗",
      requestSwitchFailTip: "開關設置失敗",
      requestPtcFailTip: "辅热设置失败",
      requestScreenFailTip: "显示屏方向设置失败",
      requestFavoriteFailTip: "最爱面积设置失败",
      requestTimeFailTip: "设置定时失败",
      resetCompoundFilterSuccess: "復合濾芯重置成功",
      requestCityFailTip: "無法定位城市",
      requestPtcTimerFailTip: "辅热定时请求失败",
      requestRemoveTimeFailTip: "定時刪除失敗",
      navigationTitleCompound: "復合濾芯",
      navigationTitleTime: "定時開關機",
      navigationTitleTimeSetting: "定時設置",
      navigationTitleTimeRepeat: "重復",
      navigationTitleTimeCustom: "自定義",
      navigationTitleHistory: "歷史記錄",
      navigationTitleMiddleIntroduce: "復合濾芯更換方法",
      navigationTitlePtcTimer: "辅热定时设置",
      navigationTitleLightTimer: "灯光定时设置",
      licenseUrl: _$$_REQUIRE(_dependencyMap[10]),
      privacyUrl: _$$_REQUIRE(_dependencyMap[11]),
      middleFilterUrl: "http://apphelp.dream-maker.com/doc/mi/cn/filter_change/intermediate.html",
      filterBuyUrl: "https://search.mi.com/search_米家新风机滤芯",
      middleFilterBuyUrl: "https://item.mi.com/1190500007.html"
    },
    'ko': {
      setting: "Setting",
      featureSetting: "Shortcut settings",
      commonSetting: "Common settings",
      deviceName: "Device name",
      locationManagement: "Locations",
      shareDevice: "Share device",
      ifttt: "Automation",
      voiceAuth: 'Voice authorization',
      firmwareUpgrate: "Firmware updates",
      moreSetting: "Additional settings",
      addToDesktop: "Add to Home screen",
      resetDevice: "Delete device",
      help: 'Help',
      licenseAndPolicy: "User Agreement & Privacy Policy",
      security: 'Security settings',
      feedback: 'Feedback',
      timezone: 'Device time zone',
      addToDesk: 'Add to Home screen',
      controlDevice: "Device controls",
      productIntroduce: "Product presentation",
      license: "User Agreement",
      privacy: "Privacy Policy",
      now: "Now",
      day: " day ",
      hour: " hour ",
      minute: " minute ",
      days: " days ",
      hours: " hours ",
      minutes: " minutes ",
      pick_h: "h",
      pick_m: "min",
      hourP: ":",
      minuteP: "",
      later: "",
      open: "",
      close: "",
      ptcOpen: "Power-on",
      ptcClose: "Power-off",
      open_dis: "Power-on in ",
      close_dis: "Power-off in ",
      notStart: "Not enabled",
      notAdd: "Not added",
      left: "Remaining ",
      cancel: "Cancel",
      conformBlank: "OK",
      conform: "OK",
      reset: "Reset",
      refreshing: "Refreshing...",
      edit: "Edit",
      achieve: "OK",
      repeat: "Repeat",
      remove: "Remove",
      delete: "Delete",
      custom: "Custom",
      pm25Tip: "PM2.5 Reference Value",
      pm25Outdoor: "Outdoor PM2.5",
      airIndoor: "Indoor air",
      airStatusOfLatelyHalfDay: "Indoor air quality over the last 12 hours",
      airCheckHistoryLine: "View history",
      ptcHeat: "Auxiliary heat",
      ptcOff: "Off",
      ptcLevel1: "Level 1",
      ptcLevel2: "Level 2",
      ptcLevel3: "Level 3",
      ptcTip: "请待室外温度降低时\n再手动打开辅热",
      ptcTipDesc: "Auxiliary heat will shutdown temporary when outside temperature is above 20℃",
      ptcShowTip: "室外温度较高 辅热自动关闭",
      compoundFilterTitle: "Composite filter life remaining: ",
      filterDayLeftTip: "Estimated remaining life: ",
      filterDayLeftTip_dis: "of estimated remaining life, ",
      timeTip: "Scheduled on/off",
      loveAreaSetting: "Manual mode settings",
      filterBuyTip: "Coming soon",
      ptcOnDes: "Power-on(Temporary turned off)",
      childLock: "Parental controls",
      childLockTip: "After enabling parental controls, the device can only be controlled via the app",
      deviceSound: "Notification sounds",
      deviceLight: "Light",
      deviceLocation: "Fresh air ventilator position",
      wifiSignal: "Wi-Fi signal strength",
      screenDirection: "Display direction",
      ptcTimerPower: "Auxiliary heat Timer",
      lightTimerPower: "Light Timer",
      screenForward: "Normal",
      screenLeft: "Counterclockwise 90°",
      screenRight: "Clockwise 90°",
      airFresh: "Fresh",
      airDense: "Turbid",
      airFreshDis: "Fresh air",
      airDenseDis: "Turbid air",
      airMildAnoxia: "Light oxygen deficiency",
      airBadAnoxia: "Severe oxygen deficiency",
      airPollutedSlightly: "Light pollution",
      airPollutedMiddle: "Moderate pollution",
      airPollutedBad: "Heavy pollution",
      controlOff: "Turn off",
      controlOn: "Turn on",
      controlAuto: "Automatic",
      controlSleep: "Sleep",
      controlFavourite: "Manual",
      buyFilter: "Purchase replacement filters",
      resetFilter: "Reset filter life tracker",
      buyFilterSuggestion: "please\npurchase a new filter soon.",
      replaceFilterSuggestion: "please\nreplace the filter soon.",
      filterBuyTip: "Coming soon",
      filterResetTitle: "Reset filter life tracker",
      filterResetTip: "After resetting, the filter life will be recalculated. Please replace the filter and confirm the reset.",
      middleFilterDes: "Filter pro and filter are combined together, up to\nH13 level HEPA, which can effectively filter pollen,\nPM0.3 and other particulates",
      suitAreaTitle: "Applicable Area ",
      timeListFullTip: "Too many scheduled times, please delete some before adding more.",
      timeListEmptyTip: "No scheduled time added yet",
      timeAddTitle: "Add",
      endTime: "Power-off time",
      startTime: "Power-on time",
      timeRegion: "On for",
      unSetting: "Not set",
      autoStartTime: "Power-on time",
      autoCloseTime: "Power-off time",
      timeCancleTiptitle: "No scheduled time set yet",
      timeCancleTipDetailTitle: "Abort this operation?",
      timeCancleTipDetailTitle1: "确认放弃本次修改?",
      timeCancleTiptitle2: "Discard the changes to the scheduled time?",
      timeCancleTip: "No scheduled time set yet",
      timeCancleTip1: "The power-on and power-off times are the same, please modify them.",
      timeDeleteTip: "Delete scheduled time",
      locationConformTiTle: "Adjust location",
      locationConformTip: "Fresh Air Ventilator will use your phone's location, please make sure your phone is close to the Fresh Air Ventilator",
      timeCancleConform: "OK",
      loveModeName: "Manual Mode",
      loveModeTip: "Please set the area of your home",
      loveModeKnown: "OK",
      loveModeSeting: "Go to Settings",
      Sunday: "Sun",
      Monday: "Mon",
      Tuesday: "Tue",
      Wednesday: "Wed",
      Thursday: "Thu",
      Friday: "Fri",
      Saturday: "Sat",
      everyDay: "Daily",
      weekday: "Working days",
      weekend: "Weekends",
      timeTo: " to ",
      day_dis: "Day",
      week_dis: "Week",
      month_dis: "Month",
      requestFailTip: "Setting failed",
      requestModeFailTip: "Could not set up the mode",
      requestSwitchFailTip: "Could not set up the switch",
      requestPtcFailTip: "Could not set up the auxiliary heat",
      requestScreenFailTip: "Could not set the display direction",
      requestFavoriteFailTip: "Could not set as favorite area",
      requestTimeFailTip: "Could not set scheduled time",
      resetCompoundFilterSuccess: "Filter reset successfully",
      requestCityFailTip: "Could not locate your city",
      requestPtcTimerFailTip: "Could not set Auxiliary heat timer",
      requestRemoveTimeFailTip: "Could not delete scheduled settings",
      navigationTitleCompound: "Composite filter",
      navigationTitleTime: "Scheduled on/off",
      navigationTitleTimeSetting: "Timer Settings",
      navigationTitleTimeRepeat: "Repeat",
      navigationTitleTimeCustom: "Custom",
      navigationTitleHistory: "History",
      navigationTitleMiddleIntroduce: "Replace the Composite Filter",
      navigationTitlePtcTimer: "Auxiliary heat Timer Settings",
      navigationTitleLightTimer: "Light Timer Settings",
      licenseUrl: _$$_REQUIRE(_dependencyMap[8]),
      privacyUrl: _$$_REQUIRE(_dependencyMap[9]),
      middleFilterUrl: "http://apphelp.dream-maker.com/doc/mi/en/filter_change/intermediate.html",
      filterBuyUrl: "https://search.mi.com/search_米家新风机滤芯",
      middleFilterBuyUrl: "https://item.mi.com/1190500007.html"
    }
  };
  exports.strings = strings;
  var localStrings = new _LocalizedStrings.default(strings);
  exports.localStrings = localStrings;
  var LocalizedStrings = new _LocalizedStrings.default(strings);
  exports.LocalizedStrings = LocalizedStrings;

  function getString(key) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (obj) {
      return new _intlMessageformat.default(localStrings[key], localStrings.language).format(obj);
    } else {
      return localStrings[key];
    }
  }
},10010,[14305,10013,13591,13582,13669,13672,13675,13678,10016,10019,10022,10025]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var localization = _miot.Host.locale.language;

  if (!localization) {
    console.error("Something went wrong initializing the native ReactLocalization module.\nPlease check your configuration.\nDid you run 'react-native link'?");
  }

  var interfaceLanguage = localization.replace(/_/g, '-');

  var LocalizedStrings = function () {
    (0, _createClass2.default)(LocalizedStrings, [{
      key: "_getBestMatchingLanguage",
      value: function _getBestMatchingLanguage(language, props) {
        if (props[language]) return language;
        var idx = language.lastIndexOf("-");

        if (idx >= 0) {
          language = language.substring(0, idx);
          return this._getBestMatchingLanguage(language, props);
        }

        return Object.keys(props)[0];
      }
    }]);

    function LocalizedStrings(props) {
      (0, _classCallCheck2.default)(this, LocalizedStrings);
      this.props = props;
      this.setLanguage(interfaceLanguage);
    }

    (0, _createClass2.default)(LocalizedStrings, [{
      key: "setContent",
      value: function setContent(props) {
        this.props = props;
        this.setLanguage(this.language);
      }
    }, {
      key: "setLanguage",
      value: function setLanguage(language) {
        var bestLanguage = this._getBestMatchingLanguage(language, this.props);

        var defaultLanguage = Object.keys(this.props)[0];
        this.language = bestLanguage;

        if (this.props[bestLanguage]) {
          var localizedStrings = (0, _extends2.default)({}, this.props[defaultLanguage], this.props[this.language]);

          for (var key in localizedStrings) {
            if (localizedStrings.hasOwnProperty(key)) {
              this[key] = localizedStrings[key];
            }
          }

          if (defaultLanguage !== this.language) {
            localizedStrings = this.props[defaultLanguage];

            this._fallbackValues(localizedStrings, this);
          }
        }
      }
    }, {
      key: "_fallbackValues",
      value: function _fallbackValues(defaultStrings, strings) {
        for (var key in defaultStrings) {
          if (defaultStrings.hasOwnProperty(key) && !strings[key]) {
            strings[key] = defaultStrings[key];
            console.log("Missing localization for language '" + this.language + "' and key '" + key + "'.");
          } else {
            if (typeof strings[key] != "string") {
              this._fallbackValues(defaultStrings[key], strings[key]);
            }
          }
        }
      }
    }, {
      key: "getLanguage",
      value: function getLanguage() {
        return this.language;
      }
    }, {
      key: "getInterfaceLanguage",
      value: function getInterfaceLanguage() {
        return interfaceLanguage;
      }
    }, {
      key: "getLocaleObject",
      value: function getLocaleObject() {
        return this.props;
      }
    }, {
      key: "getAvailableLanguages",
      value: function getAvailableLanguages() {
        if (!this.availableLanguages) {
          this.availableLanguages = [];

          for (var language in this.props) {
            this.availableLanguages.push(language);
          }
        }

        return this.availableLanguages;
      }
    }, {
      key: "formatString",
      value: function formatString(str) {
        var res = str;

        for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
          res = this._replaceAll("{" + i + "}", i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1], res);
        }

        return res;
      }
    }, {
      key: "getString",
      value: function getString(key, language) {
        try {
          return this.props[language][key];
        } catch (ex) {
          console.log("No localization found for key " + key + " and language " + language);
        }

        return null;
      }
    }, {
      key: "_replaceAll",
      value: function _replaceAll(original, replacement, str) {
        original = original.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        replacement = ("" + replacement).replace(/([$])/g, '$$$$');
        return str.replace(new RegExp(original, 'g'), replacement);
      }
    }]);
    return LocalizedStrings;
  }();

  module.exports = LocalizedStrings;
},10013,[14305,14344,14320,14323,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/html",
    "scales": [1],
    "hash": "38da0e3cb342cd9568b8a0033f08e29b",
    "name": "license_en",
    "type": "html"
  });
},10016,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/html",
    "scales": [1],
    "hash": "e736fc6384a3091296ddfdb5c81ba212",
    "name": "policy_en",
    "type": "html"
  });
},10019,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/html",
    "scales": [1],
    "hash": "f52a650944d31e9f3c68ebf803b872d7",
    "name": "license_cn",
    "type": "html"
  });
},10022,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/html",
    "scales": [1],
    "hash": "12985c34ec5892d0ac4ec3a77530d557",
    "name": "policy_cn",
    "type": "html"
  });
},10025,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeUiKitten = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _FontSizeConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var _CustomButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _miot = _$$_REQUIRE(_dependencyMap[15]);

  var titleHeight = _MHGlobalData.default.naviTitleHeight;
  var imgHeight = 28;
  var whiteColor = 'white';

  var CustomTitleNavigation = function (_Component) {
    (0, _inherits2.default)(CustomTitleNavigation, _Component);

    function CustomTitleNavigation(props) {
      (0, _classCallCheck2.default)(this, CustomTitleNavigation);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomTitleNavigation).call(this, props));
    }

    (0, _createClass2.default)(CustomTitleNavigation, [{
      key: "render",
      value: function render() {
        var _this = this;

        if (_reactNative.Platform.OS === 'android') {
          _reactNative.StatusBar.setTranslucent(true);
        }

        var barHeight = this.props.barHeight ? this.props.barHeight : titleHeight;
        var leftWidth = this.props.leftTextStyle ? this.props.leftTextStyle.width : 0;
        var leftSource = this.props.leftImageNormalSource ? this.props.leftImageNormalSource : _$$_REQUIRE(_dependencyMap[16]);
        var leftLightSource = this.props.leftImageHighlightedSource ? this.props.leftImageHighlightedSource : _$$_REQUIRE(_dependencyMap[17]);
        var rightSource = this.props.rightImageNormalSource ? this.props.rightImageNormalSource : _$$_REQUIRE(_dependencyMap[18]);
        var rightLightSource = this.props.rightImageHighlightedSource ? this.props.rightImageHighlightedSource : _$$_REQUIRE(_dependencyMap[19]);
        var titleArray = this.props.titleArray ? this.props.titleArray : [];
        var titleColorArray = this.props.titleColorArray ? this.props.titleColorArray : ['white'];
        var titleFontArray = this.props.titleFontArray ? this.props.titleFontArray : [(0, _FontSizeConstant.setSpTextNew)(15)];
        var opacityArray = this.props.opacityArray ? this.props.opacityArray : [1, 0];
        return _react.default.createElement(_reactNavigation.SafeAreaView, {
          style: [styles.titleBarContainer, this.props.style]
        }, _react.default.createElement(_reactNative.View, {
          style: [{
            justifyContent: 'center',
            alignItems: 'center',
            flexDirection: "row",
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: barHeight
          }]
        }, this.props.leftText ? _react.default.createElement(_reactNativeUiKitten.RkButton, {
          onPress: this.props.onPressLeft,
          contentStyle: [styles.leftRightText, this.props.leftTextStyle],
          style: [styles.leftRightText, {
            height: this.props.onPressLeft ? titleHeight : 0,
            width: leftWidth ? leftWidth : 56
          }]
        }, this.props.leftText) : _react.default.createElement(_ui.ImageButton, {
          onPress: this.props.onPressLeft,
          style: [styles.img, {
            height: this.props.onPressLeft ? imgHeight : 0
          }],
          source: leftSource,
          highlightedSource: leftLightSource
        }), _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer]
        }, titleArray.length == 6 ? _react.default.createElement(_reactNative.View, {
          style: [styles.columnStyle, {
            opacity: opacityArray[0]
          }],
          ref: "titleView"
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.titleText, styles.textBaseStyle, {
            color: titleColorArray[0],
            fontSize: titleFontArray[0]
          }],
          numberOfLines: 1,
          ellipsizeMode: "tail"
        }, titleArray[0]), _react.default.createElement(_reactNative.Text, {
          style: [styles.subtitleText, styles.textBaseStyle, {
            color: titleColorArray.length == titleArray.length ? titleColorArray[1] : titleColorArray[0],
            fontSize: titleFontArray.length == titleArray.length ? titleFontArray[1] : titleFontArray[0]
          }]
        }, titleArray[1])) : null, titleArray.length == 6 ? _react.default.createElement(_reactNative.View, {
          style: [styles.rowStyle, {
            position: 'absolute',
            opacity: opacityArray[1]
          }],
          ref: "subTitleView"
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.columnStyle]
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.textBaseStyle, {
            fontSize: titleFontArray[2]
          }]
        }, titleArray[2]), _react.default.createElement(_reactNative.Text, {
          style: [styles.textMiKmediumStyle, {
            fontSize: titleFontArray[3]
          }]
        }, titleArray[3])), _react.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: 'rgba(255, 255, 255, 0.4)',
            marginLeft: 20,
            marginRight: 20,
            height: 27,
            width: 0.5
          }]
        }), _react.default.createElement(_reactNative.View, {
          style: [styles.columnStyle]
        }, titleArray[4] == "CO2" ? _react.default.createElement(_reactNative.View, {
          style: [styles.rowStyle]
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.textBaseStyle, {
            fontSize: titleFontArray[4]
          }]
        }, "CO"), _react.default.createElement(_reactNative.Text, {
          style: [styles.textBaseStyle, {
            fontSize: (0, _FontSizeConstant.setSpTextNew)(6),
            marginBottom: -3
          }]
        }, "2")) : _react.default.createElement(_reactNative.Text, {
          style: [styles.textBaseStyle, {
            fontSize: titleFontArray[4]
          }]
        }, titleArray[4]), _react.default.createElement(_reactNative.Text, {
          style: [styles.textMiKmediumStyle, {
            fontSize: titleFontArray[5]
          }]
        }, titleArray[5]))) : null), this.props.rightText ? _react.default.createElement(_CustomButton.default, {
          title: this.props.rightText,
          onPressColor: this.props.onPressColor,
          contentStyle: this.props.rightTextStyle,
          onPress: function onPress() {
            _this.props.onPressRight();
          }
        }) : _react.default.createElement(_ui.ImageButton, {
          onPress: this.props.onPressRight,
          style: [styles.img, {
            height: this.props.onPressRight ? imgHeight : 0
          }],
          source: rightSource,
          highlightedSource: rightLightSource
        })));
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (props.hasOwnProperty('titleOpacity')) {
          this.refs.titleView.setNativeProps({
            style: {
              opacity: props["titleOpacity"]
            }
          });
        }

        if (props.hasOwnProperty('subTitleOpacity')) {
          this.refs.subTitleView.setNativeProps({
            style: {
              opacity: props["subTitleOpacity"]
            }
          });
        }
      }
    }]);
    return CustomTitleNavigation;
  }(_react.Component);

  exports.default = CustomTitleNavigation;

  var styles = _reactNative.StyleSheet.create({
    titleBarContainer: {
      flexDirection: "row",
      width: (0, _MHGlobalData.getWindowWidth)(),
      alignItems: "flex-end",
      height: _reactNative.StatusBar.currentHeight + titleHeight
    },
    textContainer: {
      height: titleHeight,
      width: (0, _MHGlobalData.getWindowWidth)() - 56 - 56,
      alignItems: 'center',
      justifyContent: 'center'
    },
    titleText: {
      textAlignVertical: 'center',
      textAlign: 'center'
    },
    subtitleText: {
      color: '#00000088',
      fontSize: (0, _FontSizeConstant.setSpTextNew)(12),
      textAlignVertical: 'center',
      textAlign: 'center',
      marginTop: _miot.Host.isAndroid ? 4 : 6
    },
    leftRightText: {
      flexDirection: 'column',
      backgroundColor: '#0000',
      alignItems: 'center',
      justifyContent: 'center',
      textAlignVertical: "center",
      textAlign: "center"
    },
    rowStyle: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    },
    columnStyle: {
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center'
    },
    textBaseStyle: {
      color: whiteColor,
      fontFamily: _miot.Host.isAndroid ? _FontSizeConstant.default.FontfamilyOfDin : null
    },
    textMiKmediumStyle: {
      color: whiteColor,
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      marginTop: _miot.Host.isAndroid ? -2 : 2
    },
    img: {
      width: imgHeight,
      height: imgHeight,
      resizeMode: "contain",
      marginLeft: 14,
      marginTop: (titleHeight - 28) / 2,
      marginBottom: (titleHeight - 28) / 2,
      marginRight: 14
    }
  });
},10028,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10918,11251,10031,10034,10043,10074,10049,10052,10055,10058]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.print = print;
  exports.getWindowHeight = getWindowHeight;
  exports.getWindowWidth = getWindowWidth;
  exports.getVideoHeight = getVideoHeight;
  exports.getWidthSize = getWidthSize;
  exports.getHeightSize = getHeightSize;
  exports.getControlHeight = getControlHeight;
  exports.default = exports.RIPPLE_SCALE = undefined;

  var _miot = _$$_REQUIRE(_dependencyMap[1]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var MHGlobal = {};
  var StatusBarManager = _reactNative.NativeModules.StatusBarManager;

  var window = _reactNative.Dimensions.get('window');

  var iosStatusHeight = 20;
  _miot.Host.isIOS && StatusBarManager.getHeight(function (statusBarHeight) {
    if (statusBarHeight.hasOwnProperty("height")) {
      iosStatusHeight = _DataUtils.default.toNumber(statusBarHeight["height"]);
    }
  });
  var IphoneX = _miot.Host.isIOS && iosStatusHeight > 20;
  var isIpad = _miot.Host.systemInfo.mobileModel.indexOf("iPad") == -1 ? false : true;
  MHGlobal.deviceName = _miot.Device.name;
  MHGlobal.userId = _miot.Service.account.ID;
  MHGlobal.deviceId = _miot.Device.deviceID;
  MHGlobal.deviceModel = "dmaker.airfresh.a1";
  MHGlobal.isIphoneX = _miot.Host.isAndroid ? false : IphoneX;
  MHGlobal.naviTitleHeight = 44;
  MHGlobal.windowHeight = 0;
  MHGlobal.windowWidth = 0;
  MHGlobal.statusBarHeight = _miot.Host.isAndroid ? _reactNative.StatusBar.currentHeight : iosStatusHeight;
  MHGlobal.naviHeight = MHGlobal.naviTitleHeight + MHGlobal.statusBarHeight;
  MHGlobal.HeightPersent = (getWindowHeight() / 667.00).toFixed(2);
  MHGlobal.WidthPersent = (getWindowWidth() / 375.00).toFixed(2);
  MHGlobal.locationDataUrl = MHGlobal.userId + MHGlobal.deviceId + "location";
  MHGlobal.cachePrefix = MHGlobal.userId + MHGlobal.deviceId + "-";
  MHGlobal.cachedLocationData = false;
  MHGlobal.locationData = "";
  MHGlobal.ratio = _reactNative.PixelRatio.get();
  MHGlobal.en = "en";
  MHGlobal.zhHans = "zh";
  MHGlobal.zhHant = "zh";
  MHGlobal.zhTW = "zh-tw";
  MHGlobal.zhHK = "zh-hk";
  MHGlobal.krea = "ko";
  MHGlobal.isEnglish = _miot.Host.locale.language == MHGlobal.en ? true : false;
  MHGlobal.ItemSelectedColor = 'rgba(0, 0, 0, 0.05)';
  MHGlobal.baseFontStyle = _miot.Host.isAndroid ? {
    fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight
  } : {};
  MHGlobal.baseFontStyleOfMiLight = _miot.Host.isAndroid ? {
    fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight
  } : {};
  var RIPPLE_SCALE = 1.2;
  exports.RIPPLE_SCALE = RIPPLE_SCALE;
  var printDate = new Date();

  function print(msg) {}

  function getWindowHeight() {
    if (MHGlobal.windowHeight === 0) {
      return window.height;
    }

    return MHGlobal.windowHeight;
  }

  function getWindowWidth() {
    if (MHGlobal.windowWidth === 0) {
      return window.width;
    }

    return MHGlobal.windowWidth;
  }

  function getVideoHeight() {
    return getWindowHeight() - getControlHeight();
  }

  function getWidthSize(width) {
    return width * MHGlobal.WidthPersent;
  }

  function getHeightSize(height) {
    return height * MHGlobal.HeightPersent;
  }

  function getControlHeight() {
    return getWindowHeight() * 0.37;
  }

  Date.prototype.Format = function (fmt) {
    var o = {
      "M+": this.getMonth() + 1,
      "d+": this.getDate(),
      "h+": this.getHours(),
      "m+": this.getMinutes(),
      "s+": this.getSeconds(),
      "S": this.getMilliseconds()
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));

    for (var k in o) {
      if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }

    return fmt;
  };

  var _default = MHGlobal;
  exports.default = _default;
},10031,[14305,10074,10033,10034,10037]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setSpText = setSpText;
  exports.setSpTextNew = setSpTextNew;
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var MHGlobal = _$$_REQUIRE(_dependencyMap[1]);

  var deviceWidth = _reactNative.Dimensions.get('window').width;

  var deviceHeight = _reactNative.Dimensions.get('window').height;

  var fontScale = _reactNative.PixelRatio.getFontScale();

  var pixelRatio = _reactNative.PixelRatio.get();

  var defaultWidth = 375;
  var defaultHeight = 667;

  var _scaleWidth = deviceWidth / defaultWidth;

  var _scaleHeight = deviceHeight / defaultHeight;

  function setSpText(size) {
    var allowFontScaling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var fontSize = allowFontScaling ? 1 : fontScale;
    return size / fontSize;
  }

  function setSpTextNew(size) {
    var allowFontScaling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var fontSize = allowFontScaling ? 1 : fontScale;
    return size / fontSize;
  }

  var fontSize = {
    FontOfMainPageTitle: setSpText(13),
    FontOfMainPageDetailTitle: setSpText(12),
    FontOfMainPageControlTitle: setSpText(13),
    FontOfMainPagePm25Title: setSpText(12),
    FontOfMainPagePm25Number: setSpText(87),
    FontOfMainPageCo2Title: setSpText(14),
    FontOfMainPageCo2NumberTitle: setSpText(10),
    FontOfMainPageTopCo2NumberTitle: setSpText(6),
    FontOfMainPageAirTitle: setSpText(14),
    FontOfMainPageCurveDesTitle: setSpText(12),
    FontOfMainPageCurveHitoryTitle: setSpText(12),
    FontOfMainPageNavTitle: setSpText(14),
    FontOfMainPageNavDetail: setSpText(11),
    FontOfMainPageNavTitle2: setSpText(10),
    FontOfMainPageNavDetail2: setSpText(18),
    FontOfMainPagePtcPickName: setSpText(13),
    FontOfMainPagePtcPickTitle: setSpText(13),
    FontOfMainPageLoveAreaTitle: setSpText(13),
    FontOfMainPageLoveAreaNumTitle: setSpText(13),
    FontOfMainPageLoveAreaSureTitle: setSpText(13),
    FontOfMainpageHistoryLineTitle: setSpText(9),
    FontOfControlHeatStatusTitle: setSpText(12),
    FontOfMidFilterBuyTitle: setSpText(12),
    FontOfMidFilterResetTitle: setSpText(12),
    FontOfMidFilterLifeLeftTitle: setSpText(31),
    FontOfMidFilterSuggetionTitle: setSpText(13),
    FontOfMidFilterDespTitle: setSpText(12),
    FontOfHighFilterBuyTitle: setSpText(12),
    FontOfHighFilterResetTitle: setSpText(12),
    FontOfHighFilterLifeLeftTitle: setSpText(31),
    FontOfHighFilterSuggetionTitle: setSpText(13),
    FontOfHighFilterDespTitle: setSpText(12),
    FontOfHighFilterLifeLeftNumber: setSpText(40),
    FontOfControlTimeAddTitle: setSpText(10),
    FontOfControlTimeTitle: setSpText(15),
    FontOfControlTimeDetailTitle: setSpText(12),
    FontOfControlTimeEmpetyTitle: setSpText(14),
    FontOfRepateTitle: setSpText(12),
    FontOfRepateDetailTitle: setSpText(10),
    FontOfDayTimeTitle: setSpText(12),
    FontOfTimeSureBtn: setSpText(12),
    FontOfTimeTitle: setSpText(15),
    FontOfTimeDetailTitle: setSpText(12),
    FontOfTimeRemoveTitle: setSpText(12),
    FontOfHistoryViewNumber: setSpText(40),
    FontOfHistoryViewTitle: setSpText(12),
    FontOfHistoryViewTime: setSpText(13),
    FontOfHistoryViewTit: setSpText(14),
    FontOfHistoryViewTimeList: setSpText(9),
    FontOfMainpageHistoryViewTitle: setSpText(13),
    FontOfHistoryBottomViewTime: setSpText(13),
    FontOfReset: setSpText(16),
    FontOfSectionHeaderText: setSpText(14),
    FontOfEnLeftText: setSpText(37),
    FontfamilyOfDin: 'D-DIN',
    FontfamilyOfDinCondensedBold: 'D-DINCondensed-Bold',
    FontfamilyOfDinCondensed: 'D-DINCondensed',
    FontfamilyOfDinExpBold: 'D-DINExp-Bold',
    FontfamilyOfMiKmedium: 'Kmedium',
    FontfamilyOfDigital: 'DS-Digital',
    FontfamilyOfMiLight: 'MI-LANTING--GBK1-Light',
    FontfamilyOfMiThin: 'MI-LANTING--GBK1-Thin'
  };
  var _default = fontSize;
  exports.default = _default;
},10034,[10033,10031]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5]));

  var NULL_TIME = '99:99';

  var DataUtils = function () {
    function DataUtils() {
      (0, _classCallCheck2.default)(this, DataUtils);
    }

    (0, _createClass2.default)(DataUtils, null, [{
      key: "roundSize",
      value: function roundSize(size) {
        var tempSize = Math.round(size);
        return tempSize % 2 === 0 ? tempSize : tempSize - 1;
      }
    }, {
      key: "checkTime",
      value: function checkTime(time) {
        return time && time.length === 5 && time !== NULL_TIME && time.includes(":");
      }
    }, {
      key: "initTimeItemData",
      value: function initTimeItemData(item) {
        var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var dic = {
          'isEmpty': true
        };
        dic["index"] = _LocalTimeStrings.default.addZero(String(index), 2);

        if (item && item.includes('-')) {
          var timeArray = String(item).split("-");

          if (timeArray.length >= 5) {
            var indexDiff = timeArray.length - 5;
            dic["week"] = timeArray[indexDiff];
            dic["hexSum"] = timeArray[indexDiff];
            dic["startTime"] = timeArray[1 + indexDiff];
            dic["endTime"] = timeArray[2 + indexDiff];
            dic["level"] = timeArray[3 + indexDiff];
            dic["status"] = timeArray[timeArray.length - 1];
            dic["isEmpty"] = false;
          }
        }

        return dic;
      }
    }, {
      key: "getValueFromMap",
      value: function getValueFromMap(map, key) {
        var value = map.get(key);

        if (Array.isArray(value)) {
          value = value[0];
        }

        return value;
      }
    }, {
      key: "checkBoolValue",
      value: function checkBoolValue(string) {
        return String(string) === 'true';
      }
    }, {
      key: "checkBoolProp",
      value: function checkBoolProp(string) {
        var value = false;

        if (string == 'true' || string == 'false' || string == true || string == false) {
          value = true;
        }

        return value;
      }
    }, {
      key: "addPrefixForItem",
      value: function addPrefixForItem(dataArray) {
        if (dataArray.length > 0) {
          for (var i = 0; i < dataArray.length; i++) {
            if (dataArray[i].search(_MHGlobalData.default.cachePrefix) == -1) {
              dataArray[i] = _MHGlobalData.default.cachePrefix + dataArray[i];
            }
          }
        }

        return dataArray;
      }
    }, {
      key: "addPrefix",
      value: function addPrefix(prefix, string) {
        if (string.search(prefix) == -1) {
          string = prefix + string;
        }

        return string;
      }
    }, {
      key: "isEmptyObject",
      value: function isEmptyObject(obj) {
        for (var name in obj) {
          if (obj.hasOwnProperty(name)) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "toNumber",
      value: function toNumber(key) {
        var type = "number";

        if (typeof key !== type) {
          key = isNaN(Number(key)) ? 0 : Number(key);
        }

        return key;
      }
    }, {
      key: "toBool",
      value: function toBool(key) {
        var type = "boolean";

        if (typeof key !== type) {
          key = Boolean(key);
        }

        return key;
      }
    }, {
      key: "faviriteAreaTip",
      value: function faviriteAreaTip(area) {
        var string = Math.round(DataUtils.toNumber(area) / 2.9) + "-" + Math.round(DataUtils.toNumber(area) / 2.4) + "㎡";
        return string;
      }
    }]);
    return DataUtils;
  }();

  exports.default = DataUtils;
},10037,[14308,14305,14320,14323,10040,10031]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[8]);

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var LocalTimeStrings = function (_Component) {
    (0, _inherits2.default)(LocalTimeStrings, _Component);

    function LocalTimeStrings() {
      (0, _classCallCheck2.default)(this, LocalTimeStrings);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LocalTimeStrings).apply(this, arguments));
    }

    (0, _createClass2.default)(LocalTimeStrings, [{
      key: "_GMTToHourStr",
      value: function _GMTToHourStr(time) {
        var date = new Date(time);
        var hour = date.getHours();
        return hour;
      }
    }], [{
      key: "binaryArraryToNumber",
      value: function binaryArraryToNumber(array) {
        var totalNumber = 0;
        var exp = 2;

        if (array.length > 0) {
          for (var i = 0; i < array.length; i++) {
            totalNumber += Math.pow(exp, parseInt(array[i]));
          }
        }

        return totalNumber;
      }
    }, {
      key: "hexToBinaryFrom7To1",
      value: function hexToBinaryFrom7To1(hexNum) {
        var binary = parseInt(hexNum, 16).toString(2);
        var extre = '';

        if (binary.length < 8) {
          for (var i = 0; i < 8 - binary.length; i++) {
            extre += '0';
          }

          binary = extre + binary;
        }

        binary = binary.substr(0, 7);
        return binary;
      }
    }, {
      key: "hexToBinaryFrom1To7",
      value: function hexToBinaryFrom1To7(hexNum) {
        var binary = parseInt(hexNum, 16).toString(2);
        var extre = '';

        if (binary.length < 8) {
          for (var i = 0; i < 8 - binary.length; i++) {
            extre += '0';
          }

          binary = extre + binary;
        }

        binary = binary.substr(0, 7);
        binary = binary.split('').reverse().join('');
        return binary;
      }
    }, {
      key: "reverse",
      value: function reverse(str) {
        return str.split('').reverse().join('');
      }
    }, {
      key: "addZero",
      value: function addZero(str, totalNum) {
        if (String(str).length < totalNum) {
          var zeroStr = '';

          for (var i = 0; i < totalNum - String(str).length; i++) {
            zeroStr = '0' + zeroStr;
          }

          str = zeroStr + str;
        }

        return String(str);
      }
    }, {
      key: "returnTime",
      value: function returnTime(totalStr) {
        var string = totalStr;

        if (totalStr == LocalTimeStrings.blank) {
          string = _MHLocalizableString.localStrings.unSetting;
        }

        return string;
      }
    }, {
      key: "returnTimeString",
      value: function returnTimeString(start, end) {
        var time = '';
        var blank = '99:99';

        if (start == blank) {
          if (end == blank) {} else {
            time = _MHLocalizableString.localStrings.endTime + ' ' + end;
          }
        } else {
          if (end == blank) {
            time = _MHLocalizableString.localStrings.startTime + ' ' + start;
          } else {
            time = _MHLocalizableString.localStrings.timeRegion + ' ' + start + ' - ' + end;
          }
        }

        return time;
      }
    }, {
      key: "filterTimeListData",
      value: function filterTimeListData(array) {
        var index = -1;

        for (var i = 0; i < array.length; i++) {
          if (i < array.length - 1) {
            if (array[i].length > 15 && array[i + 1].length < 15) {
              index = i;
              break;
            }
          } else {
            if (array[i - 1].length > 15 && array[i].length > 15) {
              index = i;
              break;
            }
          }
        }

        var dataSource = [];

        if (index >= 0) {
          for (var j = 0; j <= index; j++) {
            if (array[j].length > 15) {
              dataSource.push(array[j]);
            }
          }
        }

        return dataSource;
      }
    }, {
      key: "initTimeItemData",
      value: function initTimeItemData(item, index) {
        var dic = {};

        if (item != " " && item.length > 15) {
          dic["week"] = item.substr(0, 2);
          dic["startTime"] = item.substr(3, 5);
          dic["endTime"] = item.substr(9, 5);
          dic["status"] = item.substr(15, item.length - 15);
          dic["hexSum"] = item.substr(0, 2);
          dic["btnVisible"] = false;
          dic["isEmpty"] = false;
        } else {
          dic["isEmpty"] = true;
        }

        dic["index"] = LocalTimeStrings.addZero(String(index), 2);
        return dic;
      }
    }, {
      key: "getCurrentSecond",
      value: function getCurrentSecond() {
        var time = parseInt(new Date().getTime() / 1000);
        return time;
      }
    }, {
      key: "returnWeekShow",
      value: function returnWeekShow(weekHex) {
        var days = LocalTimeStrings.hexToBinaryFrom7To1(weekHex);
        var name = LocalTimeStrings.returnWeekString(days);
        return name;
      }
    }, {
      key: "getHistoryDataFromApi",
      value: function getHistoryDataFromApi(key, type, startTime, endTime, cbk) {
        var param = {
          did: _miot.Device.deviceID,
          key: key,
          data_type: type,
          time_start: parseInt(startTime),
          time_end: parseInt(endTime),
          limit: 0
        };
        console.log('param=' + JSON.stringify(param));

        _miot.Service.smarthome.getUserStatistics(param).then(function (response) {
          if (parseInt(response.code) == 0) {
            var result = response.result;
            var message = response.message;

            if (message !== "ok" || result === undefined) {
              LocalTimeStrings.getHistoryDataFromApi(key, type, startTime, endTime, cbk);
              return;
            } else {
              cbk && cbk(result);
            }
          }
        }).catch(function (err) {});
      }
    }, {
      key: "getHistoryData_test",
      value: function getHistoryData_test(key, startTime, endTime, cbk) {
        var x = setInterval(function () {
          if (LocalTimeStrings.requestPropsCount <= 1) {
            var param = {
              did: _miot.Device.deviceID,
              uid: _miot.Service.account.ID,
              key: key,
              type: "prop",
              time_start: String(startTime),
              time_end: String(endTime),
              limit: "1000"
            };
            console.log('param=' + JSON.stringify(param));
            LocalTimeStrings.requestPropsCount++;

            _miot.Service.smarthome.getDeviceData(param).then(function (response) {
              LocalTimeStrings.requestPropsCount--;
              var result = response;

              if (result === undefined) {
                LocalTimeStrings.getHistoryData_test(key, startTime, endTime, cbk);
                return;
              } else {
                if (result.length === 0) {
                  console.log(response);
                  console.log('~ ' + new Date(startTime * 1000).toLocaleString() + startTime + '--' + endTime + new Date(endTime * 1000).toLocaleString());
                }
              }

              if (result.length < 1000) {
                var tempArr = [];
                console.log('<1000 ' + new Date(startTime * 1000).toLocaleString() + startTime + '--' + endTime + new Date(endTime * 1000).toLocaleString());

                for (var i = 0; i < result.length; i++) {
                  var dic = {};
                  dic["time"] = result[i]["time"];
                  dic["value"] = result[i]["value"].replace(/[^0-9]/g, '');
                  tempArr.push(dic);
                }

                cbk && cbk(tempArr);
              } else {
                console.log('>1000 ' + new Date(startTime * 1000).toLocaleString() + '--' + new Date(endTime * 1000).toLocaleString());
                endTime = result[result.length - 1].time - 1;
                var midTime = parseInt((startTime + endTime) / 2);
                var left = new Promise(function (resolve, reject) {
                  LocalTimeStrings.getHistoryData_test(key, startTime, midTime - 1, function (data) {
                    resolve(data);
                  });
                });
                var right = new Promise(function (resolve, reject) {
                  LocalTimeStrings.getHistoryData_test(key, midTime, endTime, function (data) {
                    resolve(data);
                  });
                });
                Promise.all([left, right]).then(function (values) {
                  var tempArr = [];

                  for (var _i = 0; _i < result.length; _i++) {
                    var _dic = {};
                    _dic["time"] = result[_i]["time"];
                    _dic["value"] = result[_i]["value"].replace(/[^0-9]/g, '');
                    tempArr.push(_dic);
                  }

                  cbk && cbk(values[0].concat(values[1], tempArr));
                });
              }
            }).catch(function (err) {
              console.log('getDeviceData---err', err);
            });

            clearInterval(x);
          }
        }, 100);
      }
    }, {
      key: "getHistroryData",
      value: function getHistroryData(key, startTime, endTime, callback) {
        var param = {
          "did": _miot.Device.deviceID,
          "uid": _miot.Service.account.ID,
          "key": key,
          "type": "prop",
          "time_start": String(startTime),
          "time_end": String(endTime),
          "limit": "1000"
        };
        console.log("param" + JSON.stringify(param));

        _miot.Service.smarthome.getDeviceData(param).then(function (response) {
          var result = response.result;
          var tempArr = [];

          if (result.length > 0) {
            for (var i = 0; i < result.length; i++) {
              var dic = {};
              dic["time"] = result[i]["time"];
              dic["value"] = result[i]["value"].replace(/[^0-9]/g, '');
              tempArr.push(dic);
            }

            callback && callback(tempArr, tempArr.length >= 1000 ? false : true);

            while (result.length >= 1000) {
              LocalTimeStrings.getHistroryData(key, startTime, result[result.length - 1]["time"] - 1, callback);
              return;
            }
          }
        }).catch(function (err) {});
      }
    }, {
      key: "getMainEndSecond",
      value: function getMainEndSecond(currentSecond, hour) {
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var time_minute = new Date(time * 1000).getMinutes();

        if (time_minute == 0) {
          time = (time_hour - parseInt(hour) - 1) * 3600;
        } else {
          time = (time_hour - parseInt(hour)) * 3600 + (time - time_hour * 3600);
        }

        return time;
      }
    }, {
      key: "getCurrnentWeekTime",
      value: function getCurrnentWeekTime(currentWeek, currentStartTime) {
        var times = [];
        var timeMargin = 86400;

        for (var i = 0; i <= 6; i++) {
          var item = currentStartTime + i * timeMargin;
          times.push(item);
        }

        var reverseNum = currentWeek - 1 >= 0 ? currentWeek - 1 : 6;
        var lastArr = times;

        if (reverseNum != 0) {
          var startIndex = 0;
          var endIndex = 6 - reverseNum;
          var part1 = times.slice(startIndex, endIndex + 1);
          var part2 = times.slice(endIndex + 1);
          lastArr = part2.concat(part1);
        }

        return lastArr;
      }
    }, {
      key: "getTimesArray",
      value: function getTimesArray(currentSecond, hour) {
        var tempArr = [];
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var time_minute = new Date(time * 1000).getMinutes();

        if (time_minute == 0) {
          time = time_hour * 3600;
        } else {
          time = (time_hour + 1) * 3600;
        }

        var item = {};
        item["co2Sum"] = 0;
        item["co2Count"] = 0;
        item["pm25Sum"] = 0;
        item["pm25Count"] = 0;
        item["time"] = time;
        tempArr.push(item);

        for (var i = 0; i < hour; i++) {
          var _item = {};
          var timeItem = time - (i + 1) * 3600;
          _item["co2Sum"] = 0;
          _item["co2Count"] = 0;
          _item["pm25Sum"] = 0;
          _item["pm25Count"] = 0;
          _item["time"] = timeItem;
          tempArr.push(_item);
        }

        return tempArr.reverse();
      }
    }, {
      key: "getStartTime",
      value: function getStartTime(currentSecond, hour) {
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        time = (time_hour - parseInt(hour)) * 3600;
        return time;
      }
    }, {
      key: "getWeekStartTime",
      value: function getWeekStartTime(currentSecond) {
        var timeMargin = 5400;
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var hours = new Date(time * 1000).getHours();
        var today_time = (time_hour - hours) * 3600;
        var startTime = today_time - 432000;
        return startTime - timeMargin;
      }
    }, {
      key: "getWeekArray",
      value: function getWeekArray(currentSecond) {
        var timeMargin = 5400;
        var tempArr = [];
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var hours = new Date(time * 1000).getHours();
        var today_time = (time_hour - hours) * 3600;
        var startTime = today_time - 432000;
        var timesCount = (today_time - startTime) / timeMargin;
        var item = {};
        item["co2Sum"] = 0;
        item["co2Count"] = 0;
        item["pm25Sum"] = 0;
        item["pm25Count"] = 0;
        item["time"] = startTime - timeMargin;
        tempArr.push(item);

        for (var i = 0; i < timesCount; i++) {
          var itemTime = startTime + timeMargin * i;
          var item1 = {};
          item1["co2Sum"] = 0;
          item1["co2Count"] = 0;
          item1["pm25Sum"] = 0;
          item1["pm25Count"] = 0;
          item1["time"] = itemTime;
          tempArr.push(item1);
        }

        var todayTimeCount = (time - today_time) % timeMargin == 0 ? (time - today_time) / timeMargin : (time - today_time) / timeMargin + 1;

        for (var _i2 = 0; _i2 < todayTimeCount; _i2++) {
          var _itemTime = today_time + timeMargin * _i2;

          var _item2 = {};
          _item2["co2Sum"] = 0;
          _item2["co2Count"] = 0;
          _item2["pm25Sum"] = 0;
          _item2["pm25Count"] = 0;
          _item2["time"] = _itemTime;
          tempArr.push(_item2);
        }

        return tempArr;
      }
    }, {
      key: "getweekTimeStr",
      value: function getweekTimeStr(num) {
        var time = '';

        switch (num) {
          case 0:
            {
              time = _MHLocalizableString.localStrings.Sunday;
              break;
            }

          case 1:
            {
              time = _MHLocalizableString.localStrings.Monday;
              break;
            }

          case 2:
            {
              time = _MHLocalizableString.localStrings.Tuesday;
              break;
            }

          case 3:
            {
              time = _MHLocalizableString.localStrings.Wednesday;
              break;
            }

          case 4:
            {
              time = _MHLocalizableString.localStrings.Thursday;
              break;
            }

          case 5:
            {
              time = _MHLocalizableString.localStrings.Friday;
              break;
            }

          case 6:
            {
              time = _MHLocalizableString.localStrings.Saturday;
              break;
            }
        }

        return time;
      }
    }, {
      key: "getMainTimeArray",
      value: function getMainTimeArray(currentSecond, hour, margin) {
        var timeArr = [];
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var time_minute = parseInt(time % 3600);
        console.log('minute==' + time_minute, 'hour=' + time_hour);
        var num = 60 / parseInt(margin);

        if (time_minute == 0) {
          for (var i = 0; i < hour; i++) {
            for (var j = 0; j < num; j++) {
              var dic = {};
              dic["time"] = parseInt(time - (i + 1) * 3600 + (num - j) * (margin * 60));
              dic["co2Sum"] = 0;
              dic["co2Count"] = 0;
              dic["pm25Sum"] = 0;
              dic["pm25Count"] = 0;
              timeArr.push(dic);
            }
          }
        } else {
          var minute_num = parseInt(time_minute / (margin * 60));
          var minute_left = time_minute % (margin * 60);
          console.log('minute==' + minute_num, 'left=' + minute_left);
          var count = minute_left == 0 ? minute_num : minute_num + 1;

          for (var _i3 = 0; _i3 < hour; _i3++) {
            var totalCount = _i3 == 0 ? count : num;

            for (var _j = 0; _j < totalCount; _j++) {
              var _dic2 = {};
              _dic2["time"] = _i3 == 0 ? time_hour * 3600 + (totalCount - _j) * (margin * 60) : parseInt(time - _i3 * 3600 - (time - time_hour * 3600) + (totalCount - _j) * (margin * 60));
              _dic2["co2Sum"] = 0;
              _dic2["co2Count"] = 0;
              _dic2["pm25Sum"] = 0;
              _dic2["pm25Count"] = 0;
              timeArr.push(_dic2);
            }
          }
        }

        return timeArr;
      }
    }, {
      key: "getSpecialTimeArray",
      value: function getSpecialTimeArray(currentSecond, hour, margin, type) {
        var timeArr = [];
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var time_minute = parseInt(time % 3600);
        console.log('minute==' + time_minute, 'hour=' + time_hour);
        var num = 60 / parseInt(margin);

        if (time_minute == 0) {
          for (var i = 0; i < hour; i++) {
            for (var j = 0; j < num; j++) {
              var dic = {};
              dic["time"] = parseInt(time - (i + 1) * 3600 + (num - j) * (margin * 60));
              dic["value"] = type == "co2" ? -1000 : -75;
              timeArr.push(dic);
            }
          }
        } else {
          var minute_num = parseInt(time_minute / (margin * 60));
          var minute_left = time_minute % (margin * 60);
          console.log('minute==' + minute_num, 'left=' + minute_left);
          var count = minute_left == 0 ? minute_num : minute_num + 1;

          for (var _i4 = 0; _i4 < hour; _i4++) {
            var totalCount = _i4 == 0 ? count : num;

            for (var _j2 = 0; _j2 < totalCount; _j2++) {
              var _dic3 = {};
              _dic3["time"] = _i4 == 0 ? time_hour * 3600 + (totalCount - _j2) * (margin * 60) : parseInt(time - _i4 * 3600 - (time - time_hour * 3600) + (totalCount - _j2) * (margin * 60));
              _dic3["value"] = type == "co2" ? -1000 : -75;
              timeArr.push(_dic3);
            }
          }
        }

        return timeArr;
      }
    }, {
      key: "getSpecialWeekArray",
      value: function getSpecialWeekArray(currentSecond, type) {
        var timeMargin = 5400;
        var tempArr = [];
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var hours = new Date(time * 1000).getHours();
        var today_time = (time_hour - hours) * 3600;
        var startTime = today_time - 432000;
        var timesCount = (today_time - startTime) / timeMargin;

        for (var i = 0; i < timesCount; i++) {
          var itemTime = startTime + timeMargin * i;
          var item1 = {};
          item1["value"] = type == "co2" ? -1000 : -75;
          item1["time"] = itemTime;
          tempArr.push(item1);
        }

        var todayTimeCount = (time - today_time) % timeMargin == 0 ? (time - today_time) / timeMargin : (time - today_time) / timeMargin + 1;

        for (var _i5 = 0; _i5 < todayTimeCount; _i5++) {
          var _itemTime2 = today_time + timeMargin * _i5;

          var item = {};
          item["value"] = type == "co2" ? -1000 : -75;
          item["time"] = _itemTime2;
          tempArr.push(item);
        }

        tempArr.reverse();
        return tempArr;
      }
    }, {
      key: "getSpecialMonthArray",
      value: function getSpecialMonthArray(currentSecond, type) {
        var timeMargin = 28800;
        var tempArr = [];
        var time = parseInt(currentSecond);
        var time_hour = parseInt(time / 3600);
        var hours = new Date(time * 1000).getHours();
        var today_time = (time_hour - hours) * 3600;
        var startTime = today_time - 2505600;
        var timesCount = (today_time - startTime) / timeMargin;

        for (var i = 0; i < timesCount; i++) {
          var itemTime = startTime + timeMargin * i;
          var item1 = {};
          item1["value"] = type == "co2" ? -1000 : -75;
          item1["time"] = itemTime;
          tempArr.push(item1);
        }

        var todayTimeCount = (time - today_time) % timeMargin == 0 ? (time - today_time) / timeMargin : (time - today_time) / timeMargin + 1;

        for (var _i6 = 0; _i6 < todayTimeCount; _i6++) {
          var _itemTime3 = today_time + timeMargin * _i6;

          var item = {};
          item["value"] = type == "co2" ? -1000 : -75;
          item["time"] = _itemTime3;
          tempArr.push(item);
        }

        tempArr.reverse();
        return tempArr;
      }
    }, {
      key: "returnWeekString",
      value: function returnWeekString(days) {
        var name = '';

        if (days == "1111111") {
          name = _MHLocalizableString.localStrings.everyDay;
        } else if (days == "1100000") {
          name = _MHLocalizableString.localStrings.weekend;
        } else if (days == "0011111") {
          name = _MHLocalizableString.localStrings.weekday;
        } else if (days == "0111111") {
          name = _MHLocalizableString.localStrings.Monday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Saturday;
        } else if (days == "1111110") {
          name = _MHLocalizableString.localStrings.Tuesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Sunday;
        } else if (days == "0111110") {
          name = _MHLocalizableString.localStrings.Tuesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Saturday;
        } else if (days == "1111100") {
          name = _MHLocalizableString.localStrings.Wednesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Sunday;
        } else if (days == "0001111") {
          name = _MHLocalizableString.localStrings.Monday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Thursday;
        } else if (days == "0011110") {
          name = _MHLocalizableString.localStrings.Tuesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Friday;
        } else if (days == "0111100") {
          name = _MHLocalizableString.localStrings.Wednesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Saturday;
        } else if (days == "1111000") {
          name = _MHLocalizableString.localStrings.Thursday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Sunday;
        } else if (days == "0000111") {
          name = _MHLocalizableString.localStrings.Monday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Wednesday;
        } else if (days == "0001110") {
          name = _MHLocalizableString.localStrings.Tuesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Thursday;
        } else if (days == "0011100") {
          name = _MHLocalizableString.localStrings.Wednesday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Friday;
        } else if (days == "0111000") {
          name = _MHLocalizableString.localStrings.Thursday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Saturday;
        } else if (days == "1110000") {
          name = _MHLocalizableString.localStrings.Friday + _MHLocalizableString.localStrings.timeTo + _MHLocalizableString.localStrings.Sunday;
        } else {
          if (days.substr(6, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Monday + ',';
          }

          if (days.substr(5, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Tuesday + ',';
          }

          if (days.substr(4, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Wednesday + ',';
          }

          if (days.substr(3, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Thursday + ',';
          }

          if (days.substr(2, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Friday + ',';
          }

          if (days.substr(1, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Saturday + ',';
          }

          if (days.substr(0, 1) == '1') {
            name = name + _MHLocalizableString.localStrings.Sunday + ',';
          }

          name = name.substr(0, name.length - 1);
        }

        return name;
      }
    }, {
      key: "descriptionOfScreen",
      value: function descriptionOfScreen(screenDir) {
        var str = _MHLocalizableString.localStrings.screenForward;

        if (screenDir == "forward") {
          str = _MHLocalizableString.localStrings.screenForward;
        }

        if (screenDir == "left") {
          str = _MHLocalizableString.localStrings.screenLeft;
        }

        if (screenDir == "right") {
          str = _MHLocalizableString.localStrings.screenRight;
        }

        return str;
      }
    }, {
      key: "indexOfScreenDirection",
      value: function indexOfScreenDirection(screenDir) {
        var index = 0;

        if (screenDir == "forward") {
          index = 0;
        }

        if (screenDir == "left") {
          index = 1;
        }

        if (screenDir == "right") {
          index = 2;
        }

        return index;
      }
    }, {
      key: "descriptionOfPm25",
      value: function descriptionOfPm25(pm25) {
        var num = parseInt(pm25);
        var str = '--';

        if (num >= 0 && num <= 75) {
          str = _MHLocalizableString.localStrings.airFresh;
        }

        if (num >= 76 && num <= 115) {
          str = _MHLocalizableString.localStrings.airPollutedSlightly;
        }

        if (num >= 116 && num <= 150) {
          str = _MHLocalizableString.localStrings.airPollutedMiddle;
        }

        if (num >= 151) {
          str = _MHLocalizableString.localStrings.airPollutedBad;
        }

        return str;
      }
    }, {
      key: "descriptionOfPm25Dis",
      value: function descriptionOfPm25Dis(pm25) {
        var num = parseInt(pm25);
        var str = '--';

        if (num >= 0 && num <= 75) {
          str = _MHLocalizableString.localStrings.airFreshDis;
        }

        if (num >= 76 && num <= 115) {
          str = _MHLocalizableString.localStrings.airPollutedSlightly;
        }

        if (num >= 116 && num <= 150) {
          str = _MHLocalizableString.localStrings.airPollutedMiddle;
        }

        if (num >= 151) {
          str = _MHLocalizableString.localStrings.airPollutedBad;
        }

        return str;
      }
    }, {
      key: "indexOfPm25",
      value: function indexOfPm25(pm25) {
        var num = parseInt(pm25);
        var index = 0;

        if (num >= 0 && num <= 75) {
          index = 0;
        }

        if (num >= 76 && num <= 115) {
          index = 1;
        }

        if (num >= 116 && num <= 150) {
          index = 2;
        }

        if (num >= 151) {
          index = 3;
        }

        return index;
      }
    }, {
      key: "descriptionOfCo2",
      value: function descriptionOfCo2(co2) {
        var num = parseInt(co2);
        var str = '--';

        if (num >= 0 && num <= 1000) {
          str = _MHLocalizableString.localStrings.airFresh;
        }

        if (num >= 1001 && num <= 2000) {
          str = _MHLocalizableString.localStrings.airDense;
        }

        if (num >= 2001 && num <= 5000) {
          str = _MHLocalizableString.localStrings.airMildAnoxia;
        }

        if (num >= 5001) {
          str = _MHLocalizableString.localStrings.airBadAnoxia;
        }

        return str;
      }
    }, {
      key: "descriptionOfCo2Dis",
      value: function descriptionOfCo2Dis(co2) {
        var num = parseInt(co2);
        var str = '--';

        if (num >= 0 && num <= 1000) {
          str = _MHLocalizableString.localStrings.airFreshDis;
        }

        if (num >= 1001 && num <= 2000) {
          str = _MHLocalizableString.localStrings.airDenseDis;
        }

        if (num >= 2001 && num <= 5000) {
          str = _MHLocalizableString.localStrings.airMildAnoxia;
        }

        if (num >= 5001) {
          str = _MHLocalizableString.localStrings.airBadAnoxia;
        }

        return str;
      }
    }, {
      key: "indexOfCo2",
      value: function indexOfCo2(co2) {
        var num = parseInt(co2);
        var index = 0;

        if (num >= 0 && num <= 1000) {
          index = 0;
        }

        if (num >= 1001 && num <= 2000) {
          index = 1;
        }

        if (num >= 2001 && num <= 5000) {
          index = 2;
        }

        if (num >= 5001) {
          index = 3;
        }

        return index;
      }
    }, {
      key: "descriptionOfEnviroment",
      value: function descriptionOfEnviroment(pm25Str, co2Str, pm25Index, co2Index) {
        var str = '';

        if (pm25Index == co2Index) {
          str = pm25Str;
        } else {
          str = pm25Index > co2Index ? pm25Str : co2Str;
        }

        return str;
      }
    }, {
      key: "deepCopy",
      value: function deepCopy(obj) {
        if (typeof obj != 'object') {
          return obj;
        }

        if (obj instanceof Array) {
          var newArr = new Array();

          for (var item in obj) {
            newArr.push(obj[item]);
          }

          return newArr;
        }

        var newobj = {};

        for (var attr in obj) {
          newobj[attr] = LocalTimeStrings.deepCopy(obj[attr]);
        }

        return newobj;
      }
    }, {
      key: "binaryToHexNum",
      value: function binaryToHexNum(dayArr) {
        var binaryStr = '';

        for (var i = 0; i < dayArr.length; i++) {
          if (dayArr[i].choose == true) {
            binaryStr = '1' + binaryStr;
          } else {
            binaryStr = '0' + binaryStr;
          }
        }

        binaryStr = binaryStr + '0';
        var hexNum = parseInt(binaryStr, 2).toString(16);

        if (hexNum.length < 2) {
          hexNum = '0' + hexNum;
        }

        return hexNum;
      }
    }]);
    return LocalTimeStrings;
  }(_react.Component);

  exports.default = LocalTimeStrings;
  LocalTimeStrings.hexNumEveryDay = 'fe';
  LocalTimeStrings.hexNumWeekDay = '3e';
  LocalTimeStrings.hexNumWeekend = 'c0';
  LocalTimeStrings.blank = '99:99';
  LocalTimeStrings.requestPropsCount = 0;
},10040,[14308,14305,14320,14323,14371,14377,14386,10297,10010,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[12]);

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform,
      TouchableHighlight = ReactNative.TouchableHighlight;

  var CustomButton = function (_Component) {
    (0, _inherits2.default)(CustomButton, _Component);

    function CustomButton(props) {
      (0, _classCallCheck2.default)(this, CustomButton);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomButton).call(this, props));
    }

    (0, _createClass2.default)(CustomButton, [{
      key: "render",
      value: function render() {
        var _this = this;

        var height = this.props.height ? this.props.height : 44;
        var width = this.props.width ? this.props.width : (0, _MHGlobalData.getWindowWidth)();
        var onPressColor = this.props.onPressColor ? this.props.onPressColor : '#3c82f6';
        var leftMargin = this.props.contentStyle.marginLeft ? this.props.contentStyle.marginLeft : 0;
        var rightMargin = this.props.contentStyle.marginRight ? this.props.contentStyle.marginRight : 0;
        var contentHeight = this.props.contentStyle.height ? this.props.contentStyle.height : 30;
        var contentWidth = this.props.contentStyle.width ? this.props.contentStyle.width : 40;
        var bckColor = this.props.contentStyle.backgroundColor ? this.props.contentStyle.backgroundColor : '#4a8dfc';
        var fontSize = this.props.contentStyle.fontSize ? this.props.contentStyle.fontSize : 12;
        var textColor = this.props.contentStyle.color ? this.props.contentStyle.color : 'white';
        var borderWidth = this.props.contentStyle.borderWidth ? this.props.contentStyle.borderWidth : 0;
        var borderColor = this.props.contentStyle.borderColor ? this.props.contentStyle.borderColor : 'transparent';
        return _react.default.createElement(View, {
          style: {
            width: contentWidth,
            height: height,
            alignItems: 'center',
            justifyContent: 'center',
            marginRight: rightMargin,
            marginLeft: leftMargin
          }
        }, _react.default.createElement(TouchableHighlight, {
          style: {
            width: contentWidth,
            height: contentHeight,
            backgroundColor: bckColor,
            borderRadius: 6,
            borderWidth: borderWidth,
            borderColor: borderColor
          },
          underlayColor: onPressColor,
          onPress: function onPress() {
            _this.props.onPress();
          }
        }, _react.default.createElement(Text, {
          style: {
            textAlign: 'center',
            fontSize: fontSize,
            color: textColor,
            marginTop: _miot.Host.isAndroid ? this.props.title == _MHLocalizableString.LocalizedStrings.achieve ? 6.5 : 6 : this.props.title == _MHLocalizableString.LocalizedStrings.achieve ? 9 : 8
          }
        }, this.props.title)));
      }
    }]);
    return CustomButton;
  }(_react.Component);

  exports.default = CustomButton;
},10043,[14308,14305,14320,14323,14371,14377,14386,10297,10046,10074,10010,10031,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var color = {
    ColorMainPageTitle: '#585858',
    ColorMainPageDetailTitle: '#adadad',
    ColorMainPageDetailTitleUnable: '#cacaca',
    ColorMainPageControlTitle: '#a3a3a3',
    ColorMainPageCurveDesTitle: '#b8b8b8',
    ColorMainPageCurveHitoryTitle: '#6A6A6A',
    ColorMainPageControlBtnTitle: '#d1d1d1',
    ColorMainPagePtcPickNorTitle: '#636363',
    ColorMainPageLoveAreaSureTitle: '#484848',
    ColorControlHeatStatusTitle: '#585858',
    ColorMidFilterBuyTitle: '#737373',
    ColorMidFilterSuggestionTitle: '#585858',
    ColorMidFilterDespTitle: '#8d8d8d',
    ColorMidFilterNormalTitle: '#4a8dfc',
    ColorMidFilterInNormalTitle: '#ff6849',
    ColorHighFilterBuyTitle: '#737373',
    ColorHighFilterSuggestionTitle: '#585858',
    ColorHighFilterDespTitle: '#8d8d8d',
    ColorControlTimeAddTitle: '#888888',
    ColorControlTimeTitle: '#000000',
    ColorControlTimeDetailTitle: '#adadad',
    ColorControlTimeEditTitle: '#606060',
    ColorControlTimeEmpetyTitle: 'rgba(0,0,0,0.5)',
    ColorRepateTitle: '#636262',
    ColorRepateDetailTitle: '#adadad',
    ColorDayTimeTitle: '#636262',
    ColorTimeSureBtn: '#4a8dfc',
    ColorTimeTitle: '#000000',
    ColorTimeDetailTitle: '#adadad',
    ColorTimeRemoveTitle: '#5f5f5f',
    ColorOfWhite: '#ffffff',
    ColorOfSperate: '#dddddd',
    ColorOfBorder: '#cfcfcf',
    ColorOfMainBlue: '#4a8dfc',
    ColorOfBlack: '#000000',
    ColorOfViewBck: '#efeff0',
    ColorOf585858: '#585858',
    ColorOf00C9DC: '#00c9dc',
    ColorOf999999: '#999999',
    ColorOff7f7f7: '#f7f7f7',
    ColorOf3C82F6: '#3c82f6',
    ColorOfD2D2D2: '#d2d2d2',
    ColorOfB8B8B8: '#b8b8b8',
    ColorOfC6C6C6: '#C6C6C6',
    ColorOfADADAD: '#adadad',
    ColorOfB2B2B2: '#b2b2b2',
    ColorMainPageBadNight: '#1b212b',
    ColorMainPageBadDay: '#6f788f',
    ColorMainPageMediumNight: '#0f214f',
    ColorMainPageMediumDay: '#517bba',
    ColorMainPageGoodNight: '#050537',
    ColorMainPageGoodDay: '#2f56fe',
    ColorMainPageBadNightBg: '#222b36',
    ColorMainPageBadDayBg: '#808a9e',
    ColorMainPageMediumNightBg: '#192b59',
    ColorMainPageMediumDayBg: '#5e8cc3',
    ColorMainPageGoodNightBg: '#040543',
    ColorMainPageGoodDayBg: '#3f6eff'
  };
  var _default = color;
  exports.default = _default;
},10046,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/title",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "ba49367e20dd3112e7049df89a0fec14",
    "name": "icon_back_nor",
    "type": "png"
  });
},10049,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/title",
    "width": 54,
    "height": 54,
    "scales": [1],
    "hash": "7260fcf5ac81599ed09a8385a80eb4b4",
    "name": "icon_back_pre",
    "type": "png"
  });
},10052,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/title",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "1159d4688d165d03fd5ba7e5ba32625f",
    "name": "icon_home_more_nor",
    "type": "png"
  });
},10055,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/title",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "f761b601a72980048f79f71cbe683bc3",
    "name": "icon_home_more_pre",
    "type": "png"
  });
},10058,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[10]);

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform;

  var SperateView = function (_Component) {
    (0, _inherits2.default)(SperateView, _Component);

    function SperateView(props) {
      (0, _classCallCheck2.default)(this, SperateView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SperateView).call(this, props));
    }

    (0, _createClass2.default)(SperateView, [{
      key: "render",
      value: function render() {
        var height = this.props.height ? this.props.height : StyleSheet.hairlineWidth;
        var width = this.props.width ? this.props.width : (0, _MHGlobalData.getWindowWidth)();
        var LeftMargin = this.props.leftMargin ? this.props.leftMargin : 0;
        var RightMargin = this.props.rightMargin ? this.props.rightMargin : 0;
        var backgroundColor = this.props.backgroundColor ? this.props.backgroundColor : _ColorConstant.default.ColorOfSperate;
        return _react.default.createElement(View, {
          style: {
            width: width,
            height: height,
            backgroundColor: 'white'
          }
        }, _react.default.createElement(View, {
          style: {
            marginLeft: LeftMargin,
            width: width - LeftMargin - RightMargin,
            height: height,
            backgroundColor: backgroundColor
          }
        }));
      }
    }]);
    return SperateView;
  }(_react.Component);

  exports.default = SperateView;
},10061,[14308,14305,14320,14323,14371,14377,14386,10297,10046,10031,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[10]);

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      TouchableOpacity = ReactNative.TouchableOpacity,
      Dimensions = ReactNative.Dimensions,
      Easing = ReactNative.Easing;

  var SperateView = function (_Component) {
    (0, _inherits2.default)(SperateView, _Component);

    function SperateView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, SperateView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SperateView).call(this, props));
      _this.defaultModalHeight = 250;
      _this.defaultAnimateTime = 200;
      _this.defaultModelAnimateTime = 250;
      _this.setVisiable = _this.props.setVisible;
      _this._renderContent = _this.props.renderCbk ? _this.props.renderCbk : _this.defaultRenderCbk;
      _this.modalHeight = _this.props.modalHeight ? _MHGlobalData.default.isIphoneX ? _this.props.modalHeight + 35 : _this.props.modalHeight : _this.defaultModalHeight;
      _this.animateTime = _this.props.animateTime ? _this.props.animateTime : _this.defaultAnimateTime;
      _this.topUp = (0, _MHGlobalData.getWindowHeight)() - _this.modalHeight;
      _this.topDown = (0, _MHGlobalData.getWindowHeight)();
      _this.isProcessing = false;
      _this.curVisiable = false;
      _this.modelOpacity = 0;
      _this.modelOpacityShow = 1.0;
      _this.layerTop = new Animated.Value(_this.topDown);
      _this.modelOpacityValue = new Animated.Value(_this.modelOpacity);
      _this.state = {
        layerTop: new Animated.Value(_this.topDown)
      };
      return _this;
    }

    (0, _createClass2.default)(SperateView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.visible) {
          this.showModal();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.visible == nextProps.visible) {
          return;
        }

        if (nextProps.visible) {
          this.showModal();
        } else {
          this.hideModal();
        }
      }
    }, {
      key: "defaultRenderCbk",
      value: function defaultRenderCbk() {
        return _react.default.createElement(View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: (0, _MHGlobalData.getWindowHeight)(),
            backgroundColor: 'white'
          }
        }, _react.default.createElement("text", null, "hello world"));
      }
    }, {
      key: "showModal",
      value: function showModal() {
        var _this2 = this;

        if (this.isProcessing || this.curVisiable) {
          return;
        }

        this.isProcessing = true;
        this.curVisiable = true;
        Animated.parallel([Animated.timing(this.layerTop, {
          toValue: this.topUp,
          duration: this.defaultModelAnimateTime
        }).start(function () {
          _this2.setVisiable(true, function () {});

          _this2.isProcessing = false;
        }), Animated.timing(this.modelOpacityValue, {
          toValue: this.modelOpacityShow,
          duration: this.defaultModelAnimateTime,
          easing: Easing.linear
        })]).start();
      }
    }, {
      key: "hideModal",
      value: function hideModal() {
        var _this3 = this;

        if (this.isProcessing || !this.curVisiable) {
          return;
        }

        this.isProcessing = true;
        Animated.parallel([Animated.timing(this.layerTop, {
          toValue: this.topDown,
          duration: this.defaultAnimateTime
        }).start(function () {
          _this3.curVisiable = false;

          _this3.setVisiable(false, function () {
            _this3.isProcessing = false;
          });
        }), Animated.timing(this.modelOpacityValue, {
          toValue: this.modelOpacity,
          duration: this.defaultAnimateTime,
          easing: Easing.linear
        })]).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        this.topUp = (0, _MHGlobalData.getWindowHeight)() - this.modalHeight;
        this.topDown = (0, _MHGlobalData.getWindowHeight)();

        if (!this.curVisiable) {
          return null;
        }

        var modeBckColor = this.modelOpacityValue.interpolate({
          inputRange: [0, 1],
          outputRange: ['rgba(0, 0, 0, 0)', 'rgba(0, 0, 0, 0.7)']
        });
        return _react.default.createElement(Animated.View, {
          style: {
            position: 'absolute',
            width: (0, _MHGlobalData.getWindowWidth)(),
            bottom: 0,
            left: 0,
            flex: 1,
            height: (0, _MHGlobalData.getWindowHeight)(),
            backgroundColor: modeBckColor
          }
        }, _react.default.createElement(TouchableOpacity, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: (0, _MHGlobalData.getWindowHeight)()
          },
          onPress: function onPress() {
            _this4.hideModal();
          }
        }), _react.default.createElement(Animated.View, {
          style: {
            position: 'absolute',
            flex: 1,
            top: this.layerTop,
            opacity: this.modelOpacityValue,
            justifyContent: 'flex-end',
            alignItems: 'center',
            flexDirection: 'column'
          }
        }, this._renderContent()));
      }
    }]);
    return SperateView;
  }(_react.Component);

  exports.default = SperateView;
},10064,[14308,14305,14320,14323,14371,14377,14386,10297,10046,10031,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[8]);

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[12]);

  var View = ReactNative.View,
      TouchableHighlight = ReactNative.TouchableHighlight,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform,
      TouchableOpacity = ReactNative.TouchableOpacity;
  var titleViewHeight = 54 * _MHGlobalData.default.HeightPersent;
  var itemViewHeight = 51 * _MHGlobalData.default.HeightPersent;

  var PtcPickView = function (_Component) {
    (0, _inherits2.default)(PtcPickView, _Component);

    function PtcPickView(props) {
      (0, _classCallCheck2.default)(this, PtcPickView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PtcPickView).call(this, props));
    }

    (0, _createClass2.default)(PtcPickView, [{
      key: "render",
      value: function render() {
        var dataSourse = this.props.dataSourse;

        if (dataSourse.viewTitle == _MHLocalizableString.localStrings.screenDirection) {
          return _react.default.createElement(View, {
            style: {
              width: this.props.style.width,
              height: this.props.style.height
            }
          }, _react.default.createElement(View, {
            style: styles.column
          }, _react.default.createElement(View, {
            style: styles.titleViewStyle
          }, _react.default.createElement(Text, {
            style: [styles.titleStyle, _MHGlobalData.default.baseFontStyle]
          }, dataSourse.viewTitle)), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[0]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[1]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[2])));
        }

        if (dataSourse.viewTitle == _MHLocalizableString.localStrings.ptcHeat) {
          return _react.default.createElement(View, {
            style: {
              width: this.props.style.width,
              height: this.props.style.height
            }
          }, _react.default.createElement(View, {
            style: styles.column
          }, _react.default.createElement(View, {
            style: styles.titleViewStyle
          }, _react.default.createElement(Text, {
            style: [styles.titleStyle, _MHGlobalData.default.baseFontStyle]
          }, dataSourse.viewTitle)), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[0]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[1]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[2]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[3])));
        }

        if (dataSourse.viewTitle == _MHLocalizableString.localStrings.navigationTitleTimeRepeat) {
          return _react.default.createElement(View, {
            style: {
              width: this.props.style.width,
              height: this.props.style.height
            }
          }, _react.default.createElement(View, {
            style: styles.column
          }, _creatControlItem(dataSourse.list[0]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[1]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[2]), _react.default.createElement(View, {
            style: styles.separator
          }), _creatControlItem(dataSourse.list[3])));
        }
      }
    }]);
    return PtcPickView;
  }(_react.Component);

  exports.default = PtcPickView;

  var _creatControlItem = function _creatControlItem(compenet) {
    if (compenet.selected) {
      return [_react.default.createElement(TouchableHighlight, {
        underlayColor: _MHGlobalData.default.ItemSelectedColor,
        onPress: function onPress() {
          return compenet.func();
        },
        key: compenet.name
      }, _react.default.createElement(View, {
        style: styles.itemView
      }, _react.default.createElement(Image, {
        source: compenet.selected == true ? compenet.selectedImage : compenet.normalImage,
        style: styles.image
      }), _react.default.createElement(Text, {
        style: [{
          marginLeft: 5,
          fontSize: _FontSizeConstant.default.FontOfMainPagePtcPickName,
          color: compenet.selected == true ? _ColorConstant.default.ColorOfMainBlue : _ColorConstant.default.ColorMainPagePtcPickNorTitle
        }, _MHGlobalData.default.baseFontStyle]
      }, compenet.name)))];
    } else {
      return [_react.default.createElement(TouchableHighlight, {
        underlayColor: _MHGlobalData.default.ItemSelectedColor,
        onPress: function onPress() {
          return compenet.func();
        },
        key: compenet.name
      }, _react.default.createElement(View, {
        style: styles.itemView
      }, _react.default.createElement(View, {
        style: styles.image
      }), _react.default.createElement(Text, {
        style: [{
          marginLeft: 5,
          fontSize: _FontSizeConstant.default.FontOfMainPagePtcPickName,
          color: compenet.selected == true ? _ColorConstant.default.ColorOfMainBlue : _ColorConstant.default.ColorMainPagePtcPickNorTitle
        }, _MHGlobalData.default.baseFontStyle]
      }, compenet.name)))];
    }
  };

  var styles = StyleSheet.create({
    image: {
      width: 6,
      height: 10,
      marginLeft: 14
    },
    itemView: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'flex-start',
      height: itemViewHeight,
      width: (0, _MHGlobalData.getWindowWidth)() - 16
    },
    column: {
      flexDirection: 'column'
    },
    titleViewStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      height: titleViewHeight,
      width: (0, _MHGlobalData.getWindowWidth)() - 16
    },
    titleStyle: {
      fontSize: _FontSizeConstant.default.FontOfMainPagePtcPickTitle,
      color: _ColorConstant.default.ColorOfBlack,
      fontWeight: 'bold'
    },
    separator: {
      height: StyleSheet.hairlineWidth,
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      marginLeft: 0,
      marginRight: 0
    }
  });
},10067,[14308,14305,14320,14323,14371,14377,14386,10297,10010,10046,10034,10031,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[8]);

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _OtherConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var _Slider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[16]);

  var View = ReactNative.View,
      TouchableHighlight = ReactNative.TouchableHighlight,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform,
      TouchableOpacity = ReactNative.TouchableOpacity;

  var LoveAreaView = function (_Component) {
    (0, _inherits2.default)(LoveAreaView, _Component);

    function LoveAreaView(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LoveAreaView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LoveAreaView).call(this, props, context));
      var dataSourse = props.dataSourse;
      _this.state = {
        dataSourse: dataSourse,
        speed: dataSourse.currentSpeed,
        value: dataSourse.sliderValue
      };
      return _this;
    }

    (0, _createClass2.default)(LoveAreaView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var dataSourse = nextProps.dataSourse;

        if (nextProps && dataSourse.currentSpeed) {
          if (_DataUtils.default.toNumber(dataSourse.currentSpeed) !== _DataUtils.default.toNumber(this.state.speed)) {
            this.setState({
              speed: _DataUtils.default.toNumber(dataSourse.currentSpeed),
              value: _DataUtils.default.toNumber(dataSourse.sliderValue)
            });
            (0, _MHGlobalData.print)('dataSourse---', JSON.stringify(nextProps.dataSourse));
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var dataSourse = this.props.dataSourse;
        var normalPad = 8;
        var bottomPad = _MHGlobalData.default.isIphoneX ? 35 : normalPad;
        (0, _MHGlobalData.print)('dataSourse---', JSON.stringify(this.state.value));
        return _react.default.createElement(View, {
          style: [this.props.style, {
            paddingBottom: bottomPad
          }]
        }, _react.default.createElement(View, {
          style: styles.column
        }, _react.default.createElement(View, {
          style: styles.topViewStyle
        }, _react.default.createElement(Text, {
          style: [styles.topAreaTitle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.localStrings.suitAreaTitle), _react.default.createElement(Text, {
          style: styles.topAreaNumTitle
        }, _DataUtils.default.faviriteAreaTip(this.state.speed))), _react.default.createElement(View, {
          style: styles.separator
        }), _react.default.createElement(View, {
          style: styles.middleViewStyle
        }, _react.default.createElement(View, {
          style: styles.middleArrowViewStyle
        }, _react.default.createElement(Image, {
          style: styles.middleMinSpeedArrow,
          source: dataSourse.minSpeedImage
        }), _react.default.createElement(Image, {
          style: styles.middleMaxSpeedArrow,
          source: dataSourse.maxSpeedImage
        })), _react.default.createElement(View, {
          style: styles.middleSliderViewStyle
        }, _react.default.createElement(_Slider.default, {
          value: this.state.value,
          onValueChange: function onValueChange(value) {
            _this2._changeSlideValue(value);
          },
          maximumTrackTintColor: '#c6c6c6',
          minimumTrackTintColor: '#4a8dfc',
          thumbTintColor: '#4a8dfc',
          trackStyle: {
            height: 2
          },
          onSlidingComplete: function onSlidingComplete() {
            return dataSourse.func(_this2.state.value, _this2.state.speed);
          }
        }))), _react.default.createElement(View, {
          style: styles.separator
        }), _react.default.createElement(View, {
          style: styles.bottomViewStyle
        }, _react.default.createElement(TouchableHighlight, {
          style: styles.bottomSureBtn,
          underlayColor: '#cdcdcd',
          onPress: function onPress() {
            return dataSourse.dismissFunc(_this2.state.value, _this2.state.speed);
          }
        }, _react.default.createElement(Text, {
          style: [styles.bottomSureTitle, _miot.Host.isAndroid ? {
            fontFamily: _FontSizeConstant.default.FontfamilyOfDin
          } : {}]
        }, _MHLocalizableString.localStrings.conformBlank)))));
      }
    }, {
      key: "_changeSlideValue",
      value: function _changeSlideValue(value) {
        var speedValue = Math.round(_DataUtils.default.toNumber(_OtherConstant.default.ConstantOfMinSpeed) + value * (_DataUtils.default.toNumber(_OtherConstant.default.ConstantOfMaxSpeed) - _DataUtils.default.toNumber(_OtherConstant.default.ConstantOfMinSpeed)));
        var state = {
          speed: speedValue,
          value: value
        };

        if (state) {
          this.setState(state);
        }
      }
    }]);
    return LoveAreaView;
  }(_react.Component);

  exports.default = LoveAreaView;
  var styles = StyleSheet.create({
    column: {
      flexDirection: 'column'
    },
    topViewStyle: {
      height: 56 * _MHGlobalData.default.HeightPersent,
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      alignItems: 'center',
      justifyContent: 'center',
      flexDirection: 'row'
    },
    topAreaTitle: {
      fontSize: _FontSizeConstant.default.FontOfMainPageLoveAreaTitle,
      color: _ColorConstant.default.ColorOfBlack,
      fontWeight: 'bold'
    },
    topAreaNumTitle: {
      fontSize: _FontSizeConstant.default.FontOfMainPageLoveAreaNumTitle,
      color: _ColorConstant.default.ColorOfMainBlue,
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      marginTop: _miot.Host.isAndroid ? 1 : 0
    },
    middleViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: 117 * _MHGlobalData.default.HeightPersent,
      alignItems: 'center',
      justifyContent: 'flex-start',
      flexDirection: 'column'
    },
    middleArrowViewStyle: {
      marginTop: 34.675 * _MHGlobalData.default.HeightPersent,
      width: (0, _MHGlobalData.getWindowWidth)() - 16 - 16 - 16,
      alignItems: 'center',
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    middleMinSpeedArrow: {
      width: 12,
      height: 12
    },
    middleMaxSpeedArrow: {
      width: 12,
      height: 12
    },
    middleSliderViewStyle: {
      marginTop: 4,
      width: (0, _MHGlobalData.getWindowWidth)() - 50,
      alignItems: "stretch",
      justifyContent: "center"
    },
    bottomViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: 54 * _MHGlobalData.default.HeightPersent,
      alignItems: 'center',
      justifyContent: 'center'
    },
    bottomSureBtn: {
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: 54 * _MHGlobalData.default.HeightPersent,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#f2f2f2',
      borderBottomLeftRadius: 10,
      borderBottomRightRadius: 10
    },
    bottomSureTitle: {
      fontSize: _FontSizeConstant.default.FontOfMainPageLoveAreaSureTitle,
      color: _ColorConstant.default.ColorMainPageLoveAreaSureTitle,
      fontWeight: 'bold'
    },
    image: {
      width: 6,
      height: 10,
      marginLeft: 14
    },
    itemView: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'flex-start',
      height: 50,
      width: (0, _MHGlobalData.getWindowWidth)() - 16
    },
    titleViewStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      height: 50,
      width: (0, _MHGlobalData.getWindowWidth)() - 16
    },
    titleStyle: {
      fontSize: _FontSizeConstant.default.FontOfMainPagePtcPickTitle,
      color: _ColorConstant.default.ColorOfBlack
    },
    separator: {
      height: 0.5,
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      marginLeft: 0,
      marginRight: 0
    }
  });
},10070,[14308,14305,14320,14323,14371,14377,14386,10297,10010,10046,10034,10073,10074,10076,10031,10037,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var OtherConstant = {
    ConstantOfMaxSpeed: 150,
    ConstantOfMinSpeed: 60,
    ConstantOfMiddleFiterDays: 180,
    ConstantOfHighFiterDays: 180
  };
  var _default = OtherConstant;
  exports.default = _default;
},10073,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var TRACK_SIZE = 4;
  var THUMB_SIZE = 20;

  function Rect(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  Rect.prototype.containsPoint = function (x, y) {
    return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
  };

  var DEFAULT_ANIMATION_CONFIGS = {
    spring: {
      friction: 7,
      tension: 100
    },
    timing: {
      duration: 150,
      easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
      delay: 0
    }
  };

  var Slider = function (_PureComponent) {
    (0, _inherits2.default)(Slider, _PureComponent);

    function Slider() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Slider);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Slider)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        containerSize: {
          width: 0,
          height: 0
        },
        trackSize: {
          width: 0,
          height: 0
        },
        thumbSize: {
          width: 0,
          height: 0
        },
        allMeasured: false,
        value: new _reactNative.Animated.Value(_this.props.value)
      };

      _this._handleStartShouldSetPanResponder = function (e) {
        return _this._thumbHitTest(e);
      };

      _this._handlePanResponderGrant = function () {
        _this._previousLeft = _this._getThumbLeft(_this._getCurrentValue());

        _this._fireChangeEvent('onSlidingStart');
      };

      _this._handlePanResponderMove = function (e, gestureState) {
        if (_this.props.disabled) {
          return;
        }

        _this._setCurrentValue(_this._getValue(gestureState));

        _this._fireChangeEvent('onValueChange');
      };

      _this._handlePanResponderEnd = function (e, gestureState) {
        if (_this.props.disabled) {
          return;
        }

        _this._setCurrentValue(_this._getValue(gestureState));

        _this._fireChangeEvent('onSlidingComplete');
      };

      _this._measureContainer = function (x) {
        _this._handleMeasure('containerSize', x);
      };

      _this._measureTrack = function (x) {
        _this._handleMeasure('trackSize', x);
      };

      _this._measureThumb = function (x) {
        _this._handleMeasure('thumbSize', x);
      };

      _this._handleMeasure = function (name, x) {
        var _x$nativeEvent$layout = x.nativeEvent.layout,
            width = _x$nativeEvent$layout.width,
            height = _x$nativeEvent$layout.height;
        var size = {
          width: width,
          height: height
        };
        var storeName = "_" + name;
        var currentSize = _this[storeName];

        if (currentSize && width === currentSize.width && height === currentSize.height) {
          return;
        }

        _this[storeName] = size;

        if (_this._containerSize && _this._trackSize && _this._thumbSize) {
          _this.setState({
            containerSize: _this._containerSize,
            trackSize: _this._trackSize,
            thumbSize: _this._thumbSize,
            allMeasured: true
          });
        }
      };

      _this._getRatio = function (value) {
        return (value - _this.props.minimumValue) / (_this.props.maximumValue - _this.props.minimumValue);
      };

      _this._getThumbLeft = function (value) {
        var ratio = _this._getRatio(value);

        return ratio * (_this.state.containerSize.width - _this.state.thumbSize.width);
      };

      _this._getValue = function (gestureState) {
        var length = _this.state.containerSize.width - _this.state.thumbSize.width;
        var thumbLeft = _this._previousLeft + gestureState.dx;
        var ratio = thumbLeft / length;

        if (_this.props.step) {
          return Math.max(_this.props.minimumValue, Math.min(_this.props.maximumValue, _this.props.minimumValue + Math.round(ratio * (_this.props.maximumValue - _this.props.minimumValue) / _this.props.step) * _this.props.step));
        } else {
          return Math.max(_this.props.minimumValue, Math.min(_this.props.maximumValue, ratio * (_this.props.maximumValue - _this.props.minimumValue) + _this.props.minimumValue));
        }
      };

      _this._getCurrentValue = function () {
        return _this.state.value.__getValue();
      };

      _this._setCurrentValue = function (value) {
        _this.state.value.setValue(value);
      };

      _this._setCurrentValueAnimated = function (value) {
        var animationType = _this.props.animationType;
        var animationConfig = (0, _extends2.default)({}, DEFAULT_ANIMATION_CONFIGS[animationType], _this.props.animationConfig, {
          toValue: value
        });

        _reactNative.Animated[animationType](_this.state.value, animationConfig).start();
      };

      _this._fireChangeEvent = function (event) {
        if (_this.props[event]) {
          _this.props[event](_this._getCurrentValue());
        }
      };

      _this._getTouchOverflowSize = function () {
        var state = _this.state;
        var props = _this.props;
        var size = {};

        if (state.allMeasured === true) {
          size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);
          size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);
        }

        return size;
      };

      _this._getTouchOverflowStyle = function () {
        var _this$_getTouchOverfl = _this._getTouchOverflowSize(),
            width = _this$_getTouchOverfl.width,
            height = _this$_getTouchOverfl.height;

        var touchOverflowStyle = {};

        if (width !== undefined && height !== undefined) {
          var verticalMargin = -height / 2;
          touchOverflowStyle.marginTop = verticalMargin;
          touchOverflowStyle.marginBottom = verticalMargin;
          var horizontalMargin = -width / 2;
          touchOverflowStyle.marginLeft = horizontalMargin;
          touchOverflowStyle.marginRight = horizontalMargin;
        }

        if (_this.props.debugTouchArea === true) {
          touchOverflowStyle.backgroundColor = 'orange';
          touchOverflowStyle.opacity = 0.5;
        }

        return touchOverflowStyle;
      };

      _this._thumbHitTest = function (e) {
        var nativeEvent = e.nativeEvent;

        var thumbTouchRect = _this._getThumbTouchRect();

        return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
      };

      _this._getThumbTouchRect = function () {
        var state = _this.state;
        var props = _this.props;

        var touchOverflowSize = _this._getTouchOverflowSize();

        return new Rect(touchOverflowSize.width / 2 + _this._getThumbLeft(_this._getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);
      };

      _this._renderDebugThumbTouchRect = function (thumbLeft) {
        var thumbTouchRect = _this._getThumbTouchRect();

        var positionStyle = {
          left: thumbLeft,
          top: thumbTouchRect.y,
          width: thumbTouchRect.width,
          height: thumbTouchRect.height
        };
        return _react.default.createElement(_reactNative.Animated.View, {
          style: [defaultStyles.debugThumbTouchArea, positionStyle],
          pointerEvents: "none"
        });
      };

      _this._renderThumbImage = function () {
        var thumbImage = _this.props.thumbImage;
        if (!thumbImage) return;
        return _react.default.createElement(_reactNative.Image, {
          source: thumbImage
        });
      };

      return _this;
    }

    (0, _createClass2.default)(Slider, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._panResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,
          onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
          onPanResponderGrant: this._handlePanResponderGrant,
          onPanResponderMove: this._handlePanResponderMove,
          onPanResponderRelease: this._handlePanResponderEnd,
          onPanResponderTerminationRequest: this._handlePanResponderRequestEnd,
          onPanResponderTerminate: this._handlePanResponderEnd
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var newValue = nextProps.value;

        if (this.props.value !== newValue) {
          if (this.props.animateTransitions) {
            this._setCurrentValueAnimated(newValue);
          } else {
            this._setCurrentValue(newValue);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            minimumValue = _this$props.minimumValue,
            maximumValue = _this$props.maximumValue,
            minimumTrackTintColor = _this$props.minimumTrackTintColor,
            maximumTrackTintColor = _this$props.maximumTrackTintColor,
            thumbTintColor = _this$props.thumbTintColor,
            thumbImage = _this$props.thumbImage,
            styles = _this$props.styles,
            style = _this$props.style,
            trackStyle = _this$props.trackStyle,
            thumbStyle = _this$props.thumbStyle,
            debugTouchArea = _this$props.debugTouchArea,
            other = (0, _objectWithoutProperties2.default)(_this$props, ["minimumValue", "maximumValue", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "thumbImage", "styles", "style", "trackStyle", "thumbStyle", "debugTouchArea"]);
        var _this$state = this.state,
            value = _this$state.value,
            containerSize = _this$state.containerSize,
            trackSize = _this$state.trackSize,
            thumbSize = _this$state.thumbSize,
            allMeasured = _this$state.allMeasured;
        var mainStyles = styles || defaultStyles;
        var thumbLeft = value.interpolate({
          inputRange: [minimumValue, maximumValue],
          outputRange: [0, containerSize.width - thumbSize.width]
        });
        var valueVisibleStyle = {};

        if (!allMeasured) {
          valueVisibleStyle.opacity = 0;
        }

        var minimumTrackStyle = (0, _objectSpread2.default)({
          position: 'absolute',
          width: _reactNative.Animated.add(thumbLeft, thumbSize.width / 2),
          backgroundColor: minimumTrackTintColor
        }, valueVisibleStyle);

        var touchOverflowStyle = this._getTouchOverflowStyle();

        return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, other, {
          style: [mainStyles.container, style],
          onLayout: this._measureContainer
        }), _react.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: maximumTrackTintColor
          }, mainStyles.track, trackStyle],
          renderToHardwareTextureAndroid: true,
          onLayout: this._measureTrack
        }), _react.default.createElement(_reactNative.Animated.View, {
          renderToHardwareTextureAndroid: true,
          style: [mainStyles.track, trackStyle, minimumTrackStyle]
        }), _react.default.createElement(_reactNative.Animated.View, {
          onLayout: this._measureThumb,
          renderToHardwareTextureAndroid: true,
          style: [{
            backgroundColor: thumbTintColor
          }, mainStyles.thumb, thumbStyle, (0, _objectSpread2.default)({
            transform: [{
              translateX: thumbLeft
            }, {
              translateY: 0
            }]
          }, valueVisibleStyle)]
        }, this._renderThumbImage()), _react.default.createElement(_reactNative.View, (0, _extends2.default)({
          renderToHardwareTextureAndroid: true,
          style: [defaultStyles.touchArea, touchOverflowStyle]
        }, this._panResponder.panHandlers), debugTouchArea === true && this._renderDebugThumbTouchRect(thumbLeft)));
      }
    }, {
      key: "_handleMoveShouldSetPanResponder",
      value: function _handleMoveShouldSetPanResponder() {
        return false;
      }
    }, {
      key: "_handlePanResponderRequestEnd",
      value: function _handlePanResponderRequestEnd(e, gestureState) {
        return false;
      }
    }]);
    return Slider;
  }(_react.PureComponent);

  exports.default = Slider;
  Slider.propTypes = {
    value: _propTypes.default.number,
    disabled: _propTypes.default.bool,
    minimumValue: _propTypes.default.number,
    maximumValue: _propTypes.default.number,
    step: _propTypes.default.number,
    minimumTrackTintColor: _propTypes.default.string,
    maximumTrackTintColor: _propTypes.default.string,
    thumbTintColor: _propTypes.default.string,
    thumbTouchSize: _propTypes.default.shape({
      width: _propTypes.default.number,
      height: _propTypes.default.number
    }),
    onValueChange: _propTypes.default.func,
    onSlidingStart: _propTypes.default.func,
    onSlidingComplete: _propTypes.default.func,
    style: _reactNative.ViewPropTypes.style,
    trackStyle: _reactNative.ViewPropTypes.style,
    thumbStyle: _reactNative.ViewPropTypes.style,
    thumbImage: _reactNative.Image.propTypes.source,
    debugTouchArea: _propTypes.default.bool,
    animateTransitions: _propTypes.default.bool,
    animationType: _propTypes.default.oneOf(['spring', 'timing']),
    animationConfig: _propTypes.default.object
  };
  Slider.defaultProps = {
    value: 0,
    minimumValue: 0,
    maximumValue: 1,
    step: 0,
    minimumTrackTintColor: '#3f3f3f',
    maximumTrackTintColor: '#b3b3b3',
    thumbTintColor: '#343434',
    thumbTouchSize: {
      width: 40,
      height: 40
    },
    debugTouchArea: false,
    animationType: 'timing'
  };

  var defaultStyles = _reactNative.StyleSheet.create({
    container: {
      height: 40,
      justifyContent: 'center'
    },
    track: {
      height: TRACK_SIZE,
      borderRadius: 2
    },
    thumb: {
      position: 'absolute',
      width: THUMB_SIZE,
      height: THUMB_SIZE,
      borderRadius: 10
    },
    touchArea: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    debugThumbTouchArea: {
      position: 'absolute',
      backgroundColor: 'green',
      opacity: 0.5
    }
  });
},10076,[14308,14305,14314,14407,14344,14320,14323,14371,14377,14386,10297,10033,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _OtherConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[13]);

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform,
      ART = ReactNative.ART;
  var Surface = ART.Surface,
      Shape = ART.Shape,
      Group = ART.Group,
      Path = ART.Path,
      ClippingRectangle = ART.ClippingRectangle,
      LinearGradient = ART.LinearGradient,
      RadialGradient = ART.RadialGradient,
      Pattern = ART.Pattern,
      Transform = ART.Transform;
  var ScreenWidth = (0, _MHGlobalData.getWindowWidth)();
  var ScreenHeight = (0, _MHGlobalData.getWindowHeight)();
  var debugMsg = true;
  var timeViewH = 14 * _MHGlobalData.default.HeightPersent;
  var isIphone5s = !_miot.Host.isAndroid && (0, _MHGlobalData.getWindowHeight)() <= 568 && (0, _MHGlobalData.getWindowWidth)() <= 320;
  var titleViewH = 13;
  var persentOfBlank = 0.15;
  var persentOfCurveView = 0.65;
  var contenViewH = 0;

  var Morph = _$$_REQUIRE(_dependencyMap[14]);

  var MainpageCurveLineView = function (_Component) {
    (0, _inherits2.default)(MainpageCurveLineView, _Component);

    function MainpageCurveLineView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, MainpageCurveLineView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MainpageCurveLineView).call(this, props));
      _this.animate = false;
      _this.midValue = 0;
      var dataSource = props.dataSource;
      var tempArr = [];

      for (var i = 0; i < dataSource.length; i++) {
        tempArr.push(dataSource[i]);
      }

      var maxNum = Math.max.apply(null, tempArr);
      var minNum = Math.min.apply(null, tempArr);
      minNum = props.standard >= minNum ? minNum : props.standard;
      maxNum = props.standard >= maxNum ? props.standard : maxNum;
      minNum = 0;
      var timeListData = props.timeTipData;
      _this.state = {
        dataSource: dataSource,
        width: props.width ? props.width : ScreenWidth,
        height: props.height ? props.height : ScreenHeight * 0.5,
        strokeColor: props.strokeColor ? props.strokeColor : '#666666',
        strokeWidth: props.strokeWidth ? props.strokeWidth : 1,
        titleColor: props.titleColor ? props.titleColor : '#666666',
        typeName: props.typeName ? props.typeName : 'PM2.5',
        xMarginToLeft: (ScreenWidth - props.width) * 0.5,
        standard: props.standard ? props.standard : 75,
        maxNum: maxNum,
        minNum: minNum,
        timeListData: timeListData,
        pathLine: Morph.Tween(Morph.Path(), Morph.Path()),
        circleLine: Morph.Tween(Morph.Path(), Morph.Path()),
        leftCircleLine: Morph.Tween(Morph.Path(), Morph.Path())
      };
      return _this;
    }

    (0, _createClass2.default)(MainpageCurveLineView, [{
      key: "isSameData",
      value: function isSameData(dataSource) {
        for (var i = 0; i < 12; i++) {
          if (dataSource[i] !== this.state.dataSource[i]) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "animateStart",
      value: function animateStart(start) {
        var _this2 = this;

        this.animate = true;
        requestAnimationFrame(function (timestamp) {
          if (!start) start = timestamp;
          var delta = (timestamp - start) / _this2.props.animateTime;
          if (delta > 1) return;

          _this2.state.pathLine.tween(delta);

          _this2.state.circleLine.tween(delta);

          _this2.state.leftCircleLine.tween(delta);

          _this2.setState(_this2.state);

          _this2.animateStart(start);
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this3 = this;

        var dataSource = nextProps.dataSource;

        if (!this.isSameData(dataSource)) {
          var _tempArr = [];

          for (var i = 0; i < dataSource.length; i++) {
            _tempArr.push(dataSource[i]);
          }

          var maxNum = Math.max.apply(null, _tempArr);
          var minNum = Math.min.apply(null, _tempArr);
          minNum = nextProps.standard >= minNum ? minNum : nextProps.standard;
          maxNum = nextProps.standard >= maxNum ? nextProps.standard : maxNum;
          minNum = 0;
          var timeListData = nextProps.timeTipData;
          this.setState({
            dataSource: dataSource,
            maxNum: maxNum,
            minNum: minNum,
            timeListData: timeListData
          }, function () {
            _this3.refreshLine();
          });
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        if (nativeProps.midValue !== this.midValue) {
          this.midValue = nativeProps.midValue;
        }

        if (nativeProps.animate !== this.animate) {
          if (nativeProps.animate) {
            this.animateStart();
          } else {
            this.animate = false;
            this.refreshLine();
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        contenViewH = this.state.height * persentOfCurveView;
        var timeLists = this.state.timeListData;
        var times = [];

        for (var i = 0; i < timeLists.length; i++) {
          if (i == 0) {
            times.push(_react.default.createElement(Text, {
              style: [styles.timeListTextNumber, _MHGlobalData.default.baseFontStyle],
              key: i
            }, timeLists[i]));
          } else {
            times.push(_react.default.createElement(Text, {
              style: [styles.timeListText, _MHGlobalData.default.baseFontStyle],
              key: i
            }, timeLists[i]));
          }
        }

        var lineViewH = this.state.height - timeViewH - titleViewH;
        return _react.default.createElement(View, {
          style: {
            width: this.state.width,
            height: this.state.height,
            backgroundColor: 'white',
            marginLeft: this.state.xMarginToLeft
          }
        }, _react.default.createElement(View, {
          style: {
            height: titleViewH,
            width: this.state.width,
            alignItems: 'center',
            flexDirection: 'row',
            justifyContent: 'space-between',
            backgroundColor: 'white'
          }
        }, _react.default.createElement(View, {
          style: styles.leftViewStyle
        }, _react.default.createElement(Text, {
          style: [{
            color: this.state.strokeColor,
            fontSize: _FontSizeConstant.default.FontOfMainpageHistoryViewTitle
          }, _MHGlobalData.default.baseFontStyle]
        }, this.state.typeName == "CO2" ? "CO" : this.state.typeName), _react.default.createElement(Text, {
          style: [{
            color: this.state.strokeColor,
            fontSize: 8,
            marginBottom: _miot.Host.isAndroid ? 1 : -2
          }, _MHGlobalData.default.baseFontStyle]
        }, this.state.typeName == "CO2" ? 2 : null))), _react.default.createElement(View, {
          style: {
            width: this.state.width,
            height: lineViewH
          }
        }, _react.default.createElement(Surface, {
          width: this.state.width,
          height: lineViewH
        }, _react.default.createElement(Group, null, _react.default.createElement(Shape, {
          d: this.getStandardPaths(),
          stroke: "#d9d9d9",
          strokeWidth: 0.5,
          strokeDash: [1.3, 0.7]
        }))), _react.default.createElement(Animated.View, {
          style: {
            overflow: 'hidden',
            top: -lineViewH,
            backgroundColor: 'transparent'
          }
        }, _react.default.createElement(Surface, {
          width: this.state.width,
          height: lineViewH
        }, _react.default.createElement(Shape, {
          d: this.state.pathLine,
          stroke: this.state.strokeColor,
          fill: "white",
          strokeWidth: 2
        }), _react.default.createElement(Shape, {
          d: this.state.leftCircleLine,
          stroke: '#ffffff',
          strokeWidth: 4
        }), _react.default.createElement(Shape, {
          d: this.state.circleLine,
          stroke: "rgba(0,0,0,0)",
          fill: this.state.strokeColor,
          strokeWidth: this.state.strokeWidth
        })))), _react.default.createElement(View, {
          style: [styles.separatorStyle, {
            width: this.state.width
          }]
        }), _react.default.createElement(View, {
          style: {
            height: timeViewH,
            width: this.state.width,
            backgroundColor: 'transparent',
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'flex-start'
          }
        }, times));
      }
    }, {
      key: "console",
      value: function (_console) {
        function console(_x) {
          return _console.apply(this, arguments);
        }

        console.toString = function () {
          return _console.toString();
        };

        return console;
      }(function (msg) {
        console.log(msg);
      })
    }, {
      key: "refreshLine",
      value: function refreshLine() {
        var dataSource = this.state.dataSource;
        var line1 = Morph.Path();
        var line2 = Morph.Path();
        var originalViewH = this.state.height - timeViewH - titleViewH;
        var maxNum = this.state.maxNum;
        var minNum = this.state.minNum;
        var region = (maxNum - minNum) / 0.7;
        var addNum = persentOfBlank * region;
        var marginX = this.state.width / (dataSource.length - 1);
        var midNum = (maxNum + minNum) / 2;
        var miny = (minNum + addNum) / region * originalViewH;
        var maxy = (maxNum + addNum) / region * originalViewH;
        var midy = originalViewH - (this.midValue + addNum) / region * originalViewH;
        var lineMargin = 1;

        for (var i = 0; i < dataSource.length - 1; i++) {
          var p_1 = i > 0 ? dataSource[i - 1] : -1;
          var p0 = dataSource[i];
          var p1 = dataSource[i + 1];

          if (p0 >= 0 && p1 >= 0) {
            var x0 = marginX * i;
            var y0 = originalViewH - (p0 + addNum) / region * originalViewH;
            var x1 = x0 + marginX;
            var y1 = originalViewH - (p1 + addNum) / region * originalViewH;
            var c0x = marginX * (i + 0.5);
            var c0y = originalViewH - (p0 + addNum) / region * originalViewH;
            var c1x = c0x;
            var c1y = originalViewH - (p1 + addNum) / region * originalViewH;
            x0 = i == 0 ? x0 + lineMargin : x0;
            x1 = i == 0 ? x1 + lineMargin : x1;
            c0x = i == 0 ? c0x + lineMargin : c0x;
            c1x = i == 0 ? c1x + lineMargin : c1x;
            line1.moveTo(x0, midy).lineTo(x1, midy);
            line2.moveTo(x0, y0).curveTo(c0x, c0y, c1x, c1y, x1, y1);
          } else if (p_1 < 0 && p0 > 0 && p1 < 0) {
            var _r = 1;

            var _ox = marginX * (i + 1);

            var y = originalViewH - p0 + addNum;

            var _oy = originalViewH - y / region * originalViewH;

            _ox = i == 0 ? _ox + lineMargin : _ox;
            line1.moveTo(_ox, midy - _r).arc(0, 2, _r).arc(0, -2, _r);
            line2.moveTo(_ox, _oy - _r).arc(0, 2, _r).arc(0, -2, _r);
          }
        }

        var leftCircle1 = Morph.Path();
        var leftCircle2 = Morph.Path();
        var ox1 = this.state.width - 5.5;
        var oy1 = dataSource[dataSource.length - 1];
        if (oy1 < 0) oy1 = 0;
        oy1 = originalViewH - (oy1 + addNum) / region * originalViewH;
        leftCircle1.moveTo(ox1, midy).arc(this.state.width, midy);
        leftCircle2.moveTo(ox1, oy1).arc(this.state.width, oy1);
        var circle1 = Morph.Path();
        var circle2 = Morph.Path();
        var ox = this.state.width - 4.5;
        var oy = dataSource[dataSource.length - 1];
        if (oy < 0) oy = 0;
        oy = originalViewH - (oy + addNum) / region * originalViewH;
        var r = 2;

        if (dataSource[dataSource.length - 1] < 0) {
          circle1.moveTo(ox, oy - r).arc(0, 4, r).arc(0, -4, r);
        } else {
          circle1.moveTo(ox, midy - r).arc(0, 4, r).arc(0, -4, r);
        }

        circle2.moveTo(ox, oy - r).arc(0, 4, r).arc(0, -4, r);
        this.setState({
          pathLine: Morph.Tween(line1, line2),
          circleLine: Morph.Tween(circle1, circle2),
          leftCircleLine: Morph.Tween(leftCircle1, leftCircle2)
        });
      }
    }, {
      key: "getStandardPaths",
      value: function getStandardPaths() {
        var viewH = this.state.height * persentOfCurveView;
        var blankViewH = viewH * persentOfBlank;
        var maxNum = this.state.maxNum;
        var minNum = this.state.minNum;
        var standard = this.state.standard;
        var region = (maxNum - minNum) / 0.7;
        var addNum = persentOfBlank * region;
        var y = viewH - (standard + addNum) / region * viewH;
        var path = new Path();
        path.moveTo(0, y);
        path.lineTo(this.state.width, y);
        return path;
      }
    }]);
    return MainpageCurveLineView;
  }(_react.Component);

  exports.default = MainpageCurveLineView;
  var styles = StyleSheet.create({
    separatorStyle: {
      height: StyleSheet.hairlineWidth,
      alignSelf: 'stretch',
      backgroundColor: '#d9d9d9'
    },
    leftViewStyle: {
      marginTop: 0,
      marginLeft: 0,
      flexDirection: 'row',
      backgroundColor: 'white',
      alignItems: 'flex-end',
      justifyContent: 'center'
    },
    titleText: {
      color: _ColorConstant.default.ColorOf585858,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewTitle
    },
    numberTextPM25: {
      marginTop: 0,
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOfMainBlue,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewNumber
    },
    numberTextCO2: {
      marginTop: 0,
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOf00C9DC,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewNumber
    },
    timeListText: {
      backgroundColor: 'transparent',
      alignItems: 'flex-end',
      marginTop: 3,
      color: _ColorConstant.default.ColorOfB8B8B8,
      fontSize: _FontSizeConstant.default.FontOfMainpageHistoryLineTitle
    },
    timeListTextNumber: {
      backgroundColor: 'transparent',
      alignItems: 'flex-end',
      marginTop: 1,
      color: _ColorConstant.default.ColorOfB8B8B8,
      fontSize: _FontSizeConstant.default.FontOfMainpageHistoryLineTitle
    }
  });
},10079,[14308,14305,14320,14323,14371,14377,14386,10297,10046,10073,10034,10031,10074,10033,10082]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Class = _$$_REQUIRE(_dependencyMap[0]);

  var Path = _$$_REQUIRE(_dependencyMap[1]);

  var MOVE = 0,
      CURVE = 1;
  var MorphablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof MorphablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        this.push(path);
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE, p1x, p1y, p2x, p2y, x, y);
    }
  });
  var Tween = Class({
    initialize: function initialize(from, to) {
      if (!(from instanceof MorphablePath)) from = new MorphablePath(from);
      if (!(to instanceof MorphablePath)) to = new MorphablePath(to);
      this.from = from.path;
      this.to = to.path;
      this.delta = 0;
    },
    tween: function tween(delta) {
      this.delta = delta;
    },
    applyToPath: function applyToPath(path) {
      var f = this.from,
          t = this.to,
          r = path,
          fi = 0,
          ti = 0,
          x,
          y,
          delta = this.delta;
      r.reset();

      while (fi < f.length || ti < t.length) {
        if (fi >= f.length) {
          x = f[fi - 2];
          y = f[fi - 1];

          if (t[ti] === MOVE) {
            r.moveTo((t[ti + 1] - x) * delta + x, (t[ti + 2] - y) * delta + y);
            ti += 3;
          } else {
            r.curveTo((t[ti + 1] - x) * delta + x, (t[ti + 2] - y) * delta + y, (t[ti + 3] - x) * delta + x, (t[ti + 4] - y) * delta + y, (t[ti + 5] - x) * delta + x, (t[ti + 6] - y) * delta + y);
            ti += 7;
          }
        } else if (ti >= t.length) {
          x = t[ti - 2];
          y = t[ti - 1];

          if (f[fi] === MOVE) {
            r.moveTo((x - f[fi + 1]) * delta + f[fi + 1], (y - f[fi + 2]) * delta + f[fi + 2]);
            fi += 3;
          } else {
            r.curveTo((x - f[fi + 1]) * delta + f[fi + 1], (y - f[fi + 2]) * delta + f[fi + 2], (x - f[fi + 3]) * delta + f[fi + 3], (y - f[fi + 4]) * delta + f[fi + 4], (x - f[fi + 5]) * delta + f[fi + 5], (y - f[fi + 6]) * delta + f[fi + 6]);
            fi += 7;
          }
        } else if (f[fi] === MOVE) {
          if (t[ti] === MOVE) {
            r.moveTo((t[ti + 1] - f[fi + 1]) * delta + f[fi + 1], (t[ti + 2] - f[fi + 2]) * delta + f[fi + 2]);
            fi += 3;
            ti += 3;
          } else {
            x = f[fi - 2];
            y = f[fi - 1];
            r.curveTo((t[ti + 1] - x) * delta + x, (t[ti + 2] - y) * delta + y, (t[ti + 3] - x) * delta + x, (t[ti + 4] - y) * delta + y, (t[ti + 5] - x) * delta + x, (t[ti + 6] - y) * delta + y);
            ti += 7;
          }
        } else {
          if (t[ti] === MOVE) {
            x = t[ti - 2];
            y = t[ti - 1];
            r.curveTo((x - f[fi + 1]) * delta + f[fi + 1], (y - f[fi + 2]) * delta + f[fi + 2], (x - f[fi + 3]) * delta + f[fi + 3], (y - f[fi + 4]) * delta + f[fi + 4], (x - f[fi + 5]) * delta + f[fi + 5], (y - f[fi + 6]) * delta + f[fi + 6]);
            fi += 7;
          } else {
            r.curveTo((t[ti + 1] - f[fi + 1]) * delta + f[fi + 1], (t[ti + 2] - f[fi + 2]) * delta + f[fi + 2], (t[ti + 3] - f[fi + 3]) * delta + f[fi + 3], (t[ti + 4] - f[fi + 4]) * delta + f[fi + 4], (t[ti + 5] - f[fi + 5]) * delta + f[fi + 5], (t[ti + 6] - f[fi + 6]) * delta + f[fi + 6]);
            fi += 7;
            ti += 7;
          }
        }
      }
    }
  });
  exports.Path = MorphablePath;
  exports.Tween = Tween;
},10082,[10471,10474]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var _FontSizeConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _CustomSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[12]);

  var React = _$$_REQUIRE(_dependencyMap[13]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[14]);

  var View = ReactNative.View,
      Text = ReactNative.Text,
      StyleSheet = ReactNative.StyleSheet,
      Animated = ReactNative.Animated,
      Image = ReactNative.Image,
      Easing = ReactNative.Easing,
      TouchableHighlight = ReactNative.TouchableHighlight,
      TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback;

  var ColorConstant = _$$_REQUIRE(_dependencyMap[15]);

  var spaceBetween = "space-between";
  var margin = 4;
  var marginModal = _miot.Host.isAndroid ? 9.5 : 10;
  var marginModalW = _miot.Host.isAndroid ? 19.5 : marginModal * 2;
  var borderRadius = _miot.Host.isAndroid ? 9.5 : 10;

  var CustomItemView = function (_React$Component) {
    (0, _inherits2.default)(CustomItemView, _React$Component);

    function CustomItemView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, CustomItemView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomItemView).call(this, props));
      _this.state = {
        value: props.value ? props.value : false,
        disabled: props.disabled ? props.disabled : false,
        onTintColor: props.onTintColor ? props.onTintColor : '#4a8dfc',
        subTitle: props.subTitle ? props.subTitle : ' ',
        textTitle: props.textTitle ? props.textTitle : ' '
      };
      return _this;
    }

    (0, _createClass2.default)(CustomItemView, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var state = {};

        if (nextProps.value != this.state.value) {
          state = (0, _objectSpread2.default)({}, state, {
            value: nextProps.value
          });
        }

        if (nextProps.disabled != this.state.disabled) {
          state = (0, _objectSpread2.default)({}, state, {
            disabled: nextProps.disabled
          });
        }

        if (nextProps.onTintColor != this.state.onTintColor) {
          state = (0, _objectSpread2.default)({}, state, {
            onTintColor: nextProps.onTintColor
          });
        }

        if (nextProps.subTitle != this.state.subTitle) {
          state = (0, _objectSpread2.default)({}, state, {
            subTitle: nextProps.subTitle
          });
        }

        if (nextProps.textTitle != this.state.textTitle) {
          state = (0, _objectSpread2.default)({}, state, {
            textTitle: nextProps.textTitle
          });
        }

        if (state) {
          this.setState(state);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var iconH = this.props.iconOfItemHeight;
        var iconW = this.props.iconOfItemHeight;
        var ItemHeight = this.props.ItemHeight;
        var image = this.props.imageSource;
        var imageH = this.props.imageH;
        var imageW = this.props.imageW;
        var iconImage = this.props.iconSource;
        var rightIconSource = this.props.rightIconSource ? this.props.rightIconSource : null;
        var font = this.props.font;
        var textColor = this.props.textColor;
        var subTitleColor = this.props.subTitleColor ? this.props.subTitleColor : 'rgba(1, 1, 1, 0.4)';
        var title = this.state.textTitle;
        var bckColor = this.props.bckColor;
        var hasBckImage = this.props.hasBckImage ? this.props.hasBckImage : false;
        var hasLine = this.props.hasLine ? this.props.hasLine : false;
        var subTitle = this.state.subTitle;
        var hasSwitch = this.props.hasSwitch ? this.props.hasSwitch : false;
        var subTitleFont = (0, _FontSizeConstant.setSpTextNew)(12);
        var borderStyle = {};

        if (title == _MHLocalizableString.LocalizedStrings.loveAreaSetting) {
          borderStyle = {
            borderTopLeftRadius: 0,
            borderTopRightRadius: 0,
            borderBottomLeftRadius: borderRadius - 1,
            borderBottomRightRadius: borderRadius - 1
          };
        }

        if (hasBckImage) {
          return React.createElement(View, {
            style: {
              flex: 1,
              flexDirection: 'column'
            }
          }, React.createElement(Image, {
            resizeMode: 'stretch',
            style: [styles.rowImageBgStyle, {
              height: ItemHeight,
              marginLeft: 6,
              marginRight: margin,
              width: (0, _MHGlobalData.getWindowWidth)() - 8 - 3
            }],
            source: image
          }), React.createElement(TouchableHighlight, {
            style: [{
              height: ItemHeight - 10,
              alignItems: 'center',
              justifyContent: 'center',
              flexDirection: 'row',
              width: (0, _MHGlobalData.getWindowWidth)() - 24,
              marginLeft: 12,
              position: 'absolute',
              borderRadius: 8,
              marginTop: 2
            }],
            activeOpacity: 1,
            underlayColor: _MHGlobalData.default.ItemSelectedColor,
            onPress: function onPress() {
              _this2.props.onPressFunc(function (callback) {});
            }
          }, React.createElement(View, {
            style: {
              height: ItemHeight - 6,
              alignItems: 'center',
              justifyContent: 'flex-start',
              width: (0, _MHGlobalData.getWindowWidth)() - 20,
              flexDirection: 'row'
            }
          }, React.createElement(View, {
            style: [styles.rowLeftViewStyle, {
              height: ItemHeight - 6
            }]
          }, React.createElement(View, {
            style: {
              height: iconH,
              width: iconW,
              flexDirection: 'row',
              backgroundColor: bckColor,
              borderRadius: iconH * 0.5,
              alignItems: 'center',
              justifyContent: 'center'
            }
          }, React.createElement(Image, {
            style: {
              height: imageH,
              width: imageW
            },
            source: iconImage
          })), React.createElement(View, {
            style: {
              marginLeft: 14,
              height: ItemHeight,
              alignItems: 'flex-start',
              justifyContent: 'center',
              flexDirection: 'column'
            }
          }, React.createElement(Text, {
            style: [{
              color: textColor,
              fontSize: font,
              textAlign: 'left'
            }, _MHGlobalData.default.baseFontStyle]
          }, title), subTitle ? React.createElement(Text, {
            style: [{
              fontSize: subTitleFont,
              marginTop: 7,
              color: subTitleColor
            }, _MHGlobalData.default.baseFontStyleOfMiLight]
          }, subTitle) : null)))));
        } else if (hasSwitch) {
          return React.createElement(View, {
            style: {
              flex: 1,
              flexDirection: 'column',
              marginLeft: margin,
              width: (0, _MHGlobalData.getWindowWidth)() - 8
            }
          }, React.createElement(View, {
            style: {
              height: ItemHeight,
              alignItems: 'center',
              justifyContent: spaceBetween,
              flexDirection: 'row',
              width: (0, _MHGlobalData.getWindowWidth)() - 20,
              marginLeft: 4
            }
          }, React.createElement(View, {
            style: [styles.rowLeftViewStyle, {
              height: ItemHeight
            }]
          }, React.createElement(View, {
            style: {
              height: iconH,
              width: iconW,
              flexDirection: 'row',
              backgroundColor: bckColor,
              borderRadius: iconH * 0.5,
              alignItems: 'center',
              justifyContent: 'center'
            }
          }, React.createElement(Image, {
            style: {
              height: imageH,
              width: imageW
            },
            source: iconImage
          })), React.createElement(View, {
            style: {
              marginLeft: 14,
              height: ItemHeight,
              alignItems: 'flex-start',
              justifyContent: 'center',
              flexDirection: 'column'
            }
          }, React.createElement(Text, {
            style: [{
              color: textColor,
              fontSize: font,
              textAlign: 'left'
            }, _MHGlobalData.default.baseFontStyle]
          }, title), subTitle ? React.createElement(Text, {
            style: [{
              fontSize: subTitleFont,
              marginTop: 5,
              color: subTitleColor,
              width: (0, _MHGlobalData.getWindowWidth)() - 155
            }, _MHGlobalData.default.baseFontStyleOfMiLight],
            numberOfLines: 1,
            ellipsizeMode: "tail"
          }, subTitle) : null)), React.createElement(View, {
            style: [styles.rowRightViewStyle, {
              height: ItemHeight
            }]
          }, hasSwitch ? React.createElement(_CustomSwitch.default, {
            onTintColor: this.state.onTintColor,
            value: this.state.value,
            disabled: this.state.disabled,
            onValueChange: function onValueChange(value) {
              _this2.props.onValueChange(value);

              _this2.setState({
                value: value
              });
            }
          }) : null)), hasLine ? React.createElement(View, {
            style: {
              backgroundColor: '#e4e4e4',
              height: StyleSheet.hairlineWidth,
              marginLeft: _miot.Host.isAndroid ? 5 : 5.5,
              marginRight: 9.5
            }
          }) : null);
        } else {
          return React.createElement(View, {
            style: {
              flex: 1,
              flexDirection: 'column',
              marginLeft: margin,
              width: (0, _MHGlobalData.getWindowWidth)() - 8
            }
          }, React.createElement(TouchableHighlight, {
            style: [{
              height: ItemHeight,
              alignItems: 'center',
              justifyContent: 'center',
              flexDirection: 'row',
              width: (0, _MHGlobalData.getWindowWidth)() - 24,
              marginLeft: 6
            }, borderStyle],
            activeOpacity: 1,
            underlayColor: _MHGlobalData.default.ItemSelectedColor,
            onPress: function onPress() {
              _this2.props.onPressFunc();
            }
          }, React.createElement(View, {
            style: {
              height: ItemHeight,
              alignItems: 'center',
              justifyContent: spaceBetween,
              flexDirection: 'row',
              width: (0, _MHGlobalData.getWindowWidth)() - 20
            }
          }, React.createElement(View, {
            style: [styles.rowLeftViewStyle, {
              height: ItemHeight
            }]
          }, React.createElement(View, {
            style: {
              height: iconH,
              width: iconW,
              flexDirection: 'row',
              backgroundColor: bckColor,
              borderRadius: iconH * 0.5,
              alignItems: 'center',
              justifyContent: 'center'
            }
          }, React.createElement(Image, {
            style: {
              height: imageH,
              width: imageW
            },
            source: iconImage
          })), React.createElement(View, {
            style: {
              marginLeft: 14,
              height: ItemHeight,
              alignItems: 'flex-start',
              justifyContent: 'center',
              flexDirection: 'column'
            }
          }, React.createElement(Text, {
            style: [{
              color: textColor,
              fontSize: font,
              textAlign: 'left',
              width: (0, _MHGlobalData.getWindowWidth)() - 125
            }, _MHGlobalData.default.baseFontStyle],
            numberOfLines: 1,
            ellipsizeMode: "tail"
          }, title), subTitle ? React.createElement(Text, {
            style: [{
              fontSize: subTitleFont,
              marginTop: 4,
              color: subTitleColor
            }, _MHGlobalData.default.baseFontStyleOfMiLight]
          }, subTitle) : null)), React.createElement(View, {
            style: [styles.rowRightViewStyle, {
              height: ItemHeight
            }]
          }, rightIconSource ? React.createElement(Image, {
            style: {
              width: 7,
              height: 13
            },
            source: rightIconSource
          }) : null))), hasLine ? React.createElement(View, {
            style: {
              backgroundColor: '#e4e4e4',
              height: StyleSheet.hairlineWidth,
              marginLeft: _miot.Host.isAndroid ? 5 : 5.5,
              marginRight: 9.5
            }
          }) : null);
        }
      }
    }]);
    return CustomItemView;
  }(React.Component);

  ;
  var styles = StyleSheet.create({
    rowImageBgStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1
    },
    rowLeftViewStyle: {
      flexDirection: 'row',
      marginLeft: 20,
      justifyContent: 'center',
      alignItems: 'center'
    },
    rowRightViewStyle: {
      marginRight: 19.5,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
  module.exports = CustomItemView;
},10085,[14308,14305,14314,14320,14323,14371,14377,14386,10031,10074,10034,10088,10010,10297,10033,10046]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var CIRCLE_SIZE = 18;
  var OFF_COLOR = '#f0f0f0';
  var BORDER_COLOR = '#eaeaea';
  var BACK_WIDTH = 44;
  var BACK_HEIGHT = 24;
  var MARGIN = 3;

  var BORDER_WIDTH = _reactNative.Platform.select({
    android: _reactNative.StyleSheet.hairlineWidth,
    ios: 0.5
  });

  var CustomSwitch = function (_React$Component) {
    (0, _inherits2.default)(CustomSwitch, _React$Component);

    function CustomSwitch() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CustomSwitch);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CustomSwitch)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.offsetX = new _reactNative.Animated.Value(0);
      return _this;
    }

    (0, _createClass2.default)(CustomSwitch, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var toValue = this.props.value ? 18.5 : 0;
        var backgroundColor = this.props.value ? this.props.onTintColor : OFF_COLOR;
        var opacity = this.props.disabled ? 0.5 : 1;
        var borderWidth = this.props.value ? 0 : BORDER_WIDTH;

        _reactNative.Animated.spring(this.offsetX, {
          toValue: toValue,
          bounciness: 9,
          speed: 9
        }).start();

        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.TouchableOpacity, {
          style: [styles.back, {
            backgroundColor: backgroundColor,
            opacity: opacity
          }, {
            borderWidth: borderWidth
          }],
          disabled: this.props.disabled,
          activeOpacity: 0.8,
          onPress: function onPress(_) {
            return _this2._onValueChange();
          }
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.circle, {
            transform: [{
              translateX: this.offsetX
            }],
            borderWidth: borderWidth
          }]
        })));
      }
    }, {
      key: "_onValueChange",
      value: function _onValueChange() {
        if (this.props.onValueChange) {
          this.props.onValueChange(!this.props.value);
        } else {
          console.warn("Switch props 'onValueChange' is required");
        }
      }
    }]);
    return CustomSwitch;
  }(_react.default.Component);

  exports.default = CustomSwitch;
  CustomSwitch.propTypes = {
    value: _propTypes.default.bool.isRequired,
    disabled: _propTypes.default.bool,
    onValueChange: _propTypes.default.func.isRequired,
    onTintColor: _propTypes.default.string.isRequired
  };
  CustomSwitch.defaultProps = {
    value: false,
    disabled: false,
    onTintColor: '#32BAC0'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    back: {
      justifyContent: 'center',
      width: BACK_WIDTH,
      height: BACK_HEIGHT,
      borderRadius: 12,
      borderColor: BORDER_COLOR
    },
    circle: {
      margin: MARGIN,
      position: 'absolute',
      borderColor: BORDER_COLOR,
      backgroundColor: '#fff',
      width: CIRCLE_SIZE,
      height: CIRCLE_SIZE,
      borderRadius: 9
    }
  });
},10088,[14305,14320,14323,14371,14377,14386,10318,10297,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _RippleView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var React = _$$_REQUIRE(_dependencyMap[12]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[13]);

  var View = ReactNative.View,
      Text = ReactNative.Text,
      StyleSheet = ReactNative.StyleSheet,
      Animated = ReactNative.Animated,
      Image = ReactNative.Image,
      Easing = ReactNative.Easing;
  var space1 = 56 * _MHGlobalData.default.WidthPersent;
  var space2 = 40 * _MHGlobalData.default.WidthPersent;
  var cellWidth = ((0, _MHGlobalData.getWindowWidth)() - space1 * 2 - space2 * 2) / 3.0;
  var margin1 = space1 - cellWidth * (_MHGlobalData.RIPPLE_SCALE - 1) / 2;
  var margin2 = space2 - cellWidth * (_MHGlobalData.RIPPLE_SCALE - 1);
  var ItemW = cellWidth;
  var ItemH = cellWidth;
  var ItemRadius = cellWidth * 0.5;
  var spaceBetween = "space-between";

  var CustomModeView = function (_React$Component) {
    (0, _inherits2.default)(CustomModeView, _React$Component);

    function CustomModeView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, CustomModeView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomModeView).call(this, props));

      _this.rippleCallback = function (animating) {
        _this.rippleAnimating = animating;

        if (!animating) {
          _this.setState({
            update: true
          });
        }
      };

      _this.rippleAnimating = false;
      _this.state = {
        update: false
      };
      return _this;
    }

    (0, _createClass2.default)(CustomModeView, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        var update = false;

        if (this.props.mode !== nextProps.mode) {
          update = true;
        }

        if (this.props.power !== nextProps.power) {
          update = true;
        }

        if (nextState && nextState.update) {
          update = true;
          nextState.update = false;
        }

        return !this.rippleAnimating && update;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "render",
      value: function render() {
        var ItemHeight = this.props.ItemHeight;
        var image = this.props.imageSource;
        var dataSourse = this.props.dataSource;
        var mode = this.props.mode;
        var power = this.props.power;
        var list = dataSourse["list"];
        return React.createElement(View, {
          style: {
            flex: 1,
            flexDirection: 'row'
          }
        }, React.createElement(Image, {
          resizeMode: 'stretch',
          style: [styles.rowImageBgStyle, {
            height: ItemHeight,
            marginLeft: 6.0,
            marginRight: 5.5
          }],
          source: image
        }), React.createElement(View, {
          style: {
            position: 'absolute',
            height: ItemHeight - 6,
            alignItems: 'center',
            justifyContent: 'space-between',
            flexDirection: 'row',
            marginLeft: space1,
            width: (0, _MHGlobalData.getWindowWidth)() - space1 * 2
          }
        }, this._creatControlItem(list[0], mode, 21, 22, power), this._creatControlItem(list[1], mode, 24, 24, power), this._creatControlItem(list[2], mode, 22, 22, power)));
      }
    }, {
      key: "_creatControlItem",
      value: function _creatControlItem(compenet, mode, imageW, imageH, power) {
        var _this2 = this;

        var reference = compenet.title;
        return React.createElement(View, {
          style: {
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center'
          }
        }, React.createElement(_RippleView.default, {
          ref: reference,
          containStyle: {
            width: ItemW * _MHGlobalData.RIPPLE_SCALE,
            height: ItemH * _MHGlobalData.RIPPLE_SCALE
          },
          selected: compenet.mode === mode,
          highlightImage: !power ? compenet.normalImage : compenet.highlightImage,
          normalImage: compenet.normalImage,
          highlightColor: compenet.mode == mode ? !power ? '#f8f8f9' : _ColorConstant.default.ColorOfMainBlue : 'white',
          normalColor: !power ? '#f7f7f8' : 'rgba(176, 182, 184, 0.4)',
          circleRadius: ItemRadius,
          strokeWidth: 1.0,
          animatedCallback: this.rippleCallback,
          tag: compenet.title,
          scale: _MHGlobalData.RIPPLE_SCALE,
          fillColor: compenet.mode == mode ? !power ? '#f8f8f9' : _ColorConstant.default.ColorOfMainBlue : 'white',
          imageStyle: {
            width: imageW,
            height: imageH,
            backgroundColor: 'transparent',
            opacity: !power ? 0.3 : 1
          },
          onPress: function onPress() {
            if (_this2.rippleAnimating || !power) {
              return;
            }

            _this2.refs[reference].start();

            compenet.func(function (callback) {
              _this2.refs[reference].stop();
            });
          }
        }), React.createElement(Text, {
          style: [{
            width: ItemW * _MHGlobalData.RIPPLE_SCALE,
            textAlign: 'center',
            marginTop: 5,
            fontSize: _FontSizeConstant.default.FontOfMainPageControlTitle,
            color: !power ? '#e6e6e6' : compenet.mode == mode ? _ColorConstant.default.ColorOfMainBlue : '#A3A3A3'
          }, _MHGlobalData.default.baseFontStyle]
        }, compenet.title));
      }
    }]);
    return CustomModeView;
  }(React.Component);

  ;
  var styles = StyleSheet.create({
    rowImageBgStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1
    },
    rowLeftViewStyle: {
      flexDirection: 'row',
      marginLeft: 27,
      justifyContent: 'center',
      alignItems: 'center'
    },
    rowRightViewStyle: {
      marginRight: 27,
      flexDirection: 'row'
    }
  });
  module.exports = CustomModeView;
},10091,[14308,14305,14320,14323,14371,14377,14386,10046,10031,10034,10094,10037,10297,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _MHGlobalData = _$$_REQUIRE(_dependencyMap[10]);

  var _lottieReactNative = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var Shape = _reactNative.ART.Shape,
      Path = _reactNative.ART.Path,
      Surface = _reactNative.ART.Surface;

  var Circle = function (_React$Component) {
    (0, _inherits2.default)(Circle, _React$Component);

    function Circle() {
      (0, _classCallCheck2.default)(this, Circle);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Circle).apply(this, arguments));
    }

    (0, _createClass2.default)(Circle, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            radius = _this$props.radius,
            strokeWidth = _this$props.strokeWidth;
        var cRadius = radius;

        if (strokeWidth) {
          cRadius -= strokeWidth;
        }

        var path = Path().moveTo(0, -cRadius).arc(0, cRadius * 2, cRadius, cRadius).arc(0, cRadius * -2, cRadius, cRadius).close();
        return _react.default.createElement(Shape, (0, _extends2.default)({}, this.props, {
          d: path
        }));
      }
    }]);
    return Circle;
  }(_react.default.Component);

  var ColorCircle = function (_React$Component2) {
    (0, _inherits2.default)(ColorCircle, _React$Component2);

    function ColorCircle() {
      (0, _classCallCheck2.default)(this, ColorCircle);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ColorCircle).apply(this, arguments));
    }

    (0, _createClass2.default)(ColorCircle, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            radius = _this$props2.radius,
            strokeColor = _this$props2.strokeColor;
        var cRadius = radius;
        var path = Path().moveTo(0, -cRadius).arc(0, cRadius * 2, cRadius, cRadius).arc(0, cRadius * -2, cRadius, cRadius).close();
        return _react.default.createElement(Shape, (0, _extends2.default)({}, this.props, {
          d: path,
          fill: strokeColor
        }));
      }
    }]);
    return ColorCircle;
  }(_react.default.Component);

  var AnimatedCircle = _reactNative.Animated.createAnimatedComponent(Circle);

  var RippleView = function (_Component) {
    (0, _inherits2.default)(RippleView, _Component);

    function RippleView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, RippleView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RippleView).call(this, props));
      _this.rippleAnimate = new _reactNative.Animated.Value(0);
      _this.outerAlpha = _this.rippleAnimate.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      });
      _this.outerScale = _this.rippleAnimate.interpolate({
        inputRange: [0, 1],
        outputRange: [1, _this.props.scale]
      });
      _this.mRunning = false;
      _this.Animating = false;
      return _this;
    }

    (0, _createClass2.default)(RippleView, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        (0, _MHGlobalData.print)("Ripple  shouldComponentUpdate: ", !this.Animating);
        return !this.Animating;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unmounted = true;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        (0, _MHGlobalData.print)("Ripple  render: " + this.props.tag);
        var _this$props3 = this.props,
            selected = _this$props3.selected,
            highlightImage = _this$props3.highlightImage,
            normalImage = _this$props3.normalImage,
            highlightColor = _this$props3.highlightColor,
            normalColor = _this$props3.normalColor,
            circleRadius = _this$props3.circleRadius,
            strokeWidth = _this$props3.strokeWidth,
            scale = _this$props3.scale,
            fillColor = _this$props3.fillColor;
        var centerImg = selected ? highlightImage : normalImage;
        var strokeColor = selected ? highlightColor : normalColor;
        var surfaceRadius = circleRadius * scale;
        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress() {
            _this2.props.onPress(_this2);
          }
        }, _react.default.createElement(_reactNative.View, {
          style: [rippleStyle.contain, this.props.containStyle]
        }, _react.default.createElement(Surface, {
          width: surfaceRadius * 2,
          height: surfaceRadius * 2,
          style: [rippleStyle.circle]
        }, _react.default.createElement(ColorCircle, {
          radius: circleRadius,
          strokeColor: fillColor,
          x: surfaceRadius,
          y: surfaceRadius
        }), _react.default.createElement(AnimatedCircle, {
          radius: circleRadius,
          opacity: this.rippleAnimate,
          stroke: strokeColor,
          strokeWidth: strokeWidth,
          x: surfaceRadius,
          y: surfaceRadius
        }), _react.default.createElement(AnimatedCircle, {
          radius: circleRadius,
          stroke: strokeColor,
          strokeWidth: strokeWidth,
          opacity: this.outerAlpha,
          x: surfaceRadius,
          y: surfaceRadius
        })), _react.default.createElement(_reactNative.Image, {
          source: centerImg,
          style: [rippleStyle.image, this.props.imageStyle]
        }), _react.default.createElement(_lottieReactNative.default, {
          source: _$$_REQUIRE(_dependencyMap[12]),
          ref: function ref(animation) {
            _this2.animation = animation;
          },
          style: {
            width: circleRadius * 2,
            height: circleRadius * 2,
            position: 'absolute'
          }
        })));
      }
    }, {
      key: "start",
      value: function start() {
        if (!this.mRunning) {
          var animatedCallback = this.props.animatedCallback;
          this.mRunning = true;
          this.startAnimate();
          animatedCallback(true);
        }
      }
    }, {
      key: "startAnimate",
      value: function startAnimate() {
        var _this3 = this;

        var animatedCallback = this.props.animatedCallback;
        this.Animating = true;
        this.rippleAnimate.setValue(0);
        this.animation.play();

        _reactNative.Animated.timing(this.rippleAnimate, {
          toValue: 1,
          duration: 1500
        }).start(function (finished) {
          _this3.Animating = false;

          if (!_this3.unmounted) {
            if (_this3.mRunning) {
              _this3.startAnimate();
            } else {
              _this3.animation.reset();

              animatedCallback(false);
            }
          }
        });
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this.mRunning) {
          this.mRunning = false;
        }
      }
    }]);
    return RippleView;
  }(_react.Component);

  exports.default = RippleView;
  RippleView.defaultProps = {
    highlightColor: '#4a8dfc',
    normalColor: '#999999',
    borderWidth: _reactNative.StyleSheet.hairlineWidth,
    selected: false,
    circleRadius: 50,
    scale: 1.2
  };

  var rippleStyle = _reactNative.StyleSheet.create({
    contain: {
      flexDirection: 'column',
      backgroundColor: 'transparent',
      justifyContent: 'center',
      alignItems: 'center',
      width: 65,
      height: 65
    },
    image: {
      width: 20,
      height: 20
    },
    circle: {
      position: 'absolute'
    }
  });
},10094,[14308,14305,14344,14320,14323,14371,14377,14386,10297,10033,10031,10097,10121]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},10097,[10100]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _jsxFileName = 'src/js/LottieView.js';

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _reactNativeSafeModule = _$$_REQUIRE(_dependencyMap[2]);

  var _reactNativeSafeModule2 = _interopRequireDefault(_reactNativeSafeModule);

  var _propTypes = _$$_REQUIRE(_dependencyMap[3]);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var NativeLottieView = _reactNativeSafeModule2.default.component({
    viewName: 'LottieAnimationView',
    mockComponent: _reactNative.View
  });

  var AnimatedNativeLottieView = _reactNative.Animated.createAnimatedComponent(NativeLottieView);

  var LottieViewManager = _reactNativeSafeModule2.default.module({
    moduleName: 'LottieAnimationView',
    mock: {
      play: function play() {},
      reset: function reset() {}
    }
  });

  var ViewStyleExceptBorderPropType = function ViewStyleExceptBorderPropType(props, propName, componentName) {
    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var flattened = _reactNative.StyleSheet.flatten(props[propName]);

    var usesBorder = Object.keys(flattened).some(function (key) {
      return key.startsWith('border');
    });

    if (usesBorder) {
      return Error(componentName + ' does not allow any border related style properties to be specified. ' + "Border styles for this component will behave differently across platforms. If you'd " + 'like to render a border around this component, wrap it with a View.');
    }

    return _reactNative.ViewPropTypes.style.apply(_reactNative.ViewPropTypes, [props, propName, componentName].concat(rest));
  };

  var NotAllowedPropType = function NotAllowedPropType(props, propName, componentName) {
    var value = props[propName];

    if (value != null) {
      return Error(componentName + ' cannot specify \'' + propName + '\'.');
    }

    return null;
  };

  var propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: ViewStyleExceptBorderPropType,
    children: NotAllowedPropType,
    resizeMode: _propTypes2.default.oneOf(['cover', 'contain', 'center']),
    progress: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.object]),
    speed: _propTypes2.default.number,
    loop: _propTypes2.default.bool,
    autoPlay: _propTypes2.default.bool,
    autoSize: _propTypes2.default.bool,
    enableMergePathsAndroidForKitKatAndAbove: _propTypes2.default.bool,
    source: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired,
    hardwareAccelerationAndroid: _propTypes2.default.bool,
    cacheStrategy: _propTypes2.default.oneOf(['none', 'weak', 'strong'])
  });

  var defaultProps = {
    progress: 0,
    speed: 1,
    loop: true,
    autoPlay: false,
    autoSize: false,
    enableMergePathsAndroidForKitKatAndAbove: false,
    resizeMode: 'contain'
  };
  var viewConfig = {
    uiViewClassName: 'LottieAnimationView',
    validAttributes: {
      progress: true
    }
  };

  var LottieView = function (_React$Component) {
    _inherits(LottieView, _React$Component);

    function LottieView(props) {
      _classCallCheck(this, LottieView);

      var _this = _possibleConstructorReturn(this, (LottieView.__proto__ || Object.getPrototypeOf(LottieView)).call(this, props));

      _this.viewConfig = viewConfig;
      _this.refRoot = _this.refRoot.bind(_this);
      return _this;
    }

    _createClass(LottieView, [{
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        if (this.props.source.nm !== prevProps.source.nm && this.props.autoPlay) {
          this.play();
        }
      }
    }, {
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        _reactNative.UIManager.updateView(this.getHandle(), this.viewConfig.uiViewClassName, {
          progress: props.progress
        });
      }
    }, {
      key: 'play',
      value: function play() {
        var startFrame = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
        var endFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
        this.runCommand('play', [startFrame, endFrame]);
      }
    }, {
      key: 'reset',
      value: function reset() {
        this.runCommand('reset');
      }
    }, {
      key: 'runCommand',
      value: function runCommand(name) {
        var _this2 = this;

        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var handle = this.getHandle();

        if (!handle) {
          console.warn('Trying to animate a view on an unmounted component');
          return null;
        }

        return _reactNative.Platform.select({
          android: function android() {
            return _reactNative.UIManager.dispatchViewManagerCommand(handle, _reactNative.UIManager.LottieAnimationView.Commands[name], args);
          },
          ios: function ios() {
            return LottieViewManager[name].apply(LottieViewManager, [_this2.getHandle()].concat(_toConsumableArray(args)));
          }
        })();
      }
    }, {
      key: 'getHandle',
      value: function getHandle() {
        return (0, _reactNative.findNodeHandle)(this.root);
      }
    }, {
      key: 'refRoot',
      value: function refRoot(root) {
        this.root = root;

        if (this.props.autoPlay) {
          this.play();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            style = _props.style,
            source = _props.source,
            autoSize = _props.autoSize,
            rest = _objectWithoutProperties(_props, ['style', 'source', 'autoSize']);

        var sourceName = typeof source === 'string' ? source : undefined;
        var sourceJson = typeof source === 'string' ? undefined : JSON.stringify(source);
        var aspectRatioStyle = sourceJson ? {
          aspectRatio: source.w / source.h
        } : undefined;

        var styleObject = _reactNative.StyleSheet.flatten(style);

        var sizeStyle = undefined;

        if (!styleObject || styleObject.width === undefined && styleObject.height === undefined) {
          sizeStyle = autoSize && sourceJson ? {
            width: source.w
          } : _reactNative.StyleSheet.absoluteFill;
        }

        return _react2.default.createElement(_reactNative.View, {
          style: [aspectRatioStyle, sizeStyle, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 153
          }
        }, _react2.default.createElement(AnimatedNativeLottieView, _extends({
          ref: this.refRoot
        }, rest, {
          style: [aspectRatioStyle, sizeStyle || {
            width: '100%',
            height: '100%'
          }, style],
          sourceName: sourceName,
          sourceJson: sourceJson,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 154
          }
        })));
      }
    }]);

    return LottieView;
  }(_react2.default.Component);

  LottieView.propTypes = propTypes;
  LottieView.defaultProps = defaultProps;
  module.exports = LottieView;
},10100,[10297,10033,10103,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    create: _$$_REQUIRE(_dependencyMap[0]),
    module: _$$_REQUIRE(_dependencyMap[0]),
    component: _$$_REQUIRE(_dependencyMap[1])
  };
},10103,[10106,10115]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},10106,[10109]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _templateObject = _taggedTemplateLiteral(['\n      SafeModule.module(...) was invoked without any options parameter.\n    '], ['\n      SafeModule.module(...) was invoked without any options parameter.\n    ']),
      _templateObject2 = _taggedTemplateLiteral(['\n      SafeModule.module(...) requires a moduleName property to be specified.\n    '], ['\n      SafeModule.module(...) requires a moduleName property to be specified.\n    ']),
      _templateObject3 = _taggedTemplateLiteral(['\n      Missing a "mock" parameter.\n    '], ['\n      Missing a "mock" parameter.\n    ']),
      _templateObject4 = _taggedTemplateLiteral(['\n          ReactNative.NativeModules.', '.', ' did not have a corresponding prop defined\n          in the mock provided to SafeModule.\n        '], ['\n          ReactNative.NativeModules.', '.', ' did not have a corresponding prop defined\n          in the mock provided to SafeModule.\n        ']);

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _dedent = _$$_REQUIRE(_dependencyMap[1]);

  var _dedent2 = _interopRequireDefault(_dedent);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var UNMOCKED_PROPERTY_WHITELIST = {
    VERSION: true,
    addListener: true,
    removeListeners: true
  };
  var eventEmitterMock = {
    addListener: function addListener() {},
    removeListeners: function removeListeners() {}
  };

  var first = function first(array, fn) {
    var result = undefined;
    var i = 0;

    for (; i < array.length; i++) {
      result = fn(array[i]);
      if (result) return result;
    }

    return null;
  };

  var moduleWithName = function moduleWithName(nameOrArray) {
    if (!nameOrArray) return null;
    if (Array.isArray(nameOrArray)) return first(nameOrArray, moduleWithName);
    return _reactNative.NativeModules[nameOrArray];
  };

  var getPrimaryName = function getPrimaryName(nameOrArray) {
    return Array.isArray(nameOrArray) ? getPrimaryName(nameOrArray[0]) : nameOrArray;
  };

  var getModule = function getModule(moduleNameOrNames, mock, isEventEmitter) {
    var module = moduleWithName(moduleNameOrNames);
    if (module) return module;
    if (isEventEmitter) return _extends({}, mock, eventEmitterMock);
    return mock;
  };

  var defaultGetVersion = function defaultGetVersion(module) {
    return module.VERSION;
  };

  var create = function SafeModuleCreate(options) {
    if (!options) {
      throw new Error((0, _dedent2.default)(_templateObject));
    }

    var moduleName = options.moduleName;
    var mock = options.mock;
    var isEventEmitter = options.isEventEmitter;
    var versionOverrides = options.versionOverrides;
    var getVersion = options.getVersion;

    if (!getVersion) {
      getVersion = defaultGetVersion;
    }

    if (!moduleName) {
      throw new Error((0, _dedent2.default)(_templateObject2));
    }

    var MODULE_NAME = getPrimaryName(moduleName);

    if (!mock) {
      throw new Error((0, _dedent2.default)(_templateObject3));
    }

    var result = {};
    var module = getModule(moduleName, mock, isEventEmitter);
    var version = getVersion(module);

    if (isEventEmitter) {
      result.emitter = new _reactNative.NativeEventEmitter(module);
    }

    var overrides = undefined;
    var boundOverrides = undefined;

    if (versionOverrides) {
      overrides = versionOverrides[version];
      boundOverrides = {};

      if (overrides) {
        Object.keys(overrides).forEach(function (key) {
          if (typeof overrides[key] === 'function') {
            boundOverrides[key] = overrides[key](module[key], module);
          } else {
            boundOverrides[key] = overrides[key];
          }
        });
      }
    }

    _extends(result, mock, module, boundOverrides);

    return result;
  };

  module.exports = create;
},10109,[10033,10112]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function dedent(strings) {
    var raw = undefined;

    if (typeof strings === "string") {
      raw = [strings];
    } else {
      raw = strings.raw;
    }

    var result = "";

    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    for (var i = 0; i < raw.length; i++) {
      result += raw[i].replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`");

      if (i < values.length) {
        result += values[i];
      }
    }

    result = result.trim();
    var lines = result.split("\n");
    var mindent = null;
    lines.forEach(function (l) {
      var m = l.match(/^ +/);

      if (m) {
        var indent = m[0].length;

        if (!mindent) {
          mindent = indent;
        } else {
          mindent = Math.min(mindent, indent);
        }
      }
    });

    if (mindent !== null) {
      result = lines.map(function (l) {
        return l[0] === " " ? l.slice(mindent) : l;
      }).join("\n");
    }

    return result.replace(/\\n/g, "\n");
  }

  if (typeof module !== "undefined") {
    module.exports = dedent;
  }
},10112,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},10115,[10118]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _templateObject = _taggedTemplateLiteral(['\n      SafeModule.create(...) was invoked without any options parameter.\n    '], ['\n      SafeModule.create(...) was invoked without any options parameter.\n    ']),
      _templateObject2 = _taggedTemplateLiteral(['\n             When attempting to resolve the native component ', ',\n             componentOverrides.', ' is expected to be a function, but found\n             ', ' instead.\n          '], ['\n             When attempting to resolve the native component ', ',\n             componentOverrides.', ' is expected to be a function, but found\n             ', ' instead.\n          ']),
      _templateObject3 = _taggedTemplateLiteral(['\n            When attempting to resolve the native component ', ',\n            componentOverrides.', ' is expected to be a function that returns a React\n            component. Instead, ', ' was found.\n          '], ['\n            When attempting to resolve the native component ', ',\n            componentOverrides.', ' is expected to be a function that returns a React\n            component. Instead, ', ' was found.\n          ']);

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _dedent = _$$_REQUIRE(_dependencyMap[1]);

  var _dedent2 = _interopRequireDefault(_dedent);

  var _SafeModule = _$$_REQUIRE(_dependencyMap[2]);

  var _SafeModule2 = _interopRequireDefault(_SafeModule);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  var first = function first(array, fn) {
    var result = undefined;
    var i = 0;

    for (; i < array.length; i++) {
      result = fn(array[i]);
      if (result) return result;
    }

    return null;
  };

  var findFirstResolver = function findFirstResolver(namespace) {
    return function findFirstOnNamespace(nameOrArray) {
      if (!nameOrArray) return null;
      if (Array.isArray(nameOrArray)) return first(nameOrArray, findFirstOnNamespace);
      return nameOrArray in namespace ? nameOrArray : null;
    };
  };

  var findFirstViewName = findFirstResolver(_reactNative.UIManager);

  var getPrimaryName = function getPrimaryName(nameOrArray) {
    return Array.isArray(nameOrArray) ? getPrimaryName(nameOrArray[0]) : nameOrArray;
  };

  var defaultGetVersion = function defaultGetVersion(module) {
    return module.VERSION;
  };

  function SafeComponentCreate(options) {
    if (!options) {
      throw new Error((0, _dedent2.default)(_templateObject));
    }

    var viewName = options.viewName;
    var propOverrides = options.propOverrides;
    var componentOverrides = options.componentOverrides;
    var mockComponent = options.mockComponent;
    var mock = options.mock;
    var getVersion = options.getVersion;

    if (!getVersion) {
      getVersion = defaultGetVersion;
    }

    if (!viewName) {
      throw new Error('\n      SafeModule.component(...) requires a viewName property to be specified.\n    ');
    }

    if (!mockComponent) {
      throw new Error('\n      SafeModule.component(...) requires a mockComponent property to be specified.\n    ');
    }

    var PRIMARY_VIEW_NAME = getPrimaryName(viewName);
    var realViewName = findFirstViewName(viewName);
    var realViewConfig = _reactNative.UIManager[realViewName];

    if (!realViewName || !realViewConfig) {
      return mockComponent;
    }

    var moduleOptions = _extends({}, options, {
      mock: mock || {},
      moduleName: realViewName + 'Manager'
    });

    var nativeModule = (0, _SafeModule2.default)(moduleOptions);
    var version = getVersion(realViewConfig.Constants || {});

    if (propOverrides) {
      var overrides = propOverrides[version];
      var boundOverrides = {};

      if (overrides) {
        if (typeof overrides === 'function') {
          boundOverrides = overrides(realViewConfig.NativeProps, realViewConfig, nativeModule);
        } else {
          boundOverrides = _extends({}, overrides);
        }
      }

      _extends(realViewConfig.NativeProps, boundOverrides);
    }

    var nativeComponent = (0, _reactNative.requireNativeComponent)(realViewName);
    var result = nativeComponent;

    result.runCommand = function (instance, name) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return _reactNative.Platform.select({
        android: function android() {
          return _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(instance), _reactNative.UIManager[realViewName].Commands[name], args);
        },
        ios: function ios() {
          return nativeModule[name].apply(nativeModule, [(0, _reactNative.findNodeHandle)(instance)].concat(args));
        },
        default: function _default() {}
      })();
    };

    result.updateView = function (instance, props) {
      var native = function native() {
        return _reactNative.UIManager.updateView((0, _reactNative.findNodeHandle)(instance), realViewName, props);
      };

      _reactNative.Platform.select({
        ios: native,
        android: native,
        default: function _default() {}
      })();
    };

    if (componentOverrides) {
      var _overrides = componentOverrides[version];

      if (_overrides) {
        result = _overrides(nativeComponent, nativeModule);
      }
    }

    return result;
  }

  module.exports = SafeComponentCreate;
},10118,[10033,10112,10106]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var start = Date.now();

  _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  _$$_REQUIRE(_dependencyMap[2]);

  _$$_REQUIRE(_dependencyMap[3]);

  _$$_REQUIRE(_dependencyMap[4]);

  _$$_REQUIRE(_dependencyMap[5]);

  _$$_REQUIRE(_dependencyMap[6]);

  _$$_REQUIRE(_dependencyMap[7]);

  _$$_REQUIRE(_dependencyMap[8]);

  _$$_REQUIRE(_dependencyMap[9]);

  _$$_REQUIRE(_dependencyMap[10]);

  var GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[11]);

  GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
  GlobalPerformanceLogger.markPoint('initializeCore_end');
},10120,[14449,14452,14455,14470,14479,14485,14500,14524,14533,14536,14560,14548]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {"v":"5.1.2","fr":60,"ip":0,"op":120,"w":171,"h":171,"nm":"loading1","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"形状图层 3","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[86,88,0],"ix":2},"a":{"a":0,"k":[17.799,783,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[165,165],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"椭圆路径 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.690196078431,0.713725490196,0.721568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":1,"ml":4,"nm":"描边 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[17.299,780.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"变换"}],"nm":"椭圆 1","np":3,"cix":2,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.666],"y":[0.535]},"o":{"x":[0.365],"y":[0.027]},"n":["0p666_0p535_0p365_0p027"],"t":59,"s":[0],"e":[100]},{"t":119}],"ix":1,"x":"var $bm_rt;\n$bm_rt = loopOut('cycle');"},"e":{"a":1,"k":[{"i":{"x":[0.588],"y":[0.9]},"o":{"x":[0.314],"y":[0.432]},"n":["0p588_0p9_0p314_0p432"],"t":59,"s":[0],"e":[100]},{"t":119}],"ix":2,"x":"var $bm_rt;\n$bm_rt = loopOut('cycle');"},"o":{"a":0,"k":-2,"ix":3},"m":1,"ix":2,"nm":"修剪路径 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":59,"op":120,"st":59,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"形状图层 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[86,88,0],"ix":2},"a":{"a":0,"k":[17.799,783,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[165,165],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"椭圆路径 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.690196078431,0.713725490196,0.721568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":1,"ml":4,"nm":"描边 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[17.299,780.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"变换"}],"nm":"椭圆 1","np":3,"cix":2,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.666],"y":[0.535]},"o":{"x":[0.365],"y":[0.027]},"n":["0p666_0p535_0p365_0p027"],"t":0,"s":[0],"e":[100]},{"t":60}],"ix":1,"x":"var $bm_rt;\n$bm_rt = loopOut('cycle');"},"e":{"a":1,"k":[{"i":{"x":[0.588],"y":[0.9]},"o":{"x":[0.314],"y":[0.432]},"n":["0p588_0p9_0p314_0p432"],"t":0,"s":[0],"e":[100]},{"t":60}],"ix":2,"x":"var $bm_rt;\n$bm_rt = loopOut('cycle');"},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":2,"nm":"修剪路径 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":120,"st":0,"bm":0}],"markers":[]};
},10121,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "TextTrackType", {
    enumerable: true,
    get: function get() {
      return _TextTrackType.default;
    }
  });
  Object.defineProperty(exports, "FilterType", {
    enumerable: true,
    get: function get() {
      return _FilterType.default;
    }
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _resolveAssetSource = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _TextTrackType = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _FilterType = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _VideoResizeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var styles = _reactNative.StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });

  var Video = function (_Component) {
    (0, _inherits2.default)(Video, _Component);

    function Video(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Video);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Video).call(this, props));

      _this.seek = function (time) {
        var tolerance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
        if (isNaN(time)) throw new Error('Specified time is not a number');

        if (_reactNative.Platform.OS === 'ios') {
          _this.setNativeProps({
            seek: {
              time: time,
              tolerance: tolerance
            }
          });
        } else {
          _this.setNativeProps({
            seek: time
          });
        }
      };

      _this.presentFullscreenPlayer = function () {
        _this.setNativeProps({
          fullscreen: true
        });
      };

      _this.dismissFullscreenPlayer = function () {
        _this.setNativeProps({
          fullscreen: false
        });
      };

      _this.save = function _callee(options) {
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _regenerator.default.awrap(_reactNative.NativeModules.VideoManager.save(options, (0, _reactNative.findNodeHandle)(_this._root)));

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        });
      };

      _this.restoreUserInterfaceForPictureInPictureStopCompleted = function (restored) {
        _this.setNativeProps({
          restoreUserInterfaceForPIPStopCompletionHandler: restored
        });
      };

      _this._assignRoot = function (component) {
        _this._root = component;
      };

      _this._hidePoster = function () {
        if (_this.state.showPoster) {
          _this.setState({
            showPoster: false
          });
        }
      };

      _this._onLoadStart = function (event) {
        if (_this.props.onLoadStart) {
          _this.props.onLoadStart(event.nativeEvent);
        }
      };

      _this._onLoad = function (event) {
        if (_reactNative.Platform.OS === 'windows') {
          _this._hidePoster();
        }

        if (_this.props.onLoad) {
          _this.props.onLoad(event.nativeEvent);
        }
      };

      _this._onError = function (event) {
        if (_this.props.onError) {
          _this.props.onError(event.nativeEvent);
        }
      };

      _this._onProgress = function (event) {
        if (_this.props.onProgress) {
          _this.props.onProgress(event.nativeEvent);
        }
      };

      _this._onBandwidthUpdate = function (event) {
        if (_this.props.onBandwidthUpdate) {
          _this.props.onBandwidthUpdate(event.nativeEvent);
        }
      };

      _this._onSeek = function (event) {
        if (_this.props.onSeek) {
          _this.props.onSeek(event.nativeEvent);
        }
      };

      _this._onEnd = function (event) {
        if (_this.props.onEnd) {
          _this.props.onEnd(event.nativeEvent);
        }
      };

      _this._onTimedMetadata = function (event) {
        if (_this.props.onTimedMetadata) {
          _this.props.onTimedMetadata(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerWillPresent = function (event) {
        if (_this.props.onFullscreenPlayerWillPresent) {
          _this.props.onFullscreenPlayerWillPresent(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerDidPresent = function (event) {
        if (_this.props.onFullscreenPlayerDidPresent) {
          _this.props.onFullscreenPlayerDidPresent(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerWillDismiss = function (event) {
        if (_this.props.onFullscreenPlayerWillDismiss) {
          _this.props.onFullscreenPlayerWillDismiss(event.nativeEvent);
        }
      };

      _this._onFullscreenPlayerDidDismiss = function (event) {
        if (_this.props.onFullscreenPlayerDidDismiss) {
          _this.props.onFullscreenPlayerDidDismiss(event.nativeEvent);
        }
      };

      _this._onReadyForDisplay = function (event) {
        _this._hidePoster();

        if (_this.props.onReadyForDisplay) {
          _this.props.onReadyForDisplay(event.nativeEvent);
        }
      };

      _this._onPlaybackStalled = function (event) {
        if (_this.props.onPlaybackStalled) {
          _this.props.onPlaybackStalled(event.nativeEvent);
        }
      };

      _this._onPlaybackResume = function (event) {
        if (_this.props.onPlaybackResume) {
          _this.props.onPlaybackResume(event.nativeEvent);
        }
      };

      _this._onPlaybackRateChange = function (event) {
        if (_this.props.onPlaybackRateChange) {
          _this.props.onPlaybackRateChange(event.nativeEvent);
        }
      };

      _this._onExternalPlaybackChange = function (event) {
        if (_this.props.onExternalPlaybackChange) {
          _this.props.onExternalPlaybackChange(event.nativeEvent);
        }
      };

      _this._onAudioBecomingNoisy = function () {
        if (_this.props.onAudioBecomingNoisy) {
          _this.props.onAudioBecomingNoisy();
        }
      };

      _this._onPictureInPictureStatusChanged = function (event) {
        if (_this.props.onPictureInPictureStatusChanged) {
          _this.props.onPictureInPictureStatusChanged(event.nativeEvent);
        }
      };

      _this._onRestoreUserInterfaceForPictureInPictureStop = function (event) {
        if (_this.props.onRestoreUserInterfaceForPictureInPictureStop) {
          _this.props.onRestoreUserInterfaceForPictureInPictureStop();
        }
      };

      _this._onAudioFocusChanged = function (event) {
        if (_this.props.onAudioFocusChanged) {
          _this.props.onAudioFocusChanged(event.nativeEvent);
        }
      };

      _this._onBuffer = function (event) {
        if (_this.props.onBuffer) {
          _this.props.onBuffer(event.nativeEvent);
        }
      };

      _this.getViewManagerConfig = function (viewManagerName) {
        if (!_reactNative.NativeModules.UIManager.getViewManagerConfig) {
          return _reactNative.NativeModules.UIManager[viewManagerName];
        }

        return _reactNative.NativeModules.UIManager.getViewManagerConfig(viewManagerName);
      };

      _this.state = {
        showPoster: !!props.poster
      };
      return _this;
    }

    (0, _createClass2.default)(Video, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "toTypeString",
      value: function toTypeString(x) {
        switch (typeof x) {
          case "object":
            return x instanceof Date ? x.toISOString() : JSON.stringify(x);

          case "undefined":
            return "";

          default:
            return x.toString();
        }
      }
    }, {
      key: "stringsOnlyObject",
      value: function stringsOnlyObject(obj) {
        var _this2 = this;

        var strObj = {};
        Object.keys(obj).forEach(function (x) {
          strObj[x] = _this2.toTypeString(obj[x]);
        });
        return strObj;
      }
    }, {
      key: "render",
      value: function render() {
        var resizeMode = this.props.resizeMode;
        var source = (0, _resolveAssetSource.default)(this.props.source) || {};
        var shouldCache = !Boolean(source.__packager_asset);
        var uri = source.uri || '';

        if (uri && uri.match(/^\//)) {
          uri = "file://" + uri;
        }

        if (!uri) {
          console.warn('Trying to load empty source.');
        }

        var isNetwork = !!(uri && uri.match(/^https?:/));
        var isAsset = !!(uri && uri.match(/^(assets-library|ipod-library|file|content|ms-appx|ms-appdata):/));
        var nativeResizeMode;
        var RCTVideoInstance = this.getViewManagerConfig('RCTVideo');

        if (resizeMode === _VideoResizeMode.default.stretch) {
          nativeResizeMode = RCTVideoInstance.Constants.ScaleToFill;
        } else if (resizeMode === _VideoResizeMode.default.contain) {
          nativeResizeMode = RCTVideoInstance.Constants.ScaleAspectFit;
        } else if (resizeMode === _VideoResizeMode.default.cover) {
          nativeResizeMode = RCTVideoInstance.Constants.ScaleAspectFill;
        } else {
          nativeResizeMode = RCTVideoInstance.Constants.ScaleNone;
        }

        var nativeProps = (0, _extends2.default)({}, this.props);
        (0, _extends2.default)(nativeProps, {
          style: [styles.base, nativeProps.style],
          resizeMode: nativeResizeMode,
          src: {
            uri: uri,
            isNetwork: isNetwork,
            isAsset: isAsset,
            shouldCache: shouldCache,
            type: source.type || '',
            mainVer: source.mainVer || 0,
            patchVer: source.patchVer || 0,
            requestHeaders: source.headers ? this.stringsOnlyObject(source.headers) : {}
          },
          onVideoLoadStart: this._onLoadStart,
          onVideoLoad: this._onLoad,
          onVideoError: this._onError,
          onVideoProgress: this._onProgress,
          onVideoSeek: this._onSeek,
          onVideoEnd: this._onEnd,
          onVideoBuffer: this._onBuffer,
          onVideoBandwidthUpdate: this._onBandwidthUpdate,
          onTimedMetadata: this._onTimedMetadata,
          onVideoAudioBecomingNoisy: this._onAudioBecomingNoisy,
          onVideoExternalPlaybackChange: this._onExternalPlaybackChange,
          onVideoFullscreenPlayerWillPresent: this._onFullscreenPlayerWillPresent,
          onVideoFullscreenPlayerDidPresent: this._onFullscreenPlayerDidPresent,
          onVideoFullscreenPlayerWillDismiss: this._onFullscreenPlayerWillDismiss,
          onVideoFullscreenPlayerDidDismiss: this._onFullscreenPlayerDidDismiss,
          onReadyForDisplay: this._onReadyForDisplay,
          onPlaybackStalled: this._onPlaybackStalled,
          onPlaybackResume: this._onPlaybackResume,
          onPlaybackRateChange: this._onPlaybackRateChange,
          onAudioFocusChanged: this._onAudioFocusChanged,
          onAudioBecomingNoisy: this._onAudioBecomingNoisy,
          onPictureInPictureStatusChanged: this._onPictureInPictureStatusChanged,
          onRestoreUserInterfaceForPictureInPictureStop: this._onRestoreUserInterfaceForPictureInPictureStop
        });
        var posterStyle = (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
          resizeMode: this.props.posterResizeMode || 'contain'
        });
        return _react.default.createElement(_reactNative.View, {
          style: nativeProps.style
        }, _react.default.createElement(RCTVideo, (0, _extends2.default)({
          ref: this._assignRoot
        }, nativeProps, {
          style: _reactNative.StyleSheet.absoluteFill
        })), this.state.showPoster && _react.default.createElement(_reactNative.Image, {
          style: posterStyle,
          source: {
            uri: this.props.poster
          }
        }));
      }
    }]);
    return Video;
  }(_react.Component);

  exports.default = Video;
  Video.propTypes = (0, _objectSpread2.default)({
    filter: _propTypes.default.oneOf([_FilterType.default.NONE, _FilterType.default.INVERT, _FilterType.default.MONOCHROME, _FilterType.default.POSTERIZE, _FilterType.default.FALSE, _FilterType.default.MAXIMUMCOMPONENT, _FilterType.default.MINIMUMCOMPONENT, _FilterType.default.CHROME, _FilterType.default.FADE, _FilterType.default.INSTANT, _FilterType.default.MONO, _FilterType.default.NOIR, _FilterType.default.PROCESS, _FilterType.default.TONAL, _FilterType.default.TRANSFER, _FilterType.default.SEPIA]),
    filterEnabled: _propTypes.default.bool,
    src: _propTypes.default.object,
    seek: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
    fullscreen: _propTypes.default.bool,
    onVideoLoadStart: _propTypes.default.func,
    onVideoLoad: _propTypes.default.func,
    onVideoBuffer: _propTypes.default.func,
    onVideoError: _propTypes.default.func,
    onVideoProgress: _propTypes.default.func,
    onVideoBandwidthUpdate: _propTypes.default.func,
    onVideoSeek: _propTypes.default.func,
    onVideoEnd: _propTypes.default.func,
    onTimedMetadata: _propTypes.default.func,
    onVideoAudioBecomingNoisy: _propTypes.default.func,
    onVideoExternalPlaybackChange: _propTypes.default.func,
    onVideoFullscreenPlayerWillPresent: _propTypes.default.func,
    onVideoFullscreenPlayerDidPresent: _propTypes.default.func,
    onVideoFullscreenPlayerWillDismiss: _propTypes.default.func,
    onVideoFullscreenPlayerDidDismiss: _propTypes.default.func,
    source: _propTypes.default.oneOfType([_propTypes.default.shape({
      uri: _propTypes.default.string
    }), _propTypes.default.number]),
    minLoadRetryCount: _propTypes.default.number,
    maxBitRate: _propTypes.default.number,
    resizeMode: _propTypes.default.string,
    poster: _propTypes.default.string,
    posterResizeMode: _reactNative.Image.propTypes.resizeMode,
    repeat: _propTypes.default.bool,
    allowsExternalPlayback: _propTypes.default.bool,
    selectedAudioTrack: _propTypes.default.shape({
      type: _propTypes.default.string.isRequired,
      value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }),
    selectedVideoTrack: _propTypes.default.shape({
      type: _propTypes.default.string.isRequired,
      value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }),
    selectedTextTrack: _propTypes.default.shape({
      type: _propTypes.default.string.isRequired,
      value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }),
    textTracks: _propTypes.default.arrayOf(_propTypes.default.shape({
      title: _propTypes.default.string,
      uri: _propTypes.default.string.isRequired,
      type: _propTypes.default.oneOf([_TextTrackType.default.SRT, _TextTrackType.default.TTML, _TextTrackType.default.VTT]),
      language: _propTypes.default.string.isRequired
    })),
    paused: _propTypes.default.bool,
    muted: _propTypes.default.bool,
    volume: _propTypes.default.number,
    bufferConfig: _propTypes.default.shape({
      minBufferMs: _propTypes.default.number,
      maxBufferMs: _propTypes.default.number,
      bufferForPlaybackMs: _propTypes.default.number,
      bufferForPlaybackAfterRebufferMs: _propTypes.default.number
    }),
    stereoPan: _propTypes.default.number,
    rate: _propTypes.default.number,
    pictureInPicture: _propTypes.default.bool,
    playInBackground: _propTypes.default.bool,
    playWhenInactive: _propTypes.default.bool,
    ignoreSilentSwitch: _propTypes.default.oneOf(['ignore', 'obey']),
    reportBandwidth: _propTypes.default.bool,
    disableFocus: _propTypes.default.bool,
    controls: _propTypes.default.bool,
    audioOnly: _propTypes.default.bool,
    currentTime: _propTypes.default.number,
    fullscreenAutorotate: _propTypes.default.bool,
    fullscreenOrientation: _propTypes.default.oneOf(['all', 'landscape', 'portrait']),
    progressUpdateInterval: _propTypes.default.number,
    useTextureView: _propTypes.default.bool,
    hideShutterView: _propTypes.default.bool,
    onLoadStart: _propTypes.default.func,
    onLoad: _propTypes.default.func,
    onBuffer: _propTypes.default.func,
    onError: _propTypes.default.func,
    onProgress: _propTypes.default.func,
    onBandwidthUpdate: _propTypes.default.func,
    onSeek: _propTypes.default.func,
    onEnd: _propTypes.default.func,
    onFullscreenPlayerWillPresent: _propTypes.default.func,
    onFullscreenPlayerDidPresent: _propTypes.default.func,
    onFullscreenPlayerWillDismiss: _propTypes.default.func,
    onFullscreenPlayerDidDismiss: _propTypes.default.func,
    onReadyForDisplay: _propTypes.default.func,
    onPlaybackStalled: _propTypes.default.func,
    onPlaybackResume: _propTypes.default.func,
    onPlaybackRateChange: _propTypes.default.func,
    onAudioFocusChanged: _propTypes.default.func,
    onAudioBecomingNoisy: _propTypes.default.func,
    onPictureInPictureStatusChanged: _propTypes.default.func,
    needsToRestoreUserInterfaceForPictureInPictureStop: _propTypes.default.func,
    onExternalPlaybackChange: _propTypes.default.func,
    scaleX: _propTypes.default.number,
    scaleY: _propTypes.default.number,
    translateX: _propTypes.default.number,
    translateY: _propTypes.default.number,
    rotation: _propTypes.default.number
  }, _reactNative.ViewPropTypes);
  var RCTVideo = (0, _reactNative.requireNativeComponent)('RCTVideo', Video, {
    nativeOnly: {
      src: true,
      seek: true,
      fullscreen: true
    }
  });
},10124,[14308,14305,14314,14344,14674,14320,14323,14371,14377,14386,10297,10318,10033,10417,10127,10130,10133]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    SRT: 'application/x-subrip',
    TTML: 'application/ttml+xml',
    VTT: 'text/vtt'
  };
  exports.default = _default;
},10127,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    NONE: '',
    INVERT: 'CIColorInvert',
    MONOCHROME: 'CIColorMonochrome',
    POSTERIZE: 'CIColorPosterize',
    FALSE: 'CIFalseColor',
    MAXIMUMCOMPONENT: 'CIMaximumComponent',
    MINIMUMCOMPONENT: 'CIMinimumComponent',
    CHROME: 'CIPhotoEffectChrome',
    FADE: 'CIPhotoEffectFade',
    INSTANT: 'CIPhotoEffectInstant',
    MONO: 'CIPhotoEffectMono',
    NOIR: 'CIPhotoEffectNoir',
    PROCESS: 'CIPhotoEffectProcess',
    TONAL: 'CIPhotoEffectTonal',
    TRANSFER: 'CIPhotoEffectTransfer',
    SEPIA: 'CISepiaTone'
  };
  exports.default = _default;
},10130,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _keymirror = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _keymirror.default)({
    contain: null,
    cover: null,
    stretch: null
  });

  exports.default = _default;
},10133,[14305,10136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;

    if (!(obj instanceof Object && !Array.isArray(obj))) {
      throw new Error('keyMirror(...): Argument must be an object.');
    }

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},10136,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _MHGlobalData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var VideoUtils = function () {
    function VideoUtils() {
      (0, _classCallCheck2.default)(this, VideoUtils);
    }

    (0, _createClass2.default)(VideoUtils, null, [{
      key: "returnVideoUri",
      value: function returnVideoUri(videoName) {
        var uri = VideoUtils.defaultVideoUri;

        if (videoName) {
          if (videoName == "bad_night_x" || videoName == "bad_night_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[4]);
          }

          if (videoName == "bad_day_x" || videoName == "bad_day_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[5]);
          }

          if (videoName == "medium_night_x" || videoName == "medium_night_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[6]);
          }

          if (videoName == "medium_day_x" || videoName == "medium_day_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[7]);
          }

          if (videoName == "mild_night_x" || videoName == "mild_night_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[8]);
          }

          if (videoName == "mild_day_x" || videoName == "mild_day_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[9]);
          }

          if (videoName == "good_night_x" || videoName == "good_night_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[10]);
          }

          if (videoName == "good_day_x" || videoName == "good_day_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[11]);
          }

          if (videoName == "bad_night" || videoName == "bad_night.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[12]);
          }

          if (videoName == "bad_day" || videoName == "bad_day.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[13]);
          }

          if (videoName == "medium_night" || videoName == "medium_night.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[14]);
          }

          if (videoName == "medium_day" || videoName == "medium_day.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[15]);
          }

          if (videoName == "mild_night" || videoName == "mild_night.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[16]);
          }

          if (videoName == "mild_day" || videoName == "mild_day.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[17]);
          }

          if (videoName == "good_night" || videoName == "good_night.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[18]);
          }

          if (videoName == "good_day" || videoName == "good_day.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[19]);
          }

          if (videoName == "bad_night_off_x" || videoName == "bad_night_off_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[20]);
          }

          if (videoName == "bad_day_off_x" || videoName == "bad_day_off_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[21]);
          }

          if (videoName == "medium_night_off_x" || videoName == "medium_night_off_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[22]);
          }

          if (videoName == "medium_day_off_x" || videoName == "medium_day_off_x.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[23]);
          }

          if (videoName == "bad_night_off" || videoName == "bad_night_off.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[24]);
          }

          if (videoName == "bad_day_off" || videoName == "bad_day_off.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[25]);
          }

          if (videoName == "medium_night_off" || videoName == "medium_night_off.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[26]);
          }

          if (videoName == "medium_day_off" || videoName == "medium_day_off.mp4") {
            uri = _$$_REQUIRE(_dependencyMap[27]);
          }
        }

        return uri;
      }
    }, {
      key: "returnImage",
      value: function returnImage(imageName) {
        var image = VideoUtils.defaultImage;

        if (imageName) {
          if (imageName == "bad_night_bg" || imageName == "bad_night_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[28]);
          }

          if (imageName == "bad_day_bg" || imageName == "bad_day_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[29]);
          }

          if (imageName == "medium_night_bg" || imageName == "medium_night_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[30]);
          }

          if (imageName == "medium_day_bg" || imageName == "medium_day_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[31]);
          }

          if (imageName == "good_night_bg" || imageName == "good_night_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[32]);
          }

          if (imageName == "good_day_bg" || imageName == "good_day_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[33]);
          }

          if (imageName == "bad_night_off_bg" || imageName == "bad_night_off_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[34]);
          }

          if (imageName == "bad_day_off_bg" || imageName == "bad_day_off_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[35]);
          }

          if (imageName == "medium_night_off_bg" || imageName == "medium_night_off_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[36]);
          }

          if (imageName == "medium_day_off_bg" || imageName == "medium_day_off_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[37]);
          }

          if (imageName == "good_night_off_bg" || imageName == "good_night_off_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[38]);
          }

          if (imageName == "good_day_off_bg" || imageName == "good_day_off_bg.png") {
            image = _$$_REQUIRE(_dependencyMap[39]);
          }
        }

        return image;
      }
    }]);
    return VideoUtils;
  }();

  exports.default = VideoUtils;
  VideoUtils.defaultVideoUri = _MHGlobalData.default.isIphoneX ? _$$_REQUIRE(_dependencyMap[11]) : _$$_REQUIRE(_dependencyMap[19]);
  VideoUtils.defaultImage = _$$_REQUIRE(_dependencyMap[33]);
},10139,[14305,14320,14323,10031,10142,10145,10148,10151,10154,10157,10160,10163,10166,10169,10172,10175,10178,10181,10184,10187,10190,10193,10196,10199,10202,10205,10208,10211,10214,10217,10220,10223,10226,10229,10232,10235,10238,10241,10244,10247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "90620505aa9cf4e00a5ba50f005f1b73",
    "name": "bad_night_x",
    "type": "mp4"
  });
},10142,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "a58ba4a7b990dbf3e01ea65592b42e46",
    "name": "bad_day_x",
    "type": "mp4"
  });
},10145,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "3522abefeb4a966fd7ff9b0a3e2869ce",
    "name": "medium_night_x",
    "type": "mp4"
  });
},10148,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "d9dcd92db2acff0d3e644f626cb41d70",
    "name": "medium_day_x",
    "type": "mp4"
  });
},10151,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "fa41118ef463940eb50a650d6c14544c",
    "name": "mild_night_x",
    "type": "mp4"
  });
},10154,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "83be6600aeb5275e5fc1fec01ab717d2",
    "name": "mild_day_x",
    "type": "mp4"
  });
},10157,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "d7e66d86bf4aacb20c561c4ac2cafb40",
    "name": "good_night_x",
    "type": "mp4"
  });
},10160,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "4d7741c81fc118a65703cf1d5cfb45f6",
    "name": "good_day_x",
    "type": "mp4"
  });
},10163,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "891912af9c078c5896921115b5cf7a0b",
    "name": "bad_night",
    "type": "mp4"
  });
},10166,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "02cd497680d9c959409f69169b80c1b1",
    "name": "bad_day",
    "type": "mp4"
  });
},10169,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "7a379e38ebde0fe0584ebb569f2f4d45",
    "name": "medium_night",
    "type": "mp4"
  });
},10172,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "e10a892a00c45ef666b0e3ed96625282",
    "name": "medium_day",
    "type": "mp4"
  });
},10175,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "7a320634f3544782f119eb843dcb928d",
    "name": "mild_night",
    "type": "mp4"
  });
},10178,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "cf2f6b2a48c1a90adc34cdf1e854f838",
    "name": "mild_day",
    "type": "mp4"
  });
},10181,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "c5adf9ca28c8a4ba984fd1528eb31fdb",
    "name": "good_night",
    "type": "mp4"
  });
},10184,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "7fac77eace9aeda8456dab3e4e81a054",
    "name": "good_day",
    "type": "mp4"
  });
},10187,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "05ce77512a56f200e48fa6e3e011803e",
    "name": "bad_night_off_x",
    "type": "mp4"
  });
},10190,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "f81241cc1eb30a366d62828d113abe37",
    "name": "bad_day_off_x",
    "type": "mp4"
  });
},10193,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "24cddcf0ec48f62e8b53a11172f1a82e",
    "name": "medium_night_off_x",
    "type": "mp4"
  });
},10196,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "9360978e625187b8eb5b72952d3fbae0",
    "name": "medium_day_off_x",
    "type": "mp4"
  });
},10199,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "1bdc9c7345273e3868f13e771307eba2",
    "name": "bad_night_off",
    "type": "mp4"
  });
},10202,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "c705895bd8bf22c677c9ac352b4f7608",
    "name": "bad_day_off",
    "type": "mp4"
  });
},10205,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "52580cb90eea272133609f0f935d5060",
    "name": "medium_night_off",
    "type": "mp4"
  });
},10208,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "scales": [1],
    "hash": "d7ade7c707fa40ee9db50d7e7fce391f",
    "name": "medium_day_off",
    "type": "mp4"
  });
},10211,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "fcf7f4772acb935e0a32008c3bd934b1",
    "name": "bad_night_bg",
    "type": "png"
  });
},10214,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "8e9f10980b074d5f6455d815cbc5676c",
    "name": "bad_day_bg",
    "type": "png"
  });
},10217,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "a2c18890f3c9451ec01b46e193d3c0c3",
    "name": "medium_night_bg",
    "type": "png"
  });
},10220,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "392fb0d81588c6c29eb833b57ab9bb17",
    "name": "medium_day_bg",
    "type": "png"
  });
},10223,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "6073f455dd0f8bf6687c6041b9e558b5",
    "name": "good_night_bg",
    "type": "png"
  });
},10226,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "11db160165ad3e0244354dd84b0fc7d1",
    "name": "good_day_bg",
    "type": "png"
  });
},10229,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "791c8c8843af5c9a8d509fc96e5c3652",
    "name": "bad_night_off_bg",
    "type": "png"
  });
},10232,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "cc27451ad0a2548f41313c92018756fd",
    "name": "bad_day_off_bg",
    "type": "png"
  });
},10235,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "fcba1ca83a4c501833447e61376ecb94",
    "name": "medium_night_off_bg",
    "type": "png"
  });
},10238,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "b7477033022d0111a0ed82858b02a084",
    "name": "medium_day_off_bg",
    "type": "png"
  });
},10241,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "80cd7b71d40be323ce73d34b23ab4d99",
    "name": "good_night_off_bg",
    "type": "png"
  });
},10244,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 720,
    "height": 1049,
    "scales": [1],
    "hash": "fe6a2c7c080d8db81edb118e440f1944",
    "name": "good_day_off_bg",
    "type": "png"
  });
},10247,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _BottomDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _TouchableEffect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var DEFAULT_COLOR_BUTTON = "#000000b3";
  var DEFAULT_BACKGROUNDCOLOR_BUTTON = "#f2f2f2";

  var ConfirmDialog = function (_Component) {
    (0, _inherits2.default)(ConfirmDialog, _Component);

    function ConfirmDialog() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ConfirmDialog);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ConfirmDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.getButtonStyle = function (button, positive) {
        var disabled = button.disabled;
        var style = button.style || {};
        var backgroundColor = style.backgroundColor,
            backgroundColorDisabled = style.backgroundColorDisabled,
            othersStyle = (0, _objectWithoutProperties2.default)(style, ["backgroundColor", "backgroundColorDisabled"]);
        return (0, _objectSpread2.default)({
          height: 53,
          justifyContent: "center",
          flex: 1,
          backgroundColor: (!disabled ? backgroundColor : backgroundColorDisabled || backgroundColor) || DEFAULT_BACKGROUNDCOLOR_BUTTON,
          borderBottomLeftRadius: positive ? 0 : 6,
          borderBottomRightRadius: positive ? 6 : 0
        }, othersStyle);
      };

      _this.getButtonTextStyle = function (button, positive) {
        var disabled = button.disabled;
        var titleStyle = button.titleStyle || {};
        var color = titleStyle.color,
            colorDisabled = titleStyle.colorDisabled,
            othersStyle = (0, _objectWithoutProperties2.default)(titleStyle, ["color", "colorDisabled"]);
        return (0, _objectSpread2.default)({
          textAlign: "center",
          textAlignVertical: "center",
          color: (!disabled ? color : colorDisabled || color) || DEFAULT_COLOR_BUTTON
        }, othersStyle);
      };

      return _this;
    }

    (0, _createClass2.default)(ConfirmDialog, [{
      key: "renderMessage",
      value: function renderMessage() {
        var _this$props = this.props,
            message = _this$props.message,
            messageStyle = _this$props.messageStyle;
        if (message) return _react.default.createElement(_reactNative.Text, {
          style: [{
            color: "#707070",
            fontSize: 14
          }, messageStyle]
        }, message);
      }
    }, {
      key: "renderButton",
      value: function renderButton(button, positive) {
        if (button) {
          var onPress = button.onPress,
              disabled = button.disabled,
              color = button.color;
          var containerStyle = this.getButtonStyle(button, positive);
          var textStyle = this.getButtonTextStyle(button, positive);
          return _react.default.createElement(_TouchableEffect.default, {
            onPress: onPress,
            containerStyle: containerStyle,
            pressColor: "#dfdfdf",
            normalColor: "#f2f2f2"
          }, _react.default.createElement(_reactNative.Text, {
            style: textStyle
          }, button.title));
        }
      }
    }, {
      key: "renderButtons",
      value: function renderButtons() {
        var _this$props2 = this.props,
            negativeButton = _this$props2.negativeButton,
            positiveButton = _this$props2.positiveButton;
        return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
          style: confirmStyle.dividerHorStyle
        }), _react.default.createElement(_reactNative.View, {
          style: confirmStyle.containerStyle
        }, this.renderButton(negativeButton, false), negativeButton ? _react.default.createElement(_reactNative.View, {
          style: confirmStyle.dividerVerStyle
        }) : null, this.renderButton(positiveButton, true)));
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var _this$props3 = this.props,
            children = _this$props3.children,
            message = _this$props3.message;
        if (children) return children;else if (message) return this.renderMessage();
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        var refreshContent = nextProps.refreshContent;

        if (refreshContent) {
          global.refreshContent = false;
          return refreshContent;
        }

        return nextProps.visible !== this.props.visible;
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_BottomDialog.default, (0, _extends2.default)({}, this.props, {
          buttons: this.renderButtons()
        }), this.renderContent());
      }
    }]);
    return ConfirmDialog;
  }(_react.Component);

  exports.default = ConfirmDialog;

  var confirmStyle = _reactNative.StyleSheet.create({
    containerStyle: {
      flexDirection: "row",
      height: 53
    },
    dividerHorStyle: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: "#c2c2c2"
    },
    dividerVerStyle: {
      width: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: "#c2c2c2"
    }
  });

  var buttonPropType = _propTypes.default.shape({
    title: _propTypes.default.string.isRequired,
    onPress: _propTypes.default.func.isRequired,
    disabled: _propTypes.default.bool,
    titleStyle: _propTypes.default.shape((0, _objectSpread2.default)({}, _reactNative.Text.propTypes.style, {
      colorDisabled: _propTypes.default.string
    })),
    style: _propTypes.default.shape((0, _objectSpread2.default)({}, _reactNative.ViewPropTypes.style, {
      backgroundColorDisabled: _propTypes.default.string
    }))
  });

  ConfirmDialog.propTypes = (0, _objectSpread2.default)({}, _BottomDialog.default.propTypes, {
    message: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
    messageStyle: _reactNative.Text.propTypes.style,
    negativeButton: buttonPropType,
    positiveButton: buttonPropType.isRequired
  });
},10250,[14308,14305,14344,14314,14407,14320,14323,14371,14377,14386,10297,10033,10318,10253,10256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var BottomDialog = function (_Component) {
    (0, _inherits2.default)(BottomDialog, _Component);

    function BottomDialog() {
      (0, _classCallCheck2.default)(this, BottomDialog);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BottomDialog).apply(this, arguments));
    }

    (0, _createClass2.default)(BottomDialog, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            dialogStyle = _this$props.dialogStyle,
            visible = _this$props.visible,
            animationType = _this$props.animationType,
            onRequestClose = _this$props.onRequestClose,
            onShow = _this$props.onShow,
            onTouchOutside = _this$props.onTouchOutside,
            overlayStyle = _this$props.overlayStyle,
            dialogBackgroundColor = _this$props.dialogBackgroundColor,
            dialogBorderRadius = _this$props.dialogBorderRadius;
        var borderRadius = dialogBorderRadius ? dialogBorderRadius : 6;
        var bgColor = dialogBackgroundColor ? dialogBackgroundColor : '#f7f7f7';
        var normalPad = 8;
        var bottomPad = _MHGlobalData.default.isIphoneX ? 35 : normalPad;
        return _react.default.createElement(_reactNative.View, {
          style: [{
            width: (0, _MHGlobalData.getWindowWidth)(),
            paddingBottom: bottomPad,
            paddingLeft: normalPad,
            paddingRight: normalPad,
            flexDirection: 'column'
          }, overlayStyle]
        }, _react.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: bgColor,
            width: '100%',
            shadowOpacity: 0.24,
            borderRadius: borderRadius,
            elevation: 4,
            shadowOffset: {
              height: 4,
              width: 2
            }
          }, dialogStyle]
        }, this.renderTitle(), this.renderContent(), this.renderButtons()));
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var _this$props2 = this.props,
            children = _this$props2.children,
            contentStyle = _this$props2.contentStyle,
            modalHeight = _this$props2.modalHeight;
        var marginB = 25;

        if (contentStyle && contentStyle.hasOwnProperty('marginBottom')) {
          marginB = contentStyle['marginBottom'];
        }

        if (children) {
          return _react.default.createElement(_reactNative.View, {
            style: [{
              marginHorizontal: 40,
              marginTop: 12,
              height: modalHeight - 27 - 12 - marginB - 12 - 53 - 15,
              marginBottom: marginB,
              flex: 1,
              flexDirection: 'column'
            }, contentStyle]
          }, children);
        }
      }
    }, {
      key: "renderTitle",
      value: function renderTitle() {
        var _this$props3 = this.props,
            title = _this$props3.title,
            titleStyle = _this$props3.titleStyle;
        if (title) return _react.default.createElement(_reactNative.Text, {
          style: [{
            textAlign: 'center',
            color: "#000000",
            fontSize: 14,
            fontWeight: 'bold',
            marginTop: 27,
            marginHorizontal: 40
          }, titleStyle]
        }, title);
      }
    }, {
      key: "renderButtons",
      value: function renderButtons() {
        var _this$props4 = this.props,
            buttons = _this$props4.buttons,
            buttonsStyle = _this$props4.buttonsStyle;
        if (buttons) return _react.default.createElement(_reactNative.View, {
          style: [{
            marginTop: 0
          }, buttonsStyle]
        }, buttons);
      }
    }, {
      key: "_renderOutsideTouchable",
      value: function _renderOutsideTouchable(onTouch) {
        var view = _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            width: '100%'
          }
        });

        if (!onTouch) return view;
        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: onTouch,
          style: {
            flex: 1,
            width: '100%'
          }
        }, view);
      }
    }]);
    return BottomDialog;
  }(_react.Component);

  exports.default = BottomDialog;
  BottomDialog.propTypes = {
    dialogStyle: _reactNative.ViewPropTypes.style,
    contentStyle: _reactNative.ViewPropTypes.style,
    buttonsStyle: _reactNative.ViewPropTypes.style,
    overlayStyle: _reactNative.ViewPropTypes.style,
    buttons: _propTypes.default.element,
    visible: _propTypes.default.bool,
    onRequestClose: _propTypes.default.func,
    onShow: _propTypes.default.func,
    onTouchOutside: _propTypes.default.func,
    title: _propTypes.default.string,
    titleStyle: _reactNative.Text.propTypes.style
  };
  BottomDialog.defaultProps = {
    visible: false,
    onRequestClose: function onRequestClose() {
      return null;
    }
  };
},10253,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10031]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _MHGlobalData = _$$_REQUIRE(_dependencyMap[10]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var TouchableEffect = function (_Component) {
    (0, _inherits2.default)(TouchableEffect, _Component);

    function TouchableEffect(props) {
      var _this;

      (0, _classCallCheck2.default)(this, TouchableEffect);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TouchableEffect).call(this));
      _this.state = {
        pressStatus: false
      };
      return _this;
    }

    (0, _createClass2.default)(TouchableEffect, [{
      key: "_isPressState",
      value: function _isPressState() {
        return this.state.pressStatus;
      }
    }, {
      key: "_onPressIn",
      value: function _onPressIn() {
        this.setState({
          pressStatus: true
        });
      }
    }, {
      key: "_onPressOut",
      value: function _onPressOut() {
        this.setState({
          pressStatus: false
        });
      }
    }, {
      key: "render",
      value: function render() {
        var backgroundColor = this.props.normalColor;

        if (this._isPressState() && this.props.pressColor) {
          backgroundColor = this.props.pressColor;
        }

        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: this.props.onPress,
          onPressIn: this._onPressIn.bind(this),
          onPressOut: this._onPressOut.bind(this)
        }, _react.default.createElement(_reactNative.View, {
          style: [this.props.containerStyle, {
            backgroundColor: backgroundColor
          }]
        }, this.props.children));
      }
    }]);
    return TouchableEffect;
  }(_react.Component);

  exports.default = TouchableEffect;
  TouchableEffect.initialState = {
    pressStatus: false
  };
  TouchableEffect.propTypes = (0, _objectSpread2.default)({}, _propTypes.default.style, {
    normalColor: _reactNative.ColorPropType.isRequired,
    pressColor: _reactNative.ColorPropType,
    containerStyle: _reactNative.ViewPropTypes.style
  });
},10256,[14308,14305,14314,14320,14323,14371,14377,14386,10297,10033,10031,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.DURATION = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var DURATION = {
    LENGTH_SHORT: 500,
    FOREVER: 0
  };
  exports.DURATION = DURATION;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      height = _Dimensions$get.height,
      width = _Dimensions$get.width;

  var Toast = function (_Component) {
    (0, _inherits2.default)(Toast, _Component);

    function Toast(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Toast);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Toast).call(this, props));
      _this.state = {
        isShow: false,
        text: '',
        opacityValue: new _reactNative.Animated.Value(_this.props.opacity)
      };
      return _this;
    }

    (0, _createClass2.default)(Toast, [{
      key: "show",
      value: function show(text, duration, callback) {
        var _this2 = this;

        this.duration = typeof duration === 'number' ? duration : DURATION.LENGTH_SHORT;
        this.callback = callback;
        this.setState({
          isShow: true,
          text: text
        });
        this.animation = _reactNative.Animated.timing(this.state.opacityValue, {
          toValue: this.props.opacity,
          duration: this.props.fadeInDuration
        });
        this.animation.start(function () {
          _this2.isShow = true;
          if (duration !== DURATION.FOREVER) _this2.close();
        });
      }
    }, {
      key: "close",
      value: function close(duration) {
        var _this3 = this;

        var delay = typeof duration === 'undefined' ? this.duration : duration;
        if (delay === DURATION.FOREVER) delay = this.props.defaultCloseDelay || 250;
        if (!this.isShow && !this.state.isShow) return;
        this.timer && clearTimeout(this.timer);
        this.timer = setTimeout(function () {
          _this3.animation = _reactNative.Animated.timing(_this3.state.opacityValue, {
            toValue: 0.0,
            duration: _this3.props.fadeOutDuration
          });

          _this3.animation.start(function () {
            _this3.setState({
              isShow: false
            });

            _this3.isShow = false;

            if (typeof _this3.callback === 'function') {
              _this3.callback();
            }
          });
        }, delay);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.animation && this.animation.stop();
        this.timer && clearTimeout(this.timer);
      }
    }, {
      key: "render",
      value: function render() {
        var pos;

        switch (this.props.position) {
          case 'top':
            pos = this.props.positionValue;
            break;

          case 'center':
            pos = height / 2;
            break;

          case 'bottom':
            pos = height - this.props.positionValue;
            break;
        }

        var view = this.state.isShow ? _react.default.createElement(_reactNative.View, {
          style: [styles.container, {
            top: pos
          }],
          pointerEvents: "none"
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.content, {
            opacity: this.state.opacityValue
          }, this.props.style]
        }, _react.default.isValidElement(this.state.text) ? this.state.text : _react.default.createElement(_reactNative.Text, {
          style: this.props.textStyle
        }, this.state.text))) : null;
        return view;
      }
    }]);
    return Toast;
  }(_react.Component);

  exports.default = Toast;

  var styles = _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      left: 0,
      right: 0,
      elevation: 999,
      alignItems: 'center',
      zIndex: 10000
    },
    content: {
      backgroundColor: 'black',
      borderRadius: 5,
      padding: 10
    },
    text: {
      color: 'white'
    }
  });

  Toast.propTypes = {
    style: ViewPropTypes.style,
    position: _propTypes.default.oneOf(['top', 'center', 'bottom']),
    textStyle: _reactNative.Text.propTypes.style,
    positionValue: _propTypes.default.number,
    fadeInDuration: _propTypes.default.number,
    fadeOutDuration: _propTypes.default.number,
    opacity: _propTypes.default.number
  };
  Toast.defaultProps = {
    position: 'bottom',
    textStyle: styles.text,
    positionValue: 120,
    fadeInDuration: 500,
    fadeOutDuration: 500,
    opacity: 1
  };
},10259,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.requestProps = exports.setProps = exports.props = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var props = ['power', 'mode', 'speed', 'roll_enable', 'roll_angle', 'time_off', 'light', 'beep_sound', 'child_lock'];
  exports.props = props;
  var setProps = props;
  exports.setProps = setProps;
  var requestProps = props.concat(["roll_lr"]);
  exports.requestProps = requestProps;

  var RequestHelp = function () {
    function RequestHelp(props) {
      (0, _classCallCheck2.default)(this, RequestHelp);
      this.requestAble = {};

      for (var i = 0; i < props.length; i++) {
        this.requestAble[props[i]] = true;
      }
    }

    (0, _createClass2.default)(RequestHelp, [{
      key: "setEnabled",
      value: function setEnabled(prop, enable) {
        if (this.checkProp(prop)) {
          this.requestAble[prop] = enable;
        }
      }
    }, {
      key: "isEnabled",
      value: function isEnabled(prop) {
        if (this.checkProp(prop)) {
          return this.requestAble[prop];
        }

        return false;
      }
    }, {
      key: "checkProp",
      value: function checkProp(prop) {
        return this.requestAble.hasOwnProperty(prop);
      }
    }], [{
      key: "getSubscribeMap",
      value: function getSubscribeMap(messages) {
        var subscribeMap = new Map();
        messages.forEach(function (value, key) {
          if (key.includes("prop.")) {
            key = key.slice(5);
          }

          if (Array.isArray(value)) {
            value = value[0];
          }

          subscribeMap.set(key, value);
        });
        return subscribeMap;
      }
    }, {
      key: "subscribeMessages",
      value: function subscribeMessages() {
        var _Device$getDeviceWifi;

        return (_Device$getDeviceWifi = _miot.Device.getDeviceWifi()).subscribeMessages.apply(_Device$getDeviceWifi, (0, _toConsumableArray2.default)(RequestHelp.addPropsPrefix(props, "prop.")));
      }
    }, {
      key: "callMethod",
      value: function callMethod(method, args) {
        return _miot.Device.getDeviceWifi().callMethod(method, args).then(function (result) {
          return new Promise(function (resolve, reject) {
            if (result.code === 0) {
              resolve(result);
            } else {
              reject(result);
            }
          });
        });
      }
    }, {
      key: "getPropsAll",
      value: function getPropsAll() {
        return RequestHelp.callMethod('get_prop', ["all"]).then(function (res) {
          var propsMap = new Map();

          if (res.hasOwnProperty('result')) {
            var result = res['result'];

            for (var i = 0; i < props.length; i++) {
              propsMap.set(props[i], result[i]);
            }
          }

          return propsMap;
        });
      }
    }, {
      key: "getProps",
      value: function getProps(props) {
        return RequestHelp.callMethod("get_prop", props);
      }
    }, {
      key: "setPower",
      value: function setPower(power) {
        return RequestHelp.callMethod("set_power", [power]);
      }
    }, {
      key: "setMode",
      value: function setMode(mode) {
        return RequestHelp.callMethod("set_mode", [mode]);
      }
    }, {
      key: "setSpeed",
      value: function setSpeed(speed) {
        return RequestHelp.callMethod("set_favourite_speed", [speed]);
      }
    }, {
      key: "getSensor",
      value: function getSensor(sensor) {
        return RequestHelp.callMethod("get_sensor", sensor);
      }
    }, {
      key: "setPTC",
      value: function setPTC(ptc) {
        return RequestHelp.callMethod('set_ptc_on', [ptc]);
      }
    }, {
      key: "setPTCLevel",
      value: function setPTCLevel(leavel) {
        return RequestHelp.callMethod('set_ptc_level', [leavel]);
      }
    }, {
      key: "getTimeList",
      value: function getTimeList(time) {
        return RequestHelp.callMethod('get_timer', null);
      }
    }, {
      key: "getPTCList",
      value: function getPTCList(time) {
        return RequestHelp.callMethod('get_ptc_timer', null);
      }
    }, {
      key: "setPtcTime",
      value: function setPtcTime(ptcTime) {
        return RequestHelp.callMethod('set_ptc_timer', [ptcTime]);
      }
    }, {
      key: "setTime",
      value: function setTime(time) {
        return RequestHelp.callMethod('set_timer', [time]);
      }
    }, {
      key: "getLightTimeList",
      value: function getLightTimeList(time) {
        return RequestHelp.callMethod('get_light_timer', null);
      }
    }, {
      key: "setLightTime",
      value: function setLightTime(lightTime) {
        return RequestHelp.callMethod('set_light_timer', [lightTime]);
      }
    }, {
      key: "deleteTime",
      value: function deleteTime(time) {
        return RequestHelp.callMethod('delete_timer', [time]);
      }
    }, {
      key: "setLight",
      value: function setLight(light) {
        return RequestHelp.callMethod('set_display', [light]);
      }
    }, {
      key: "setSound",
      value: function setSound(sound) {
        return RequestHelp.callMethod('set_sound', [sound]);
      }
    }, {
      key: "setChildLock",
      value: function setChildLock(childLock) {
        return RequestHelp.callMethod('set_child_lock', [childLock]);
      }
    }, {
      key: "setScreenDirection",
      value: function setScreenDirection(direction) {
        return RequestHelp.callMethod('set_screen_direction', [direction]);
      }
    }, {
      key: "setFiltereset",
      value: function setFiltereset(filter) {
        return RequestHelp.callMethod('set_filter_reset', [filter]);
      }
    }, {
      key: "addPropsPrefix",
      value: function addPropsPrefix(propArray, prefix) {
        return propArray.map(function (prop) {
          var newProp;

          if (prop.includes(prefix)) {
            newProp = prop;
          } else {
            newProp = "" + prefix + prop;
          }

          return newProp;
        });
      }
    }]);
    return RequestHelp;
  }();

  exports.default = RequestHelp;
},10262,[14305,14359,14320,14323,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var req_delay = 1300;

  var RpcManage = function () {
    function RpcManage() {
      (0, _classCallCheck2.default)(this, RpcManage);
      this.requestMap = new Map();
    }

    (0, _createClass2.default)(RpcManage, [{
      key: "rpcRequest",
      value: function rpcRequest(method, params, func) {
        var delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var key = this.concat(_miot.Device.deviceID, method, params);
        var request;

        if (this.requestMap.has(key)) {
          request = this.requestMap.get(key);
        } else {
          request = {
            time: 0
          };
          this.requestMap.set(key, request);
        }

        var overSecond = Date.now() - request.time > req_delay;

        if (overSecond) {
          request.time = Date.now();
          func();
        } else {
          if (!delay) return false;

          if (!request.queue) {
            request.queue = new Queue();
          }

          request.queue.add(timeout(func));
          request.queue.run();
          request.time += req_delay;
        }

        return true;
      }
    }, {
      key: "concat",
      value: function concat(did, method, params) {
        return did + "_" + method + "_" + params;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.requestMap.forEach(function (value) {
          if (value.queue) {
            value.queue.stop();
          }
        });
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (!this._instance) {
          this._instance = new RpcManage();
        }

        return this._instance;
      }
    }]);
    return RpcManage;
  }();

  exports.default = RpcManage;

  var Queue = function Queue() {
    var _this = this;

    (0, _classCallCheck2.default)(this, Queue);

    this.next = function () {
      if (_this.index > _this.list.length - 1 || !_this.running) {
        _this.stop();

        return;
      }

      var cur = _this.list[_this.index++];
      cur(_this.next);
    };

    this.add = function () {
      var _this$list;

      (_this$list = _this.list).push.apply(_this$list, arguments);
    };

    this.run = function () {
      if (!_this.running) {
        _this.running = true;
        var cur = _this.list[_this.index++];
        typeof cur === 'function' && cur(_this.next);
      }
    };

    this.stop = function () {
      _this.running = false;
    };

    this.list = [];
    this.index = 0;
    this.running = false;
  };

  var timeout = function timeout(fn) {
    return function (next) {
      setTimeout(function () {
        fn();
        next();
      }, req_delay);
    };
  };
},10265,[14305,14320,14323,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 65,
    "height": 67,
    "scales": [1],
    "hash": "4e75b9f6b9b021eb4812747b349223cc",
    "name": "icon_auto_nor",
    "type": "png"
  });
},10268,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 65,
    "height": 67,
    "scales": [1],
    "hash": "2f8c6c7408c0287f0673e163ecfe3174",
    "name": "icon_auto",
    "type": "png"
  });
},10271,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "b353e5efff02968909a0aeb529396b12",
    "name": "icon_night_nor",
    "type": "png"
  });
},10274,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "b6187ac569fa715f0d317884119eab4f",
    "name": "icon_night",
    "type": "png"
  });
},10277,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 65,
    "height": 67,
    "scales": [1],
    "hash": "b641878b1b7cc733318ce796281a2bcb",
    "name": "icon_love_nor",
    "type": "png"
  });
},10280,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 65,
    "height": 67,
    "scales": [1],
    "hash": "a614eb6208b32fc6ae4338752657c76c",
    "name": "icon_love",
    "type": "png"
  });
},10283,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 35,
    "height": 34,
    "scales": [1],
    "hash": "8dbc2069aae13df427f12ae1240f6322",
    "name": "icon_air_small",
    "type": "png"
  });
},10286,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 37,
    "height": 38,
    "scales": [1],
    "hash": "d41a09935a3ad3bad3fa0083815660da",
    "name": "icon_air_big",
    "type": "png"
  });
},10289,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 1055,
    "height": 265,
    "scales": [1],
    "hash": "af6d3860b35ea1175f8afaf712bc97f6",
    "name": "power_bg",
    "type": "png"
  });
},10292,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 48,
    "height": 51,
    "scales": [1],
    "hash": "eab580ab1fb9d654f301d65cf29b9e4e",
    "name": "power_off",
    "type": "png"
  });
},10295,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 1055,
    "height": 455,
    "scales": [1],
    "hash": "48d36e302e1ca8b14c173beb3a87e8c6",
    "name": "mode_bg",
    "type": "png"
  });
},10298,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 1055,
    "height": 1091,
    "scales": [1],
    "hash": "31c09d716b808ccff7a52631c1b5a4b4",
    "name": "history_bg",
    "type": "png"
  });
},10301,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 1055,
    "height": 1184,
    "scales": [1],
    "hash": "7d1eb73395d4224ea5590b9d14bba6e2",
    "name": "setting_bg",
    "type": "png"
  });
},10304,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 48,
    "height": 48,
    "scales": [1],
    "hash": "7725f137d25a9fad58eb26221e1b18b3",
    "name": "icon_home_ptc",
    "type": "png"
  });
},10307,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 47,
    "height": 60,
    "scales": [1],
    "hash": "350b53e3363337db366d90bbb6a10723",
    "name": "icon_home_light",
    "type": "png"
  });
},10310,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 48,
    "height": 40,
    "scales": [1],
    "hash": "2edf054390295f681aff3c70541cd248",
    "name": "icon_home_middle",
    "type": "png"
  });
},10313,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 22,
    "height": 41,
    "scales": [1],
    "hash": "2a12f112e01f0379378b28ee14a04959",
    "name": "sub_arrow",
    "type": "png"
  });
},10316,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  {
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},10318,[10321]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 50,
    "height": 50,
    "scales": [1],
    "hash": "a3b6f89cd15db38cc9edad3b12064b20",
    "name": "icon_home_time",
    "type": "png"
  });
},10319,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0]);

  function emptyFunction() {}

  function emptyFunctionWithReset() {}

  emptyFunctionWithReset.resetWarningCache = emptyFunction;

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},10321,[10324]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 46,
    "height": 46,
    "scales": [1],
    "hash": "647878921495470f8d740caf58dd60ee",
    "name": "icon_home_love",
    "type": "png"
  });
},10322,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},10324,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _resources = _$$_REQUIRE(_dependencyMap[6]);

  var _CommonSetting = _$$_REQUIRE(_dependencyMap[7]);

  var _CommonSetting2 = _$$_REQUIRE(_dependencyMap[8]);

  var _ListItem = _$$_REQUIRE(_dependencyMap[9]);

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ui = _$$_REQUIRE(_dependencyMap[11]);

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[14]);

  var _CustomTitleBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _miot = _$$_REQUIRE(_dependencyMap[16]);

  var first_options = _CommonSetting.SETTING_KEYS.first_options,
      second_options = _CommonSetting.SETTING_KEYS.second_options;

  var Setting = function (_React$Component) {
    (0, _inherits2.default)(Setting, _React$Component);

    function Setting(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, Setting);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Setting).call(this, props, context));
      _this.state = {
        hasNewFm: false,
        showDot: []
      };
      return _this;
    }

    (0, _createClass2.default)(Setting, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var firstOptions = [first_options.SHARE, first_options.IFTTT, first_options.FIRMWARE_UPGRADE];
        var secondOptions = [];
        var extraOptions = {
          showUpgrade: true,
          licenseUrl: (0, _MHLocalizableString.getString)('licenseUrl'),
          policyUrl: (0, _MHLocalizableString.getString)('privacyUrl')
        };
        var navigation = this.props.navigation;
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_CustomTitleBar.default, {
          title: _resources.strings.setting,
          style: {
            backgroundColor: '#ffffff'
          },
          source: _$$_REQUIRE(_dependencyMap[17]),
          highlightedSource: _$$_REQUIRE(_dependencyMap[18]),
          onPressLeft: function onPressLeft() {
            navigation.goBack();
          }
        }), _react.default.createElement(_Separator.default, null), _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_reactNative.ScrollView, {
          showsVerticalScrollIndicator: false
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.blank, {
            borderTopWidth: 0
          }]
        }), _react.default.createElement(_reactNative.View, {
          style: styles.featureSetting
        }, _react.default.createElement(_reactNative.View, {
          style: styles.titleContainer
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.title
        }, _resources.strings.featureSetting)), _react.default.createElement(_Separator.default, {
          style: {
            marginLeft: _resources.Styles.common.padding
          }
        }), _react.default.createElement(_ListItem.ListItem, {
          title: (0, _MHLocalizableString.getString)('controlDevice'),
          showDot: false,
          onPress: function onPress(_) {
            _this2.props.navigation.navigate('Control');
          },
          showSeparator: false
        })), _react.default.createElement(_reactNative.View, {
          style: styles.blank
        }), _react.default.createElement(_CommonSetting.CommonSetting, {
          navigation: this.props.navigation,
          firstOptions: firstOptions,
          showDot: this.state.showDot,
          secondOptions: secondOptions,
          extraOptions: extraOptions
        }), _react.default.createElement(_reactNative.View, {
          style: {
            height: 20
          }
        })));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.mounted = true;

        this._checkUpdate();
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this3 = this;

        this._packageDidResumeListener = _miot.PackageEvent.packageDidResume.addListener(function () {
          var focused = _this3.props.navigation.isFocused();

          if (_this3.mounted && focused) {
            _this3._checkUpdate();
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;
        this._packageDidResumeListener && this._packageDidResumeListener.remove();
      }
    }, {
      key: "_checkUpdate",
      value: function _checkUpdate() {
        var _this4 = this;

        _miot.Service.smarthome.checkDeviceVersion(_miot.Device.deviceID, '0').then(function (result) {
          if (result) {
            var hasNewFirmware = result['hasNewFirmware'];

            if (hasNewFirmware !== _this4.state.hasNewFm) {
              _this4.setState({
                showDot: [first_options.FIRMWARE_UPGRADE]
              });
            }

            if (!hasNewFirmware) {
              _this4.setState({
                showDot: []
              });
            }
          }
        }).catch(function (err) {
          return print('check update failed:', err);
        });
      }
    }]);
    return Setting;
  }(_react.default.Component);

  exports.default = Setting;

  Setting.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _resources.Styles.common.backgroundColor,
      flex: 1
    },
    featureSetting: {
      backgroundColor: '#fff'
    },
    blank: {
      height: 8,
      backgroundColor: _resources.Styles.common.backgroundColor,
      borderTopColor: _resources.Styles.common.hairlineColor,
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: _resources.Styles.common.hairlineColor,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
    },
    titleContainer: {
      height: 32,
      backgroundColor: '#fff',
      justifyContent: 'center',
      paddingLeft: _resources.Styles.common.padding
    },
    title: {
      fontSize: 11,
      color: 'rgba(0,0,0,0.5)',
      lineHeight: 14
    }
  });
},10325,[14305,14320,14323,14371,14377,14386,10077,10353,10326,10338,10332,10230,10297,10033,10010,10328,10074,10331,10334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeUiKitten = _$$_REQUIRE(_dependencyMap[11]);

  var _FontSizeConstant = _$$_REQUIRE(_dependencyMap[12]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var titleHeight = _MHGlobalData.default.naviTitleHeight;
  var imgHeight = 28;

  var CustomTitleBar = function (_Component) {
    (0, _inherits2.default)(CustomTitleBar, _Component);

    function CustomTitleBar() {
      (0, _classCallCheck2.default)(this, CustomTitleBar);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomTitleBar).apply(this, arguments));
    }

    (0, _createClass2.default)(CustomTitleBar, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.OS === 'android') {
          _reactNative.StatusBar.setTranslucent(true);
        }

        var leftWidth = this.props.leftTextStyle ? this.props.leftTextStyle.width : 0;
        var rightWidth = this.props.rightTextStyle ? this.props.rightTextStyle.width : 0;
        var source = this.props.source;
        var lightSource = this.props.highlightedSource;
        return _react.default.createElement(_reactNavigation.SafeAreaView, {
          style: [styles.titleBarContainer, this.props.style]
        }, this.props.leftText ? _react.default.createElement(_reactNativeUiKitten.RkButton, {
          onPress: this.props.onPressLeft,
          contentStyle: [styles.leftRightText, this.props.leftTextStyle],
          style: [styles.leftRightText, {
            height: this.props.onPressLeft ? titleHeight : 0,
            width: leftWidth ? leftWidth : 56
          }]
        }, this.props.leftText) : _react.default.createElement(_ui.ImageButton, {
          onPress: this.props.onPressLeft,
          style: [styles.img, {
            height: this.props.onPressLeft ? imgHeight : 0
          }],
          source: source ? source : _$$_REQUIRE(_dependencyMap[14]),
          highlightedSource: lightSource ? lightSource : _$$_REQUIRE(_dependencyMap[15])
        }), _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer]
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.titleText],
          onPress: this.props.onPressTitle
        }, this.props.title), this.props.subTitle && _react.default.createElement(_reactNative.Text, {
          style: [styles.subtitleText],
          onPress: this.props.onPressTitle
        }, this.props.subTitle)), this.props.rightText ? _react.default.createElement(_reactNativeUiKitten.RkButton, {
          onPress: this.props.onPressRight,
          contentStyle: [styles.leftRightText, this.props.rightTextStyle],
          style: [styles.leftRightText, {
            height: this.props.onPressRight ? titleHeight : 0,
            width: rightWidth ? rightWidth : 56
          }]
        }, this.props.rightText) : _react.default.createElement(_ui.ImageButton, {
          onPress: this.props.onPressRight,
          style: [styles.img, {
            height: this.props.onPressRight ? imgHeight : 0
          }],
          source: _$$_REQUIRE(_dependencyMap[16]),
          highlightedSource: _$$_REQUIRE(_dependencyMap[17])
        }));
      }
    }]);
    return CustomTitleBar;
  }(_react.Component);

  exports.default = CustomTitleBar;

  var styles = _reactNative.StyleSheet.create({
    titleBarContainer: {
      flexDirection: 'row',
      width: (0, _MHGlobalData.getWindowWidth)(),
      alignItems: 'flex-end',
      height: _reactNative.StatusBar.currentHeight + titleHeight
    },
    textContainer: {
      height: titleHeight,
      flex: 1,
      alignItems: 'stretch',
      justifyContent: 'center'
    },
    titleText: {
      color: '#000000cc',
      fontSize: (0, _FontSizeConstant.setSpTextNew)(15),
      textAlignVertical: 'center',
      textAlign: 'center'
    },
    subtitleText: {
      color: '#00000088',
      fontSize: (0, _FontSizeConstant.setSpTextNew)(12),
      textAlignVertical: 'center',
      textAlign: 'center'
    },
    leftRightText: {
      flexDirection: 'column',
      backgroundColor: '#0000',
      color: '#00000088',
      fontSize: (0, _FontSizeConstant.setSpTextNew)(14),
      alignItems: 'center',
      justifyContent: 'center',
      textAlignVertical: "center",
      textAlign: "center"
    },
    img: {
      width: imgHeight,
      height: imgHeight,
      resizeMode: 'contain',
      marginLeft: 14,
      marginTop: (titleHeight - imgHeight) / 2,
      marginBottom: (titleHeight - imgHeight) / 2,
      marginRight: 14
    }
  });
},10328,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10918,11251,10034,10031,10049,10052,10055,10058]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/title",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "7fe54e4146abeb8742f9d08aab0a348f",
    "name": "icon_back_gray_nor",
    "type": "png"
  });
},10331,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources/title",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "e3a9be25b9b93ba8f492ea0398a664f3",
    "name": "icon_back_gray_pre",
    "type": "png"
  });
},10334,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeUiKitten = _$$_REQUIRE(_dependencyMap[11]);

  var _CustomSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _ui = _$$_REQUIRE(_dependencyMap[13]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[15]);

  var _miot = _$$_REQUIRE(_dependencyMap[16]);

  var _FontSizeConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[17]));

  var _CustomTitleBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _SlideModal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _PtcPickView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _ConfirmDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _StorageUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _PropsHelp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var _RequestHelp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));

  var _RpcManage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));

  var pageProps = ["prop.child_lock", "prop.sound", "prop.power"];
  var storageProps = ['city', 'rssi', 'ptc_timer', 'display_timer'];
  var requestCount = 3;
  var itemHeight = 60;

  var DeviceControl = function (_React$Component) {
    (0, _inherits2.default)(DeviceControl, _React$Component);

    function DeviceControl(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, DeviceControl);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DeviceControl).call(this, props, context));
      _this.requestPropsCount = requestCount;
      _this.requestPtcCount = requestCount;
      _this.requestDisplayCount = requestCount;

      _this.renderDialog = function () {
        return _react.default.createElement(_ConfirmDialog.default, {
          title: (0, _MHLocalizableString.getString)('locationConformTiTle'),
          message: (0, _MHLocalizableString.getString)('locationConformTip'),
          modalHeight: _miot.Host.isAndroid ? _MHGlobalData.default.isEnglish ? 212 : 192 : _MHGlobalData.default.isEnglish ? 215 : 191,
          contentStyle: {
            marginHorizontal: 40
          },
          messageStyle: {
            lineHeight: 22
          },
          dialogBackgroundColor: "#f7f7f7",
          animationType: "fade",
          dialogBorderRadius: 6,
          negativeButton: {
            title: (0, _MHLocalizableString.getString)('cancel'),
            onPress: _this.optionNo,
            titleStyle: {
              color: "#000000b3"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          },
          positiveButton: {
            title: (0, _MHLocalizableString.getString)('conform'),
            onPress: _this.optionYes,
            titleStyle: {
              color: "#4a8dfc"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          }
        });
      };

      _this._renderItem = function (item) {
        var title = item.item.title;
        var subtitle = item.item.subtitle;
        var type = item.item.type;
        var key = item.item.key;
        var hasText = (type & ITEM_TYPE.TEXT) === ITEM_TYPE.TEXT;
        var hasEntry = (type & ITEM_TYPE.ENTRY) === ITEM_TYPE.ENTRY;
        var hasSwitch = (type & ITEM_TYPE.SWITCH) === ITEM_TYPE.SWITCH;
        var keyValue = _this.state[key];
        var disabled = key === 'display' && _this.state.power === false;
        var switchValue = false;
        var isTimer = key === 'ptc_timer' || key === 'display_timer';

        if (subtitle) {
          if (key === 'ptc_timer') {
            subtitle = _this.state.ptcSubtitle;
          } else if (key === 'display_timer') {
            subtitle = _this.state.displaySubtitle;
          }
        }

        if (isTimer) {
          hasSwitch = subtitle !== (0, _MHLocalizableString.getString)('unSetting');
        }

        if (hasSwitch) {
          if (key === 'ptc_timer') {
            switchValue = _this.state.ptc_on;
          } else if (key === 'display_timer') {
            switchValue = _this.state.display;
          } else {
            switchValue = keyValue;
          }
        }

        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            flexDirection: 'column'
          }
        }, _react.default.createElement(_reactNative.TouchableHighlight, {
          style: {
            backgroundColor: '#ffffff'
          },
          underlayColor: _MHGlobalData.default.ItemSelectedColor,
          onPress: hasEntry ? function () {
            item.item.func();
          } : null
        }, _react.default.createElement(_reactNative.View, {
          style: deviceStyle.item
        }, _react.default.createElement(_reactNative.View, {
          style: deviceStyle.itemLeft
        }, _react.default.createElement(_reactNative.Text, {
          style: [disabled ? deviceStyle.titleTextDis : deviceStyle.titleText, _MHGlobalData.default.baseFontStyle]
        }, title), subtitle && _react.default.createElement(_reactNative.Text, {
          style: [deviceStyle.subtitleText, _MHGlobalData.default.baseFontStyle],
          numberOfLines: 2,
          ellipsizeMode: 'tail'
        }, subtitle)), _react.default.createElement(_reactNative.View, {
          style: deviceStyle.itemRight
        }, hasSwitch && _react.default.createElement(_CustomSwitch.default, {
          onTintColor: "#4a8dfc",
          value: switchValue,
          disabled: disabled,
          onValueChange: function onValueChange(value) {
            if (isTimer) {
              if (key === 'ptc_timer') {
                _this.setState({
                  ptc_on: value
                });

                _this.ptcTimer['status'] = value ? 'enable' : 'disable';

                _this.setPtcTimer(_this.getTimerString(_this.ptcTimer));
              } else if (key === 'display_timer') {
                _this.setState({
                  display: value
                });

                _this.displayTimer['status'] = value ? 'enable' : 'disable';

                _this.setDisplayTimer(_this.getTimerString(_this.displayTimer));
              }
            } else {
              _this.setState((0, _defineProperty2.default)({}, key, value));

              item.item.func(value);
            }
          }
        }), hasEntry && !hasText && !hasSwitch && _react.default.createElement(_reactNative.Image, {
          style: deviceStyle.subArrow,
          source: _$$_REQUIRE(_dependencyMap[29])
        }), hasText && _react.default.createElement(_reactNative.Text, {
          style: [deviceStyle.rightText, _MHGlobalData.default.baseFontStyle]
        }, keyValue)))), key === 'rssi' && _react.default.createElement(_reactNative.View, {
          style: deviceStyle.separatorTotal
        }));
      };

      _this.openConfirm = function (show) {
        _this.setState({
          showLocationDialog: show
        });
      };

      _this.optionYes = function () {
        _this.openConfirm(false);

        _this.requestLocation();
      };

      _this.optionNo = function () {
        _this.openConfirm(false);
      };

      _this.propsHelp = new _PropsHelp.default(pageProps);

      _this.createListData();

      _this.ptcTimer = null;
      _this.displayTimer = null;
      _this.state = {
        power: true,
        child_lock: false,
        sound: false,
        ptcSubtitle: (0, _MHLocalizableString.getString)('unSetting'),
        ptc_on: false,
        display: false,
        displaySubtitle: (0, _MHLocalizableString.getString)('unSetting'),
        city: '',
        rssi: '',
        visLocation: false,
        showLocationDialog: false
      };
      return _this;
    }

    (0, _createClass2.default)(DeviceControl, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this.addPtcTimerCallback = _reactNative.DeviceEventEmitter.addListener('addPtcTimer', function (ptcTimer) {
          _this2.setPtcTimerValue(ptcTimer);
        });
        this.addDisplayTimerCallback = _reactNative.DeviceEventEmitter.addListener('addDisplayTimer', function (displayTimer) {
          _this2.setDisplayTimerValue(displayTimer);
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.loadCache();
        this.getProps();
        this.listenerPush();
        this.requestCity();
        this.getRssi();
        this.getPtcTimer();
        this.getDisplayTimer();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.addPtcTimerCallback && this.addPtcTimerCallback.remove();
        this.addDisplayTimerCallback && this.addDisplayTimerCallback.remove();
        this.deviceListener && this.deviceListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: '#f7f7f7',
            flex: 1,
            flexDirection: 'column'
          }
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_CustomTitleBar.default, {
          title: (0, _MHLocalizableString.getString)('controlDevice'),
          source: _$$_REQUIRE(_dependencyMap[30]),
          highlightedSource: _$$_REQUIRE(_dependencyMap[31]),
          onPressLeft: function onPressLeft() {
            _this3.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: deviceStyle.separatorTotal
        }), _react.default.createElement(_reactNative.FlatList, {
          data: this.listData,
          renderItem: this._renderItem,
          keyExtractor: function keyExtractor(item, index) {
            return item + index;
          },
          ItemSeparatorComponent: function ItemSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [deviceStyle.separatorBackground]
            }, _react.default.createElement(_reactNative.View, {
              style: [deviceStyle.separator]
            }));
          },
          getItemLayout: function getItemLayout(data, index) {
            return {
              length: itemHeight,
              offset: itemHeight * index + _reactNative.StyleSheet.hairlineWidth,
              index: index
            };
          }
        }), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this3.setState({
              showLocationDialog: visible
            }, cbk);
          },
          visible: this.state.showLocationDialog,
          modalHeight: _miot.Host.isAndroid ? _MHGlobalData.default.isEnglish ? 212 : 192 : _MHGlobalData.default.isEnglish ? 215 : 191,
          renderCbk: this.renderDialog
        }));
      }
    }, {
      key: "loadCache",
      value: function loadCache() {
        var _this4 = this;

        var cacheProps = pageProps.concat(storageProps);

        _StorageUtil.default.load(cacheProps).then(function (res) {
          (0, _MHGlobalData.print)('DeviceControl load cache succeed', res);
          var propsMap = new Map();

          for (var i = 0; i < cacheProps.length; i++) {
            var cacheProp = cacheProps[i];

            if (!cacheProp.includes('prop.')) {
              cacheProp = "prop." + cacheProp;
            }

            propsMap.set(cacheProp, res[i]);
          }

          _this4.applyCache(propsMap);
        }).catch(function (err) {
          (0, _MHGlobalData.print)('DeviceControl load cache failed', err);
        });
      }
    }, {
      key: "getProps",
      value: function getProps() {
        var _Device$getDeviceWifi,
            _this5 = this;

        (_Device$getDeviceWifi = _miot.Device.getDeviceWifi()).loadProperties.apply(_Device$getDeviceWifi, pageProps).then(function (map) {
          _this5.requestPropsCount = 0;

          _this5.applyProps(map, false, true);
        }).catch(function (err) {
          if (_this5.requestPropsCount > 0) {
            _this5.requestPropsCount--;

            _this5.getProps();
          }

          (0, _MHGlobalData.print)('DeviceControl get props failed ', err);
        });
      }
    }, {
      key: "listenerPush",
      value: function listenerPush() {
        var _this6 = this;

        this.deviceListener = _miot.DeviceEvent.deviceReceivedMessages.addListener(function (device, messages) {
          (0, _MHGlobalData.print)('deviceReceivedMessages', messages);

          _this6.applyProps(messages, true, true);
        });
      }
    }, {
      key: "getDisplayTimer",
      value: function getDisplayTimer() {
        var _this7 = this;

        _RpcManage.default.getInstance().rpcRequest("get_light_timer", null, function () {
          _RequestHelp.default.getLightTimeList(null).then(function (res) {
            _this7.requestPtcCount = 0;

            if (res.code === 0) {
              var timers = res['result'];

              if (timers.length > 0) {
                var timer = timers[0];

                var displayTimer = _DataUtils.default.initTimeItemData(timer, 0);

                _this7.setDisplayTimerValue(displayTimer);
              }
            }

            (0, _MHGlobalData.print)("DeviceControl get display timer list succeed ", res);
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl get display timer failed', err);

            if (_this7.requestDisplayCount > 0) {
              _this7.requestDisplayCount--;

              _this7.getDisplayTimer();
            }
          });
        });
      }
    }, {
      key: "getPtcTimer",
      value: function getPtcTimer() {
        var _this8 = this;

        _RpcManage.default.getInstance().rpcRequest("get_ptc_timer", null, function () {
          _RequestHelp.default.getPTCList(null).then(function (res) {
            _this8.requestPtcCount = 0;

            if (res.code === 0) {
              var timers = res['result'];

              if (timers.length > 0) {
                var timer = timers[0];

                var ptcTimer = _DataUtils.default.initTimeItemData(timer, 0);

                _this8.setPtcTimerValue(ptcTimer);
              }
            }

            (0, _MHGlobalData.print)("DeviceControl get ptc timer list succeed ", res);
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl get ptc timer failed', err);

            if (_this8.requestPtcCount > 0) {
              _this8.requestPtcCount--;

              _this8.getPtcTimer();
            }
          });
        });
      }
    }, {
      key: "setChildLock",
      value: function setChildLock(value) {
        var _this9 = this;

        _RpcManage.default.getInstance().rpcRequest("set_child_lock", value, function () {
          _RequestHelp.default.setChildLock(value).then(function (result) {
            (0, _MHGlobalData.print)('DeviceControl set child lock', result);
            var newValue = value;

            if (result.code === 0) {
              _this9.propsHelp.increment(pageProps[0]);
            } else {
              newValue = !value;
            }

            _this9.setState({
              child_lock: newValue
            });
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl set child lock failed:', err);

            _this9.setState({
              child_lock: !value
            });
          });
        });
      }
    }, {
      key: "setSound",
      value: function setSound(value) {
        var _this10 = this;

        _RpcManage.default.getInstance().rpcRequest("set_sound", value, function () {
          _RequestHelp.default.setSound(value).then(function (result) {
            (0, _MHGlobalData.print)('DeviceControl set sound', result);
            var newValue = value;

            if (result.code === 0) {
              _this10.propsHelp.increment(pageProps[1]);
            } else {
              newValue = !value;
            }

            _this10.setState({
              sound: newValue
            });
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl set sound failed', err);

            _this10.setState({
              sound: !value
            });
          });
        });
      }
    }, {
      key: "setDisplayTimer",
      value: function setDisplayTimer(value) {
        var _this11 = this;

        var status = this.displayTimer.status === 'enable';

        _RpcManage.default.getInstance().rpcRequest("set_light_timer", value, function () {
          _RequestHelp.default.setLightTime(value).then(function (result) {
            (0, _MHGlobalData.print)('DeviceControl set display timer succeed ', result);
            var displayOn = status;

            if (result.code === 0) {
              _StorageUtil.default.set('display_timer', _this11.displayTimer);
            } else {
              _this11.displayTimer['status'] = status ? 'disable' : 'enable';
              displayOn = !status;
            }

            _this11.setState({
              display: displayOn
            });
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl set display timer failed', err);
            _this11.displayTimer['status'] = status ? 'disable' : 'enable';

            _this11.setState({
              display: !status
            });
          });
        });
      }
    }, {
      key: "setPtcTimer",
      value: function setPtcTimer(value) {
        var _this12 = this;

        var status = this.ptcTimer.status === 'enable';

        _RpcManage.default.getInstance().rpcRequest("set_ptc_timer", value, function () {
          _RequestHelp.default.setPtcTime(value).then(function (result) {
            (0, _MHGlobalData.print)('DeviceControl set ptc timer', result);
            var ptcOn = status;

            if (result.code === 0) {
              _StorageUtil.default.set('ptc_timer', _this12.ptcTimer);
            } else {
              _this12.ptcTimer['status'] = status ? 'disable' : 'enable';
              ptcOn = !status;
            }

            _this12.setState({
              ptc_on: ptcOn
            });
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl set ptc timer failed', err);
            _this12.ptcTimer['status'] = status ? 'disable' : 'enable';

            _this12.setState({
              ptc_on: !status
            });
          });
        });
      }
    }, {
      key: "requestCity",
      value: function requestCity() {
        var _this13 = this;

        if (_MHGlobalData.default.locationData) {
          this.getAreaInfo();
        } else {
          _miot.Host.storage.get(_MHGlobalData.default.locationDataUrl).then(function (val) {
            _MHGlobalData.default.locationData = val;

            _this13.getAreaInfo();
          }).catch(function (err) {
            if (err === 'expired') {
              (0, _MHGlobalData.print)('DeviceControl value for key already expired');

              _this13.requestLocation();
            }
          });
        }
      }
    }, {
      key: "getAreaInfo",
      value: function getAreaInfo() {
        var _this14 = this;

        var dataArr = String(_MHGlobalData.default.locationData).split("-");

        if (dataArr.length === 2) {
          var latitude = dataArr[0];
          var longitude = dataArr[1];
          var param = {};
          param["latitude"] = latitude;
          param["longitude"] = longitude;

          _miot.Service.smarthome.getAreaPropInfo(param).then(function (response) {
            if (response.code === 0) {
              var key = Object.keys(response.result)[0];
              var cityDic = response.result[key];

              if (cityDic.hasOwnProperty("city_name")) {
                var city = cityDic['city_name'];

                _this14.setState({
                  city: city
                });

                _StorageUtil.default.set('city', city);
              }
            }
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl getAreaPropInfo', err);
          });
        } else {
          _miot.Service.smarthome.getWeatherInfo(_MHGlobalData.default.deviceId).then(function (res) {
            if (res.hasOwnProperty("city") && res['city']) {
              var city = res['city'];

              _this14.setState({
                city: city
              });

              _StorageUtil.default.set('city', city);
            }
          }).catch(function (err) {
            (0, _MHGlobalData.print)('DeviceControl getWeatherInfo', err);
          });
        }
      }
    }, {
      key: "requestLocation",
      value: function requestLocation() {
        var _this15 = this;

        _miot.Host.locale.getLocation().then(function (res) {
          (0, _MHGlobalData.print)("DeviceControl request location succeed", res);

          if (res.hasOwnProperty('latitude') && res.hasOwnProperty('longitude')) {
            var locationData = res['latitude'] + "-" + res['longitude'];
            _MHGlobalData.default.locationData = locationData;
            _MHGlobalData.default.cachedLocationData = true;

            _this15.getAreaInfo();

            _miot.Host.storage.set(_MHGlobalData.default.locationDataUrl, locationData);

            _reactNative.DeviceEventEmitter.emit('reloadLocationData');
          }
        }).catch(function (err) {
          (0, _MHGlobalData.print)('DeviceControl requestLocation', err);
        });
      }
    }, {
      key: "getRssi",
      value: function getRssi() {
        var _this16 = this;

        _miot.Device.readDeviceNetWorkInfo(_MHGlobalData.default.deviceId).then(function (res) {
          (0, _MHGlobalData.print)("DeviceControl device network info", res);

          if (res.hasOwnProperty('wifiStrength')) {
            var percentRssi = Math.round(res['wifiStrength']);
            var rssi = percentRssi + "%";

            _this16.setState({
              rssi: rssi
            });

            _StorageUtil.default.set('rssi', rssi);
          }
        }).catch(function (err) {});
      }
    }, {
      key: "applyProps",
      value: function applyProps(messages, subscribe, save) {
        var newStates = {};
        var copyMap = new Map();

        if (messages.has('prop.child_lock')) {
          var child_lock = _DataUtils.default.getValueFromMap(messages, 'prop.child_lock');

          child_lock = _DataUtils.default.checkBoolValue(child_lock);
          save && copyMap.set('child_lock', child_lock);
          var enable = true;

          if (subscribe) {
            this.propsHelp.decrement(pageProps[0]);
            enable = this.propsHelp.enabled(pageProps[0]);
          }

          if (this.state.child_lock !== child_lock && enable) {
            newStates = (0, _objectSpread2.default)({}, newStates, {
              child_lock: child_lock
            });
          }
        }

        if (messages.has('prop.sound')) {
          var sound = _DataUtils.default.getValueFromMap(messages, 'prop.sound');

          sound = _DataUtils.default.checkBoolValue(sound);
          save && copyMap.set('sound', sound);
          var _enable = true;

          if (subscribe) {
            this.propsHelp.decrement(pageProps[1]);
            _enable = this.propsHelp.enabled(pageProps[1]);
          }

          if (this.state.sound !== sound && _enable) {
            newStates = (0, _objectSpread2.default)({}, newStates, {
              sound: sound
            });
          }
        }

        if (messages.has('prop.power')) {
          var power = _DataUtils.default.getValueFromMap(messages, 'prop.power');

          power = _DataUtils.default.checkBoolValue(power);
          save && copyMap.set('power', power);
          var _enable2 = true;

          if (subscribe) {
            this.propsHelp.decrement(pageProps[2]);
            _enable2 = this.propsHelp.enabled(pageProps[2]);
          }

          if (this.state.power !== power && _enable2) {
            newStates = (0, _objectSpread2.default)({}, newStates, {
              power: power
            });
          }
        }

        if (save) {
          if (Object.keys(newStates).length > 0) {
            this.setState(newStates);
          }

          _StorageUtil.default.save(copyMap);
        } else {
          return {
            newStates: newStates
          };
        }
      }
    }, {
      key: "applyCache",
      value: function applyCache(map) {
        var _this$applyProps = this.applyProps(map, false, false),
            newStates = _this$applyProps.newStates;

        if (map.has('prop.city')) {
          var city = _DataUtils.default.getValueFromMap(map, 'prop.city');

          newStates = (0, _objectSpread2.default)({}, newStates, {
            city: city
          });
        }

        if (map.has('prop.rssi')) {
          var rssi = _DataUtils.default.getValueFromMap(map, 'prop.rssi');

          newStates = (0, _objectSpread2.default)({}, newStates, {
            rssi: rssi
          });
        }

        if (map.has('prop.ptc_timer')) {
          var ptcTimer = _DataUtils.default.getValueFromMap(map, 'prop.ptc_timer');

          if (this.checkTimer(ptcTimer)) {
            this.ptcTimer = ptcTimer;
            newStates = (0, _objectSpread2.default)({}, newStates, {
              ptc_on: ptcTimer.status === 'enable',
              ptcSubtitle: ptcTimer.startTime + " - " + ptcTimer.endTime + " " + _LocalTimeStrings.default.returnWeekShow(ptcTimer.week)
            });
          }
        }

        if (map.has('prop.display_timer')) {
          var displayTimer = _DataUtils.default.getValueFromMap(map, 'prop.display_timer');

          if (this.checkTimer(displayTimer)) {
            this.displayTimer = displayTimer;
            newStates = (0, _objectSpread2.default)({}, newStates, {
              display: displayTimer.status === 'enable',
              displaySubtitle: displayTimer.startTime + " - " + displayTimer.endTime + " " + _LocalTimeStrings.default.returnWeekShow(displayTimer.week)
            });
          }
        }

        if (Object.keys(newStates).length > 0) {
          this.setState(newStates);
        }
      }
    }, {
      key: "setPtcTimerValue",
      value: function setPtcTimerValue(ptcTimer) {
        if (this.checkTimer(ptcTimer)) {
          this.ptcTimer = ptcTimer;
          this.setState({
            ptc_on: ptcTimer.status === 'enable',
            ptcSubtitle: ptcTimer.startTime + " - " + ptcTimer.endTime + " " + _LocalTimeStrings.default.returnWeekShow(ptcTimer.week)
          });

          _StorageUtil.default.set('ptc_timer', ptcTimer);
        } else {
          this.ptcTimer = null;

          if (ptcTimer.isEmpty) {
            this.setState({
              ptcSubtitle: (0, _MHLocalizableString.getString)('unSetting')
            });
          }
        }
      }
    }, {
      key: "setDisplayTimerValue",
      value: function setDisplayTimerValue(displayTimer) {
        if (this.checkTimer(displayTimer)) {
          this.displayTimer = displayTimer;
          this.setState({
            display: displayTimer.status === 'enable',
            displaySubtitle: displayTimer.startTime + " - " + displayTimer.endTime + " " + _LocalTimeStrings.default.returnWeekShow(displayTimer.week)
          });

          _StorageUtil.default.set('display_timer', displayTimer);
        } else {
          this.displayTimer = null;

          if (displayTimer.isEmpty) {
            this.setState({
              displaySubtitle: (0, _MHLocalizableString.getString)('unSetting')
            });
          }
        }
      }
    }, {
      key: "checkTimer",
      value: function checkTimer(timer) {
        return timer && _DataUtils.default.checkTime(timer.startTime) && _DataUtils.default.checkTime(timer.endTime);
      }
    }, {
      key: "getTimerString",
      value: function getTimerString(timer) {
        return timer.index + '-' + timer.hexSum + '-' + timer.startTime + '-' + timer.endTime + '-' + timer.level + '-' + timer.status;
      }
    }, {
      key: "createListData",
      value: function createListData() {
        var _this17 = this;

        this.listData = [{
          'title': (0, _MHLocalizableString.getString)('childLock'),
          'subtitle': (0, _MHLocalizableString.getString)('childLockTip'),
          'type': ITEM_TYPE.SWITCH,
          'key': 'child_lock',
          'func': function func(value) {
            _this17.setChildLock(value);
          }
        }, {
          'title': (0, _MHLocalizableString.getString)('deviceSound'),
          'type': ITEM_TYPE.SWITCH,
          'key': 'sound',
          'func': function func(value) {
            _this17.setSound(value);
          }
        }, {
          'title': (0, _MHLocalizableString.getString)('lightTimerPower'),
          'subtitle': (0, _MHLocalizableString.getString)('unSetting'),
          'type': ITEM_TYPE.ENTRY | ITEM_TYPE.SWITCH,
          'key': 'display_timer',
          'func': function func() {
            _this17.props.navigation.navigate('AddTime', {
              'routeTitle': (0, _MHLocalizableString.getString)('navigationTitleLightTimer'),
              'itemData': _this17.displayTimer
            });
          }
        }, {
          'title': (0, _MHLocalizableString.getString)('ptcTimerPower'),
          'subtitle': (0, _MHLocalizableString.getString)('unSetting'),
          'type': ITEM_TYPE.ENTRY | ITEM_TYPE.SWITCH,
          'key': 'ptc_timer',
          'func': function func() {
            _this17.props.navigation.navigate('AddTime', {
              'routeTitle': (0, _MHLocalizableString.getString)('navigationTitlePtcTimer'),
              'itemData': _this17.ptcTimer
            });
          }
        }, {
          'title': (0, _MHLocalizableString.getString)('deviceLocation'),
          'type': ITEM_TYPE.TEXT | ITEM_TYPE.ENTRY,
          'key': 'city',
          'func': function func() {
            _this17.setState({
              showLocationDialog: true
            });
          }
        }, {
          'title': (0, _MHLocalizableString.getString)('wifiSignal'),
          'type': ITEM_TYPE.TEXT,
          'key': 'rssi',
          'func': function func() {}
        }];
      }
    }]);
    return DeviceControl;
  }(_react.default.Component);

  exports.default = DeviceControl;

  DeviceControl.navigationOptions = function () {
    return {
      header: null
    };
  };

  var ITEM_TYPE = {
    SWITCH: 1,
    ENTRY: 2,
    TEXT: 4
  };

  var deviceStyle = _reactNative.StyleSheet.create({
    separatorTotal: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: _ColorConstant.default.ColorOfSperate
    },
    separator: {
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      height: _reactNative.StyleSheet.hairlineWidth,
      flex: 1,
      marginLeft: 20,
      marginRight: 20
    },
    separatorBackground: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: '#ffffff'
    },
    titleText: {
      fontSize: (0, _FontSizeConstant.setSpTextNew)(14),
      color: 'rgba(0,0,0,0.8)'
    },
    titleTextDis: {
      fontSize: (0, _FontSizeConstant.setSpTextNew)(14),
      color: '#cacaca'
    },
    subtitleText: {
      fontSize: (0, _FontSizeConstant.setSpTextNew)(11),
      color: 'rgba(0,0,0,0.4)',
      marginTop: 4
    },
    rightText: {
      fontSize: (0, _FontSizeConstant.setSpTextNew)(14),
      color: 'rgb(138,138,138)',
      marginRight: 5
    },
    item: {
      flexDirection: 'row',
      flex: 1,
      height: itemHeight,
      justifyContent: 'space-between',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    itemLeft: {
      marginLeft: 20,
      marginRight: 20,
      justifyContent: 'center',
      flex: 1
    },
    itemRight: {
      marginRight: 20,
      justifyContent: 'center'
    },
    subArrow: {
      width: 6.5,
      height: 13,
      marginRight: 5
    }
  });
},10337,[14308,14305,14314,14317,14320,14323,14371,14377,14386,10297,10033,11251,10088,10230,10031,10010,10074,10034,10328,10046,10064,10067,10040,10037,10250,10340,10343,10262,10265,10316,10331,10334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _MHGlobalData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var storageKey = _MHGlobalData.default.cachePrefix;
  var searchKey = 'prop.';

  var StorageUtil = function () {
    function StorageUtil() {
      (0, _classCallCheck2.default)(this, StorageUtil);
    }

    (0, _createClass2.default)(StorageUtil, null, [{
      key: "set",
      value: function set(key, value) {
        _miot.Host.storage.set(StorageUtil.addStorageKey(key), value);
      }
    }, {
      key: "save",
      value: function save(propsMap) {
        for (var _iterator = propsMap, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref4 = _ref3;

          var _ref2 = (0, _slicedToArray2.default)(_ref4, 2);

          var _key = _ref2[0];
          var _value = _ref2[1];
          StorageUtil.set(_key, _value);
        }
      }
    }, {
      key: "get",
      value: function get(key) {
        return _miot.Host.storage.get(StorageUtil.addStorageKey(key));
      }
    }, {
      key: "load",
      value: function load(keys) {
        return _miot.Host.storage.load(keys.map(function (key) {
          return StorageUtil.addStorageKey(key);
        }));
      }
    }, {
      key: "addStorageKey",
      value: function addStorageKey(key) {
        var newKey;

        if (key.includes(searchKey)) {
          newKey = key.replace(searchKey, storageKey);
        } else {
          newKey = storageKey + key;
        }

        return newKey;
      }
    }]);
    return StorageUtil;
  }();

  exports.default = StorageUtil;
},10340,[14305,14347,14320,14323,10074,10031]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _MHGlobalData = _$$_REQUIRE(_dependencyMap[3]);

  var MAX_PUSH_SECOND = 3;
  var MAX_PUSH_BETWEEN_MILLISECONDS = 500;

  var PropsHelp = function () {
    (0, _createClass2.default)(PropsHelp, null, [{
      key: "getTimestamp",
      value: function getTimestamp() {
        return parseInt(Date.now() / 1000);
      }
    }]);

    function PropsHelp(props) {
      (0, _classCallCheck2.default)(this, PropsHelp);
      this.propsIndex = new Map();

      for (var i = 0; i < props.length; i++) {
        this.propsIndex.set(props[i], {
          count: 0,
          timestamp: PropsHelp.getTimestamp()
        });
      }
    }

    (0, _createClass2.default)(PropsHelp, [{
      key: "increment",
      value: function increment(prop) {
        if (this.checkProp(prop)) {
          var propObj = this.propsIndex.get(prop);
          var count = 0;

          if (propObj.count < 0 || this.isTimeout(propObj)) {
            count = 0;
          } else {
            count = propObj.count;
          }

          var newPropObj = {
            count: count + 1,
            timestamp: PropsHelp.getTimestamp()
          };
          this.propsIndex.set(prop, newPropObj);
        }
      }
    }, {
      key: "decrement",
      value: function decrement(prop) {
        if (this.checkProp(prop)) {
          var propObj = this.propsIndex.get(prop);

          if ('pushTime' in propObj) {
            if (Date.now() - propObj.pushTime < MAX_PUSH_BETWEEN_MILLISECONDS) {
              propObj.pushTime = Date.now();
              return;
            }
          }

          propObj.pushTime = Date.now();
          propObj.count -= 1;
          this.propsIndex.set(prop, propObj);
        }
      }
    }, {
      key: "enabled",
      value: function enabled(prop) {
        if (this.checkProp(prop)) {
          var propObj = this.propsIndex.get(prop);
          var isSubscribe = propObj.count < 0;
          return isSubscribe || this.isTimeout(propObj);
        }

        return true;
      }
    }, {
      key: "isTimeout",
      value: function isTimeout(propObj) {
        return PropsHelp.getTimestamp() - propObj.timestamp > MAX_PUSH_SECOND;
      }
    }, {
      key: "checkProp",
      value: function checkProp(prop) {
        return this.propsIndex.has(prop);
      }
    }]);
    return PropsHelp;
  }();

  exports.default = PropsHelp;
},10343,[14305,14320,14323,10031]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var FontConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _CurveLineView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _SperateView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _HistoryTimeCheckView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var bottomH = 101 * _MHGlobalData.default.HeightPersent;
  var bottomMargin = _MHGlobalData.default.isIphoneX ? bottomH + 10 : bottomH;
  var MarginMid = 27 * _MHGlobalData.default.HeightPersent;
  var MarginBottom = 6 * _MHGlobalData.default.HeightPersent;
  var MarginTop = 35 * _MHGlobalData.default.HeightPersent;
  global.loadRequest = false;

  var HistoryLinePage = function (_React$Component) {
    (0, _inherits2.default)(HistoryLinePage, _React$Component);

    function HistoryLinePage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, HistoryLinePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HistoryLinePage).call(this, props, context));
      _this.isLoaded = false;
      _this.pm25Number = _this.props.navigation.getParam("pm25Num");
      _this.co2Number = _this.props.navigation.getParam("co2Num");

      var pm25Arr = _this._PM25Data();

      var co2Arr = _this._CO2Data();

      var controlData = _this._controlViewData();

      _this.controlViewDataSource = controlData;

      var timeListData = _this._timeDayData();

      _this.lineViewH = ((0, _MHGlobalData.getWindowHeight)() - _MHGlobalData.default.naviHeight - bottomMargin - MarginBottom - MarginMid - MarginTop) * 0.5;
      _this.state = {
        PM25Data: pm25Arr,
        CO2Data: co2Arr,
        controlViewDataSource: _this.controlViewDataSource,
        timeListData: timeListData,
        timePointArr: [],
        hiddenLine: true,
        pm25: _this.pm25Number,
        co2: _this.co2Number
      };
      return _this;
    }

    (0, _createClass2.default)(HistoryLinePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this.addTimerCallBack = _reactNative.DeviceEventEmitter.addListener('get_sensor_data', function (sensor) {
          var co2 = sensor["co2"];
          var pm25 = sensor["pm25"];

          _this2.setState({
            pm25: pm25,
            co2: co2
          });
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        setTimeout(function () {
          _this3._getHistoryFromApi(["co2", "pm25"], "stat_day");
        }, 500);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.addTimerCallBack.remove();
      }
    }, {
      key: "_PM25Data",
      value: function _PM25Data() {
        var pointArray = [[0, -75], [0, -75]];
        return pointArray;
      }
    }, {
      key: "_CO2Data",
      value: function _CO2Data() {
        var pointArray = [[0, -1000], [0, -1000]];
        return pointArray;
      }
    }, {
      key: "_controlViewData",
      value: function _controlViewData() {
        var _this4 = this;

        var dataSourse = {
          list: [{
            normalImage: _$$_REQUIRE(_dependencyMap[20]),
            highlightImage: _$$_REQUIRE(_dependencyMap[21]),
            title: _MHLocalizableString.LocalizedStrings.day_dis,
            selected: true,
            func: function func() {
              if (global.loadRequest == false) {
                _this4._changTimeData('stat_day');
              }
            }
          }, {
            normalImage: _$$_REQUIRE(_dependencyMap[22]),
            highlightImage: _$$_REQUIRE(_dependencyMap[23]),
            title: _MHLocalizableString.LocalizedStrings.week_dis,
            selected: false,
            func: function func() {
              if (global.loadRequest == false) {
                _this4._changTimeData('stat_week');
              }
            }
          }, {
            normalImage: _$$_REQUIRE(_dependencyMap[24]),
            highlightImage: _$$_REQUIRE(_dependencyMap[25]),
            title: _MHLocalizableString.LocalizedStrings.month_dis,
            selected: false,
            func: function func() {
              if (global.loadRequest == false) {
                _this4._changTimeData('stat_month');
              }
            }
          }]
        };
        return dataSourse;
      }
    }, {
      key: "_timeDayData",
      value: function _timeDayData() {
        var tipArray = [];
        var totalHour = 24;

        var endTime = _LocalTimeStrings.default.getCurrentSecond();

        var array = _LocalTimeStrings.default.getTimesArray(endTime, totalHour);

        var startTime = array[0].time;
        var begin = _LocalTimeStrings.default.addZero(new Date(startTime * 1000).getHours(), 2) + ':00';
        tipArray.push(begin);

        for (var i = 0; i < 5; i++) {
          var timeItem = _LocalTimeStrings.default.addZero(new Date((startTime + 14400 * (i + 1)) * 1000).getHours(), 2) + ':00';
          tipArray.push(timeItem);
        }

        tipArray.push(_MHLocalizableString.LocalizedStrings.now);
        return tipArray;
      }
    }, {
      key: "_timeWeekData",
      value: function _timeWeekData() {
        var tipArray = [];
        var totalHour = 144;

        var endTime = _LocalTimeStrings.default.getCurrentSecond();

        var array = _LocalTimeStrings.default.getTimesArray(endTime, totalHour);

        var startTime = array[0].time;

        var begin = _LocalTimeStrings.default.getweekTimeStr(new Date(startTime * 1000).getDay());

        tipArray.push(begin);

        for (var i = 0; i < 5; i++) {
          var timeItem = _LocalTimeStrings.default.getweekTimeStr(new Date((startTime + 86400 * (i + 1)) * 1000).getDay());

          tipArray.push(timeItem);
        }

        tipArray.push(_MHLocalizableString.LocalizedStrings.now);
        return tipArray;
      }
    }, {
      key: "_timeMonthData",
      value: function _timeMonthData() {
        var tipArray = [];
        var totalHour = 720;

        var endTime = _LocalTimeStrings.default.getCurrentSecond();

        var array = _LocalTimeStrings.default.getTimesArray(endTime, totalHour);

        var startTime = array[0].time;
        var beginTimeDate = new Date(startTime * 1000);

        var begin = _LocalTimeStrings.default.addZero(beginTimeDate.getMonth() + 1, 2) + '-' + _LocalTimeStrings.default.addZero(beginTimeDate.getDate(), 2);

        tipArray.push(begin);

        for (var i = 0; i < 5; i++) {
          var timeItemDate = new Date((startTime + 432000 * (i + 1)) * 1000);

          var timeItem = _LocalTimeStrings.default.addZero(timeItemDate.getMonth() + 1, 2) + '-' + _LocalTimeStrings.default.addZero(timeItemDate.getDate(), 2);

          tipArray.push(timeItem);
        }

        tipArray.push(_MHLocalizableString.LocalizedStrings.now);
        return tipArray;
      }
    }, {
      key: "_getHistoryFromApi",
      value: function _getHistoryFromApi(keys, type) {
        var _this5 = this;

        if (global.loadRequest == false) {
          global.loadRequest = true;
          var totalHour = 25;

          if (type == "stat_week") {
            totalHour = 168;
          }

          if (type == "stat_month") {
            totalHour = 720;
          }

          var marginMinute = 15;

          var endTime = _LocalTimeStrings.default.getCurrentSecond();

          var startTime = _LocalTimeStrings.default.getMainEndSecond(endTime, totalHour);

          var timePointArr = _LocalTimeStrings.default.getMainTimeArray(endTime, totalHour, marginMinute);

          var co2Arr = _LocalTimeStrings.default.getSpecialTimeArray(endTime, totalHour, marginMinute, "co2");

          var pm25Arr = _LocalTimeStrings.default.getSpecialTimeArray(endTime, totalHour, marginMinute, "pm25");

          if (type == "stat_week") {
            co2Arr = _LocalTimeStrings.default.getSpecialWeekArray(endTime, 'co2');
            pm25Arr = _LocalTimeStrings.default.getSpecialWeekArray(endTime, 'pm25');
          }

          if (type == "stat_month") {
            co2Arr = _LocalTimeStrings.default.getSpecialMonthArray(endTime, 'co2');
            pm25Arr = _LocalTimeStrings.default.getSpecialMonthArray(endTime, 'pm25');
          }

          this.setState({
            timePointArr: timePointArr
          });

          this._setEmptyData(timePointArr, type);

          var left = new Promise(function (resolve, reject) {
            _LocalTimeStrings.default.getHistoryDataFromApi(keys[0], type, startTime, endTime, function (data) {
              resolve(data);
            });
          });
          var right = new Promise(function (resolve, reject) {
            _LocalTimeStrings.default.getHistoryDataFromApi(keys[1], type, startTime, endTime, function (data) {
              resolve(data);
            });
          });
          Promise.all([left, right]).then(function (values) {
            _this5._filterTimeDataSource(co2Arr, pm25Arr, values, type, endTime);
          });
        }
      }
    }, {
      key: "_filterTimeDataSource",
      value: function _filterTimeDataSource(co2TimeArray, pm25TimeArray, values, type, endTime) {
        var _this6 = this;

        var co2Data = [];
        var pm25Data = [];
        var co2TimeArr = co2TimeArray;
        var pm25TimeArr = pm25TimeArray;
        var co2Values = values[0];
        var pm25Values = values[1];

        for (var j = 0; j < co2Values.length; j++) {
          for (var k = 0; k < co2TimeArr.length; k++) {
            var item = co2TimeArr[k];

            if (parseInt(co2Values[j]["time"]) == parseInt(item["time"])) {
              var value = String(co2Values[j]["value"]);

              if (value.slice(0, 1) == "[") {
                value = value.slice(1);
              }

              if (value.substr(value.length - 1, 1) == "]") {
                value = value.substr(0, value.length - 1);
              }

              item["value"] = value;
              break;
            }
          }
        }

        for (var _j = 0; _j < pm25Values.length; _j++) {
          for (var _k = 0; _k < pm25TimeArr.length; _k++) {
            var _item = pm25TimeArr[_k];

            if (parseInt(pm25Values[_j]["time"]) == parseInt(_item["time"])) {
              var value = pm25Values[_j]["value"];

              if (value.slice(0, 1) == "[") {
                value = value.slice(1);
              }

              if (value.substr(value.length - 1, 1) == "]") {
                value = value.substr(0, value.length - 1);
              }

              _item["value"] = value;
              break;
            }
          }
        }

        if (type == "stat_day") {
          for (var _k2 = 0; _k2 < co2TimeArr.length - 3; _k2++) {
            var _item2 = co2TimeArr[_k2];
            var co2Item = [parseInt(_item2["time"]), parseInt(_item2["value"])];
            co2Data.push(co2Item);
          }

          for (var _k3 = 0; _k3 < pm25TimeArr.length - 3; _k3++) {
            var _item3 = pm25TimeArr[_k3];
            var pm25Item = [parseInt(_item3["time"]), parseInt(_item3["value"])];
            pm25Data.push(pm25Item);
          }
        }

        if (type == "stat_week") {
          for (var _k4 = 0; _k4 < co2TimeArr.length; _k4++) {
            var _item4 = co2TimeArr[_k4];
            var _co2Item = [parseInt(_item4["time"]), parseInt(_item4["value"])];
            co2Data.push(_co2Item);
          }

          for (var _k5 = 0; _k5 < pm25TimeArr.length; _k5++) {
            var _item5 = pm25TimeArr[_k5];
            var _pm25Item = [parseInt(_item5["time"]), parseInt(_item5["value"])];
            pm25Data.push(_pm25Item);
          }
        }

        if (type == "stat_month") {
          for (var _k6 = 0; _k6 < co2TimeArr.length; _k6++) {
            var _item6 = co2TimeArr[_k6];
            var _co2Item2 = [parseInt(_item6["time"]), parseInt(_item6["value"])];
            co2Data.push(_co2Item2);
          }

          for (var _k7 = 0; _k7 < pm25TimeArr.length; _k7++) {
            var _item7 = pm25TimeArr[_k7];
            var _pm25Item2 = [parseInt(_item7["time"]), parseInt(_item7["value"])];
            pm25Data.push(_pm25Item2);
          }
        }

        var co2ItemModel = co2Data[0];
        co2ItemModel[1] = parseInt(this.co2Number);
        var pm25ItemModel = pm25Data[0];
        pm25ItemModel[1] = parseInt(this.pm25Number);
        this.isLoaded = true;
        this.setState({
          hiddenLine: false,
          PM25Data: pm25Data.reverse(),
          CO2Data: co2Data.reverse()
        }, function () {
          global.loadRequest = false;
          _this6.isLoaded = false;
        });
      }
    }, {
      key: "_setEmptyData",
      value: function _setEmptyData(dataArray, type) {
        var pm25Arr = this._PM25Data();

        var co2Arr = this._CO2Data();

        this.setState({
          hiddenLine: true,
          PM25Data: pm25Arr,
          CO2Data: co2Arr
        });
      }
    }, {
      key: "_changTimeData",
      value: function _changTimeData(type) {
        this.isLoaded = false;
        var tipArray = [];
        var timeListData = [];
        var tempArr = this.controlViewDataSource;
        var list = tempArr.list;

        for (var i = 0; i < list.length; i++) {
          list[i].selected = false;
        }

        if (type == "stat_day") {
          timeListData = this._timeDayData();
          list[0].selected = true;

          this._getHistoryFromApi(["co2", "pm25"], "stat_day");
        }

        if (type == "stat_week") {
          timeListData = this._timeWeekData();
          list[1].selected = true;

          this._getHistoryFromApi(["co2", "pm25"], "stat_week");
        }

        if (type == "stat_month") {
          timeListData = this._timeMonthData();
          list[2].selected = true;

          this._getHistoryFromApi(["co2", "pm25"], "stat_month");
        }

        this.setState({
          timeListData: timeListData,
          controlViewDataSource: tempArr
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this7 = this;

        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOfWhite
          },
          title: _MHLocalizableString.LocalizedStrings.navigationTitleHistory,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[26]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[27]),
          onPressLeft: function onPressLeft() {
            _this7.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.contentViewStyle
        }, _react.default.createElement(_reactNative.View, {
          style: {
            height: MarginTop,
            width: (0, _MHGlobalData.getWindowWidth)(),
            backgroundColor: 'white'
          }
        }), _react.default.createElement(_CurveLineView.default, {
          dataSource: this.state.PM25Data,
          width: (0, _MHGlobalData.getWindowWidth)() - 60,
          height: this.lineViewH,
          strokeColor: _ColorConstant.default.ColorOfMainBlue,
          typeName: "PM2.5",
          standard: 75,
          timeListData: this.state.timeListData,
          isLoaded: this.isLoaded,
          hiddenLine: this.state.hiddenLine,
          valueCallback: this.state.pm25
        }), _react.default.createElement(_reactNative.View, {
          style: {
            height: MarginMid,
            width: (0, _MHGlobalData.getWindowWidth)(),
            backgroundColor: 'white'
          }
        }), _react.default.createElement(_CurveLineView.default, {
          dataSource: this.state.CO2Data,
          width: (0, _MHGlobalData.getWindowWidth)() - 60,
          height: this.lineViewH,
          strokeColor: _ColorConstant.default.ColorOf00C9DC,
          typeName: "CO2",
          standard: 1000,
          timeListData: this.state.timeListData,
          isLoaded: this.isLoaded,
          hiddenLine: this.state.hiddenLine,
          valueCallback: this.state.co2
        }), _react.default.createElement(_reactNative.View, {
          style: {
            height: MarginBottom,
            width: (0, _MHGlobalData.getWindowWidth)(),
            backgroundColor: 'white'
          }
        })), _react.default.createElement(_reactNative.View, {
          style: styles.bottomViewStyle
        }, _react.default.createElement(_SperateView.default, {
          width: (0, _MHGlobalData.getWindowWidth)(),
          height: 0.5,
          leftMargin: 0,
          rightMargin: 0
        }), _react.default.createElement(_HistoryTimeCheckView.default, {
          style: styles.historyTimeViewStyle,
          dataSourse: this.state.controlViewDataSource
        })));
      }
    }]);
    return HistoryLinePage;
  }(_react.default.Component);

  exports.default = HistoryLinePage;

  HistoryLinePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: 'white',
      flexDirection: 'column'
    },
    separatorStyle: {
      height: 0.5,
      alignSelf: 'stretch',
      backgroundColor: '#d9d9d9',
      width: (0, _MHGlobalData.getWindowWidth)()
    },
    historyTimeViewStyle: {
      height: bottomMargin,
      width: (0, _MHGlobalData.getWindowWidth)(),
      justifyContent: 'center'
    },
    bottomViewStyle: {
      height: bottomMargin + 0.5,
      width: (0, _MHGlobalData.getWindowWidth)()
    },
    contentViewStyle: {},
    blankViewStyle: {
      height: 15,
      width: (0, _MHGlobalData.getWindowWidth)(),
      backgroundColor: 'white'
    }
  });
},10346,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10352,10040,10061,10355,10361,10364,10367,10370,10373,10376,10331,10334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeUiKitten = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _FontSizeConstant = _$$_REQUIRE(_dependencyMap[13]);

  var _CustomButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var titleHeight = _MHGlobalData.default.naviTitleHeight;
  var imgHeight = 28;

  var MainPageNavigation = function (_Component) {
    (0, _inherits2.default)(MainPageNavigation, _Component);

    function MainPageNavigation(props) {
      (0, _classCallCheck2.default)(this, MainPageNavigation);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MainPageNavigation).call(this, props));
    }

    (0, _createClass2.default)(MainPageNavigation, [{
      key: "render",
      value: function render() {
        var _this = this;

        if (_reactNative.Platform.OS === 'android') {
          _reactNative.StatusBar.setTranslucent(true);
        }

        var leftWidth = this.props.leftTextStyle ? this.props.leftTextStyle.width : 0;
        var rightWidth = this.props.rightTextStyle ? this.props.rightTextStyle.width : 0;
        var rightHeight = this.props.rightTextStyle ? this.props.rightTextStyle.height : titleHeight;
        var leftSource = this.props.leftImageNormalSource ? this.props.leftImageNormalSource : _$$_REQUIRE(_dependencyMap[15]);
        var leftLightSource = this.props.leftImageHighlightedSource ? this.props.leftImageHighlightedSource : _$$_REQUIRE(_dependencyMap[16]);
        var rightSource = this.props.rightImageNormalSource ? this.props.rightImageNormalSource : _$$_REQUIRE(_dependencyMap[17]);
        var rightLightSource = this.props.rightImageHighlightedSource ? this.props.rightImageHighlightedSource : _$$_REQUIRE(_dependencyMap[18]);
        var titleColor = this.props.titleColor ? this.props.titleColor : '#707070';
        var titleFont = this.props.titleFont ? this.props.titleFont : (0, _FontSizeConstant.setSpTextNew)(15);
        return _react.default.createElement(_reactNavigation.SafeAreaView, {
          style: [styles.titleBarContainer, this.props.style]
        }, this.props.leftText ? _react.default.createElement(_reactNativeUiKitten.RkButton, {
          onPress: this.props.onPressLeft,
          contentStyle: [styles.leftRightText, this.props.leftTextStyle],
          style: [styles.leftRightText, {
            height: this.props.onPressLeft ? titleHeight : 0,
            width: leftWidth ? leftWidth : 56
          }]
        }, this.props.leftText) : _react.default.createElement(_ui.ImageButton, {
          onPress: this.props.onPressLeft,
          style: [styles.img, {
            height: this.props.onPressLeft ? imgHeight : 0
          }],
          source: leftSource,
          highlightedSource: leftLightSource
        }), _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer]
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.titleText, {
            color: titleColor,
            fontSize: titleFont
          }],
          onPress: this.props.onPressTitle
        }, this.props.title), this.props.subTitle && _react.default.createElement(_reactNative.Text, {
          style: [styles.subtitleText],
          onPress: this.props.onPressTitle
        }, this.props.subTitle)), this.props.rightText ? _react.default.createElement(_CustomButton.default, {
          title: this.props.rightText,
          onPressColor: this.props.onPressColor,
          contentStyle: this.props.rightTextStyle,
          onPress: function onPress() {
            _this.props.onPressRight();
          }
        }) : _react.default.createElement(_ui.ImageButton, {
          onPress: this.props.onPressRight,
          style: [styles.img, {
            height: this.props.onPressRight ? imgHeight : 0
          }],
          source: rightSource,
          highlightedSource: rightLightSource
        }));
      }
    }]);
    return MainPageNavigation;
  }(_react.Component);

  exports.default = MainPageNavigation;

  var styles = _reactNative.StyleSheet.create({
    titleBarContainer: {
      flexDirection: "row",
      width: (0, _MHGlobalData.getWindowWidth)(),
      alignItems: "flex-end",
      height: _reactNative.StatusBar.currentHeight + titleHeight
    },
    textContainer: {
      height: titleHeight,
      flex: 1,
      alignItems: 'stretch',
      justifyContent: 'center'
    },
    titleText: {
      textAlignVertical: 'center',
      textAlign: 'center'
    },
    subtitleText: {
      color: '#00000088',
      fontSize: (0, _FontSizeConstant.setSpTextNew)(12),
      textAlignVertical: 'center',
      textAlign: 'center'
    },
    leftRightText: {
      flexDirection: 'column',
      backgroundColor: '#0000',
      alignItems: 'center',
      justifyContent: 'center',
      textAlignVertical: "center",
      textAlign: "center"
    },
    img: {
      width: imgHeight,
      height: imgHeight,
      resizeMode: "contain",
      marginLeft: 14,
      marginTop: (titleHeight - 28) / 2,
      marginBottom: (titleHeight - 28) / 2,
      marginRight: 14
    }
  });
},10349,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10918,11251,10031,10034,10043,10049,10052,10055,10058]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _OtherConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[14]);

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _miot = _$$_REQUIRE(_dependencyMap[16]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[17]);

  var Animated = ReactNative.Animated,
      ART = ReactNative.ART,
      View = ReactNative.View,
      Platform = ReactNative.Platform,
      StyleSheet = ReactNative.StyleSheet,
      Text = ReactNative.Text,
      PanResponder = ReactNative.PanResponder,
      Dimensions = ReactNative.Dimensions;
  var Surface = ART.Surface,
      Shape = ART.Shape,
      Group = ART.Group,
      Path = ART.Path,
      ClippingRectangle = ART.ClippingRectangle,
      LinearGradient = ART.LinearGradient,
      RadialGradient = ART.RadialGradient,
      Pattern = ART.Pattern,
      Transform = ART.Transform;
  var ScreenWidth = (0, _MHGlobalData.getWindowWidth)();
  var ScreenHeight = (0, _MHGlobalData.getWindowHeight)();
  var debugMsg = true;
  var timeViewH = 15 * _MHGlobalData.default.HeightPersent;
  var topViewH = 75 * _MHGlobalData.default.HeightPersent;
  var topLeftBottomViewH = 45 * _MHGlobalData.default.HeightPersent;
  var persentOfBlank = 0.2;
  var AnimatedShape = Animated.createAnimatedComponent(Shape);
  var AnimatedGroup = Animated.createAnimatedComponent(Group);
  var AnimatedSurface = Animated.createAnimatedComponent(Surface);
  var contenViewH = 0;
  var specialIndex = 80;

  var CurveLineView = function (_Component) {
    (0, _inherits2.default)(CurveLineView, _Component);

    function CurveLineView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, CurveLineView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CurveLineView).call(this, props));
      _this.shapeWidth = ScreenWidth;
      _this.percent = new Animated.Value(0);
      _this._panResponder = {};
      _this._panDisable = false;
      _this._touchAreaWidth = ScreenWidth;
      _this.ox = null;
      _this.oy = null;
      _this.r = 4;
      var dataSource = props.dataSource;
      var tempArr = [];

      for (var i = 0; i < dataSource.length; i++) {
        tempArr.push(dataSource[i][1]);
      }

      var maxNum = Math.max.apply(null, tempArr);
      var minNum = Math.min.apply(null, tempArr);
      minNum = props.standard >= minNum ? minNum : props.standard;
      maxNum = props.standard >= maxNum ? props.standard : maxNum;
      minNum = 0;
      var timeListData = props.timeListData;
      var index = dataSource.length - 1;
      var numberValue = dataSource[index][1];
      numberValue = numberValue < 0 ? '--' : numberValue;
      var timeValue = dataSource[index][0];
      _this.state = {
        dataSource: props.dataSource,
        width: props.width ? props.width : ScreenWidth,
        height: props.height ? props.height : ScreenHeight * 0.5,
        strokeColor: props.strokeColor ? props.strokeColor : '#666666',
        strokeWidth: props.strokeWidth ? props.strokeWidth : 2,
        titleColor: props.titleColor ? props.titleColor : '#666666',
        numberValue: numberValue,
        timeValue: timeValue,
        typeName: props.typeName ? props.typeName : 'PM2.5',
        xMarginToLeft: (ScreenWidth - props.width) * 0.5,
        standard: props.standard ? props.standard : 75,
        maxNum: maxNum,
        minNum: minNum,
        lineXi: index,
        timeListData: timeListData,
        valueList: tempArr,
        hiddenLine: true,
        eveDesc: '--'
      };
      return _this;
    }

    (0, _createClass2.default)(CurveLineView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this._panResponder = PanResponder.create({
          onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
            return true;
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
            return true;
          },
          onPanResponderGrant: function onPanResponderGrant(e, gestureState) {
            var pos = _this2.transIndexToPos(_this2.state.lineXi);

            _this2._panDisable = gestureState.x0 < pos - _this2._touchAreaWidth || gestureState.x0 > pos + _this2._touchAreaWidth;
          },
          onPanResponderMove: this._handlePanResponderMove.bind(this),
          onPanResponderRelease: this._handlePanResponderEnd.bind(this),
          onPanResponderTerminate: this._handlePanResponderEnd.bind(this)
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this3 = this;

        if (nextProps.dataSource !== this.state.dataSource) {
          var _dataSource = nextProps.dataSource;
          var _tempArr = [];

          for (var i = 0; i < _dataSource.length; i++) {
            _tempArr.push(_dataSource[i][1]);
          }

          var maxNum = Math.max.apply(null, _tempArr);
          var minNum = Math.min.apply(null, _tempArr);
          minNum = nextProps.standard >= minNum ? minNum : nextProps.standard;
          maxNum = nextProps.standard >= maxNum ? nextProps.standard : maxNum;
          minNum = 0;
          var timeListData = nextProps.timeListData;
          var index = _dataSource.length - 1;
          _dataSource[index][1] = parseInt(nextProps.valueCallback);
          var numberValue = _dataSource[index][1];
          numberValue = numberValue < 0 ? '--' : numberValue;
          var timeValue = _dataSource[index][0];
          var desc = _dataSource.typeName == "PM2.5" ? _LocalTimeStrings.default.descriptionOfPm25Dis(numberValue) : _LocalTimeStrings.default.descriptionOfCo2Dis(numberValue);
          this.setState({
            dataSource: _dataSource,
            numberValue: numberValue,
            timeValue: timeValue,
            standard: nextProps.standard ? nextProps.standard : 75,
            maxNum: maxNum,
            minNum: minNum,
            lineXi: index,
            timeListData: timeListData,
            valueList: _tempArr,
            hiddenLine: nextProps.hiddenLine,
            eveDesc: desc
          }, function () {
            _this3.calculateCircle();

            _this3.setState({
              lineXi: index
            });
          });

          if (nextProps.dataSource.length > 2 && nextProps.isLoaded == true) {
            this.percent = new Animated.Value(0);
            Animated.parallel([Animated.timing(this.percent, {
              duration: 300,
              toValue: -1
            })]).start();
          }
        }

        if (this.state.lineXi == nextProps.dataSource.length - 1) {
          if (parseInt(this.state.numberValue) !== parseInt(nextProps.valueCallback)) {
            this.setState({
              numberValue: nextProps.valueCallback
            });
          }
        }
      }
    }, {
      key: "_handlePanResponderMove",
      value: function _handlePanResponderMove(e, gestureState) {
        var _this4 = this;

        if (this._panDisable) return;
        var xi = this.transPosToIndex(gestureState.moveX);
        var stateDic = {};
        var dataSource = this.state.dataSource;
        var value = dataSource[xi][1];
        value = value < 0 ? '--' : value;
        var lastIndex = dataSource.length - 1;

        if (parseInt(dataSource[lastIndex][1]) !== parseInt(this.props.valueCallback)) {
          dataSource[lastIndex][1] = this.props.valueCallback;
          stateDic = (0, _objectSpread2.default)({}, stateDic, {
            dataSource: dataSource
          });
        }

        value = xi == lastIndex ? this.props.valueCallback : value;
        var desc = this.state.typeName == "PM2.5" ? _LocalTimeStrings.default.descriptionOfPm25Dis(value) : _LocalTimeStrings.default.descriptionOfCo2Dis(value);
        stateDic = (0, _objectSpread2.default)({}, stateDic, {
          numberValue: value,
          lineXi: xi >= 0 ? xi : 0,
          eveDesc: desc
        });
        this.setState(stateDic, function () {
          _this4.calculateCircle();

          _this4.setState({
            lineXi: xi >= 0 ? xi : 0
          });
        });
      }
    }, {
      key: "_handlePanResponderEnd",
      value: function _handlePanResponderEnd(e, gestureState) {
        this._panDisable = false;
      }
    }, {
      key: "render",
      value: function render() {
        var timeLists = this.state.timeListData;
        var times = [];

        for (var i = 0; i < timeLists.length; i++) {
          times.push(_react.default.createElement(Text, {
            style: [styles.timeListText, _MHGlobalData.default.baseFontStyle],
            key: i
          }, timeLists[i]));
        }

        contenViewH = this.state.height - timeViewH - topViewH - 3 * _MHGlobalData.default.HeightPersent;
        var dataSource = this.state.valueList;
        var paths = [];
        var maxIndex = dataSource.length;

        for (var j = 0; j < maxIndex; j++) {
          paths.push(_react.default.createElement(AnimatedShape, {
            d: this.getPath(j, dataSource),
            y: contenViewH,
            stroke: this.state.strokeColor,
            scaleY: this.percent,
            fill: "white",
            strokeWidth: this.state.strokeWidth,
            key: j
          }));
        }

        return _react.default.createElement(View, (0, _extends2.default)({}, this._panResponder.panHandlers, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: this.state.height,
            backgroundColor: 'transparent',
            marginLeft: this.state.xMarginToLeft
          }
        }), _react.default.createElement(View, {
          style: {
            width: this.state.width,
            alignItems: 'flex-end',
            flexDirection: 'row',
            justifyContent: 'space-between'
          }
        }, _react.default.createElement(View, {
          style: styles.leftViewStyle
        }, _react.default.createElement(View, {
          style: styles.leftTypeViewStyle
        }, _react.default.createElement(Text, {
          style: [styles.titleText, _MHGlobalData.default.baseFontStyle]
        }, this.state.typeName == "CO2" ? "CO" : this.state.typeName), _react.default.createElement(Text, {
          style: {
            color: _ColorConstant.default.ColorOf585858,
            fontSize: 10,
            marginTop: 2
          }
        }, this.state.typeName == "CO2" ? 2 : null), _react.default.createElement(Text, {
          style: styles.numberSperateLine
        }), _react.default.createElement(Text, {
          style: [styles.titleDescText, _MHGlobalData.default.baseFontStyle]
        }, this.state.eveDesc)), _react.default.createElement(Text, {
          style: this.state.typeName == 'PM2.5' ? this.state.numberValue == "--" ? styles.numberTextPM25Empty : styles.numberTextPM25 : this.state.numberValue == "--" ? styles.numberTextCO2Empty : styles.numberTextCO2
        }, this.state.numberValue)), _react.default.createElement(View, {
          style: styles.rightViewStyle
        }, _react.default.createElement(Text, {
          style: [styles.timeText, _MHGlobalData.default.baseFontStyle]
        }, this.state.hiddenLine ? '--' : this._getTimeString(this.state.dataSource[this.state.lineXi][0])))), _react.default.createElement(View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: contenViewH,
            backgroundColor: 'transparent'
          }
        }, _react.default.createElement(Surface, {
          width: this.state.width,
          height: contenViewH
        }, _react.default.createElement(Group, {
          x: 0,
          y: 0
        }, _react.default.createElement(Shape, {
          d: this.getStandardPaths(),
          stroke: "#d9d9d9",
          strokeWidth: 0.5,
          strokeDash: [1.3, 0.7],
          opacity: this.state.hiddenLine ? 0 : 1
        }))), _react.default.createElement(Animated.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            overflow: 'hidden',
            top: -contenViewH,
            backgroundColor: 'transparent'
          }
        }, _react.default.createElement(Surface, {
          width: (0, _MHGlobalData.getWindowWidth)(),
          height: contenViewH
        }, paths, _react.default.createElement(AnimatedShape, {
          d: this.getCircle(),
          y: contenViewH,
          stroke: "#ffffff",
          fill: this.state.strokeColor,
          scaleY: this.percent,
          strokeWidth: this.state.strokeWidth,
          opacity: this.state.hiddenLine ? 0 : 1
        }), _react.default.createElement(AnimatedShape, {
          d: this.getLine(),
          y: contenViewH,
          stroke: this.state.strokeColor,
          scaleY: this.percent,
          strokeWidth: "1",
          opacity: this.state.hiddenLine ? 0 : 1
        })))), _react.default.createElement(View, {
          style: {
            width: this.state.width,
            height: 0.5,
            alignSelf: 'stretch',
            backgroundColor: '#d9d9d9'
          }
        }), _react.default.createElement(View, {
          style: {
            height: timeViewH,
            width: this.state.width,
            backgroundColor: 'white',
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginBottom: 0
          }
        }, times));
      }
    }, {
      key: "_getTimeString",
      value: function _getTimeString(time) {
        var dataSource = this.state.dataSource;

        if (this.state.lineXi == dataSource.length - 1) {
          time = _LocalTimeStrings.default.getCurrentSecond();
        }

        var date = new Date(time * 1000);

        var Str = _LocalTimeStrings.default.addZero(date.getHours(), 2) + _MHLocalizableString.LocalizedStrings.hourP + _LocalTimeStrings.default.addZero(date.getMinutes(), 2) + _MHLocalizableString.LocalizedStrings.minuteP;

        return Str;
      }
    }, {
      key: "transPosToIndex",
      value: function transPosToIndex(offsetX) {
        var dataSource = this.state.dataSource;
        var moveX = offsetX - this.state.xMarginToLeft;
        var gapX1 = this.state.width / 6.0 / (dataSource.length - specialIndex - 1);
        var xMoreMargin = this.state.width / 6.0 * 5;
        var gapX = xMoreMargin / specialIndex;
        var index = moveX > xMoreMargin ? specialIndex + parseInt((moveX - xMoreMargin) / gapX1) : parseInt(moveX / gapX);
        index = Math.max(0, index);
        index = Math.min(dataSource.length - 1, index);
        return index;
      }
    }, {
      key: "transIndexToPos",
      value: function transIndexToPos(i) {
        var dataSource = this.state.dataSource;
        var gapX = this.state.width / (dataSource.length - 1);
        var gapX1 = this.state.width / 6.0 / (dataSource.length - specialIndex - 1);
        var xMoreMargin = this.state.width / 6.0 * 5;
        var posX = i > specialIndex ? xMoreMargin + (i - specialIndex) * gapX1 : i * gapX + this.state.xMarginToLeft;
        return posX;
      }
    }, {
      key: "calculateCircle",
      value: function calculateCircle() {
        var originalViewH = contenViewH;
        var maxNum = this.state.maxNum;
        var minNum = this.state.minNum;
        var xi = this.state.lineXi;
        var dataArr = this.state.dataSource;
        var region = (maxNum - minNum) / 0.6;
        var addNum = persentOfBlank * region;
        var gapX1 = this.state.width / 6.0 / (dataArr.length - specialIndex - 1);
        var xMoreMargin = this.state.width / 6.0 * 5;
        var marginX = xMoreMargin / specialIndex;
        this.ox = xi >= specialIndex ? xMoreMargin + (xi - specialIndex) * gapX1 : xi * marginX;

        if (xi == dataArr.length - 1) {
          this.ox -= 3;
        }

        if (xi == 0) {
          this.ox += 3;
        }

        var y = Math.max(parseFloat(dataArr[xi][1]), 0);
        this.oy = (y + addNum) / region * originalViewH;
      }
    }, {
      key: "console",
      value: function (_console) {
        function console(_x) {
          return _console.apply(this, arguments);
        }

        console.toString = function () {
          return _console.toString();
        };

        return console;
      }(function (msg) {
        console.log(msg);
      })
    }, {
      key: "_setProps",
      value: function _setProps(props) {
        this.state.dataSource = props.dataSource;
        this.state.width = props.width ? props.width : ScreenWidth;
        this.state.height = props.height ? props.height : ScreenHeight * 0.5;
        this.state.strokeColor = props.strokeColor ? props.strokeColor : '#666666';
        this.state.strokeWidth = props.strokeWidth ? props.strokeWidth : 2;
        this.state.titleColor = props.titleColor ? props.titleColor : '#666666';
        this.state.typeName = props.typeName ? props.typeName : 'PM2.5';
        this.state.xMarginToLeft = (ScreenWidth - this.state.width) * 0.5;
        this.state.standard = props.standard ? props.standard : 75;

        this._getMaxNumAndMinNum();
      }
    }, {
      key: "_getMaxNumAndMinNum",
      value: function _getMaxNumAndMinNum() {
        var dataSource = this.state.dataSource;
        var tempArr = [];

        for (var i = 0; i < dataSource.length; i++) {
          tempArr.push(dataSource[i][1]);
        }

        var maxNum = Math.max.apply(null, tempArr);
        var minNum = Math.min.apply(null, tempArr);
        minNum = this.state.standard >= minNum ? minNum : this.state.standard;
        this.state.maxNum = maxNum;
        this.state.minNum = minNum;
      }
    }, {
      key: "getCircle",
      value: function getCircle() {
        var ox = this.ox;
        var oy = this.oy;
        var r = this.r;
        return new Path().moveTo(ox, oy - r).arc(0, r * 2, r).arc(0, r * -2, r);
      }
    }, {
      key: "getLine",
      value: function getLine() {
        var ox = this.ox;
        var oy = this.oy;
        return new Path().moveTo(ox, oy).lineTo(ox, 0);
      }
    }, {
      key: "getPath",
      value: function getPath(index, dataSource) {
        var orginalViewH = contenViewH;
        var maxNum = this.state.maxNum;
        var minNum = this.state.minNum;
        var region = (maxNum - minNum) / 0.6;
        var addNum = persentOfBlank * region;
        var path = new Path();
        var dataArr = dataSource;
        var marginX = this.state.width / (dataArr.length - 1);
        var xMoreMargin = this.state.width / 6.0 * 5;

        if (dataArr.length > specialIndex) {
          if (dataArr[index] >= 0 && dataArr[index + 1] >= 0) {
            if (index >= specialIndex) {
              marginX = this.state.width / 6.0 / (dataArr.length - specialIndex - 1);
              var y1 = dataArr[index] + addNum;
              var y2 = dataArr[index + 1] + addNum;
              var x = marginX * (index - specialIndex) + xMoreMargin;
              x = index == 0 ? x + 2 : x;
              path.moveTo(x, y1 / region * orginalViewH);
              var contrl1X = marginX * (index - specialIndex) + marginX / 2 + xMoreMargin;
              var contrl1Y = dataArr[index] + addNum;
              var contrl2X = contrl1X;
              var contrl2Y = dataArr[index + 1] + addNum;
              contrl1X = index == 0 ? contrl1X + 2 : contrl1X;
              contrl2X = index == 0 ? contrl2X + 2 : contrl2X;
              path.curveTo(contrl1X, contrl1Y / region * orginalViewH, contrl2X, contrl2Y / region * orginalViewH, marginX * (index + 1 - specialIndex) + xMoreMargin, y2 / region * orginalViewH);
            } else {
              marginX = xMoreMargin / specialIndex;

              var _y = dataArr[index] + addNum;

              var _y2 = dataArr[index + 1] + addNum;

              var _x2 = marginX * index;

              _x2 = index == 0 ? _x2 + 2 : _x2;
              path.moveTo(_x2, _y / region * orginalViewH);

              var _contrl1X = (marginX * index + marginX * (index + 1)) / 2;

              var _contrl1Y = dataArr[index] + addNum;

              var _contrl2X = _contrl1X;

              var _contrl2Y = dataArr[index + 1] + addNum;

              _contrl1X = index == 0 ? _contrl1X + 2 : _contrl1X;
              _contrl2X = index == 0 ? _contrl2X + 2 : _contrl2X;
              path.curveTo(_contrl1X, _contrl1Y / region * orginalViewH, _contrl2X, _contrl2Y / region * orginalViewH, marginX * (index + 1), _y2 / region * orginalViewH);
            }
          } else {
            if (index <= dataArr.length - 2) {
              if (index == 0) {
                if (dataArr[index + 1] < 0 && dataArr[index] >= 0 && dataArr[index + 2] < 0) {
                  var r = 1;
                  marginX = index >= specialIndex ? this.state.width / 6.0 / (dataArr.length - specialIndex - 1) : xMoreMargin / specialIndex;
                  var ox = index >= specialIndex ? marginX * (index - specialIndex) + xMoreMargin : marginX * index;
                  ox = index == 0 ? ox + 2 : ox;
                  var y = dataArr[index] + addNum;
                  var oy = y / region * orginalViewH;
                  path.moveTo(ox, oy - r);
                  path.arc(0, 2, r);
                  path.arc(0, -2, r);
                }
              } else {
                if (dataArr[index + 1] < 0 && dataArr[index] >= 0 && dataArr[index - 1] < 0) {
                  var _r = 1;
                  marginX = index >= specialIndex ? this.state.width / 6.0 / (dataArr.length - specialIndex - 1) : xMoreMargin / specialIndex;

                  var _ox = index >= specialIndex ? marginX * (index - specialIndex) + xMoreMargin : marginX * index;

                  _ox = index == 0 ? _ox + 2 : _ox;

                  var _y3 = dataArr[index] + addNum;

                  var _oy = _y3 / region * orginalViewH;

                  path.moveTo(_ox, _oy - _r);
                  path.arc(0, 2, _r);
                  path.arc(0, -2, _r);
                }
              }
            } else {
              if (dataArr[index] >= 0 && dataArr[index - 1] < 0) {
                var _r2 = 1;
                marginX = index >= specialIndex ? this.state.width / 6.0 / (dataArr.length - specialIndex - 1) : xMoreMargin / specialIndex;

                var _ox2 = index >= specialIndex ? marginX * (index - specialIndex) + xMoreMargin : marginX * index;

                var _y4 = dataArr[index] + addNum;

                var _oy2 = _y4 / region * orginalViewH;

                path.moveTo(_ox2, _oy2 - _r2);
                path.arc(0, 2, _r2);
                path.arc(0, -2, _r2);
              }
            }
          }
        } else {
          if (dataArr[index] >= 0 && dataArr[index + 1] >= 0) {
            var _y5 = dataArr[index] + addNum;

            var _y6 = dataArr[index + 1] + addNum;

            path.moveTo(marginX * index, _y5 / region * orginalViewH);

            var _contrl1X2 = (marginX * index + marginX * (index + 1)) / 2;

            var _contrl1Y2 = dataArr[index] + addNum;

            var _contrl2X2 = _contrl1X2;

            var _contrl2Y2 = dataArr[index + 1] + addNum;

            path.curveTo(_contrl1X2, _contrl1Y2 / region * orginalViewH, _contrl2X2, _contrl2Y2 / region * orginalViewH, marginX * (index + 1), _y6 / region * orginalViewH);
          } else {
            if (index <= dataArr.length - 2) {
              if (index == 0) {
                if (dataArr[index + 1] < 0 && dataArr[index] >= 0 && dataArr[index + 2] < 0) {
                  var _r3 = 1;
                  marginX = index >= specialIndex ? this.state.width / 6.0 / (dataArr.length - specialIndex - 1) : xMoreMargin / specialIndex;

                  var _ox3 = index >= specialIndex ? marginX * (index - specialIndex) + xMoreMargin : marginX * index;

                  _ox3 = index == 0 ? _ox3 + 2 : _ox3;

                  var _y7 = dataArr[index] + addNum;

                  var _oy3 = _y7 / region * orginalViewH;

                  path.moveTo(_ox3, _oy3 - _r3);
                  path.arc(0, 2, _r3);
                  path.arc(0, -2, _r3);
                }
              } else {
                if (dataArr[index + 1] < 0 && dataArr[index] >= 0 && dataArr[index - 1] < 0) {
                  var _r4 = 1;
                  marginX = index >= specialIndex ? this.state.width / 6.0 / (dataArr.length - specialIndex - 1) : xMoreMargin / specialIndex;

                  var _ox4 = index >= specialIndex ? marginX * (index - specialIndex) + xMoreMargin : marginX * index;

                  _ox4 = index == 0 ? _ox4 + 2 : _ox4;

                  var _y8 = dataArr[index] + addNum;

                  var _oy4 = _y8 / region * orginalViewH;

                  path.moveTo(_ox4, _oy4 - _r4);
                  path.arc(0, 2, _r4);
                  path.arc(0, -2, _r4);
                }
              }
            } else {
              if (dataArr[index] > 0 && dataArr[index - 1] < 0) {
                var _r5 = 1;
                marginX = index >= specialIndex ? this.state.width / 6.0 / (dataArr.length - specialIndex - 1) : xMoreMargin / specialIndex;

                var _ox5 = index >= specialIndex ? marginX * (index - specialIndex) + xMoreMargin : marginX * index;

                var _y9 = dataArr[index] + addNum;

                var _oy5 = _y9 / region * orginalViewH;

                path.moveTo(_ox5, _oy5 - _r5);
                path.arc(0, 2, _r5);
                path.arc(0, -2, _r5);
              }
            }
          }
        }

        return path;
      }
    }, {
      key: "getPaths",
      value: function getPaths() {
        var orginalViewH = contenViewH;
        var maxNum = this.state.maxNum;
        var minNum = this.state.minNum;
        var region = (maxNum - minNum) / 0.6;
        var addNum = persentOfBlank * region;
        var path = new Path();
        var dataArr = this.state.dataSource;
        var marginX = this.state.width / (dataArr.length - 1);

        for (var i = 0; i < dataArr.length; i++) {
          var y = dataArr[i][1] + addNum;

          if (i == 0) {
            path.moveTo(marginX * i, orginalViewH - y / region * orginalViewH);
          } else {
            var contrl1X = (marginX * i + marginX * (i - 1)) / 2;
            var contrl1Y = dataArr[i - 1][1] + addNum;
            var contrl2X = contrl1X;
            var contrl2Y = dataArr[i][1] + addNum;
            path.curveTo(contrl1X, orginalViewH - contrl1Y / region * orginalViewH, contrl2X, orginalViewH - contrl2Y / region * orginalViewH, marginX * i, orginalViewH - y / region * orginalViewH);
          }
        }

        return path;
      }
    }, {
      key: "getStandardPaths",
      value: function getStandardPaths() {
        var viewH = contenViewH;
        var blankViewH = viewH * persentOfBlank;
        var maxNum = this.state.maxNum;
        var minNum = this.state.minNum;
        var standard = this.state.standard;
        var region = (maxNum - minNum) / 0.6;
        var addNum = persentOfBlank * region;
        var y = viewH - (standard + addNum) / region * viewH;
        var path = new Path();
        path.moveTo(0, y);
        path.lineTo(this.state.width, y);
        return path;
      }
    }]);
    return CurveLineView;
  }(_react.Component);

  exports.default = CurveLineView;
  var styles = StyleSheet.create({
    separatorStyle: {
      height: 0.5,
      alignSelf: 'stretch',
      backgroundColor: '#d9d9d9',
      width: (0, _MHGlobalData.getWindowWidth)()
    },
    leftViewStyle: {
      flexDirection: 'column',
      backgroundColor: 'transparent',
      alignItems: 'flex-start',
      justifyContent: 'center',
      marginTop: 0,
      marginBottom: 0,
      marginLeft: 0
    },
    leftTypeViewStyle: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'white'
    },
    rightViewStyle: {
      backgroundColor: 'transparent',
      justifyContent: 'center',
      alignItems: 'flex-end',
      width: 100,
      marginRight: 0
    },
    titleText: {
      color: _ColorConstant.default.ColorOf585858,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewTit
    },
    numberTextPM25: {
      marginTop: 10 * _MHGlobalData.default.HeightPersent,
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOfMainBlue,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewNumber,
      height: topLeftBottomViewH,
      marginLeft: -1.5
    },
    numberTextPM25Empty: {
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOfMainBlue,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewNumber,
      height: topLeftBottomViewH,
      marginBottom: 10 * _MHGlobalData.default.HeightPersent,
      marginLeft: -1.5
    },
    numberTextCO2: {
      marginTop: 10 * _MHGlobalData.default.HeightPersent,
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOf00C9DC,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewNumber,
      height: topLeftBottomViewH,
      marginLeft: -1.5
    },
    numberSperateLine: {
      backgroundColor: _ColorConstant.default.ColorOfB2B2B2,
      marginLeft: 7,
      width: 0.5,
      alignItems: 'center',
      justifyContent: 'center',
      height: 10 * _MHGlobalData.default.HeightPersent
    },
    titleDescText: {
      color: _ColorConstant.default.ColorOf585858,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewTitle,
      marginLeft: 7
    },
    numberTextCO2Empty: {
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      color: _ColorConstant.default.ColorOf00C9DC,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewNumber,
      height: topLeftBottomViewH,
      marginBottom: 10 * _MHGlobalData.default.HeightPersent,
      marginLeft: -1.5
    },
    timeText: {
      color: _ColorConstant.default.ColorOf585858,
      textAlign: 'center',
      marginBottom: _miot.Host.isAndroid ? 0 : _MHGlobalData.default.isIphoneX ? 13.5 * _MHGlobalData.default.HeightPersent : 9 * _MHGlobalData.default.HeightPersent,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewTime
    },
    timeListText: {
      marginTop: 3,
      color: _ColorConstant.default.ColorOfB8B8B8,
      fontSize: _FontSizeConstant.default.FontOfHistoryViewTimeList
    }
  });
},10352,[14308,14305,14344,14314,14320,14323,14371,14377,14386,10297,10046,10073,10034,10031,10010,10040,10074,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _OtherConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[12]);

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _CustomCircleView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[15]);

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform,
      TouchableHighlight = ReactNative.TouchableHighlight;
  var itemW = 50;
  var itemH = 50;
  var margin = ((0, _MHGlobalData.getWindowWidth)() - 150) / 6.4;
  var marginToLeft = 2.2 * margin;

  var HistoryTimeCheckView = function (_Component) {
    (0, _inherits2.default)(HistoryTimeCheckView, _Component);

    function HistoryTimeCheckView(props) {
      (0, _classCallCheck2.default)(this, HistoryTimeCheckView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HistoryTimeCheckView).call(this, props));
    }

    (0, _createClass2.default)(HistoryTimeCheckView, [{
      key: "render",
      value: function render() {
        var dataSourse = this.props.dataSourse;
        return _react.default.createElement(View, {
          style: this.props.style
        }, _react.default.createElement(View, {
          style: styles.row
        }, _react.default.createElement(View, {
          style: {
            marginLeft: marginToLeft,
            width: itemW
          }
        }, _creatControlItem(dataSourse.list[0])), _react.default.createElement(View, {
          style: {
            marginLeft: margin,
            width: itemW
          }
        }, _creatControlItem(dataSourse.list[1])), _react.default.createElement(View, {
          style: {
            marginLeft: margin,
            width: itemW,
            marginRight: marginToLeft
          }
        }, _creatControlItem(dataSourse.list[2]))));
      }
    }]);
    return HistoryTimeCheckView;
  }(_react.Component);

  exports.default = HistoryTimeCheckView;

  var _creatControlItem = function _creatControlItem(compenet) {
    if (compenet.selected == true) {
      return [_react.default.createElement(View, {
        key: compenet.title
      }, _react.default.createElement(_CustomCircleView.default, {
        style: {
          width: itemW,
          height: itemH,
          borderWidth: 0.7,
          borderColor: _ColorConstant.default.ColorOfMainBlue
        },
        key: compenet.title
      }, _react.default.createElement(TouchableHighlight, {
        style: styles.itemView,
        activeOpacity: 1,
        underlayColor: _MHGlobalData.default.ItemSelectedColor,
        onPress: function onPress() {
          return compenet.func();
        },
        key: compenet.title
      }, _react.default.createElement(Text, {
        style: [{
          backgroundColor: 'transparent',
          textAlign: 'center',
          color: _ColorConstant.default.ColorOfMainBlue,
          fontSize: _FontSizeConstant.default.FontOfHistoryBottomViewTime
        }, _MHGlobalData.default.baseFontStyle],
        key: compenet.title
      }, compenet.title))))];
    } else {
      return [_react.default.createElement(_CustomCircleView.default, {
        style: {
          width: itemW,
          height: itemH,
          borderWidth: StyleSheet.hairlineWidth,
          borderColor: _ColorConstant.default.ColorOfADADAD,
          borderRadius: 25
        },
        key: compenet.title
      }, _react.default.createElement(TouchableHighlight, {
        style: styles.itemView,
        activeOpacity: 1,
        underlayColor: _MHGlobalData.default.ItemSelectedColor,
        onPress: function onPress() {
          return compenet.func();
        },
        key: compenet.title
      }, _react.default.createElement(Text, {
        style: [{
          backgroundColor: 'transparent',
          textAlign: 'center',
          color: _ColorConstant.default.ColorOf999999,
          fontSize: _FontSizeConstant.default.FontOfHistoryBottomViewTime
        }, _MHGlobalData.default.baseFontStyle]
      }, compenet.title)))];
    }
  };

  var styles = StyleSheet.create({
    image: {
      width: itemW,
      height: itemH
    },
    itemView: {
      width: itemW - StyleSheet.hairlineWidth * 4,
      height: itemW - StyleSheet.hairlineWidth * 4,
      borderRadius: (itemW - StyleSheet.hairlineWidth * 4) * 0.5,
      justifyContent: 'center',
      alignItems: 'center'
    },
    row: {
      flex: 1,
      flexDirection: 'row',
      alignItems: "center",
      justifyContent: 'center'
    }
  });
},10355,[14308,14305,14320,14323,14371,14377,14386,10297,10046,10073,10034,10031,10010,10040,10358,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var ReactNative = _$$_REQUIRE(_dependencyMap[10]);

  var View = ReactNative.View,
      Animated = ReactNative.Animated,
      Text = ReactNative.Text,
      Image = ReactNative.Image,
      StyleSheet = ReactNative.StyleSheet,
      Dimensions = ReactNative.Dimensions,
      Platform = ReactNative.Platform,
      TouchableHighlight = ReactNative.TouchableHighlight,
      ART = ReactNative.ART;
  var Surface = ART.Surface,
      Shape = ART.Shape,
      Group = ART.Group,
      Path = ART.Path;

  var CustomCircleView = function (_Component) {
    (0, _inherits2.default)(CustomCircleView, _Component);

    function CustomCircleView(props) {
      (0, _classCallCheck2.default)(this, CustomCircleView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomCircleView).call(this, props));
    }

    (0, _createClass2.default)(CustomCircleView, [{
      key: "render",
      value: function render() {
        var _this$props$style = this.props.style,
            height = _this$props$style.height,
            width = _this$props$style.width,
            backgroundColor = _this$props$style.backgroundColor,
            borderWidth = _this$props$style.borderWidth,
            borderColor = _this$props$style.borderColor,
            borderRadius = _this$props$style.borderRadius;
        var contentHeight = height ? height : 44;
        var contentWidth = width ? width : 44;
        var bckColor = backgroundColor ? backgroundColor : '#4a8dfc';
        var circleWidth = borderWidth ? borderWidth : StyleSheet.hairlineWidth;
        var circleColor = borderColor ? borderColor : 'transparent';
        var circleRadius = borderRadius ? borderRadius : width * 0.5;
        return _react.default.createElement(View, {
          style: {
            width: contentWidth,
            height: contentHeight,
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center'
          }
        }, _react.default.createElement(Surface, {
          width: contentWidth,
          height: contentHeight
        }, _react.default.createElement(Shape, {
          d: this.getPath(circleRadius, circleWidth),
          stroke: circleColor,
          strokeWidth: borderWidth
        })), _react.default.createElement(View, {
          style: {
            width: contentWidth - circleWidth * 2,
            height: contentHeight - circleWidth * 2,
            marginTop: -(contentHeight - circleWidth * 2),
            overflow: 'hidden'
          }
        }, this.renderContent()));
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var _this$props = this.props,
            children = _this$props.children,
            contentStyle = _this$props.contentStyle;

        if (children) {
          return _react.default.createElement(View, {
            style: [{
              justifyContent: 'center',
              alignItems: 'center'
            }, contentStyle]
          }, children);
        }
      }
    }, {
      key: "getPath",
      value: function getPath(radius, borderWidth) {
        var borderRadius = radius - borderWidth;
        var path = new Path();
        path.moveTo(borderWidth, radius);
        path.arc(borderRadius * 2, 0, borderRadius, borderRadius, false, false);
        path.arc(-borderRadius * 2, 0, borderRadius, borderRadius, false, false);
        path.close();
        return path;
      }
    }]);
    return CustomCircleView;
  }(_react.Component);

  exports.default = CustomCircleView;
},10358,[14308,14305,14320,14323,14371,14377,14386,10297,10046,10031,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 152,
    "height": 152,
    "scales": [1],
    "hash": "64b51ebccf3b947124f78042cdae0b4c",
    "name": "icon_day_nor",
    "type": "png"
  });
},10361,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 152,
    "height": 152,
    "scales": [1],
    "hash": "4e739f24900bf667d9455d4c4194a5d0",
    "name": "icon_day_sel",
    "type": "png"
  });
},10364,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 152,
    "height": 152,
    "scales": [1],
    "hash": "17b46d3641ad0e7038f54d7b401a4945",
    "name": "icon_week_nor",
    "type": "png"
  });
},10367,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 152,
    "height": 152,
    "scales": [1],
    "hash": "26a471b01cf87842d20516e0389250c1",
    "name": "icon_week_sel",
    "type": "png"
  });
},10370,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 152,
    "height": 152,
    "scales": [1],
    "hash": "6f4682258c959df84e2027729b44d021",
    "name": "icon_month_nor",
    "type": "png"
  });
},10373,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 152,
    "height": 152,
    "scales": [1],
    "hash": "37fad340a76ead6eadd26ab04d34cf50",
    "name": "icon_month_sel",
    "type": "png"
  });
},10376,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _ui = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _ConfirmDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _reactNativeEasyToast = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _SlideModal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _CustomTitleBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _RequestHelp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _RpcManage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var rightNorImage = '';
  var rightPreImage = '';

  var IntermediateFilterPage = function (_React$Component) {
    (0, _inherits2.default)(IntermediateFilterPage, _React$Component);

    function IntermediateFilterPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, IntermediateFilterPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IntermediateFilterPage).call(this, props, context));
      _this.requesetCount = 3;

      _this.openConfirm = function (show) {
        showRestDialog = show;

        _this.setState({});
      };

      _this.optionYes = function () {
        _this.openConfirm(false);

        _miot.Device.getDeviceWifi().callMethod('set_filter_reset', []).then(function (callback) {
          (0, _MHGlobalData.print)('复合滤芯 set_filter_reset success', callback);

          if (callback.code == 0) {
            _this.refs.toast.show(_MHLocalizableString.LocalizedStrings.resetCompoundFilterSuccess);

            _reactNative.DeviceEventEmitter.emit('refreshProps', true);
          } else {
            _this.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestFailTip);
          }
        }).catch(function (err) {
          (0, _MHGlobalData.print)('复合滤芯 set_filter_reset failed', err);
        });
      };

      _this.optionNo = function () {
        _this.openConfirm(false);
      };

      _this.renderDialog = function () {
        return _react.default.createElement(_ConfirmDialog.default, {
          title: (0, _MHLocalizableString.getString)('filterResetTitle'),
          message: (0, _MHLocalizableString.getString)('filterResetTip'),
          contentStyle: {
            marginHorizontal: 40
          },
          messageStyle: {
            lineHeight: 22
          },
          modalHeight: _ui.default.isAndroid ? _MHGlobalData.default.isEnglish ? 212 : 193 : _MHGlobalData.default.isEnglish ? 215 : 191,
          dialogBackgroundColor: "#f7f7f7",
          onTouchOutside: function onTouchOutside() {
            _this.openConfirm(false);
          },
          positiveButton: {
            title: (0, _MHLocalizableString.getString)('cancel'),
            onPress: _this.optionNo,
            titleStyle: {
              color: "#000000b3"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          },
          negativeButton: {
            title: (0, _MHLocalizableString.getString)('reset'),
            onPress: _this.optionYes,
            titleStyle: {
              color: "#ff4200"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          }
        });
      };

      var persent = _this.props.navigation.getParam("compoundFilterPersent");

      var left = _this.props.navigation.getParam("compoundFilterLeftDay");

      var tipstr = _this._returnTipStr(persent, left);

      _this.suggestionStr = tipstr;
      showRestDialog = false;
      _this.state = {
        persent: persent,
        leftDay: left,
        suggestionStr: _this.suggestionStr,
        showRestDialog: false
      };
      rightNorImage = _$$_REQUIRE(_dependencyMap[23]);
      rightPreImage = _$$_REQUIRE(_dependencyMap[24]);
      return _this;
    }

    (0, _createClass2.default)(IntermediateFilterPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._ListenerForFresh();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.callback.remove();
      }
    }, {
      key: "_getPropFromApiWithPropArrs",
      value: function _getPropFromApiWithPropArrs() {
        var _this2 = this;

        this.requesetCount--;
        var propArr = ["filter_rate", "filter_day"];

        _RpcManage.default.getInstance().rpcRequest("get_prop", propArr, function () {
          _RequestHelp.default.getProps(propArr).then(function (res) {
            _this2.requesetCount = 3;
            var propsArray = String(res.result).split(",");
            var filter_intermediate = propsArray[0];
            var filter_inter_day = propsArray[1];

            var tipstr = _this2._returnTipStr(filter_intermediate, filter_inter_day);

            _this2.suggestionStr = tipstr;

            if (parseInt(filter_inter_day) != parseInt(_this2.state.leftDay)) {
              _this2.setState({
                leftDay: filter_inter_day,
                suggestionStr: _this2.suggestionStr
              });
            }

            if (parseInt(filter_intermediate) != parseInt(_this2.state.persent)) {
              _this2.setState({
                persent: filter_intermediate,
                suggestionStr: _this2.suggestionStr
              });
            }
          }).catch(function (err) {
            if (_this2.requesetCount > 0) {
              _this2._getPropFromApiWithPropArrs();
            }
          });
        });
      }
    }, {
      key: "_returnTipStr",
      value: function _returnTipStr(persent, leftDay) {
        var tip = '';
        var day = leftDay;

        if (persent <= 10) {
          tip = (_MHGlobalData.default.isEnglish ? "" : _MHLocalizableString.LocalizedStrings.filterDayLeftTip) + day + (day > 1 ? _MHLocalizableString.LocalizedStrings.days : _MHLocalizableString.LocalizedStrings.day) + (_MHGlobalData.default.isEnglish ? "" : ", ") + (_MHGlobalData.default.isEnglish ? _MHLocalizableString.LocalizedStrings.filterDayLeftTip_dis : "") + _MHLocalizableString.LocalizedStrings.replaceFilterSuggestion;
        } else if (persent <= 20) {
          tip = (_MHGlobalData.default.isEnglish ? "" : _MHLocalizableString.LocalizedStrings.filterDayLeftTip) + day + (day > 1 ? _MHLocalizableString.LocalizedStrings.days : _MHLocalizableString.LocalizedStrings.day) + (_MHGlobalData.default.isEnglish ? "" : ", ") + (_MHGlobalData.default.isEnglish ? _MHLocalizableString.LocalizedStrings.filterDayLeftTip_dis : "") + _MHLocalizableString.LocalizedStrings.buyFilterSuggestion;
        } else {
          tip = _MHLocalizableString.LocalizedStrings.filterDayLeftTip + day + (day > 1 ? _MHLocalizableString.LocalizedStrings.days : _MHLocalizableString.LocalizedStrings.day);
        }

        return tip;
      }
    }, {
      key: "_ListenerForFresh",
      value: function _ListenerForFresh() {
        var _this3 = this;

        this.callback = _reactNative.DeviceEventEmitter.addListener('refreshProps', function (isFresh) {
          _this3._getPropFromApiWithPropArrs();
        });
      }
    }, {
      key: "_touchBuyBtn",
      value: function _touchBuyBtn() {
        this.props.navigation.navigate('FilterPurchase', {
          'buyUrl': _MHLocalizableString.LocalizedStrings.middleFilterBuyUrl,
          'routeTitle': _MHLocalizableString.LocalizedStrings.navigationTitleCompound
        });
      }
    }, {
      key: "_touchResetBtn",
      value: function _touchResetBtn() {
        this.openConfirm(true);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        rightNorImage = _DataUtils.default.toNumber(this.state.persent) < 10 ? _$$_REQUIRE(_dependencyMap[25]) : _$$_REQUIRE(_dependencyMap[23]);
        rightPreImage = _DataUtils.default.toNumber(this.state.persent) < 10 ? _$$_REQUIRE(_dependencyMap[26]) : _$$_REQUIRE(_dependencyMap[24]);
        return _react.default.createElement(_reactNative.View, {
          style: styles.containerAll
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_CustomTitleBar.default, {
          title: (0, _MHLocalizableString.getString)('navigationTitleCompound'),
          style: {
            backgroundColor: '#ffffff'
          },
          source: _$$_REQUIRE(_dependencyMap[27]),
          highlightedSource: _$$_REQUIRE(_dependencyMap[28]),
          onPressLeft: function onPressLeft() {
            _this4.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.detailViewStyle
        }, _react.default.createElement(_reactNative.View, {
          style: styles.leftViewStyle
        }, _react.default.createElement(_reactNative.Text, {
          style: [{
            fontSize: _MHGlobalData.default.isEnglish ? _FontSizeConstant.default.FontOfEnLeftText : _FontSizeConstant.default.FontOfHighFilterLifeLeftTitle,
            color: _DataUtils.default.toNumber(this.state.persent) <= 20 ? _ColorConstant.default.ColorMidFilterInNormalTitle : _ColorConstant.default.ColorMidFilterNormalTitle,
            textAlign: 'center',
            marginBottom: _MHGlobalData.default.isEnglish ? _ui.default.isAndroid ? 5 : 0 : _ui.default.isAndroid ? 4 : 6,
            fontWeight: _MHGlobalData.default.isEnglish ? '400' : 'bold'
          }, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.LocalizedStrings.left), _react.default.createElement(_reactNative.Text, {
          style: _DataUtils.default.toNumber(this.state.persent) <= 20 ? styles.leftNumberInNormalStyle : styles.leftNumberNormalStyle
        }, this.state.persent), _react.default.createElement(_reactNative.Text, {
          style: [_DataUtils.default.toNumber(this.state.persent) <= 20 ? styles.persentInNormalStyle : styles.persentNormalStyle, _MHGlobalData.default.baseFontStyle]
        }, "%")), _react.default.createElement(_reactNative.Text, {
          style: [styles.suggestionTitleStyle, _MHGlobalData.default.baseFontStyle]
        }, this.state.suggestionStr), _react.default.createElement(_reactNative.Image, {
          style: styles.filterImageStyle,
          source: _$$_REQUIRE(_dependencyMap[29])
        }), _react.default.createElement(_reactNative.Text, {
          style: [styles.descriptionTitleStyle, {
            fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight
          }]
        }, _MHLocalizableString.LocalizedStrings.middleFilterDes)), _react.default.createElement(_reactNative.View, {
          style: styles.buyViewStyle
        }, _react.default.createElement(_reactNative.TouchableHighlight, {
          style: styles.buyBtnStyle,
          underlayColor: _MHGlobalData.default.ItemSelectedColor,
          onPress: function onPress() {
            _ui.default.openShopPage("117439");
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.buyTitlStyle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.LocalizedStrings.buyFilter))), _react.default.createElement(_reactNative.View, {
          style: styles.resetViewStyle
        }, _react.default.createElement(_reactNative.TouchableHighlight, {
          style: styles.resetBtnStyle,
          underlayColor: '#3c82f6',
          onPress: function onPress() {
            return;

            _this4._touchResetBtn();
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.resetTitlStyle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.LocalizedStrings.resetFilter))), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            showRestDialog = visible;

            _this4.setState({}, cbk);
          },
          visible: showRestDialog,
          modalHeight: _ui.default.isAndroid ? _MHGlobalData.default.isEnglish ? 212 : 193 : _MHGlobalData.default.isEnglish ? 215 : 191,
          renderCbk: this.renderDialog
        }), _react.default.createElement(_reactNativeEasyToast.default, {
          ref: "toast",
          opacity: 0.8,
          textStyle: {
            fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight,
            color: '#ffffff'
          },
          fadeOutDuration: 1000
        }));
      }
    }]);
    return IntermediateFilterPage;
  }(_react.default.Component);

  exports.default = IntermediateFilterPage;

  IntermediateFilterPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    containerAll: {
      flex: 1,
      backgroundColor: 'white'
    },
    separatorStyle: {
      height: 0.5,
      alignSelf: 'stretch',
      backgroundColor: '#d9d9d9'
    },
    detailViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      marginLeft: 0,
      backgroundColor: 'transparent',
      height: _MHGlobalData.default.isIphoneX ? (0, _MHGlobalData.getWindowHeight)() - 154 * _MHGlobalData.default.HeightPersent - _MHGlobalData.default.naviHeight : (0, _MHGlobalData.getWindowHeight)() - 120 * _MHGlobalData.default.HeightPersent - _MHGlobalData.default.naviHeight,
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      marginBottom: 3.0 * _MHGlobalData.default.HeightPersent,
      marginTop: -6.5 * _MHGlobalData.default.HeightPersent
    },
    leftViewStyle: {
      flexDirection: 'row',
      alignItems: 'flex-end'
    },
    dayLeftTitleNormalStyle: {
      fontSize: _FontSizeConstant.default.FontOfHighFilterLifeLeftTitle,
      color: _ColorConstant.default.ColorMidFilterNormalTitle,
      textAlign: 'center',
      marginBottom: _MHGlobalData.default.isEnglish ? 0 : 8,
      fontWeight: '500'
    },
    dayLeftTitleInNormalStyle: {
      fontSize: _FontSizeConstant.default.FontOfHighFilterLifeLeftTitle,
      color: _ColorConstant.default.ColorMidFilterInNormalTitle,
      textAlign: 'center',
      marginBottom: 8,
      fontWeight: '500'
    },
    leftNumberNormalStyle: {
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      fontSize: _FontSizeConstant.default.FontOfHighFilterLifeLeftNumber,
      color: _ColorConstant.default.ColorMidFilterNormalTitle,
      textAlign: 'center'
    },
    leftNumberInNormalStyle: {
      fontFamily: _FontSizeConstant.default.FontfamilyOfMiKmedium,
      fontSize: _FontSizeConstant.default.FontOfHighFilterLifeLeftNumber,
      color: _ColorConstant.default.ColorMidFilterInNormalTitle,
      textAlign: 'center'
    },
    persentNormalStyle: {
      fontSize: _FontSizeConstant.default.FontOfHighFilterDespTitle,
      color: _ColorConstant.default.ColorMidFilterNormalTitle,
      textAlign: 'center',
      marginBottom: 6
    },
    persentInNormalStyle: {
      fontSize: _FontSizeConstant.default.FontOfHighFilterDespTitle,
      color: _ColorConstant.default.ColorMidFilterInNormalTitle,
      textAlign: 'center',
      marginBottom: 6
    },
    suggestionTitleStyle: {
      marginTop: 1 * _MHGlobalData.default.HeightPersent,
      fontSize: _FontSizeConstant.default.FontOfMidFilterSuggetionTitle,
      color: _ColorConstant.default.ColorMidFilterSuggestionTitle,
      textAlign: 'center'
    },
    filterImageStyle: {
      marginTop: 57 * _MHGlobalData.default.HeightPersent,
      height: 150,
      width: 150
    },
    descriptionTitleStyle: {
      textAlign: 'center',
      marginTop: 23 * _MHGlobalData.default.HeightPersent,
      fontSize: _FontSizeConstant.default.FontOfMidFilterDespTitle,
      color: _ColorConstant.default.ColorMidFilterDespTitle,
      lineHeight: 20
    },
    buyViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: 40 * _MHGlobalData.default.HeightPersent
    },
    buyBtnStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      height: 40 * _MHGlobalData.default.HeightPersent,
      marginLeft: 27,
      marginRight: 27,
      borderColor: _ColorConstant.default.ColorOfBorder,
      borderRadius: 20 * _MHGlobalData.default.HeightPersent,
      borderWidth: _reactNative.StyleSheet.hairlineWidth
    },
    buyTitlStyle: {
      color: _ColorConstant.default.ColorHighFilterBuyTitle,
      fontSize: _FontSizeConstant.default.FontOfHighFilterBuyTitle,
      fontWeight: 'bold'
    },
    resetViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      marginTop: 10 * _MHGlobalData.default.HeightPersent,
      height: 40 * _MHGlobalData.default.HeightPersent,
      opacity: 0
    },
    resetBtnStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      height: 40 * _MHGlobalData.default.HeightPersent,
      backgroundColor: _ColorConstant.default.ColorOfMainBlue,
      marginLeft: 27,
      marginRight: 27,
      borderRadius: 20 * _MHGlobalData.default.HeightPersent
    },
    resetTitlStyle: {
      color: _ColorConstant.default.ColorOfWhite,
      fontSize: _FontSizeConstant.default.FontOfHighFilterResetTitle,
      fontWeight: 'bold'
    }
  });
},10379,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10010,10074,10038,10031,10046,10034,10349,10250,10259,10064,10328,10037,10262,10265,10382,10385,10388,10391,10331,10334,10394]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "b73cc9286426c69391005af549b773cb",
    "name": "icon_way_nor",
    "type": "png"
  });
},10382,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "647c4ff48a453c9fe40fcb68601be0af",
    "name": "icon_way_pre",
    "type": "png"
  });
},10385,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "2979c814aebff5faa51aa72ecf65f1e0",
    "name": "icon_red_nor",
    "type": "png"
  });
},10388,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 80,
    "height": 80,
    "scales": [1],
    "hash": "662eec3758cac10013080c699ec1e8a6",
    "name": "icon_red_pre",
    "type": "png"
  });
},10391,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 1000,
    "height": 1000,
    "scales": [1],
    "hash": "9658712e3705b795851c279d39073391",
    "name": "img_compound_filter",
    "type": "png"
  });
},10394,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var FilterPurchasePage = function (_React$Component) {
    (0, _inherits2.default)(FilterPurchasePage, _React$Component);

    function FilterPurchasePage(props, context) {
      (0, _classCallCheck2.default)(this, FilterPurchasePage);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FilterPurchasePage).call(this, props, context));
    }

    (0, _createClass2.default)(FilterPurchasePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var url = this.props.navigation.getParam("buyUrl");
        var title = this.props.navigation.getParam("routeTitle");
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: title,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[16]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[17]),
          onPressLeft: function onPressLeft() {
            _this.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.separatorStyle
        }), _react.default.createElement(_reactNative.WebView, {
          style: styles.webViewStyle,
          source: {
            uri: url
          },
          overScrollMode: "never",
          scalesPageToFit: _miot.Host.isIOS,
          bounces: false,
          contentInset: {
            top: 0,
            left: 0,
            bottom: _MHGlobalData.default.isIphoneX ? -34 : 0,
            right: 0
          }
        }));
      }
    }]);
    return FilterPurchasePage;
  }(_react.default.Component);

  exports.default = FilterPurchasePage;

  FilterPurchasePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    webViewStyle: {},
    separatorStyle: {
      height: 0.5,
      alignSelf: 'stretch',
      backgroundColor: '#c5c5c5'
    }
  });
},10397,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10331,10334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var FilterIntroducePage = function (_React$Component) {
    (0, _inherits2.default)(FilterIntroducePage, _React$Component);

    function FilterIntroducePage(props, context) {
      (0, _classCallCheck2.default)(this, FilterIntroducePage);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FilterIntroducePage).call(this, props, context));
    }

    (0, _createClass2.default)(FilterIntroducePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var url = this.props.navigation.getParam("linkUrl");
        var title = this.props.navigation.getParam("routeTitle");
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: title,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[16]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[17]),
          onPressLeft: function onPressLeft() {
            _this.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.separatorStyle
        }), _react.default.createElement(_reactNative.WebView, {
          style: styles.webViewStyle,
          source: {
            uri: url
          },
          overScrollMode: "never",
          scalesPageToFit: _miot.Host.isIOS,
          bounces: false,
          contentInset: {
            top: 0,
            left: 0,
            bottom: _MHGlobalData.default.isIphoneX ? -34 : 0,
            right: 0
          }
        }));
      }
    }]);
    return FilterIntroducePage;
  }(_react.default.Component);

  exports.default = FilterIntroducePage;

  FilterIntroducePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    webViewStyle: {
      flex: 1
    },
    separatorStyle: {
      height: 0.5,
      alignSelf: 'stretch',
      backgroundColor: '#c5c5c5'
    }
  });
},10400,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10331,10334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _CustomSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _reactNativeSwipeListView = _$$_REQUIRE(_dependencyMap[18]);

  var _ConfirmDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _reactNativeEasyToast = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[20]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _SlideModal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _RequestHelp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _RpcManage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var ItemViewH = _DataUtils.default.roundSize(66 * _MHGlobalData.default.HeightPersent);

  var addViewH = 63 * _MHGlobalData.default.HeightPersent;
  var timeIndex = 0;
  global.rowMap = {};
  global.rowKey = "";

  var TimeListPage = function (_React$Component) {
    (0, _inherits2.default)(TimeListPage, _React$Component);

    function TimeListPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, TimeListPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TimeListPage).call(this, props, context));

      _this.onRowOpen = function (rowKey, rowMap) {
        global.rowMap = rowMap;
        global.rowKey = rowKey;
      };

      _this.renderDialog = function () {
        return _react.default.createElement(_ConfirmDialog.default, {
          title: (0, _MHLocalizableString.getString)('timeDeleteTip'),
          modalHeight: 137,
          dialogBackgroundColor: "#f7f7f7",
          dialogBorderRadius: 6,
          titleStyle: {
            marginBottom: 31
          },
          onTouchOutside: function onTouchOutside() {
            return _this.openConfirm(false);
          },
          visible: _this.state.showDeleteDialog,
          negativeButton: {
            title: (0, _MHLocalizableString.getString)('cancel'),
            onPress: _this.optionNo,
            titleStyle: {
              color: "#000000b3"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          },
          positiveButton: {
            title: (0, _MHLocalizableString.getString)('delete'),
            onPress: _this.optionYes,
            titleStyle: {
              color: "#4a8dfc"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          }
        });
      };

      _this.openConfirm = function (show) {
        _this.setState({
          showDeleteDialog: show
        });
      };

      _this.deleteArr = [];
      _this.tempDataSource = [];

      _this.optionYes = function () {
        _this.openConfirm(false);

        var api = 'delete_timer';

        var param = _LocalTimeStrings.default.binaryArraryToNumber(_this.deleteArr);

        _RpcManage.default.getInstance().rpcRequest("delete_timer", param, function () {
          _RequestHelp.default.deleteTime(param).then(function (callback) {
            if (callback.code == 0) {
              for (var i = 0; i < _this.deleteArr.length; i++) {
                _this.tempDataSource.splice(i, 1);
              }

              _this._reloadDataSource();

              _this._requestTimeListDataSource();

              _this._reloadDeleteStatus();
            } else {}
          }).catch(function (err) {});
        });
      };

      _this.optionNo = function () {
        _this.openConfirm(false);
      };

      _this._onRefresh = function () {
        _this.setState({
          isRefreshing: true
        });

        _this._reloadDeleteStatus();

        _this._requestTimeListDataSource();

        setTimeout(function () {
          _this.setState({
            isRefreshing: false
          });
        }, 10000);
      };

      _this.state = {
        dataSource: _this._createMenuData(),
        isRefreshing: false,
        hiddenEdit: true,
        isEdit: false,
        showDeleteDialog: false
      };
      return _this;
    }

    (0, _createClass2.default)(TimeListPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.navigation.getParam("timeListArray")) {
          var dataSource = this.props.navigation.getParam("timeListArray");
          this._menuData = dataSource;

          this._reloadDataSource();

          if (dataSource.length <= 0) {
            this._requestTimeListDataSource();
          }

          var hidden = dataSource.length > 0 ? false : true;
          this.setState({
            hiddenEdit: hidden
          });
          timeIndex = dataSource.length;
        } else {
          this._requestTimeListDataSource();
        }

        this._ListenerForEdit();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._callBack();

        this.callback.remove();
      }
    }, {
      key: "_ListenerForEdit",
      value: function _ListenerForEdit() {
        var _this2 = this;

        this.callback = _reactNative.DeviceEventEmitter.addListener('editTimeCallbck', function (edit) {
          _this2._requestTimeListDataSource();

          _this2.setState({
            isEdit: false,
            hiddenEdit: true
          });
        });
      }
    }, {
      key: "_createMenuData",
      value: function _createMenuData() {
        var listMenuData = [];
        this._menuData = listMenuData;
        return [{
          'title': "",
          'data': listMenuData
        }];
      }
    }, {
      key: "_reloadDataSource",
      value: function _reloadDataSource() {
        this.setState({
          dataSource: [{
            'title': "",
            'data': this._menuData
          }]
        });
      }
    }, {
      key: "_callBack",
      value: function _callBack() {
        if (this.props.navigation.state.params.callback) {
          this.props.navigation.state.params.callback(this._menuData);
        }
      }
    }, {
      key: "_pushToAddTimeVC",
      value: function _pushToAddTimeVC(propDic) {
        var _this3 = this;

        if (propDic) {
          this.props.navigation.navigate('AddTime', {
            routeTitle: _MHLocalizableString.LocalizedStrings.navigationTitleTimeSetting,
            itemData: propDic,
            callback: function callback(_callback) {
              _this3._requestTimeListDataSource();
            }
          });
        } else {
          this.props.navigation.navigate('AddTime', {
            routeTitle: _MHLocalizableString.LocalizedStrings.navigationTitleTimeSetting,
            index: timeIndex,
            callback: function callback(_callback2) {
              _this3._requestTimeListDataSource();
            }
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        return _react.default.createElement(_reactNative.View, {
          style: styles.containerAll
        }, _react.default.createElement(_reactNative.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            flex: 1
          }
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: _MHLocalizableString.LocalizedStrings.navigationTitleTime,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[26]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[27]),
          onPressLeft: function onPressLeft() {
            _this4.props.navigation.goBack();
          },
          rightText: this.state.hiddenEdit ? "" : !this.state.isEdit ? _MHLocalizableString.LocalizedStrings.edit : _MHLocalizableString.LocalizedStrings.achieve,
          rightTextStyle: {
            backgroundColor: !this.state.isEdit ? _ColorConstant.default.ColorOff7f7f7 : _ColorConstant.default.ColorTimeSureBtn,
            borderColor: _ColorConstant.default.ColorOfBorder,
            borderWidth: !this.state.isEdit ? _reactNative.StyleSheet.hairlineWidth : 0,
            color: !this.state.isEdit ? _ColorConstant.default.ColorControlTimeEditTitle : _ColorConstant.default.ColorOfWhite,
            fontSize: 12,
            height: 30,
            width: 55,
            marginRight: 21
          },
          onPressRight: function onPressRight() {
            var edit = !_this4.state.isEdit;

            _this4.setState({
              isEdit: edit
            });

            _this4._reloadDeleteStatus();
          },
          onPressColor: !this.state.isEdit ? _ColorConstant.default.ColorOfD2D2D2 : _ColorConstant.default.ColorOf3C82F6
        }), _react.default.createElement(_reactNative.View, {
          style: styles.separatorTotal
        }), _react.default.createElement(_reactNativeSwipeListView.SwipeListView, {
          useSectionList: true,
          sections: this.state.dataSource,
          renderItem: this._renderItem.bind(this),
          ListEmptyComponent: this._renderEmptyItem.bind(this),
          keyExtractor: function keyExtractor(item, index) {
            return item + index;
          },
          renderHiddenItem: function renderHiddenItem(rowData, rowMap) {
            return _react.default.createElement(_reactNative.View, {
              style: styles.rowBack
            }, _react.default.createElement(_reactNative.TouchableOpacity, {
              style: [styles.backRightBtn],
              onPress: function onPress(_) {
                _this4._buttonClickCbk(rowData, rowMap);
              }
            }, _react.default.createElement(_reactNative.Text, {
              style: [{
                color: _ColorConstant.default.ColorOfWhite,
                fontSize: 16
              }, _MHGlobalData.default.baseFontStyle]
            }, _MHLocalizableString.LocalizedStrings.delete)));
          },
          onRowOpen: this.onRowOpen,
          leftOpenValue: 0,
          rightOpenValue: -75,
          disableLeftSwipe: this.state.isEdit,
          disableRightSwipe: true,
          removeClippedSubviews: false,
          onRefresh: this._onRefresh,
          refreshing: this.state.isRefreshing
        }), _react.default.createElement(_reactNative.View, {
          style: this.state.hiddenEdit ? styles.blankViewStyle : styles.blankViewHiddenStyle
        }, _react.default.createElement(_ui.ImageButton, {
          style: this.state.hiddenEdit ? styles.blankImageView : styles.blankImageViewHidden,
          source: _$$_REQUIRE(_dependencyMap[28])
        }), _react.default.createElement(_reactNative.Text, {
          style: [this.state.hiddenEdit ? styles.blankTitle : styles.blankTitleHidden, _MHGlobalData.default.baseFontStyle]
        }, this.state.hiddenEdit ? _MHLocalizableString.LocalizedStrings.timeListEmptyTip : ''))), _react.default.createElement(_reactNative.View, {
          style: {
            width: (0, _MHGlobalData.getWindowWidth)(),
            height: addViewH + _reactNative.StyleSheet.hairlineWidth,
            marginBottom: _MHGlobalData.default.isIphoneX ? 34 : 0,
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.separatorTotal
        }), _react.default.createElement(_reactNative.TouchableHighlight, {
          underlayColor: '#d2d2d2',
          onPress: function onPress() {
            _this4._pushToAddTimeVC(null);

            _this4._reloadDeleteStatus();
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.addTimeStyle
        }, _react.default.createElement(_ui.ImageButton, {
          source: _$$_REQUIRE(_dependencyMap[29]),
          highlightedSource: _$$_REQUIRE(_dependencyMap[30]),
          onPress: function onPress() {
            _this4._reloadDeleteStatus();

            _this4._pushToAddTimeVC(null);
          },
          style: styles.addBtnStyle
        }), _react.default.createElement(_reactNative.Text, {
          style: [styles.addTitleStyle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.LocalizedStrings.timeAddTitle)))), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this4.setState({
              showDeleteDialog: visible
            }, cbk);
          },
          visible: this.state.showDeleteDialog,
          modalHeight: 137,
          renderCbk: this.renderDialog
        }), _react.default.createElement(_reactNativeEasyToast.default, {
          ref: "toast",
          opacity: 0.8,
          textStyle: {
            fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight,
            color: '#ffffff'
          },
          fadeOutDuration: 1000
        }));
      }
    }, {
      key: "_renderEmptyItem",
      value: function _renderEmptyItem(data) {
        return _react.default.createElement(_reactNative.View, null);
      }
    }, {
      key: "_renderItem",
      value: function _renderItem(data) {
        var _this5 = this;

        var rowData = data.item;

        if (this.state.isEdit === false) {
          return _react.default.createElement(_reactNative.View, {
            style: {
              backgroundColor: _ColorConstant.default.ColorOfWhite
            }
          }, _react.default.createElement(_reactNative.View, {
            style: styles.rowContainer
          }, _react.default.createElement(_reactNative.View, {
            style: styles.leftViewStyle
          }, _react.default.createElement(_reactNative.Text, {
            style: [styles.title, _MHGlobalData.default.baseFontStyle]
          }, _LocalTimeStrings.default.returnTimeString(rowData.startTime, rowData.endTime)), _react.default.createElement(_reactNative.Text, {
            style: [styles.detailTitle, _MHGlobalData.default.baseFontStyle]
          }, _LocalTimeStrings.default.returnWeekShow(rowData.week))), _react.default.createElement(_CustomSwitch.default, {
            onTintColor: "#4a8dfc",
            value: rowData.status == 'enable' ? true : false,
            disabled: false,
            onValueChange: function onValueChange(value) {
              var status = rowData.status == "enable" ? 'disable' : 'enable';
              var param = rowData.index + '-' + rowData.hexSum + '-' + rowData.startTime + '-' + rowData.endTime + '-' + status;

              _this5._setTimerWithParam(param, parseInt(rowData.index), status, rowData.status);
            }
          })), _react.default.createElement(_Separator.default, {
            style: parseInt(rowData.index) == this._menuData.length - 1 ? styles.separatorTotal : styles.separator
          }));
        } else {
          return _react.default.createElement(_reactNative.TouchableHighlight, {
            underlayColor: '#efeff0',
            onPress: function onPress() {
              return _this5._pressRow(rowData);
            }
          }, _react.default.createElement(_reactNative.View, {
            style: {
              backgroundColor: _ColorConstant.default.ColorOfWhite
            }
          }, _react.default.createElement(_reactNative.View, {
            style: styles.rowContainer
          }, _react.default.createElement(_reactNative.View, {
            style: styles.leftViewStyle
          }, _react.default.createElement(_reactNative.Text, {
            style: [styles.title, _MHGlobalData.default.baseFontStyle]
          }, _LocalTimeStrings.default.returnTimeString(rowData.startTime, rowData.endTime)), _react.default.createElement(_reactNative.Text, {
            style: [styles.detailTitle, _MHGlobalData.default.baseFontStyle]
          }, _LocalTimeStrings.default.returnWeekShow(rowData.week))), _react.default.createElement(_reactNative.Image, {
            style: styles.subArrow,
            source: _$$_REQUIRE(_dependencyMap[31])
          })), _react.default.createElement(_Separator.default, {
            style: parseInt(rowData.index) == this._menuData.length - 1 ? styles.separatorTotal : styles.separator
          })));
        }
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowData) {
        if (this.state.isEdit) {
          this._pushToAddTimeVC(rowData);
        }
      }
    }, {
      key: "_reloadDeleteStatus",
      value: function _reloadDeleteStatus() {
        if (global.rowKey) {
          if (global.rowMap[global.rowKey]) {
            global.rowMap[global.rowKey].closeRow();
          }
        }
      }
    }, {
      key: "_requestTimeListDataSource",
      value: function _requestTimeListDataSource() {
        var _this6 = this;

        var timeArr = [];

        _RpcManage.default.getInstance().rpcRequest("get_timer", null, function () {
          _RequestHelp.default.getTimeList(null).then(function (callback) {
            if (callback.code == 0) {
              var data = _LocalTimeStrings.default.filterTimeListData(callback.result);

              for (var i = 0; i < data.length; i++) {
                timeArr.push(_LocalTimeStrings.default.initTimeItemData(data[i], i));
              }

              if (timeArr.length > 0) {
                timeIndex = timeArr.length;
                _this6._menuData = timeArr;

                if (_this6.state.hiddenEdit != false) {
                  _this6.setState({
                    hiddenEdit: false
                  });
                }

                _this6._reloadDataSource();
              } else {
                timeIndex = 0;
                _this6._menuData = [];

                if (_this6.state.hiddenEdit != true) {
                  _this6.setState({
                    hiddenEdit: true
                  });
                }

                _this6._reloadDataSource();
              }
            }

            _this6.setState({
              isRefreshing: false
            });
          }).catch(function (err) {
            _this6.setState({
              isRefreshing: false
            });
          });
        });
      }
    }, {
      key: "_setTimerWithParam",
      value: function _setTimerWithParam(param, rowID, status, originStatus) {
        var _this7 = this;

        var dataSource = this._menuData;
        dataSource[rowID].status = status;

        this._reloadDataSource();

        var api = 'set_timer';

        _RpcManage.default.getInstance().rpcRequest("set_timer", param, function () {
          _RequestHelp.default.setTime(param).then(function (callback) {
            if (callback.code == 0) {} else {
              dataSource[rowID].status = originStatus;

              _this7._reloadDataSource();

              _this7.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestFailTip);
            }
          }).catch(function (err) {
            dataSource[rowID].status = originStatus;

            _this7._reloadDataSource();
          });
        });
      }
    }, {
      key: "_buttonClickCbk",
      value: function _buttonClickCbk(rowData, rowMap) {
        this.deleteArr = [];
        this.deleteArr.push(rowData.index);
        this.tempDataSource = this._menuData;
        this.openConfirm(true);
      }
    }]);
    return TimeListPage;
  }(_react.default.Component);

  exports.default = TimeListPage;

  TimeListPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    containerAll: {
      flex: 1,
      flexDirection: 'column',
      backgroundColor: '#f7f7f7',
      justifyContent: 'space-between'
    },
    containerBlank: {
      flex: 1,
      flexDirection: 'column',
      backgroundColor: 'white',
      marginTop: 64
    },
    listTimeStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      flex: 1,
      backgroundColor: '#f7f7f7'
    },
    list: {
      alignSelf: 'stretch'
    },
    rowContainer: {
      flexDirection: 'row',
      height: ItemViewH,
      marginLeft: 25,
      marginRight: 20,
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    title: {
      color: _ColorConstant.default.ColorControlTimeTitle,
      fontSize: _FontSizeConstant.default.FontOfControlTimeTitle
    },
    detailTitle: {
      marginTop: 5 * _MHGlobalData.default.HeightPersent,
      color: _ColorConstant.default.ColorControlTimeDetailTitle,
      fontSize: _FontSizeConstant.default.FontOfControlTimeDetailTitle
    },
    leftViewStyle: {
      alignItems: 'flex-start',
      justifyContent: 'center',
      flexDirection: 'column'
    },
    addTimeStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: addViewH,
      alignItems: 'center',
      justifyContent: 'center',
      flexDirection: 'column',
      marginBottom: _MHGlobalData.default.isIphoneX ? 34 : 0,
      backgroundColor: _ColorConstant.default.ColorOff7f7f7
    },
    addTimeViewStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      flexDirection: 'column',
      backgroundColor: _ColorConstant.default.ColorOff7f7f7
    },
    addBtnStyle: {
      width: 33 * _MHGlobalData.default.HeightPersent,
      height: 33 * _MHGlobalData.default.HeightPersent,
      backgroundColor: 'transparent'
    },
    addTitleStyle: {
      marginTop: 6 * _MHGlobalData.default.HeightPersent,
      fontSize: _FontSizeConstant.default.FontOfControlTimeAddTitle,
      color: _ColorConstant.default.ColorControlTimeAddTitle,
      backgroundColor: 'transparent'
    },
    separatorBackground: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: '#ffffff'
    },
    separatorTotal: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: _ColorConstant.default.ColorOfSperate
    },
    separator: {
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      height: _reactNative.StyleSheet.hairlineWidth,
      marginLeft: 20
    },
    blankView: {
      width: 0.01,
      height: 0,
      backgroundColor: _ColorConstant.default.ColorOfWhite
    },
    subArrow: {
      width: 6.5,
      height: 13
    },
    scrollViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: (0, _MHGlobalData.getWindowHeight)() - 60 - 66
    },
    blankViewStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: (0, _MHGlobalData.getWindowHeight)() - 60 - 66,
      alignItems: 'center',
      backgroundColor: '#f7f7f7'
    },
    blankImageView: {
      marginTop: 140,
      width: 56,
      height: 59
    },
    blankTitle: {
      marginTop: 15,
      fontSize: _FontSizeConstant.default.FontOfControlTimeEmpetyTitle,
      color: _ColorConstant.default.ColorControlTimeEmpetyTitle,
      fontWeight: '500'
    },
    blankViewHiddenStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: 0.01,
      alignItems: 'center',
      justifyContent: 'center'
    },
    blankImageViewHidden: {
      width: 0.01,
      height: 0.01
    },
    blankTitleHidden: {
      marginTop: 0.01,
      fontSize: _FontSizeConstant.default.FontOfControlTimeEmpetyTitle,
      color: _ColorConstant.default.ColorControlTimeEmpetyTitle
    },
    rowFront: {
      alignItems: 'center',
      backgroundColor: '#CCC',
      borderBottomColor: 'black',
      borderBottomWidth: 1,
      justifyContent: 'center',
      height: 50
    },
    rowBack: {
      alignItems: 'center',
      backgroundColor: '#DDD',
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'space-between',
      paddingLeft: 15
    },
    backRightBtn: {
      alignItems: 'center',
      bottom: 0,
      justifyContent: 'center',
      position: 'absolute',
      top: 0,
      width: 75,
      backgroundColor: 'red',
      right: 0
    }
  });
},10403,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10040,10088,10406,10250,10259,10037,10064,10415,10262,10265,10331,10334,10421,10424,10427,10316]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "SwipeListView", {
    enumerable: true,
    get: function get() {
      return _SwipeListView.default;
    }
  });
  Object.defineProperty(exports, "SwipeRow", {
    enumerable: true,
    get: function get() {
      return _SwipeRow.default;
    }
  });

  var _SwipeListView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _SwipeRow = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));
},10406,[14305,10409,10412]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _SwipeRow = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var SwipeListView = function (_Component) {
    (0, _inherits2.default)(SwipeListView, _Component);

    function SwipeListView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, SwipeListView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SwipeListView).call(this, props));
      _this._rows = {};
      _this.openCellKey = null;
      _this.listViewProps = {};

      if (_reactNative.Platform.OS === 'ios') {
        _this.yScrollOffset = 0;
        _this.layoutHeight = 0;
        _this.listViewProps = {
          onLayout: function onLayout(e) {
            return _this.onLayout(e);
          },
          onContentSizeChange: function onContentSizeChange(w, h) {
            return _this.onContentSizeChange(w, h);
          }
        };
      }

      return _this;
    }

    (0, _createClass2.default)(SwipeListView, [{
      key: "setScrollEnabled",
      value: function setScrollEnabled(enable) {
        if (this.props.scrollEnabled === false) {
          return;
        }

        if (this._listView && this._listView.setNativeProps) {
          this._listView.setNativeProps({
            scrollEnabled: enable
          });
        } else if (this._listView && this._listView.getScrollResponder) {
          var scrollResponder = this._listView.getScrollResponder();

          scrollResponder.setNativeProps && scrollResponder.setNativeProps({
            scrollEnabled: enable
          });
        }

        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);
      }
    }, {
      key: "safeCloseOpenRow",
      value: function safeCloseOpenRow() {
        var rowRef = this._rows[this.openCellKey];

        if (rowRef && rowRef.closeRow) {
          this._rows[this.openCellKey].closeRow();
        }
      }
    }, {
      key: "rowSwipeGestureBegan",
      value: function rowSwipeGestureBegan(key) {
        if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {
          this.safeCloseOpenRow();
        }

        if (this.props.swipeGestureBegan) {
          this.props.swipeGestureBegan(key);
        }
      }
    }, {
      key: "onRowOpen",
      value: function onRowOpen(key, toValue) {
        if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {
          this.safeCloseOpenRow();
        }

        this.openCellKey = key;
        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);
      }
    }, {
      key: "onRowPress",
      value: function onRowPress() {
        if (this.openCellKey) {
          if (this.props.closeOnRowPress) {
            this.safeCloseOpenRow();
            this.openCellKey = null;
          }
        }
      }
    }, {
      key: "onScroll",
      value: function onScroll(e) {
        if (_reactNative.Platform.OS === 'ios') {
          this.yScrollOffset = e.nativeEvent.contentOffset.y;
        }

        if (this.openCellKey) {
          if (this.props.closeOnScroll) {
            this.safeCloseOpenRow();
            this.openCellKey = null;
          }
        }

        this.props.onScroll && this.props.onScroll(e);
      }
    }, {
      key: "onLayout",
      value: function onLayout(e) {
        this.layoutHeight = e.nativeEvent.layout.height;
        this.props.onLayout && this.props.onLayout(e);
      }
    }, {
      key: "onContentSizeChange",
      value: function onContentSizeChange(w, h) {
        var _this$props = this.props,
            useFlatList = _this$props.useFlatList,
            useSectionList = _this$props.useSectionList;
        var height = h - this.layoutHeight;

        if (this.yScrollOffset >= height && height > 0) {
          if (!useFlatList && !useSectionList && this._listView instanceof _reactNative.ListView) {
            this._listView && this._listView.getScrollResponder().scrollToEnd();
          }

          if (this._listView instanceof _reactNative.FlatList) {
            this._listView && this._listView.scrollToEnd();
          }
        }

        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);
      }
    }, {
      key: "setRefs",
      value: function setRefs(ref) {
        this._listView = ref;
        this.props.listViewRef && this.props.listViewRef(ref);
      }
    }, {
      key: "renderCell",
      value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {
        var _this2 = this;

        if (!HiddenComponent) {
          return _react.default.cloneElement(VisibleComponent, (0, _objectSpread2.default)({}, VisibleComponent.props, {
            ref: function ref(row) {
              return _this2._rows[key] = row;
            },
            onRowOpen: function onRowOpen(toValue) {
              return _this2.onRowOpen(key, toValue);
            },
            onRowDidOpen: function onRowDidOpen(toValue) {
              return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(key, _this2._rows, toValue);
            },
            onRowClose: function onRowClose(_) {
              return _this2.props.onRowClose && _this2.props.onRowClose(key, _this2._rows);
            },
            onRowDidClose: function onRowDidClose(_) {
              return _this2.props.onRowDidClose && _this2.props.onRowDidClose(key, _this2._rows);
            },
            onRowPress: function onRowPress(_) {
              return _this2.onRowPress();
            },
            setScrollEnabled: function setScrollEnabled(enable) {
              return _this2.setScrollEnabled(enable);
            },
            swipeGestureBegan: function swipeGestureBegan(_) {
              return _this2.rowSwipeGestureBegan(key);
            }
          }));
        } else {
          return _react.default.createElement(_SwipeRow.default, {
            onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {
              return _this2.props.onSwipeValueChange((0, _objectSpread2.default)({}, data, {
                key: key
              }));
            } : null,
            ref: function ref(row) {
              return _this2._rows[key] = row;
            },
            swipeGestureBegan: function swipeGestureBegan(_) {
              return _this2.rowSwipeGestureBegan(key);
            },
            onRowOpen: function onRowOpen(toValue) {
              return _this2.onRowOpen(key, toValue);
            },
            onRowDidOpen: function onRowDidOpen(toValue) {
              return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(key, _this2._rows, toValue);
            },
            onRowClose: function onRowClose(_) {
              return _this2.props.onRowClose && _this2.props.onRowClose(key, _this2._rows);
            },
            onRowDidClose: function onRowDidClose(_) {
              return _this2.props.onRowDidClose && _this2.props.onRowDidClose(key, _this2._rows);
            },
            onRowPress: function onRowPress(_) {
              return _this2.onRowPress(key);
            },
            shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {
              return _this2.props.shouldItemUpdate(currentItem, newItem);
            } : null,
            setScrollEnabled: function setScrollEnabled(enable) {
              return _this2.setScrollEnabled(enable);
            },
            leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,
            rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,
            closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,
            disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,
            disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,
            stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,
            stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,
            recalculateHiddenLayout: this.props.recalculateHiddenLayout,
            style: this.props.swipeRowStyle,
            preview: shouldPreviewRow,
            previewDuration: this.props.previewDuration,
            previewOpenDelay: this.props.previewOpenDelay,
            previewOpenValue: this.props.previewOpenValue,
            tension: this.props.tension,
            friction: this.props.friction,
            directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,
            swipeToOpenPercent: this.props.swipeToOpenPercent,
            swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,
            swipeToClosePercent: this.props.swipeToClosePercent,
            item: item
          }, HiddenComponent, VisibleComponent);
        }
      }
    }, {
      key: "renderRow",
      value: function renderRow(rowData, secId, rowId, rowMap) {
        var key = "" + secId + rowId;
        var Component = this.props.renderRow(rowData, secId, rowId, rowMap);
        var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);
        var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);
        var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;
        return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);
      }
    }, {
      key: "renderItem",
      value: function renderItem(rowData, rowMap) {
        var Component = this.props.renderItem(rowData, rowMap);
        var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);
        var item = rowData.item,
            index = rowData.index;
        var key = item.key;

        if (!key && this.props.keyExtractor) {
          key = this.props.keyExtractor(item, index);
        }

        var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;
        return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props2 = this.props,
            useFlatList = _this$props2.useFlatList,
            useSectionList = _this$props2.useSectionList,
            renderListView = _this$props2.renderListView,
            props = (0, _objectWithoutProperties2.default)(_this$props2, ["useFlatList", "useSectionList", "renderListView"]);

        if (renderListView) {
          return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useFlatList || useSectionList ? this.renderItem.bind(this) : this.renderRow.bind(this, this._rows));
        }

        if (useFlatList) {
          return _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({}, props, this.listViewProps, {
            ref: function ref(c) {
              return _this3.setRefs(c);
            },
            onScroll: function onScroll(e) {
              return _this3.onScroll(e);
            },
            renderItem: function renderItem(rowData) {
              return _this3.renderItem(rowData, _this3._rows);
            }
          }));
        }

        if (useSectionList) {
          return _react.default.createElement(_reactNative.SectionList, (0, _extends2.default)({}, props, this.listViewProps, {
            ref: function ref(c) {
              return _this3.setRefs(c);
            },
            onScroll: function onScroll(e) {
              return _this3.onScroll(e);
            },
            renderItem: function renderItem(rowData) {
              return _this3.renderItem(rowData, _this3._rows);
            }
          }));
        }

        return _react.default.createElement(_reactNative.ListView, (0, _extends2.default)({}, props, this.listViewProps, {
          ref: function ref(c) {
            return _this3.setRefs(c);
          },
          onScroll: function onScroll(e) {
            return _this3.onScroll(e);
          },
          renderRow: function renderRow(rowData, secId, rowId) {
            return _this3.renderRow(rowData, secId, rowId, _this3._rows);
          }
        }));
      }
    }]);
    return SwipeListView;
  }(_react.Component);

  SwipeListView.propTypes = {
    renderListView: _propTypes.default.func,
    renderItem: _propTypes.default.func,
    renderHiddenItem: _propTypes.default.func,
    renderRow: _propTypes.default.func,
    renderHiddenRow: _propTypes.default.func,
    leftOpenValue: _propTypes.default.number,
    rightOpenValue: _propTypes.default.number,
    stopLeftSwipe: _propTypes.default.number,
    stopRightSwipe: _propTypes.default.number,
    closeOnScroll: _propTypes.default.bool,
    closeOnRowPress: _propTypes.default.bool,
    closeOnRowBeginSwipe: _propTypes.default.bool,
    closeOnRowOpen: _propTypes.default.bool,
    disableLeftSwipe: _propTypes.default.bool,
    disableRightSwipe: _propTypes.default.bool,
    recalculateHiddenLayout: _propTypes.default.bool,
    swipeGestureBegan: _propTypes.default.func,
    onRowOpen: _propTypes.default.func,
    onRowDidOpen: _propTypes.default.func,
    onRowClose: _propTypes.default.func,
    onRowDidClose: _propTypes.default.func,
    onScrollEnabled: _propTypes.default.func,
    swipeRowStyle: _reactNative.ViewPropTypes.style,
    listViewRef: _propTypes.default.func,
    previewRowKey: _propTypes.default.string,
    previewFirstRow: _propTypes.default.bool,
    previewRowIndex: _propTypes.default.number,
    previewDuration: _propTypes.default.number,
    prewiewOpenDelay: _propTypes.default.number,
    previewOpenValue: _propTypes.default.number,
    friction: _propTypes.default.number,
    tension: _propTypes.default.number,
    directionalDistanceChangeThreshold: _propTypes.default.number,
    swipeToOpenPercent: _propTypes.default.number,
    swipeToOpenVelocityContribution: _propTypes.default.number,
    swipeToClosePercent: _propTypes.default.number,
    shouldItemUpdate: _propTypes.default.func,
    onSwipeValueChange: _propTypes.default.func
  };
  SwipeListView.defaultProps = {
    leftOpenValue: 0,
    rightOpenValue: 0,
    closeOnRowBeginSwipe: false,
    closeOnScroll: true,
    closeOnRowPress: true,
    closeOnRowOpen: true,
    disableLeftSwipe: false,
    disableRightSwipe: false,
    recalculateHiddenLayout: false,
    previewFirstRow: false,
    directionalDistanceChangeThreshold: 2,
    swipeToOpenPercent: 50,
    swipeToOpenVelocityContribution: 0,
    swipeToClosePercent: 50
  };
  var _default = SwipeListView;
  exports.default = _default;
},10409,[14308,14305,14344,14407,14314,14320,14323,14371,14377,14386,10297,10318,10033,10412]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var DEFAULT_PREVIEW_OPEN_DELAY = 700;
  var PREVIEW_CLOSE_DELAY = 300;
  var MAX_VELOCITY_CONTRIBUTION = 5;
  var SCROLL_LOCK_MILLISECONDS = 300;

  var SwipeRow = function (_Component) {
    (0, _inherits2.default)(SwipeRow, _Component);

    function SwipeRow(props) {
      var _this;

      (0, _classCallCheck2.default)(this, SwipeRow);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SwipeRow).call(this, props));

      _this.ensureScrollEnabled = function () {
        if (!_this.parentScrollEnabled) {
          _this.parentScrollEnabled = true;
          _this.props.setScrollEnabled && _this.props.setScrollEnabled(true);
        }
      };

      _this.isOpen = false;
      _this.previousTrackedTranslateX = 0;
      _this.previousTrackedDirection = null;
      _this.horizontalSwipeGestureBegan = false;
      _this.swipeInitialX = null;
      _this.parentScrollEnabled = true;
      _this.ranPreview = false;
      _this._ensureScrollEnabledTimer = null;
      _this.state = {
        dimensionsSet: false,
        hiddenHeight: 0,
        hiddenWidth: 0
      };
      _this._translateX = new _reactNative.Animated.Value(0);

      if (_this.props.onSwipeValueChange) {
        _this._translateX.addListener(function (_ref) {
          var value = _ref.value;
          var direction = _this.previousTrackedDirection;

          if (value !== _this.previousTrackedTranslateX) {
            direction = value > _this.previousTrackedTranslateX ? 'right' : 'left';
          }

          _this.props.onSwipeValueChange && _this.props.onSwipeValueChange({
            isOpen: _this.isOpen,
            direction: direction,
            value: value
          });
          _this.previousTrackedTranslateX = value;
          _this.previousTrackedDirection = direction;
        });
      }

      return _this;
    }

    (0, _createClass2.default)(SwipeRow, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {
            return _this2.handleOnMoveShouldSetPanResponder(e, gs);
          },
          onPanResponderMove: function onPanResponderMove(e, gs) {
            return _this2.handlePanResponderMove(e, gs);
          },
          onPanResponderRelease: function onPanResponderRelease(e, gs) {
            return _this2.handlePanResponderEnd(e, gs);
          },
          onPanResponderTerminate: function onPanResponderTerminate(e, gs) {
            return _this2.handlePanResponderEnd(e, gs);
          },
          onShouldBlockNativeResponder: function onShouldBlockNativeResponder(_) {
            return false;
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearTimeout(this._ensureScrollEnabledTimer);

        this._translateX.removeAllListeners();
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (this.state.hiddenHeight !== nextState.hiddenHeight || this.state.hiddenWidth !== nextState.hiddenWidth || !this.props.shouldItemUpdate || this.props.shouldItemUpdate && this.props.shouldItemUpdate(this.props.item, nextProps.item)) {
          return true;
        }

        return false;
      }
    }, {
      key: "getPreviewAnimation",
      value: function getPreviewAnimation(toValue, delay) {
        return _reactNative.Animated.timing(this._translateX, {
          duration: this.props.previewDuration,
          toValue: toValue,
          delay: delay
        });
      }
    }, {
      key: "onContentLayout",
      value: function onContentLayout(e) {
        var _this3 = this;

        this.setState({
          dimensionsSet: !this.props.recalculateHiddenLayout,
          hiddenHeight: e.nativeEvent.layout.height,
          hiddenWidth: e.nativeEvent.layout.width
        });

        if (this.props.preview && !this.ranPreview) {
          this.ranPreview = true;
          var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;
          this.getPreviewAnimation(previewOpenValue, this.props.previewOpenDelay).start(function (_) {
            _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();
          });
        }
      }
    }, {
      key: "onRowPress",
      value: function onRowPress() {
        if (this.props.onRowPress) {
          this.props.onRowPress();
        } else {
          if (this.props.closeOnRowPress) {
            this.closeRow();
          }
        }
      }
    }, {
      key: "handleOnMoveShouldSetPanResponder",
      value: function handleOnMoveShouldSetPanResponder(e, gs) {
        var dx = gs.dx;
        return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;
      }
    }, {
      key: "handlePanResponderMove",
      value: function handlePanResponderMove(e, gestureState) {
        var dx = gestureState.dx,
            dy = gestureState.dy;
        var absDx = Math.abs(dx);
        var absDy = Math.abs(dy);

        if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {
          if (absDy > absDx && !this.horizontalSwipeGestureBegan) {
            return;
          }

          if (this.parentScrollEnabled) {
            this.parentScrollEnabled = false;
            this.props.setScrollEnabled && this.props.setScrollEnabled(false);
          }

          if (this.swipeInitialX === null) {
            this.swipeInitialX = this._translateX._value;
          }

          if (!this.horizontalSwipeGestureBegan) {
            this.horizontalSwipeGestureBegan = true;
            this.props.swipeGestureBegan && this.props.swipeGestureBegan();
          }

          var newDX = this.swipeInitialX + dx;

          if (this.props.disableLeftSwipe && newDX < 0) {
            newDX = 0;
          }

          if (this.props.disableRightSwipe && newDX > 0) {
            newDX = 0;
          }

          if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {
            newDX = this.props.stopLeftSwipe;
          }

          if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {
            newDX = this.props.stopRightSwipe;
          }

          this._translateX.setValue(newDX);
        }
      }
    }, {
      key: "handlePanResponderEnd",
      value: function handlePanResponderEnd(e, gestureState) {
        var swipeToOpenVelocityContribution = this.props.swipeToOpenVelocityContribution;
        var possibleExtraPixels = this.props.rightOpenValue * swipeToOpenVelocityContribution;
        var clampedVelocity = Math.min(gestureState.vx, MAX_VELOCITY_CONTRIBUTION);
        var projectedExtraPixels = possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);
        this._ensureScrollEnabledTimer = setTimeout(this.ensureScrollEnabled, SCROLL_LOCK_MILLISECONDS);
        var toValue = 0;

        if (this._translateX._value >= 0) {
          if (this.swipeInitialX < this._translateX._value) {
            if (this._translateX._value - projectedExtraPixels > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {
              toValue = this.props.leftOpenValue;
            }
          } else {
            if (this._translateX._value - projectedExtraPixels > this.props.leftOpenValue * (1 - this.props.swipeToClosePercent / 100)) {
              toValue = this.props.leftOpenValue;
            }
          }
        } else {
          if (this.swipeInitialX > this._translateX._value) {
            if (this._translateX._value - projectedExtraPixels < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {
              toValue = this.props.rightOpenValue;
            }
          } else {
            if (this._translateX._value - projectedExtraPixels < this.props.rightOpenValue * (1 - this.props.swipeToClosePercent / 100)) {
              toValue = this.props.rightOpenValue;
            }
          }
        }

        this.manuallySwipeRow(toValue);
      }
    }, {
      key: "closeRow",
      value: function closeRow() {
        this.manuallySwipeRow(0);
      }
    }, {
      key: "manuallySwipeRow",
      value: function manuallySwipeRow(toValue) {
        var _this4 = this;

        _reactNative.Animated.spring(this._translateX, {
          toValue: toValue,
          friction: this.props.friction,
          tension: this.props.tension
        }).start(function (_) {
          _this4.ensureScrollEnabled();

          if (toValue === 0) {
            _this4.isOpen = false;
            _this4.props.onRowDidClose && _this4.props.onRowDidClose();
          } else {
            _this4.isOpen = true;
            _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(toValue);
          }
        });

        if (toValue === 0) {
          this.props.onRowClose && this.props.onRowClose();
        } else {
          this.props.onRowOpen && this.props.onRowOpen(toValue);
        }

        this.swipeInitialX = null;
        this.horizontalSwipeGestureBegan = false;
      }
    }, {
      key: "renderVisibleContent",
      value: function renderVisibleContent() {
        var _this5 = this;

        var onPress = this.props.children[1].props.onPress;

        if (onPress) {
          var newOnPress = function newOnPress(_) {
            _this5.onRowPress();

            onPress();
          };

          return _react.default.cloneElement(this.props.children[1], (0, _objectSpread2.default)({}, this.props.children[1].props, {
            onPress: newOnPress
          }));
        }

        return _react.default.createElement(_reactNative.TouchableOpacity, {
          activeOpacity: 1,
          onPress: function onPress(_) {
            return _this5.onRowPress();
          }
        }, this.props.children[1]);
      }
    }, {
      key: "renderRowContent",
      value: function renderRowContent() {
        var _this6 = this;

        if (this.state.dimensionsSet) {
          return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
            manipulationModes: ['translateX']
          }, this._panResponder.panHandlers, {
            style: {
              zIndex: 2,
              transform: [{
                translateX: this._translateX
              }]
            }
          }), this.renderVisibleContent());
        } else {
          return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
            manipulationModes: ['translateX']
          }, this._panResponder.panHandlers, {
            onLayout: function onLayout(e) {
              return _this6.onContentLayout(e);
            },
            style: {
              zIndex: 2,
              transform: [{
                translateX: this._translateX
              }]
            }
          }), this.renderVisibleContent());
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: this.props.style ? this.props.style : styles.container
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.hidden, {
            height: this.state.hiddenHeight,
            width: this.state.hiddenWidth
          }]
        }, this.props.children[0]), this.renderRowContent());
      }
    }]);
    return SwipeRow;
  }(_react.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {},
    hidden: {
      zIndex: 1,
      bottom: 0,
      left: 0,
      overflow: 'hidden',
      position: 'absolute',
      right: 0,
      top: 0
    }
  });

  SwipeRow.propTypes = {
    setScrollEnabled: _propTypes.default.func,
    swipeGestureBegan: _propTypes.default.func,
    onRowOpen: _propTypes.default.func,
    onRowDidOpen: _propTypes.default.func,
    leftOpenValue: _propTypes.default.number,
    rightOpenValue: _propTypes.default.number,
    stopLeftSwipe: _propTypes.default.number,
    stopRightSwipe: _propTypes.default.number,
    friction: _propTypes.default.number,
    tension: _propTypes.default.number,
    closeOnRowPress: _propTypes.default.bool,
    disableLeftSwipe: _propTypes.default.bool,
    disableRightSwipe: _propTypes.default.bool,
    recalculateHiddenLayout: _propTypes.default.bool,
    onRowClose: _propTypes.default.func,
    onRowDidClose: _propTypes.default.func,
    style: _reactNative.ViewPropTypes.style,
    preview: _propTypes.default.bool,
    previewDuration: _propTypes.default.number,
    previewOpenValue: _propTypes.default.number,
    directionalDistanceChangeThreshold: _propTypes.default.number,
    swipeToOpenPercent: _propTypes.default.number,
    swipeToOpenVelocityContribution: _propTypes.default.number,
    swipeToClosePercent: _propTypes.default.number,
    shouldItemUpdate: _propTypes.default.func,
    onSwipeValueChange: _propTypes.default.func
  };
  SwipeRow.defaultProps = {
    leftOpenValue: 0,
    rightOpenValue: 0,
    closeOnRowPress: true,
    disableLeftSwipe: false,
    disableRightSwipe: false,
    recalculateHiddenLayout: false,
    preview: false,
    previewDuration: 300,
    previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,
    directionalDistanceChangeThreshold: 2,
    swipeToOpenPercent: 50,
    swipeToOpenVelocityContribution: 0,
    swipeToClosePercent: 50,
    item: {}
  };
  var _default = SwipeRow;
  exports.default = _default;
},10412,[14308,14305,14344,14314,14320,14323,14371,14377,14386,10297,10318,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _MHStyles = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var TYPE = {
    ROW: 'row',
    COLUMN: 'column'
  };

  var Separator = function (_React$PureComponent) {
    (0, _inherits2.default)(Separator, _React$PureComponent);

    function Separator() {
      (0, _classCallCheck2.default)(this, Separator);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Separator).apply(this, arguments));
    }

    (0, _createClass2.default)(Separator, [{
      key: "render",
      value: function render() {
        var separatorContainer, separatorStyle;

        if (this.props.type === TYPE.ROW) {
          var maxHeight = {};

          if (this.props.style && this.props.style.height) {
            if (this.props.style.height > 1) {
              maxHeight = {
                height: 1
              };
            }
          }

          separatorContainer = {
            backgroundColor: 'transparent',
            height: 1,
            justifyContent: 'center'
          };
          separatorStyle = _reactNative.StyleSheet.flatten([_MHStyles.default.common.separator, this.props.style, maxHeight]);
        } else {
          var maxWidth = {};

          if (this.props.style && this.props.style.width) {
            if (this.props.style.width > 1) {
              maxWidth = {
                width: 1
              };
            }
          }

          separatorContainer = {
            backgroundColor: 'transparent',
            width: 1,
            alignItems: 'center'
          };
          separatorStyle = _reactNative.StyleSheet.flatten([{
            width: _reactNative.StyleSheet.hairlineWidth,
            backgroundColor: _MHStyles.default.common.hairlineColor
          }, this.props.style, maxWidth]);
        }

        return _reactNative.Platform.select({
          android: _react.default.createElement(_reactNative.View, {
            style: separatorContainer
          }, _react.default.createElement(_reactNative.View, {
            style: separatorStyle
          })),
          ios: _react.default.createElement(_reactNative.View, {
            style: separatorStyle
          })
        });
      }
    }]);
    return Separator;
  }(_react.default.PureComponent);

  exports.default = Separator;
  Separator.defaultProps = {
    type: TYPE.ROW
  };
},10415,[14305,14320,14323,14371,14377,14386,10297,10033,10418]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var PADDING = 24;
  var SEPARATOR_HEIGHT = _reactNative.StyleSheet.hairlineWidth;
  var HAIRLINE_COLOR = 'rgba(0,0,0,0.15)';
  var _default = {
    common: {
      padding: PADDING,
      MHGreen: '#32BAC0',
      underlayColor: 'rgba(0,0,0,0.25)',
      hairlineColor: HAIRLINE_COLOR,
      backgroundColor: '#f7f7f7',
      separatorHeight: SEPARATOR_HEIGHT,
      title: {
        fontSize: 15,
        lineHeight: 20,
        color: '#000'
      },
      subtitle: {
        fontSize: 12,
        color: 'rgba(0,0,0,0.6)'
      },
      separator: {
        height: SEPARATOR_HEIGHT,
        backgroundColor: HAIRLINE_COLOR
      }
    }
  };
  exports.default = _default;
},10418,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 166,
    "height": 175,
    "scales": [1],
    "hash": "68640eafcff96f103460bd264cc73903",
    "name": "img_time_first",
    "type": "png"
  });
},10421,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 82,
    "height": 82,
    "scales": [1],
    "hash": "7bc1ce040c1be27ca1409e46e17717ba",
    "name": "icon_add_nor",
    "type": "png"
  });
},10424,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 82,
    "height": 82,
    "scales": [1],
    "hash": "7ed59b5b21f04d8bc872dd10d5ce1250",
    "name": "icon_add_pre",
    "type": "png"
  });
},10427,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _ui = _$$_REQUIRE(_dependencyMap[10]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[11]);

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var _MHGlobalData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _FontSizeConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[15]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _SperateView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _DataUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _ConfirmDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _rmcPicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _SlideModal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _PtcPickView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _reactNativeEasyToast = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[24]));

  var _DatePicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _RequestHelp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var _RpcManage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));

  var itemH = 66 * _MHGlobalData.default.HeightPersent;
  var dayItemH = 51;
  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var timeModelHeight = 207 * _MHGlobalData.default.HeightPersent + 2;
  var timeEnable = 'enable';
  var editTimeItem = false;
  var count = 0;
  var btnSelected = false;
  global.refreshContent = false;
  var startHour = '00';
  var startMinute = '00';
  var endHour = '00';
  var endMinute = '00';
  var startTimeSub = _MHLocalizableString.LocalizedStrings.unSetting;
  var endTimeSub = _MHLocalizableString.LocalizedStrings.unSetting;
  var windowHeight = (0, _MHGlobalData.getWindowHeight)();
  var itemHeight = 64;
  var TIMER_TYPE = {
    POWER_TIMER: 0,
    PTC_TIMER: 1,
    LIGHT_TIMER: 2
  };
  Object.freeze(TIMER_TYPE);

  var AddTimePage = function (_React$Component) {
    (0, _inherits2.default)(AddTimePage, _React$Component);

    function AddTimePage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, AddTimePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AddTimePage).call(this, props, context));

      _this.handleBackPress = function () {
        _this._touchBackBtn();

        return true;
      };

      _this.renderTime = function () {
        return _react.default.createElement(_reactNative.View, {
          style: styles.ptcPickParentStyle
        }, _react.default.createElement(_PtcPickView.default, {
          style: styles.ptcPickStyle,
          dataSourse: _this.timeListData
        }));
      };

      _this.renderDialog = function () {
        return _react.default.createElement(_ConfirmDialog.default, {
          title: (0, _MHLocalizableString.getString)('timeDeleteTip'),
          modalHeight: 137,
          dialogBackgroundColor: "#f7f7f7",
          dialogBorderRadius: 6,
          titleStyle: {
            marginBottom: 31
          },
          onTouchOutside: function onTouchOutside() {
            return _this.openConfirmRemove(false);
          },
          visible: _this.state.showDeleteDialog,
          negativeButton: {
            title: (0, _MHLocalizableString.getString)('cancel'),
            onPress: _this.optionRemoveNo,
            titleStyle: {
              color: "#000000b3"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          },
          positiveButton: {
            title: (0, _MHLocalizableString.getString)('delete'),
            onPress: _this.optionRemoveYes,
            titleStyle: {
              color: "#4a8dfc"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          }
        });
      };

      _this.openConfirmRemove = function (show) {
        _this.setState({
          showDeleteDialog: show
        });
      };

      _this.optionRemoveYes = function () {
        _this.openConfirmRemove(false);

        var itemData = _this.props.navigation.getParam("itemData");

        var index = itemData["index"];

        var param = _LocalTimeStrings.default.binaryArraryToNumber([index]);

        _RpcManage.default.getInstance().rpcRequest("delete_timer", param, function () {
          _RequestHelp.default.deleteTime(param).then(function (callback) {
            if (callback.code == 0) {
              if (editTimeItem) {
                _reactNative.DeviceEventEmitter.emit('editTimeCallbck', false);
              }

              _this.props.navigation.goBack();
            } else {
              _this.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestRemoveTimeFailTip);
            }
          }).catch(function (err) {
            _this.refs.toast.show(_MHLocalizableString.LocalizedStrings.requestRemoveTimeFailTip);
          });
        });
      };

      _this.optionRemoveNo = function () {
        _this.openConfirmRemove(false);
      };

      _this.renderDayMultiDialog = function () {
        return _react.default.createElement(_ConfirmDialog.default, {
          title: _MHLocalizableString.LocalizedStrings.navigationTitleTimeRepeat,
          modalHeight: 484,
          contentStyle: {
            marginHorizontal: 0,
            marginBottom: 0
          },
          dialogBackgroundColor: "#f7f7f7",
          dialogBorderRadius: 6,
          refreshContent: global.refreshContent,
          titleStyle: {
            marginTop: 20,
            marginBottom: 8
          },
          negativeButton: {
            title: _MHLocalizableString.LocalizedStrings.cancel,
            onPress: _this.optionNoDay,
            titleStyle: {
              color: "#000000b3"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          },
          positiveButton: {
            title: _MHLocalizableString.LocalizedStrings.conform,
            onPress: _this.optionYesDay,
            titleStyle: {
              color: "#4a8dfc"
            },
            style: {
              backgroundColor: "#f2f2f2"
            }
          }
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.separatorTotal]
        }), _react.default.createElement(_reactNative.SectionList, {
          sections: _this.state.dayDataSource,
          renderItem: _this._renderDayItem.bind((0, _assertThisInitialized2.default)(_this)),
          renderSectionHeader: function renderSectionHeader() {
            return null;
          },
          keyExtractor: function keyExtractor(item, index) {
            return item + index;
          },
          stickySectionHeadersEnabled: false,
          SectionSeparatorComponent: function SectionSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, null);
          },
          ItemSeparatorComponent: function ItemSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [styles.separatorBackground]
            });
          }
        }));
      };

      _this.renderCancelDialog = function () {
        if (!editTimeItem) {
          return _react.default.createElement(_ConfirmDialog.default, {
            title: (0, _MHLocalizableString.getString)('timeCancleTiptitle'),
            message: (0, _MHLocalizableString.getString)('timeCancleTipDetailTitle'),
            modalHeight: _miot.Host.isAndroid ? 173 : 170,
            contentStyle: {
              marginHorizontal: 40
            },
            messageStyle: {
              lineHeight: 22
            },
            dialogBackgroundColor: "#f7f7f7",
            dialogBorderRadius: 6,
            negativeButton: {
              title: (0, _MHLocalizableString.getString)('cancel'),
              onPress: _this.optionNo,
              titleStyle: {
                color: "#000000b3"
              },
              style: {
                backgroundColor: "#f2f2f2"
              }
            },
            positiveButton: {
              title: (0, _MHLocalizableString.getString)('timeCancleConform'),
              onPress: _this.optionYes,
              titleStyle: {
                color: "#4a8dfc"
              },
              style: {
                backgroundColor: "#f2f2f2"
              }
            }
          });
        } else {
          return _react.default.createElement(_ConfirmDialog.default, {
            title: (0, _MHLocalizableString.getString)('timeCancleTiptitle2'),
            modalHeight: _miot.Host.isAndroid ? _MHGlobalData.default.isEnglish ? 156 : 139 : _MHGlobalData.default.isEnglish ? 153 : 137,
            dialogBackgroundColor: "#f7f7f7",
            dialogBorderRadius: 6,
            titleStyle: {
              marginBottom: 31
            },
            onTouchOutside: function onTouchOutside() {
              return _this.openConfirm(false);
            },
            visible: _this.state.showCancelDialog,
            negativeButton: {
              title: (0, _MHLocalizableString.getString)('cancel'),
              onPress: _this.optionNo,
              titleStyle: {
                color: "#000000b3"
              },
              style: {
                backgroundColor: "#f2f2f2"
              }
            },
            positiveButton: {
              title: (0, _MHLocalizableString.getString)('timeCancleConform'),
              onPress: _this.optionYes,
              titleStyle: {
                color: "#4a8dfc"
              },
              style: {
                backgroundColor: "#f2f2f2"
              }
            }
          });
        }
      };

      _this.openConfirm = function (show) {
        _this.setState({
          showCancelDialog: show
        });
      };

      _this.optionYes = function () {
        _this.openConfirm(false);

        if (editTimeItem) {
          _reactNative.DeviceEventEmitter.emit('editTimeCallbck', false);
        }

        _this.props.navigation.goBack();
      };

      _this.optionNo = function () {
        _this.openConfirm(false);
      };

      _this.openConfirmDay = function (show) {
        _this.setState({
          showDayMultiDialog: show
        });
      };

      _this.optionYesDay = function () {
        _this.openConfirmDay(false);

        var hexNum = _LocalTimeStrings.default.binaryToHexNum(_this.dayMenuData);

        var index = _this.returnIndexOfTimeList(hexNum);

        _this.changeTimeListData(index);

        _this.changeTimeListDataSource(hexNum);
      };

      _this.optionNoDay = function () {
        _this.openConfirmDay(false);
      };

      _this._initTime();

      _this.state = {
        dataSource: _this._createMenuData(),
        animationType: 'slide',
        modalVisible: false,
        transparent: true,
        timeType: '',
        timeTip: '',
        showCancelDialog: false,
        timeModalVisible: false,
        showDayMultiDialog: false,
        dayDataSource: _this.createDayMenuData(),
        showDeleteDialog: false
      };
      var title = props.navigation.getParam('routeTitle');

      if (title === _MHLocalizableString.LocalizedStrings.navigationTitlePtcTimer) {
        _this.timerType = TIMER_TYPE.PTC_TIMER;
      } else if (title === _MHLocalizableString.LocalizedStrings.navigationTitleLightTimer) {
        _this.timerType = TIMER_TYPE.LIGHT_TIMER;
      } else {
        _this.timerType = TIMER_TYPE.POWER_TIMER;
      }

      if (props.navigation.getParam("itemData")) {
        editTimeItem = true;
        var itemData = props.navigation.getParam("itemData");
        var hex = itemData["hexSum"];
        var startTime = itemData["startTime"];
        var endTime = itemData["endTime"];
        var status = itemData["status"];
        var index = itemData["index"];
        startTime = _LocalTimeStrings.default.returnTime(startTime);
        endTime = _LocalTimeStrings.default.returnTime(endTime);
        _this._menuData[0].hexSum = hex;
        _this._menuData[0].subtitle = _LocalTimeStrings.default.returnWeekShow(hex);
        _this._menuData[1].subtitle = startTime;
        _this._menuData[1].hide = _this.timerType === TIMER_TYPE.LIGHT_TIMER || startTime === _MHLocalizableString.LocalizedStrings.unSetting;
        _this._menuData[2].subtitle = endTime;
        _this._menuData[2].hide = _this.timerType === TIMER_TYPE.LIGHT_TIMER || endTime === _MHLocalizableString.LocalizedStrings.unSetting;

        _this._reloadDataSource();

        count = parseInt(index);

        _this._evaluateTime(startTime, endTime);
      } else {
        editTimeItem = false;
        count = 0;

        if (props.navigation.getParam("index")) {
          count = parseInt(props.navigation.getParam("index"));
        }

        timeEnable = 'enable';
        startTimeSub = _MHLocalizableString.LocalizedStrings.unSetting;
        endTimeSub = _MHLocalizableString.LocalizedStrings.unSetting;
      }

      return _this;
    }

    (0, _createClass2.default)(AddTimePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.createTimeListData();
        this.initTimeListData();

        _reactNative.BackHandler.addEventListener('hardwareBackPress', this.handleBackPress);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._callBack();

        _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.handleBackPress);
      }
    }, {
      key: "initTimeListData",
      value: function initTimeListData() {
        var hexNum = this._menuData[0].hexSum;
        var index = this.returnIndexOfTimeList(hexNum);
        this.changeTimeListData(index);
        this.changeTimeListDataSource(hexNum);
      }
    }, {
      key: "createDayMenuData",
      value: function createDayMenuData() {
        var listMenuData = [{
          'name': _MHLocalizableString.LocalizedStrings.Monday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Tuesday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Wednesday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Thursday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Friday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Saturday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Sunday,
          'choose': false,
          'func': function func() {}
        }];
        this.dayMenuData = listMenuData;
        return [{
          'title': "",
          'data': listMenuData
        }];
      }
    }, {
      key: "_reloadDayDataSource",
      value: function _reloadDayDataSource() {
        this.setState({
          dayDataSource: [{
            'title': "",
            'data': this.dayMenuData
          }]
        });
      }
    }, {
      key: "_initDayDataSource",
      value: function _initDayDataSource(hexSum) {
        var dataSource = this.dayMenuData;

        var binary = _LocalTimeStrings.default.hexToBinaryFrom1To7(hexSum);

        for (var i = 0; i < dataSource.length; i++) {
          if (binary.substr(i, 1) == '1') {
            dataSource[i].choose = true;
          } else {
            dataSource[i].choose = false;
          }
        }

        this._reloadDayDataSource();
      }
    }, {
      key: "_createMenuData",
      value: function _createMenuData() {
        var _this2 = this;

        var listMenuData = [{
          'name': _MHLocalizableString.LocalizedStrings.repeat,
          'subtitle': _MHLocalizableString.LocalizedStrings.everyDay,
          'hexSum': _LocalTimeStrings.default.hexNumEveryDay,
          'func': function func() {
            _this2.setState({
              timeModalVisible: true
            });
          }
        }, {
          'name': _MHLocalizableString.LocalizedStrings.autoStartTime,
          'subtitle': _MHLocalizableString.LocalizedStrings.unSetting,
          'hide': true,
          'func': function func() {
            var left = new Promise(function (resolve, reject) {
              _this2.startTimePicker.show();

              _this2.setState({
                modalVisible: true,
                timeType: _MHLocalizableString.LocalizedStrings.autoStartTime
              }, function () {
                resolve(true);
              });
            });
            Promise.all([left]).then(function (value) {
              if (startTimeSub == _MHLocalizableString.LocalizedStrings.unSetting) {
                _this2.setState({
                  timeTip: ''
                });
              } else {
                var currentDate = parseInt(_LocalTimeStrings.default.getCurrentSecond());

                _this2._changeTimeTips(currentDate);
              }
            });
          }
        }, {
          'name': _MHLocalizableString.LocalizedStrings.autoCloseTime,
          'subtitle': _MHLocalizableString.LocalizedStrings.unSetting,
          'hide': true,
          'func': function func() {
            var left = new Promise(function (resolve, reject) {
              _this2.endTimePicker.show();

              _this2.setState({
                modalVisible: true,
                timeType: _MHLocalizableString.LocalizedStrings.autoCloseTime
              }, function () {
                resolve(true);
              });
            });
            Promise.all([left]).then(function (value) {
              if (endTimeSub == _MHLocalizableString.LocalizedStrings.unSetting) {
                _this2.setState({
                  timeTip: ''
                });
              } else {
                var currentDate = parseInt(_LocalTimeStrings.default.getCurrentSecond());

                _this2._changeTimeTips(currentDate);
              }

              ;
            });
          }
        }];
        this._menuData = listMenuData;
        return listMenuData;
      }
    }, {
      key: "_reloadDataSource",
      value: function _reloadDataSource() {
        this.setState({
          dataSource: this._menuData
        });
      }
    }, {
      key: "_initTime",
      value: function _initTime() {
        var date = new Date();
        var hour = date.getHours();
        var minute = date.getMinutes();
        startHour = hour;
        endHour = hour;
        startMinute = minute;
        endMinute = minute;
      }
    }, {
      key: "_initStartTime",
      value: function _initStartTime() {
        var date = new Date();
        var hour = date.getHours();
        var minute = date.getMinutes();
        startHour = hour;
        startMinute = minute;
      }
    }, {
      key: "_initEndTime",
      value: function _initEndTime() {
        var date = new Date();
        var hour = date.getHours();
        var minute = date.getMinutes();
        endHour = hour;
        endMinute = minute;
      }
    }, {
      key: "_evaluateTime",
      value: function _evaluateTime(startTime, endTime) {
        startTimeSub = startTime;
        endTimeSub = endTime;

        if (startTime == _MHLocalizableString.LocalizedStrings.unSetting) {} else {
          startHour = startTime.substr(0, 2);
          startMinute = startTime.substr(startTime.length - 2, 2);
        }

        if (endTime == _MHLocalizableString.LocalizedStrings.unSetting) {} else {
          endHour = endTime.substr(0, 2);
          endMinute = endTime.substr(endTime.length - 2, 2);
        }
      }
    }, {
      key: "_onDateChange",
      value: function _onDateChange() {
        var currentDate = parseInt(_LocalTimeStrings.default.getCurrentSecond());

        this._changeTimeTips(currentDate);

        var timeData = this._menuData;
        var type = this.state.timeType;

        if (type == _MHLocalizableString.LocalizedStrings.autoStartTime) {
          timeData[1].subtitle = startHour + ':' + startMinute;
          timeData[1].hide = this.timerType === TIMER_TYPE.LIGHT_TIMER;
          startTimeSub = timeData[1].subtitle;
        }

        if (type == _MHLocalizableString.LocalizedStrings.autoCloseTime) {
          timeData[2].subtitle = endHour + ':' + endMinute;
          timeData[2].hide = this.timerType === TIMER_TYPE.LIGHT_TIMER;
          endTimeSub = timeData[2].subtitle;
        }

        this._menuData = timeData;

        this._reloadDataSource();
      }
    }, {
      key: "_changeTimeTips",
      value: function _changeTimeTips(currentTime) {
        var timeMargin = 3600;
        var weekTimeMargin = 604800;
        var totalHour = parseInt(currentTime / timeMargin);
        var currentWeek = new Date(currentTime * 1000).getDay();
        var currentHour = new Date(currentTime * 1000).getHours();
        var today_start = (totalHour - currentHour) * timeMargin;

        var weekTimes = _LocalTimeStrings.default.getCurrnentWeekTime(currentWeek, today_start);

        var dataSource = this._menuData;

        var days = _LocalTimeStrings.default.hexToBinaryFrom1To7(dataSource[0].hexSum);

        var type = this.state.timeType;
        var tempArray = [];

        for (var k = 0; k < days.length; k++) {
          if (days.substr(k, 1) == 1) {
            var itemTime = weekTimes[k];

            if (type == _MHLocalizableString.LocalizedStrings.autoStartTime) {
              itemTime = parseInt(itemTime) + parseInt(startHour) * 3600 + parseInt(startMinute) * 60;
            }

            if (type == _MHLocalizableString.LocalizedStrings.autoCloseTime) {
              itemTime = parseInt(itemTime) + parseInt(endHour) * 3600 + parseInt(endMinute) * 60;
            }

            if (itemTime < currentTime) {
              itemTime = weekTimeMargin + itemTime;
            }

            tempArray.push(itemTime);
          }
        }

        var min_time = Math.min.apply(null, tempArray);
        var time_margin = min_time - currentTime;
        var left_hours = parseInt(time_margin / 3600);
        var left_hour = parseInt(left_hours / 24) > 0 ? parseInt(left_hours % 24) : left_hours;
        var left_day_tip = parseInt(left_hours / 24) > 0 ? parseInt(left_hours / 24) + (parseInt(left_hours / 24) > 1 ? _MHLocalizableString.LocalizedStrings.days : _MHLocalizableString.LocalizedStrings.day) : '';
        var left_minutes = parseInt(time_margin % 3600);
        var left_minute = parseInt(left_minutes % 60) == 0 ? parseInt(left_minutes / 60) : parseInt(left_minutes / 60) + 1;
        var state_dis = type == _MHLocalizableString.LocalizedStrings.autoStartTime ? _MHLocalizableString.LocalizedStrings.open_dis : _MHLocalizableString.LocalizedStrings.close_dis;
        state_dis = _MHGlobalData.default.isEnglish ? state_dis : '';
        var state = type == _MHLocalizableString.LocalizedStrings.autoStartTime ? _MHLocalizableString.LocalizedStrings.open : _MHLocalizableString.LocalizedStrings.close;
        var left_hour_tip = left_hour == 0 ? '' : left_hour + (left_hour > 1 ? _MHLocalizableString.LocalizedStrings.hours : _MHLocalizableString.LocalizedStrings.hour);
        left_hour_tip = left_minute == 60 ? left_hour + 1 + (left_hour >= 1 ? _MHLocalizableString.LocalizedStrings.hours : _MHLocalizableString.LocalizedStrings.hour) + _MHLocalizableString.LocalizedStrings.later : left_hour_tip;
        var left_minute_tip = left_minute == 0 ? '' : left_minute + (left_minute > 1 ? _MHLocalizableString.LocalizedStrings.minutes : _MHLocalizableString.LocalizedStrings.minute) + _MHLocalizableString.LocalizedStrings.later;
        left_minute_tip = left_minute == 60 ? '' : left_minute_tip;
        var left_tip = state_dis + left_day_tip + left_hour_tip + left_minute_tip + state;
        this.setState({
          timeTip: left_tip
        });
      }
    }, {
      key: "_callBack",
      value: function _callBack() {
        if (this.props.navigation.state.params.callback) {
          this.props.navigation.state.params.callback(true);
        }
      }
    }, {
      key: "showRemove",
      value: function showRemove() {
        return this.timerType === TIMER_TYPE.POWER_TIMER && editTimeItem;
      }
    }, {
      key: "createTimeListData",
      value: function createTimeListData() {
        var _this3 = this;

        this.timeListData = {
          viewTitle: _MHLocalizableString.LocalizedStrings.navigationTitleTimeRepeat,
          list: [{
            name: _MHLocalizableString.LocalizedStrings.everyDay,
            selected: true,
            hexSum: _LocalTimeStrings.default.hexNumEveryDay,
            selectedImage: _$$_REQUIRE(_dependencyMap[28]),
            func: function func() {
              _this3.changeTimeListData(0);

              _this3.changeTimeListDataSource(_LocalTimeStrings.default.hexNumEveryDay);
            }
          }, {
            name: _MHLocalizableString.LocalizedStrings.weekday,
            selected: false,
            hexSum: _LocalTimeStrings.default.hexNumWeekDay,
            selectedImage: _$$_REQUIRE(_dependencyMap[28]),
            func: function func() {
              _this3.changeTimeListData(1);

              _this3.changeTimeListDataSource(_LocalTimeStrings.default.hexNumWeekDay);
            }
          }, {
            name: _MHLocalizableString.LocalizedStrings.weekend,
            selected: false,
            hexSum: _LocalTimeStrings.default.hexNumWeekend,
            selectedImage: _$$_REQUIRE(_dependencyMap[28]),
            func: function func() {
              _this3.changeTimeListData(2);

              _this3.changeTimeListDataSource(_LocalTimeStrings.default.hexNumWeekend);
            }
          }, {
            name: _MHLocalizableString.LocalizedStrings.custom,
            selected: false,
            selectedImage: _$$_REQUIRE(_dependencyMap[28]),
            func: function func() {
              _this3._initDayDataSource(_this3._menuData[0].hexSum);

              _this3.setState({
                showDayMultiDialog: true,
                timeModalVisible: false
              });
            }
          }]
        };
      }
    }, {
      key: "changeTimeListData",
      value: function changeTimeListData(index) {
        for (var i = 0; i < this.timeListData.list.length; i++) {
          this.timeListData.list[i].selected = i === index;
        }

        this.setState({
          timeModalVisible: false
        });
      }
    }, {
      key: "changeTimeListDataSource",
      value: function changeTimeListDataSource(hexNum) {
        this._menuData[0].hexSum = hexNum;
        this._menuData[0].subtitle = _LocalTimeStrings.default.returnWeekShow(hexNum);

        this._reloadDataSource();
      }
    }, {
      key: "returnIndexOfTimeList",
      value: function returnIndexOfTimeList(hexNum) {
        var index = 0;

        if (hexNum) {
          if (hexNum == _LocalTimeStrings.default.hexNumEveryDay) {
            index = 0;
          } else if (hexNum == _LocalTimeStrings.default.hexNumWeekDay) {
            index = 1;
          } else if (hexNum == _LocalTimeStrings.default.hexNumWeekend) {
            index = 2;
          } else {
            index = 3;
          }
        }

        return index;
      }
    }, {
      key: "timerInstructions",
      value: function timerInstructions(startTime, endTime, weeks) {
        var start = this.timerStr(startTime, _MHLocalizableString.LocalizedStrings.unSetting);
        var end = this.timerStr(endTime, _MHLocalizableString.LocalizedStrings.unSetting);
        var week = weeks;

        var index = _LocalTimeStrings.default.addZero(count, 2);

        var time;

        if (this.timerType === TIMER_TYPE.POWER_TIMER) {
          time = index + '-' + week + '-' + start + '-' + end + '-' + timeEnable;
        } else {
          time = index + '-' + week + '-' + start + '-' + end + '-' + 'null' + '-' + timeEnable;
        }

        return time;
      }
    }, {
      key: "timerStr",
      value: function timerStr(totalStr, filterStr) {
        var string = totalStr;

        if (totalStr == filterStr) {
          string = _LocalTimeStrings.default.blank;
        }

        return string;
      }
    }, {
      key: "timerSubtitleStr",
      value: function timerSubtitleStr(totalStr) {
        var string = totalStr;

        if (totalStr == _LocalTimeStrings.default.blank) {
          string = _MHLocalizableString.LocalizedStrings.unSetting;
        }

        return string;
      }
    }, {
      key: "requestForTime",
      value: function requestForTime(startTime, endTime, hex) {
        var timeStr = this.timerInstructions(startTime, endTime, hex);
        var api = 'set_timer',
            eventType = 'editTimeCallbck';

        if (this.timerType === TIMER_TYPE.PTC_TIMER) {
          api = 'set_ptc_timer';
          eventType = 'addPtcTimer';
          this.setPTCTimer(api, timeStr, eventType);
        } else if (this.timerType === TIMER_TYPE.LIGHT_TIMER) {
          api = 'set_light_timer';
          eventType = 'addDisplayTimer';
          this.setLightTimer(api, timeStr, eventType);
        } else {
          this.setTimer(api, timeStr, eventType);
        }
      }
    }, {
      key: "setTimer",
      value: function setTimer(method, param, eventType) {
        var _this4 = this;

        _RpcManage.default.getInstance().rpcRequest(method, param, function () {
          _RequestHelp.default.setTime(param).then(function (callback) {
            if (callback.code === 0) {
              if (editTimeItem) {
                _reactNative.DeviceEventEmitter.emit(eventType, false);
              }

              _this4._callBack();

              _this4.props.navigation.goBack();
            }

            btnSelected = false;
          }).catch(function (err) {
            btnSelected = false;
          });
        });
      }
    }, {
      key: "setPTCTimer",
      value: function setPTCTimer(method, param, eventType) {
        var _this5 = this;

        _RpcManage.default.getInstance().rpcRequest(method, param, function () {
          _RequestHelp.default.setPtcTime(param).then(function (callback) {
            if (callback.code === 0) {
              _reactNative.DeviceEventEmitter.emit(eventType, _DataUtils.default.initTimeItemData(param));

              _this5._callBack();

              _this5.props.navigation.goBack();
            }

            btnSelected = false;
          }).catch(function (err) {
            btnSelected = false;
          });
        });
      }
    }, {
      key: "setLightTimer",
      value: function setLightTimer(method, param, eventType) {
        var _this6 = this;

        _RpcManage.default.getInstance().rpcRequest(method, param, function () {
          _RequestHelp.default.setLightTime(param).then(function (callback) {
            if (callback.code === 0) {
              _reactNative.DeviceEventEmitter.emit(eventType, _DataUtils.default.initTimeItemData(param));

              _this6._callBack();

              _this6.props.navigation.goBack();
            }

            btnSelected = false;
          }).catch(function (err) {
            btnSelected = false;
          });
        });
      }
    }, {
      key: "_onremoveBtnPress",
      value: function _onremoveBtnPress(rowData) {
        var name = rowData.name;
        var timeData = this._menuData;

        if (name == _MHLocalizableString.LocalizedStrings.autoStartTime) {
          startTimeSub = _MHLocalizableString.LocalizedStrings.unSetting;

          this._initStartTime();

          timeData[1].subtitle = _MHLocalizableString.LocalizedStrings.unSetting;
          timeData[1].hide = true;
        }

        if (name == _MHLocalizableString.LocalizedStrings.autoCloseTime) {
          endTimeSub = _MHLocalizableString.LocalizedStrings.unSetting;

          this._initEndTime();

          timeData[2].subtitle = _MHLocalizableString.LocalizedStrings.unSetting;
          timeData[2].hide = true;
        }

        this._reloadDataSource();
      }
    }, {
      key: "_touchConfrmBtn",
      value: function _touchConfrmBtn() {
        var startTime = this._menuData[1].subtitle;
        var endTime = this._menuData[2].subtitle;
        var hex = this._menuData[0].hexSum;

        if (this.timerType !== TIMER_TYPE.POWER_TIMER) {
          if (startTime === _MHLocalizableString.LocalizedStrings.unSetting || endTime === _MHLocalizableString.LocalizedStrings.unSetting) {
            this.refs.toast.show(_MHLocalizableString.LocalizedStrings.timeCancleTip);
            btnSelected = false;
            return;
          }
        } else {
          if (startTime === _MHLocalizableString.LocalizedStrings.unSetting && endTime === _MHLocalizableString.LocalizedStrings.unSetting) {
            this.refs.toast.show(_MHLocalizableString.LocalizedStrings.timeCancleTip);
            btnSelected = false;
            return;
          }
        }

        if (startTime === endTime) {
          this.refs.toast.show(_MHLocalizableString.LocalizedStrings.timeCancleTip1);
          btnSelected = false;
          return;
        }

        this.requestForTime(startTime, endTime, hex);
      }
    }, {
      key: "_touchBackBtn",
      value: function _touchBackBtn() {
        this.openConfirm(true);
      }
    }, {
      key: "renderRemoveBtn",
      value: function renderRemoveBtn() {
        var _this7 = this;

        return this.showRemove() ? _react.default.createElement(_reactNative.View, {
          style: [styles.removeBtnView]
        }, _react.default.createElement(_reactNative.TouchableHighlight, {
          style: styles.removeBtnStyle,
          underlayColor: _MHGlobalData.default.ItemSelectedColor,
          onPress: function onPress() {
            _this7.openConfirmRemove(true);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.removeTitlStyle, _MHGlobalData.default.baseFontStyle]
        }, _MHLocalizableString.LocalizedStrings.timeDeleteTip))) : null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this8 = this;

        var title = this.props.navigation.getParam("routeTitle");
        windowHeight = (0, _MHGlobalData.getWindowHeight)();
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: title,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[29]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[30]),
          onPressLeft: function onPressLeft() {
            _this8._touchBackBtn();
          },
          rightText: _MHLocalizableString.LocalizedStrings.conform,
          rightTextStyle: {
            backgroundColor: _ColorConstant.default.ColorTimeSureBtn,
            fontSize: 12,
            height: 30,
            width: 55,
            marginRight: 21
          },
          onPressRight: function onPressRight() {
            _this8._touchConfrmBtn();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: styles.separatorTotal
        }), _react.default.createElement(_reactNative.FlatList, {
          data: this.state.dataSource,
          renderItem: this._renderItem.bind(this),
          keyExtractor: function keyExtractor(item, index) {
            return item + index;
          },
          ItemSeparatorComponent: function ItemSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [styles.separatorBackground]
            }, _react.default.createElement(_reactNative.View, {
              style: [styles.separator]
            }));
          },
          getItemLayout: function getItemLayout(data, index) {
            return {
              length: itemHeight,
              offset: itemHeight * index + _reactNative.StyleSheet.hairlineWidth,
              index: index
            };
          }
        }), this.renderRemoveBtn(), _react.default.createElement(_DatePicker.default, {
          selectedValue: [parseInt(startHour), parseInt(startMinute)],
          onPickerSelected: function onPickerSelected(value) {
            startHour = _LocalTimeStrings.default.addZero(value[0], 2);
            startMinute = _LocalTimeStrings.default.addZero(value[1], 2);

            _this8._onDateChange();
          },
          timeTip: this.state.timeTip,
          ref: function ref(_ref) {
            return _this8.startTimePicker = _ref;
          }
        }), _react.default.createElement(_DatePicker.default, {
          selectedValue: [parseInt(endHour), parseInt(endMinute)],
          onPickerSelected: function onPickerSelected(value) {
            endHour = _LocalTimeStrings.default.addZero(value[0], 2);
            endMinute = _LocalTimeStrings.default.addZero(value[1], 2);

            _this8._onDateChange();
          },
          timeTip: this.state.timeTip,
          ref: function ref(_ref2) {
            return _this8.endTimePicker = _ref2;
          }
        }), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this8.state.timeModalVisible = visible;

            _this8.setState({}, cbk);
          },
          visible: this.state.timeModalVisible,
          modalHeight: timeModelHeight + 8,
          animateTime: 250,
          renderCbk: this.renderTime
        }), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this8.setState({
              showDayMultiDialog: visible
            }, cbk);
          },
          visible: this.state.showDayMultiDialog,
          modalHeight: 484,
          renderCbk: this.renderDayMultiDialog
        }), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this8.setState({
              showCancelDialog: visible
            }, cbk);
          },
          visible: this.state.showCancelDialog,
          modalHeight: !editTimeItem ? _miot.Host.isAndroid ? 173 : 170 : _miot.Host.isAndroid ? _MHGlobalData.default.isEnglish ? 156 : 139 : _MHGlobalData.default.isEnglish ? 153 : 137,
          renderCbk: this.renderCancelDialog
        }), _react.default.createElement(_SlideModal.default, {
          setVisible: function setVisible(visible, cbk) {
            _this8.setState({
              showDeleteDialog: visible
            }, cbk);
          },
          visible: this.state.showDeleteDialog,
          modalHeight: 137,
          renderCbk: this.renderDialog
        }), _react.default.createElement(_reactNativeEasyToast.default, {
          ref: "toast",
          opacity: 0.8,
          textStyle: {
            fontFamily: _FontSizeConstant.default.FontfamilyOfMiLight,
            color: '#ffffff',
            textAlign: 'center'
          },
          style: {
            marginHorizontal: 20
          },
          fadeOutDuration: 1000
        }));
      }
    }, {
      key: "_renderDayItem",
      value: function _renderDayItem(data) {
        var _this9 = this;

        var rowData = data.item;
        var title = rowData.name;
        return _react.default.createElement(_reactNative.TouchableHighlight, {
          style: {
            backgroundColor: '#ffffff'
          },
          underlayColor: _MHGlobalData.default.ItemSelectedColor,
          onPress: function onPress() {
            return _this9._pressDayRow(data);
          }
        }, _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: 'transparent',
            height: dayItemH + _reactNative.StyleSheet.hairlineWidth * 2,
            width: (0, _MHGlobalData.getWindowWidth)()
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.dayRowContainer
        }, _react.default.createElement(_reactNative.View, {
          style: styles.dayLeftViewStyle
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.dayTitle, _MHGlobalData.default.baseFontStyle]
        }, title)), _react.default.createElement(_reactNative.Image, {
          style: {
            width: 18,
            height: 18,
            marginRight: 20
          },
          source: rowData.choose == true ? _$$_REQUIRE(_dependencyMap[31]) : _$$_REQUIRE(_dependencyMap[32])
        })), rowData.name == _MHLocalizableString.LocalizedStrings.Sunday ? null : _react.default.createElement(_reactNative.View, {
          style: styles.separatorTotal
        })));
      }
    }, {
      key: "_pressDayRow",
      value: function _pressDayRow(item) {
        global.refreshContent = true;
        var index = item.index;
        var dataSource = this.dayMenuData;
        dataSource[index].choose = !dataSource[index].choose;
        this.dayMenuData = dataSource;

        this._reloadDayDataSource();
      }
    }, {
      key: "_renderItem",
      value: function _renderItem(data) {
        var _this10 = this;

        var rowData = data.item;
        var title = rowData.name;
        var subtitle = rowData.subtitle;

        if (title == _MHLocalizableString.LocalizedStrings.repeat) {
          return _react.default.createElement(_reactNative.TouchableHighlight, {
            style: {
              backgroundColor: '#ffffff'
            },
            underlayColor: _MHGlobalData.default.ItemSelectedColor,
            onPress: function onPress() {
              return _this10._pressRow(rowData);
            }
          }, _react.default.createElement(_reactNative.View, {
            style: {
              backgroundColor: 'transparent'
            }
          }, _react.default.createElement(_reactNative.View, {
            style: styles.rowContainer
          }, _react.default.createElement(_reactNative.View, {
            style: styles.leftViewStyle
          }, _react.default.createElement(_reactNative.Text, {
            style: [styles.title, _MHGlobalData.default.baseFontStyle]
          }, title), _react.default.createElement(_reactNative.Text, {
            style: [styles.detailTitle, _MHGlobalData.default.baseFontStyle]
          }, subtitle ? subtitle : '')), _react.default.createElement(_reactNative.Image, {
            style: styles.subArrow,
            source: _$$_REQUIRE(_dependencyMap[33])
          }))));
        } else {
          if (rowData.hide == true) {
            return _react.default.createElement(_reactNative.TouchableHighlight, {
              style: {
                backgroundColor: '#ffffff'
              },
              underlayColor: _MHGlobalData.default.ItemSelectedColor,
              onPress: function onPress() {
                return _this10._pressRow(rowData);
              }
            }, _react.default.createElement(_reactNative.View, {
              style: {
                backgroundColor: 'transparent'
              }
            }, _react.default.createElement(_reactNative.View, {
              style: styles.rowContainer
            }, _react.default.createElement(_reactNative.View, {
              style: styles.leftViewStyle
            }, _react.default.createElement(_reactNative.Text, {
              style: [styles.title, _MHGlobalData.default.baseFontStyle]
            }, title), _react.default.createElement(_reactNative.Text, {
              style: [styles.detailTitle, _MHGlobalData.default.baseFontStyle]
            }, subtitle ? subtitle : ''))), title === _MHLocalizableString.LocalizedStrings.autoCloseTime && _react.default.createElement(_reactNative.View, {
              style: styles.separatorTotal
            })));
          } else {
            return _react.default.createElement(_reactNative.TouchableHighlight, {
              style: {
                backgroundColor: '#ffffff'
              },
              underlayColor: _MHGlobalData.default.ItemSelectedColor,
              onPress: function onPress() {
                return _this10._pressRow(rowData);
              }
            }, _react.default.createElement(_reactNative.View, {
              style: {
                backgroundColor: 'transparent'
              }
            }, _react.default.createElement(_reactNative.View, {
              style: styles.rowContainer
            }, _react.default.createElement(_reactNative.View, {
              style: styles.leftViewStyle
            }, _react.default.createElement(_reactNative.Text, {
              style: [styles.title, _MHGlobalData.default.baseFontStyle]
            }, title), _react.default.createElement(_reactNative.Text, {
              style: [styles.detailTitle, _MHGlobalData.default.baseFontStyle]
            }, subtitle ? subtitle : '')), _react.default.createElement(_reactNative.View, {
              style: styles.rightViewStyle
            }, _react.default.createElement(_reactNative.TouchableHighlight, {
              style: styles.removeBtn,
              underlayColor: _ColorConstant.default.ColorOfD2D2D2,
              onPress: function onPress() {
                return _this10._onremoveBtnPress(rowData);
              }
            }, _react.default.createElement(_reactNative.Text, {
              style: [styles.removeTitle, _MHGlobalData.default.baseFontStyle]
            }, _MHLocalizableString.LocalizedStrings.remove)))), title === _MHLocalizableString.LocalizedStrings.autoCloseTime && _react.default.createElement(_reactNative.View, {
              style: styles.separatorTotal
            })));
          }
        }
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(item) {
        item.func();
      }
    }]);
    return AddTimePage;
  }(_react.default.Component);

  exports.default = AddTimePage;

  AddTimePage.navigationOptions = function (_ref3) {
    var navigation = _ref3.navigation;
    return {
      header: null,
      gesturesEnabled: false
    };
  };

  var styles = _reactNative.StyleSheet.create({
    sectionHeader: {
      height: 30,
      backgroundColor: '#f7f7f7',
      justifyContent: 'center',
      marginLeft: 10
    },
    headerText: {
      fontSize: (0, _FontSizeConstant.setSpTextNew)(12, true),
      color: 'rgba(0,0,0,0.4)'
    },
    separatorBackground: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: '#ffffff'
    },
    separatorTotal: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: _ColorConstant.default.ColorOfSperate
    },
    separator: {
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      flex: 1,
      marginLeft: 20
    },
    container: {
      flex: 1,
      backgroundColor: '#f7f7f7'
    },
    rowContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      flex: 1,
      height: itemHeight,
      marginLeft: 25,
      marginRight: 20,
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    sectionHeaderText: {
      fontSize: _FontSizeConstant.default.FontOfSectionHeaderText
    },
    emptySectionHeader: {
      height: 0
    },
    list: {
      alignSelf: 'stretch'
    },
    leftViewStyle: {
      alignItems: 'flex-start',
      justifyContent: 'center',
      height: itemH - 26 * _MHGlobalData.default.HeightPersent
    },
    rightViewStyle: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    title: {
      fontSize: _FontSizeConstant.default.FontOfTimeTitle,
      color: _ColorConstant.default.ColorTimeTitle
    },
    sliderStyle: {
      width: 50,
      height: 30
    },
    detailTitle: {
      fontSize: _FontSizeConstant.default.FontOfTimeDetailTitle,
      color: _ColorConstant.default.ColorTimeDetailTitle,
      marginTop: 5 * _MHGlobalData.default.HeightPersent
    },
    reset: {
      fontSize: _FontSizeConstant.default.FontOfReset,
      color: 'rgb(251,0,0)',
      textAlign: 'center'
    },
    subArrow: {
      width: 6.5,
      height: 13
    },
    dayRowContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      flex: 1,
      height: dayItemH,
      justifyContent: 'space-between',
      alignItems: 'center',
      marginLeft: 25,
      marginRight: 20
    },
    dayLeftViewStyle: {},
    dayTitle: {
      fontSize: _FontSizeConstant.default.FontOfDayTimeTitle,
      color: _ColorConstant.default.ColorDayTimeTitle
    },
    removeBtn: {
      alignItems: 'center',
      justifyContent: 'center',
      height: 20 * _MHGlobalData.default.HeightPersent,
      backgroundColor: _ColorConstant.default.ColorOfWhite,
      borderColor: _ColorConstant.default.ColorOfBorder,
      borderRadius: 10 * _MHGlobalData.default.HeightPersent,
      borderWidth: _reactNative.StyleSheet.hairlineWidth
    },
    removeTitle: {
      textAlign: "center",
      marginLeft: 6,
      marginRight: 6,
      fontSize: _FontSizeConstant.default.FontOfTimeRemoveTitle,
      color: _ColorConstant.default.ColorTimeRemoveTitle
    },
    datePickerContainer: {
      flexDirection: 'column',
      backgroundColor: 'rgba(0, 0, 0,0.6)',
      flex: 1
    },
    dissmissBtnStyle: {
      width: (0, _MHGlobalData.getWindowWidth)()
    },
    pickParentStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: 310,
      backgroundColor: '#eaeaea',
      justifyContent: 'center',
      alignItems: 'center',
      flexDirection: 'column'
    },
    dataTipTitleStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: 60,
      backgroundColor: '#eaeaea',
      justifyContent: 'center',
      alignItems: 'center'
    },
    dataPickStyle: {
      width: (0, _MHGlobalData.getWindowWidth)(),
      height: 250,
      justifyContent: 'center',
      alignItems: 'center',
      flexDirection: 'row'
    },
    pickerItem: {
      flex: 1
    },
    navRightViewStyle: {
      height: APPBAR_HEIGHT,
      alignItems: 'center',
      justifyContent: 'center',
      marginRight: 15
    },
    navRightBtn: {
      alignItems: 'center',
      justifyContent: 'center',
      height: 30,
      backgroundColor: _ColorConstant.default.ColorTimeSureBtn,
      borderRadius: 6
    },
    navRightTitle: {
      textAlign: "center",
      marginLeft: 10,
      marginRight: 10,
      fontSize: _FontSizeConstant.default.FontOfTimeSureBtn,
      color: _ColorConstant.default.ColorOfWhite
    },
    ptcPickStyle: {
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: timeModelHeight,
      marginLeft: 8
    },
    ptcPickParentStyle: {
      backgroundColor: _ColorConstant.default.ColorOfWhite,
      width: (0, _MHGlobalData.getWindowWidth)() - 16,
      height: timeModelHeight,
      justifyContent: 'center',
      alignItems: 'center',
      marginLeft: 8,
      marginRight: 8,
      borderRadius: 10,
      marginBottom: _MHGlobalData.default.isIphoneX ? 35 : 8
    },
    removeBtnView: {
      position: 'absolute',
      alignItems: 'center',
      justifyContent: 'center',
      bottom: _MHGlobalData.default.isIphoneX ? (0, _MHGlobalData.getHeightSize)(50) : (0, _MHGlobalData.getHeightSize)(29),
      height: (0, _MHGlobalData.getHeightSize)(40),
      width: (0, _MHGlobalData.getWindowWidth)() - (0, _MHGlobalData.getWidthSize)(27) * 2,
      marginLeft: (0, _MHGlobalData.getWidthSize)(27)
    },
    removeBtnStyle: {
      alignItems: 'center',
      justifyContent: 'center',
      height: (0, _MHGlobalData.getHeightSize)(40),
      width: (0, _MHGlobalData.getWindowWidth)() - (0, _MHGlobalData.getWidthSize)(27) * 2,
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: _ColorConstant.default.ColorOfBorder,
      borderRadius: (0, _MHGlobalData.getHeightSize)(20)
    },
    removeTitlStyle: {
      color: '#F34131',
      fontSize: _FontSizeConstant.default.FontOfHighFilterBuyTitle,
      fontWeight: 'bold'
    }
  });
},10430,[14308,14305,14320,14323,14371,14377,14374,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10040,10061,10037,10250,10433,10064,10067,10259,10451,10262,10265,10460,10331,10334,10463,10466,10316]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _Picker = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_Picker)['default'];
    }
  });

  var _Popup = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, 'Popup', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_Popup)['default'];
    }
  });

  var _PopupStyles = _$$_REQUIRE(_dependencyMap[2]);

  Object.defineProperty(exports, 'PopupStyles', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_PopupStyles)['default'];
    }
  });

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }
},10433,[13465,10436,10448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _PopupMixin = _$$_REQUIRE(_dependencyMap[2]);

  var _PopupMixin2 = _interopRequireDefault(_PopupMixin);

  var _Modal = _$$_REQUIRE(_dependencyMap[3]);

  var _Modal2 = _interopRequireDefault(_Modal);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var getModal = function getModal(props, visible, _ref) {
    var getContent = _ref.getContent,
        hide = _ref.hide,
        onDismiss = _ref.onDismiss,
        onOk = _ref.onOk;
    var styles = props.styles,
        title = props.title,
        okText = props.okText,
        dismissText = props.dismissText;
    var titleEl = typeof title === 'string' ? _react2['default'].createElement(_reactNative.Text, {
      style: [styles.title]
    }, title) : title;
    var okEl = typeof okText === 'string' ? _react2['default'].createElement(_reactNative.Text, {
      style: [styles.actionText, styles.okText]
    }, okText) : okText;
    var dismissEl = typeof dismissText === 'string' ? _react2['default'].createElement(_reactNative.Text, {
      style: [styles.actionText, styles.dismissText]
    }, dismissText) : dismissText;
    return _react2['default'].createElement(_Modal2['default'], {
      animationType: 'slide-up',
      wrapStyle: styles.modal,
      visible: visible,
      onClose: hide
    }, _react2['default'].createElement(_reactNative.View, {
      style: [styles.header]
    }, _react2['default'].createElement(_reactNative.TouchableHighlight, {
      onPress: onDismiss,
      style: [styles.headerItem],
      activeOpacity: props.actionTextActiveOpacity,
      underlayColor: props.actionTextUnderlayColor
    }, dismissEl), _react2['default'].createElement(_reactNative.View, {
      style: [styles.headerItem]
    }, titleEl), _react2['default'].createElement(_reactNative.TouchableHighlight, {
      onPress: onOk,
      style: [styles.headerItem],
      activeOpacity: props.actionTextActiveOpacity,
      underlayColor: props.actionTextUnderlayColor
    }, okEl)), getContent());
  };

  exports['default'] = (0, _PopupMixin2['default'])(getModal, {
    actionTextUnderlayColor: '#ddd',
    actionTextActiveOpacity: 1,
    triggerType: 'onPress',
    styles: {},
    WrapComponent: _reactNative.View
  });
  module.exports = exports['default'];
},10436,[10297,10033,10439,10445]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends2 = _$$_REQUIRE(_dependencyMap[0]);

  var _extends3 = _interopRequireDefault(_extends2);

  var _defineProperty2 = _$$_REQUIRE(_dependencyMap[1]);

  var _defineProperty3 = _interopRequireDefault(_defineProperty2);

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[4]);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits3 = _interopRequireDefault(_inherits2);

  exports['default'] = PopupMixin;

  var _react = _$$_REQUIRE(_dependencyMap[6]);

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function PopupMixin(getModal, platformProps) {
    return _a = function (_React$Component) {
      (0, _inherits3['default'])(_a, _React$Component);

      function _a(props) {
        (0, _classCallCheck3['default'])(this, _a);

        var _this = (0, _possibleConstructorReturn3['default'])(this, (_a.__proto__ || Object.getPrototypeOf(_a)).call(this, props));

        _this.onPickerChange = function (pickerValue) {
          if (_this.state.pickerValue !== pickerValue) {
            _this.setState({
              pickerValue: pickerValue
            });

            var _this$props = _this.props,
                picker = _this$props.picker,
                pickerValueChangeProp = _this$props.pickerValueChangeProp;

            if (picker && picker.props[pickerValueChangeProp]) {
              picker.props[pickerValueChangeProp](pickerValue);
            }
          }
        };

        _this.saveRef = function (picker) {
          _this.picker = picker;
        };

        _this.onTriggerClick = function (e) {
          var child = _this.props.children;
          var childProps = child.props || {};

          if (childProps[_this.props.triggerType]) {
            childProps[_this.props.triggerType](e);
          }

          _this.fireVisibleChange(!_this.state.visible);
        };

        _this.onOk = function () {
          _this.props.onOk(_this.picker && _this.picker.getValue());

          _this.fireVisibleChange(false);
        };

        _this.getContent = function () {
          if (_this.props.picker) {
            var _React$cloneElement;

            var pickerValue = _this.state.pickerValue;

            if (pickerValue === null) {
              pickerValue = _this.props.value;
            }

            return _react2['default'].cloneElement(_this.props.picker, (_React$cloneElement = {}, (0, _defineProperty3['default'])(_React$cloneElement, _this.props.pickerValueProp, pickerValue), (0, _defineProperty3['default'])(_React$cloneElement, _this.props.pickerValueChangeProp, _this.onPickerChange), (0, _defineProperty3['default'])(_React$cloneElement, 'ref', _this.saveRef), _React$cloneElement));
          } else {
            return _this.props.content;
          }
        };

        _this.onDismiss = function () {
          _this.props.onDismiss();

          _this.fireVisibleChange(false);
        };

        _this.hide = function () {
          _this.fireVisibleChange(false);
        };

        _this.state = {
          pickerValue: 'value' in _this.props ? _this.props.value : null,
          visible: _this.props.visible || false
        };
        return _this;
      }

      (0, _createClass3['default'])(_a, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if ('value' in nextProps) {
            this.setState({
              pickerValue: nextProps.value
            });
          }

          if ('visible' in nextProps) {
            this.setVisibleState(nextProps.visible);
          }
        }
      }, {
        key: 'setVisibleState',
        value: function setVisibleState(visible) {
          this.setState({
            visible: visible
          });

          if (!visible) {
            this.setState({
              pickerValue: null
            });
          }
        }
      }, {
        key: 'fireVisibleChange',
        value: function fireVisibleChange(visible) {
          if (this.state.visible !== visible) {
            if (!('visible' in this.props)) {
              this.setVisibleState(visible);
            }

            this.props.onVisibleChange(visible);
          }
        }
      }, {
        key: 'getRender',
        value: function getRender() {
          var props = this.props;
          var children = props.children;

          if (!children) {
            return getModal(props, this.state.visible, {
              getContent: this.getContent,
              onOk: this.onOk,
              hide: this.hide,
              onDismiss: this.onDismiss
            });
          }

          var _props = this.props,
              WrapComponent = _props.WrapComponent,
              disabled = _props.disabled;
          var child = children;
          var newChildProps = {};

          if (!disabled) {
            newChildProps[props.triggerType] = this.onTriggerClick;
          }

          return _react2['default'].createElement(WrapComponent, {
            style: props.wrapStyle
          }, _react2['default'].cloneElement(child, newChildProps), getModal(props, this.state.visible, {
            getContent: this.getContent,
            onOk: this.onOk,
            hide: this.hide,
            onDismiss: this.onDismiss
          }));
        }
      }, {
        key: 'render',
        value: function render() {
          return this.getRender();
        }
      }]);
      return _a;
    }(_react2['default'].Component), _a.defaultProps = (0, _extends3['default'])({
      onVisibleChange: function onVisibleChange(_) {},
      okText: 'Ok',
      dismissText: 'Dismiss',
      title: '',
      onOk: function onOk(_) {},
      onDismiss: function onDismiss() {}
    }, platformProps), _a;

    var _a;
  }

  module.exports = exports['default'];
},10439,[13201,10442,13318,13321,13333,13435,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _defineProperty2 = _interopRequireDefault(_defineProperty);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = function (obj, key, value) {
    if (key in obj) {
      (0, _defineProperty2.default)(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };
},10442,[13324]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

  var _createClass2 = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass3 = _interopRequireDefault(_createClass2);

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

  var _inherits2 = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits3 = _interopRequireDefault(_inherits2);

  var _react = _$$_REQUIRE(_dependencyMap[4]);

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var styles = _reactNative.StyleSheet.create({
    wrap: {
      flex: 1,
      backgroundColor: 'rgba(0,0,0,0)'
    },
    mask: {
      backgroundColor: 'black',
      opacity: .5
    },
    content: {
      backgroundColor: 'white'
    },
    absolute: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    }
  });

  var screen = _reactNative.Dimensions.get('window');

  var RCModal = function (_React$Component) {
    (0, _inherits3['default'])(RCModal, _React$Component);

    function RCModal(props) {
      (0, _classCallCheck3['default'])(this, RCModal);

      var _this = (0, _possibleConstructorReturn3['default'])(this, (RCModal.__proto__ || Object.getPrototypeOf(RCModal)).call(this, props));

      _this.animateMask = function (visible) {
        _this.stopMaskAnim();

        _this.state.opacity.setValue(_this.getOpacity(!visible));

        _this.animMask = _reactNative.Animated.timing(_this.state.opacity, {
          toValue: _this.getOpacity(visible),
          duration: _this.props.animationDuration
        });

        _this.animMask.start(function () {
          _this.animMask = null;
        });
      };

      _this.stopMaskAnim = function () {
        if (_this.animMask) {
          _this.animMask.stop();

          _this.animMask = null;
        }
      };

      _this.stopDialogAnim = function () {
        if (_this.animDialog) {
          _this.animDialog.stop();

          _this.animDialog = null;
        }
      };

      _this.animateDialog = function (visible) {
        _this.stopDialogAnim();

        _this.animateMask(visible);

        var _this$props = _this.props,
            animationType = _this$props.animationType,
            animationDuration = _this$props.animationDuration;
        animationDuration = animationDuration;

        if (animationType !== 'none') {
          if (animationType === 'slide-up' || animationType === 'slide-down') {
            _this.state.position.setValue(_this.getPosition(!visible));

            _this.animDialog = _reactNative.Animated.timing(_this.state.position, {
              toValue: _this.getPosition(visible),
              duration: animationDuration,
              easing: visible ? _reactNative.Easing.elastic(0.8) : undefined
            });
          } else if (animationType === 'fade') {
            _this.animDialog = _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.opacity, {
              toValue: _this.getOpacity(visible),
              duration: animationDuration,
              easing: visible ? _reactNative.Easing.elastic(0.8) : undefined
            }), _reactNative.Animated.spring(_this.state.scale, {
              toValue: _this.getScale(visible)
            })]);
          }

          _this.animDialog.start(function () {
            _this.animDialog = null;

            if (!visible) {
              _this.setState({
                modalVisible: false
              });
            }

            if (_this.props.onAnimationEnd) {
              _this.props.onAnimationEnd(visible);
            }
          });
        } else {
          if (!visible) {
            _this.setState({
              modalVisible: false
            });
          }
        }
      };

      _this.close = function () {
        _this.animateDialog(false);
      };

      _this.onMaskClose = function () {
        if (_this.props.maskClosable && _this.props.onClose) {
          _this.props.onClose();
        }
      };

      _this.getPosition = function (visible) {
        if (visible) {
          return 0;
        }

        return _this.props.animationType === 'slide-down' ? -screen.height : screen.height;
      };

      _this.getScale = function (visible) {
        return visible ? 1 : 1.05;
      };

      _this.getOpacity = function (visible) {
        return visible ? 1 : 0;
      };

      var visible = props.visible;
      _this.state = {
        position: new _reactNative.Animated.Value(_this.getPosition(visible)),
        scale: new _reactNative.Animated.Value(_this.getScale(visible)),
        opacity: new _reactNative.Animated.Value(_this.getOpacity(visible)),
        modalVisible: visible
      };
      return _this;
    }

    (0, _createClass3['default'])(RCModal, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        if (this.shouldComponentUpdate(nextProps, null)) {
          this.setState({
            modalVisible: true
          });
        }
      }
    }, {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (this.props.visible || this.props.visible !== nextProps.visible) {
          return true;
        }

        if (nextState) {
          if (nextState.modalVisible !== this.state.modalVisible) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.props.animateAppear && this.props.animationType !== 'none') {
          this.componentDidUpdate({});
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        var props = this.props;

        if (prevProps.visible !== props.visible) {
          this.animateDialog(props.visible);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var props = this.props;

        if (!this.state.modalVisible) {
          return null;
        }

        var animationStyleMap = {
          none: {},
          'slide-up': {
            transform: [{
              translateY: this.state.position
            }]
          },
          'slide-down': {
            transform: [{
              translateY: this.state.position
            }]
          },
          fade: {
            transform: [{
              scale: this.state.scale
            }],
            opacity: this.state.opacity
          }
        };
        return _react2['default'].createElement(_reactNative.Modal, {
          visible: true,
          transparent: true,
          onRequestClose: this.props.onClose,
          supportedOrientations: ['portrait', 'landscape']
        }, _react2['default'].createElement(_reactNative.View, {
          style: [styles.wrap, props.wrapStyle]
        }, _react2['default'].createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: this.onMaskClose
        }, _react2['default'].createElement(_reactNative.Animated.View, {
          style: [styles.absolute, {
            opacity: this.state.opacity
          }]
        }, _react2['default'].createElement(_reactNative.View, {
          style: [styles.absolute, props.maskStyle]
        }))), _react2['default'].createElement(_reactNative.Animated.View, {
          style: [styles.content, props.style, animationStyleMap[props.animationType]]
        }, this.props.children)));
      }
    }]);
    return RCModal;
  }(_react2['default'].Component);

  exports['default'] = RCModal;
  RCModal.defaultProps = {
    wrapStyle: styles.wrap,
    maskStyle: styles.mask,
    animationType: 'slide-up',
    animateAppear: false,
    animationDuration: 300,
    visible: false,
    maskClosable: true,
    onClose: function onClose() {},
    onAnimationEnd: function onAnimationEnd(_visible) {}
  };
  module.exports = exports['default'];
},10445,[13318,13321,13333,13435,10297,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends2 = _$$_REQUIRE(_dependencyMap[0]);

  var _extends3 = _interopRequireDefault(_extends2);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var textStyle = {
    color: '#0ae',
    fontSize: 18,
    textAlign: 'center'
  };

  var styles = _reactNative.StyleSheet.create({
    modal: {
      flexDirection: 'column',
      justifyContent: 'flex-end'
    },
    header: {
      height: 44,
      alignItems: 'center',
      flexDirection: 'row',
      justifyContent: 'center',
      borderBottomWidth: 1,
      borderBottomColor: '#e7e7e7'
    },
    headerItem: {
      height: 44,
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1
    },
    actionText: textStyle,
    okText: {},
    dismissText: {},
    title: (0, _extends3['default'])({}, textStyle, {
      color: '#666'
    })
  });

  exports['default'] = styles;
  module.exports = exports['default'];
},10448,[13201,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _PickerView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _BaseComponent2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _miot = _$$_REQUIRE(_dependencyMap[13]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[14]);

  shouldUpdate = false;

  var DatePicker = function (_BaseComponent) {
    (0, _inherits2.default)(DatePicker, _BaseComponent);

    function DatePicker(props) {
      var _this;

      (0, _classCallCheck2.default)(this, DatePicker);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DatePicker).call(this, props));
      _this._path = new _reactNative.Animated.Value(0);
      _this.state = {
        _isShow: false,
        pickerData: _this.getDateList(),
        selectedIndex: _this.initSelectedTime()
      };
      return _this;
    }

    (0, _createClass2.default)(DatePicker, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.state.selectedIndex !== nextProps.selectedValue) {
          this.setState({
            selectedIndex: nextProps.selectedValue
          });
        }
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        var update = false;

        if (this.state.selectedIndex !== nextProps.selectedValue) {
          update = true;
        }

        return update;
      }
    }, {
      key: "refreshSelectedTime",
      value: function refreshSelectedTime(props) {
        var selectedIndex = [];

        if (props.selectedValue) {
          selectedIndex.push(parseInt(this.props.selectedValue[0]));
          selectedIndex.push(parseInt(this.props.selectedValue[1]));
        } else {
          selectedIndex.push(new Date().getHours() - 1);
          selectedIndex.push(new Date().getMinutes() - 1);
        }

        ;
        this.setState({
          selectedIndex: selectedIndex
        });
      }
    }, {
      key: "initSelectedTime",
      value: function initSelectedTime() {
        var selectedIndex = [];

        if (this.props.HH) {
          if (this.props.selectedValue) {
            selectedIndex.push(parseInt(this.props.selectedValue[0]));
          } else {
            selectedIndex.push(new Date().getHours() - 1);
          }

          if (this.props.mm) {
            if (this.props.selectedValue) {
              selectedIndex.push(parseInt(this.props.selectedValue[1]));
            } else {
              selectedIndex.push(new Date().getMinutes() - 1);
            }
          }
        }

        return selectedIndex;
      }
    }, {
      key: "getDateList",
      value: function getDateList() {
        pickerData = [];

        if (this.props.HH) {
          var hours = [];

          for (var i = 0; i < 24; i++) {
            var num = i;
            num = String(num).length < 2 ? '0' + num : num;
            hours.push(num + '');
          }

          pickerData.push(hours);

          if (this.props.mm) {
            var minutes = [];

            for (var _i = 0; _i < 60; _i++) {
              var min = _i;
              min = String(min).length < 2 ? '0' + min : min;
              minutes.push(min + '');
            }

            pickerData.push(minutes);
          }
        }

        return pickerData;
      }
    }, {
      key: "_getContentPosition",
      value: function _getContentPosition() {
        return {
          justifyContent: 'flex-end',
          alignItems: 'center'
        };
      }
    }, {
      key: "isShowing",
      value: function isShowing() {
        return this.state._isShow;
      }
    }, {
      key: "show",
      value: function show(callback) {
        var _this2 = this;

        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.setState((0, _objectSpread2.default)({
          _isShow: true
        }, state), function () {
          _reactNative.Animated.timing(_this2._path, {
            toValue: 1,
            duration: 250
          }).start(function () {
            callback && callback();
          });
        });
      }
    }, {
      key: "dismiss",
      value: function dismiss(callback) {
        var _this3 = this;

        _reactNative.Animated.timing(this._path, {
          toValue: 0,
          duration: 200
        }).start(function () {
          _this3.setState({
            _isShow: false
          }, function () {
            callback && callback();
          });
        });
      }
    }, {
      key: "renderPicker",
      value: function renderPicker() {
        var _this4 = this;

        return this.state.pickerData.map(function (item, pickerId) {
          if (item) {
            return _react.default.createElement(_PickerView.default, {
              style: _miot.Host.isAndroid ? {
                fontFamily: _FontSizeConstant.default.FontfamilyOfDin
              } : {},
              key: 'picker' + pickerId,
              itemTextColor: _this4.props.itemTextColor,
              itemSelectedColor: _this4.props.itemSelectedColor,
              list: item,
              onPickerSelected: function onPickerSelected(toValue) {
                var selectedValue = _this4.state.selectedIndex;
                selectedValue[pickerId] = parseInt(toValue);

                _this4.setState({
                  selectedIndex: selectedValue
                });

                if (_this4.props.onPickerSelected) {
                  _this4.props.onPickerSelected(selectedValue);
                }
              },
              unit: _this4.props.unit[pickerId],
              selectedIndex: _this4.state.selectedIndex[pickerId],
              fontSize: _this4.getSize(20),
              itemWidth: _this4.mScreenWidth / _this4.state.pickerData.length,
              itemHeight: _this4.props.itemHeight
            });
          }
        });
      }
    }, {
      key: "renderBtnView",
      value: function renderBtnView() {
        var _this5 = this;

        if (this.props.showCancelBtn || this.props.showConformBtn) {
          return _react.default.createElement(_reactNative.View, {
            style: {
              width: this.mScreenWidth,
              height: this.getSize(44),
              backgroundColor: '#eaeaea',
              flexDirection: 'row',
              justifyContent: 'space-between',
              position: 'absolute',
              top: 0
            }
          }, _react.default.createElement(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              _this5.dismiss(function () {
                return _this5.props.onPickerCancel && _this5.props.onPickerCancel(_this5.props.selectedValue);
              });
            },
            style: {
              width: this.getSize(60),
              height: this.getSize(44),
              justifyContent: 'center',
              alignItems: 'center'
            }
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              fontSize: this.props.cancelTextSize,
              fontWeight: '400',
              color: this.props.cancelTextColor
            }
          }, this.props.cancelText)), _react.default.createElement(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              _this5.dismiss(function () {
                return _this5.props.onPickerConfirm && _this5.props.onPickerConfirm(_this5.props.selectedValue);
              });
            },
            style: {
              width: this.getSize(60),
              height: this.getSize(44),
              justifyContent: 'center',
              alignItems: 'center'
            }
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              fontSize: this.props.confirmTextSize,
              fontWeight: '400',
              color: this.props.confirmTextColor
            }
          }, this.props.confirmText)));
        } else {
          return _react.default.createElement(_reactNative.View, {
            style: {
              height: this.getSize(25),
              width: this.mScreenWidth,
              position: 'absolute',
              top: 0,
              backgroundColor: '#eaeaea',
              flexDirection: 'row'
            }
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        if (this.state._isShow || this.props && this.props.removeSubviews === false) {
          return _react.default.createElement(_reactNative.Animated.View, {
            style: (0, _objectSpread2.default)({
              position: 'absolute',
              left: 0,
              right: 0,
              top: 0,
              bottom: 0,
              backgroundColor: this._path.interpolate({
                inputRange: [0, 1],
                outputRange: ['rgba(0, 0, 0, 0)', 'rgba(0, 0, 0, 0.7)']
              })
            }, this._getContentPosition(), {
              transform: [{
                translateX: this._path.interpolate({
                  inputRange: [0, 0.01, 1],
                  outputRange: [-this.mScreenWidth, 0, 0]
                })
              }]
            })
          }, _react.default.createElement(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              if (!_this6.props || _this6.props.coverClickable || _this6.props.coverClickable == null) {
                _this6.dismiss(_this6.props.onCoverPress);
              }
            },
            style: {
              position: 'absolute',
              width: this.mScreenWidth,
              height: this.mScreenHeight
            }
          }), _react.default.createElement(_reactNative.Animated.View, {
            style: {
              opacity: this._path,
              top: this._path.interpolate({
                inputRange: [0, 1],
                outputRange: [this.getSize(200), 0]
              })
            }
          }, _react.default.createElement(_reactNative.View, {
            style: {
              height: this.props.tipViewHeight + _reactNative.StyleSheet.hairlineWidth,
              backgroundColor: '#eaeaea',
              flexDirection: 'column'
            }
          }, _react.default.createElement(_reactNative.Text, {
            style: {
              color: 'rgba(0,0,0,0.7)',
              textAlign: 'center',
              height: this.props.tipViewHeight,
              lineHeight: this.props.tipViewHeight
            }
          }, this.props.timeTip), _react.default.createElement(_reactNative.View, {
            style: {
              backgroundColor: '#dddddd',
              height: _reactNative.StyleSheet.hairlineWidth
            }
          })), this.renderContent()));
        } else {
          return null;
        }
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var topH = this.props.showCancelBtn || this.props.showConformBtn ? this.getSize(44) : this.getSize(25);
        return _react.default.createElement(_reactNative.View, {
          style: {
            height: this.props.itemHeight * 5 + topH,
            width: this.mScreenWidth
          }
        }, _react.default.createElement(_reactNative.View, {
          style: {
            width: this.mScreenWidth,
            height: this.props.itemHeight * 5,
            flexDirection: 'row',
            position: 'absolute',
            bottom: 0,
            justifyContent: 'center',
            alignItems: 'center'
          }
        }, this.renderPicker()), this.renderBtnView());
      }
    }]);
    return DatePicker;
  }(_BaseComponent2.default);

  DatePicker.defaultProps = {
    removeSubviews: false,
    itemTextColor: 0x666666ff,
    itemSelectedColor: 0x4a8dfcff,
    onPickerCancel: null,
    onPickerConfirm: null,
    onPickerSelected: null,
    unit: [(0, _MHLocalizableString.getString)('pick_h'), (0, _MHLocalizableString.getString)('pick_m')],
    selectedValue: [new Date().getHours(), new Date().getMinutes()],
    confirmText: '确定',
    confirmTextSize: 14,
    confirmTextColor: '#333333',
    cancelText: '取消',
    cancelTextSize: 14,
    cancelTextColor: '#333333',
    itemHeight: 40,
    tipViewHeight: 60,
    timeTip: '',
    HH: true,
    mm: true,
    showCancelBtn: false,
    showConformBtn: false,
    coverClickable: true,
    onCoverPress: null
  };
  var _default = DatePicker;
  exports.default = _default;
},10451,[14308,14305,14314,14320,14323,14371,14377,14386,10297,10033,10454,10457,10034,10074,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _BaseComponent2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNativeSvg = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var PickerView = function (_BaseComponent) {
    (0, _inherits2.default)(PickerView, _BaseComponent);

    function PickerView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, PickerView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PickerView).call(this, props));
      _this._previousTop = 0;
      _this.lastTop = 0;
      _this.lastEvent = null;
      _this.lastTwoEvent = null;
      list = ['', ''].concat(props.list).concat(['', '']);
      _this.colorPath = [];
      var length = list.length;

      for (var i = 0; i < length; i++) {
        _this.colorPath.push(new _reactNative.Animated.Value(i == _this.props.selectedIndex + 2 ? 1 : 0));
      }

      _this.path = new _reactNative.Animated.Value(-props.itemHeight * _this.props.selectedIndex);
      _this.state = {
        list: list,
        selectedIndex: props.selectedIndex
      };
      _this.maxTop = 0;
      _this.maxBottom = -props.itemHeight * (list.length - 5);
      _this.onStartShouldSetPanResponder = _this.onStartShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this));
      _this.onMoveShouldSetPanResponder = _this.onMoveShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this));
      _this.onPanResponderGrant = _this.onPanResponderGrant.bind((0, _assertThisInitialized2.default)(_this));
      _this.onPanResponderMove = _this.onPanResponderMove.bind((0, _assertThisInitialized2.default)(_this));
      _this.onPanResponderEnd = _this.onPanResponderEnd.bind((0, _assertThisInitialized2.default)(_this));
      _this.parentTopY = _this.mScreenHeight - props.itemHeight * 5 - _this.getSize(15);
      _this.parentBottomY = _this.mScreenHeight - _this.getSize(15);
      return _this;
    }

    (0, _createClass2.default)(PickerView, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (nextProps) {
          list = ['', ''].concat(nextProps.list).concat(['', '']);
          listChange = JSON.stringify(list) != JSON.stringify(this.state.list);
          indexChange = nextProps.selectedIndex != this.state.selectedIndex;

          if (listChange || indexChange) {
            console.log('shouldComponentUpdate');
            this.path.setValue(-this.props.itemHeight * nextProps.selectedIndex);
            this.colorPath = [];
            var _length = list.length;

            for (var i = 0; i < _length; i++) {
              this.colorPath.push(new _reactNative.Animated.Value(i == nextProps.selectedIndex + 2 ? 1 : 0));
            }

            nextState.list = list;
            nextState.selectedIndex = nextProps.selectedIndex;
            this.maxTop = 0;
            this.maxBottom = -this.props.itemHeight * (list.length - 5);
            return true;
          }
        }

        return false;
      }
    }, {
      key: "onStartShouldSetPanResponder",
      value: function onStartShouldSetPanResponder(evt, gestureState) {
        if (evt.nativeEvent.pageY < this.parentTopY || evt.nativeEvent.pageY > this.parentBottomY) {
          return false;
        } else {
          this.path && this.path.removeAllListeners();
          this.path.stopAnimation();
          this.keyDown = Date.now();
          return true;
        }
      }
    }, {
      key: "onMoveShouldSetPanResponder",
      value: function onMoveShouldSetPanResponder(evt, gestureState) {
        if (evt.nativeEvent.pageY < this.parentTopY || evt.nativeEvent.pageY > this.parentBottomY) {
          return false;
        } else {
          this.path && this.path.removeAllListeners();
          this.path.stopAnimation();
          return true;
        }
      }
    }, {
      key: "onPanResponderGrant",
      value: function onPanResponderGrant(evt, gestureState) {
        this.lastTop = this.path._value;
      }
    }, {
      key: "onPanResponderMove",
      value: function onPanResponderMove(evt, gestureState) {
        if (global.timer != null) {
          global.timer.map(function (item) {
            clearTimeout(item);
          });
        }

        this._previousTop = this.lastTop + gestureState.dy;

        if (this._previousTop > 0) {
          this._previousTop = Math.min(this._previousTop, this.maxTop + this.props.itemHeight);
        } else {
          this._previousTop = Math.max(this._previousTop, this.maxBottom - this.props.itemHeight);
        }

        this.path.setValue(this._previousTop);

        if (this.previousTop) {
          this.velocity = gestureState.dy - this.previousTop;
        } else {
          this.velocity = 0;
        }

        this.previousTop = gestureState.dy;
      }
    }, {
      key: "onPanResponderEnd",
      value: function onPanResponderEnd(evt, gestureState) {
        var _this2 = this;

        var actionTime = Date.now() - this.keyDown;

        if (actionTime < 300 && Math.abs(gestureState.vy) < 0.1) {
          var clickPosition = -(parseInt((gestureState.y0 - this.parentTopY) / this.props.itemHeight) - 2);
          var toValue = this.path._value;
          var number = Math.round(toValue / this.props.itemHeight);
          toValue = this.props.itemHeight * number;
          toValue = toValue + this.props.itemHeight * clickPosition;

          if (toValue > 0) {
            toValue = Math.min(toValue, this.maxTop);
          } else {
            toValue = Math.max(toValue, this.maxBottom);
          }

          if (isNaN(toValue)) {} else {
            _reactNative.Animated.timing(this.path, {
              toValue: toValue,
              duration: 200
            }).start(function () {
              _this2.onSeleted(Math.abs(toValue / _this2.props.itemHeight - 2));
            });
          }
        } else {
          this.lastTop = this._previousTop;

          var _toValue = this._previousTop + gestureState.vy * this.props.itemHeight * 2;

          var _number = Math.round(_toValue / this.props.itemHeight);

          _toValue = this.props.itemHeight * _number;

          if (_toValue > 0) {
            _toValue = Math.min(_toValue, this.maxTop);
          } else {
            _toValue = Math.max(_toValue, this.maxBottom);
          }

          _reactNative.Animated.decay(this.path, {
            velocity: gestureState.vy,
            deceleration: 0.995
          }).start(function () {
            if (_this2.path._value % _this2.props.itemHeight == 0) {
              _this2.path.removeListener(_this2.pathListener);

              _this2.pathListener = null;
            } else {
              if (_this2.pathListener) {
                _this2.path.removeListener(_this2.pathListener);

                _this2.pathListener = null;

                var _toValue2 = Math.round(_this2.path._value / _this2.props.itemHeight) * _this2.props.itemHeight;

                _reactNative.Animated.timing(_this2.path, {
                  toValue: _toValue2,
                  duration: 50
                }).start(function () {
                  _this2.onSeleted(Math.abs(_toValue2 / _this2.props.itemHeight - 2));
                });
              }
            }
          });

          this.pathListener = this.path.addListener(function (listener) {
            if (listener.value < _this2.maxBottom && _this2.pathListener) {
              _this2.path.removeListener(_this2.pathListener);

              _this2.pathListener = null;

              _reactNative.Animated.timing(_this2.path, {
                toValue: _this2.maxBottom
              }).start(function () {
                _this2.onSeleted(Math.abs(_this2.maxBottom / _this2.props.itemHeight - 2));
              });
            } else if (listener.value > _this2.maxTop - _this2.props.itemHeight && _this2.pathListener) {
              _this2.path.removeListener(_this2.pathListener);

              _this2.pathListener = null;

              _reactNative.Animated.timing(_this2.path, {
                toValue: _this2.maxTop
              }).start(function () {
                _this2.onSeleted(Math.abs(_this2.maxTop / _this2.props.itemHeight - 2));
              });
            }
          });
        }
      }
    }, {
      key: "onSeleted",
      value: function onSeleted(selectedIndex) {
        var _this3 = this;

        if (global.timer == null) {
          global.timer = [];
        }

        global.timer.push(setTimeout(function () {
          _this3.colorPath.map(function (item, index) {
            if (item._value == 0 && selectedIndex == index) {
              item.setValue(1);
            } else if (item._value == 1 && selectedIndex != index) {
              item.setValue(0);
            }
          });

          _this3.props.onPickerSelected && _this3.props.onPickerSelected(_this3.state.list[selectedIndex]);
        }, 20));
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount(evt, gestureState) {
        this._panResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: this.onStartShouldSetPanResponder,
          onMoveShouldSetPanResponder: this.onMoveShouldSetPanResponder,
          onPanResponderGrant: this.onPanResponderGrant,
          onPanResponderMove: this.onPanResponderMove,
          onPanResponderRelease: this.onPanResponderEnd,
          onPanResponderTerminate: this.onPanResponderEnd
        });
      }
    }, {
      key: "renderList",
      value: function renderList() {
        var _this4 = this;

        return this.state.list.map(function (item, index) {
          return _this4.renderItem(item, index);
        });
      }
    }, {
      key: "renderItem",
      value: function renderItem(item, index) {
        return _react.default.createElement(_reactNative.View, {
          key: index,
          style: {
            width: this.props.itemWidth,
            height: this.props.itemHeight,
            justifyContent: 'center',
            alignItems: 'center'
          }
        }, _react.default.createElement(_reactNative.Animated.Text, {
          style: [{
            color: this.colorPath[index].interpolate({
              inputRange: [0, 1],
              outputRange: [this.props.itemTextColor, this.props.itemSelectedColor]
            }),
            fontSize: this.props.fontSize ? this.props.fontSize : this.getSize(20),
            backgroundColor: 'transparent',
            fontWeight: 'normal'
          }, this.props.style]
        }, item));
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        return _react.default.createElement(_reactNative.View, {
          style: {
            width: this.props.itemWidth,
            height: this.props.itemHeight * 5 + this.getSize(25),
            backgroundColor: '#ffffff'
          }
        }, _react.default.createElement(_reactNative.View, (0, _extends2.default)({
          ref: function ref(_ref) {
            return _this5.ref = _ref;
          }
        }, this._panResponder.panHandlers, {
          style: {
            overflow: 'hidden',
            width: this.props.itemWidth,
            height: this.props.itemHeight * 5 + this.getSize(25),
            backgroundColor: this.props.bckColor
          }
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: {
            transform: [{
              translateY: this.path
            }]
          }
        }, this.renderList()), _react.default.createElement(_reactNative.View, {
          style: {
            position: 'absolute',
            width: this.props.itemWidth,
            height: _reactNative.StyleSheet.hairlineWidth,
            top: this.props.itemHeight * 4 / 2,
            backgroundColor: '#999999'
          }
        }), _react.default.createElement(_reactNative.Text, {
          style: {
            position: 'absolute',
            width: this.props.itemWidth,
            top: this.props.itemHeight * 4 / 2 + 12,
            left: this.props.itemWidth * 0.5 + 20,
            fontSize: 12,
            color: this.props.itemSelectedColor
          }
        }, this.props.unit), _react.default.createElement(_reactNative.View, {
          style: {
            position: 'absolute',
            width: this.props.itemWidth,
            height: _reactNative.StyleSheet.hairlineWidth,
            top: this.props.itemHeight * 6 / 2,
            backgroundColor: '#999999'
          }
        }), _react.default.createElement(_reactNativeSvg.default, {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return false;
          },
          onResponderStart: function onResponderStart() {
            return false;
          },
          style: {
            position: 'absolute',
            top: 0
          },
          height: this.props.itemHeight * 1,
          width: this.props.itemWidth
        }, _react.default.createElement(_reactNativeSvg.LinearGradient, {
          id: "grad",
          x1: "0",
          y1: this.props.itemHeight * 1,
          x2: 0,
          y2: "0"
        }, _react.default.createElement(_reactNativeSvg.Stop, {
          offset: "0",
          stopColor: this.props.bckColor,
          stopOpacity: "0.2"
        }), _react.default.createElement(_reactNativeSvg.Stop, {
          offset: "1",
          stopColor: this.props.bckColor,
          stopOpacity: "1"
        })), _react.default.createElement(_reactNativeSvg.Rect, {
          x: "0",
          y: "0",
          width: this.props.itemWidth,
          height: this.props.itemHeight * 1,
          fill: "url(#grad)",
          clipPath: "url(#clip)"
        })), _react.default.createElement(_reactNativeSvg.default, {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return false;
          },
          onResponderStart: function onResponderStart() {
            return false;
          },
          style: {
            position: 'absolute',
            bottom: this.getSize(25)
          },
          height: this.props.itemHeight * 1,
          width: this.props.itemWidth
        }, _react.default.createElement(_reactNativeSvg.LinearGradient, {
          id: "grad",
          x1: "0",
          y1: this.props.itemHeight * 1,
          x2: 0,
          y2: "0"
        }, _react.default.createElement(_reactNativeSvg.Stop, {
          offset: "0",
          stopColor: this.props.bckColor,
          stopOpacity: "1"
        }), _react.default.createElement(_reactNativeSvg.Stop, {
          offset: "1",
          stopColor: this.props.bckColor,
          stopOpacity: "0.4"
        })), _react.default.createElement(_reactNativeSvg.Rect, {
          x: "0",
          y: "0",
          width: this.props.itemWidth,
          height: this.props.itemHeight * 1,
          fill: "url(#grad)",
          clipPath: "url(#clip)"
        })), _react.default.createElement(_reactNative.View, {
          style: {
            width: this.mScreenWidth,
            height: this.getSize(25),
            bottom: 0,
            backgroundColor: this.props.bckColor,
            position: 'absolute'
          }
        })));
      }
    }]);
    return PickerView;
  }(_BaseComponent2.default);

  PickerView.defaultProps = {
    itemTextColor: 0x333333ff,
    itemSelectedColor: 0x1097D5ff,
    itemHeight: 40,
    onPickerSelected: null,
    selectedIndex: 0,
    bckColor: '#eaeaea',
    unit: '时'
  };
  var _default = PickerView;
  exports.default = _default;
},10454,[14308,14305,14344,14320,14323,14371,14377,14374,14386,10297,10033,10457,11485]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var BaseComponent = function (_Component) {
    (0, _inherits2.default)(BaseComponent, _Component);

    function BaseComponent(props) {
      var _this;

      (0, _classCallCheck2.default)(this, BaseComponent);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BaseComponent).call(this, props));
      _this.mScreenWidth = _reactNative.Dimensions.get('window').width;
      _this.mScreenHeight = _reactNative.Dimensions.get('window').height;
      _this.mOnePixel = (_reactNative.PixelRatio.get() == 3 ? 2 : 1) / _reactNative.PixelRatio.get();
      return _this;
    }

    (0, _createClass2.default)(BaseComponent, [{
      key: "getSize",
      value: function getSize(size) {
        return parseInt(this.mScreenWidth * size / 375);
      }
    }]);
    return BaseComponent;
  }(_react.Component);

  var _default = BaseComponent;
  exports.default = _default;
},10457,[14308,14305,14320,14323,14371,14377,14386,10297,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 17,
    "height": 29,
    "scales": [1],
    "hash": "9acceeea8d0d2ae8b4c2aab1d3afce60",
    "name": "icon_time_sel",
    "type": "png"
  });
},10460,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 54,
    "height": 54,
    "scales": [1],
    "hash": "711e24a340d48bfd51c231899ad5c702",
    "name": "icon_time_repeat_sel",
    "type": "png"
  });
},10463,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.dmaker.airfresh_room/resources",
    "width": 54,
    "height": 54,
    "scales": [1],
    "hash": "c745a22ed48531b081c0866bda6a7467",
    "name": "icon_time_repeat_nor",
    "type": "png"
  });
},10466,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var FontConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var itemH = 53 * _MHGlobalData.default.HeightPersent;
  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var currentHex = _LocalTimeStrings.default.hexNumEveryDay;

  var CustomTimePage = function (_React$Component) {
    (0, _inherits2.default)(CustomTimePage, _React$Component);

    function CustomTimePage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, CustomTimePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomTimePage).call(this, props, context));
      _this.state = {
        dataSource: _this._createMenuData()
      };
      return _this;
    }

    (0, _createClass2.default)(CustomTimePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var hex = this.props.navigation.getParam("hex");
        currentHex = hex;

        var timeShow = _LocalTimeStrings.default.returnWeekShow(hex);

        this._initDataSource(hex, timeShow);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._callBack();
      }
    }, {
      key: "_createMenuData",
      value: function _createMenuData() {
        var _this2 = this;

        var listMenuData = [{
          'name': _MHLocalizableString.LocalizedStrings.everyDay,
          'choose': false,
          'hexSum': _LocalTimeStrings.default.hexNumEveryDay,
          'func': function func() {
            currentHex = _LocalTimeStrings.default.hexNumEveryDay;

            _this2._preRowItem(0);
          }
        }, {
          'name': _MHLocalizableString.LocalizedStrings.weekday,
          'choose': false,
          'hexSum': _LocalTimeStrings.default.hexNumWeekDay,
          'func': function func() {
            currentHex = _LocalTimeStrings.default.hexNumWeekDay;

            _this2._preRowItem(1);
          }
        }, {
          'name': _MHLocalizableString.LocalizedStrings.weekend,
          'choose': false,
          'hexSum': _LocalTimeStrings.default.hexNumWeekend,
          'func': function func() {
            currentHex = _LocalTimeStrings.default.hexNumWeekend;

            _this2._preRowItem(2);
          }
        }, {
          'name': _MHLocalizableString.LocalizedStrings.custom,
          'subtitle': '',
          'hexSum': '0',
          'choose': false,
          'func': function func() {
            _this2.props.navigation.navigate('DayTime', {
              routeTitle: _MHLocalizableString.LocalizedStrings.navigationTitleTimeCustom,
              hex: currentHex,
              callback: function callback(_callback) {
                currentHex = _callback;

                var timeShow = _LocalTimeStrings.default.returnWeekShow(_callback);

                _this2._initDataSource(_callback, timeShow);
              }
            });
          }
        }];
        this._menuData = listMenuData;
        return [{
          'title': "",
          'data': listMenuData
        }];
      }
    }, {
      key: "_initDataSource",
      value: function _initDataSource(hex, timeStr) {
        var index = 0;

        if (timeStr == _MHLocalizableString.LocalizedStrings.everyDay) {
          this._menuData[0].hexSum = hex;
          index = 0;
        } else if (timeStr == _MHLocalizableString.LocalizedStrings.weekday) {
          this._menuData[1].hexSum = hex;
          index = 1;
        } else if (timeStr == _MHLocalizableString.LocalizedStrings.weekend) {
          this._menuData[2].hexSum = hex;
          index = 2;
        } else {
          this._menuData[3].hexSum = hex;
          this._menuData[3].subtitle = timeStr;
          index = 3;
        }

        this._preRowItem(index);

        this._reloadDataSource();
      }
    }, {
      key: "_reloadDataSource",
      value: function _reloadDataSource() {
        this.setState({
          dataSource: [{
            'title': "",
            'data': this._menuData
          }]
        });
      }
    }, {
      key: "_preRowItem",
      value: function _preRowItem(index) {
        var dataSource = this._menuData;

        for (var i = 0; i < dataSource.length; i++) {
          var item = dataSource[i];
          item.choose = i == index ? true : false;
        }

        if (index !== dataSource.length - 1) {
          dataSource[3].subtitle = "";
        }

        this._reloadDataSource();
      }
    }, {
      key: "_callBack",
      value: function _callBack() {
        if (this.props.navigation.state.params.callback) {
          this.props.navigation.state.params.callback(currentHex);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var title = this.props.navigation.getParam("routeTitle");
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: title,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[17]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[18]),
          onPressLeft: function onPressLeft() {
            _this3.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.SectionList, {
          sections: this.state.dataSource,
          renderItem: this._renderItem.bind(this),
          keyExtractor: function keyExtractor(item, index) {
            return item + index;
          },
          stickySectionHeadersEnabled: false,
          SectionSeparatorComponent: function SectionSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [styles.separatorTotal]
            });
          },
          ItemSeparatorComponent: function ItemSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [styles.separatorBackground]
            }, _react.default.createElement(_reactNative.View, {
              style: [styles.separator]
            }));
          }
        }));
      }
    }, {
      key: "_renderItem",
      value: function _renderItem(data) {
        var _this4 = this;

        var rowData = data.item;
        var title = rowData.name;
        var subtitle = rowData.subtitle;

        if (subtitle) {
          return _react.default.createElement(_reactNative.TouchableHighlight, {
            underlayColor: '#efeff0',
            onPress: function onPress() {
              return _this4._pressRow(rowData);
            }
          }, _react.default.createElement(_reactNative.View, {
            style: {
              backgroundColor: '#ffffff'
            }
          }, _react.default.createElement(_reactNative.View, {
            style: styles.rowContainer
          }, _react.default.createElement(_reactNative.View, {
            style: styles.leftViewStyle
          }, _react.default.createElement(_reactNative.Text, {
            style: styles.title
          }, title), _react.default.createElement(_reactNative.Text, {
            style: styles.detailTitle
          }, rowData.subtitle ? rowData.subtitle : '')), _react.default.createElement(_reactNative.Image, {
            style: styles.subArrow,
            source: rowData.choose == true ? _$$_REQUIRE(_dependencyMap[19]) : null
          }))));
        } else {
          return _react.default.createElement(_reactNative.TouchableHighlight, {
            underlayColor: '#efeff0',
            onPress: function onPress() {
              return _this4._pressRow(rowData);
            }
          }, _react.default.createElement(_reactNative.View, {
            style: {
              backgroundColor: '#ffffff'
            }
          }, _react.default.createElement(_reactNative.View, {
            style: styles.rowContainer
          }, _react.default.createElement(_reactNative.View, {
            style: styles.leftViewStyle
          }, _react.default.createElement(_reactNative.Text, {
            style: styles.title
          }, title)), _react.default.createElement(_reactNative.Image, {
            style: styles.subArrow,
            source: rowData.choose == true ? _$$_REQUIRE(_dependencyMap[19]) : null
          }))));
        }
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(item) {
        item.func();
      }
    }]);
    return CustomTimePage;
  }(_react.default.Component);

  exports.default = CustomTimePage;

  CustomTimePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    separatorBackground: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: '#ffffff'
    },
    separatorTotal: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: _ColorConstant.default.ColorOfSperate
    },
    separator: {
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      flex: 1,
      marginLeft: 20
    },
    navStyle: {
      flex: 1
    },
    container: {
      flex: 1,
      backgroundColor: '#f7f7f7'
    },
    rowContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      flex: 1,
      backgroundColor: '#ffffff',
      height: itemH,
      marginLeft: 25,
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    emptySectionHeader: {
      height: 0
    },
    list: {
      alignSelf: 'stretch'
    },
    leftViewStyle: {},
    title: {
      fontSize: FontConstant.FontOfRepateTitle,
      color: _ColorConstant.default.ColorRepateTitle
    },
    detailTitle: {
      fontSize: FontConstant.FontOfRepateDetailTitle,
      color: _ColorConstant.default.ColorRepateDetailTitle,
      marginTop: 5 * _MHGlobalData.default.HeightPersent
    },
    subArrow: {
      width: 18,
      height: 18,
      marginRight: 20
    }
  });
},10469,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10040,10331,10334,10463]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ui = _$$_REQUIRE(_dependencyMap[9]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _MHGlobalData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var FontConstant = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LocalTimeStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var itemH = 53 * _MHGlobalData.default.HeightPersent;
  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var currentHex = _LocalTimeStrings.default.hexNumEveryDay;

  var DayTimePage = function (_React$Component) {
    (0, _inherits2.default)(DayTimePage, _React$Component);

    function DayTimePage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, DayTimePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DayTimePage).call(this, props, context));
      _this.state = {
        dataSource: _this._createMenuData()
      };
      return _this;
    }

    (0, _createClass2.default)(DayTimePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var hex = this.props.navigation.getParam("hex");
        currentHex = hex;

        this._initDataSource(hex);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._callBack();
      }
    }, {
      key: "_createMenuData",
      value: function _createMenuData() {
        var listMenuData = [{
          'name': _MHLocalizableString.LocalizedStrings.Monday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Tuesday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Wednesday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Thursday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Friday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Saturday,
          'choose': false,
          'func': function func() {}
        }, {
          'name': _MHLocalizableString.LocalizedStrings.Sunday,
          'choose': false,
          'func': function func() {}
        }];
        this._menuData = listMenuData;
        return [{
          'title': "",
          'data': listMenuData
        }];
      }
    }, {
      key: "_initDataSource",
      value: function _initDataSource(hexSum) {
        var dataSource = this._menuData;

        var binary = _LocalTimeStrings.default.hexToBinaryFrom1To7(hexSum);

        for (var i = 0; i < dataSource.length; i++) {
          if (binary.substr(i, 1) == '1') {
            dataSource[i].choose = true;
          } else {
            dataSource[i].choose = false;
          }
        }

        this._reloadDataSource();
      }
    }, {
      key: "_reloadDataSource",
      value: function _reloadDataSource() {
        this.setState({
          dataSource: [{
            'title': "",
            'data': this._menuData
          }]
        });
      }
    }, {
      key: "_binaryToHexNum",
      value: function _binaryToHexNum() {
        var binaryStr = '';
        var dayArr = this._menuData;

        for (var i = 0; i < dayArr.length; i++) {
          if (dayArr[i].choose == true) {
            binaryStr = '1' + binaryStr;
          } else {
            binaryStr = '0' + binaryStr;
          }
        }

        binaryStr = binaryStr + '0';
        var hexNum = parseInt(binaryStr, 2).toString(16);

        if (hexNum.length < 2) {
          hexNum = '0' + hexNum;
        }

        return hexNum;
      }
    }, {
      key: "_callBack",
      value: function _callBack() {
        var nowHex = this._binaryToHexNum();

        currentHex = currentHex !== nowHex ? nowHex : currentHex;

        if (this.props.navigation.state.params.callback) {
          this.props.navigation.state.params.callback(currentHex);
        }
      }
    }, {
      key: "_onrowPress",
      value: function _onrowPress(index) {
        var dataSource = this._menuData;
        this._menuData[index].choose = !this._menuData[index].choose;

        this._reloadDataSource();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var title = this.props.navigation.getParam("routeTitle");
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content",
          animated: true
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: title,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[17]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[18]),
          onPressLeft: function onPressLeft() {
            _this2.props.navigation.goBack();
          }
        }), _react.default.createElement(_reactNative.SectionList, {
          sections: this.state.dataSource,
          renderItem: this._renderItem.bind(this),
          keyExtractor: function keyExtractor(item, index) {
            return item + index;
          },
          stickySectionHeadersEnabled: false,
          SectionSeparatorComponent: function SectionSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [styles.separatorTotal]
            });
          },
          ItemSeparatorComponent: function ItemSeparatorComponent() {
            return _react.default.createElement(_reactNative.View, {
              style: [styles.separatorBackground]
            }, _react.default.createElement(_reactNative.View, {
              style: [styles.separator]
            }));
          }
        }));
      }
    }, {
      key: "_renderItem",
      value: function _renderItem(data) {
        var _this3 = this;

        var rowData = data.item;
        var title = rowData.name;
        return _react.default.createElement(_reactNative.TouchableHighlight, {
          underlayColor: '#efeff0',
          onPress: function onPress() {
            return _this3._pressRow(data);
          }
        }, _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: '#ffffff'
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.rowContainer
        }, _react.default.createElement(_reactNative.View, {
          style: styles.leftViewStyle
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.title
        }, title)), _react.default.createElement(_reactNative.Image, {
          style: styles.subArrow,
          source: rowData.choose == true ? _$$_REQUIRE(_dependencyMap[19]) : null
        }))));
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(item) {
        this._onrowPress(item.index);
      }
    }]);
    return DayTimePage;
  }(_react.default.Component);

  exports.default = DayTimePage;

  DayTimePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    sectionHeader: {
      height: 30,
      backgroundColor: '#f7f7f7',
      justifyContent: 'center',
      marginLeft: 10
    },
    headerText: {
      fontSize: FontConstant.setSpTextNew(12),
      color: 'rgba(0,0,0,0.4)'
    },
    separatorBackground: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: '#ffffff'
    },
    separatorTotal: {
      height: _reactNative.StyleSheet.hairlineWidth,
      backgroundColor: _ColorConstant.default.ColorOfSperate
    },
    separator: {
      backgroundColor: _ColorConstant.default.ColorOfSperate,
      flex: 1,
      marginLeft: 20
    },
    container: {
      flex: 1,
      backgroundColor: '#f7f7f7'
    },
    rowContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      flex: 1,
      backgroundColor: '#ffffff',
      height: itemH,
      marginLeft: 25,
      marginRight: 20,
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    list: {
      alignSelf: 'stretch'
    },
    leftViewStyle: {},
    title: {
      fontSize: FontConstant.FontOfDayTimeTitle,
      color: _ColorConstant.default.ColorDayTimeTitle
    },
    subArrow: {
      width: 18,
      height: 18,
      marginRight: 20
    }
  });
},10472,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10040,10331,10334,10463]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _ui = _$$_REQUIRE(_dependencyMap[8]);

  var _MHLocalizableString = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _MHGlobalData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ColorConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _FontSizeConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _MainPageNavigation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _reactNativeVideo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var TestPage = function (_React$Component) {
    (0, _inherits2.default)(TestPage, _React$Component);

    function TestPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, TestPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TestPage).call(this, props, context));
      _this.state = {
        rate: 1,
        volume: 1,
        muted: false,
        resizeMode: 'contain',
        controls: false,
        paused: false,
        skin: 'custom',
        ignoreSilentSwitch: null,
        isBuffering: false,
        videoSource: {
          uri: 'http://cookbook.supor.com/Swast2SpEjewRAnE.mp4',
          type: 'mp4',
          isAsset: true,
          isNetwork: true
        }
      };
      return _this;
    }

    (0, _createClass2.default)(TestPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "onLoad",
      value: function onLoad(data) {
        console.log('On load fired!');
      }
    }, {
      key: "onProgress",
      value: function onProgress(data) {}
    }, {
      key: "onBuffer",
      value: function onBuffer(_ref) {
        var isBuffering = _ref.isBuffering;
      }
    }, {
      key: "render",
      value: function render() {
        var title = "test";
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.StatusBar, {
          barStyle: "dark-content"
        }), _react.default.createElement(_MainPageNavigation.default, {
          style: {
            backgroundColor: _ColorConstant.default.ColorOff7f7f7
          },
          title: title,
          titleColor: '#4a4a4a',
          leftImageNormalSource: _$$_REQUIRE(_dependencyMap[16]),
          leftImageHighlightedSource: _$$_REQUIRE(_dependencyMap[17]),
          onPressLeft: function onPressLeft() {
            _miot.Package.exit();
          }
        }), _react.default.createElement(_reactNative.View, {
          style: {
            marginTop: 100,
            alignItems: 'center',
            justifyContent: 'center'
          }
        }, _react.default.createElement(_reactNative.Text, null, "\u6211\u662F\u6D4B\u8BD5\u9875\u9762"), _react.default.createElement(_reactNative.View, {
          style: styles.parent
        }, _react.default.createElement(_reactNative.View, {
          style: styles.children
        }, _react.default.createElement(_reactNative.Text, null, "\u6211\u662F\u5185\u90E8\u7EDD\u5BF9\u5B9A\u4F4D\u6587\u672C")))));
      }
    }]);
    return TestPage;
  }(_react.default.Component);

  exports.default = TestPage;

  TestPage.navigationOptions = function (_ref2) {
    var navigation = _ref2.navigation;
    return {
      header: null
    };
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    webViewStyle: {},
    separatorStyle: {
      height: 0.5,
      alignSelf: 'stretch',
      backgroundColor: '#c5c5c5'
    },
    fullScreen: {
      position: 'absolute',
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    },
    parent: {
      width: 300,
      height: 40,
      backgroundColor: 'yellow',
      alignItems: 'center',
      position: 'absolute'
    },
    children: {
      height: 20,
      justifyContent: 'center',
      top: -10
    }
  });
},10475,[14305,14320,14323,14371,14377,14386,10297,10033,10230,10010,10074,10031,10046,10034,10349,10124,10331,10334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  module.exports = _interopRequireDefault;
},14305,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();

    _getRequireWildcardCache = function _getRequireWildcardCache() {
      return cache;
    };

    return cache;
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        "default": obj
      };
    }

    var cache = _getRequireWildcardCache();

    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }

    newObj["default"] = obj;

    if (cache) {
      cache.set(obj, newObj);
    }

    return newObj;
  }

  module.exports = _interopRequireWildcard;
},14308,[14311]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
},14311,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(Object(source));

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  module.exports = _objectSpread;
},14314,[14317]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty;
},14317,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck;
},14320,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  module.exports = _createClass;
},14323,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},14326,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warning = _$$_REQUIRE(_dependencyMap[0]);

  var warnedKeys = {};

  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }

    warning(false, message);
    warnedKeys[key] = true;
  }

  module.exports = warnOnce;
},14329,[14332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _$$_REQUIRE(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},14332,[14335]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},14335,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('AccessibilityInfo');

  exports.default = _default;
},14338,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

  var turboModuleProxy = global.__turboModuleProxy;

  function get(name) {
    if (!global.RN$Bridgeless) {
      var legacyModule = NativeModules[name];

      if (legacyModule != null) {
        return legacyModule;
      }
    }

    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      return module;
    }

    return null;
  }

  function getEnforcing(name) {
    var module = get(name);
    (0, _invariant.default)(module != null, "TurboModuleRegistry.getEnforcing(...): '" + name + "' could not be found. " + 'Verify that a module by this name is registered in the native binary.');
    return module;
  }
},14341,[14305,14326,10042]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
},14344,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }

  module.exports = _slicedToArray;
},14347,[14350,14353,14356]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles;
},14350,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(arr, i) {
    if (!((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit;
},14353,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  module.exports = _nonIterableRest;
},14356,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableSpread = _$$_REQUIRE(_dependencyMap[2]);

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  module.exports = _toConsumableArray;
},14359,[14362,14365,14368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  module.exports = _arrayWithoutHoles;
},14362,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  module.exports = _iterableToArray;
},14365,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  module.exports = _nonIterableSpread;
},14368,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  module.exports = _possibleConstructorReturn;
},14371,[14311,14374]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},14374,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf;
},14377,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var superPropBase = _$$_REQUIRE(_dependencyMap[0]);

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  module.exports = _get;
},14380,[14383]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  module.exports = _superPropBase;
},14383,[14377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  module.exports = _inherits;
},14386,[14389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf;
},14389,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      console.warn('Attempting to get config for view manager: ' + viewManagerName);
      return null;
    },
    getConstants: function getConstants() {
      return {};
    },
    getConstantsForViewManager: function getConstantsForViewManager(viewManagerName) {},
    getDefaultEventTypes: function getDefaultEventTypes() {
      return [];
    },
    playTouchSound: function playTouchSound() {},
    lazilyLoadView: function lazilyLoadView(name) {},
    createView: function createView(reactTag, viewName, rootTag, props) {},
    updateView: function updateView(reactTag, viewName, props) {},
    focus: function focus(reactTag) {},
    blur: function blur(reactTag) {},
    findSubviewIn: function findSubviewIn(reactTag, point, callback) {},
    dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandID, commandArgs) {},
    measure: function measure(reactTag, callback) {},
    measureInWindow: function measureInWindow(reactTag, callback) {},
    viewIsDescendantOf: function viewIsDescendantOf(reactTag, ancestorReactTag, callback) {},
    measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {},
    measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {},
    setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {},
    clearJSResponder: function clearJSResponder() {},
    configureNextLayoutAnimation: function configureNextLayoutAnimation(config, callback, errorCallback) {},
    removeSubviewsFromContainerWithID: function removeSubviewsFromContainerWithID(containerID) {},
    replaceExistingNonRootView: function replaceExistingNonRootView(reactTag, newReactTag) {},
    setChildren: function setChildren(containerTag, reactTags) {},
    manageChildren: function manageChildren(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {},
    setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental(enabled) {},
    sendAccessibilityEvent: function sendAccessibilityEvent(reactTag, eventType) {},
    showPopupMenu: function showPopupMenu(reactTag, items, error, success) {},
    dismissPopupMenu: function dismissPopupMenu() {}
  };
},14392,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _NativeUIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var UIManagerProperties = _$$_REQUIRE(_dependencyMap[5]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[6]);

  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;

  function _getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }

    return NativeUIManagerConstants;
  }

  var UIManagerJS = (0, _objectSpread2.default)({}, _NativeUIManager.default, {
    getConstants: function getConstants() {
      return _getConstants();
    },
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {
        try {
          viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
          viewManagerConfigs[viewManagerName] = null;
        }
      }

      var config = viewManagerConfigs[viewManagerName];

      if (config) {
        return config;
      }

      if (!global.nativeCallSyncHook) {
        return config;
      }

      if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);

        triedLoadingConfig.add(viewManagerName);

        if (result.viewConfig) {
          _getConstants()[viewManagerName] = result.viewConfig;
          lazifyViewManagerConfig(viewManagerName);
        }
      }

      return viewManagerConfigs[viewManagerName];
    }
  });
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;

  function lazifyViewManagerConfig(viewName) {
    var viewConfig = _getConstants()[viewName];

    viewManagerConfigs[viewName] = viewConfig;

    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }

  if (_getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
        get: function get() {
          return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  if (!global.nativeCallSyncHook) {
    Object.keys(_getConstants()).forEach(function (viewManagerName) {
      if (!UIManagerProperties.includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];
        }

        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
          get: function get() {
            console.warn("Accessing view manager configs directly off UIManager via UIManager['" + viewManagerName + "'] " + ("is no longer supported. Use UIManager.getViewManagerConfig('" + viewManagerName + "') instead."));
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }

  module.exports = UIManagerJS;
},14395,[14305,14314,14398,10042,10066,14404,10084]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('UIManager');

  exports.default = _default;
},14398,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('PlatformConstants');

  exports.default = _default;
},14401,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dismissPopupMenu', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'playTouchSound', 'removeRootView', 'removeSubviewsFromContainerWithID', 'replaceExistingNonRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'showPopupMenu', 'updateView', 'viewIsDescendantOf', 'PopupMenu', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
},14404,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = _$$_REQUIRE(_dependencyMap[0]);

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  module.exports = _objectWithoutProperties;
},14407,[14410]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose;
},14410,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var NativeDeviceInfo = NativeModule;
  var _default = NativeDeviceInfo;
  exports.default = _default;
},14413,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedLayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTransformPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var ImageStylePropTypes = _objectSpread({}, DeprecatedLayoutPropTypes, DeprecatedShadowPropTypesIOS, DeprecatedTransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(['center', 'contain', 'cover', 'repeat', 'stretch']),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: DeprecatedColorPropType,
    borderColor: DeprecatedColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: DeprecatedColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},14416,[14314,14419,14425,14428,14431,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _$$_REQUIRE(_dependencyMap[0]);

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},14419,[14422]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var matchers = getMatchers();
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }

    if (t < 0.5) {
      return q;
    }

    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";

  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var cachedMatchers;

  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }

    return cachedMatchers;
  }

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},14422,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap', 'wrap-reverse']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},14425,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedShadowPropTypesIOS = {
    shadowColor: DeprecatedColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},14428,[14419,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[1]);

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The transformMatrix style property is deprecated. Use `transform: [{ matrix: ... }]` instead.");
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The decomposedMatrix style property is deprecated. Use `transform: [...]` instead.");
    }
  };

  var DeprecatedTransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = DeprecatedTransformPropTypes;
},14431,[10318,10366]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTextStylePropTypes = _objectSpread({}, DeprecatedViewStylePropTypes, {
    color: DeprecatedColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: DeprecatedColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: DeprecatedColorPropType,
    textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = DeprecatedTextStylePropTypes;
},14434,[14314,14419,14437,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedLayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTransformPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var DeprecatedViewStylePropTypes = _objectSpread({}, DeprecatedLayoutPropTypes, DeprecatedShadowPropTypesIOS, DeprecatedTransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: DeprecatedColorPropType,
    borderColor: DeprecatedColorPropType,
    borderTopColor: DeprecatedColorPropType,
    borderRightColor: DeprecatedColorPropType,
    borderBottomColor: DeprecatedColorPropType,
    borderLeftColor: DeprecatedColorPropType,
    borderStartColor: DeprecatedColorPropType,
    borderEndColor: DeprecatedColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = DeprecatedViewStylePropTypes;
},14437,[14314,14419,14425,14428,14431,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewViewConfigAndroid = _$$_REQUIRE(_dependencyMap[2]);

  var registerGeneratedViewConfig = _$$_REQUIRE(_dependencyMap[3]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[4]);

  var NativeViewComponent;
  var viewConfig;
  {
    NativeViewComponent = requireNativeComponent('RCTView');
  }
  var __INTERNAL_VIEW_CONFIG = viewConfig;
  exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
  var _default = NativeViewComponent;
  exports.default = _default;
},14440,[10066,10114,14581,14584,10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2]),
      React = _$$_REQUIRE(_dependencyMap[3]),
      Scheduler = _$$_REQUIRE(_dependencyMap[4]);

  function ReactError(error) {
    error.name = "Invariant Violation";
    return error;
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          if (!JSCompiler_inline_result) throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      if (eventPluginOrder) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (namesToPlugins[pluginName]) throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type."));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw ReactError(Error("Touch object is missing identifier."));
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  });
  var instanceCache = new Map(),
      instanceProps = new Map();

  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (getInstanceFromNode(target)) throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function flushDiscreteUpdatesImpl() {}

  var isInsideEventHandler = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) if (flushDiscreteUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
      }
    });
  }

  ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };

  getInstanceFromNode = getInstanceFromTag;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    var tag = inst.stateNode._nativeTag;
    undefined === tag && (tag = inst.stateNode.canonical._nativeTag);
    if (!tag) throw ReactError(Error("All native instances should have a tag."));
    return tag;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental");
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder");
  var MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    if (2 !== isFiberMountedImpl(fiber)) throw ReactError(Error("Unable to find node on an unmounted component."));
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = isFiberMountedImpl(fiber);
      if (3 === alternate) throw ReactError(Error("Unable to find node on an unmounted component."));
      return 1 === alternate ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw ReactError(Error("Unable to find node on an unmounted component."));
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
        }
      }
      if (a.alternate !== b) throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
    }

    if (3 !== a.tag) throw ReactError(Error("Unable to find node on an unmounted component."));
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      var relativeNode = undefined;
      "number" === typeof relativeToNativeNode ? relativeNode = relativeToNativeNode : relativeToNativeNode._nativeTag ? relativeNode = relativeToNativeNode._nativeTag : relativeToNativeNode.canonical && relativeToNativeNode.canonical._nativeTag && (relativeNode = relativeToNativeNode.canonical._nativeTag);
      null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }();

  function shim$1() {
    throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
  }

  var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      UPDATE_SIGNAL = {},
      nextReactTag = 3;

  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }

  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);

      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }

  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;

    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });

    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout,
      BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority,
      fakeCallbackNode = {},
      requestPaint = undefined !== Scheduler_requestPaint ? Scheduler_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = false,
      initialTimeMs = Scheduler_now(),
      now = 1e4 > initialTimeMs ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return 99;

      case Scheduler_UserBlockingPriority:
        return 98;

      case Scheduler_NormalPriority:
        return 97;

      case Scheduler_LowPriority:
        return 96;

      case Scheduler_IdlePriority:
        return 95;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return Scheduler_ImmediatePriority;

      case 98:
        return Scheduler_UserBlockingPriority;

      case 97:
        return Scheduler_NormalPriority;

      case 96:
        return Scheduler_LowPriority;

      case 95:
        return Scheduler_IdlePriority;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function runWithPriority(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    null !== immediateQueueCallbackNode && Scheduler_cancelCallback(immediateQueueCallbackNode);
    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }

  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (1073741823 === expirationTime) return 99;
    if (1 === expirationTime) return 95;
    currentTime = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - currentTime);
    return 0 >= currentTime ? 99 : 250 >= currentTime ? 98 : 5250 >= currentTime ? 97 : 95;
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        lazyComponent._status = 0;
        result = lazyComponent._ctor;
        result = result();
        result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        });

        switch (lazyComponent._status) {
          case 1:
            return lazyComponent._result;

          case 2:
            throw lazyComponent._result;
        }

        lazyComponent._result = result;
        throw result;
    }
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime, suspenseConfig) {
    return {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        if ("function" !== typeof _callback3) throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + _callback3));

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;

        if (element) {
          if (1 !== element.tag) throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
          inst = element.stateNode;
        }

        if (!inst) throw ReactError(Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue."));
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      if ("string" !== typeof returnFiber) throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
      if (!element._owner) throw ReactError(Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw ReactError(Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")."));
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw ReactError(Error("An iterable object provided no iterator."));

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);

              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, ReactError(Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var SubtreeSuspenseContextMask = 1,
      InvisibleParentSuspenseContext = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        if (null !== node.memoizedState) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var NoEffect$1 = 0,
      UnmountSnapshot = 2,
      UnmountMutation = 4,
      MountMutation = 8,
      UnmountLayout = 16,
      MountLayout = 32,
      MountPassive = 64,
      UnmountPassive = 128,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      renderExpirationTime$1 = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      nextCurrentHook = null,
      firstWorkInProgressHook = null,
      workInProgressHook = null,
      nextWorkInProgressHook = null,
      remainingExpirationTime = 0,
      componentUpdateQueue = null,
      sideEffectTag = 0,
      didScheduleRenderPhaseUpdate = false,
      renderPhaseUpdates = null,
      numberOfReRenders = 0;

  function throwInvalidHookError() {
    throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!is(nextDeps[i], prevDeps[i])) return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
    renderExpirationTime$1 = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    nextCurrentHook = null !== current ? current.memoizedState : null;
    ReactCurrentDispatcher$1.current = null === nextCurrentHook ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    workInProgress = Component(props, refOrContext);

    if (didScheduleRenderPhaseUpdate) {
      do {
        didScheduleRenderPhaseUpdate = false, numberOfReRenders += 1, nextCurrentHook = null !== current ? current.memoizedState : null, nextWorkInProgressHook = firstWorkInProgressHook, componentUpdateQueue = workInProgressHook = currentHook = null, ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdate, workInProgress = Component(props, refOrContext);
      } while (didScheduleRenderPhaseUpdate);

      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    current = currentlyRenderingFiber$1;
    current.memoizedState = firstWorkInProgressHook;
    current.expirationTime = remainingExpirationTime;
    current.updateQueue = componentUpdateQueue;
    current.effectTag |= sideEffectTag;
    current = null !== currentHook && null !== currentHook.next;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    if (current) throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
    return workInProgress;
  }

  function resetHooks() {
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    didScheduleRenderPhaseUpdate = false;
    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    null === workInProgressHook ? firstWorkInProgressHook = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook, nextCurrentHook = null !== currentHook ? currentHook.next : null;else {
      if (null === nextCurrentHook) throw ReactError(Error("Rendered more hooks than during the previous render."));
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        queue: currentHook.queue,
        baseUpdate: currentHook.baseUpdate,
        next: null
      };
      workInProgressHook = null === workInProgressHook ? firstWorkInProgressHook = newHook : workInProgressHook.next = newHook;
      nextCurrentHook = currentHook.next;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
    queue.lastRenderedReducer = reducer;

    if (0 < numberOfReRenders) {
      var _dispatch = queue.dispatch;

      if (null !== renderPhaseUpdates) {
        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (undefined !== firstRenderPhaseUpdate) {
          renderPhaseUpdates.delete(queue);
          var newState = hook.memoizedState;

          do {
            newState = reducer(newState, firstRenderPhaseUpdate.action), firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
          } while (null !== firstRenderPhaseUpdate);

          is(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          hook.baseUpdate === queue.last && (hook.baseState = newState);
          queue.lastRenderedState = newState;
          return [newState, _dispatch];
        }
      }

      return [hook.memoizedState, _dispatch];
    }

    _dispatch = queue.last;
    var baseUpdate = hook.baseUpdate;
    newState = hook.baseState;
    null !== baseUpdate ? (null !== _dispatch && (_dispatch.next = null), _dispatch = baseUpdate.next) : _dispatch = null !== _dispatch ? _dispatch.next : null;

    if (null !== _dispatch) {
      var newBaseUpdate = firstRenderPhaseUpdate = null,
          _update = _dispatch,
          didSkip = false;

      do {
        var updateExpirationTime = _update.expirationTime;
        updateExpirationTime < renderExpirationTime$1 ? (didSkip || (didSkip = true, newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState), updateExpirationTime > remainingExpirationTime && (remainingExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig), newState = _update.eagerReducer === reducer ? _update.eagerState : reducer(newState, _update.action));
        baseUpdate = _update;
        _update = _update.next;
      } while (null !== _update && _update !== _dispatch);

      didSkip || (newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState);
      is(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      hook.baseUpdate = newBaseUpdate;
      hook.baseState = firstRenderPhaseUpdate;
      queue.lastRenderedState = newState;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    null === componentUpdateQueue ? (componentUpdateQueue = {
      lastEffect: null
    }, componentUpdateQueue.lastEffect = tag.next = tag) : (create = componentUpdateQueue.lastEffect, null === create ? componentUpdateQueue.lastEffect = tag.next = tag : (destroy = create.next, create.next = tag, tag.next = destroy, componentUpdateQueue.lastEffect = tag));
    return tag;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, undefined, undefined === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(NoEffect$1, create, destroy, deps);
        return;
      }
    }

    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, destroy, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function mountDebugValue() {}

  function dispatchAction(fiber, queue, action) {
    if (!(25 > numberOfReRenders)) throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1) {
      if (didScheduleRenderPhaseUpdate = true, fiber = {
        expirationTime: renderExpirationTime$1,
        suspenseConfig: null,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === renderPhaseUpdates && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), undefined === action) renderPhaseUpdates.set(queue, fiber);else {
        for (queue = action; null !== queue.next;) {
          queue = queue.next;
        }

        queue.next = fiber;
      }
    } else {
      var currentTime = requestCurrentTime(),
          _suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);
      _suspenseConfig = {
        expirationTime: currentTime,
        suspenseConfig: _suspenseConfig,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var _last = queue.last;
      if (null === _last) _suspenseConfig.next = _suspenseConfig;else {
        var first = _last.next;
        null !== first && (_suspenseConfig.next = first);
        _last.next = _suspenseConfig;
      }
      queue.last = _suspenseConfig;
      if (0 === fiber.expirationTime && (null === alternate || 0 === alternate.expirationTime) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
            _eagerState = alternate(currentState, action);

        _suspenseConfig.eagerReducer = alternate;
        _suspenseConfig.eagerState = _eagerState;
        if (is(_eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleUpdateOnFiber(fiber, currentTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return mountEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = undefined !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function useState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return updateEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return updateEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: updateReducer,
    useRef: function useRef() {
      return updateWorkInProgressHook().memoizedState;
    },
    useState: function useState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 13:
        return false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current$$1, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref && (didReceiveUpdate = false, updateExpirationTime < renderExpirationTime) ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {};

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextState = null,
        nextDidTimeout = false,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & ForceSuspenseFallback) && (null === current$$1 || null !== current$$1.memoizedState));
    JSCompiler_temp ? (nextState = SUSPENDED_MARKER, nextDidTimeout = true, workInProgress.effectTag &= -65) : null !== current$$1 && null === current$$1.memoizedState || undefined === nextProps.fallback || true === nextProps.unstable_avoidThisFallback || (suspenseContext |= InvisibleParentSuspenseContext);
    suspenseContext &= SubtreeSuspenseContextMask;
    push(suspenseStackCursor, suspenseContext, workInProgress);
    if (null === current$$1) {
      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        current$$1 = createFiberFromFragment(null, mode, 0, null);
        current$$1.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, current$$1.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = current$$1, nextDidTimeout = nextDidTimeout.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextProps, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        current$$1.sibling = renderExpirationTime;
        mode = current$$1;
      } else mode = renderExpirationTime = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime);
    } else {
      if (null !== current$$1.memoizedState) {
        if (suspenseContext = current$$1.child, mode = suspenseContext.sibling, nextDidTimeout) {
          nextProps = nextProps.fallback;
          renderExpirationTime = createWorkInProgress(suspenseContext, suspenseContext.pendingProps, 0);
          renderExpirationTime.return = workInProgress;
          if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== suspenseContext.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
            nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
          }
          nextProps = createWorkInProgress(mode, nextProps, mode.expirationTime);
          nextProps.return = workInProgress;
          renderExpirationTime.sibling = nextProps;
          mode = renderExpirationTime;
          renderExpirationTime.childExpirationTime = 0;
          renderExpirationTime = nextProps;
        } else mode = renderExpirationTime = reconcileChildFibers(workInProgress, suspenseContext.child, nextProps.children, renderExpirationTime);
      } else if (suspenseContext = current$$1.child, nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        nextProps.child = suspenseContext;
        null !== suspenseContext && (suspenseContext.return = nextProps);
        if (0 === (workInProgress.mode & 2)) for (suspenseContext = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = suspenseContext; null !== suspenseContext;) {
          suspenseContext.return = nextProps, suspenseContext = suspenseContext.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        renderExpirationTime.effectTag |= 2;
        mode = nextProps;
        nextProps.childExpirationTime = 0;
      } else renderExpirationTime = mode = reconcileChildFibers(workInProgress, suspenseContext, nextProps.children, renderExpirationTime);
      workInProgress.stateNode = current$$1.stateNode;
    }
    workInProgress.memoizedState = nextState;
    workInProgress.child = mode;
    return renderExpirationTime;
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode);
  }

  function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current$$1, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.effectTag |= 64;else {
      if (null !== current$$1 && 0 !== (current$$1.effectTag & 64)) a: for (current$$1 = workInProgress.child; null !== current$$1;) {
        if (13 === current$$1.tag) {
          if (null !== current$$1.memoizedState) {
            current$$1.expirationTime < renderExpirationTime && (current$$1.expirationTime = renderExpirationTime);
            var alternate = current$$1.alternate;
            null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
            scheduleWorkOnParentPath(current$$1.return, renderExpirationTime);
          }
        } else if (null !== current$$1.child) {
          current$$1.child.return = current$$1;
          current$$1 = current$$1.child;
          continue;
        }

        if (current$$1 === workInProgress) break a;

        for (; null === current$$1.sibling;) {
          if (null === current$$1.return || current$$1.return === workInProgress) break a;
          current$$1 = current$$1.return;
        }

        current$$1.sibling.return = current$$1.return;
        current$$1 = current$$1.sibling;
      }
      nextProps &= SubtreeSuspenseContextMask;
    }
    push(suspenseStackCursor, nextProps, workInProgress);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          nextProps = renderExpirationTime.alternate, null !== nextProps && null === findFirstSuspended(nextProps) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderExpirationTime, tailMode);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          nextProps = revealOrder.alternate;

          if (null !== nextProps && null === findFirstSuspended(nextProps)) {
            workInProgress.child = revealOrder;
            break;
          }

          nextProps = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = nextProps;
        }

        initSuspenseListRenderState(workInProgress, true, renderExpirationTime, null, tailMode);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.dependencies = current$$1.dependencies);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current$$1 && workInProgress.child !== current$$1.child) throw ReactError(Error("Resuming work not yet implemented."));

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  appendAllChildren = function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function updateHostContainer() {};

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.effectTag |= 4);
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
        workInProgress.effectTag = effectTag & -2049 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 18:
        return null;

      case 19:
        return pop(suspenseStackCursor, workInProgress), null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));

  function logCapturedError(capturedError) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet$1 = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current$$1, instance) {
    try {
      instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current$$1, unmountError);
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitHookEffectList(unmountTag, mountTag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & unmountTag) !== NoEffect$1) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && destroy();
        }

        (effect.tag & mountTag) !== NoEffect$1 && (destroy = effect.create, effect.destroy = destroy());
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitUnmount(current$$1$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var firstEffect = updateQueue.next;
          runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var destroy = effect.destroy;

              if (undefined !== destroy) {
                var current$$1 = current$$1$jscomp$0;

                try {
                  destroy();
                } catch (error) {
                  captureCommitPhaseError(current$$1, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        renderPriorityLevel = current$$1$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$$1$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        unmountHostComponents(current$$1$jscomp$0, renderPriorityLevel);
    }
  }

  function detachFiber(current$$1) {
    var alternate = current$$1.alternate;
    current$$1.return = null;
    current$$1.child = null;
    current$$1.memoizedState = null;
    current$$1.updateQueue = null;
    current$$1.dependencies = null;
    current$$1.alternate = null;
    current$$1.firstEffect = null;
    current$$1.lastEffect = null;
    current$$1.pendingProps = null;
    current$$1.memoizedProps = null;
    null !== alternate && detachFiber(alternate);
  }

  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }

  function commitPlacement(finishedWork) {
    a: {
      for (var parent = finishedWork.return; null !== parent;) {
        if (isHostParent(parent)) {
          var parentFiber = parent;
          break a;
        }

        parent = parent.return;
      }

      throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
    }

    parent = parentFiber.stateNode;

    switch (parentFiber.tag) {
      case 5:
        var isContainer = false;
        break;

      case 3:
        parent = parent.containerInfo;
        isContainer = true;
        break;

      case 4:
        parent = parent.containerInfo;
        isContainer = true;
        break;

      default:
        throw ReactError(Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."));
    }

    parentFiber.effectTag & 16 && (parentFiber.effectTag &= -17);

    a: b: for (parentFiber = finishedWork;;) {
      for (; null === parentFiber.sibling;) {
        if (null === parentFiber.return || isHostParent(parentFiber.return)) {
          parentFiber = null;
          break a;
        }

        parentFiber = parentFiber.return;
      }

      parentFiber.sibling.return = parentFiber.return;

      for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag && 18 !== parentFiber.tag;) {
        if (parentFiber.effectTag & 2) continue b;
        if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child.return = parentFiber, parentFiber = parentFiber.child;
      }

      if (!(parentFiber.effectTag & 2)) {
        parentFiber = parentFiber.stateNode;
        break a;
      }
    }

    for (var node = finishedWork;;) {
      var isHost = 5 === node.tag || 6 === node.tag;

      if (isHost) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (parentFiber) {
          if (isContainer) {
            if ("number" === typeof parent) throw ReactError(Error("Container does not support insertBefore operation"));
          } else {
            isHost = parent;
            var beforeChild = parentFiber,
                children = isHost._children,
                index = children.indexOf(stateNode);
            0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [], [], ["number" === typeof stateNode ? stateNode : stateNode._nativeTag], [index], []));
          }
        } else isContainer ? ReactNativePrivateInterface.UIManager.setChildren(parent, ["number" === typeof stateNode ? stateNode : stateNode._nativeTag]) : (isHost = parent, children = "number" === typeof stateNode ? stateNode : stateNode._nativeTag, index = isHost._children, beforeChild = index.indexOf(stateNode), 0 <= beforeChild ? (index.splice(beforeChild, 1), index.push(stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [beforeChild], [index.length - 1], [], [], [])) : (index.push(stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [], [], [children], [index.length - 1], [])));
      } else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === finishedWork) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function unmountHostComponents(current$$1, renderPriorityLevel$jscomp$0) {
    for (var node = current$$1, currentParentIsValid = false, currentParent = undefined, currentParentIsContainer = undefined;;) {
      if (!currentParentIsValid) {
        currentParentIsValid = node.return;

        a: for (;;) {
          if (null === currentParentIsValid) throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
          currentParent = currentParentIsValid.stateNode;

          switch (currentParentIsValid.tag) {
            case 5:
              currentParentIsContainer = false;
              break a;

            case 3:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = true;
              break a;

            case 4:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = true;
              break a;
          }

          currentParentIsValid = currentParentIsValid.return;
        }

        currentParentIsValid = true;
      }

      if (5 === node.tag || 6 === node.tag) {
        a: for (var root = node, renderPriorityLevel = renderPriorityLevel$jscomp$0, node$jscomp$0 = root;;) {
          if (commitUnmount(node$jscomp$0, renderPriorityLevel), null !== node$jscomp$0.child && 4 !== node$jscomp$0.tag) node$jscomp$0.child.return = node$jscomp$0, node$jscomp$0 = node$jscomp$0.child;else {
            if (node$jscomp$0 === root) break;

            for (; null === node$jscomp$0.sibling;) {
              if (null === node$jscomp$0.return || node$jscomp$0.return === root) break a;
              node$jscomp$0 = node$jscomp$0.return;
            }

            node$jscomp$0.sibling.return = node$jscomp$0.return;
            node$jscomp$0 = node$jscomp$0.sibling;
          }
        }

        currentParentIsContainer ? (root = currentParent, recursivelyUncacheFiberNode(node.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(root, [], [], [], [], [0])) : (root = currentParent, node$jscomp$0 = node.stateNode, recursivelyUncacheFiberNode(node$jscomp$0), renderPriorityLevel = root._children, node$jscomp$0 = renderPriorityLevel.indexOf(node$jscomp$0), renderPriorityLevel.splice(node$jscomp$0, 1), ReactNativePrivateInterface.UIManager.manageChildren(root._nativeTag, [], [], [], [], [node$jscomp$0]));
      } else if (4 === node.tag) {
        if (null !== node.child) {
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true;
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (commitUnmount(node, renderPriorityLevel$jscomp$0), null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === current$$1) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === current$$1) return;
        node = node.return;
        4 === node.tag && (currentParentIsValid = false);
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        break;

      case 1:
        break;

      case 5:
        var instance = finishedWork.stateNode;

        if (null != instance) {
          var newProps = finishedWork.memoizedProps;
          current$$1 = null !== current$$1 ? current$$1.memoizedProps : newProps;
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          null !== updatePayload && (finishedWork = instance.viewConfig, instanceProps.set(instance._nativeTag, newProps), newProps = diffProperties(null, current$$1, newProps, finishedWork.validAttributes), null != newProps && ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, finishedWork.uiViewClassName, newProps));
        }

        break;

      case 6:
        if (null === finishedWork.stateNode) throw ReactError(Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."));
        ReactNativePrivateInterface.UIManager.updateView(finishedWork.stateNode, "RCTRawText", {
          text: finishedWork.memoizedProps
        });
        break;

      case 3:
        break;

      case 12:
        break;

      case 13:
        instance = finishedWork;
        null === finishedWork.memoizedState ? newProps = false : (newProps = true, instance = finishedWork.child, globalMostRecentFallbackTime = now());
        if (null !== instance) a: for (current$$1 = instance;;) {
          if (5 === current$$1.tag) {
            if (updatePayload = current$$1.stateNode, newProps) {
              var viewConfig = updatePayload.viewConfig;
              var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                style: {
                  display: "none"
                }
              }, viewConfig.validAttributes);
              ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            } else {
              updatePayload = current$$1.stateNode;
              updatePayload$jscomp$0 = current$$1.memoizedProps;
              viewConfig = updatePayload.viewConfig;

              var prevProps = _extends({}, updatePayload$jscomp$0, {
                style: [updatePayload$jscomp$0.style, {
                  display: "none"
                }]
              });

              updatePayload$jscomp$0 = diffProperties(null, prevProps, updatePayload$jscomp$0, viewConfig.validAttributes);
              ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            }
          } else {
            if (6 === current$$1.tag) throw Error("Not yet implemented.");

            if (13 === current$$1.tag && null !== current$$1.memoizedState) {
              updatePayload = current$$1.child.sibling;
              updatePayload.return = current$$1;
              current$$1 = updatePayload;
              continue;
            } else if (null !== current$$1.child) {
              current$$1.child.return = current$$1;
              current$$1 = current$$1.child;
              continue;
            }
          }
          if (current$$1 === instance) break a;

          for (; null === current$$1.sibling;) {
            if (null === current$$1.return || current$$1.return === instance) break a;
            current$$1 = current$$1.return;
          }

          current$$1.sibling.return = current$$1.return;
          current$$1 = current$$1.sibling;
        }
        attachSuspenseRetryListeners(finishedWork);
        break;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        break;

      case 17:
        break;

      case 20:
        break;

      default:
        throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet$1());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootErrored = 1,
      RootSuspended = 2,
      RootSuspendedWithDelay = 3,
      RootCompleted = 4,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootHasPendingPing = false,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      pendingPassiveEffectsExpirationTime = 0,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTime() {
    return (executionContext & 48) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 1;
        break;

      default:
        throw ReactError(Error("Expected a valid priority level"));
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime && --currentTime;
    return currentTime;
  }

  function scheduleUpdateOnFiber(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      fiber.pingTime = 0;
      var priorityLevel = getCurrentPriorityLevel();
      if (1073741823 === expirationTime) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & 48) === NoContext) for (var callback = renderRoot(fiber, 1073741823, true); null !== callback;) {
          callback = callback(true);
        } else scheduleCallbackForRoot(fiber, 99, 1073741823), executionContext === NoContext && flushSyncCallbackQueue();
      } else scheduleCallbackForRoot(fiber, priorityLevel, expirationTime);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (undefined === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime), fiber = root.lastPendingTime, 0 === fiber || expirationTime < fiber) && (root.lastPendingTime = expirationTime);
    return root;
  }

  function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
    if (root.callbackExpirationTime < expirationTime) {
      var existingCallbackNode = root.callbackNode;
      null !== existingCallbackNode && existingCallbackNode !== fakeCallbackNode && Scheduler_cancelCallback(existingCallbackNode);
      root.callbackExpirationTime = expirationTime;
      1073741823 === expirationTime ? root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime))) : (existingCallbackNode = null, 1 !== expirationTime && (existingCallbackNode = {
        timeout: 10 * (1073741821 - expirationTime) - now()
      }), root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), existingCallbackNode));
    }
  }

  function runRootCallback(root, callback, isSync) {
    var prevCallbackNode = root.callbackNode,
        continuation = null;

    try {
      return continuation = callback(isSync), null !== continuation ? runRootCallback.bind(null, root, continuation) : null;
    } finally {
      null === continuation && prevCallbackNode === root.callbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0);
    }
  }

  function resolveLocksOnRoot(root, expirationTime) {
    var firstBatch = root.firstBatch;
    return null !== firstBatch && firstBatch._defer && firstBatch._expirationTime >= expirationTime ? (scheduleCallback(97, function () {
      firstBatch._onComplete();

      return null;
    }), true) : false;
  }

  function flushPendingDiscreteUpdates() {
    if (null !== rootsWithPendingDiscreteUpdates) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
      });
      flushSyncCallbackQueue();
    }
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          var childContextTypes = interruptedWork.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork);
          break;

        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer(interruptedWork);
          break;

        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null, expirationTime);
    renderExpirationTime = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootHasPendingPing = false;
  }

  function renderRoot(root$jscomp$0, expirationTime, isSync) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    if (root$jscomp$0.firstPendingTime < expirationTime) return null;
    if (isSync && root$jscomp$0.finishedExpirationTime === expirationTime) return commitRoot.bind(null, root$jscomp$0);
    flushPassiveEffects();
    if (root$jscomp$0 !== workInProgressRoot || expirationTime !== renderExpirationTime) prepareFreshStack(root$jscomp$0, expirationTime);else if (workInProgressRootExitStatus === RootSuspendedWithDelay) if (workInProgressRootHasPendingPing) prepareFreshStack(root$jscomp$0, expirationTime);else {
      var lastPendingTime = root$jscomp$0.lastPendingTime;
      if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
    }

    if (null !== workInProgress) {
      lastPendingTime = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = ReactCurrentDispatcher.current;
      null === prevDispatcher && (prevDispatcher = ContextOnlyDispatcher);
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;

      if (isSync) {
        if (1073741823 !== expirationTime) {
          var currentTime = requestCurrentTime();
          if (currentTime < expirationTime) return executionContext = lastPendingTime, resetContextDependencies(), ReactCurrentDispatcher.current = prevDispatcher, renderRoot.bind(null, root$jscomp$0, currentTime);
        }
      } else currentEventTime = 0;

      do {
        try {
          if (isSync) for (; null !== workInProgress;) {
            workInProgress = performUnitOfWork(workInProgress);
          } else for (; null !== workInProgress && !Scheduler_shouldYield();) {
            workInProgress = performUnitOfWork(workInProgress);
          }
          break;
        } catch (thrownValue) {
          resetContextDependencies();
          resetHooks();
          currentTime = workInProgress;
          if (null === currentTime || null === currentTime.return) throw prepareFreshStack(root$jscomp$0, expirationTime), executionContext = lastPendingTime, thrownValue;

          a: {
            var root = root$jscomp$0,
                returnFiber = currentTime.return,
                sourceFiber = currentTime,
                value = thrownValue,
                renderExpirationTime$jscomp$0 = renderExpirationTime;
            sourceFiber.effectTag |= 1024;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;

            if (null !== value && "object" === typeof value && "function" === typeof value.then) {
              var thenable = value,
                  hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext);
              value = returnFiber;

              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === value.tag) null !== value.memoizedState ? JSCompiler_temp = false : (JSCompiler_temp = value.memoizedProps, JSCompiler_temp = undefined === JSCompiler_temp.fallback ? false : true !== JSCompiler_temp.unstable_avoidThisFallback ? true : hasInvisibleParentBoundary ? false : true);

                if (JSCompiler_temp) {
                  returnFiber = value.updateQueue;
                  null === returnFiber ? (returnFiber = new Set(), returnFiber.add(thenable), value.updateQueue = returnFiber) : returnFiber.add(thenable);

                  if (0 === (value.mode & 2)) {
                    value.effectTag |= 64;
                    sourceFiber.effectTag &= -1957;
                    1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (renderExpirationTime$jscomp$0 = createUpdate(1073741823, null), renderExpirationTime$jscomp$0.tag = 2, enqueueUpdate(sourceFiber, renderExpirationTime$jscomp$0)));
                    sourceFiber.expirationTime = 1073741823;
                    break a;
                  }

                  sourceFiber = root;
                  root = renderExpirationTime$jscomp$0;
                  hasInvisibleParentBoundary = sourceFiber.pingCache;
                  null === hasInvisibleParentBoundary ? (hasInvisibleParentBoundary = sourceFiber.pingCache = new PossiblyWeakMap(), returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)) : (returnFiber = hasInvisibleParentBoundary.get(thenable), undefined === returnFiber && (returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)));
                  returnFiber.has(root) || (returnFiber.add(root), sourceFiber = pingSuspendedRoot.bind(null, sourceFiber, thenable, root), thenable.then(sourceFiber, sourceFiber));
                  value.effectTag |= 2048;
                  value.expirationTime = renderExpirationTime$jscomp$0;
                  break a;
                }

                value = value.return;
              } while (null !== value);

              value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }

            workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
            value = createCapturedValue(value, sourceFiber);
            sourceFiber = returnFiber;

            do {
              switch (sourceFiber.tag) {
                case 3:
                  sourceFiber.effectTag |= 2048;
                  sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                  renderExpirationTime$jscomp$0 = createRootErrorUpdate(sourceFiber, value, renderExpirationTime$jscomp$0);
                  enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                  break a;

                case 1:
                  if (thenable = value, root = sourceFiber.type, returnFiber = sourceFiber.stateNode, 0 === (sourceFiber.effectTag & 64) && ("function" === typeof root.getDerivedStateFromError || null !== returnFiber && "function" === typeof returnFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(returnFiber)))) {
                    sourceFiber.effectTag |= 2048;
                    sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                    renderExpirationTime$jscomp$0 = createClassErrorUpdate(sourceFiber, thenable, renderExpirationTime$jscomp$0);
                    enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                    break a;
                  }

              }

              sourceFiber = sourceFiber.return;
            } while (null !== sourceFiber);
          }

          workInProgress = completeUnitOfWork(currentTime);
        }
      } while (1);

      executionContext = lastPendingTime;
      resetContextDependencies();
      ReactCurrentDispatcher.current = prevDispatcher;
      if (null !== workInProgress) return renderRoot.bind(null, root$jscomp$0, expirationTime);
    }

    root$jscomp$0.finishedWork = root$jscomp$0.current.alternate;
    root$jscomp$0.finishedExpirationTime = expirationTime;
    if (resolveLocksOnRoot(root$jscomp$0, expirationTime)) return null;
    workInProgressRoot = null;

    switch (workInProgressRootExitStatus) {
      case RootIncomplete:
        throw ReactError(Error("Should have a work-in-progress."));

      case RootErrored:
        return lastPendingTime = root$jscomp$0.lastPendingTime, lastPendingTime < expirationTime ? renderRoot.bind(null, root$jscomp$0, lastPendingTime) : isSync ? commitRoot.bind(null, root$jscomp$0) : (prepareFreshStack(root$jscomp$0, expirationTime), scheduleSyncCallback(renderRoot.bind(null, root$jscomp$0, expirationTime)), null);

      case RootSuspended:
        if (1073741823 === workInProgressRootLatestProcessedExpirationTime && !isSync && (isSync = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < isSync)) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          lastPendingTime = root$jscomp$0.lastPendingTime;
          if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
          root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync);
          return null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootSuspendedWithDelay:
        if (!isSync) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          isSync = root$jscomp$0.lastPendingTime;
          if (isSync < expirationTime) return renderRoot.bind(null, root$jscomp$0, isSync);
          1073741823 !== workInProgressRootLatestSuspenseTimeout ? isSync = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? isSync = 0 : (isSync = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, lastPendingTime = now(), expirationTime = 10 * (1073741821 - expirationTime) - lastPendingTime, isSync = lastPendingTime - isSync, 0 > isSync && (isSync = 0), isSync = (120 > isSync ? 120 : 480 > isSync ? 480 : 1080 > isSync ? 1080 : 1920 > isSync ? 1920 : 3e3 > isSync ? 3e3 : 4320 > isSync ? 4320 : 1960 * ceil(isSync / 1960)) - isSync, expirationTime < isSync && (isSync = expirationTime));
          if (10 < isSync) return root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync), null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootCompleted:
        return !isSync && 1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig && (lastPendingTime = workInProgressRootLatestProcessedExpirationTime, prevDispatcher = workInProgressRootCanSuspendUsingConfig, expirationTime = prevDispatcher.busyMinDurationMs | 0, 0 >= expirationTime ? expirationTime = 0 : (isSync = prevDispatcher.busyDelayMs | 0, lastPendingTime = now() - (10 * (1073741821 - lastPendingTime) - (prevDispatcher.timeoutMs | 0 || 5e3)), expirationTime = lastPendingTime <= isSync ? 0 : isSync + expirationTime - lastPendingTime), 10 < expirationTime) ? (root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), expirationTime), null) : commitRoot.bind(null, root$jscomp$0);

      default:
        throw ReactError(Error("Unknown root exit status."));
    }
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 1 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 1 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$$1(unitOfWork.alternate, unitOfWork, renderExpirationTime);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current$$1 = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 1024)) {
        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime$jscomp$0 = renderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              newProps = current$$1.stateNode;
              newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime$jscomp$0 = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime$jscomp$0), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                current = requiredContext(contextStackCursor$1.current);
                var type$jscomp$0 = type;
                var _instance6 = newProps;
                var rootContainerInstance = renderExpirationTime$jscomp$0,
                    internalInstanceHandle = current$$1,
                    tag = allocateTag();
                type$jscomp$0 = getViewConfigForType(type$jscomp$0);
                var updatePayload = diffProperties(null, emptyObject, _instance6, type$jscomp$0.validAttributes);
                ReactNativePrivateInterface.UIManager.createView(tag, type$jscomp$0.uiViewClassName, rootContainerInstance, updatePayload);
                rootContainerInstance = new ReactNativeFiberHostComponent(tag, type$jscomp$0);
                instanceCache.set(tag, internalInstanceHandle);
                instanceProps.set(tag, _instance6);
                _instance6 = rootContainerInstance;
                appendAllChildren(_instance6, current$$1, false, false);
                finalizeInitialChildren(_instance6, type, newProps, renderExpirationTime$jscomp$0, current) && (current$$1.effectTag |= 4);
                current$$1.stateNode = _instance6;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else if (null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
              break;

            case 6:
              if (current && null != current$$1.stateNode) updateHostText$1(current, current$$1, current.memoizedProps, newProps);else {
                if ("string" !== typeof newProps && null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                type = requiredContext(rootInstanceStackCursor.current);
                renderExpirationTime$jscomp$0 = requiredContext(contextStackCursor$1.current);
                current = current$$1;
                if (!renderExpirationTime$jscomp$0.isInAParentText) throw ReactError(Error("Text strings must be rendered within a <Text> component."));
                renderExpirationTime$jscomp$0 = allocateTag();
                ReactNativePrivateInterface.UIManager.createView(renderExpirationTime$jscomp$0, "RCTRawText", type, {
                  text: newProps
                });
                instanceCache.set(renderExpirationTime$jscomp$0, current$$1);
                current.stateNode = renderExpirationTime$jscomp$0;
              }
              break;

            case 11:
              break;

            case 13:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime$jscomp$0;
                break a;
              }

              newProps = null !== newProps;
              renderExpirationTime$jscomp$0 = false;
              null !== current && (type = current.memoizedState, renderExpirationTime$jscomp$0 = null !== type, newProps || null === type || (type = current.child.sibling, null !== type && (_instance6 = current$$1.firstEffect, null !== _instance6 ? (current$$1.firstEffect = type, type.nextEffect = _instance6) : (current$$1.firstEffect = current$$1.lastEffect = type, type.nextEffect = null), type.effectTag = 8)));
              if (newProps && !renderExpirationTime$jscomp$0 && 0 !== (current$$1.mode & 2)) if (null === current && true !== current$$1.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
              if (newProps || renderExpirationTime$jscomp$0) current$$1.effectTag |= 4;
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 18:
              break;

            case 19:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;
              if (null === newProps) break;
              type = 0 !== (current$$1.effectTag & 64);
              _instance6 = newProps.rendering;
              if (null === _instance6) {
                if (type) cutOffTailIfNeeded(newProps, false);else {
                  if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = current$$1.child; null !== current;) {
                    _instance6 = findFirstSuspended(current);

                    if (null !== _instance6) {
                      current$$1.effectTag |= 64;
                      cutOffTailIfNeeded(newProps, false);
                      newProps = _instance6.updateQueue;
                      null !== newProps && (current$$1.updateQueue = newProps, current$$1.effectTag |= 4);
                      current$$1.firstEffect = current$$1.lastEffect = null;
                      newProps = renderExpirationTime$jscomp$0;

                      for (current = current$$1.child; null !== current;) {
                        renderExpirationTime$jscomp$0 = current, type = newProps, renderExpirationTime$jscomp$0.effectTag &= 2, renderExpirationTime$jscomp$0.nextEffect = null, renderExpirationTime$jscomp$0.firstEffect = null, renderExpirationTime$jscomp$0.lastEffect = null, _instance6 = renderExpirationTime$jscomp$0.alternate, null === _instance6 ? (renderExpirationTime$jscomp$0.childExpirationTime = 0, renderExpirationTime$jscomp$0.expirationTime = type, renderExpirationTime$jscomp$0.child = null, renderExpirationTime$jscomp$0.memoizedProps = null, renderExpirationTime$jscomp$0.memoizedState = null, renderExpirationTime$jscomp$0.updateQueue = null, renderExpirationTime$jscomp$0.dependencies = null) : (renderExpirationTime$jscomp$0.childExpirationTime = _instance6.childExpirationTime, renderExpirationTime$jscomp$0.expirationTime = _instance6.expirationTime, renderExpirationTime$jscomp$0.child = _instance6.child, renderExpirationTime$jscomp$0.memoizedProps = _instance6.memoizedProps, renderExpirationTime$jscomp$0.memoizedState = _instance6.memoizedState, renderExpirationTime$jscomp$0.updateQueue = _instance6.updateQueue, type = _instance6.dependencies, renderExpirationTime$jscomp$0.dependencies = null === type ? null : {
                          expirationTime: type.expirationTime,
                          firstContext: type.firstContext,
                          responders: type.responders
                        }), current = current.sibling;
                      }

                      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, current$$1);
                      current$$1 = current$$1.child;
                      break a;
                    }

                    current = current.sibling;
                  }
                }
              } else {
                if (!type) if (current = findFirstSuspended(_instance6), null !== current) {
                  if (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode) {
                    current = current.updateQueue;
                    null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                    current$$1 = current$$1.lastEffect = newProps.lastEffect;
                    null !== current$$1 && (current$$1.nextEffect = null);
                    break;
                  }
                } else now() > newProps.tailExpiration && 1 < renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, false), current$$1.expirationTime = current$$1.childExpirationTime = renderExpirationTime$jscomp$0 - 1);
                newProps.isBackwards ? (_instance6.sibling = current$$1.child, current$$1.child = _instance6) : (current = newProps.last, null !== current ? current.sibling = _instance6 : current$$1.child = _instance6, newProps.last = _instance6);
              }

              if (null !== newProps.tail) {
                0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500);
                current = newProps.tail;
                newProps.rendering = current;
                newProps.tail = current.sibling;
                newProps.lastEffect = current$$1.lastEffect;
                current.sibling = null;
                newProps = suspenseStackCursor.current;
                newProps = type ? newProps & SubtreeSuspenseContextMask | ForceSuspenseFallback : newProps & SubtreeSuspenseContextMask;
                push(suspenseStackCursor, newProps, current$$1);
                current$$1 = current;
                break a;
              }

              break;

            case 20:
              break;

            default:
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
          }

          current$$1 = null;
        }

        newProps = workInProgress;

        if (1 === renderExpirationTime || 1 !== newProps.childExpirationTime) {
          current = 0;

          for (renderExpirationTime$jscomp$0 = newProps.child; null !== renderExpirationTime$jscomp$0;) {
            type = renderExpirationTime$jscomp$0.expirationTime, _instance6 = renderExpirationTime$jscomp$0.childExpirationTime, type > current && (current = type), _instance6 > current && (current = _instance6), renderExpirationTime$jscomp$0 = renderExpirationTime$jscomp$0.sibling;
          }

          newProps.childExpirationTime = current;
        }

        if (null !== current$$1) return current$$1;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 1024) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current$$1 = unwindWork(workInProgress, renderExpirationTime);
        if (null !== current$$1) return current$$1.effectTag &= 1023, current$$1;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 1024);
      }

      current$$1 = workInProgress.sibling;
      if (null !== current$$1) return current$$1;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    null !== rootWithPendingPassiveEffects && scheduleCallback(97, function () {
      flushPassiveEffects();
      return null;
    });
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    flushPassiveEffects();
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    var finishedWork = root.finishedWork,
        expirationTime = root.finishedExpirationTime;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    if (finishedWork === root.current) throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
    root.callbackNode = null;
    root.callbackExpirationTime = 0;
    var updateExpirationTimeBeforeCommit = finishedWork.expirationTime,
        childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
    updateExpirationTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
    root.firstPendingTime = updateExpirationTimeBeforeCommit;
    updateExpirationTimeBeforeCommit < root.lastPendingTime && (root.lastPendingTime = updateExpirationTimeBeforeCommit);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, updateExpirationTimeBeforeCommit = finishedWork.firstEffect) : updateExpirationTimeBeforeCommit = finishedWork : updateExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== updateExpirationTimeBeforeCommit) {
      childExpirationTimeBeforeCommit = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (; null !== nextEffect;) {
            if (0 !== (nextEffect.effectTag & 256)) {
              var current$$1 = nextEffect.alternate,
                  finishedWork$jscomp$0 = nextEffect;

              switch (finishedWork$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork$jscomp$0);
                  break;

                case 1:
                  if (finishedWork$jscomp$0.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork$jscomp$0.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(finishedWork$jscomp$0.elementType === finishedWork$jscomp$0.type ? prevProps : resolveDefaultProps(finishedWork$jscomp$0.type, prevProps), prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break;

                case 3:
                case 5:
                case 6:
                case 4:
                case 17:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (current$$1 = renderPriorityLevel; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current$$1$jscomp$0 = nextEffect.alternate;

              if (null !== current$$1$jscomp$0) {
                var currentRef = current$$1$jscomp$0.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                prevProps = nextEffect, unmountHostComponents(prevProps, current$$1), detachFiber(prevProps);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root.current = finishedWork;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = expirationTime; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;

            if (effectTag$jscomp$0 & 36) {
              var current$$1$jscomp$1 = nextEffect.alternate;
              current$$1$jscomp$0 = nextEffect;
              currentRef = effectTag;

              switch (current$$1$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountLayout, MountLayout, current$$1$jscomp$0);
                  break;

                case 1:
                  var instance$jscomp$0 = current$$1$jscomp$0.stateNode;
                  if (current$$1$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                    var prevProps$jscomp$0 = current$$1$jscomp$0.elementType === current$$1$jscomp$0.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1$jscomp$0.type, current$$1$jscomp$1.memoizedProps);
                    instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                  }
                  var updateQueue = current$$1$jscomp$0.updateQueue;
                  null !== updateQueue && commitUpdateQueue(current$$1$jscomp$0, updateQueue, instance$jscomp$0, currentRef);
                  break;

                case 3:
                  var _updateQueue = current$$1$jscomp$0.updateQueue;

                  if (null !== _updateQueue) {
                    current$$1 = null;
                    if (null !== current$$1$jscomp$0.child) switch (current$$1$jscomp$0.child.tag) {
                      case 5:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                        break;

                      case 1:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                    }
                    commitUpdateQueue(current$$1$jscomp$0, _updateQueue, current$$1, currentRef);
                  }

                  break;

                case 5:
                  break;

                case 6:
                  break;

                case 4:
                  break;

                case 12:
                  break;

                case 13:
                case 19:
                case 17:
                case 20:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            if (effectTag$jscomp$0 & 128) {
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance$jscomp$1 = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    var instanceToUse = instance$jscomp$1;
                    break;

                  default:
                    instanceToUse = instance$jscomp$1;
                }

                "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
              }
            }

            effectTag$jscomp$0 & 512 && (rootDoesHavePassiveEffects = true);
            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = childExpirationTimeBeforeCommit;
    } else root.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsExpirationTime = expirationTime, pendingPassiveEffectsRenderPriority = renderPriorityLevel;else for (nextEffect = updateExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel;
    }
    renderPriorityLevel = root.firstPendingTime;
    0 !== renderPriorityLevel ? (effectTag$jscomp$0 = requestCurrentTime(), effectTag$jscomp$0 = inferPriorityFromExpirationTime(effectTag$jscomp$0, renderPriorityLevel), scheduleCallbackForRoot(root, effectTag$jscomp$0, renderPriorityLevel)) : legacyErrorBoundariesThatAlreadyFailed = null;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    1073741823 === renderPriorityLevel ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function flushPassiveEffects() {
    if (null === rootWithPendingPassiveEffects) return false;
    var root = rootWithPendingPassiveEffects,
        expirationTime = pendingPassiveEffectsExpirationTime,
        renderPriorityLevel = pendingPassiveEffectsRenderPriority;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = 0;
    pendingPassiveEffectsRenderPriority = 90;
    return runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
  }

  function flushPassiveEffectsImpl(root) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Cannot flush passive effects while already rendering."));
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork), commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
        }
      } catch (error) {
        if (null === root) throw ReactError(Error("Should be working on an effect."));
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return true;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && scheduleCallbackForRoot(rootFiber, 99, 1073741823);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && scheduleCallbackForRoot(fiber, 99, 1073741823);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime) : workInProgressRootHasPendingPing = true : root.lastPendingTime < suspendedTime || (thenable = root.pingTime, 0 !== thenable && thenable < suspendedTime || (root.pingTime = suspendedTime, root.finishedExpirationTime === suspendedTime && (root.finishedExpirationTime = 0, root.finishedWork = null), thenable = requestCurrentTime(), thenable = inferPriorityFromExpirationTime(thenable, suspendedTime), scheduleCallbackForRoot(root, thenable, suspendedTime)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    retryCache = requestCurrentTime();
    thenable = computeExpirationForFiber(retryCache, boundaryFiber, null);
    retryCache = inferPriorityFromExpirationTime(retryCache, thenable);
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && scheduleCallbackForRoot(boundaryFiber, retryCache, thenable);
  }

  var beginWork$$1 = undefined;

  beginWork$$1 = function beginWork$$1(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current$$1) {
      if (current$$1.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              pushProvider(workInProgress, workInProgress.memoizedProps.value);
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current$$1.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              var renderState = workInProgress.memoizedState;
              null !== renderState && (renderState.rendering = null, renderState.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
    } else didReceiveUpdate = false;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        renderState = renderWithHooks(null, workInProgress, updateExpirationTime, current$$1, renderState, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof renderState && null !== renderState && "function" === typeof renderState.render && undefined === renderState.$$typeof) {
          workInProgress.tag = 1;
          resetHooks();

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== renderState.state && undefined !== renderState.state ? renderState.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          renderState.updater = classComponentUpdater;
          workInProgress.stateNode = renderState;
          renderState._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, renderState, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        renderState = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = readLazyComponentType(renderState);
        workInProgress.type = renderState;
        hasContext = workInProgress.tag = resolveLazyComponentTag(renderState);
        current$$1 = resolveDefaultProps(renderState, current$$1);

        switch (hasContext) {
          case 0:
            workInProgress = updateFunctionComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 1:
            workInProgress = updateClassComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 11:
            workInProgress = updateForwardRef(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 14:
            workInProgress = updateMemoComponent(null, workInProgress, renderState, resolveDefaultProps(renderState.type, current$$1), updateExpirationTime, renderExpirationTime);
            break;

          default:
            throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + renderState + ". Lazy element type must resolve to a class or function."));
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateClassComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === updateExpirationTime) throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        renderState = workInProgress.memoizedState;
        renderState = null !== renderState ? renderState.element : null;
        processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === renderState ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateForwardRef(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          renderState = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = renderState.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = is(oldValue, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === renderState.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldValue = workInProgress.child, null !== oldValue && (oldValue.return = workInProgress); null !== oldValue;) {
              var list = oldValue.dependencies;

              if (null !== list) {
                getDerivedStateFromProps = oldValue.child;

                for (var dependency = list.firstContext; null !== dependency;) {
                  if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                    1 === oldValue.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(oldValue, dependency));
                    oldValue.expirationTime < renderExpirationTime && (oldValue.expirationTime = renderExpirationTime);
                    dependency = oldValue.alternate;
                    null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                    scheduleWorkOnParentPath(oldValue.return, renderExpirationTime);
                    list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                    break;
                  }

                  dependency = dependency.next;
                }
              } else getDerivedStateFromProps = 10 === oldValue.tag ? oldValue.type === workInProgress.type ? null : oldValue.child : oldValue.child;

              if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = oldValue;else for (getDerivedStateFromProps = oldValue; null !== getDerivedStateFromProps;) {
                if (getDerivedStateFromProps === workInProgress) {
                  getDerivedStateFromProps = null;
                  break;
                }

                oldValue = getDerivedStateFromProps.sibling;

                if (null !== oldValue) {
                  oldValue.return = getDerivedStateFromProps.return;
                  getDerivedStateFromProps = oldValue;
                  break;
                }

                getDerivedStateFromProps = getDerivedStateFromProps.return;
              }
              oldValue = getDerivedStateFromProps;
            }
          }

          reconcileChildren(current$$1, workInProgress, renderState.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return renderState = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), renderState = readContext(renderState, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(renderState), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return renderState = workInProgress.type, hasContext = resolveDefaultProps(renderState, workInProgress.pendingProps), hasContext = resolveDefaultProps(renderState.type, hasContext), updateMemoComponent(current$$1, workInProgress, renderState, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
    }

    throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, undefined, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = this.firstBatch = null;
    this.pingTime = this.lastPendingTime = this.firstPendingTime = this.callbackExpirationTime = 0;
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (undefined === fiber) {
      if ("function" === typeof component.render) throw ReactError(Error("Unable to find node on an unmounted component."));
      throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    current$$1 = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (2 !== isFiberMountedImpl(parentComponent) || 1 !== parentComponent.tag) throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    suspenseConfig = createUpdate(current$$1, suspenseConfig);
    suspenseConfig.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (suspenseConfig.callback = container);
    enqueueUpdate(currentTime, suspenseConfig);
    scheduleUpdateOnFiber(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    throw ReactError(Error("getInspectorDataForViewTag() is not available in production"));
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    (executionContext & 49) === NoContext && (flushPendingDiscreteUpdates(), flushPassiveEffects());
  };

  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance && !maybeInstance.canonical) {
            var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
            maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
            null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance),
    findNodeHandle: findNodeHandle,
    dispatchCommand: function dispatchCommand(handle, command, args) {
      null != handle._nativeTag && ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
    },
    setNativeProps: function setNativeProps(handle, nativeProps) {
      null != handle._nativeTag && (nativeProps = diffProperties(null, emptyObject, nativeProps, handle.viewConfig.validAttributes), null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(handle._nativeTag, handle.viewConfig.uiViewClassName, nativeProps));
    },
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(containerTag, 0, false);
        var uninitializedFiber = createFiber(3, null, null, 0);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureInWindow: function measureInWindow(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance && !maybeInstance.canonical) {
              var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
              maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
              null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance),
      computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
        return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
      }
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    }));
  })({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.8.6",
    rendererPackageName: "react-native-renderer"
  });

  var ReactNativeRenderer$2 = {
    default: ReactNativeRenderer
  },
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3.default || ReactNativeRenderer$3;
},14443,[14344,14446,14566,10297,14575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  _$$_REQUIRE(_dependencyMap[0]);
},14446,[10120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  if (global.self === undefined) {
    global.self = global;
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }
},14449,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _$$_REQUIRE(_dependencyMap[0]);

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }
},14452,[10054]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[1]);

    ErrorUtils.setGlobalHandler(handleError);
  }
},14455,[10141,10051]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[1]);

  var isNativeFunction = _$$_REQUIRE(_dependencyMap[2]);

  var construct = _$$_REQUIRE(_dependencyMap[3]);

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  module.exports = _wrapNativeSuper;
},14458,[14377,14389,14461,14464]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  module.exports = _isNativeFunction;
},14461,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      module.exports = _construct = Reflect.construct;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  module.exports = _construct;
},14464,[14389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException: function reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException: function reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {
      NativeModule.updateExceptionMessage(message, stack, exceptionId);
    },
    dismissRedbox: function dismissRedbox() {
      if (NativeModule.dismissRedbox) {
        NativeModule.dismissRedbox();
      }
    },
    reportException: function reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }

      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = ExceptionsManager;
  exports.default = _default;
},14467,[14308,14341,10066]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('Promise', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
},14470,[14473,10159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[0]);

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},14473,[10084]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;

  Promise.prototype['finally'] = function (f) {
    return this.then(function (value) {
      return Promise.resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return Promise.resolve(f()).then(function () {
        throw err;
      });
    });
  };
},14476,[10168]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;
    return _$$_REQUIRE(_dependencyMap[1]);
  });
},14479,[14473,14482]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},14482,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var _require = _$$_REQUIRE(_dependencyMap[0]),
        polyfillGlobal = _require.polyfillGlobal;

    var defineLazyTimer = function defineLazyTimer(name) {
      polyfillGlobal(name, function () {
        return _$$_REQUIRE(_dependencyMap[1])[name];
      });
    };

    defineLazyTimer('setTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('setImmediate');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('clearInterval');
    defineLazyTimer('clearImmediate');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
  }
},14485,[14473,10063]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('Timing');

  exports.default = _default;
},14488,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var performance = _$$_REQUIRE(_dependencyMap[0]);

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},14491,[14494]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _$$_REQUIRE(_dependencyMap[0]);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},14494,[14497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},14497,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
  polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[2]);
  });
  polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[3]).fetch;
  });
  polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Headers;
  });
  polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Request;
  });
  polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[5]);
  });
  polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[6]);
  });
  polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[7]);
  });
  polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URL;
  });
  polyfillGlobal('URLSearchParams', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URLSearchParams;
  });
  polyfillGlobal('AbortController', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortController;
  });
  polyfillGlobal('AbortSignal', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortSignal;
  });
},14500,[14473,10177,10219,10222,10228,10210,10234,10237,10240,14521]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('BlobModule');

  exports.default = _default;
},14503,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var privateData = new WeakMap();
  var wrappers = new WeakMap();

  function pd(event) {
    var retv = privateData.get(event);

    if (retv === null) {
      throw new TypeError("'this' is expected an Event object, but got " + JSON.stringify(event));
    }

    return retv;
  }

  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }

      return;
    }

    if (!data.event.cancelable) {
      return;
    }

    data.canceled = true;

    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget: eventTarget,
      event: event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });
    var keys = Object.keys(event);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  Event.prototype = {
    get type() {
      return pd(this).event.type;
    },

    get target() {
      return pd(this).eventTarget;
    },

    get currentTarget() {
      return pd(this).currentTarget;
    },

    composedPath: function composedPath() {
      var currentTarget = pd(this).currentTarget;

      if (currentTarget == null) {
        return [];
      }

      return [currentTarget];
    },

    get NONE() {
      return 0;
    },

    get CAPTURING_PHASE() {
      return 1;
    },

    get AT_TARGET() {
      return 2;
    },

    get BUBBLING_PHASE() {
      return 3;
    },

    get eventPhase() {
      return pd(this).eventPhase;
    },

    stopPropagation: function stopPropagation() {
      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;

      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },

    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },

    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },

    preventDefault: function preventDefault() {
      setCancelFlag(pd(this));
    },

    get defaultPrevented() {
      return pd(this).canceled;
    },

    get composed() {
      return Boolean(pd(this).event.composed);
    },

    get timeStamp() {
      return pd(this).timeStamp;
    },

    get srcElement() {
      return pd(this).eventTarget;
    },

    get cancelBubble() {
      return pd(this).stopped;
    },

    set cancelBubble(value) {
      if (!value) {
        return;
      }

      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },

    get returnValue() {
      return !pd(this).canceled;
    },

    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },

    initEvent: function initEvent() {}
  };
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    wrappers.set(window.Event.prototype, Event);
  }

  function defineRedirectDescriptor(key) {
    return {
      get: function get() {
        return pd(this).event[key];
      },
      set: function set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineCallDescriptor(key) {
    return {
      value: function value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);

    if (keys.length === 0) {
      return BaseEvent;
    }

    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }

    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }

    return CustomEvent;
  }

  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }

    var wrapper = wrappers.get(proto);

    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }

    return wrapper;
  }

  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  var listenersMap = new WeakMap();
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  function isObject(x) {
    return x !== null && typeof x === "object";
  }

  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);

    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }

    return listeners;
  }

  function defineEventAttributeDescriptor(eventName) {
    return {
      get: function get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }

          node = node.next;
        }

        return null;
      },
      set: function set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null;
        }

        var listeners = getListeners(this);
        var prev = null;
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }

          node = node.next;
        }

        if (listener !== null) {
          var newNode = {
            listener: listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };

          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, "on" + eventName, defineEventAttributeDescriptor(eventName));
  }

  function defineCustomEventTarget(eventNames) {
    function CustomEventTarget() {
      EventTarget.call(this);
    }

    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }

    return CustomEventTarget;
  }

  function EventTarget() {
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }

    if (arguments.length > 0) {
      var types = new Array(arguments.length);

      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }

      return defineCustomEventTarget(types);
    }

    throw new TypeError("Cannot call a class as a function");
  }

  EventTarget.prototype = {
    addEventListener: function addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }

      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener: listener,
        listenerType: listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };
      var node = listeners.get(eventName);

      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      var prev = null;

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          return;
        }

        prev = node;
        node = node.next;
      }

      prev.next = newNode;
    },
    removeEventListener: function removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }

          return;
        }

        prev = node;
        node = node.next;
      }
    },
    dispatchEvent: function dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);

      if (node == null) {
        return true;
      }

      var wrappedEvent = wrapEvent(this, event);
      var prev = null;

      while (node != null) {
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        if (isStopped(wrappedEvent)) {
          break;
        }

        node = node.next;
      }

      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }

  exports.defineEventAttribute = defineEventAttribute;
  exports.EventTarget = EventTarget;
  exports.default = EventTarget;
  module.exports = EventTarget;
  module.exports.EventTarget = module.exports["default"] = EventTarget;
  module.exports.defineEventAttribute = defineEventAttribute;
},14506,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Networking');

  exports.default = _default;
},14509,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    exports.DOMException = self.DOMException;

    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };

      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }

    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.onabort = function () {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }

    fetch.polyfill = true;

    if (!self.fetch) {
      self.fetch = fetch;
      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;
    }

    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},14512,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('WebSocketModule');

  exports.default = _default;
},14515,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('FileReaderModule');

  exports.default = _default;
},14518,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var eventTargetShim = _$$_REQUIRE(_dependencyMap[5]);

  var AbortSignal = function (_eventTargetShim$Even) {
    _inherits(AbortSignal, _eventTargetShim$Even);

    function AbortSignal() {
      var _this;

      _classCallCheck(this, AbortSignal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AbortSignal).call(this));
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }

    _createClass(AbortSignal, [{
      key: "aborted",
      get: function get() {
        var aborted = abortedFlags.get(this);

        if (typeof aborted !== "boolean") {
          throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got " + (this === null ? "null" : typeof this));
        }

        return aborted;
      }
    }]);

    return AbortSignal;
  }(eventTargetShim.EventTarget);

  eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");

  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }

  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }

    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }

  var abortedFlags = new WeakMap();
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") === "symbol") {
    Object.defineProperty(AbortSignal.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
      configurable: true,
      value: "AbortSignal"
    });
  }

  var AbortController = function () {
    function AbortController() {
      _classCallCheck(this, AbortController);

      signals.set(this, createAbortSignal());
    }

    _createClass(AbortController, [{
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }, {
      key: "signal",
      get: function get() {
        return getSignal(this);
      }
    }]);

    return AbortController;
  }();

  var signals = new WeakMap();

  function getSignal(controller) {
    var signal = signals.get(controller);

    if (signal == null) {
      throw new TypeError("Expected 'this' to be an 'AbortController' object, but got " + (controller === null ? "null" : typeof controller));
    }

    return signal;
  }

  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") === "symbol") {
    Object.defineProperty(AbortController.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
      configurable: true,
      value: "AbortController"
    });
  }

  exports.AbortController = AbortController;
  exports.AbortSignal = AbortSignal;
  exports.default = AbortController;
  module.exports = AbortController;
  module.exports.AbortController = module.exports["default"] = AbortController;
  module.exports.AbortSignal = AbortSignal;
},14521,[14320,14323,14371,14377,14386,14506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.alert) {
    global.alert = function (text) {
      _$$_REQUIRE(_dependencyMap[0]).alert('Alert', '' + text);
    };
  }
},14524,[10243]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('DialogManagerAndroid');

  exports.default = _default;
},14527,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeDialogManagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function emptyCallback() {}

  module.exports = {
    alertWithArgs: function alertWithArgs(args, callback) {
      if (!_NativeDialogManagerAndroid.default) {
        return;
      }

      _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
  };
},14530,[14305,14527]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty;

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
},14533,[14473]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

    BatchedBridge.registerLazyCallableModule('Systrace', function () {
      return _$$_REQUIRE(_dependencyMap[1]);
    });
    BatchedBridge.registerLazyCallableModule('JSTimers', function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
    BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
      return _$$_REQUIRE(_dependencyMap[3]);
    });
    BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
      return _$$_REQUIRE(_dependencyMap[4]);
    });
    BatchedBridge.registerLazyCallableModule('RCTLog', function () {
      return _$$_REQUIRE(_dependencyMap[5]);
    });
    BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
      return _$$_REQUIRE(_dependencyMap[6]);
    });
    BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
      return _$$_REQUIRE(_dependencyMap[7]);
    });
    BatchedBridge.registerLazyCallableModule('GlobalPerformanceLogger', function () {
      return _$$_REQUIRE(_dependencyMap[8]);
    });
    BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
      return _$$_REQUIRE(_dependencyMap[9]);
    });
    {
      BatchedBridge.registerCallableModule('HMRClient', _$$_REQUIRE(_dependencyMap[10]));
    }
  }
},14536,[10045,10054,10063,14539,10261,10264,10087,10267,14548,10276,14557]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeHeapCapture = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      if (_NativeHeapCapture.default) {
        _NativeHeapCapture.default.captureComplete(path, error);
      }
    }
  };
  module.exports = HeapCapture;
},14539,[14305,14542]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('HeapCapture');

  exports.default = _default;
},14542,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('JSCSamplingProfiler');

  exports.default = _default;
},14545,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createPerformanceLogger = _$$_REQUIRE(_dependencyMap[0]);

  var GlobalPerformanceLogger = createPerformanceLogger();
  module.exports = GlobalPerformanceLogger;
},14548,[14551]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _$$_REQUIRE(_dependencyMap[0]);

  var infoLog = _$$_REQUIRE(_dependencyMap[1]);

  var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || _$$_REQUIRE(_dependencyMap[2]);

  var _cookies = {};
  var PRINT_TO_CONSOLE = false;

  function createPerformanceLogger() {
    var result = {
      _timespans: {},
      _extras: {},
      _points: {},
      addTimespan: function addTimespan(key, lengthInMs, description) {
        if (this._timespans[key]) {
          return;
        }

        this._timespans[key] = {
          description: description,
          totalTime: lengthInMs
        };
      },
      startTimespan: function startTimespan(key, description) {
        if (this._timespans[key]) {
          return;
        }

        this._timespans[key] = {
          description: description,
          startTime: performanceNow()
        };
        _cookies[key] = Systrace.beginAsyncEvent(key);
      },
      stopTimespan: function stopTimespan(key) {
        var timespan = this._timespans[key];

        if (!timespan || !timespan.startTime) {
          return;
        }

        if (timespan.endTime) {
          return;
        }

        timespan.endTime = performanceNow();
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        Systrace.endAsyncEvent(key, _cookies[key]);
        delete _cookies[key];
      },
      clear: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
      },
      clearCompleted: function clearCompleted() {
        for (var _key in this._timespans) {
          if (this._timespans[_key].totalTime) {
            delete this._timespans[_key];
          }
        }

        this._extras = {};
        this._points = {};
      },
      clearExceptTimespans: function clearExceptTimespans(keys) {
        this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {
          if (keys.indexOf(key) !== -1) {
            previous[key] = this._timespans[key];
          }

          return previous;
        }, {});
        this._extras = {};
        this._points = {};
      },
      currentTimestamp: function currentTimestamp() {
        return performanceNow();
      },
      getTimespans: function getTimespans() {
        return this._timespans;
      },
      hasTimespan: function hasTimespan(key) {
        return !!this._timespans[key];
      },
      logTimespans: function logTimespans() {},
      addTimespans: function addTimespans(newTimespans, labels) {
        for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
          var label = labels[ii / 2];
          this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
        }
      },
      setExtra: function setExtra(key, value) {
        if (this._extras[key]) {
          return;
        }

        this._extras[key] = value;
      },
      getExtras: function getExtras() {
        return this._extras;
      },
      removeExtra: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      },
      logExtras: function logExtras() {},
      markPoint: function markPoint(key, timestamp) {
        var _timestamp;

        if (this._points[key]) {
          return;
        }

        this._points[key] = (_timestamp = timestamp) != null ? _timestamp : performanceNow();
      },
      getPoints: function getPoints() {
        return this._points;
      },
      logPoints: function logPoints() {},
      logEverything: function logEverything() {
        this.logTimespans();
        this.logExtras();
        this.logPoints();
      }
    };
    return result;
  }

  module.exports = createPerformanceLogger;
},14551,[10054,10273,14491]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('JSDevSupport');

  exports.default = _default;
},14554,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HMRClientProdShim = {
    setup: function setup() {},
    enable: function enable() {
      console.error("Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?");
    },
    disable: function disable() {},
    registerBundle: function registerBundle() {},
    log: function log() {}
  };
  module.exports = HMRClientProdShim;
},14557,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  }

  global.__fetchSegment = __fetchSegment;

  function __getSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

    if (!SegmentFetcher.getSegment) {
      throw new Error('SegmentFetcher.getSegment must be defined');
    }

    SegmentFetcher.getSegment(segmentId, options, function (errorObject, path) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null, path);
    });
  }

  global.__getSegment = __getSegment;
},14560,[14563]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('SegmentFetcher');

  exports.default = _default;
},14563,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BatchedBridge() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },

    get ExceptionsManager() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },

    get RCTEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },

    get ReactNativeViewConfigRegistry() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },

    get TextInputState() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },

    get deepDiffer() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },

    get deepFreezeAndThrowOnMutationInDev() {
      return _$$_REQUIRE(_dependencyMap[8]);
    },

    get flattenStyle() {
      return _$$_REQUIRE(_dependencyMap[9]);
    },

    get ReactFiberErrorDialog() {
      return _$$_REQUIRE(_dependencyMap[10]);
    }

  };
},14566,[10045,10141,10066,10282,14569,10285,10279,10288,10057,10291,14572]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();

  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }

    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  exports.register = function (name, callback) {
    invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    viewConfigCallbacks.set(name, callback);
    return name;
  };

  exports.get = function (name) {
    var viewConfig;

    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);

      if (typeof callback !== 'function') {
        invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }

      viewConfigCallbacks.set(name, null);
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
    } else {
      viewConfig = viewConfigs.get(name);
    }

    invariant(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},14569,[14326]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

  function showErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;
    var errorToHandle;

    if (error instanceof Error) {
      errorToHandle = error;
    } else if (typeof error === 'string') {
      errorToHandle = new _ExceptionsManager.SyntheticError(error);
    } else {
      errorToHandle = new _ExceptionsManager.SyntheticError('Unspecified error');
    }

    try {
      errorToHandle.componentStack = componentStack;
    } catch (e) {}

    (0, _ExceptionsManager.handleException)(errorToHandle, false);
    return false;
  }

  module.exports = {
    showErrorDialog: showErrorDialog
  };
},14572,[10141]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},14575,[14578]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.15.0
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _d = undefined,
      e = undefined,
      g = undefined,
      m = undefined,
      n = undefined;
  exports.unstable_now = undefined;
  exports.unstable_forceFrameRate = undefined;

  if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var p = null,
        q = null,
        r = function r() {
      if (null !== p) try {
        var a = exports.unstable_now();
        p(true, a);
        p = null;
      } catch (b) {
        throw setTimeout(r, 0), b;
      }
    };

    exports.unstable_now = function () {
      return Date.now();
    };

    _d = function d(a) {
      null !== p ? setTimeout(_d, 0, a) : (p = a, setTimeout(r, 0));
    };

    e = function e(a, b) {
      q = setTimeout(a, b);
    };

    g = function g() {
      clearTimeout(q);
    };

    m = function m() {
      return false;
    };

    n = exports.unstable_forceFrameRate = function () {};
  } else {
    var t = window.performance,
        u = window.Date,
        v = window.setTimeout,
        w = window.clearTimeout,
        x = window.requestAnimationFrame,
        y = window.cancelAnimationFrame;
    "undefined" !== typeof console && ("function" !== typeof x && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof y && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));
    exports.unstable_now = "object" === typeof t && "function" === typeof t.now ? function () {
      return t.now();
    } : function () {
      return u.now();
    };
    var z = false,
        A = null,
        B = -1,
        C = -1,
        D = 33.33,
        E = -1,
        F = -1,
        G = 0,
        H = false;

    m = function m() {
      return exports.unstable_now() >= G;
    };

    n = function n() {};

    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : 0 < a ? (D = Math.floor(1E3 / a), H = true) : (D = 33.33, H = false);
    };

    var J = function J() {
      if (null !== A) {
        var a = exports.unstable_now(),
            b = 0 < G - a;

        try {
          A(b, a) || (A = null);
        } catch (c) {
          throw I.postMessage(null), c;
        }
      }
    },
        K = new MessageChannel(),
        I = K.port2;

    K.port1.onmessage = J;

    var L = function L(a) {
      if (null === A) F = E = -1, z = false;else {
        z = true;
        x(function (a) {
          w(B);
          L(a);
        });

        var b = function b() {
          G = exports.unstable_now() + D / 2;
          J();
          B = v(b, 3 * D);
        };

        B = v(b, 3 * D);

        if (-1 !== E && .1 < a - E) {
          var c = a - E;
          !H && -1 !== F && c < D && F < D && (D = c < F ? F : c, 8.33 > D && (D = 8.33));
          F = c;
        }

        E = a;
        G = a + D;
        I.postMessage(null);
      }
    };

    _d = function _d(a) {
      A = a;
      z || (z = true, x(function (a) {
        L(a);
      }));
    };

    e = function e(a, b) {
      C = v(function () {
        a(exports.unstable_now());
      }, b);
    };

    g = function g() {
      w(C);
      C = -1;
    };
  }

  var M = null,
      N = null,
      O = null,
      P = 3,
      Q = false,
      R = false,
      S = false;

  function T(a, b) {
    var c = a.next;
    if (c === a) M = null;else {
      a === M && (M = c);
      var f = a.previous;
      f.next = c;
      c.previous = f;
    }
    a.next = a.previous = null;
    c = a.callback;
    f = P;
    var l = O;
    P = a.priorityLevel;
    O = a;

    try {
      var h = a.expirationTime <= b;

      switch (P) {
        case 1:
          var k = c(h);
          break;

        case 2:
          k = c(h);
          break;

        case 3:
          k = c(h);
          break;

        case 4:
          k = c(h);
          break;

        case 5:
          k = c(h);
      }
    } catch (Z) {
      throw Z;
    } finally {
      P = f, O = l;
    }

    if ("function" === typeof k) if (b = a.expirationTime, a.callback = k, null === M) M = a.next = a.previous = a;else {
      k = null;
      h = M;

      do {
        if (b <= h.expirationTime) {
          k = h;
          break;
        }

        h = h.next;
      } while (h !== M);

      null === k ? k = M : k === M && (M = a);
      b = k.previous;
      b.next = k.previous = a;
      a.next = k;
      a.previous = b;
    }
  }

  function U(a) {
    if (null !== N && N.startTime <= a) {
      do {
        var b = N,
            c = b.next;
        if (b === c) N = null;else {
          N = c;
          var f = b.previous;
          f.next = c;
          c.previous = f;
        }
        b.next = b.previous = null;
        V(b, b.expirationTime);
      } while (null !== N && N.startTime <= a);
    }
  }

  function W(a) {
    S = false;
    U(a);
    R || (null !== M ? (R = true, _d(X)) : null !== N && e(W, N.startTime - a));
  }

  function X(a, b) {
    R = false;
    S && (S = false, g());
    U(b);
    Q = true;

    try {
      if (!a) for (; null !== M && M.expirationTime <= b;) {
        T(M, b), b = exports.unstable_now(), U(b);
      } else if (null !== M) {
        do {
          T(M, b), b = exports.unstable_now(), U(b);
        } while (null !== M && !m());
      }
      if (null !== M) return true;
      null !== N && e(W, N.startTime - b);
      return false;
    } finally {
      Q = false;
    }
  }

  function Y(a) {
    switch (a) {
      case 1:
        return -1;

      case 2:
        return 250;

      case 5:
        return 1073741823;

      case 4:
        return 1E4;

      default:
        return 5E3;
    }
  }

  function V(a, b) {
    if (null === M) M = a.next = a.previous = a;else {
      var c = null,
          f = M;

      do {
        if (b < f.expirationTime) {
          c = f;
          break;
        }

        f = f.next;
      } while (f !== M);

      null === c ? c = M : c === M && (M = a);
      b = c.previous;
      b.next = c.previous = a;
      a.next = c;
      a.previous = b;
    }
  }

  var aa = n;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_NormalPriority = 3;
  exports.unstable_IdlePriority = 5;
  exports.unstable_LowPriority = 4;

  exports.unstable_runWithPriority = function (a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;

      default:
        a = 3;
    }

    var c = P;
    P = a;

    try {
      return b();
    } finally {
      P = c;
    }
  };

  exports.unstable_next = function (a) {
    switch (P) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;

      default:
        b = P;
    }

    var c = P;
    P = b;

    try {
      return a();
    } finally {
      P = c;
    }
  };

  exports.unstable_scheduleCallback = function (a, b, c) {
    var f = exports.unstable_now();

    if ("object" === typeof c && null !== c) {
      var l = c.delay;
      l = "number" === typeof l && 0 < l ? f + l : f;
      c = "number" === typeof c.timeout ? c.timeout : Y(a);
    } else c = Y(a), l = f;

    c = l + c;
    a = {
      callback: b,
      priorityLevel: a,
      startTime: l,
      expirationTime: c,
      next: null,
      previous: null
    };

    if (l > f) {
      c = l;
      if (null === N) N = a.next = a.previous = a;else {
        b = null;
        var h = N;

        do {
          if (c < h.startTime) {
            b = h;
            break;
          }

          h = h.next;
        } while (h !== N);

        null === b ? b = N : b === N && (N = a);
        c = b.previous;
        c.next = b.previous = a;
        a.next = b;
        a.previous = c;
      }
      null === M && N === a && (S ? g() : S = true, e(W, l - f));
    } else V(a, c), R || Q || (R = true, _d(X));

    return a;
  };

  exports.unstable_cancelCallback = function (a) {
    var b = a.next;

    if (null !== b) {
      if (a === b) a === M ? M = null : a === N && (N = null);else {
        a === M ? M = b : a === N && (N = b);
        var c = a.previous;
        c.next = b;
        b.previous = c;
      }
      a.next = a.previous = null;
    }
  };

  exports.unstable_wrapCallback = function (a) {
    var b = P;
    return function () {
      var c = P;
      P = b;

      try {
        return a.apply(this, arguments);
      } finally {
        P = c;
      }
    };
  };

  exports.unstable_getCurrentPriorityLevel = function () {
    return P;
  };

  exports.unstable_shouldYield = function () {
    var a = exports.unstable_now();
    U(a);
    return null !== O && null !== M && M.startTime <= a && M.expirationTime < O.expirationTime || m();
  };

  exports.unstable_requestPaint = aa;

  exports.unstable_continueExecution = function () {
    R || Q || (R = true, _d(X));
  };

  exports.unstable_pauseExecution = function () {};

  exports.unstable_getFirstCallbackNode = function () {
    return M;
  };
},14578,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeViewViewConfigAndroid = {
    uiViewClassName: 'RCTView',
    bubblingEventTypes: {
      topSelect: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        }
      }
    },
    directEventTypes: {
      topClick: {
        registrationName: 'onClick'
      },
      topContentSizeChange: {
        registrationName: 'onContentSizeChange'
      },
      topLoadingError: {
        registrationName: 'onLoadingError'
      },
      topLoadingFinish: {
        registrationName: 'onLoadingFinish'
      },
      topLoadingStart: {
        registrationName: 'onLoadingStart'
      },
      topMessage: {
        registrationName: 'onMessage'
      },
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      }
    },
    validAttributes: {
      hasTVPreferredFocus: true,
      focusable: true,
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true,
      nextFocusDown: true,
      nextFocusForward: true,
      nextFocusLeft: true,
      nextFocusRight: true,
      nextFocusUp: true
    }
  };
  module.exports = ReactNativeViewViewConfigAndroid;
},14581,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _verifyComponentAttributeEquivalence = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[4]);

  function registerGeneratedViewConfig(componentName, viewConfig) {
    var mergedViewConfig = {
      uiViewClassName: componentName,
      Commands: {},
      bubblingEventTypes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.bubblingEventTypes, viewConfig.bubblingEventTypes || {}),
      directEventTypes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.directEventTypes, viewConfig.directEventTypes || {}),
      validAttributes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.validAttributes, viewConfig.validAttributes || {})
    };
    ReactNativeViewConfigRegistry.register(componentName, function () {
      (0, _verifyComponentAttributeEquivalence.default)(componentName, mergedViewConfig);
      return mergedViewConfig;
    });
  }

  module.exports = registerGeneratedViewConfig;
},14584,[14305,14314,14587,14569,14590]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.lefthandObjectDiff = lefthandObjectDiff;
  exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
  exports.stringifyViewConfig = stringifyViewConfig;
  exports.default = undefined;

  var _ReactNativeViewViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var getNativeComponentAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var IGNORED_KEYS = ['transform', 'hitSlop'];

  function verifyComponentAttributeEquivalence(componentName, config) {}

  function lefthandObjectDiff(leftObj, rightObj) {
    var differentKeys = {};

    function compare(leftItem, rightItem, key) {
      if (typeof leftItem !== typeof rightItem && leftItem != null) {
        differentKeys[key] = rightItem;
        return;
      }

      if (typeof leftItem === 'object') {
        var objDiff = lefthandObjectDiff(leftItem, rightItem);

        if (Object.keys(objDiff).length > 1) {
          differentKeys[key] = objDiff;
        }

        return;
      }

      if (leftItem !== rightItem) {
        differentKeys[key] = rightItem;
        return;
      }
    }

    for (var key in leftObj) {
      if (IGNORED_KEYS.includes(key)) {
        continue;
      }

      if (!rightObj) {
        differentKeys[key] = {};
      } else if (leftObj.hasOwnProperty(key)) {
        compare(leftObj[key], rightObj[key], key);
      }
    }

    return differentKeys;
  }

  function getConfigWithoutViewProps(viewConfig, propName) {
    if (!viewConfig[propName]) {
      return {};
    }

    return Object.keys(viewConfig[propName]).filter(function (prop) {
      return !_ReactNativeViewViewConfig.default[propName][prop];
    }).reduce(function (obj, prop) {
      obj[prop] = viewConfig[propName][prop];
      return obj;
    }, {});
  }

  function stringifyViewConfig(viewConfig) {
    return JSON.stringify(viewConfig, function (key, val) {
      if (typeof val === 'function') {
        return "\u0192 " + val.name;
      }

      return val;
    }, 2);
  }

  var _default = verifyComponentAttributeEquivalence;
  exports.default = _default;
},14587,[14305,14590,14593]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ReactNativeViewViewConfigAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ReactNativeViewConfig = {
    uiViewClassName: 'RCTView',
    baseModuleName: null,
    Manager: 'ViewManager',
    Commands: {},
    Constants: {},
    bubblingEventTypes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.bubblingEventTypes, {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topPress: {
        phasedRegistrationNames: {
          bubbled: 'onPress',
          captured: 'onPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      },
      topTouchStart: {
        phasedRegistrationNames: {
          bubbled: 'onTouchStart',
          captured: 'onTouchStartCapture'
        }
      }
    }),
    directEventTypes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.directEventTypes, {
      topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
      },
      topAccessibilityEscape: {
        registrationName: 'onAccessibilityEscape'
      },
      topAccessibilityTap: {
        registrationName: 'onAccessibilityTap'
      },
      topLayout: {
        registrationName: 'onLayout'
      },
      topMagicTap: {
        registrationName: 'onMagicTap'
      },
      onGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
      },
      onGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
      }
    }),
    validAttributes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.validAttributes, {
      accessibilityActions: true,
      accessibilityElementsHidden: true,
      accessibilityHint: true,
      accessibilityIgnoresInvertColors: true,
      accessibilityLabel: true,
      accessibilityLiveRegion: true,
      accessibilityRole: true,
      accessibilityStates: true,
      accessibilityState: true,
      accessibilityViewIsModal: true,
      accessible: true,
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      aspectRatio: true,
      backfaceVisibility: true,
      backgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderBottomWidth: true,
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderEndColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderEndWidth: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderLeftWidth: true,
      borderRadius: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderRightWidth: true,
      borderStartColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderStartWidth: true,
      borderStyle: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      borderTopWidth: true,
      borderWidth: true,
      bottom: true,
      clickable: true,
      collapsable: true,
      direction: true,
      display: true,
      elevation: true,
      end: true,
      flex: true,
      flexBasis: true,
      flexDirection: true,
      flexGrow: true,
      flexShrink: true,
      flexWrap: true,
      height: true,
      hitSlop: {
        diff: _$$_REQUIRE(_dependencyMap[4])
      },
      importantForAccessibility: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      nativeID: true,
      needsOffscreenAlphaCompositing: true,
      onAccessibilityAction: true,
      onAccessibilityEscape: true,
      onAccessibilityTap: true,
      onLayout: true,
      onMagicTap: true,
      opacity: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      pointerEvents: true,
      position: true,
      removeClippedSubviews: true,
      renderToHardwareTextureAndroid: true,
      right: true,
      rotation: true,
      scaleX: true,
      scaleY: true,
      shadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      shadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[5])
      },
      shadowOpacity: true,
      shadowRadius: true,
      shouldRasterizeIOS: true,
      start: true,
      style: {
        alignContent: true,
        alignItems: true,
        alignSelf: true,
        aspectRatio: true,
        backfaceVisibility: true,
        backgroundColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderBottomColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderBottomEndRadius: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderBottomStartRadius: true,
        borderBottomWidth: true,
        borderColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderEndColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderEndWidth: true,
        borderLeftColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderLeftWidth: true,
        borderRadius: true,
        borderRightColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderRightWidth: true,
        borderStartColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderStartWidth: true,
        borderStyle: true,
        borderTopColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderTopEndRadius: true,
        borderTopLeftRadius: true,
        borderTopRightRadius: true,
        borderTopStartRadius: true,
        borderTopWidth: true,
        borderWidth: true,
        bottom: true,
        color: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        decomposedMatrix: true,
        direction: true,
        display: true,
        elevation: true,
        end: true,
        flex: true,
        flexBasis: true,
        flexDirection: true,
        flexGrow: true,
        flexShrink: true,
        flexWrap: true,
        fontFamily: true,
        fontSize: true,
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        height: true,
        includeFontPadding: true,
        justifyContent: true,
        left: true,
        letterSpacing: true,
        lineHeight: true,
        margin: true,
        marginBottom: true,
        marginEnd: true,
        marginHorizontal: true,
        marginLeft: true,
        marginRight: true,
        marginStart: true,
        marginTop: true,
        marginVertical: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        opacity: true,
        overflow: true,
        overlayColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        padding: true,
        paddingBottom: true,
        paddingEnd: true,
        paddingHorizontal: true,
        paddingLeft: true,
        paddingRight: true,
        paddingStart: true,
        paddingTop: true,
        paddingVertical: true,
        position: true,
        resizeMode: true,
        right: true,
        rotation: true,
        scaleX: true,
        scaleY: true,
        shadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        shadowOffset: {
          diff: _$$_REQUIRE(_dependencyMap[5])
        },
        shadowOpacity: true,
        shadowRadius: true,
        start: true,
        textAlign: true,
        textAlignVertical: true,
        textDecorationColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        textDecorationLine: true,
        textDecorationStyle: true,
        textShadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        textShadowOffset: true,
        textShadowRadius: true,
        textTransform: true,
        tintColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        top: true,
        transform: {
          diff: _$$_REQUIRE(_dependencyMap[6])
        },
        transformMatrix: true,
        translateX: true,
        translateY: true,
        width: true,
        writingDirection: true,
        zIndex: true
      },
      testID: true,
      top: true,
      transform: {
        diff: _$$_REQUIRE(_dependencyMap[6])
      },
      translateX: true,
      translateY: true,
      width: true,
      zIndex: true
    })
  };
  module.exports = ReactNativeViewConfig;
},14590,[14305,14314,14581,10393,10408,10402,10411]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var UIManager = _$$_REQUIRE(_dependencyMap[3]);

  var insetsDiffer = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var matricesDiffer = _$$_REQUIRE(_dependencyMap[6]);

  var pointsDiffer = _$$_REQUIRE(_dependencyMap[7]);

  var processColor = _$$_REQUIRE(_dependencyMap[8]);

  var processColorArray = _$$_REQUIRE(_dependencyMap[9]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[10]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[11]);

  var warning = _$$_REQUIRE(_dependencyMap[12]);

  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);
    var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;

    while (baseModuleName) {
      var baseModule = UIManager.getViewManagerConfig(baseModuleName);

      if (!baseModule) {
        warning(false, 'Base module "%s" does not exist', baseModuleName);
        baseModuleName = null;
      } else {
        bubblingEventTypes = _objectSpread({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = _objectSpread({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = _objectSpread({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }

    var validAttributes = {};

    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null && process == null ? true : {
        diff: diff,
        process: process
      };
    }

    validAttributes.style = ReactNativeStyleAttributes;

    _extends(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });

    if (!hasAttachedDefaultEventTypes) {
      attachDefaultEventTypes(viewConfig);
      hasAttachedDefaultEventTypes = true;
    }

    return viewConfig;
  }

  var hasAttachedDefaultEventTypes = false;

  function attachDefaultEventTypes(viewConfig) {
    var constants = UIManager.getConstants();

    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }

  function merge(destination, source) {
    if (!source) {
      return destination;
    }

    if (!destination) {
      return source;
    }

    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      var sourceValue = source[key];

      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];

        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }

      destination[key] = sourceValue;
    }

    return destination;
  }

  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;

      case 'CGPoint':
        return pointsDiffer;

      case 'CGSize':
        return sizesDiffer;

      case 'UIEdgeInsets':
        return insetsDiffer;
    }

    return null;
  }

  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;

      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;

      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;

      case 'Color':
        return processColor;

      case 'ColorArray':
        return processColorArray;
    }

    return null;
  }

  module.exports = getNativeComponentAttributes;
},14593,[14344,14314,10378,10279,10408,14326,10411,10414,10393,14596,10417,10402,14332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var processColor = _$$_REQUIRE(_dependencyMap[0]);

  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColor);
  }

  module.exports = processColorArray;
},14596,[10393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };

  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }

    throw new Error('no such scale ' + scale.toString());
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},14599,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('SourceCode');

  exports.default = _default;
},14602,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('AndroidProgressBar');

  exports.default = _default;
},14605,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _requireNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function codegenNativeComponent(componentName, options) {
    var componentNameInUse = options && options.paperComponentName ? options.paperComponentName : componentName;

    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_reactNative.UIManager.getViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _reactNative.UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)) {
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        throw new Error("Failed to find native component for either " + componentName + " or " + (options.paperComponentNameDeprecated || '(unknown)'));
      }
    }

    return (0, _requireNativeComponent.default)(componentNameInUse);
  }

  var _default = codegenNativeComponent;
  exports.default = _default;
},14608,[14305,10372,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTextStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedTextStylePropTypes);
  var DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: DeprecatedEdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool,
    dataDetectorType: PropTypes.oneOf(DataDetectorTypes)
  };
},14611,[14419,14614,14617,10318,14434]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = DeprecatedEdgeInsetsPropType;
},14614,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deprecatedCreateStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[0]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[1]);

  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = deprecatedCreateStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = DeprecatedStyleSheetPropType;
},14617,[14620,10291]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var merge = _$$_REQUIRE(_dependencyMap[1]);

  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var _key2 in allKeys) {
        var checker = shapeTypes[_key2];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, _key2, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
        rest[_key3 - 4] = arguments[_key3];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = deprecatedCreateStrictShapeTypeChecker;
},14620,[14326,10339]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(false);
},14623,[10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeTVNavigationEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(_NativeTVNavigationEventEmitter.default);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},14626,[14305,14629,10066,10198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('TVNavigationEventEmitter');

  exports.default = _default;
},14629,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? invariant(false) : undefined;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},14632,[14635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant(...): Second argument must be a string.');
    }
  };

  function invariant(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return String(args[argIndex++]);
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},14635,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }

    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1;
    throw error;
  }

  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},14638,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    DeprecatedAccessibilityRoles: ['none', 'button', 'link', 'search', 'image', 'keyboardkey', 'text', 'adjustable', 'imagebutton', 'header', 'summary', 'alert', 'checkbox', 'combobox', 'menu', 'menubar', 'menuitem', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'spinbutton', 'switch', 'tab', 'tablist', 'timer', 'toolbar'],
    DeprecatedAccessibilityStates: ['selected', 'disabled', 'checked', 'unchecked', 'busy', 'expanded', 'collapsed', 'hasPopup']
  };
},14641,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _require = _$$_REQUIRE(_dependencyMap[1]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[2]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[8]);

  var emptyAnimation = {
    start: function start() {},
    stop: function stop() {},
    reset: function reset() {},
    _startNativeLoop: function _startNativeLoop() {},
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };

  var spring = function spring(value, config) {
    var anyValue = value;
    return _objectSpread({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var timing = function timing(value, config) {
    var anyValue = value;
    return _objectSpread({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var decay = function decay(value, config) {
    return emptyAnimation;
  };

  var sequence = function sequence(animations) {
    return emptyAnimation;
  };

  var parallel = function parallel(animations, config) {
    return emptyAnimation;
  };

  var delay = function delay(time) {
    return emptyAnimation;
  };

  var stagger = function stagger(time, animations) {
    return emptyAnimation;
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    return emptyAnimation;
  };

  var event = function event(argMapping, config) {
    return null;
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: AnimatedImplementation.add,
    subtract: AnimatedImplementation.subtract,
    divide: AnimatedImplementation.divide,
    multiply: AnimatedImplementation.multiply,
    modulo: AnimatedImplementation.modulo,
    diffClamp: AnimatedImplementation.diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: AnimatedImplementation.forkEvent,
    unforkEvent: AnimatedImplementation.unforkEvent,
    Event: AnimatedEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},14644,[14314,10528,10525,10534,10537,10567,10531,10579,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('NativeAnimatedModule');

  exports.default = _default;
},14647,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = function (_AnimatedWithChildren) {
    _inherits(AnimatedSubtraction, _AnimatedWithChildren);

    function AnimatedSubtraction(a, b) {
      var _this;

      _classCallCheck(this, AnimatedSubtraction);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSubtraction).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedSubtraction;
  }(AnimatedWithChildren);

  module.exports = AnimatedSubtraction;
},14650,[14320,14323,14371,14377,14380,14386,10534,10537,10531,10543]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var FlatList = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(FlatList, {
    scrollEventThrottle: 0.0001
  });
},14653,[10657,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('AndroidSwipeRefreshLayout');

  exports.default = _default;
},14656,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('PullToRefreshView', {
    paperComponentName: 'RCTRefreshControl'
  });

  exports.default = _default;
},14659,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('FrameRateLogger');

  exports.default = _default;
},14662,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('KeyboardObserver');

  exports.default = _default;
},14665,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var OUTER_PROPS = _extends(Object.create(null), {
    margin: true,
    marginHorizontal: true,
    marginVertical: true,
    marginBottom: true,
    marginTop: true,
    marginLeft: true,
    marginRight: true,
    flex: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: true,
    alignSelf: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    width: true,
    minWidth: true,
    maxWidth: true,
    position: true,
    left: true,
    right: true,
    bottom: true,
    top: true
  });

  function splitLayoutProps(props) {
    var inner = {};
    var outer = {};

    if (props) {
      Object.keys(props).forEach(function (k) {
        var value = props[k];

        if (OUTER_PROPS[k]) {
          outer[k] = value;
        } else {
          inner[k] = value;
        }
      });
    }

    return {
      outer: outer,
      inner: inner
    };
  }

  module.exports = splitLayoutProps;
},14668,[14344]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Image = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(Image);
},14671,[10606,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},14674,[14677]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},14677,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var PlatformViewPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[6]),
      DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles,
      DeprecatedAccessibilityStates = _require.DeprecatedAccessibilityStates;

  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
  module.exports = _objectSpread({
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityHint: PropTypes.string,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
    accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityStates)),
    accessibilityState: PropTypes.object,
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: DeprecatedEdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  }, PlatformViewPropTypes);
},14680,[14314,14614,14617,14437,10348,10318,14641]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  var ImageViewNativeComponent = requireNativeComponent('RCTImageView');
  module.exports = ImageViewNativeComponent;
},14683,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  var TextInlineImage = requireNativeComponent('RCTTextInlineImage');
  module.exports = TextInlineImage;
},14686,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ScrollView = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(ScrollView, {
    scrollEventThrottle: 0.0001
  });
},14689,[10609,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SectionList = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(SectionList, {
    scrollEventThrottle: 0.0001
  });
},14692,[10744,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Text = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(Text);
},14695,[10483,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var View = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(View);
},14698,[10447,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = requireNativeComponent('AndroidCheckBox');
},14701,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function setAndForwardRef(_ref) {
    var getForwardedRef = _ref.getForwardedRef,
        setLocalRef = _ref.setLocalRef;
    return function forwardRef(ref) {
      var forwardedRef = getForwardedRef();
      setLocalRef(ref);

      if (typeof forwardedRef === 'function') {
        forwardedRef(ref);
      } else if (typeof forwardedRef === 'object' && forwardedRef != null) {
        forwardedRef.current = ref;
      }
    };
  }

  module.exports = setAndForwardRef;
},14704,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = undefined;

  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['openDrawer', 'closeDrawer']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('AndroidDrawerLayout');

  exports.default = _default;
},14707,[14308,14305,14710,14608,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(function (command) {
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (0, _ReactNative.dispatchCommand)(ref, command, args);
      };
    });
    return commandObj;
  }

  var _default = codegenNativeCommands;
  exports.default = _default;
},14710,[10114]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('StatusBarManager');

  exports.default = _default;
},14713,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[2]);

  var InternalListViewType = _$$_REQUIRE(_dependencyMap[3]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[6]);

  var Platform = ReactNative.Platform;
  var RCTScrollViewManager = ReactNative.NativeModules.ScrollViewManager;
  var ScrollView = ReactNative.ScrollView;

  var ScrollResponderMixin = _$$_REQUIRE(_dependencyMap[7]).Mixin;

  var StaticRenderer = _$$_REQUIRE(_dependencyMap[8]);

  var View = ReactNative.View;

  var cloneReferencedElement = _$$_REQUIRE(_dependencyMap[9]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[10]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[11]);

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _rafIds: [],
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponderMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _this$_scrollComponen;

        (_this$_scrollComponen = this._scrollComponent).scrollTo.apply(_this$_scrollComponen, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn("The scroll component used by the ListView does not support scrollToEnd. Check the renderScrollComponent prop of your ListView.");
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, props);
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: false,
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent && this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._rafIds = [];
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentWillUnmount: function componentWillUnmount() {
      this._rafIds.forEach(cancelAnimationFrame);

      this._rafIds = [];
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this._requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _$$_REQUIRE(_dependencyMap[12]);

            warning(false, "In next release empty section headers will be rendered. In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _$$_REQUIRE(_dependencyMap[13]);

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered. If empty section headers are not desirable their indices should be excluded from sectionIDs object. In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(View, {
                key: 's_' + comboID
              }, separator));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _this$props = this.props,
          renderScrollComponent = _this$props.renderScrollComponent,
          props = _objectWithoutProperties(_this$props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      _extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });

      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _requestAnimationFrame: function _requestAnimationFrame(fn) {
      var _this4 = this;

      var rafId = requestAnimationFrame(function () {
        _this4._rafIds = _this4._rafIds.filter(function (id) {
          return id !== rafId;
        });
        fn();
      });

      this._rafIds.push(rafId);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this5 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this5._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this5._measureAndUpdateScrollProps();

        _this5._prevRenderedRowsCount = _this5.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this6 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this6._childFrames[newFrame.index] = _objectSpread({}, newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},14716,[14314,14344,14407,14719,14722,10297,10033,10615,14728,10675,10456,14725,10078,13495]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[6]);

  var InternalListViewType = function (_React$Component) {
    "use strict";

    _inherits(InternalListViewType, _React$Component);

    function InternalListViewType() {
      _classCallCheck(this, InternalListViewType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalListViewType).apply(this, arguments));
    }

    _createClass(InternalListViewType, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {}
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {}
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {}
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {}
    }, {
      key: "getMetrics",
      value: function getMetrics() {}
    }, {
      key: "scrollTo",
      value: function scrollTo() {}
    }, {
      key: "scrollToEnd",
      value: function scrollToEnd(options) {}
    }]);

    return InternalListViewType;
  }(React.Component);

  InternalListViewType.DataSource = ListViewDataSource;
  module.exports = InternalListViewType;
},14719,[14320,14323,14371,14377,14386,10297,14722]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[4]);

  var warning = _$$_REQUIRE(_dependencyMap[5]);

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      _classCallCheck(this, ListViewDataSource);

      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    _createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [_toConsumableArray(rowIdentities)] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var _sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[_sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, _sectionID), this._getSectionHeaderData(this._dataBlob, _sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[_sectionID] || !prevRowsHash[_sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, _sectionID, rowID), this._getRowData(this._dataBlob, _sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);

    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var _key = arr[ii];
      warning(!result[_key], 'Value appears more than once in array: ' + _key);
      result[_key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},14722,[14359,14320,14323,13495,14725,10078]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},14725,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StaticRenderer = function (_React$Component) {
    _inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      _classCallCheck(this, StaticRenderer);

      return _possibleConstructorReturn(this, _getPrototypeOf(StaticRenderer).apply(this, arguments));
    }

    _createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);

    return StaticRenderer;
  }(React.Component);

  module.exports = StaticRenderer;
},14728,[14320,14323,14371,14377,14386,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "WebView", {
    enumerable: true,
    get: function get() {
      return _WebView.default;
    }
  });
  exports.default = undefined;

  var _WebView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _WebView.default;
  exports.default = _default;
},14731,[14305,14734]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _WebViewShared = _$$_REQUIRE(_dependencyMap[5]);

  var _WebView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) {
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  var __rest = this && this.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var UIManager = _reactNative.UIManager;
  var RNCWebView = (0, _reactNative.requireNativeComponent)('RNCWebView');
  var resolveAssetSource = _reactNative.Image.resolveAssetSource;

  var WebView = function (_super) {
    __extends(WebView, _super);

    function WebView() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.startUrl = null;
      _this.state = {
        viewState: _this.props.startInLoadingState ? 'LOADING' : 'IDLE',
        lastErrorEvent: null
      };
      _this.webViewRef = _react.default.createRef();

      _this.getCommands = function () {
        return UIManager.getViewManagerConfig('RNCWebView').Commands;
      };

      _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().goForward, undefined);
      };

      _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().goBack, undefined);
      };

      _this.reload = function () {
        _this.setState({
          viewState: 'LOADING'
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().reload, undefined);
      };

      _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().stopLoading, undefined);
      };

      _this.requestFocus = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().requestFocus, undefined);
      };

      _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().postMessage, [String(data)]);
      };

      _this.clearFormData = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().clearFormData, undefined);
      };

      _this.clearCache = function (includeDiskFiles) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().clearCache, [includeDiskFiles]);
      };

      _this.clearHistory = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().clearHistory, undefined);
      };

      _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().injectJavaScript, [data]);
      };

      _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      };

      _this.getWebViewHandle = function () {
        var nodeHandle = (0, _reactNative.findNodeHandle)(_this.webViewRef.current);
        (0, _invariant.default)(nodeHandle != null, 'nodeHandle expected to be non-null');
        return nodeHandle;
      };

      _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        var url = event.nativeEvent.url;
        _this.startUrl = url;

        if (onLoadStart) {
          onLoadStart(event);
        }

        _this.updateNavigationState(event);
      };

      _this.onLoadingError = function (event) {
        event.persist();
        var _a = _this.props,
            onError = _a.onError,
            onLoadEnd = _a.onLoadEnd;

        if (onError) {
          onError(event);
        }

        if (onLoadEnd) {
          onLoadEnd(event);
        }

        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: 'ERROR'
        });
      };

      _this.onHttpError = function (event) {
        var onHttpError = _this.props.onHttpError;

        if (onHttpError) {
          onHttpError(event);
        }
      };

      _this.onLoadingFinish = function (event) {
        var _a = _this.props,
            onLoad = _a.onLoad,
            onLoadEnd = _a.onLoadEnd;
        var url = event.nativeEvent.url;

        if (onLoad) {
          onLoad(event);
        }

        if (onLoadEnd) {
          onLoadEnd(event);
        }

        if (url === _this.startUrl) {
          _this.setState({
            viewState: 'IDLE'
          });
        }

        _this.updateNavigationState(event);
      };

      _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;

        if (onMessage) {
          onMessage(event);
        }
      };

      _this.onLoadingProgress = function (event) {
        var onLoadProgress = _this.props.onLoadProgress;
        var progress = event.nativeEvent.progress;

        if (progress === 1) {
          _this.setState(function (state) {
            if (state.viewState === 'LOADING') {
              return {
                viewState: 'IDLE'
              };
            }

            return null;
          });
        }

        if (onLoadProgress) {
          onLoadProgress(event);
        }
      };

      _this.onShouldStartLoadWithRequestCallback = function (shouldStart, url) {
        if (shouldStart) {
          UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().loadUrl, [String(url)]);
        }
      };

      return _this;
    }

    WebView.prototype.render = function () {
      var _a = this.props,
          onMessage = _a.onMessage,
          onShouldStartLoadWithRequestProp = _a.onShouldStartLoadWithRequest,
          originWhitelist = _a.originWhitelist,
          renderError = _a.renderError,
          renderLoading = _a.renderLoading,
          source = _a.source,
          style = _a.style,
          containerStyle = _a.containerStyle,
          _b = _a.nativeConfig,
          nativeConfig = _b === undefined ? {} : _b,
          otherProps = __rest(_a, ["onMessage", "onShouldStartLoadWithRequest", "originWhitelist", "renderError", "renderLoading", "source", "style", "containerStyle", "nativeConfig"]);

      var otherView = null;

      if (this.state.viewState === 'LOADING') {
        otherView = (renderLoading || _WebViewShared.defaultRenderLoading)();
      } else if (this.state.viewState === 'ERROR') {
        var errorEvent = this.state.lastErrorEvent;
        (0, _invariant.default)(errorEvent != null, 'lastErrorEvent expected to be non-null');
        otherView = (renderError || _WebViewShared.defaultRenderError)(errorEvent.domain, errorEvent.code, errorEvent.description);
      } else if (this.state.viewState !== 'IDLE') {
        console.error("RNCWebView invalid state encountered: " + this.state.viewState);
      }

      var webViewStyles = [_WebView.default.container, _WebView.default.webView, style];
      var webViewContainerStyle = [_WebView.default.container, containerStyle];

      if (typeof source !== "number" && source && 'method' in source) {
        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }
      }

      var NativeWebView = nativeConfig.component || RNCWebView;
      var onShouldStartLoadWithRequest = (0, _WebViewShared.createOnShouldStartLoadWithRequest)(this.onShouldStartLoadWithRequestCallback, originWhitelist, onShouldStartLoadWithRequestProp);

      var webView = _react.default.createElement(NativeWebView, (0, _extends2.default)({
        key: "webViewKey"
      }, otherProps, {
        messagingEnabled: typeof onMessage === 'function',
        onLoadingError: this.onLoadingError,
        onLoadingFinish: this.onLoadingFinish,
        onLoadingProgress: this.onLoadingProgress,
        onLoadingStart: this.onLoadingStart,
        onHttpError: this.onHttpError,
        onMessage: this.onMessage,
        onShouldStartLoadWithRequest: onShouldStartLoadWithRequest,
        ref: this.webViewRef,
        source: resolveAssetSource(source),
        style: webViewStyles
      }, nativeConfig.props));

      return _react.default.createElement(_reactNative.View, {
        style: webViewContainerStyle
      }, webView, otherView);
    };

    WebView.defaultProps = {
      overScrollMode: 'always',
      javaScriptEnabled: true,
      thirdPartyCookiesEnabled: true,
      scalesPageToFit: true,
      allowsFullscreenVideo: false,
      allowFileAccess: false,
      saveFormDataDisabled: false,
      cacheEnabled: true,
      androidHardwareAccelerationDisabled: false,
      originWhitelist: _WebViewShared.defaultOriginWhitelist
    };

    WebView.isFileUploadSupported = function () {
      return __awaiter(undefined, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, _reactNative.NativeModules.RNCWebView.isFileUploadSupported()];
        });
      });
    };

    return WebView;
  }(_react.default.Component);

  var _default = WebView;
  exports.default = _default;
},14734,[14305,14344,10297,10033,14326,14737,14743]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.defaultRenderError = exports.defaultRenderLoading = exports.createOnShouldStartLoadWithRequest = exports.defaultOriginWhitelist = undefined;

  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _WebView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var __spreadArrays = this && this.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
      s += arguments[i].length;
    }

    for (var r = Array(s), k = 0, i = 0; i < il; i++) {
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
        r[k] = a[j];
      }
    }

    return r;
  };

  var defaultOriginWhitelist = ['http://*', 'https://*'];
  exports.defaultOriginWhitelist = defaultOriginWhitelist;

  var extractOrigin = function extractOrigin(url) {
    var result = /^[A-Za-z][A-Za-z0-9+\-.]+:(\/\/)?[^/]*/.exec(url);
    return result === null ? '' : result[0];
  };

  var originWhitelistToRegex = function originWhitelistToRegex(originWhitelist) {
    return "^" + (0, _escapeStringRegexp.default)(originWhitelist).replace(/\\\*/g, '.*');
  };

  var passesWhitelist = function passesWhitelist(compiledWhitelist, url) {
    var origin = extractOrigin(url);
    return compiledWhitelist.some(function (x) {
      return new RegExp(x).test(origin);
    });
  };

  var compileWhitelist = function compileWhitelist(originWhitelist) {
    return __spreadArrays(['about:blank'], originWhitelist || []).map(originWhitelistToRegex);
  };

  var createOnShouldStartLoadWithRequest = function createOnShouldStartLoadWithRequest(loadRequest, originWhitelist, onShouldStartLoadWithRequest) {
    return function (_a) {
      var nativeEvent = _a.nativeEvent;
      var shouldStart = true;
      var url = nativeEvent.url,
          lockIdentifier = nativeEvent.lockIdentifier;

      if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {
        _reactNative.Linking.openURL(url);

        shouldStart = false;
      }

      if (onShouldStartLoadWithRequest) {
        shouldStart = onShouldStartLoadWithRequest(nativeEvent);
      }

      loadRequest(shouldStart, url, lockIdentifier);
    };
  };

  exports.createOnShouldStartLoadWithRequest = createOnShouldStartLoadWithRequest;

  var defaultRenderLoading = function defaultRenderLoading() {
    return _react.default.createElement(_reactNative.View, {
      style: _WebView.default.loadingOrErrorView
    }, _react.default.createElement(_reactNative.ActivityIndicator, null));
  };

  exports.defaultRenderLoading = defaultRenderLoading;

  var defaultRenderError = function defaultRenderError(errorDomain, errorCode, errorDesc) {
    return _react.default.createElement(_reactNative.View, {
      style: _WebView.default.loadingOrErrorView
    }, _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorTextTitle
    }, "Error loading page"), _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorText
    }, "Domain: " + errorDomain), _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorText
    }, "Error Code: " + errorCode), _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorText
    }, "Description: " + errorDesc));
  };

  exports.defaultRenderError = defaultRenderError;
},14737,[14305,14740,10297,10033,14743]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;

  module.exports = function (string) {
    if (typeof string !== 'string') {
      throw new TypeError('Expected a string');
    }

    return string.replace(matchOperatorsRegex, '\\$&');
  };
},14740,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    loadingOrErrorView: {
      position: 'absolute',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
      width: '100%',
      backgroundColor: 'white'
    },
    loadingProgressBar: {
      height: 20
    },
    errorText: {
      fontSize: 14,
      textAlign: 'center',
      marginBottom: 2
    },
    errorTextTitle: {
      fontSize: 15,
      fontWeight: '500',
      marginBottom: 10
    },
    webView: {
      backgroundColor: '#ffffff'
    }
  });

  var _default = styles;
  exports.default = _default;
},14743,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var InputAccessoryView = function (_React$Component) {
    (0, _inherits2.default)(InputAccessoryView, _React$Component);

    function InputAccessoryView() {
      (0, _classCallCheck2.default)(this, InputAccessoryView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InputAccessoryView).apply(this, arguments));
    }

    (0, _createClass2.default)(InputAccessoryView, [{
      key: "render",
      value: function render() {
        {
          console.warn('<InputAccessoryView> is only supported on iOS.');
        }

        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(_RCTInputAccessoryViewNativeComponent.default, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor
        }, this.props.children);
      }
    }]);
    return InputAccessoryView;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},14746,[14305,14320,14323,14371,14377,14386,14749,14419,10066,10297,10441]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('RCTInputAccessoryView');

  exports.default = _default;
},14749,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ModalManager');

  exports.default = _default;
},14752,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('ModalHostView', {
    interfaceOnly: true,
    paperComponentName: 'RCTModalHostView'
  });

  exports.default = _default;
},14755,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(0);
},14758,[10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('I18nManager');

  exports.default = _default;
},14761,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = (0, _reactNative.requireNativeComponent)('AndroidDropdownPicker');
},14764,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = (0, _reactNative.requireNativeComponent)('AndroidDialogPicker');
},14767,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var View = _$$_REQUIRE(_dependencyMap[4]);

  var exported;
  {
    var SafeAreaView = function SafeAreaView(props, forwardedRef) {
      var emulateUnlessSupported = props.emulateUnlessSupported,
          localProps = _objectWithoutProperties(props, ["emulateUnlessSupported"]);

      return React.createElement(View, _extends({}, localProps, {
        ref: forwardedRef
      }));
    };

    var SafeAreaViewRef = React.forwardRef(SafeAreaView);
    SafeAreaViewRef.displayName = 'SafeAreaView';
    exported = SafeAreaViewRef;
  }
  module.exports = exported;
},14770,[14344,14407,10066,10297,10447]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('Slider', {
    interfaceOnly: true,
    paperComponentName: 'RCTSlider'
  });

  exports.default = _default;
},14773,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('Switch', {
    paperComponentName: 'RCTSwitch'
  });

  exports.default = _default;
},14776,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      NativeComponent = _require.NativeComponent;

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = requireNativeComponent('AndroidSwitch');
},14779,[10114,10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedViewPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DocumentSelectionState = _$$_REQUIRE(_dependencyMap[4]);

  var Text = _$$_REQUIRE(_dependencyMap[5]);

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  module.exports = _objectSpread({}, DeprecatedViewPropTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
    autoCompleteType: PropTypes.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
    autoCorrect: PropTypes.bool,
    spellCheck: PropTypes.bool,
    autoFocus: PropTypes.bool,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    editable: PropTypes.bool,
    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
    returnKeyLabel: PropTypes.string,
    maxLength: PropTypes.number,
    numberOfLines: PropTypes.number,
    disableFullscreenUI: PropTypes.bool,
    enablesReturnKeyAutomatically: PropTypes.bool,
    multiline: PropTypes.bool,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    onChange: PropTypes.func,
    onChangeText: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    onTextInput: PropTypes.func,
    onEndEditing: PropTypes.func,
    onSelectionChange: PropTypes.func,
    onSubmitEditing: PropTypes.func,
    onKeyPress: PropTypes.func,
    onLayout: PropTypes.func,
    onScroll: PropTypes.func,
    placeholder: PropTypes.string,
    placeholderTextColor: DeprecatedColorPropType,
    scrollEnabled: PropTypes.bool,
    secureTextEntry: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    selectionState: PropTypes.instanceOf(DocumentSelectionState),
    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),
    value: PropTypes.string,
    defaultValue: PropTypes.string,
    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
    clearTextOnFocus: PropTypes.bool,
    selectTextOnFocus: PropTypes.bool,
    blurOnSubmit: PropTypes.bool,
    style: Text.propTypes.style,
    underlineColorAndroid: DeprecatedColorPropType,
    inlineImageLeft: PropTypes.string,
    inlineImagePadding: PropTypes.number,
    rejectResponderTermination: PropTypes.bool,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    caretHidden: PropTypes.bool,
    contextMenuHidden: PropTypes.bool,
    inputAccessoryViewID: PropTypes.string,
    textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode']),
    showSoftInputOnFocus: PropTypes.bool
  });
},14782,[14314,10318,14419,14680,10789,10483]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},14785,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ActionSheetManager');

  exports.default = _default;
},14788,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('HeadlessJsTaskSupport');

  exports.default = _default;
},14791,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var HeadlessJsTaskError = function (_Error) {
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);

    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HeadlessJsTaskError).apply(this, arguments));
    }

    return HeadlessJsTaskError;
  }((0, _wrapNativeSuper2.default)(Error));

  exports.default = HeadlessJsTaskError;
},14794,[14305,14320,14371,14377,14386,14458]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('BugReporting');

  exports.default = _default;
},14797,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('RedBox');

  exports.default = _default;
},14800,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _GlobalPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
  module.exports = PerformanceLoggerContext;
},14803,[14305,14308,10297,14548]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[1]);

  var Text = _$$_REQUIRE(_dependencyMap[2]);

  var View = _$$_REQUIRE(_dependencyMap[3]);

  function ReactFabricIndicator() {
    return React.createElement(View, {
      style: styles.container
    }, React.createElement(Text, {
      style: styles.text
    }, "FABRIC"));
  }

  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: 'rgba(0,0,0, 0.25)',
      position: 'absolute',
      top: 0,
      right: 0,
      padding: 2
    },
    text: {
      fontSize: 6,
      color: '#ffffff'
    }
  });
  module.exports = ReactFabricIndicator;
},14806,[10297,10441,10483,10447]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('DeviceEventManager');

  exports.default = _default;
},14809,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[0]);

  var ReactFabric;
  {
    ReactFabric = _$$_REQUIRE(_dependencyMap[1]);
  }

  _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);

  module.exports = ReactFabric;
},14812,[14566,14815]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2]),
      React = _$$_REQUIRE(_dependencyMap[3]),
      Scheduler = _$$_REQUIRE(_dependencyMap[4]);

  function ReactError(error) {
    error.name = "Invariant Violation";
    return error;
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          if (!JSCompiler_inline_result) throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      if (eventPluginOrder) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (namesToPlugins[pluginName]) throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type."));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw ReactError(Error("Touch object is missing identifier."));
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  });

  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };

  getInstanceFromNode = getInstanceFromInstance;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical._nativeTag;
    if (!inst) throw ReactError(Error("All native instances should have a tag."));
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental");
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder");
  var MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    if (2 !== isFiberMountedImpl(fiber)) throw ReactError(Error("Unable to find node on an unmounted component."));
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = isFiberMountedImpl(fiber);
      if (3 === alternate) throw ReactError(Error("Unable to find node on an unmounted component."));
      return 1 === alternate ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw ReactError(Error("Unable to find node on an unmounted component."));
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
        }
      }
      if (a.alternate !== b) throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
    }

    if (3 !== a.tag) throw ReactError(Error("Unable to find node on an unmounted component."));
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (getInstanceFromNode(target)) throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function flushDiscreteUpdatesImpl() {}

  var isInsideEventHandler = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) if (flushDiscreteUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  (function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {};

    ReactNativeComponent.prototype.focus = function () {};

    ReactNativeComponent.prototype.measure = function () {};

    ReactNativeComponent.prototype.measureInWindow = function () {};

    ReactNativeComponent.prototype.measureLayout = function () {};

    ReactNativeComponent.prototype.setNativeProps = function () {};

    return ReactNativeComponent;
  })(React.Component);

  new Map();
  new Map();
  new Set();
  new Map();

  function dispatchEvent(target, topLevelType, nativeEvent) {
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
      }
    });
  }

  function shim$1() {
    throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
  }

  var _nativeFabricUIManage$1 = nativeFabricUIManager,
      createNode = _nativeFabricUIManage$1.createNode,
      cloneNode = _nativeFabricUIManage$1.cloneNode,
      cloneNodeWithNewChildren = _nativeFabricUIManage$1.cloneNodeWithNewChildren,
      cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage$1.cloneNodeWithNewChildrenAndProps,
      cloneNodeWithNewProps = _nativeFabricUIManage$1.cloneNodeWithNewProps,
      createChildNodeSet = _nativeFabricUIManage$1.createChildSet,
      appendChildNode = _nativeFabricUIManage$1.appendChild,
      appendChildNodeToSet = _nativeFabricUIManage$1.appendChildToSet,
      completeRoot = _nativeFabricUIManage$1.completeRoot,
      registerEventHandler = _nativeFabricUIManage$1.registerEventHandler,
      fabricMeasure = _nativeFabricUIManage$1.measure,
      fabricMeasureInWindow = _nativeFabricUIManage$1.measureInWindow,
      fabricMeasureLayout = _nativeFabricUIManage$1.measureLayout,
      getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      nextReactTag = 2;
  registerEventHandler && registerEventHandler(dispatchEvent);

  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
      if (!(this instanceof ReactFabricHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
      this._internalInstanceHandle = internalInstanceHandle;
    }

    ReactFabricHostComponent.prototype.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.measure = function (callback) {
      fabricMeasure(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureInWindow = function (callback) {
      fabricMeasureInWindow(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      "number" !== typeof relativeToNativeNode && relativeToNativeNode instanceof ReactFabricHostComponent && fabricMeasureLayout(this._internalInstanceHandle.stateNode.node, relativeToNativeNode._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactFabricHostComponent.prototype.setNativeProps = function () {};

    return ReactFabricHostComponent;
  }();

  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    if (!hostContext.isInAParentText) throw ReactError(Error("Text strings must be rendered within a <Text> component."));
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var updatePayload = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, updatePayload),
      canonical: instance.canonical
    };
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority,
      fakeCallbackNode = {},
      requestPaint = undefined !== Scheduler_requestPaint ? Scheduler_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = false,
      initialTimeMs = Scheduler_now(),
      now = 1e4 > initialTimeMs ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return 99;

      case Scheduler_UserBlockingPriority:
        return 98;

      case Scheduler_NormalPriority:
        return 97;

      case Scheduler_LowPriority:
        return 96;

      case Scheduler_IdlePriority:
        return 95;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return Scheduler_ImmediatePriority;

      case 98:
        return Scheduler_UserBlockingPriority;

      case 97:
        return Scheduler_NormalPriority;

      case 96:
        return Scheduler_LowPriority;

      case 95:
        return Scheduler_IdlePriority;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function runWithPriority$1(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    null !== immediateQueueCallbackNode && Scheduler_cancelCallback(immediateQueueCallbackNode);
    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority$1(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }

  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (1073741823 === expirationTime) return 99;
    if (1 === expirationTime) return 95;
    currentTime = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - currentTime);
    return 0 >= currentTime ? 99 : 250 >= currentTime ? 98 : 5250 >= currentTime ? 97 : 95;
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        lazyComponent._status = 0;
        result = lazyComponent._ctor;
        result = result();
        result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        });

        switch (lazyComponent._status) {
          case 1:
            return lazyComponent._result;

          case 2:
            throw lazyComponent._result;
        }

        lazyComponent._result = result;
        throw result;
    }
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue2 = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue2;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime, suspenseConfig) {
    return {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        if ("function" !== typeof _callback3) throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + _callback3));

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;

        if (element) {
          if (1 !== element.tag) throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
          inst = element.stateNode;
        }

        if (!inst) throw ReactError(Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue."));
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      if ("string" !== typeof returnFiber) throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
      if (!element._owner) throw ReactError(Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw ReactError(Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")."));
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw ReactError(Error("An iterable object provided no iterator."));

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);

              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, ReactError(Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var SubtreeSuspenseContextMask = 1,
      InvisibleParentSuspenseContext = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        if (null !== node.memoizedState) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var NoEffect$1 = 0,
      UnmountSnapshot = 2,
      UnmountMutation = 4,
      MountMutation = 8,
      UnmountLayout = 16,
      MountLayout = 32,
      MountPassive = 64,
      UnmountPassive = 128,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      renderExpirationTime$1 = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      nextCurrentHook = null,
      firstWorkInProgressHook = null,
      workInProgressHook = null,
      nextWorkInProgressHook = null,
      remainingExpirationTime = 0,
      componentUpdateQueue = null,
      sideEffectTag = 0,
      didScheduleRenderPhaseUpdate = false,
      renderPhaseUpdates = null,
      numberOfReRenders = 0;

  function throwInvalidHookError() {
    throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!is(nextDeps[i], prevDeps[i])) return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
    renderExpirationTime$1 = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    nextCurrentHook = null !== current ? current.memoizedState : null;
    ReactCurrentDispatcher$1.current = null === nextCurrentHook ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    workInProgress = Component(props, refOrContext);

    if (didScheduleRenderPhaseUpdate) {
      do {
        didScheduleRenderPhaseUpdate = false, numberOfReRenders += 1, nextCurrentHook = null !== current ? current.memoizedState : null, nextWorkInProgressHook = firstWorkInProgressHook, componentUpdateQueue = workInProgressHook = currentHook = null, ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdate, workInProgress = Component(props, refOrContext);
      } while (didScheduleRenderPhaseUpdate);

      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    current = currentlyRenderingFiber$1;
    current.memoizedState = firstWorkInProgressHook;
    current.expirationTime = remainingExpirationTime;
    current.updateQueue = componentUpdateQueue;
    current.effectTag |= sideEffectTag;
    current = null !== currentHook && null !== currentHook.next;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    if (current) throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
    return workInProgress;
  }

  function resetHooks() {
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    didScheduleRenderPhaseUpdate = false;
    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    null === workInProgressHook ? firstWorkInProgressHook = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook, nextCurrentHook = null !== currentHook ? currentHook.next : null;else {
      if (null === nextCurrentHook) throw ReactError(Error("Rendered more hooks than during the previous render."));
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        queue: currentHook.queue,
        baseUpdate: currentHook.baseUpdate,
        next: null
      };
      workInProgressHook = null === workInProgressHook ? firstWorkInProgressHook = newHook : workInProgressHook.next = newHook;
      nextCurrentHook = currentHook.next;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
    queue.lastRenderedReducer = reducer;

    if (0 < numberOfReRenders) {
      var _dispatch = queue.dispatch;

      if (null !== renderPhaseUpdates) {
        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (undefined !== firstRenderPhaseUpdate) {
          renderPhaseUpdates.delete(queue);
          var newState = hook.memoizedState;

          do {
            newState = reducer(newState, firstRenderPhaseUpdate.action), firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
          } while (null !== firstRenderPhaseUpdate);

          is(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          hook.baseUpdate === queue.last && (hook.baseState = newState);
          queue.lastRenderedState = newState;
          return [newState, _dispatch];
        }
      }

      return [hook.memoizedState, _dispatch];
    }

    _dispatch = queue.last;
    var baseUpdate = hook.baseUpdate;
    newState = hook.baseState;
    null !== baseUpdate ? (null !== _dispatch && (_dispatch.next = null), _dispatch = baseUpdate.next) : _dispatch = null !== _dispatch ? _dispatch.next : null;

    if (null !== _dispatch) {
      var newBaseUpdate = firstRenderPhaseUpdate = null,
          _update = _dispatch,
          didSkip = false;

      do {
        var updateExpirationTime = _update.expirationTime;
        updateExpirationTime < renderExpirationTime$1 ? (didSkip || (didSkip = true, newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState), updateExpirationTime > remainingExpirationTime && (remainingExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig), newState = _update.eagerReducer === reducer ? _update.eagerState : reducer(newState, _update.action));
        baseUpdate = _update;
        _update = _update.next;
      } while (null !== _update && _update !== _dispatch);

      didSkip || (newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState);
      is(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      hook.baseUpdate = newBaseUpdate;
      hook.baseState = firstRenderPhaseUpdate;
      queue.lastRenderedState = newState;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    null === componentUpdateQueue ? (componentUpdateQueue = {
      lastEffect: null
    }, componentUpdateQueue.lastEffect = tag.next = tag) : (create = componentUpdateQueue.lastEffect, null === create ? componentUpdateQueue.lastEffect = tag.next = tag : (destroy = create.next, create.next = tag, tag.next = destroy, componentUpdateQueue.lastEffect = tag));
    return tag;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, undefined, undefined === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(NoEffect$1, create, destroy, deps);
        return;
      }
    }

    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, destroy, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function mountDebugValue() {}

  function dispatchAction(fiber, queue, action) {
    if (!(25 > numberOfReRenders)) throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1) {
      if (didScheduleRenderPhaseUpdate = true, fiber = {
        expirationTime: renderExpirationTime$1,
        suspenseConfig: null,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === renderPhaseUpdates && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), undefined === action) renderPhaseUpdates.set(queue, fiber);else {
        for (queue = action; null !== queue.next;) {
          queue = queue.next;
        }

        queue.next = fiber;
      }
    } else {
      var currentTime = requestCurrentTime(),
          _suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);
      _suspenseConfig = {
        expirationTime: currentTime,
        suspenseConfig: _suspenseConfig,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var _last = queue.last;
      if (null === _last) _suspenseConfig.next = _suspenseConfig;else {
        var first = _last.next;
        null !== first && (_suspenseConfig.next = first);
        _last.next = _suspenseConfig;
      }
      queue.last = _suspenseConfig;
      if (0 === fiber.expirationTime && (null === alternate || 0 === alternate.expirationTime) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
            _eagerState = alternate(currentState, action);

        _suspenseConfig.eagerReducer = alternate;
        _suspenseConfig.eagerState = _eagerState;
        if (is(_eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleUpdateOnFiber(fiber, currentTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return mountEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = undefined !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function useState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return updateEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return updateEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: updateReducer,
    useRef: function useRef() {
      return updateWorkInProgressHook().memoizedState;
    },
    useState: function useState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 13:
        return false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current$$1, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref && (didReceiveUpdate = false, updateExpirationTime < renderExpirationTime) ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {};

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextState = null,
        nextDidTimeout = false,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & ForceSuspenseFallback) && (null === current$$1 || null !== current$$1.memoizedState));
    JSCompiler_temp ? (nextState = SUSPENDED_MARKER, nextDidTimeout = true, workInProgress.effectTag &= -65) : null !== current$$1 && null === current$$1.memoizedState || undefined === nextProps.fallback || true === nextProps.unstable_avoidThisFallback || (suspenseContext |= InvisibleParentSuspenseContext);
    suspenseContext &= SubtreeSuspenseContextMask;
    push(suspenseStackCursor, suspenseContext, workInProgress);
    if (null === current$$1) {
      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        current$$1 = createFiberFromFragment(null, mode, 0, null);
        current$$1.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, current$$1.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = current$$1, nextDidTimeout = nextDidTimeout.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextProps, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        current$$1.sibling = renderExpirationTime;
        mode = current$$1;
      } else mode = renderExpirationTime = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime);
    } else {
      if (null !== current$$1.memoizedState) {
        if (suspenseContext = current$$1.child, mode = suspenseContext.sibling, nextDidTimeout) {
          nextProps = nextProps.fallback;
          renderExpirationTime = createWorkInProgress(suspenseContext, suspenseContext.pendingProps, 0);
          renderExpirationTime.return = workInProgress;
          if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== suspenseContext.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
            nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
          }
          nextProps = createWorkInProgress(mode, nextProps, mode.expirationTime);
          nextProps.return = workInProgress;
          renderExpirationTime.sibling = nextProps;
          mode = renderExpirationTime;
          renderExpirationTime.childExpirationTime = 0;
          renderExpirationTime = nextProps;
        } else mode = renderExpirationTime = reconcileChildFibers(workInProgress, suspenseContext.child, nextProps.children, renderExpirationTime);
      } else if (suspenseContext = current$$1.child, nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        nextProps.child = suspenseContext;
        null !== suspenseContext && (suspenseContext.return = nextProps);
        if (0 === (workInProgress.mode & 2)) for (suspenseContext = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = suspenseContext; null !== suspenseContext;) {
          suspenseContext.return = nextProps, suspenseContext = suspenseContext.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        renderExpirationTime.effectTag |= 2;
        mode = nextProps;
        nextProps.childExpirationTime = 0;
      } else renderExpirationTime = mode = reconcileChildFibers(workInProgress, suspenseContext, nextProps.children, renderExpirationTime);
      workInProgress.stateNode = current$$1.stateNode;
    }
    workInProgress.memoizedState = nextState;
    workInProgress.child = mode;
    return renderExpirationTime;
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode);
  }

  function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current$$1, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.effectTag |= 64;else {
      if (null !== current$$1 && 0 !== (current$$1.effectTag & 64)) a: for (current$$1 = workInProgress.child; null !== current$$1;) {
        if (13 === current$$1.tag) {
          if (null !== current$$1.memoizedState) {
            current$$1.expirationTime < renderExpirationTime && (current$$1.expirationTime = renderExpirationTime);
            var alternate = current$$1.alternate;
            null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
            scheduleWorkOnParentPath(current$$1.return, renderExpirationTime);
          }
        } else if (null !== current$$1.child) {
          current$$1.child.return = current$$1;
          current$$1 = current$$1.child;
          continue;
        }

        if (current$$1 === workInProgress) break a;

        for (; null === current$$1.sibling;) {
          if (null === current$$1.return || current$$1.return === workInProgress) break a;
          current$$1 = current$$1.return;
        }

        current$$1.sibling.return = current$$1.return;
        current$$1 = current$$1.sibling;
      }
      nextProps &= SubtreeSuspenseContextMask;
    }
    push(suspenseStackCursor, nextProps, workInProgress);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          nextProps = renderExpirationTime.alternate, null !== nextProps && null === findFirstSuspended(nextProps) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderExpirationTime, tailMode);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          nextProps = revealOrder.alternate;

          if (null !== nextProps && null === findFirstSuspended(nextProps)) {
            workInProgress.child = revealOrder;
            break;
          }

          nextProps = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = nextProps;
        }

        initSuspenseListRenderState(workInProgress, true, renderExpirationTime, null, tailMode);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.dependencies = current$$1.dependencies);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current$$1 && workInProgress.child !== current$$1.child) throw ReactError(Error("Resuming work not yet implemented."));

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var _appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance, node.type, node.memoizedProps, node));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, _appendAllChildren(parent, primaryChildParent, true, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance, node.type, node.memoizedProps, node));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  updateHostContainer = function updateHostContainer(workInProgress) {
    var portalOrRoot = workInProgress.stateNode;

    if (null !== workInProgress.firstEffect) {
      var container = portalOrRoot.containerInfo,
          newChildSet = createChildNodeSet(container);
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.effectTag |= 4;
      completeRoot(container, newChildSet);
    }
  };

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = null === workInProgress.firstEffect) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, recyclableInstance = type.node, type = {
        node: current ? null !== newProps ? cloneNodeWithNewProps(recyclableInstance, newProps) : cloneNode(recyclableInstance) : null !== newProps ? cloneNodeWithNewChildrenAndProps(recyclableInstance, newProps) : cloneNodeWithNewChildren(recyclableInstance),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.effectTag |= 4 : _appendAllChildren(type, workInProgress, false, false));
    }
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
        workInProgress.effectTag = effectTag & -2049 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 18:
        return null;

      case 19:
        return pop(suspenseStackCursor, workInProgress), null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));

  function logCapturedError(capturedError) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet$1 = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current$$1, instance) {
    try {
      instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current$$1, unmountError);
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitHookEffectList(unmountTag, mountTag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & unmountTag) !== NoEffect$1) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && destroy();
        }

        (effect.tag & mountTag) !== NoEffect$1 && (destroy = effect.create, effect.destroy = destroy());
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitUnmount(current$$1$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var firstEffect = updateQueue.next;
          runWithPriority$1(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var destroy = effect.destroy;

              if (undefined !== destroy) {
                var current$$1 = current$$1$jscomp$0;

                try {
                  destroy();
                } catch (error) {
                  captureCommitPhaseError(current$$1, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        renderPriorityLevel = current$$1$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$$1$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        createChildNodeSet(current$$1$jscomp$0.stateNode.containerInfo);
    }
  }

  function detachFiber(current$$1) {
    var alternate = current$$1.alternate;
    current$$1.return = null;
    current$$1.child = null;
    current$$1.memoizedState = null;
    current$$1.updateQueue = null;
    current$$1.dependencies = null;
    current$$1.alternate = null;
    current$$1.firstEffect = null;
    current$$1.lastEffect = null;
    current$$1.pendingProps = null;
    current$$1.memoizedProps = null;
    null !== alternate && detachFiber(alternate);
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;

      case 12:
        return;

      case 13:
        null !== finishedWork.memoizedState && (globalMostRecentFallbackTime = now());
        attachSuspenseRetryListeners(finishedWork);
        return;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        return;
    }

    switch (finishedWork.tag) {
      case 1:
      case 5:
      case 6:
      case 20:
        break;

      case 3:
      case 4:
        break;

      default:
        throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet$1());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootErrored = 1,
      RootSuspended = 2,
      RootSuspendedWithDelay = 3,
      RootCompleted = 4,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootHasPendingPing = false,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      pendingPassiveEffectsExpirationTime = 0,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTime() {
    return (executionContext & 48) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 1;
        break;

      default:
        throw ReactError(Error("Expected a valid priority level"));
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime && --currentTime;
    return currentTime;
  }

  function scheduleUpdateOnFiber(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      fiber.pingTime = 0;
      var priorityLevel = getCurrentPriorityLevel();
      if (1073741823 === expirationTime) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & 48) === NoContext) for (var callback = renderRoot(fiber, 1073741823, true); null !== callback;) {
          callback = callback(true);
        } else scheduleCallbackForRoot(fiber, 99, 1073741823), executionContext === NoContext && flushSyncCallbackQueue();
      } else scheduleCallbackForRoot(fiber, priorityLevel, expirationTime);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (undefined === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime), fiber = root.lastPendingTime, 0 === fiber || expirationTime < fiber) && (root.lastPendingTime = expirationTime);
    return root;
  }

  function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
    if (root.callbackExpirationTime < expirationTime) {
      var existingCallbackNode = root.callbackNode;
      null !== existingCallbackNode && existingCallbackNode !== fakeCallbackNode && Scheduler_cancelCallback(existingCallbackNode);
      root.callbackExpirationTime = expirationTime;
      1073741823 === expirationTime ? root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime))) : (existingCallbackNode = null, 1 !== expirationTime && (existingCallbackNode = {
        timeout: 10 * (1073741821 - expirationTime) - now()
      }), root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), existingCallbackNode));
    }
  }

  function runRootCallback(root, callback, isSync) {
    var prevCallbackNode = root.callbackNode,
        continuation = null;

    try {
      return continuation = callback(isSync), null !== continuation ? runRootCallback.bind(null, root, continuation) : null;
    } finally {
      null === continuation && prevCallbackNode === root.callbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0);
    }
  }

  function resolveLocksOnRoot(root, expirationTime) {
    var firstBatch = root.firstBatch;
    return null !== firstBatch && firstBatch._defer && firstBatch._expirationTime >= expirationTime ? (scheduleCallback(97, function () {
      firstBatch._onComplete();

      return null;
    }), true) : false;
  }

  function flushPendingDiscreteUpdates() {
    if (null !== rootsWithPendingDiscreteUpdates) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
      });
      flushSyncCallbackQueue();
    }
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          var childContextTypes = interruptedWork.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork);
          break;

        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer(interruptedWork);
          break;

        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null, expirationTime);
    renderExpirationTime = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootHasPendingPing = false;
  }

  function renderRoot(root$jscomp$0, expirationTime, isSync) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    if (root$jscomp$0.firstPendingTime < expirationTime) return null;
    if (isSync && root$jscomp$0.finishedExpirationTime === expirationTime) return commitRoot.bind(null, root$jscomp$0);
    flushPassiveEffects();
    if (root$jscomp$0 !== workInProgressRoot || expirationTime !== renderExpirationTime) prepareFreshStack(root$jscomp$0, expirationTime);else if (workInProgressRootExitStatus === RootSuspendedWithDelay) if (workInProgressRootHasPendingPing) prepareFreshStack(root$jscomp$0, expirationTime);else {
      var lastPendingTime = root$jscomp$0.lastPendingTime;
      if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
    }

    if (null !== workInProgress) {
      lastPendingTime = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = ReactCurrentDispatcher.current;
      null === prevDispatcher && (prevDispatcher = ContextOnlyDispatcher);
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;

      if (isSync) {
        if (1073741823 !== expirationTime) {
          var currentTime = requestCurrentTime();
          if (currentTime < expirationTime) return executionContext = lastPendingTime, resetContextDependencies(), ReactCurrentDispatcher.current = prevDispatcher, renderRoot.bind(null, root$jscomp$0, currentTime);
        }
      } else currentEventTime = 0;

      do {
        try {
          if (isSync) for (; null !== workInProgress;) {
            workInProgress = performUnitOfWork(workInProgress);
          } else for (; null !== workInProgress && !Scheduler_shouldYield();) {
            workInProgress = performUnitOfWork(workInProgress);
          }
          break;
        } catch (thrownValue) {
          resetContextDependencies();
          resetHooks();
          currentTime = workInProgress;
          if (null === currentTime || null === currentTime.return) throw prepareFreshStack(root$jscomp$0, expirationTime), executionContext = lastPendingTime, thrownValue;

          a: {
            var root = root$jscomp$0,
                returnFiber = currentTime.return,
                sourceFiber = currentTime,
                value = thrownValue,
                renderExpirationTime$jscomp$0 = renderExpirationTime;
            sourceFiber.effectTag |= 1024;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;

            if (null !== value && "object" === typeof value && "function" === typeof value.then) {
              var thenable = value,
                  hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext);
              value = returnFiber;

              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === value.tag) null !== value.memoizedState ? JSCompiler_temp = false : (JSCompiler_temp = value.memoizedProps, JSCompiler_temp = undefined === JSCompiler_temp.fallback ? false : true !== JSCompiler_temp.unstable_avoidThisFallback ? true : hasInvisibleParentBoundary ? false : true);

                if (JSCompiler_temp) {
                  returnFiber = value.updateQueue;
                  null === returnFiber ? (returnFiber = new Set(), returnFiber.add(thenable), value.updateQueue = returnFiber) : returnFiber.add(thenable);

                  if (0 === (value.mode & 2)) {
                    value.effectTag |= 64;
                    sourceFiber.effectTag &= -1957;
                    1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (renderExpirationTime$jscomp$0 = createUpdate(1073741823, null), renderExpirationTime$jscomp$0.tag = 2, enqueueUpdate(sourceFiber, renderExpirationTime$jscomp$0)));
                    sourceFiber.expirationTime = 1073741823;
                    break a;
                  }

                  sourceFiber = root;
                  root = renderExpirationTime$jscomp$0;
                  hasInvisibleParentBoundary = sourceFiber.pingCache;
                  null === hasInvisibleParentBoundary ? (hasInvisibleParentBoundary = sourceFiber.pingCache = new PossiblyWeakMap(), returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)) : (returnFiber = hasInvisibleParentBoundary.get(thenable), undefined === returnFiber && (returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)));
                  returnFiber.has(root) || (returnFiber.add(root), sourceFiber = pingSuspendedRoot.bind(null, sourceFiber, thenable, root), thenable.then(sourceFiber, sourceFiber));
                  value.effectTag |= 2048;
                  value.expirationTime = renderExpirationTime$jscomp$0;
                  break a;
                }

                value = value.return;
              } while (null !== value);

              value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }

            workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
            value = createCapturedValue(value, sourceFiber);
            sourceFiber = returnFiber;

            do {
              switch (sourceFiber.tag) {
                case 3:
                  sourceFiber.effectTag |= 2048;
                  sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                  renderExpirationTime$jscomp$0 = createRootErrorUpdate(sourceFiber, value, renderExpirationTime$jscomp$0);
                  enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                  break a;

                case 1:
                  if (thenable = value, root = sourceFiber.type, returnFiber = sourceFiber.stateNode, 0 === (sourceFiber.effectTag & 64) && ("function" === typeof root.getDerivedStateFromError || null !== returnFiber && "function" === typeof returnFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(returnFiber)))) {
                    sourceFiber.effectTag |= 2048;
                    sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                    renderExpirationTime$jscomp$0 = createClassErrorUpdate(sourceFiber, thenable, renderExpirationTime$jscomp$0);
                    enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                    break a;
                  }

              }

              sourceFiber = sourceFiber.return;
            } while (null !== sourceFiber);
          }

          workInProgress = completeUnitOfWork(currentTime);
        }
      } while (1);

      executionContext = lastPendingTime;
      resetContextDependencies();
      ReactCurrentDispatcher.current = prevDispatcher;
      if (null !== workInProgress) return renderRoot.bind(null, root$jscomp$0, expirationTime);
    }

    root$jscomp$0.finishedWork = root$jscomp$0.current.alternate;
    root$jscomp$0.finishedExpirationTime = expirationTime;
    if (resolveLocksOnRoot(root$jscomp$0, expirationTime)) return null;
    workInProgressRoot = null;

    switch (workInProgressRootExitStatus) {
      case RootIncomplete:
        throw ReactError(Error("Should have a work-in-progress."));

      case RootErrored:
        return lastPendingTime = root$jscomp$0.lastPendingTime, lastPendingTime < expirationTime ? renderRoot.bind(null, root$jscomp$0, lastPendingTime) : isSync ? commitRoot.bind(null, root$jscomp$0) : (prepareFreshStack(root$jscomp$0, expirationTime), scheduleSyncCallback(renderRoot.bind(null, root$jscomp$0, expirationTime)), null);

      case RootSuspended:
        if (1073741823 === workInProgressRootLatestProcessedExpirationTime && !isSync && (isSync = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < isSync)) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          lastPendingTime = root$jscomp$0.lastPendingTime;
          if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
          root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync);
          return null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootSuspendedWithDelay:
        if (!isSync) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          isSync = root$jscomp$0.lastPendingTime;
          if (isSync < expirationTime) return renderRoot.bind(null, root$jscomp$0, isSync);
          1073741823 !== workInProgressRootLatestSuspenseTimeout ? isSync = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? isSync = 0 : (isSync = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, lastPendingTime = now(), expirationTime = 10 * (1073741821 - expirationTime) - lastPendingTime, isSync = lastPendingTime - isSync, 0 > isSync && (isSync = 0), isSync = (120 > isSync ? 120 : 480 > isSync ? 480 : 1080 > isSync ? 1080 : 1920 > isSync ? 1920 : 3e3 > isSync ? 3e3 : 4320 > isSync ? 4320 : 1960 * ceil(isSync / 1960)) - isSync, expirationTime < isSync && (isSync = expirationTime));
          if (10 < isSync) return root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync), null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootCompleted:
        return !isSync && 1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig && (lastPendingTime = workInProgressRootLatestProcessedExpirationTime, prevDispatcher = workInProgressRootCanSuspendUsingConfig, expirationTime = prevDispatcher.busyMinDurationMs | 0, 0 >= expirationTime ? expirationTime = 0 : (isSync = prevDispatcher.busyDelayMs | 0, lastPendingTime = now() - (10 * (1073741821 - lastPendingTime) - (prevDispatcher.timeoutMs | 0 || 5e3)), expirationTime = lastPendingTime <= isSync ? 0 : isSync + expirationTime - lastPendingTime), 10 < expirationTime) ? (root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), expirationTime), null) : commitRoot.bind(null, root$jscomp$0);

      default:
        throw ReactError(Error("Unknown root exit status."));
    }
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 1 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 1 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$$1(unitOfWork.alternate, unitOfWork, renderExpirationTime);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current$$1 = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 1024)) {
        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime$jscomp$0 = renderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              renderExpirationTime$jscomp$0 = current$$1.stateNode;
              renderExpirationTime$jscomp$0.pendingContext && (renderExpirationTime$jscomp$0.context = renderExpirationTime$jscomp$0.pendingContext, renderExpirationTime$jscomp$0.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime$jscomp$0 = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime$jscomp$0), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                requiredContext(contextStackCursor$1.current);
                current = newProps;
                var rootContainerInstance = renderExpirationTime$jscomp$0;
                renderExpirationTime$jscomp$0 = current$$1;
                newProps = nextReactTag;
                nextReactTag += 2;
                type = getViewConfigForType(type);
                var updatePayload = diffProperties(null, emptyObject, current, type.validAttributes);
                rootContainerInstance = createNode(newProps, type.uiViewClassName, rootContainerInstance, updatePayload, renderExpirationTime$jscomp$0);
                current = new ReactFabricHostComponent(newProps, type, current, renderExpirationTime$jscomp$0);
                current = {
                  node: rootContainerInstance,
                  canonical: current
                };

                _appendAllChildren(current, current$$1, false, false);

                current$$1.stateNode = current;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else if (null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
              break;

            case 6:
              if (current && null != current$$1.stateNode) updateHostText$1(current, current$$1, current.memoizedProps, newProps);else {
                if ("string" !== typeof newProps && null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                current = requiredContext(rootInstanceStackCursor.current);
                renderExpirationTime$jscomp$0 = requiredContext(contextStackCursor$1.current);
                current$$1.stateNode = createTextInstance(newProps, current, renderExpirationTime$jscomp$0, current$$1);
              }
              break;

            case 11:
              break;

            case 13:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime$jscomp$0;
                break a;
              }

              renderExpirationTime$jscomp$0 = null !== newProps;
              newProps = false;
              null !== current && (type = current.memoizedState, newProps = null !== type, renderExpirationTime$jscomp$0 || null === type || (type = current.child.sibling, null !== type && (rootContainerInstance = current$$1.firstEffect, null !== rootContainerInstance ? (current$$1.firstEffect = type, type.nextEffect = rootContainerInstance) : (current$$1.firstEffect = current$$1.lastEffect = type, type.nextEffect = null), type.effectTag = 8)));
              if (renderExpirationTime$jscomp$0 && !newProps && 0 !== (current$$1.mode & 2)) if (null === current && true !== current$$1.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
              renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 4);
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 18:
              break;

            case 19:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;
              if (null === newProps) break;
              type = 0 !== (current$$1.effectTag & 64);
              rootContainerInstance = newProps.rendering;
              if (null === rootContainerInstance) {
                if (type) cutOffTailIfNeeded(newProps, false);else {
                  if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = current$$1.child; null !== current;) {
                    rootContainerInstance = findFirstSuspended(current);

                    if (null !== rootContainerInstance) {
                      current$$1.effectTag |= 64;
                      cutOffTailIfNeeded(newProps, false);
                      current = rootContainerInstance.updateQueue;
                      null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                      current$$1.firstEffect = current$$1.lastEffect = null;
                      current = renderExpirationTime$jscomp$0;

                      for (renderExpirationTime$jscomp$0 = current$$1.child; null !== renderExpirationTime$jscomp$0;) {
                        newProps = renderExpirationTime$jscomp$0, type = current, newProps.effectTag &= 2, newProps.nextEffect = null, newProps.firstEffect = null, newProps.lastEffect = null, rootContainerInstance = newProps.alternate, null === rootContainerInstance ? (newProps.childExpirationTime = 0, newProps.expirationTime = type, newProps.child = null, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null) : (newProps.childExpirationTime = rootContainerInstance.childExpirationTime, newProps.expirationTime = rootContainerInstance.expirationTime, newProps.child = rootContainerInstance.child, newProps.memoizedProps = rootContainerInstance.memoizedProps, newProps.memoizedState = rootContainerInstance.memoizedState, newProps.updateQueue = rootContainerInstance.updateQueue, type = rootContainerInstance.dependencies, newProps.dependencies = null === type ? null : {
                          expirationTime: type.expirationTime,
                          firstContext: type.firstContext,
                          responders: type.responders
                        }), renderExpirationTime$jscomp$0 = renderExpirationTime$jscomp$0.sibling;
                      }

                      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, current$$1);
                      current$$1 = current$$1.child;
                      break a;
                    }

                    current = current.sibling;
                  }
                }
              } else {
                if (!type) if (current = findFirstSuspended(rootContainerInstance), null !== current) {
                  if (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode) {
                    current = current.updateQueue;
                    null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                    current$$1 = current$$1.lastEffect = newProps.lastEffect;
                    null !== current$$1 && (current$$1.nextEffect = null);
                    break;
                  }
                } else now() > newProps.tailExpiration && 1 < renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, false), current$$1.expirationTime = current$$1.childExpirationTime = renderExpirationTime$jscomp$0 - 1);
                newProps.isBackwards ? (rootContainerInstance.sibling = current$$1.child, current$$1.child = rootContainerInstance) : (current = newProps.last, null !== current ? current.sibling = rootContainerInstance : current$$1.child = rootContainerInstance, newProps.last = rootContainerInstance);
              }

              if (null !== newProps.tail) {
                0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500);
                current = newProps.tail;
                newProps.rendering = current;
                newProps.tail = current.sibling;
                newProps.lastEffect = current$$1.lastEffect;
                current.sibling = null;
                renderExpirationTime$jscomp$0 = suspenseStackCursor.current;
                renderExpirationTime$jscomp$0 = type ? renderExpirationTime$jscomp$0 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderExpirationTime$jscomp$0 & SubtreeSuspenseContextMask;
                push(suspenseStackCursor, renderExpirationTime$jscomp$0, current$$1);
                current$$1 = current;
                break a;
              }

              break;

            case 20:
              break;

            default:
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
          }

          current$$1 = null;
        }

        current = workInProgress;

        if (1 === renderExpirationTime || 1 !== current.childExpirationTime) {
          renderExpirationTime$jscomp$0 = 0;

          for (newProps = current.child; null !== newProps;) {
            type = newProps.expirationTime, rootContainerInstance = newProps.childExpirationTime, type > renderExpirationTime$jscomp$0 && (renderExpirationTime$jscomp$0 = type), rootContainerInstance > renderExpirationTime$jscomp$0 && (renderExpirationTime$jscomp$0 = rootContainerInstance), newProps = newProps.sibling;
          }

          current.childExpirationTime = renderExpirationTime$jscomp$0;
        }

        if (null !== current$$1) return current$$1;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 1024) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current$$1 = unwindWork(workInProgress, renderExpirationTime);
        if (null !== current$$1) return current$$1.effectTag &= 1023, current$$1;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 1024);
      }

      current$$1 = workInProgress.sibling;
      if (null !== current$$1) return current$$1;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority$1(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    null !== rootWithPendingPassiveEffects && scheduleCallback(97, function () {
      flushPassiveEffects();
      return null;
    });
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    flushPassiveEffects();
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    var finishedWork = root.finishedWork,
        expirationTime = root.finishedExpirationTime;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    if (finishedWork === root.current) throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
    root.callbackNode = null;
    root.callbackExpirationTime = 0;
    var updateExpirationTimeBeforeCommit = finishedWork.expirationTime,
        childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
    updateExpirationTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
    root.firstPendingTime = updateExpirationTimeBeforeCommit;
    updateExpirationTimeBeforeCommit < root.lastPendingTime && (root.lastPendingTime = updateExpirationTimeBeforeCommit);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, updateExpirationTimeBeforeCommit = finishedWork.firstEffect) : updateExpirationTimeBeforeCommit = finishedWork : updateExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== updateExpirationTimeBeforeCommit) {
      childExpirationTimeBeforeCommit = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (; null !== nextEffect;) {
            if (0 !== (nextEffect.effectTag & 256)) {
              var current$$1 = nextEffect.alternate,
                  finishedWork$jscomp$0 = nextEffect;

              switch (finishedWork$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork$jscomp$0);
                  break;

                case 1:
                  if (finishedWork$jscomp$0.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork$jscomp$0.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(finishedWork$jscomp$0.elementType === finishedWork$jscomp$0.type ? prevProps : resolveDefaultProps(finishedWork$jscomp$0.type, prevProps), prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break;

                case 3:
                case 5:
                case 6:
                case 4:
                case 17:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (current$$1 = renderPriorityLevel; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current$$1$jscomp$0 = nextEffect.alternate;

              if (null !== current$$1$jscomp$0) {
                var currentRef = current$$1$jscomp$0.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 14) {
              case 2:
                nextEffect.effectTag &= -3;
                break;

              case 6:
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                prevProps = nextEffect;

                a: for (prevState = prevProps, instance = current$$1, snapshot = prevState;;) {
                  if (commitUnmount(snapshot, instance), null !== snapshot.child) snapshot.child.return = snapshot, snapshot = snapshot.child;else {
                    if (snapshot === prevState) break;

                    for (; null === snapshot.sibling;) {
                      if (null === snapshot.return || snapshot.return === prevState) break a;
                      snapshot = snapshot.return;
                    }

                    snapshot.sibling.return = snapshot.return;
                    snapshot = snapshot.sibling;
                  }
                }

                detachFiber(prevProps);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root.current = finishedWork;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = expirationTime; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;

            if (effectTag$jscomp$0 & 36) {
              var current$$1$jscomp$1 = nextEffect.alternate;
              current$$1$jscomp$0 = nextEffect;
              currentRef = effectTag;

              switch (current$$1$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountLayout, MountLayout, current$$1$jscomp$0);
                  break;

                case 1:
                  var instance$jscomp$0 = current$$1$jscomp$0.stateNode;
                  if (current$$1$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                    var prevProps$jscomp$0 = current$$1$jscomp$0.elementType === current$$1$jscomp$0.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1$jscomp$0.type, current$$1$jscomp$1.memoizedProps);
                    instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                  }
                  var updateQueue = current$$1$jscomp$0.updateQueue;
                  null !== updateQueue && commitUpdateQueue(current$$1$jscomp$0, updateQueue, instance$jscomp$0, currentRef);
                  break;

                case 3:
                  var _updateQueue = current$$1$jscomp$0.updateQueue;

                  if (null !== _updateQueue) {
                    current$$1 = null;
                    if (null !== current$$1$jscomp$0.child) switch (current$$1$jscomp$0.child.tag) {
                      case 5:
                        current$$1 = current$$1$jscomp$0.child.stateNode.canonical;
                        break;

                      case 1:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                    }
                    commitUpdateQueue(current$$1$jscomp$0, _updateQueue, current$$1, currentRef);
                  }

                  break;

                case 5:
                  if (null === current$$1$jscomp$1 && current$$1$jscomp$0.effectTag & 4) throw ReactError(Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue."));
                  break;

                case 6:
                  break;

                case 4:
                  break;

                case 12:
                  break;

                case 13:
                case 19:
                case 17:
                case 20:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            if (effectTag$jscomp$0 & 128) {
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance$jscomp$1 = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    var instanceToUse = instance$jscomp$1.canonical;
                    break;

                  default:
                    instanceToUse = instance$jscomp$1;
                }

                "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
              }
            }

            effectTag$jscomp$0 & 512 && (rootDoesHavePassiveEffects = true);
            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = childExpirationTimeBeforeCommit;
    } else root.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsExpirationTime = expirationTime, pendingPassiveEffectsRenderPriority = renderPriorityLevel;else for (nextEffect = updateExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel;
    }
    renderPriorityLevel = root.firstPendingTime;
    0 !== renderPriorityLevel ? (effectTag$jscomp$0 = requestCurrentTime(), effectTag$jscomp$0 = inferPriorityFromExpirationTime(effectTag$jscomp$0, renderPriorityLevel), scheduleCallbackForRoot(root, effectTag$jscomp$0, renderPriorityLevel)) : legacyErrorBoundariesThatAlreadyFailed = null;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    1073741823 === renderPriorityLevel ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function flushPassiveEffects() {
    if (null === rootWithPendingPassiveEffects) return false;
    var root = rootWithPendingPassiveEffects,
        expirationTime = pendingPassiveEffectsExpirationTime,
        renderPriorityLevel = pendingPassiveEffectsRenderPriority;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = 0;
    pendingPassiveEffectsRenderPriority = 90;
    return runWithPriority$1(97 < renderPriorityLevel ? 97 : renderPriorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
  }

  function flushPassiveEffectsImpl(root) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Cannot flush passive effects while already rendering."));
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork), commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
        }
      } catch (error) {
        if (null === root) throw ReactError(Error("Should be working on an effect."));
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return true;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && scheduleCallbackForRoot(rootFiber, 99, 1073741823);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && scheduleCallbackForRoot(fiber, 99, 1073741823);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime) : workInProgressRootHasPendingPing = true : root.lastPendingTime < suspendedTime || (thenable = root.pingTime, 0 !== thenable && thenable < suspendedTime || (root.pingTime = suspendedTime, root.finishedExpirationTime === suspendedTime && (root.finishedExpirationTime = 0, root.finishedWork = null), thenable = requestCurrentTime(), thenable = inferPriorityFromExpirationTime(thenable, suspendedTime), scheduleCallbackForRoot(root, thenable, suspendedTime)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    retryCache = requestCurrentTime();
    thenable = computeExpirationForFiber(retryCache, boundaryFiber, null);
    retryCache = inferPriorityFromExpirationTime(retryCache, thenable);
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && scheduleCallbackForRoot(boundaryFiber, retryCache, thenable);
  }

  var beginWork$$1 = undefined;

  beginWork$$1 = function beginWork$$1(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current$$1) {
      if (current$$1.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              pushProvider(workInProgress, workInProgress.memoizedProps.value);
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current$$1.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              var renderState = workInProgress.memoizedState;
              null !== renderState && (renderState.rendering = null, renderState.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
    } else didReceiveUpdate = false;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        renderState = renderWithHooks(null, workInProgress, updateExpirationTime, current$$1, renderState, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof renderState && null !== renderState && "function" === typeof renderState.render && undefined === renderState.$$typeof) {
          workInProgress.tag = 1;
          resetHooks();

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== renderState.state && undefined !== renderState.state ? renderState.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          renderState.updater = classComponentUpdater;
          workInProgress.stateNode = renderState;
          renderState._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, renderState, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        renderState = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = readLazyComponentType(renderState);
        workInProgress.type = renderState;
        hasContext = workInProgress.tag = resolveLazyComponentTag(renderState);
        current$$1 = resolveDefaultProps(renderState, current$$1);

        switch (hasContext) {
          case 0:
            workInProgress = updateFunctionComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 1:
            workInProgress = updateClassComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 11:
            workInProgress = updateForwardRef(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 14:
            workInProgress = updateMemoComponent(null, workInProgress, renderState, resolveDefaultProps(renderState.type, current$$1), updateExpirationTime, renderExpirationTime);
            break;

          default:
            throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + renderState + ". Lazy element type must resolve to a class or function."));
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateClassComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === updateExpirationTime) throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        renderState = workInProgress.memoizedState;
        renderState = null !== renderState ? renderState.element : null;
        processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === renderState ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateForwardRef(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          renderState = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = renderState.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = is(oldValue, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === renderState.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldValue = workInProgress.child, null !== oldValue && (oldValue.return = workInProgress); null !== oldValue;) {
              var list = oldValue.dependencies;

              if (null !== list) {
                getDerivedStateFromProps = oldValue.child;

                for (var dependency = list.firstContext; null !== dependency;) {
                  if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                    1 === oldValue.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(oldValue, dependency));
                    oldValue.expirationTime < renderExpirationTime && (oldValue.expirationTime = renderExpirationTime);
                    dependency = oldValue.alternate;
                    null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                    scheduleWorkOnParentPath(oldValue.return, renderExpirationTime);
                    list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                    break;
                  }

                  dependency = dependency.next;
                }
              } else getDerivedStateFromProps = 10 === oldValue.tag ? oldValue.type === workInProgress.type ? null : oldValue.child : oldValue.child;

              if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = oldValue;else for (getDerivedStateFromProps = oldValue; null !== getDerivedStateFromProps;) {
                if (getDerivedStateFromProps === workInProgress) {
                  getDerivedStateFromProps = null;
                  break;
                }

                oldValue = getDerivedStateFromProps.sibling;

                if (null !== oldValue) {
                  oldValue.return = getDerivedStateFromProps.return;
                  getDerivedStateFromProps = oldValue;
                  break;
                }

                getDerivedStateFromProps = getDerivedStateFromProps.return;
              }
              oldValue = getDerivedStateFromProps;
            }
          }

          reconcileChildren(current$$1, workInProgress, renderState.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return renderState = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), renderState = readContext(renderState, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(renderState), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return renderState = workInProgress.type, hasContext = resolveDefaultProps(renderState, workInProgress.pendingProps), hasContext = resolveDefaultProps(renderState.type, hasContext), updateMemoComponent(current$$1, workInProgress, renderState, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
    }

    throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, undefined, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = this.firstBatch = null;
    this.pingTime = this.lastPendingTime = this.firstPendingTime = this.callbackExpirationTime = 0;
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (undefined === fiber) {
      if ("function" === typeof component.render) throw ReactError(Error("Unable to find node on an unmounted component."));
      throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    current$$1 = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (2 !== isFiberMountedImpl(parentComponent) || 1 !== parentComponent.tag) throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    suspenseConfig = createUpdate(current$$1, suspenseConfig);
    suspenseConfig.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (suspenseConfig.callback = container);
    enqueueUpdate(currentTime, suspenseConfig);
    scheduleUpdateOnFiber(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits$1(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    throw ReactError(Error("getInspectorDataForViewTag() is not available in production"));
  };

  var fabricDispatchCommand = nativeFabricUIManager.dispatchCommand;

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    (executionContext & 49) === NoContext && (flushPendingDiscreteUpdates(), flushPassiveEffects());
  };

  var roots = new Map(),
      ReactFabric = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits$1(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance && !maybeInstance.canonical) {
            var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
            maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
            null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance),
    findNodeHandle: findNodeHandle,
    setNativeProps: function setNativeProps() {},
    dispatchCommand: function dispatchCommand(handle, command, args) {
      null != handle._nativeTag && null != handle._internalInstanceHandle && fabricDispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
    },
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(containerTag, 0, false);
        var uninitializedFiber = createFiber(3, null, null, 0);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode.canonical;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureInWindow: function measureInWindow(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance && !maybeInstance.canonical) {
              var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
              maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
              null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance)
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    }));
  })({
    findFiberByHostInstance: getInstanceFromInstance,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.8.6",
    rendererPackageName: "react-native-renderer"
  });

  var ReactFabric$2 = {
    default: ReactFabric
  },
      ReactFabric$3 = ReactFabric$2 && ReactFabric || ReactFabric$2;
  module.exports = ReactFabric$3.default || ReactFabric$3;
},14815,[14344,14446,14566,10297,14575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('AppState');

  exports.default = _default;
},14818,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('AsyncSQLiteDBStorage') || TurboModuleRegistry.get('AsyncLocalStorage');

  exports.default = _default;
},14821,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Clipboard');

  exports.default = _default;
},14824,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('DatePickerAndroid');

  exports.default = _default;
},14827,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeImagePickerIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        videoMode: true,
        unmirrorFrontFacingCamera: false
      };

      if (config.videoMode != null) {
        newConfig.videoMode = config.videoMode;
      }

      if (config.unmirrorFrontFacingCamera != null) {
        newConfig.unmirrorFrontFacingCamera = config.unmirrorFrontFacingCamera;
      }

      return _NativeImagePickerIOS.default.openCameraDialog(newConfig, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        showImages: true,
        showVideos: false
      };

      if (config.showImages != null) {
        newConfig.showImages = config.showImages;
      }

      if (config.showVideos != null) {
        newConfig.showVideos = config.showVideos;
      }

      return _NativeImagePickerIOS.default.openSelectDialog(newConfig, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},14830,[14305,14833,14326]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ImagePickerIOS');

  exports.default = _default;
},14833,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _default = _Platform.default.OS === 'android' ? TurboModuleRegistry.getEnforcing('IntentAndroid') : TurboModuleRegistry.getEnforcing('LinkingManager');

  exports.default = _default;
},14836,[14305,14308,14341,10066]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];

          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined;

            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }

            total += toAdd;
            count++;
          }
        }
      }

      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},14839,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('PermissionsAndroid');

  exports.default = _default;
},14842,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('PushNotificationManager');

  exports.default = _default;
},14845,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ShareModule');

  exports.default = _default;
},14848,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _NativeTimePickerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      (0, _classCallCheck2.default)(this, TimePickerAndroid);
    }

    (0, _createClass2.default)(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return _regenerator.default.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_NativeTimePickerAndroid.default) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", _NativeTimePickerAndroid.default.open(options));

              case 4:
                return _context.abrupt("return", Promise.reject({
                  message: 'TimePickerAndroid is not supported on this platform.'
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]);
    return TimePickerAndroid;
  }();

  TimePickerAndroid.timeSetAction = 'timeSetAction';
  TimePickerAndroid.dismissedAction = 'dismissedAction';
  module.exports = TimePickerAndroid;
},14851,[14305,14674,14320,14323,14854]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('TimePickerAndroid');

  exports.default = _default;
},14854,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('ToastAndroid');

  exports.default = _default;
},14857,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;

  var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  function useWindowDimensions() {
    var dims = _Dimensions.default.get('window');

    var forceUpdate = React.useState(false)[1].bind(null, function (v) {
      return !v;
    });
    var initialDims = React.useState(dims)[0];
    React.useEffect(function () {
      _Dimensions.default.addEventListener('change', forceUpdate);

      var latestDims = _Dimensions.default.get('window');

      if (latestDims !== initialDims) {
        forceUpdate();
      }

      return function () {
        _Dimensions.default.removeEventListener('change', forceUpdate);
      };
    }, [forceUpdate, initialDims]);
    return dims;
  }
},14860,[14308,14305,10429,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[0]);

  var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: "\uFEFF",
    BULLET: "\u2022",
    BULLET_SP: "\xA0\u2022\xA0",
    MIDDOT: "\xB7",
    MIDDOT_SP: "\xA0\xB7\xA0",
    MIDDOT_KATAKANA: "\u30FB",
    MDASH: "\u2014",
    MDASH_SP: "\xA0\u2014\xA0",
    NDASH: "\u2013",
    NDASH_SP: "\xA0\u2013\xA0",
    NBSP: "\xA0",
    PIZZA: "\uD83C\uDF55",
    TRIANGLE_LEFT: "\u25C0",
    TRIANGLE_RIGHT: "\u25B6"
  });
  module.exports = UTFSequence;
},14863,[10057]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Vibration');

  exports.default = _default;
},14866,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var YellowBox;
  {
    YellowBox = function (_React$Component2) {
      _inherits(YellowBox, _React$Component2);

      function YellowBox() {
        _classCallCheck(this, YellowBox);

        return _possibleConstructorReturn(this, _getPrototypeOf(YellowBox).apply(this, arguments));
      }

      _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);

      return YellowBox;
    }(React.Component);
  }
  module.exports = YellowBox;
},14869,[14320,14323,14371,14377,14386,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var PointPropType = PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},14872,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    fetch: true,
    addEventListener: true,
    useNetInfo: true,
    removeEventListener: true,
    getConnectionInfo: true,
    isConnectionExpensive: true,
    isConnected: true
  };
  exports.fetch = fetch;
  exports.addEventListener = addEventListener;
  exports.useNetInfo = useNetInfo;
  exports.removeEventListener = removeEventListener;
  exports.getConnectionInfo = getConnectionInfo;
  exports.isConnectionExpensive = isConnectionExpensive;
  exports.default = exports.isConnected = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _$$_REQUIRE(_dependencyMap[3]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _deprecatedUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _deprecatedState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var DeprecatedTypes = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  Object.keys(DeprecatedTypes).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return DeprecatedTypes[key];
      }
    });
  });

  var _state = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var Types = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  Object.keys(Types).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return Types[key];
      }
    });
  });

  _state.default.setup();

  _deprecatedState.default.setup();

  var _isConnectedListeners = new Map();

  function fetch() {
    if (_reactNative.Platform.OS === 'android') {
      return _state.default.latest().then(function (state) {
        return state.type.toUpperCase();
      });
    } else {
      return _state.default.latest();
    }
  }

  function addEventListener(listenerOrType) {
    var deprecatedHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    if (typeof listenerOrType === 'string') {
      _deprecatedUtils.default.warnOnce();

      if (listenerOrType === DeprecatedTypes.CHANGE_EVENT_NAME && deprecatedHandler) {
        _deprecatedState.default.add(deprecatedHandler);

        return {
          remove: function remove() {
            _deprecatedState.default.remove(deprecatedHandler);
          }
        };
      } else {
        return {
          remove: function remove() {}
        };
      }
    } else {
      var _listener = listenerOrType;

      _state.default.add(_listener);

      return function () {
        _state.default.remove(_listener);
      };
    }
  }

  function useNetInfo() {
    var _useState = (0, _react.useState)({
      type: Types.NetInfoStateType.unknown,
      isConnected: false,
      isInternetReachable: false,
      details: null
    }),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        netInfo = _useState2[0],
        setNetInfo = _useState2[1];

    (0, _react.useEffect)(function () {
      return addEventListener(setNetInfo);
    }, []);
    return netInfo;
  }

  function removeEventListener(type, handler) {
    _deprecatedUtils.default.warnOnce();

    if (type === DeprecatedTypes.CHANGE_EVENT_NAME) {
      _deprecatedState.default.remove(handler);
    }
  }

  function getConnectionInfo() {
    _deprecatedUtils.default.warnOnce();

    return _deprecatedState.default.latest();
  }

  function isConnectionExpensive() {
    _deprecatedUtils.default.warnOnce();

    return _state.default.latest().then(_deprecatedUtils.default.isConnectionExpensive);
  }

  var isConnected = {
    addEventListener: function addEventListener(eventName, handler) {
      if (eventName !== DeprecatedTypes.CHANGE_EVENT_NAME) {
        return {
          remove: function remove() {}
        };
      }

      var listener = function listener(state) {
        handler(_deprecatedUtils.default.isConnected(state));
      };

      _isConnectedListeners.set(handler, listener);

      _state.default.add(listener);

      return {
        remove: function remove() {
          _state.default.remove(listener);
        }
      };
    },
    removeEventListener: function removeEventListener(_eventName, handler) {
      var listener = _isConnectedListeners.get(handler);

      listener && _state.default.remove(listener);

      _isConnectedListeners.delete(handler);
    },
    fetch: function fetch() {
      return _state.default.latest().then(_deprecatedUtils.default.isConnected);
    }
  };
  exports.isConnected = isConnected;
  var _default = {
    fetch: fetch,
    addEventListener: addEventListener,
    useNetInfo: useNetInfo,
    removeEventListener: removeEventListener,
    getConnectionInfo: getConnectionInfo,
    isConnectionExpensive: isConnectionExpensive,
    isConnected: isConnected
  };
  exports.default = _default;
},14875,[14308,14305,14347,10297,10033,14878,14884,14899,14887,14881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertState = convertState;
  exports.isConnectionExpensive = isConnectionExpensive;
  exports.isConnected = isConnected;
  exports.warnOnce = warnOnce;
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var Types = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  function convertState(input) {
    var effectiveType = 'unknown';

    if (input.type === 'cellular') {
      effectiveType = input.details.cellularGeneration || 'unknown';
    }

    var type = input.type === Types.NetInfoStateType.vpn || input.type === Types.NetInfoStateType.other ? 'unknown' : input.type;
    return {
      type: type,
      effectiveType: effectiveType
    };
  }

  function isConnectionExpensive(input) {
    if (_reactNative.Platform.OS === 'android') {
      if (input.type !== Types.NetInfoStateType.none && input.type !== Types.NetInfoStateType.unknown) {
        return input.details.isConnectionExpensive;
      } else {
        return false;
      }
    } else {
      throw new Error('Currently not supported on iOS');
    }
  }

  function isConnected(input) {
    return input.isConnected;
  }

  var warned = false;

  function warnOnce() {
    if (warned) {
      return;
    }

    console.warn('Warning: RNCNetInfo - You are using the deprecated API. It will still work, but you must upgrade to the new API to receive the new features. The old API will be removed in the future');
    warned = true;
  }

  var _default = {
    convertState: convertState,
    isConnectionExpensive: isConnectionExpensive,
    isConnected: isConnected,
    warnOnce: warnOnce
  };
  exports.default = _default;
},14878,[14308,10033,14881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NetInfoCellularGeneration = exports.NetInfoStateType = undefined;
  var NetInfoStateType;
  exports.NetInfoStateType = NetInfoStateType;

  (function (NetInfoStateType) {
    NetInfoStateType["unknown"] = "unknown";
    NetInfoStateType["none"] = "none";
    NetInfoStateType["cellular"] = "cellular";
    NetInfoStateType["wifi"] = "wifi";
    NetInfoStateType["bluetooth"] = "bluetooth";
    NetInfoStateType["ethernet"] = "ethernet";
    NetInfoStateType["wimax"] = "wimax";
    NetInfoStateType["vpn"] = "vpn";
    NetInfoStateType["other"] = "other";
  })(NetInfoStateType || (exports.NetInfoStateType = NetInfoStateType = {}));

  var NetInfoCellularGeneration;
  exports.NetInfoCellularGeneration = NetInfoCellularGeneration;

  (function (NetInfoCellularGeneration) {
    NetInfoCellularGeneration["2g"] = "2g";
    NetInfoCellularGeneration["3g"] = "3g";
    NetInfoCellularGeneration["4g"] = "4g";
  })(NetInfoCellularGeneration || (exports.NetInfoCellularGeneration = NetInfoCellularGeneration = {}));
},14881,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setup = setup;
  exports.tearDown = tearDown;
  exports.latest = latest;
  exports.add = add;
  exports.remove = remove;
  exports.default = undefined;

  var _state = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _deprecatedUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _isSetup = false;

  var _subscriptions = new Set();

  var _latestState = null;

  function _handler(state) {
    var convertedState = _deprecatedUtils.default.convertState(state);

    _latestState = convertedState;

    _subscriptions.forEach(function (handler) {
      return handler(convertedState);
    });
  }

  function setup() {
    _state.default.add(_handler);
  }

  function tearDown() {
    {
      return;
    }

    _state.default.remove(_handler);

    _latestState = null;

    _subscriptions.clear();
  }

  function latest() {
    if (_latestState) {
      return Promise.resolve(_latestState);
    } else {
      return _state.default.latest().then(function (state) {
        _latestState = _deprecatedUtils.default.convertState(state);
        return _latestState;
      });
    }
  }

  function add(handler) {
    _subscriptions.add(handler);

    if (_latestState) {
      handler(_latestState);
    } else {
      latest().then(handler);
    }
  }

  function remove(handler) {
    _subscriptions.delete(handler);
  }

  var _default = {
    setup: setup,
    tearDown: tearDown,
    latest: latest,
    add: add,
    remove: remove
  };
  exports.default = _default;
},14884,[14305,14887,14878]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setup = setup;
  exports.tearDown = tearDown;
  exports.latest = latest;
  exports.add = add;
  exports.remove = remove;
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _nativeInterface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _internetReachability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _utils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';
  var _isSetup = false;
  var _nativeEventSubscription = null;
  var _internetReachabilitySubscription = null;

  var _subscriptions = new Set();

  var _latestState = null;

  function fetchCurrentState() {
    return _utils.default.currentState().then(function (state) {
      _internetReachability.default.update(state);

      var convertedState = _utils.default.convertState(state);

      _latestState = convertedState;
      return convertedState;
    });
  }

  function setup() {
    if (_isSetup) {
      return;
    }

    _nativeEventSubscription = _nativeInterface.default.eventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (state) {
      _internetReachability.default.update(state);

      var convertedState = _utils.default.convertState(state);

      _latestState = convertedState;

      _subscriptions.forEach(function (handler) {
        return handler(convertedState);
      });
    });
    fetchCurrentState();
    _internetReachabilitySubscription = _internetReachability.default.addSubscription(function (isInternetReachable) {
      if (!_latestState) {
        return;
      }

      var nextState = (0, _objectSpread2.default)({}, _latestState, {
        isInternetReachable: isInternetReachable
      });
      _latestState = nextState;

      _subscriptions.forEach(function (handler) {
        return handler(nextState);
      });
    });
    _isSetup = true;
  }

  function tearDown() {
    if (!_isSetup) {
      return;
    }

    if (_nativeEventSubscription) {
      _nativeEventSubscription.remove();
    }

    _subscriptions.clear();

    _internetReachability.default.clear();

    if (_internetReachabilitySubscription) {
      _internetReachabilitySubscription();
    }

    _isSetup = false;
  }

  function latest() {
    if (_latestState) {
      return Promise.resolve(_latestState);
    } else {
      return fetchCurrentState();
    }
  }

  function add(handler) {
    _subscriptions.add(handler);

    if (_latestState) {
      handler(_latestState);
    } else {
      latest().then(handler);
    }
  }

  function remove(handler) {
    _subscriptions.delete(handler);
  }

  var _default = {
    setup: setup,
    tearDown: tearDown,
    latest: latest,
    add: add,
    remove: remove
  };
  exports.default = _default;
},14887,[14305,14314,14890,14893,14896]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var RNCNetInfo = _reactNative.NativeModules.RNCNetInfo;

  if (!RNCNetInfo) {
    throw new Error("@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n\u2022 Run `react-native link @react-native-community/netinfo` in the project root.\n\u2022 Rebuild and re-run the app.\n\u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n\u2022 Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo");
  }

  var nativeEventEmitter = null;

  var _default = (0, _objectSpread2.default)({}, RNCNetInfo, {
    get eventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new _reactNative.NativeEventEmitter(RNCNetInfo);
      }

      return nativeEventEmitter;
    }

  });

  exports.default = _default;
},14890,[14305,14314,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clear = clear;
  exports.update = update;
  exports.currentState = currentState;
  exports.addSubscription = addSubscription;
  exports.default = undefined;
  var REACHABILITY_URL = 'https://clients3.google.com/generate_204';
  var LONG_TIMEOUT = 60000;
  var SHORT_TIMEOUT = 5000;

  var _subscriptions = new Set();

  var _isInternetReachable = null;
  var _currentInternetReachabilityCheckHandler = null;
  var _currentTimeoutHandle = null;

  function setIsInternetReachable(isInternetReachable) {
    if (_isInternetReachable === isInternetReachable) {
      return;
    }

    _isInternetReachable = isInternetReachable;

    _subscriptions.forEach(function (listener) {
      listener(_isInternetReachable);
    });
  }

  function checkInternetReachability() {
    var hasCanceled = false;
    var promise = fetch(REACHABILITY_URL).then(function (response) {
      if (!hasCanceled) {
        setIsInternetReachable(response.status === 204);
        var nextTimeoutInterval = _isInternetReachable ? LONG_TIMEOUT : SHORT_TIMEOUT;
        _currentTimeoutHandle = setTimeout(checkInternetReachability, nextTimeoutInterval);
      }
    }).catch(function () {
      setIsInternetReachable(false);
      _currentTimeoutHandle = setTimeout(checkInternetReachability, SHORT_TIMEOUT);
    });
    return {
      promise: promise,
      cancel: function cancel() {
        hasCanceled = true;
      }
    };
  }

  function setExpectsConnection(expectsConnection) {
    if (_currentInternetReachabilityCheckHandler !== null) {
      _currentInternetReachabilityCheckHandler.cancel();

      _currentInternetReachabilityCheckHandler = null;
    }

    if (_currentTimeoutHandle !== null) {
      clearTimeout(_currentTimeoutHandle);
      _currentTimeoutHandle = null;
    }

    if (expectsConnection) {
      if (!_isInternetReachable) {
        setIsInternetReachable(null);
      }

      _currentInternetReachabilityCheckHandler = checkInternetReachability();
    } else {
      setIsInternetReachable(false);
    }
  }

  function clear() {
    if (_currentInternetReachabilityCheckHandler !== null) {
      _currentInternetReachabilityCheckHandler.cancel();

      _currentInternetReachabilityCheckHandler = null;
    }

    if (_currentTimeoutHandle !== null) {
      clearTimeout(_currentTimeoutHandle);
      _currentTimeoutHandle = null;
    }

    _subscriptions.clear();
  }

  function update(state) {
    if (typeof state.isInternetReachable === 'boolean') {
      setIsInternetReachable(state.isInternetReachable);
    } else {
      setExpectsConnection(state.isConnected);
    }
  }

  function currentState() {
    return _isInternetReachable;
  }

  function addSubscription(listener) {
    _subscriptions.add(listener);

    return function () {
      _subscriptions.delete(listener);
    };
  }

  var _default = {
    update: update,
    currentState: currentState,
    clear: clear,
    addSubscription: addSubscription
  };
  exports.default = _default;
},14893,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertState = convertState;
  exports.currentState = currentState;
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _internetReachability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _nativeInterface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function convertState(input) {
    if (typeof input.isInternetReachable === 'boolean') {
      return input;
    } else {
      return (0, _objectSpread2.default)({}, input, {
        isInternetReachable: _internetReachability.default.currentState()
      });
    }
  }

  function currentState() {
    return _nativeInterface.default.getCurrentState();
  }

  var _default = {
    convertState: convertState,
    currentState: currentState
  };
  exports.default = _default;
},14896,[14305,14314,14893,14890]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CHANGE_EVENT_NAME = undefined;
  var CHANGE_EVENT_NAME = 'connectionChange';
  exports.CHANGE_EVENT_NAME = CHANGE_EVENT_NAME;
},14899,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},14902,[14905]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _utils = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[10]);

  var Platform = ReactNative.Platform,
      UIManager = ReactNative.UIManager;

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[11]);

  var NativeViewPager = _$$_REQUIRE(_dependencyMap[12]);

  var VIEW_PAGER_REF = 'viewPager';
  var VIEW_MANAGER_NAME = 'RNCViewPager';

  function getViewManagerConfig(viewManagerName) {
    if (!UIManager.getViewManagerConfig) {
      return UIManager[viewManagerName];
    }

    return UIManager.getViewManagerConfig(viewManagerName);
  }

  var ViewPager = function (_React$Component) {
    (0, _inherits2.default)(ViewPager, _React$Component);

    function ViewPager() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ViewPager);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ViewPager)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.isScrolling = false;

      _this.getInnerViewNode = function () {
        return _this.refs[VIEW_PAGER_REF].getInnerViewNode();
      };

      _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        {
          if (_this.props.keyboardDismissMode === 'on-drag') {
            dismissKeyboard();
          }
        }
      };

      _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e);
        }

        _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';
      };

      _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      };

      _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle((0, _assertThisInitialized2.default)(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPage, [selectedPage]);
      };

      _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle((0, _assertThisInitialized2.default)(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPageWithoutAnimation, [selectedPage]);
      };

      _this.setScrollEnabled = function (scrollEnabled) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle((0, _assertThisInitialized2.default)(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setScrollEnabled, [scrollEnabled]);
      };

      _this._onMoveShouldSetResponderCapture = function () {
        return false;
      };

      return _this;
    }

    (0, _createClass2.default)(ViewPager, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        {
          if (this.props.initialPage != null) {
            this.setPageWithoutAnimation(this.props.initialPage);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeViewPager, (0, _extends2.default)({}, this.props, {
          ref: VIEW_PAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,
          children: (0, _utils.childrenWithOverriddenStyle)(this.props.children)
        }));
      }
    }]);
    return ViewPager;
  }(React.Component);

  module.exports = ViewPager;
},14905,[14305,14344,14320,14323,14371,14377,14374,14386,14908,10297,10033,10627,14911]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.childrenWithOverriddenStyle = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var childrenWithOverriddenStyle = function childrenWithOverriddenStyle(children) {
    return React.Children.map(children, function (child) {
      if (!child) {
        return null;
      }

      var newProps = (0, _objectSpread2.default)({}, child.props, {
        style: [child.props.style, {
          position: 'absolute',
          left: 0,
          top: 0,
          right: 0,
          bottom: 0,
          width: undefined,
          height: undefined
        }],
        collapsable: false
      });
      return React.createElement(child.type, newProps);
    });
  };

  exports.childrenWithOverriddenStyle = childrenWithOverriddenStyle;
},14908,[14308,14305,14314,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      requireNativeComponent = _require.requireNativeComponent;

  module.exports = requireNativeComponent('RNCViewPager');
},14911,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  ;

  (function (isNode) {
    var Public = function Public(clone) {
      return merge(clone === true, false, arguments);
    },
        publicName = 'merge';

    Public.recursive = function (clone) {
      return merge(clone === true, true, arguments);
    };

    Public.clone = function (input) {
      var output = input,
          type = typeOf(input),
          index,
          size;

      if (type === 'array') {
        output = [];
        size = input.length;

        for (index = 0; index < size; ++index) {
          output[index] = Public.clone(input[index]);
        }
      } else if (type === 'object') {
        output = {};

        for (index in input) {
          output[index] = Public.clone(input[index]);
        }
      }

      return output;
    };

    function merge_recursive(base, extend) {
      if (typeOf(base) !== 'object') return extend;

      for (var key in extend) {
        if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {
          base[key] = merge_recursive(base[key], extend[key]);
        } else {
          base[key] = extend[key];
        }
      }

      return base;
    }

    function merge(clone, recursive, argv) {
      var result = argv[0],
          size = argv.length;
      if (clone || typeOf(result) !== 'object') result = {};

      for (var index = 0; index < size; ++index) {
        var item = argv[index],
            type = typeOf(item);
        if (type !== 'object') continue;

        for (var key in item) {
          if (key === '__proto__') continue;
          var sitem = clone ? Public.clone(item[key]) : item[key];

          if (recursive) {
            result[key] = merge_recursive(result[key], sitem);
          } else {
            result[key] = sitem;
          }
        }
      }

      return result;
    }

    function typeOf(input) {
      return {}.toString.call(input).slice(8, -1).toLowerCase();
    }

    if (isNode) {
      module.exports = Public;
    } else {
      window[publicName] = Public;
    }
  })(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);
},14914,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = extractColor;
  exports.integerColor = exports.colorNames = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var colorNames = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
  exports.colorNames = colorNames;

  for (var name in colorNames) {
    if (colorNames.hasOwnProperty(name)) {
      var color = colorNames[name];
      var r = color[0];
      var g = color[1];
      var b = color[2];
      colorNames[name] = (0xff000000 | r << 16 | g << 8 | b) >>> 0;
    }
  }

  Object.freeze(colorNames);

  function hslToRgb(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;

    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }

    t1 = 2 * l - t2;
    rgb = [0, 0, 0];

    for (var i = 0; i < 3; i++) {
      t3 = h + 0.3333333333333333 * -(i - 1);

      if (t3 < 0) {
        t3++;
      }

      if (t3 > 1) {
        t3--;
      }

      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
      } else {
        val = t1;
      }

      rgb[i] = val;
    }

    return rgb;
  }

  function hwbToRgb(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;

    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }

    n = wh + f * (v - wh);
    var r;
    var g;
    var b;

    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;

      case 1:
        r = n;
        g = v;
        b = wh;
        break;

      case 2:
        r = wh;
        g = v;
        b = n;
        break;

      case 3:
        r = wh;
        g = n;
        b = v;
        break;

      case 4:
        r = n;
        g = wh;
        b = v;
        break;

      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }

    return [r, g, b];
  }

  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }

  var abbr = /^#([a-f0-9]{3,4})$/i;
  var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
  var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;
  var per = /^rgba?\(\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;
  var keyword = /(\D+)/;

  function rgbFromString(string) {
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;

    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];

      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16) / 255;
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];

      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16) / 255;
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0) / 255;
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseFloat(match[i + 1]) / 100;
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === 'transparent') {
        return [0, 0, 0, 0];
      }

      rgb = colorNames[match[1]];

      if (!(typeof rgb === 'number')) {
        return null;
      }

      return integerColor(rgb);
    } else {
      return null;
    }

    for (i = 0; i < 4; i++) {
      rgb[i] = clamp(rgb[i], 0, 1);
    }

    return rgb;
  }

  var hslRegEx = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;

  function rgbFromHslString(string) {
    var match = string.match(hslRegEx);

    if (!match) {
      return null;
    }

    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) + 360) % 360;
    var s = clamp(parseFloat(match[2]), 0, 100);
    var l = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return hslToRgb([h, s, l, a]);
  }

  var hwbRegEx = /^hwb\(\s*([+-]?\d*[.]?\d+)(?:deg)?\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;

  function rgbFromHwbString(string) {
    var match = string.match(hwbRegEx);

    if (!match) {
      return null;
    }

    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) % 360 + 360) % 360;
    var w = clamp(parseFloat(match[2]), 0, 100);
    var b = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return hwbToRgb([h, w, b, a]);
  }

  function colorFromString(string) {
    var prefix = string.substring(0, 3).toLowerCase();

    switch (prefix) {
      case 'hsl':
        return rgbFromHslString(string);

      case 'hwb':
        return rgbFromHwbString(string);

      default:
        return rgbFromString(string);
    }
  }

  var identity = function identity(x) {
    return x;
  };

  var toSignedInt32 = function toSignedInt32(x) {
    return x | 0x0;
  };

  var integerColor = _reactNative.Platform.OS === 'android' ? toSignedInt32 : identity;
  exports.integerColor = integerColor;

  function extractColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return integerColor(color);
      }

      return null;
    }

    var parsedColor = typeof color === 'string' ? colorFromString(color) : color;

    if (!Array.isArray(parsedColor)) {
      return parsedColor;
    }

    var r = parsedColor[0];
    var g = parsedColor[1];
    var b = parsedColor[2];
    var a = parsedColor[3];
    var int32Color = ((a === undefined ? 0xff000000 : Math.round(a * 255) << 24) | Math.round(r * 255) << 16 | Math.round(g * 255) << 8 | Math.round(b * 255)) >>> 0;
    return integerColor(int32Color);
  }
},14917,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      transformList: peg$parsetransformList
    },
        peg$startRuleFunction = peg$parsetransformList,
        peg$c0 = function peg$c0(ts) {
      return ts;
    },
        peg$c1 = function peg$c1(t, ts) {
      return multiply_matrices(t, ts);
    },
        peg$c2 = "matrix",
        peg$c3 = peg$literalExpectation("matrix", false),
        peg$c4 = "(",
        peg$c5 = peg$literalExpectation("(", false),
        peg$c6 = ")",
        peg$c7 = peg$literalExpectation(")", false),
        peg$c8 = function peg$c8(a, b, c, d, e, f) {
      return [a, c, e, b, d, f];
    },
        peg$c9 = "translate",
        peg$c10 = peg$literalExpectation("translate", false),
        peg$c11 = function peg$c11(tx, ty) {
      return [1, 0, tx, 0, 1, ty || 0];
    },
        peg$c12 = "scale",
        peg$c13 = peg$literalExpectation("scale", false),
        peg$c14 = function peg$c14(sx, sy) {
      return [sx, 0, 0, 0, sy === null ? sx : sy, 0];
    },
        peg$c15 = "rotate",
        peg$c16 = peg$literalExpectation("rotate", false),
        peg$c17 = function peg$c17(angle, c) {
      var cos = Math.cos(deg2rad * angle);
      var sin = Math.sin(deg2rad * angle);

      if (c !== null) {
        var x = c[0];
        var y = c[1];
        return [cos, -sin, cos * -x + -sin * -y + x, sin, cos, sin * -x + cos * -y + y];
      }

      return [cos, -sin, 0, sin, cos, 0];
    },
        peg$c18 = "skewX",
        peg$c19 = peg$literalExpectation("skewX", false),
        peg$c20 = function peg$c20(angle) {
      return [1, Math.tan(deg2rad * angle), 0, 0, 1, 0];
    },
        peg$c21 = "skewY",
        peg$c22 = peg$literalExpectation("skewY", false),
        peg$c23 = function peg$c23(angle) {
      return [1, 0, 0, Math.tan(deg2rad * angle), 1, 0];
    },
        peg$c24 = function peg$c24(f) {
      return parseFloat(f.join(""));
    },
        peg$c25 = function peg$c25(i) {
      return parseInt(i.join(""));
    },
        peg$c26 = function peg$c26(n) {
      return n;
    },
        peg$c27 = function peg$c27(n1, n2) {
      return [n1, n2];
    },
        peg$c28 = ",",
        peg$c29 = peg$literalExpectation(",", false),
        peg$c30 = function peg$c30(ds) {
      return ds.join("");
    },
        peg$c31 = function peg$c31(f) {
      return f.join("");
    },
        peg$c32 = function peg$c32(d) {
      return d.join("");
    },
        peg$c33 = peg$otherExpectation("fractionalConstant"),
        peg$c34 = ".",
        peg$c35 = peg$literalExpectation(".", false),
        peg$c36 = function peg$c36(d1, d2) {
      return [d1 ? d1.join("") : null, ".", d2.join("")].join("");
    },
        peg$c37 = /^[eE]/,
        peg$c38 = peg$classExpectation(["e", "E"], false, false),
        peg$c39 = function peg$c39(e) {
      return [e[0], e[1], e[2].join("")].join("");
    },
        peg$c40 = /^[+\-]/,
        peg$c41 = peg$classExpectation(["+", "-"], false, false),
        peg$c42 = /^[0-9]/,
        peg$c43 = peg$classExpectation([["0", "9"]], false, false),
        peg$c44 = /^[ \t\r\n]/,
        peg$c45 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parsetransformList() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsp();

      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewsp();
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsetransforms();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewsp();

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewsp();
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetransforms() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsetransform();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecommaWsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecommaWsp();
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsetransforms();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsetransform();
      }

      return s0;
    }

    function peg$parsetransform() {
      var s0;
      s0 = peg$parsematrix();

      if (s0 === peg$FAILED) {
        s0 = peg$parsetranslate();

        if (s0 === peg$FAILED) {
          s0 = peg$parsescale();

          if (s0 === peg$FAILED) {
            s0 = peg$parserotate();

            if (s0 === peg$FAILED) {
              s0 = peg$parseskewX();

              if (s0 === peg$FAILED) {
                s0 = peg$parseskewY();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsematrix() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c3);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWsp();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecommaWsp();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenumber();

                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsecommaWsp();

                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsenumber();

                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecommaWsp();

                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsenumber();

                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsecommaWsp();

                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsenumber();

                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parsewsp();

                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parsewsp();
                                    }

                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c6;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;

                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c7);
                                        }
                                      }

                                      if (s17 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c8(s5, s7, s9, s11, s13, s15);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 9) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspNumber();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c11(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsescale() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c13);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspNumber();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c14(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserotate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspTwoNumbers();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c17(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseskewX() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c19);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewsp();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewsp();
                }

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c6;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseskewY() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewsp();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewsp();
                }

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c6;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c23(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsesign();

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsefloatingPointConstant();

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsesign();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseintegerConstant();

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s1);
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsecommaWspNumber() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$parsecommaWsp();

      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecommaWspTwoNumbers() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$parsecommaWsp();

      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();

        if (s2 !== peg$FAILED) {
          s3 = peg$parsecommaWsp();

          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumber();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecommaWsp() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsp();

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsewsp();
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewsp();

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewsp();
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecomma();

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsewsp();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewsp();
          }

          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c29);
        }
      }

      return s0;
    }

    function peg$parseintegerConstant() {
      var s0, s1;
      s0 = peg$currPos;
      s1 = peg$parsedigitSequence();

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parsefloatingPointConstant() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefractionalConstant();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseexponent();

        if (s3 === peg$FAILED) {
          s3 = null;
        }

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsedigitSequence();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseexponent();

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsefractionalConstant() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedigitSequence();

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c34;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c35);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsedigitSequence();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigitSequence();

        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c34;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c33);
        }
      }

      return s0;
    }

    function peg$parseexponent() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$currPos;

      if (peg$c37.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsesign();

        if (s3 === peg$FAILED) {
          s3 = null;
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigitSequence();

          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parsesign() {
      var s0;

      if (peg$c40.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }

      return s0;
    }

    function peg$parsedigitSequence() {
      var s0, s1;
      s0 = [];
      s1 = peg$parsedigit();

      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsedigit();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c42.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c43);
        }
      }

      return s0;
    }

    function peg$parsewsp() {
      var s0;

      if (peg$c44.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c45);
        }
      }

      return s0;
    }

    var deg2rad = Math.PI / 180;

    function multiply_matrices(l, r) {
      var al = l[0];
      var cl = l[1];
      var el = l[2];
      var bl = l[3];
      var dl = l[4];
      var fl = l[5];
      var ar = r[0];
      var cr = r[1];
      var er = r[2];
      var br = r[3];
      var dr = r[4];
      var fr = r[5];
      var a = al * ar + cl * br;
      var c = al * cr + cl * dr;
      var e = al * er + cl * fr + el;
      var b = bl * ar + dl * br;
      var d = bl * cr + dl * dr;
      var f = bl * er + dl * fr + fl;
      return [a, c, e, b, d, f];
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
},14920,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pickNotNil = pickNotNil;
  exports.idPattern = undefined;

  function pickNotNil(object) {
    var result = {};

    for (var key in object) {
      if (object.hasOwnProperty(key)) {
        var value = object[key];

        if (value !== undefined && value !== null) {
          result[key] = value;
        }
      }
    }

    return result;
  }

  var idPattern = /#([^)]+)\)?$/;
  exports.idPattern = idPattern;
},14923,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    objectBoundingBox: 0,
    userSpaceOnUse: 1
  };
  exports.default = _default;
},14926,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractViewBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var Pattern = function (_Shape) {
    (0, _inherits2.default)(Pattern, _Shape);

    function Pattern() {
      (0, _classCallCheck2.default)(this, Pattern);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Pattern).apply(this, arguments));
    }

    (0, _createClass2.default)(Pattern, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var patternTransform = props.patternTransform,
            transform = props.transform,
            id = props.id,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            patternUnits = props.patternUnits,
            patternContentUnits = props.patternContentUnits,
            children = props.children,
            viewBox = props.viewBox,
            preserveAspectRatio = props.preserveAspectRatio;
        var matrix = (0, _extractTransform.default)(patternTransform || transform || props);
        return _react.default.createElement(RNSVGPattern, (0, _extends2.default)({
          ref: this.refMethod,
          name: id,
          x: x,
          y: y,
          width: width,
          height: height,
          matrix: matrix,
          patternTransform: matrix,
          patternUnits: _units.default[patternUnits] || 0,
          patternContentUnits: patternContentUnits ? _units.default[patternContentUnits] : 1
        }, (0, _extractViewBox.default)({
          viewBox: viewBox,
          preserveAspectRatio: preserveAspectRatio
        })), children);
      }
    }]);
    return Pattern;
  }(_Shape2.default);

  exports.default = Pattern;
  Pattern.displayName = 'Pattern';
  Pattern.defaultProps = {
    x: '0%',
    y: '0%',
    width: '100%',
    height: '100%'
  };
  var RNSVGPattern = (0, _reactNative.requireNativeComponent)('RNSVGPattern');
},14929,[14305,14344,14320,14323,14371,14377,14386,10297,10033,11554,11644,14926,11497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _extractProps = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var Mask = function (_Shape) {
    (0, _inherits2.default)(Mask, _Shape);

    function Mask() {
      (0, _classCallCheck2.default)(this, Mask);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Mask).apply(this, arguments));
    }

    (0, _createClass2.default)(Mask, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var maskTransform = props.maskTransform,
            transform = props.transform,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            maskUnits = props.maskUnits,
            maskContentUnits = props.maskContentUnits,
            children = props.children;
        return _react.default.createElement(RNSVGMask, (0, _extends2.default)({
          ref: this.refMethod
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, (0, _extractProps.propsAndStyles)(props), {
          x: null,
          y: null
        }), this), {
          x: x,
          y: y,
          width: width,
          height: height,
          maskTransform: (0, _extractTransform.default)(maskTransform || transform || props),
          maskUnits: maskUnits !== undefined ? _units.default[maskUnits] : 0,
          maskContentUnits: maskContentUnits !== undefined ? _units.default[maskContentUnits] : 1
        }), children);
      }
    }]);
    return Mask;
  }(_Shape2.default);

  exports.default = Mask;
  Mask.displayName = 'Mask';
  Mask.defaultProps = {
    x: '0%',
    y: '0%',
    width: '100%',
    height: '100%'
  };
  var RNSVGMask = (0, _reactNative.requireNativeComponent)('RNSVGMask');
},14932,[14308,14305,14344,14314,14320,14323,14371,14377,14386,10297,10033,11554,11509,14926,11497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";
},22387,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object.keys(descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== undefined) {
      desc.value = desc.initializer ? desc.initializer.call(context) : undefined;
      desc.initializer = undefined;
    }

    if (desc.initializer === undefined) {
      Object.defineProperty(target, property, desc);
      desc = null;
    }

    return desc;
  }

  module.exports = _applyDecoratedDescriptor;
},22393,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _toArray(arr) {
    return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();
  }

  module.exports = _toArray;
},22396,[14350,14365,14356]);
__r(10120);
__r(10001);