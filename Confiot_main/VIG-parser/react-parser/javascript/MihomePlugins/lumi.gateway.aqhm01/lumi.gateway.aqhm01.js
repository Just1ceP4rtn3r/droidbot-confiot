
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _miot = _$$_REQUIRE(_dependencyMap[1]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  _LHCommonFunction.LHDebugConfig.OffDebug();

  _miot.PackageEvent.packageAuthorizationCancel.addListener(function () {
    _miot.Package.exit();
  });

  _miot.Package.entry(_index.default);
},10001,[14305,10074,10004,10175]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "LHAuthorizationUtils", {
    enumerable: true,
    get: function get() {
      return _LHAuthorizationUtils.default;
    }
  });
  Object.defineProperty(exports, "LHCommonLocalizableString", {
    enumerable: true,
    get: function get() {
      return _LHCommonLocalizableString.default;
    }
  });
  Object.defineProperty(exports, "LHPureRenderDecorator", {
    enumerable: true,
    get: function get() {
      return _LHPureRenderDecorator.default;
    }
  });
  Object.defineProperty(exports, "LHUiUtils", {
    enumerable: true,
    get: function get() {
      return _LHUiUtils.default;
    }
  });
  Object.defineProperty(exports, "LHDateUtils", {
    enumerable: true,
    get: function get() {
      return _LHDateUtils.default;
    }
  });
  Object.defineProperty(exports, "LHLogUtils", {
    enumerable: true,
    get: function get() {
      return _LHLogUtils.default;
    }
  });
  Object.defineProperty(exports, "LHMiServer", {
    enumerable: true,
    get: function get() {
      return _LHMiServer.default;
    }
  });
  Object.defineProperty(exports, "LHDeviceUtils", {
    enumerable: true,
    get: function get() {
      return _LHDeviceUtils.default;
    }
  });
  Object.defineProperty(exports, "LHSensorSetIFTTTManager", {
    enumerable: true,
    get: function get() {
      return _LHSensorSetIFTTTManager.default;
    }
  });
  Object.defineProperty(exports, "LHDeviceAuthorityUtils", {
    enumerable: true,
    get: function get() {
      return _LHDeviceAuthorityUtils.default;
    }
  });
  Object.defineProperty(exports, "LHAppiumUtils", {
    enumerable: true,
    get: function get() {
      return _LHAppiumUtils.default;
    }
  });
  Object.defineProperty(exports, "LHSettingItem", {
    enumerable: true,
    get: function get() {
      return _LHSettingItem.default;
    }
  });
  Object.defineProperty(exports, "LHDialogUtils", {
    enumerable: true,
    get: function get() {
      return _LHDialogUtils.default;
    }
  });
  Object.defineProperty(exports, "LHPolicyLicenseUtils", {
    enumerable: true,
    get: function get() {
      return _LHPolicyLicenseUtils.default;
    }
  });
  Object.defineProperty(exports, "LHGuardTypeMode", {
    enumerable: true,
    get: function get() {
      return _LHGuardTypeMode.default;
    }
  });
  Object.defineProperty(exports, "LHIFTTTManager", {
    enumerable: true,
    get: function get() {
      return _LHIFTTTManager.default;
    }
  });
  Object.defineProperty(exports, "LHToastUtils", {
    enumerable: true,
    get: function get() {
      return _LHToastUtils.default;
    }
  });
  Object.defineProperty(exports, "LHTimeSpanUtils", {
    enumerable: true,
    get: function get() {
      return _LHTimeSpanUtils.default;
    }
  });
  Object.defineProperty(exports, "CommonMethod", {
    enumerable: true,
    get: function get() {
      return _LHCommonMethod.default;
    }
  });
  Object.defineProperty(exports, "LHDeviceModel", {
    enumerable: true,
    get: function get() {
      return _LHDeviceModel.default;
    }
  });
  Object.defineProperty(exports, "LHStringUtils", {
    enumerable: true,
    get: function get() {
      return _LHStringUtils.default;
    }
  });
  Object.defineProperty(exports, "LHHardwareUpdateUtils", {
    enumerable: true,
    get: function get() {
      return _LHHardwareUpdateUtils.default;
    }
  });
  Object.defineProperty(exports, "LHLocalizedStrings", {
    enumerable: true,
    get: function get() {
      return _LHLocalizedStrings.default;
    }
  });
  Object.defineProperty(exports, "LHDebugConfig", {
    enumerable: true,
    get: function get() {
      return _LHDebugConfig.default;
    }
  });
  exports.dp = undefined;

  var _LHAuthorizationUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _LHPureRenderDecorator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHUiUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHDateUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHLogUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHMiServer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHDeviceUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHSensorSetIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _LHDeviceAuthorityUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LHAppiumUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHSettingItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHDialogUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHPolicyLicenseUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHGuardTypeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHToastUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHTimeSpanUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _LHCommonMethod = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _LHDeviceModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _LHStringUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _LHHardwareUpdateUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _LHLocalizedStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _LHDebugConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _LHGetPx = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var dp = _LHGetPx.default;
  exports.dp = dp;
},10004,[14305,10007,10010,10064,10067,10073,10076,10079,10082,10085,10124,10127,10130,10133,10136,10106,10100,10139,10157,10160,10091,10166,10169,10013,10172,10070]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[6]);

  var privacyProtocolCacheKey = 'prop.s_auth_config';
  var isOnline = _miot.Device.isOnline;

  var LHAuthorizationUtils = function () {
    function LHAuthorizationUtils() {
      (0, _classCallCheck2.default)(this, LHAuthorizationUtils);
    }

    (0, _createClass2.default)(LHAuthorizationUtils, null, [{
      key: "Authorization",
      value: function Authorization(params) {
        if (!params.policyResource) {
          throw new Error('LHAuthorizationUtils: params policy resource is undefine!');
        }

        if (LHAuthorizationUtils.PolicyCode.hasRequest) {
          LHAuthorizationUtils.CheckAuthorized(params);
        } else {
          LHAuthorizationUtils.checkRegion(params);
        }

        LHAuthorizationUtils.AuthorizationCancelListener(params);
      }
    }, {
      key: "AuthorizationCancelListener",
      value: function AuthorizationCancelListener(params) {
        return _miot.PackageEvent.packageAuthorizationCancel.addListener(function () {
          if (typeof params.authorizationCancelCallback === 'function') {
            params.authorizationCancelCallback();
          }

          if (_miot.Package && _reactNative.Platform.OS !== 'ios') {
            _miot.Package.exit();
          }
        });
      }
    }, {
      key: "checkRegion",
      value: function checkRegion(params) {
        _LHCommonFunction.LHPolicyLicenseUtils.GetCountryLanguageCode(function (res, serverCode, countryCode) {
          LHAuthorizationUtils.PolicyCode.languageCode = res;
          LHAuthorizationUtils.PolicyCode.countryCode = countryCode;
          LHAuthorizationUtils.PolicyCode.serverCode = serverCode;
          LHAuthorizationUtils.PolicyCode.hasRequest = true;
          LHAuthorizationUtils.CheckAuthorized(params);
        });
      }
    }, {
      key: "CheckAuthorized",
      value: function CheckAuthorized(params) {
        if (!isOnline || _LHCommonFunction.LHDeviceAuthorityUtils.isShared()) {
          if (typeof params.authorizationSucc === 'function') params.authorizationSucc();
          return;
        }

        _LHCommonFunction.LHMiServer.BatchGetDeviceDatas([{
          did: _miot.Device.deviceID,
          props: [privacyProtocolCacheKey]
        }], function (res) {
          var alreadyAuthed = false;
          var result = res[_miot.Device.deviceID];
          var config;

          if (result && result[privacyProtocolCacheKey]) {
            config = result[privacyProtocolCacheKey];
          }

          if (config) {
            try {
              var authJson = JSON.parse(config);
              alreadyAuthed = authJson.privacyAuthed && true;
            } catch (err) {}
          }

          if (alreadyAuthed) {
            if (typeof params.authorizationSucc === 'function') params.authorizationSucc();
          } else {
            LHAuthorizationUtils.OpenPrivacyLicense(params);
          }
        }, function () {
          if (typeof params.authorizationSucc === 'function') params.authorizationSucc();
        });
      }
    }, {
      key: "OpenPrivacyLicense",
      value: function OpenPrivacyLicense(params) {
        var policyLicenseUrl = _LHCommonFunction.LHPolicyLicenseUtils.GexPolicyLicenseUrl(params.policyResource, LHAuthorizationUtils.PolicyCode.languageCode, LHAuthorizationUtils.PolicyCode.serverCode, LHAuthorizationUtils.PolicyCode.countryCode);

        _LHCommonFunction.LHMiServer.OpenPrivacyLicense(params.licenseTitle, policyLicenseUrl.licenseUrl, params.policyTitle, policyLicenseUrl.policyUrl).then(function (result) {
          if (result) {
            var onSucces = typeof params.authorizationSucc === 'function' ? params.authorizationSucc : function () {};
            LHAuthorizationUtils.SavePrivacyProtocolKey(onSucces);
          }
        });
      }
    }, {
      key: "SavePrivacyProtocolKey",
      value: function SavePrivacyProtocolKey(success) {
        _LHCommonFunction.LHMiServer.BatchSetDeviceDatas([{
          did: _miot.Device.deviceID,
          props: (0, _defineProperty2.default)({}, privacyProtocolCacheKey, JSON.stringify({
            privacyAuthed: true
          }))
        }], function () {
          success();
        }, function () {
          success();
        });
      }
    }]);
    return LHAuthorizationUtils;
  }();

  exports.default = LHAuthorizationUtils;
  LHAuthorizationUtils.PolicyCode = {
    languageCode: 'en',
    countryCode: 'cn',
    serverCode: 'cn',
    hasRequest: false,
    hideLegalInfo: false
  };
},10007,[14305,14317,14320,14323,10074,10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _LHLocalizedStrings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _resources = _$$_REQUIRE(_dependencyMap[2]);

  var _ar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _de = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _en = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _es = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _fr = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _id = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _it = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _ja = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ko = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _pl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _ru = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _th = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _tr = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _zhHans = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _zhHantHK = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _zhHant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var LHCommonLocalizableString = new _LHLocalizedStrings.default({
    ar: _ar.default,
    de: _de.default,
    en: _en.default,
    es: _es.default,
    fr: _fr.default,
    id: _id.default,
    it: _it.default,
    ja: _ja.default,
    ko: _ko.default,
    pl: _pl.default,
    ru: _ru.default,
    th: _th.default,
    tr: _tr.default,
    zh: _zhHans.default,
    zh_hk: _zhHantHK.default,
    zh_tw: _zhHant.default
  });
  exports.default = LHCommonLocalizableString;
  if (_resources.strings.ifttt) LHCommonLocalizableString.common_setting_ifttt_auto = _resources.strings.ifttt;
},10010,[14305,10013,10077,10016,10019,10022,10025,10028,10031,10034,10037,10040,10043,10046,10049,10052,10055,10058,10061]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var interfaceLanguage = _miot.Host.locale.language;

  var LHLocalizedStrings = function () {
    (0, _createClass2.default)(LHLocalizedStrings, null, [{
      key: "getBestMatchingLanguage",
      value: function getBestMatchingLanguage(language, props) {
        if (props[language]) return language;
        return 'en';
      }
    }]);

    function LHLocalizedStrings(props) {
      (0, _classCallCheck2.default)(this, LHLocalizedStrings);
      this.props = props;
      this.setLanguage(interfaceLanguage);
    }

    (0, _createClass2.default)(LHLocalizedStrings, [{
      key: "setLanguage",
      value: function setLanguage(language) {
        var bestLanguage = LHLocalizedStrings.getBestMatchingLanguage(language, this.props);
        this.language = bestLanguage;

        if (this.props[bestLanguage]) {
          var localizedStrings = this.props[this.language];

          for (var key in localizedStrings) {
            if (localizedStrings.hasOwnProperty(key)) {
              this[key] = localizedStrings[key];
            }
          }
        }
      }
    }, {
      key: "getLanguage",
      value: function getLanguage() {
        return this.language;
      }
    }, {
      key: "getInterfaceLanguage",
      value: function getInterfaceLanguage() {
        return interfaceLanguage;
      }
    }, {
      key: "adjustLanguagePacket",
      value: function adjustLanguagePacket(languagePacket) {
        var keys = Object.keys(this.props);

        for (var i = 0, len = keys.length; i < len; i += 1) {
          if (!languagePacket[keys[i]]) delete this.props[keys[i]];
        }

        this.setLanguage(interfaceLanguage);
      }
    }]);
    return LHLocalizedStrings;
  }();

  exports.default = LHLocalizedStrings;
},10013,[14305,14320,14323,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ar = {
    "langugeName": "阿拉伯语",
    "common_setting_title": "Settings",
    "common_setting_feature_setting": "Function settings",
    "common_setting_general_setting": "General settings",
    "common_setting_device_name": "Device name",
    "common_setting_multiswitch": "Button settings",
    "common_setting_device_timeZone": "Regional settings",
    "common_setting_location_management": "Location management",
    "common_setting_share_device": "Device sharing",
    "common_setting_ifttt_auto": "Automation",
    "common_setting_btGateway": "蓝牙Mesh网关",
    "common_setting_btGateway_status_read_fail": "蓝牙Mesh网关状态读取失败",
    "cocommon_setting_btGateway_connected": "连接的蓝牙设备",
    "common_setting_firmware_upgrate": "Check for firmware updates",
    "common_setting_more_setting": "Additional settings",
    "common_setting_add_to_desktop": "Add to home screen",
    "common_setting_privacy_agreement": "User Agreement & Privacy Policy",
    "common_setting_delete_device": "Delete device",
    "common_setting_help_page": "Help",
    "common_setting_more_seting_security": "Security settings",
    "common_setting_more_seting_faq": "FAQ",
    "common_setting_more_seting_isssues": "Feedback",
    "common_setting_user_agreement": "Software License and Service Agreement",
    "common_setting_privacy_policy": "Privacy Policy",
    "common_setting_feature_plug_in": "Version",
    "common_setting_homekit_device_add": "Pair with HomeKit",
    "common_setting_homekit_device_bound": "مقيد",
    "common_setting_homekit_device_noBind": "غير مقيد",
    "common_log_title": "Logs",
    "common_log_today": "Today",
    "common_log_yesterday": "Yesterday",
    "common_log_no_logs": "No logs",
    "common_log_loading": "Loading",
    "common_log_loading_with_dot": "Loading ...",
    "common_log_logDataHasloaded": "Logs have been fully loaded",
    "common_log_all_data_has_been_loaded": "All data has been loaded",
    "common_log_no_data": "No data",
    "common_cancel": "Cancel",
    "common_ok": "OK",
    "common_manufacturer": "Manufactured by",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Can't connect to the network",
    "common_tips_battery_low": "Low battery",
    "common_tips_iknow": "OK",
    "common_button_done": "Done",
    "common_button_delete": "Delete",
    "common_button_retry": "Try again",
    "common_button_save": "Save",
    "common_tips_delete_succeed": "Delete succeed",
    "common_tips_delete_failed": "Delete failed",
    "common_tips_loading_failed": "Could not load",
    "common_tips_request_failed": "Request failed. Check your network",
    "common_button_prev": "Back",
    "common_button_next": "Next",
    "common_button_changename": "Rename",
    "common_date_workday": "Mon to Fri",
    "common_date_weekend": "Weekend",
    "common_date_selfdefine": "Custom",
    "common_date_mon": "Monday",
    "common_date_tues": "Tuesday",
    "common_date_wed": "Wednesday",
    "common_date_thur": "Thursday",
    "common_date_fri": "Friday",
    "common_date_sat": "Saturday",
    "common_date_sun": "Sunday",
    "common_date_day": "يوم ",
    "common_date_week": "أسبوع ",
    "common_date_month": "شهر ",
    "common_date_hour": "س ",
    "common_date_minute": "د ",
    "common_date_second": "ث ",
    "common_tips_discard_operation": "Discard current operation?",
    "common_tips_setting": "Setting, please wait…",
    "common_tips_setting_failed": "Failed to set",
    "common_tips_loading_failed_retry": "Could not load, tap to try again",
    "common_tips_shared_no_promision": "The shared device has no permission",
    "common_electricity": "إحصائيات الكهرباء",
    "common_power_history": "سجل تاريخ الطاقة",
    "common_hardware_update_updating": "Updating firmware, please wait…",
    "common_hardware_update_default": "There is a new firmware version ({version}) available, update now?",
    "common_hardware_update_isforce": "Your device's current firmware version is outdated, please update to the latest version ({version}).",
    "common_hardware_update": "Update now",
    "common_out": "Sign out",
    "common_hardware_checkupdate": "View update",
    "common_operation_fail": "Operation failed.",
    "common_repeat_everyday": "كل يوم",
    "common_repeat_once": "مره واحده",
    "common_repeat_tomorrow": "غدا",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "The device will be removed from the list.",
    "common_setting_device_delete_confirm": "Delete device?",
    "common_voice_mute": "静音",
    "common_voice_high": "高",
    "common_voice_middle": "中",
    "common_voice_low": "低",
    "sub_device_list_title": "子设备列表",
    "sub_device_list_header_tips": "下列子设备已经连接在本网关下",
    "sub_device_list_empty_tips": "该网关下暂无关联的子设备",
    "sub_device_list_name_cant_empty": "لا يمكن أن يكون اسم الجهاز فارغًا",
    "sub_device_list_name_cant_support_emoji": "لا يدعم تعبيرات الرموز التعبيرية",
    "sub_device_list_name_cant_support_special_char": "لا يمكن أن يحتوي الاسم على رموز خاصة",
    "sub_device_list_name_cant_more_forty": "لا يمكن أن يتجاوز الاسم 40 حرفًا",
    "sub_device_list_name_cant_same": "اسم الجهاز لا يمكن أن يكون هو نفسه",
    "sub_device_list_device_offline": "تDevice is offline",
    "sub_device_list_selected": "تم تحديد عنصر {XX}",
    "sub_device_list_delete_multi_device": "هل أنت متأكد من حذف الأجهزة {XX} المحددة؟",
    "ifttt_triggle_single_press": "单击",
    "ifttt_triggle_double_press": "双击",
    "ifttt_triggle_long_press": "长按",
    "ifttt_triggle_shake": "摇一摇",
    "ifttt_triggle_someone_moved": "有人移动",
    "ifttt_triggle_windoor_open": "门窗打开",
    "ifttt_triggle_moved_afteronemin": "تم نقله بعد دقيقة واحدة من عدم النشاط",
    "ifttt_triggle_detect_vibration": "感应到震动",
    "ifttt_triggle_detect_fall": "感应到跌落",
    "ifttt_triggle_detect_tilting": "الاستشعار عن الميل",
    "ifttt_triggle_fire_alert": "火警报警",
    "ifttt_triggle_gas_leakage_alert": "气体泄露报警",
    "ifttt_triggle_flood_alert": "浸水报警",
    "guard_type_basic": "基础守护",
    "guard_type_home": "在家守护",
    "guard_type_away": "离家守护",
    "guard_type_sleep": "睡眠守护",
    "ifttt_push_title_triggle_alert_1": "في {XX} ، يطلق {YY} إنذارًا",
    "ifttt_push_title_triggle_alert_2": "في {XX} ، يستشعر {YY} شخصًا يتحرك لإطلاق إنذار",
    "ifttt_push_title_triggle_alert_3": "في {XX} ، يقوم {YY} بتشغيل إنذار الزناد",
    "ifttt_push_title_triggle_alert_4": "في {XX} ، يستشعر {YY} النقل",
    "ifttt_push_title_triggle_alert_5": "في {XX} ، يستشعر {YY} جهاز إنذار الفيضان",
    "ifttt_push_title_triggle_alert_6": "في {XX} ، اكتشف {YY} تركيز غاز يتجاوز المعيار",
    "ifttt_push_title_triggle_alert_7": "في {XX} ، اكتشف {YY} الدخان",
    "common_ifttt_scene_execute_result_fail": "فشل التنفيذ",
    "common_ifttt_scene_execute_result_unknow_error": "خطأ غير طبيعي",
    "common_ifttt_scene_execute_result_time_out": "مهلة التنفيذ",
    "common_ifttt_scene_execute_result_camera_sleep": "الكاميرا نائمة",
    "common_ifttt_device_offline": "(غير متصل)",
    "timersetting_on": "开启时间",
    "timersetting_off": "关闭时间",
    "timersetting_empty": "未设置",
    "timersetting_perio": "开启时段",
    "common_start": "开始",
    "common_end": "نهاية",
    "common_color": "Kleur",
    "common_open": "开启",
    "common_scene_name_lm_scene_1_1": "عند التنبيه ، مر شخص ما ناقوس الخطر",
    "common_scene_name_lm_scene_1_2": "باب ونافذة إنذار مفتوحة عند التنبيه",
    "common_scene_name_lm_scene_1_3": "عند تشغيل المنبه ، يضغط المفتاح اللاسلكي على المنبه.",
    "common_scene_name_lm_scene_1_4": "عند التنبيه ، يتم تشغيل مكعب روبيك لفترة من الوقت.",
    "common_scene_name_lm_scene_1_5": "عند التنبيه ، يتم تشغيل الملصقات الساكنة والثابتة لمدة دقيقتين ويتم تشغيل المنبه.",
    "common_scene_name_lm_scene_2_1": "شخص ما مرت ، وكان ضوء الليل مضاءة",
    "common_scene_name_lm_scene_3_1": "مفتاح لاسلكي يضغط على جرس الباب",
    "common_scene_name_lm_scene_3_2": "门窗打开响门铃",
    "common_scene_name_lm_scene_3_3": "شخص ما مرت جرس الرنين",
    "common_scene_name_lm_scene_4_1": "有人经过关闹钟",
    "common_scene_name_lm_scene_4_2": "门窗打开关闹钟",
    "common_scene_name_lm_scene_4_3": "مفتاح لاسلكي يضغط على المنبه",
    "common_scene_name_lm_scene_5_1": "烟感联动网关报警",
    "common_scene_name_lm_scene_5_2": "气感联动网关报警",
    "common_scene_name_lm_scene_5_3": "水浸联动网关报警",
    "common_close": "关闭",
    "sensor_set_ifttt_config_success": "التكوين الناجح",
    "common_automation_configuring": "جارٍ تهيئة أتمتة الحزمة ، يرجى الانتظار ...",
    "sensor_set_ifttt_config_fail": "فشل التكوين",
    "sensor_set_ifttt_config_fail_tip": "1. تحتاج إلى توصيل البوابة بـ wifi \n2. تحتاج إلى توصيل هاتفك بـ wifi \n3. يرجى التأكد من أن wifi طبيعية.",
    "mi_linuxHub_guard_guard_timer": "توقيت الوصي",
    "mi_linuxHub_timer_light_name": "فانوس الموقت",
    "mi_linuxHub_lazy_clock_name": "المنبه",
    "sensor_set_ifttt_scene_name_1": "تذكير فتح الباب",
    "sensor_set_ifttt_scene_name_2": "انقر فوق المفتاح اللاسلكي لتشغيل / إيقاف تشغيل ضوء الليل",
    "sensor_set_ifttt_scene_name_3": "انقر نقرًا مزدوجًا على تنبيه التبديل اللاسلكي",
    "sensor_set_ifttt_scene_name_4": "شخص ما مرت ، وكان ضوء الليل مضاءة",
    "sensor_set_ifttt_scene_name_5": "2 دقيقة ضوء الليل بدون طيار قبالة",
    "sensor_set_ifttt_scene_name_6": "شخص يتحرك ضوء الليل",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "لم يغلق بعد أكثر من دقيقة بعد الافتتاح",
    "sensor_set_ifttt_triggle_name_2": "2 دقيقة بدون طيار",
    "sensor_set_ifttt_triggle_name_3": "تشغيل نغمة الرنين المحددة",
    "sensor_set_ifttt_triggle_name_4": "على / قبالة ضوء الليل",
    "sensor_set_ifttt_triggle_name_5": "ضوء الليل التعريفي",
    "sensor_set_ifttt_triggle_name_6": "أطفئ ضوء الليل",
    "sensor_set_ifttt_triggle_name_7": "ضوء الليل",
    "sensor_set_ifttt_triggle_name_8": "تشغيل / إيقاف التنبيه",
    "common_scene_execute_partiallysucceed": "部分执行成功",
    "common_short_date_mon": "周一",
    "common_short_date_tues": "周二",
    "common_short_date_wed": "周三",
    "common_short_date_thur": "周四",
    "common_short_date_fri": "周五",
    "common_short_date_sat": "周六",
    "common_short_date_sun": "周日",
    "common_repeat_timer_title": "Opsi ulangi",
    "common_repeat_self_timer_title": "Ulangi khusus",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Schedules",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Countdown",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "اليوم",
    "common_plug_month_elec": "شهر",
    "common_plug_current_power": "التيار",
    "common_setting_ifttt_auto_detail": "Automation",
    "mi_comboHub_mainPage_guard_base": "基础",
    "mi_comboHub_mainPage_guard_home": "在家",
    "mi_comboHub_mainPage_guard_away": "离家",
    "mi_comboHub_mainPage_guard_sleep": "睡眠",
    "common_comboHub_triggle_device_alert": "报警",
    "common_comboHub_triggle_device_opened_guard": "（已在{XX}守护中开启）",
    "common_comboHub_triggle_device_only_open_basic": "（只可用于基础守护）",
    "common_comboHub_triggle_device_opened_basic": "（已在基础守护中开启）",
    "common_setting_homekit_device_desc": "该设备可在Apple家庭APP配置和使用",
    "common_ifttt_triggleName_switch": "开关状态变化触发报警",
    "common_ifttt_triggleName_vibration": "状态变化触发报警",
    "common_ifttt_triggleName_cube": "静止一分钟被移动触发报警",
    "common_ifttt_triggleName_magnet": "门窗状态变化触发报警",
    "common_ifttt_triggleName_motion": "有人移动触发报警",
    "common_timer_light_timer_light_period": "时间段定时",
    "common_timer_light_timer_on": "定时开启",
    "common_timer_light_timer_off": "定时关闭",
    "common_timer_light_timer_time_after": "开始时间在结束时间之后",
    "common_lumi_sensor_setting_battery": "电池电量",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "更换电池引导",
    "common_lumi_sensor_battery_guide_description": "请打开电池后盖，按照图示更换电池",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Low battery, please replace the battery",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "触发报警设备",
    "mi_comboHub_triggleDevices_deleting": "删除中",
    "mi_comboHub_triggleSubDevices_setting": "正在设置",
    "mi_comboHub_triggle_device_header_title_1": "不可启用的设备",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "基础守护是24小时且不可关闭的守护模式。该网关下需要持续监测环境的设备，如烟雾传感器、天然气报警器、水浸传感器等，将默认被启用为基础守护的触发报警设备。",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "已作为在家/离家/睡眠守护的触发报警设备，不可用于基础守护",
    "mi_comboHub_triggle_device_header1_subtitle_home": "设置触发报警设备后，你可以开启在家守护模式了",
    "mi_comboHub_triggle_device_header2_subtitle_home": "已作为基础守护的触发报警设备，不可用于在家守护",
    "mi_comboHub_triggle_device_header1_subtitle_away": "设置触发报警设备后，你可以开启离家守护模式了",
    "mi_comboHub_triggle_device_header2_subtitle_away": "已作为基础守护的触发报警设备，不可用于离家守护",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "设置触发报警设备后，你可以开启睡眠守护模式了",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "已作为基础守护的触发报警设备，不可用于睡眠守护",
    "mi_comboHub_triggle_device_empty_tip": "该网关下暂无可作为报警触发源的设备，如人体传感器、门窗传感器以及无线开关等",
    "mi_comboHub_triggle_device_go_to_bug": "去购买",
    "mi_commonHub_setting_nightlight_tomorrow": "次日",
    "mi_commonHub_setting_nightlight_allday": "全天",
    "mi_ifttt_launch": "如果任一满足时",
    "mi_ifttt_action": "就执行",
    "mi_commonHub_nightlight_open": "开启夜灯",
    "mi_commonHub_nightlight_motion_limit": "最多只能选择9个人体传感器",
    "mi_commonHub_nightlight_delay_close_min": "{value}分钟后关闭夜灯",
    "mi_commonHub_go_back_title": "退出编辑",
    "mi_commonHub_go_back_content": "退出后修改将丢失，退出？",
    "mi_commonHub_setting_nightlight": "感应夜灯",
    "mi_commonHub_nightlight_commont": "当{value}所在环境较暗时",
    "mi_commonHub_nightlight_timer": "感应时段",
    "mi_commonHub_linkage_alarm_number_ten": "最多只能选择10个网关报警",
    "common_offline": "غير متصل",
    "mi_commonHub_linkage_alarm_footer_text": "开启联动报警功能的网关中，当任意一个网关报警，其他网关也会联动报警，发出报警铃音和灯光",
    "mi_commonHub_linkage_alarm": "联动报警",
    "mi_commonHub_linkage_alarm_dis": "联动报警取消"
  };
  exports.default = ar;
},10016,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var de = {
    "langugeName": "德语",
    "common_setting_title": "Einstellungen",
    "common_setting_feature_setting": "Funktionseinstellungen",
    "common_setting_general_setting": "Allgemeine Einstellungen",
    "common_setting_device_name": "Gerätename",
    "common_setting_multiswitch": "Schaltflächen-Einstellungen",
    "common_setting_device_timeZone": "Regionale Einstellungen",
    "common_setting_location_management": "Standortverwaltung",
    "common_setting_share_device": "Gerät freigeben",
    "common_setting_ifttt_auto": "Automatisierung",
    "common_setting_btGateway": "Bluetooth Mesh-Gateway",
    "common_setting_btGateway_status_read_fail": "Der Status des Bluetooth Mesh-Gateways konnte nicht abgerufen werden",
    "cocommon_setting_btGateway_connected": "Verbundene Bluetooth-Geräte",
    "common_setting_firmware_upgrate": "Nach Firmware-Aktualisierungen suchen",
    "common_setting_more_setting": "Zusätzliche Einstellungen",
    "common_setting_add_to_desktop": "Zum Startbildschirm hinzufügen",
    "common_setting_privacy_agreement": "Nutzungsvereinbarung und Datenschutzerklärung",
    "common_setting_delete_device": "Gerät löschen",
    "common_setting_help_page": "Hilfe",
    "common_setting_more_seting_security": "Sicherheitseinstellungen",
    "common_setting_more_seting_faq": "Häufige Fragen",
    "common_setting_more_seting_isssues": "Feedback",
    "common_setting_user_agreement": "Softwarelizenz- und Servicevereinbarung",
    "common_setting_privacy_policy": "Datenschutzerklärung",
    "common_setting_feature_plug_in": "Plug-in-Version",
    "common_setting_homekit_device_add": "Mit HomeKit koppeln",
    "common_setting_homekit_device_bound": "Binden",
    "common_setting_homekit_device_noBind": "Ungebunden",
    "common_log_title": "Protokolle",
    "common_log_today": "Heute",
    "common_log_yesterday": "Gestern",
    "common_log_no_logs": "Keine Protokolle",
    "common_log_loading": "Laden wird ausgeführt …",
    "common_log_loading_with_dot": "Laden wird ausgeführt …",
    "common_log_logDataHasloaded": "Die Protokolle wurden vollständig geladen",
    "common_log_all_data_has_been_loaded": "Alle Daten wurden geladen",
    "common_log_no_data": "Keine Daten",
    "common_cancel": "Abbrechen",
    "common_ok": "OK",
    "common_manufacturer": "Producent",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Verbindung zum Netzwerk nicht möglich",
    "common_tips_battery_low": "Niedriger Batterieladestatus",
    "common_tips_iknow": "OK",
    "common_button_done": "Fertig",
    "common_button_delete": "Löschen",
    "common_button_retry": "Erneut versuchen",
    "common_button_save": "Speichern",
    "common_tips_delete_succeed": "Gelöscht",
    "common_tips_delete_failed": "Fehler beim Löschen",
    "common_tips_loading_failed": "Konnte nicht geladen werden",
    "common_tips_request_failed": "Anforderung fehlgeschlagen. Prüfen Sie Ihr Netzwerk",
    "common_button_prev": "Zurück",
    "common_button_next": "Weiter",
    "common_button_changename": "Umbenennen",
    "common_date_workday": "Mo. bis Fr.",
    "common_date_weekend": "Wochenende",
    "common_date_selfdefine": "Angepasst",
    "common_date_mon": "Montag",
    "common_date_tues": "Dienstag",
    "common_date_wed": "Mittwoch",
    "common_date_thur": "Donnerstag",
    "common_date_fri": "Freitag",
    "common_date_sat": "Samstag",
    "common_date_sun": "Sonntag",
    "common_date_day": " Tag",
    "common_date_week": " Woche",
    "common_date_month": " Monat",
    "common_date_hour": " Std",
    "common_date_minute": " Min",
    "common_date_second": " Sek",
    "common_tips_discard_operation": "Aktuellen Vorgang abbrechen?",
    "common_tips_setting": "Wird eingestellt, bitte warten…",
    "common_tips_setting_failed": "Fehler beim Einstellen",
    "common_tips_loading_failed_retry": "Konnte nicht geladen werden, antippen, um es erneut zu versuchen",
    "common_tips_shared_no_promision": "Das gemeinsam genutzte Gerät hat keine Berechtigung",
    "common_electricity": "Elektrizitätsstatistik",
    "common_power_history": "Spannungsverlauf",
    "common_hardware_update_updating": "Aktualisierung der Firmware, bitte warten...",
    "common_hardware_update_default": "Es ist eine neue Firmware-Version ({version}) verfügbar, jetzt aktualisieren?",
    "common_hardware_update_isforce": "Die aktuelle Firmware-Version Ihres Gerätes ist veraltet, bitte aktualisieren Sie auf die neueste Version ({version}).",
    "common_hardware_update": "Jetzt aktualisieren",
    "common_out": "Abmelden",
    "common_hardware_checkupdate": "Aktualisierung anzeigen",
    "common_operation_fail": "Vorgang fehlgeschlagen.",
    "common_repeat_everyday": "Täglich",
    "common_repeat_once": "Einmalig",
    "common_repeat_tomorrow": "Morgen",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "Das Gerät wird aus der Liste entfernt.",
    "common_setting_device_delete_confirm": "Gerät löschen?",
    "common_voice_mute": "Leise",
    "common_voice_high": "Hoch",
    "common_voice_middle": "Mittel",
    "common_voice_low": "Niedrig ",
    "sub_device_list_title": "Untergerät-Liste",
    "sub_device_list_header_tips": "Die folgenden Untergeräte sind bereits mit dieser Zentrale gekoppelt.",
    "sub_device_list_empty_tips": "Es gibt keine Untergeräte, die mit dieser Steuerzentrale gekoppelt sind.",
    "sub_device_list_name_cant_empty": "Der Gerätename darf nicht leer sein",
    "sub_device_list_name_cant_support_emoji": "Unterstützt keine Emoji-Ausdrücke",
    "sub_device_list_name_cant_support_special_char": "Der Name darf keine Sonderzeichen enthalten",
    "sub_device_list_name_cant_more_forty": "Der Name darf nicht länger als 40 Zeichen sein",
    "sub_device_list_name_cant_same": "Der Gerätename darf nicht identisch sein",
    "sub_device_list_device_offline": "Gerät ist offline",
    "sub_device_list_selected": "{XX} Element ausgewählt",
    "sub_device_list_delete_multi_device": "Möchten Sie die ausgewählten {XX} Geräte wirklich löschen?",
    "ifttt_triggle_single_press": "Klicken",
    "ifttt_triggle_double_press": "Drücken und gedrückt halten",
    "ifttt_triggle_long_press": "Doppelklick",
    "ifttt_triggle_shake": "Schütteln",
    "ifttt_triggle_someone_moved": "Jemand ist umgezogen",
    "ifttt_triggle_windoor_open": "Fenster / Tür ist offen",
    "ifttt_triggle_moved_afteronemin": "Verschoben nach einer Minute Inaktivität",
    "ifttt_triggle_detect_vibration": "Vibration erkannt",
    "ifttt_triggle_detect_fall": "Sturz erkannt",
    "ifttt_triggle_detect_tilting": "Sensing zu kippen",
    "ifttt_triggle_fire_alert": "Feueralarm",
    "ifttt_triggle_gas_leakage_alert": "Gasleck-Alarm",
    "ifttt_triggle_flood_alert": "Hochwasseralarm",
    "guard_type_basic": "Basisschutz",
    "guard_type_home": "Zu-Hause-Schutz",
    "guard_type_away": "Außer-Hause-Schutz",
    "guard_type_sleep": "Schlafschutz",
    "ifttt_push_title_triggle_alert_1": "In {XX} löst {YY} einen Alarm aus",
    "ifttt_push_title_triggle_alert_2": "In {XX} erkennt {YY}, dass sich jemand bewegt, um einen Alarm auszulösen",
    "ifttt_push_title_triggle_alert_3": "In {XX} schaltet {YY} den Trigger-Alarm ein",
    "ifttt_push_title_triggle_alert_4": "In {XX} spürt {YY}, dass er bewegt wird",
    "ifttt_push_title_triggle_alert_5": "In {XX} erkennt {YY} den Hochwasseralarm",
    "ifttt_push_title_triggle_alert_6": "In {XX} hat {YY} eine Gaskonzentration festgestellt, die den Standard überschreitet",
    "ifttt_push_title_triggle_alert_7": "In {XX} hat {YY} Rauch festgestellt",
    "common_ifttt_scene_execute_result_fail": "Ausführung fehlgeschlagen",
    "common_ifttt_scene_execute_result_unknow_error": "Anormaler Fehler",
    "common_ifttt_scene_execute_result_time_out": "Implementierungs-Timeout",
    "common_ifttt_scene_execute_result_camera_sleep": "Die Kamera schläft",
    "common_ifttt_device_offline": "(offline)",
    "timersetting_on": "Startzeit",
    "timersetting_off": "Endzeit",
    "timersetting_empty": "Nicht festgelegt",
    "timersetting_perio": "Aktiv für",
    "common_start": "Start",
    "common_end": "Ende",
    "common_color": "farbe",
    "common_open": "Aktivieren",
    "common_scene_name_lm_scene_1_1": "Im Alarmfall hat jemand den Alarm bestanden",
    "common_scene_name_lm_scene_1_2": "Tür- und Fensteröffnungsalarm bei Alarmierung",
    "common_scene_name_lm_scene_1_3": "Wenn der Alarm aktiviert ist, drückt der Funkschalter auf den Alarm.",
    "common_scene_name_lm_scene_1_4": "Bei einem Alarm wird der Zauberwürfel für eine Weile ausgelöst.",
    "common_scene_name_lm_scene_1_5": "Bei Alarm werden die statischen und statischen Aufkleber für zwei Minuten ausgelöst und der Alarm wird ausgelöst.",
    "common_scene_name_lm_scene_2_1": "Jemand ging vorbei, das Nachtlicht wurde beleuchtet",
    "common_scene_name_lm_scene_3_1": "Funkschalter drückt auf die Türklingel",
    "common_scene_name_lm_scene_3_2": "Bei geöffneter Tür/Fenster klingelt die Türklingel",
    "common_scene_name_lm_scene_3_3": "Jemand passierte die Klinge",
    "common_scene_name_lm_scene_4_1": "Wecker wird ausgeschaltet, wenn jemand vorübergeht an",
    "common_scene_name_lm_scene_4_2": "Wecker ausschalten, wenn eine Tür/ein Fenster geöffnet ist",
    "common_scene_name_lm_scene_4_3": "Der Funkschalter drückt den Alarm aus",
    "common_scene_name_lm_scene_5_1": "Die Raucherkennung löst den Alarm des Hubs aus.",
    "common_scene_name_lm_scene_5_2": "Die Gaserkennung löst den Alarm des Hubs aus.",
    "common_scene_name_lm_scene_5_3": "Die Erkennung von Wasserleckagen löst den Alarm des Hubs aus.",
    "common_close": "Deaktivieren",
    "sensor_set_ifttt_config_success": "Konfigurieren erfolgreich",
    "common_automation_configuring": "Paketautomatisierung wird konfiguriert, bitte warten ...",
    "sensor_set_ifttt_config_fail": "Konfiguration fehlgeschlagen",
    "sensor_set_ifttt_config_fail_tip": "1. Sie müssen das Gateway mit WLAN verbinden. \n2. Sie müssen Ihr Telefon mit WLAN verbinden. \n3. Stellen Sie sicher, dass WLAN normal ist",
    "mi_linuxHub_guard_guard_timer": "Wächter Timing",
    "mi_linuxHub_timer_light_name": "Laternentimer",
    "mi_linuxHub_lazy_clock_name": "Wecker",
    "sensor_set_ifttt_scene_name_1": "Türöffnung erinnerung",
    "sensor_set_ifttt_scene_name_2": "Klicken Sie auf den Funkschalter, um das Nachtlicht ein- oder auszuschalten",
    "sensor_set_ifttt_scene_name_3": "Doppelklicken Sie auf den Alarm für den Funkschalter",
    "sensor_set_ifttt_scene_name_4": "Jemand ging vorbei, das Nachtlicht wurde beleuchtet",
    "sensor_set_ifttt_scene_name_5": "2 Minuten unbemanntes Nachtlicht aus",
    "sensor_set_ifttt_scene_name_6": "Jemand, der das Nachtlicht anmacht",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Nicht mehr als 1 Minute nach dem Öffnen geschlossen",
    "sensor_set_ifttt_triggle_name_2": "2 Minuten unbemannt",
    "sensor_set_ifttt_triggle_name_3": "Spielen Sie den angegebenen Klingelton",
    "sensor_set_ifttt_triggle_name_4": "Nachtlicht ein / aus",
    "sensor_set_ifttt_triggle_name_5": "Induktionsnachtlicht",
    "sensor_set_ifttt_triggle_name_6": "Mach das Nachtlicht aus",
    "sensor_set_ifttt_triggle_name_7": "Nachtlicht",
    "sensor_set_ifttt_triggle_name_8": "Ein / Aus-Alarm",
    "common_scene_execute_partiallysucceed": "Ein Teil der Aufgaben wurden erfolgreich ausgeführt.",
    "common_short_date_mon": "Mo",
    "common_short_date_tues": "Di",
    "common_short_date_wed": "Mi",
    "common_short_date_thur": "Do",
    "common_short_date_fri": "Fr",
    "common_short_date_sat": "Sa",
    "common_short_date_sun": "So",
    "common_repeat_timer_title": "Option wiederholen",
    "common_repeat_self_timer_title": "Benutzerdefinierte Wiederholung",
    "common_on": "EIN",
    "common_off": "AUS",
    "common_timer": "Timer",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Temporizador automático",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " °C",
    "common_plug_today_elec": "Heute",
    "common_plug_month_elec": "Monat",
    "common_plug_current_power": "Aktuell",
    "common_setting_ifttt_auto_detail": "Automatisierung",
    "mi_comboHub_mainPage_guard_base": "Basic",
    "mi_comboHub_mainPage_guard_home": "Zu Hause",
    "mi_comboHub_mainPage_guard_away": "Außer Hause",
    "mi_comboHub_mainPage_guard_sleep": "Ruhezustand",
    "common_comboHub_triggle_device_alert": "Alarm",
    "common_comboHub_triggle_device_opened_guard": "(Wurde für den {XX} Schutz aktiviert.)",
    "common_comboHub_triggle_device_only_open_basic": "(Kann nur für den Basisschutz verwendet werden.)",
    "common_comboHub_triggle_device_opened_basic": "(Wurde für den Basisschutz aktiviert.)",
    "common_setting_homekit_device_desc": "Das Gerät kann in der Apple Home App konfiguriert und verwendet werden.",
    "common_ifttt_triggleName_switch": "Der Alarm wird ausgelöst, wenn sich der Status des Schalters ändert.",
    "common_ifttt_triggleName_vibration": "Der Alarm wird ausgelöst, wenn sich der Status ändert.",
    "common_ifttt_triggleName_cube": "Der Alarm wird ausgelöst, wenn er bewegt wird, nachdem er über 1 Minute inaktiv war.",
    "common_ifttt_triggleName_magnet": "Der Alarm wird ausgelöst, wenn sich der Status des Tür- oder Fenstersensors ändert.",
    "common_ifttt_triggleName_motion": "Jemand bewegte und löste den Alarm aus.",
    "common_timer_light_timer_light_period": "Zeitraum",
    "common_timer_light_timer_on": "Zeitlich festgelegt am",
    "common_timer_light_timer_off": "Ausgeschaltet",
    "common_timer_light_timer_time_after": "Startzeit nach der Endzeit",
    "common_lumi_sensor_setting_battery": "Akku",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Niski poziom naładowania baterii, wymień baterię",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Alarmauslösegerät",
    "mi_comboHub_triggleDevices_deleting": "Beim Löschen…",
    "mi_comboHub_triggleSubDevices_setting": "Beim Konfigurieren...",
    "mi_comboHub_triggle_device_header_title_1": "Geräte, die nicht aktiviert werden können",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "Der Basisschutz ist ein 24-Stunden-Schutzmodus, der nicht deaktiviert werden kann. Geräte, die mit dem Hub gekoppelt sind, die zur kontinuierlichen Überwachung der Umgebung erforderlich sind, wie Rauchmelder, Gasmelder oder Wasserlecksensoren, werden standardmäßig als Auslöser des Basisschutzes aktiviert.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Wurde er als Auslöser für den Zu-Hause-, Außer-Hause- oder Schlafschutz aktiviert, kann er nicht für den Basisschutz verwendet werden.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Nach der Einstellung des Auslösers können Sie den Hausschutz aktivieren.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Wurde als Auslöser für den Basisschutz aktiviert, kann er nicht für den Hausschutz verwendet werden.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Nach der Einstellung des Auslösers können Sie den Außer-Haus-Schutz aktivieren.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Wurde als Auslöser für den Basisschutz aktiviert, kann er nicht für den Außer-Haus-Schutz verwendet werden.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Nach der Einstellung des Auslösers können Sie den Schlafschutz aktivieren.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Wurde als Auslöser für den Basisschutz aktiviert, kann er nicht für den Schlafschutz verwendet werden.",
    "mi_comboHub_triggle_device_empty_tip": "Es gibt keine Geräte, die mit dieser Steuerzentrale gekoppelt sind, die zum Auslösen des Alarms verwendet werden können, wie z.B. Bewegungssensor, Fenster- und Türsensor oder drahtloser Schalter.",
    "mi_comboHub_triggle_device_go_to_bug": "Kaufen",
    "mi_commonHub_setting_nightlight_tomorrow": "Am nächsten tag",
    "mi_commonHub_setting_nightlight_allday": "Den ganzen Tag",
    "mi_ifttt_launch": "Wenn eine Bedingung erfüllt ist",
    "mi_ifttt_action": "Dann",
    "mi_commonHub_nightlight_open": "Nachtlicht einschalten",
    "mi_commonHub_nightlight_motion_limit": "Kann nur bis zu 9 Sensoren für den menschlichen Körper auswählen",
    "mi_commonHub_nightlight_delay_close_min": "Schalten Sie das Nachtlicht in {value} Minuten aus",
    "mi_commonHub_go_back_title": "Beenden",
    "mi_commonHub_go_back_content": "Änderungen verwerfen und jetzt beenden?",
    "mi_commonHub_setting_nightlight": "Induktions-Nachtlicht",
    "mi_commonHub_nightlight_commont": "Wenn sich das {value} in einer dunklen Umgebung befindet",
    "mi_commonHub_nightlight_timer": "Induktionszeit",
    "mi_commonHub_linkage_alarm_number_ten": "Kann nur bis zu 10 Gateway-Alarme auswählen",
    "common_offline": "offline",
    "mi_commonHub_linkage_alarm_footer_text": "Wenn die Alarm-Link-Funktion der Steuerzentrale aktiviert ist und eine Steuerzentrale ausgelöst wird, werden der Alarmklingelton und das Blinklicht aller Steuerzentralen ausgelöst.",
    "mi_commonHub_linkage_alarm": "Verknüpfungsalarm",
    "mi_commonHub_linkage_alarm_dis": "Verknüpfungsalarm abgebrochen"
  };
  exports.default = de;
},10019,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var en = {
    "langugeName": "英语",
    "common_setting_title": "Settings",
    "common_setting_feature_setting": "Function settings",
    "common_setting_general_setting": "General settings",
    "common_setting_device_name": "Device name",
    "common_setting_multiswitch": "Button settings",
    "common_setting_device_timeZone": "Regional settings",
    "common_setting_location_management": "Location management",
    "common_setting_share_device": "Device sharing",
    "common_setting_ifttt_auto": "Automation",
    "common_setting_btGateway": "Bluetooth Mesh gateway",
    "common_setting_btGateway_status_read_fail": "Couldn't retrieve the status of Bluetooth Mesh gateway",
    "cocommon_setting_btGateway_connected": "Connected Bluetooth devices",
    "common_setting_firmware_upgrate": "Check for firmware updates",
    "common_setting_more_setting": "Additional settings",
    "common_setting_add_to_desktop": "Add to home screen",
    "common_setting_privacy_agreement": "User Agreement & Privacy Policy",
    "common_setting_delete_device": "Delete device",
    "common_setting_help_page": "Help",
    "common_setting_more_seting_security": "Security settings",
    "common_setting_more_seting_faq": "FAQ",
    "common_setting_more_seting_isssues": "Feedback",
    "common_setting_user_agreement": "Software License and Service Agreement",
    "common_setting_privacy_policy": "Privacy Policy",
    "common_setting_feature_plug_in": "Plug-in version",
    "common_setting_homekit_device_add": "Pair with HomeKit",
    "common_setting_homekit_device_bound": "Bound",
    "common_setting_homekit_device_noBind": "Unbound",
    "common_log_title": "Logs",
    "common_log_today": "Today",
    "common_log_yesterday": "Yesterday",
    "common_log_no_logs": "No logs",
    "common_log_loading": "Loading...",
    "common_log_loading_with_dot": "Loading ...",
    "common_log_logDataHasloaded": "Logs have been fully loaded",
    "common_log_all_data_has_been_loaded": "All data has been loaded",
    "common_log_no_data": "No data",
    "common_cancel": "Cancel",
    "common_ok": "OK",
    "common_manufacturer": "Manufactured by",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Can't connect to the network",
    "common_tips_battery_low": "Low battery",
    "common_tips_iknow": "OK",
    "common_button_done": "Done",
    "common_button_delete": "Delete",
    "common_button_retry": "Try again",
    "common_button_save": "Save",
    "common_tips_delete_succeed": "Deleted",
    "common_tips_delete_failed": "Delete failed",
    "common_tips_loading_failed": "Could not load",
    "common_tips_request_failed": "Request failed. Check your network",
    "common_button_prev": "Back",
    "common_button_next": "Next",
    "common_button_changename": "Rename",
    "common_date_workday": "Mon to Fri",
    "common_date_weekend": "Weekend",
    "common_date_selfdefine": "Custom",
    "common_date_mon": "Monday",
    "common_date_tues": "Tuesday",
    "common_date_wed": "Wednesday",
    "common_date_thur": "Thursday",
    "common_date_fri": "Friday",
    "common_date_sat": "Saturday",
    "common_date_sun": "Sunday",
    "common_date_day": " Day",
    "common_date_week": " Week",
    "common_date_month": " Month",
    "common_date_hour": " h",
    "common_date_minute": " min",
    "common_date_second": " s",
    "common_tips_discard_operation": "Discard current operation?",
    "common_tips_setting": "Setting, please wait…",
    "common_tips_setting_failed": "Failed to set",
    "common_tips_loading_failed_retry": "Could not load, tap to try again",
    "common_tips_shared_no_promision": "The shared device has no permission",
    "common_electricity": "Electricity Consumption Statistics",
    "common_power_history": "Power history record",
    "common_hardware_update_updating": "Updating firmware, please wait…",
    "common_hardware_update_default": "There is a new firmware version ({version}) available, update now?",
    "common_hardware_update_isforce": "Your device's current firmware version is outdated, please update to the latest version ({version}).",
    "common_hardware_update": "Update now",
    "common_out": "Sign out",
    "common_hardware_checkupdate": "View update",
    "common_operation_fail": "Operation failed.",
    "common_repeat_everyday": "Everyday",
    "common_repeat_once": "One time",
    "common_repeat_tomorrow": "Tomorrow",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "The device will be removed from the list.",
    "common_setting_device_delete_confirm": "Delete device?",
    "common_voice_mute": "Silent",
    "common_voice_high": "High",
    "common_voice_middle": "Medium",
    "common_voice_low": "Low",
    "sub_device_list_title": "Child device list",
    "sub_device_list_header_tips": "The following child devices are already paired with this hub.",
    "sub_device_list_empty_tips": "There are no child devices paired with this control hub.",
    "sub_device_list_name_cant_empty": "Device name can not be empty",
    "sub_device_list_name_cant_support_emoji": "Emoji is not supported",
    "sub_device_list_name_cant_support_special_char": "Special characters can not be included",
    "sub_device_list_name_cant_more_forty": "Only supports 40 characters at most",
    "sub_device_list_name_cant_same": "Device names can not be the same.",
    "sub_device_list_device_offline": "Device is offline",
    "sub_device_list_selected": "{XX}has been selected",
    "sub_device_list_delete_multi_device": "Delete {XX} selected devices?",
    "ifttt_triggle_single_press": "Click",
    "ifttt_triggle_double_press": "Press and hold",
    "ifttt_triggle_long_press": "Double-click",
    "ifttt_triggle_shake": "Shake",
    "ifttt_triggle_someone_moved": "Someone moved",
    "ifttt_triggle_windoor_open": "Window/door is open",
    "ifttt_triggle_moved_afteronemin": "Moved after being still for 1 minute",
    "ifttt_triggle_detect_vibration": "Vibration detected",
    "ifttt_triggle_detect_fall": "Fall detected",
    "ifttt_triggle_detect_tilting": "Tilt detected",
    "ifttt_triggle_fire_alert": "Fire alarm",
    "ifttt_triggle_gas_leakage_alert": "Gas leakage alert",
    "ifttt_triggle_flood_alert": "Flood alert",
    "guard_type_basic": "Basic guard",
    "guard_type_home": "At-home guard",
    "guard_type_away": "Away-from-home guard",
    "guard_type_sleep": "Sleep guard",
    "ifttt_push_title_triggle_alert_1": "{XX},{YY}triggers alarm",
    "ifttt_push_title_triggle_alert_2": "{XX},{YY}detects people moving and triggers alarm",
    "ifttt_push_title_triggle_alert_3": "{XX},{YY}has been opened and triggers alarm",
    "ifttt_push_title_triggle_alert_4": "{XX},{YY}detects motion",
    "ifttt_push_title_triggle_alert_5": "{XX},{YY}detects water leak and triggers alarm",
    "ifttt_push_title_triggle_alert_6": "{XX},{YY}detects the gas density has been over standard",
    "ifttt_push_title_triggle_alert_7": "{XX},{YY}detects smoke",
    "common_ifttt_scene_execute_result_fail": "Execution failed",
    "common_ifttt_scene_execute_result_unknow_error": "Unknow Error",
    "common_ifttt_scene_execute_result_time_out": "Timeout",
    "common_ifttt_scene_execute_result_camera_sleep": "The camera has been on sleep mode",
    "common_ifttt_device_offline": "(Offline)",
    "timersetting_on": "Start time",
    "timersetting_off": "End time",
    "timersetting_empty": "Not set",
    "timersetting_perio": "Active for",
    "common_start": "Start",
    "common_end": "End",
    "common_color": "color",
    "common_open": "Enable",
    "common_scene_name_lm_scene_1_1": "Alarm will be triggered when people pass by on security mode",
    "common_scene_name_lm_scene_1_2": "Alarm will be triggered when door or window is opened on security mode",
    "common_scene_name_lm_scene_1_3": "Press Wireless Mini Switch to trigger alarm on security mode",
    "common_scene_name_lm_scene_1_4": "Alarm will be triggered if the Cube has been still for some time on security mode",
    "common_scene_name_lm_scene_1_5": "Alarm will be triggered if Vibration Sensor has been still for 2 minutes on security mode",
    "common_scene_name_lm_scene_2_1": "The night light turns on when people pass by",
    "common_scene_name_lm_scene_3_1": "Press Wireless Mini Switch to ring the doorbell",
    "common_scene_name_lm_scene_3_2": "The doorbell rings when a door/window is opened",
    "common_scene_name_lm_scene_3_3": "The doorbell rings when people pass by.",
    "common_scene_name_lm_scene_4_1": "Turn off alarm clock when someone is passing by",
    "common_scene_name_lm_scene_4_2": "Turn off alarm clock when a door/window is opened",
    "common_scene_name_lm_scene_4_3": "Press Wireless Mini Switch to turn off the alarm clock",
    "common_scene_name_lm_scene_5_1": "Smoke detection will set off the hub's alert.",
    "common_scene_name_lm_scene_5_2": "Gas detection will set off the hub's alert.",
    "common_scene_name_lm_scene_5_3": "Water leak detection will set off the hub's alert.",
    "common_close": "Disable",
    "sensor_set_ifttt_config_success": "Configured successfully",
    "common_automation_configuring": "Automation is setting, please wait...",
    "sensor_set_ifttt_config_fail": "Configuration failed",
    "sensor_set_ifttt_config_fail_tip": "1.The Hub must be connected to Wi-Fi \n2.The phone must be connected to Wi-Fi \n3.Make sure Wi-Fi works properly",
    "mi_linuxHub_guard_guard_timer": "Guard schedule",
    "mi_linuxHub_timer_light_name": "Colored light schedules",
    "mi_linuxHub_lazy_clock_name": "Alarm clock schedules",
    "sensor_set_ifttt_scene_name_1": "Alert for door opening",
    "sensor_set_ifttt_scene_name_2": "Single press the Wireless Mini Switch to turn on/off the night light",
    "sensor_set_ifttt_scene_name_3": "Double press the Wireless Mini Switch to turn the security mode on/off",
    "sensor_set_ifttt_scene_name_4": "The night light turns on when people pass by",
    "sensor_set_ifttt_scene_name_5": "The night light turns off when no motion has been detected in 2 minutes ",
    "sensor_set_ifttt_scene_name_6": "The night light turns on when people move.",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "1 minute passed and has not been turned off ",
    "sensor_set_ifttt_triggle_name_2": "No people move in 2 minutes",
    "sensor_set_ifttt_triggle_name_3": "Play set ringtone",
    "sensor_set_ifttt_triggle_name_4": "Turn on/off the night light",
    "sensor_set_ifttt_triggle_name_5": "The night light turns on",
    "sensor_set_ifttt_triggle_name_6": "Turn off the night light",
    "sensor_set_ifttt_triggle_name_7": "Turn on the night light",
    "sensor_set_ifttt_triggle_name_8": "Turn on/off the security mode",
    "common_scene_execute_partiallysucceed": "Part of action completed",
    "common_short_date_mon": "Mon",
    "common_short_date_tues": "Tue",
    "common_short_date_wed": "Wed",
    "common_short_date_thur": "Thu",
    "common_short_date_fri": "Fri",
    "common_short_date_sat": "Sat",
    "common_short_date_sun": "Sun",
    "common_repeat_timer_title": "Repetition",
    "common_repeat_self_timer_title": "Customize Repetition",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Schedules",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Countdown",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Today",
    "common_plug_month_elec": "Month",
    "common_plug_current_power": "Current",
    "common_setting_ifttt_auto_detail": "Automation",
    "mi_comboHub_mainPage_guard_base": "Basic",
    "mi_comboHub_mainPage_guard_home": "At-home",
    "mi_comboHub_mainPage_guard_away": "Away-from-home",
    "mi_comboHub_mainPage_guard_sleep": "Sleep",
    "common_comboHub_triggle_device_alert": "Alert",
    "common_comboHub_triggle_device_opened_guard": "(Has been enabled for the {XX} guard.)",
    "common_comboHub_triggle_device_only_open_basic": "(Can only be used for the basic guard.)",
    "common_comboHub_triggle_device_opened_basic": "(Has been enabled for the basic guard.)",
    "common_setting_homekit_device_desc": "The device can be configured and used in Apple Home app.",
    "common_ifttt_triggleName_switch": "Alert is triggered when the switch's status changes.",
    "common_ifttt_triggleName_vibration": "Alert is triggered when the status changes.",
    "common_ifttt_triggleName_cube": "Alert is triggered when it is moved after being inactive over 1 minute.",
    "common_ifttt_triggleName_magnet": "Alert is triggered when the door or window sensor's status changes.",
    "common_ifttt_triggleName_motion": "Someone moved and triggered the alert.",
    "common_timer_light_timer_light_period": "Set timed period",
    "common_timer_light_timer_on": "Timed starting",
    "common_timer_light_timer_off": "Timed ending",
    "common_timer_light_timer_time_after": "The start time is after the end time",
    "common_lumi_sensor_setting_battery": "Battery",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Low battery, please replace the battery",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Alarm trigger device",
    "mi_comboHub_triggleDevices_deleting": "Deleting…",
    "mi_comboHub_triggleSubDevices_setting": "Configuring…",
    "mi_comboHub_triggle_device_header_title_1": "Devices that cannot be enabled",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "The basic guard is a 24-hour guard mode that cannot be disabled. Devices paired with the hub, that are required to monitor the environment continuously such as smoke detectors, gas detectors, or water leak sensors will be enabled as the basic guard's trigger devices by default.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Has been enabled as the trigger device for the at-home, away-from-home, or sleep guard, it cannot be used for the basic guard.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "After setting the trigger device, you can enable the home guard.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Has been enabled as the trigger device for the basic guard, it cannot be used for the at-home guard.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "After setting the trigger device, you can enable the away-from-home guard.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Has been enabled as the trigger device for the basic guard, it cannot be used for the  away-from-home guard.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "After setting the trigger device, you can enable the sleep guard.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Has been enabled as the trigger device for the basic guard, it cannot be used for the sleep guard.",
    "mi_comboHub_triggle_device_empty_tip": "There are no devices paired with this control hub that can be used to trigger the alert, such as a motion sensor, window and door sensor, or wireless switch.",
    "mi_comboHub_triggle_device_go_to_bug": "Purchase",
    "mi_commonHub_setting_nightlight_tomorrow": "Tomorrow",
    "mi_commonHub_setting_nightlight_allday": "All Day",
    "mi_ifttt_launch": "If any condition is met",
    "mi_ifttt_action": "Then",
    "mi_commonHub_nightlight_open": "Turn on the night light",
    "mi_commonHub_nightlight_motion_limit": "At most 9 Motion Sensors can be chosed",
    "mi_commonHub_nightlight_delay_close_min": "Turn off the night light in {value} min",
    "mi_commonHub_go_back_title": "Exit",
    "mi_commonHub_go_back_content": "Discard changes, and exit now?",
    "mi_commonHub_setting_nightlight": "Induction night light",
    "mi_commonHub_nightlight_commont": "When the {value} is in a dark environment",
    "mi_commonHub_nightlight_timer": "Effective Period",
    "mi_commonHub_linkage_alarm_number_ten": "Only 10 Hubs at most can be set to give off alarm",
    "common_offline": "Offline",
    "mi_commonHub_linkage_alarm_footer_text": "When the control hub's alert link function is enabled, and a control hubs is triggered, the alert ringtone and blinking light of all control hubs will be triggered.",
    "mi_commonHub_linkage_alarm": "Linkage alarm",
    "mi_commonHub_linkage_alarm_dis": "Linkage alarm canceled"
  };
  exports.default = en;
},10022,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var es = {
    "langugeName": "西班牙语",
    "common_setting_title": "Ajustes",
    "common_setting_feature_setting": "Ajustes de función",
    "common_setting_general_setting": "Ajustes generales",
    "common_setting_device_name": "Nombre del dispositivo",
    "common_setting_multiswitch": "Ajustes de los botones",
    "common_setting_device_timeZone": "Configuraciones regionales",
    "common_setting_location_management": "Gestión de localización",
    "common_setting_share_device": "Uso compartido de dispositivos",
    "common_setting_ifttt_auto": "Automatización",
    "common_setting_btGateway": "Puerta de enlace del Bluetooth en Malla",
    "common_setting_btGateway_status_read_fail": "No se pudo recibir el estado de la puerta de enlace del Bluetooth en Malla",
    "cocommon_setting_btGateway_connected": "Conectado a dispositivos Bluetooth",
    "common_setting_firmware_upgrate": "Buscar actualizaciones del firmware",
    "common_setting_more_setting": "Ajustes adicionales",
    "common_setting_add_to_desktop": "Añadir a la pantalla de inicio",
    "common_setting_privacy_agreement": "Acuerdo de usuario y Política de privacidad",
    "common_setting_delete_device": "Eliminar el dispositivo",
    "common_setting_help_page": "Ayuda",
    "common_setting_more_seting_security": "Ajustes de seguridad",
    "common_setting_more_seting_faq": "Preguntas frecuentes",
    "common_setting_more_seting_isssues": "Comentarios",
    "common_setting_user_agreement": "Licencia de Software y Acuerdo de Servicio",
    "common_setting_privacy_policy": "Política de privacidad",
    "common_setting_feature_plug_in": "Versión del complemento",
    "common_setting_homekit_device_add": "Vincular con HomeKit",
    "common_setting_homekit_device_bound": "Atar",
    "common_setting_homekit_device_noBind": "Sin consolidar",
    "common_log_title": "Registro",
    "common_log_today": "Hoy",
    "common_log_yesterday": "Ayer",
    "common_log_no_logs": "Sin Registros",
    "common_log_loading": "Cargando...",
    "common_log_loading_with_dot": "Cargando ...",
    "common_log_logDataHasloaded": "Los registros se han cargado con éxito",
    "common_log_all_data_has_been_loaded": "Se han cargado todos los datos",
    "common_log_no_data": "No hay datos",
    "common_cancel": "Cancelar",
    "common_ok": "Aceptar",
    "common_manufacturer": "Prodotto da",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "No se puede conectar a la red",
    "common_tips_battery_low": "Batería baja",
    "common_tips_iknow": "Entendido",
    "common_button_done": "Hecho",
    "common_button_delete": "Eliminar",
    "common_button_retry": "Vuelva a intentarlo",
    "common_button_save": "Guardar",
    "common_tips_delete_succeed": "Eliminado",
    "common_tips_delete_failed": "No se pudo eliminar",
    "common_tips_loading_failed": "Error al cargar",
    "common_tips_request_failed": "Error al solicitar. Compruebe su red",
    "common_button_prev": "Atrás",
    "common_button_next": "Siguiente",
    "common_button_changename": "Renombrar",
    "common_date_workday": "De lunes a viernes",
    "common_date_weekend": "Fines de semana",
    "common_date_selfdefine": "Personalizado",
    "common_date_mon": "Lunes",
    "common_date_tues": "Martes",
    "common_date_wed": "Miércoles",
    "common_date_thur": "Jueves",
    "common_date_fri": "Viernes",
    "common_date_sat": "Sábado",
    "common_date_sun": "Domingo",
    "common_date_day": " Día",
    "common_date_week": " Semana",
    "common_date_month": " Mes",
    "common_date_hour": " h",
    "common_date_minute": " min",
    "common_date_second": " s",
    "common_tips_discard_operation": "¿Quiere anular la operación actual?",
    "common_tips_setting": "Estableciendo, espere...",
    "common_tips_setting_failed": "Error al establecer",
    "common_tips_loading_failed_retry": "No se ha podido realizar la carga, pulse para volver a intentarlo.",
    "common_tips_shared_no_promision": "El dispositivo compartido no tiene permiso",
    "common_electricity": "Estadísticas de electricidad",
    "common_power_history": "Registro histórico de energía",
    "common_hardware_update_updating": "Actualizando el firmware, espere ...",
    "common_hardware_update_default": "¿Hay una nueva versión ({version}) de firmware disponible, ¿quiere actualizar ahora?",
    "common_hardware_update_isforce": "La versión actual del firmware de su dispositivo no está actualizada, actualice a la última versión ({version}).",
    "common_hardware_update": "Actualizar ahora",
    "common_out": "Cerrar sesión",
    "common_hardware_checkupdate": "Ver actualización",
    "common_operation_fail": "Operación fallida",
    "common_repeat_everyday": "Todos los días",
    "common_repeat_once": "Una vez",
    "common_repeat_tomorrow": "Mañana",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "El dispositivo se eliminará de la lista.",
    "common_setting_device_delete_confirm": "¿Eliminar dispositivo?",
    "common_voice_mute": "Silencioso",
    "common_voice_high": "Alta",
    "common_voice_middle": "Media",
    "common_voice_low": "Baja",
    "sub_device_list_title": "Lista de dispositivos secundarios",
    "sub_device_list_header_tips": "Los siguientes dispositivos secundarios ya están vinculados con este centro.",
    "sub_device_list_empty_tips": "No hay dispositivos secundarios vinculados con este centro de control.",
    "sub_device_list_name_cant_empty": "El nombre del dispositivo no puede estar vacío",
    "sub_device_list_name_cant_support_emoji": "No admite expresiones emoji",
    "sub_device_list_name_cant_support_special_char": "El nombre no puede contener símbolos especiales",
    "sub_device_list_name_cant_more_forty": "El nombre no puede superar los 40 caracteres.",
    "sub_device_list_name_cant_same": "El nombre del dispositivo no puede ser el mismo",
    "sub_device_list_device_offline": "El dispositivo no tiene conexión",
    "sub_device_list_selected": "{XX} elemento seleccionado",
    "sub_device_list_delete_multi_device": "¿Está seguro de eliminar los dispositivos {XX} seleccionados?",
    "ifttt_triggle_single_press": "Clic",
    "ifttt_triggle_double_press": "Mantener pulsado",
    "ifttt_triggle_long_press": "Doble clic",
    "ifttt_triggle_shake": "Agitar",
    "ifttt_triggle_someone_moved": "Alguien se mudó",
    "ifttt_triggle_windoor_open": "La ventana / puerta está abierta",
    "ifttt_triggle_moved_afteronemin": "Movido después de un minuto de inactividad",
    "ifttt_triggle_detect_vibration": "Vibración detectada",
    "ifttt_triggle_detect_fall": "Caída detectada",
    "ifttt_triggle_detect_tilting": "Sintiendo la inclinación",
    "ifttt_triggle_fire_alert": "Alarma de incendios",
    "ifttt_triggle_gas_leakage_alert": "Alerta de escape de gas",
    "ifttt_triggle_flood_alert": "Alerta de inundación",
    "guard_type_basic": "Protección básica",
    "guard_type_home": "Protección en el hogar",
    "guard_type_away": "Protección del hogar en su ausencia",
    "guard_type_sleep": "Protección del sueño",
    "ifttt_push_title_triggle_alert_1": "En {XX}, {YY} activa una alarma",
    "ifttt_push_title_triggle_alert_2": "En {XX}, {YY} detecta que alguien se mueve para activar una alarma",
    "ifttt_push_title_triggle_alert_3": "En {XX}, {YY} activa la alarma de activación",
    "ifttt_push_title_triggle_alert_4": "En {XX}, {YY} siente que se mueve",
    "ifttt_push_title_triggle_alert_5": "En {XX}, {YY} detecta la alarma de inundación",
    "ifttt_push_title_triggle_alert_6": "En {XX}, {YY} detectó una concentración de gas superior al estándar",
    "ifttt_push_title_triggle_alert_7": "En {XX}, {YY} detectó humo",
    "common_ifttt_scene_execute_result_fail": "Ejecución fallida",
    "common_ifttt_scene_execute_result_unknow_error": "Error anormal",
    "common_ifttt_scene_execute_result_time_out": "Tiempo de espera de implementación",
    "common_ifttt_scene_execute_result_camera_sleep": "La camara esta durmiendo",
    "common_ifttt_device_offline": "(fuera de línea)",
    "timersetting_on": "Hora de inicio",
    "timersetting_off": "Hora de finalización",
    "timersetting_empty": "No establecido",
    "timersetting_perio": "Activo para",
    "common_start": "Empezar",
    "common_end": "Fin",
    "common_color": "Color",
    "common_open": "Activar",
    "common_scene_name_lm_scene_1_1": "Cuando estaba alerta, alguien pasó la alarma",
    "common_scene_name_lm_scene_1_2": "Alarma de puerta y ventana abierta al alertar",
    "common_scene_name_lm_scene_1_3": "Cuando la alarma está activada, el interruptor inalámbrico presiona la alarma.",
    "common_scene_name_lm_scene_1_4": "Al alertar, el Cubo de Rubik se activa por un tiempo.",
    "common_scene_name_lm_scene_1_5": "Cuando está alerta, los adhesivos estáticos y estáticos se activan durante dos minutos y se activa la alarma.",
    "common_scene_name_lm_scene_2_1": "Alguien pasó, la luz de la noche estaba iluminada.",
    "common_scene_name_lm_scene_3_1": "El interruptor inalámbrico presiona el timbre",
    "common_scene_name_lm_scene_3_2": "El timbre suena cuando se abre una puerta o ventana",
    "common_scene_name_lm_scene_3_3": "Alguien pasó la campana sonando",
    "common_scene_name_lm_scene_4_1": "Desactivar despertador cuando alguien pase",
    "common_scene_name_lm_scene_4_2": "Desactivar despertador cuando se abra una puerta o ventana",
    "common_scene_name_lm_scene_4_3": "El interruptor inalámbrico apaga la alarma",
    "common_scene_name_lm_scene_5_1": "La detección de humo activará la alerta del controlador.",
    "common_scene_name_lm_scene_5_2": "La detección de gas activará la alerta del controlador.",
    "common_scene_name_lm_scene_5_3": "La detección de fuga de agua activará la alerta del controlador.",
    "common_close": "Desactivado",
    "sensor_set_ifttt_config_success": "Se ha configurado correctamente",
    "common_automation_configuring": "Configurando la automatización del paquete, espere ...",
    "sensor_set_ifttt_config_fail": "Configuración fallida",
    "sensor_set_ifttt_config_fail_tip": "1. Debe conectar la puerta de enlace a wifi \n2. Debe conectar su teléfono a wifi \n3. Asegúrese de que wifi sea normal.",
    "mi_linuxHub_guard_guard_timer": "Temporizador guardián",
    "mi_linuxHub_timer_light_name": "Temporizador linterna",
    "mi_linuxHub_lazy_clock_name": "Reloj despertador",
    "sensor_set_ifttt_scene_name_1": "Recordatorio de apertura de puerta",
    "sensor_set_ifttt_scene_name_2": "Haga clic en el interruptor inalámbrico para encender / apagar la luz nocturna",
    "sensor_set_ifttt_scene_name_3": "Haga doble clic en la alerta del interruptor del interruptor inalámbrico",
    "sensor_set_ifttt_scene_name_4": "Alguien pasó, la luz de la noche estaba iluminada.",
    "sensor_set_ifttt_scene_name_5": "2 minutos de luz nocturna no tripulada apagada",
    "sensor_set_ifttt_scene_name_6": "Alguien moviendo la luz de la noche encendida",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "No cerrado después de más de 1 minuto después de abrir",
    "sensor_set_ifttt_triggle_name_2": "2 minutos sin tripulación",
    "sensor_set_ifttt_triggle_name_3": "Reproduce el tono de llamada especificado",
    "sensor_set_ifttt_triggle_name_4": "Luz de encendido / apagado nocturno",
    "sensor_set_ifttt_triggle_name_5": "Luz de la noche de inducción",
    "sensor_set_ifttt_triggle_name_6": "Apaga la luz de la noche",
    "sensor_set_ifttt_triggle_name_7": "Luz de la noche",
    "sensor_set_ifttt_triggle_name_8": "Alerta de encendido / apagado",
    "common_scene_execute_partiallysucceed": "Parte de las tareas se han completado con éxito\"",
    "common_short_date_mon": "Lun.",
    "common_short_date_tues": "Mar.",
    "common_short_date_wed": "Mié.",
    "common_short_date_thur": "Jue.",
    "common_short_date_fri": "Vie.",
    "common_short_date_sat": "Sáb.",
    "common_short_date_sun": "Dom.",
    "common_repeat_timer_title": "Repetir opción",
    "common_repeat_self_timer_title": "Repetición personalizada",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Temporizador",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Обратный отсчет",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Hoy",
    "common_plug_month_elec": "Mes",
    "common_plug_current_power": "Corriente",
    "common_setting_ifttt_auto_detail": "Automatización",
    "mi_comboHub_mainPage_guard_base": "Básico",
    "mi_comboHub_mainPage_guard_home": "En el hogar",
    "mi_comboHub_mainPage_guard_away": "Hogar en su ausencia",
    "mi_comboHub_mainPage_guard_sleep": "Suspensión",
    "common_comboHub_triggle_device_alert": "Alerta",
    "common_comboHub_triggle_device_opened_guard": "(Ha sido habilitado para la protección {XX}.)",
    "common_comboHub_triggle_device_only_open_basic": "(Solo puede utilizarse con la protección básica.)",
    "common_comboHub_triggle_device_opened_basic": "(Se ha habilitado para la protección básica.)",
    "common_setting_homekit_device_desc": "Este dispositivo puede configurarse y se utilizado en la aplicación Apple Home.",
    "common_ifttt_triggleName_switch": "La alarma se activa cuando el estado del interruptor cambie.",
    "common_ifttt_triggleName_vibration": "La alarma se activa cuando el estado cambie.",
    "common_ifttt_triggleName_cube": "La alarma se activa cuando se mueve o tras estar inactivo durante 1 minuto.",
    "common_ifttt_triggleName_magnet": "La alarma se activa cuando el estado del sensor de la ventana o puerta cambie.",
    "common_ifttt_triggleName_motion": "Alguien movió el sensor y activó la alarma.",
    "common_timer_light_timer_light_period": "Periodo de tiempo",
    "common_timer_light_timer_on": "Cronometrado en",
    "common_timer_light_timer_off": "Temporizado",
    "common_timer_light_timer_time_after": "Hora de inicio después de la hora de finalización",
    "common_lumi_sensor_setting_battery": "Batería",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Batteria scarica, per cortesia sostituire la batteria",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Dispositivo de activación de alarma",
    "mi_comboHub_triggleDevices_deleting": "Eliminando…",
    "mi_comboHub_triggleSubDevices_setting": "Configurando…",
    "mi_comboHub_triggle_device_header_title_1": "Dispositivos que no pueden ser activados",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "Esta protección básica es un modo de protección 24 horas que no puede desactivarse. Los dispositivos conectados con el controlador domótico inteligente, que se necesitan para supervisar el entorno de forma continua, tales como detectores de humo, de gas o sensores de fugas de agua, se activarán como dispositivos de activación de protección básica por defecto.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Ha sido habilitado como dispositivo de activación para la protección en casa, en su ausencia del hogar, o del sueño, no puede utilizarse para la protección básica.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Una vez establezca el dispositivo de activación, podrá activar la protección del hogar.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Ha sido habilitado como el dispositivo de activación para la protección básica, no puede usarse para la protección en el hogar.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Una vez establecido el dispositivo de activación, podrá habilitar la protección en su ausencia del hogar.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Ha sido habilitado como el dispositivo de activación de protección básica, no puede usarse para la protección del hogar en su ausencia.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Una vez establezca el dispositivo de activación, podrá habilitar la protección del sueño.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Ha sido habilitado como el dispositivo de activación de la protección básica, no puede usarse para la protección del sueño.",
    "mi_comboHub_triggle_device_empty_tip": "No hay dispositivos vinculados con este centro de control que se puedan usar para activar la alarma, como un sensor de movimiento, de ventana y de puerta, o un interruptor inalámbrico.",
    "mi_comboHub_triggle_device_go_to_bug": "Adquirir",
    "mi_commonHub_setting_nightlight_tomorrow": "Al dia siguiente",
    "mi_commonHub_setting_nightlight_allday": "Todo el dia",
    "mi_ifttt_launch": "Si se cumple alguna condición",
    "mi_ifttt_action": "Entonces",
    "mi_commonHub_nightlight_open": "Encender la luz de nocturna",
    "mi_commonHub_nightlight_motion_limit": "Solo puede seleccionar hasta 9 sensores del cuerpo humano",
    "mi_commonHub_nightlight_delay_close_min": "Apaga la luz nocturna en {value} min",
    "mi_commonHub_go_back_title": "Salir",
    "mi_commonHub_go_back_content": "¿Descartar los cambios y salir ahora?",
    "mi_commonHub_setting_nightlight": "Luz de inducción nocturna",
    "mi_commonHub_nightlight_commont": "Cuando el {value} está en un ambiente oscuro",
    "mi_commonHub_nightlight_timer": "Período de inducción",
    "mi_commonHub_linkage_alarm_number_ten": "Solo puede seleccionar hasta 10 alarmas de puerta de enlace",
    "common_offline": "fuera de línea",
    "mi_commonHub_linkage_alarm_footer_text": "Cuando la función de enlace de alarma del centro de control está activada y se gatilla un centro de control, se activará el tono de llamada de alarma y la luz intermitente de todos los centros de control.",
    "mi_commonHub_linkage_alarm": "Vinculación de la alarma",
    "mi_commonHub_linkage_alarm_dis": "Vinculación de la alarma cancelada"
  };
  exports.default = es;
},10025,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var fr = {
    "langugeName": "法语",
    "common_setting_title": "Paramètres",
    "common_setting_feature_setting": "Paramètres de fonction",
    "common_setting_general_setting": "Paramètres généraux",
    "common_setting_device_name": "Nom de l’appareil",
    "common_setting_multiswitch": "Paramètres des boutons",
    "common_setting_device_timeZone": "Paramètres régionaux",
    "common_setting_location_management": "Gestion de la localisation",
    "common_setting_share_device": "Partage sur dispositif",
    "common_setting_ifttt_auto": "Automatisation",
    "common_setting_btGateway": "Passerelle Bluetooth Mesh",
    "common_setting_btGateway_status_read_fail": "Impossible de récupérer le statut de la passerelle du Bluetooth Mesh",
    "cocommon_setting_btGateway_connected": "Appareils Bluetooth connectés",
    "common_setting_firmware_upgrate": "Vérifier les mises à jour du micrologiciel",
    "common_setting_more_setting": "Réglages supplémentaires",
    "common_setting_add_to_desktop": "Ajouter à l’écran d’accueil",
    "common_setting_privacy_agreement": "Contrat d'utilisation et Politique de confidentialité",
    "common_setting_delete_device": "Supprimer l’appareil",
    "common_setting_help_page": "Aide",
    "common_setting_more_seting_security": "Paramètres de sécurité",
    "common_setting_more_seting_faq": "FAQ",
    "common_setting_more_seting_isssues": "Rétroaction",
    "common_setting_user_agreement": "Accord de licence logicielle et de service",
    "common_setting_privacy_policy": "Politique de confidentialité",
    "common_setting_feature_plug_in": "Version de plug-in",
    "common_setting_homekit_device_add": "Coupler à HomeKit",
    "common_setting_homekit_device_bound": "Lier",
    "common_setting_homekit_device_noBind": "Non consolidé",
    "common_log_title": "Journaux",
    "common_log_today": "Aujourd'hui",
    "common_log_yesterday": "Hier",
    "common_log_no_logs": "Aucun journal",
    "common_log_loading": "Chargement en cours",
    "common_log_loading_with_dot": "Chargement en cours ...",
    "common_log_logDataHasloaded": "Les journaux ont été chargés",
    "common_log_all_data_has_been_loaded": "Toutes les données ont été chargées",
    "common_log_no_data": "Aucune donnée",
    "common_cancel": "Annuler",
    "common_ok": "OK",
    "common_manufacturer": "Hersteller",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Connexion au réseau impossible",
    "common_tips_battery_low": "Batterie faible",
    "common_tips_iknow": "OK",
    "common_button_done": "Terminé",
    "common_button_delete": "Supprimer",
    "common_button_retry": "Réessayez",
    "common_button_save": "Enregistrer",
    "common_tips_delete_succeed": "Détecté",
    "common_tips_delete_failed": "Échec de la suppression",
    "common_tips_loading_failed": "Échec du chargement",
    "common_tips_request_failed": "Échec de l’envoi de la requête. Vérifiez votre connexion au réseau",
    "common_button_prev": "Face arrière",
    "common_button_next": "Suivant",
    "common_button_changename": "Renommer",
    "common_date_workday": "Du lundi au vendredi",
    "common_date_weekend": "Week-end",
    "common_date_selfdefine": "Personnalisée",
    "common_date_mon": "Lundi",
    "common_date_tues": "Mardi",
    "common_date_wed": "Mercredi",
    "common_date_thur": "Jeudi",
    "common_date_fri": "Vendredi",
    "common_date_sat": "Samedi",
    "common_date_sun": "Dimanche",
    "common_date_day": " Jour",
    "common_date_week": " Semaine",
    "common_date_month": " Mois",
    "common_date_hour": " h",
    "common_date_minute": " min",
    "common_date_second": " s",
    "common_tips_discard_operation": "Annuler l’opération en cours ?",
    "common_tips_setting": "Paramétrage en cours, veuillez patienter…",
    "common_tips_setting_failed": "Échec du paramétrage",
    "common_tips_loading_failed_retry": "Échec du téléchargement, appuyez pour réessayer",
    "common_tips_shared_no_promision": "L’appareil partagé n’a aucune permission",
    "common_electricity": "Statistiques d'électricité",
    "common_power_history": "Enregistrement de l’historique d’alimentation",
    "common_hardware_update_updating": "Mise àjour du micrologiciel en cours, veuillez patienter…",
    "common_hardware_update_default": "Une nouvelle version du micrologiciel est disponible ({version}), mettre à jour maintenant ?",
    "common_hardware_update_isforce": "La version actuelle du micrologiciele de votre appareil est obsolète, veuillez mettre à jour à la plus récente version ({version}).",
    "common_hardware_update": "Mettre à jour maintenant",
    "common_out": "Se déconnecter",
    "common_hardware_checkupdate": "Voir la mise à jour",
    "common_operation_fail": "Échec de l’opération. ",
    "common_repeat_everyday": "Tous les jours",
    "common_repeat_once": "Une fois",
    "common_repeat_tomorrow": "Demain",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "L'appareil sera supprimé de la liste.",
    "common_setting_device_delete_confirm": "Supprimer l'appareil ?",
    "common_voice_mute": "Silencieux",
    "common_voice_high": "Élevée",
    "common_voice_middle": "Moyenne",
    "common_voice_low": "Faible",
    "sub_device_list_title": "Liste dispositif enfant",
    "sub_device_list_header_tips": "Les dispositifs pour enfant suivants sont déjà appariés avec ce centre de commande.",
    "sub_device_list_empty_tips": "Il n’y a pas de dispositifs pour enfant appariés avec ce centre de commande.",
    "sub_device_list_name_cant_empty": "Le nom de l'appareil ne peut pas être vide",
    "sub_device_list_name_cant_support_emoji": "Ne supporte pas les expressions emoji",
    "sub_device_list_name_cant_support_special_char": "Le nom ne peut pas contenir de symboles spéciaux",
    "sub_device_list_name_cant_more_forty": "Le nom ne peut pas dépasser 40 caractères",
    "sub_device_list_name_cant_same": "Le nom de l'appareil ne peut pas être identique",
    "sub_device_list_device_offline": "L’appareil est hors ligne",
    "sub_device_list_selected": "{XX} élément sélectionné",
    "sub_device_list_delete_multi_device": "Êtes-vous sûr de vouloir supprimer les {XX} appareils sélectionnés?",
    "ifttt_triggle_single_press": "Cliquer",
    "ifttt_triggle_double_press": "Pression prolongée",
    "ifttt_triggle_long_press": "Double pression",
    "ifttt_triggle_shake": "Secouer",
    "ifttt_triggle_someone_moved": "Quelqu'un a bougé",
    "ifttt_triggle_windoor_open": "Fenêtre / porte ouverte",
    "ifttt_triggle_moved_afteronemin": "Déplacé après une minute d'inactivité",
    "ifttt_triggle_detect_vibration": "Vibration détectée",
    "ifttt_triggle_detect_fall": "Chute détectée",
    "ifttt_triggle_detect_tilting": "Sensation d'inclinaison",
    "ifttt_triggle_fire_alert": "Alarme incendie",
    "ifttt_triggle_gas_leakage_alert": "Alerte de fuite de gaz",
    "ifttt_triggle_flood_alert": "Alerte aux inondations",
    "guard_type_basic": "Protection de base",
    "guard_type_home": "Protection domicile",
    "guard_type_away": "Protection domicile distante",
    "guard_type_sleep": "Protège-sommeil",
    "ifttt_push_title_triggle_alert_1": "Dans {XX}, {YY} déclenche une alarme",
    "ifttt_push_title_triggle_alert_2": "Dans {XX}, {YY} détecte une personne qui se déclenche pour déclencher une alarme",
    "ifttt_push_title_triggle_alert_3": "Dans {XX}, {YY} active l'alarme de déclenchement.",
    "ifttt_push_title_triggle_alert_4": "Dans {XX}, {YY} détecte le déplacement",
    "ifttt_push_title_triggle_alert_5": "Dans {XX}, {YY} détecte l’alarme d’inondation.",
    "ifttt_push_title_triggle_alert_6": "Dans {XX}, {YY} a détecté une concentration de gaz supérieure à la norme",
    "ifttt_push_title_triggle_alert_7": "Dans {XX}, {YY} a détecté de la fumée",
    "common_ifttt_scene_execute_result_fail": "L'exécution a échoué",
    "common_ifttt_scene_execute_result_unknow_error": "Erreur anormale",
    "common_ifttt_scene_execute_result_time_out": "Délai de mise en œuvre",
    "common_ifttt_scene_execute_result_camera_sleep": "La caméra dort",
    "common_ifttt_device_offline": "(hors ligne)",
    "timersetting_on": "Heure de début",
    "timersetting_off": "Heure de fin",
    "timersetting_empty": "Non configuré",
    "timersetting_perio": "Actif pendant",
    "common_start": "Début",
    "common_end": "Fin",
    "common_color": "Couleur",
    "common_open": "Activer",
    "common_scene_name_lm_scene_1_1": "Lorsque alerte, quelqu'un a passé l'alarme",
    "common_scene_name_lm_scene_1_2": "Alarme porte et fenêtre ouverte lors de l'alerte",
    "common_scene_name_lm_scene_1_3": "Lorsque l'alarme est activée, le commutateur sans fil appuie sur l'alarme.",
    "common_scene_name_lm_scene_1_4": "Lors de l'alerte, le cube Rubik est déclenché pendant un certain temps.",
    "common_scene_name_lm_scene_1_5": "Lorsque alerte, les autocollants statiques et statiques sont déclenchés pendant deux minutes et l'alarme est déclenchée.",
    "common_scene_name_lm_scene_2_1": "Quelqu'un est passé, la veilleuse était allumée",
    "common_scene_name_lm_scene_3_1": "Interrupteur sans fil appuie sur la sonnette",
    "common_scene_name_lm_scene_3_2": "La sonnette retentit lorsqu’une porte ou une fenêtre est ouverte",
    "common_scene_name_lm_scene_3_3": "Quelqu'un a passé la sonnerie",
    "common_scene_name_lm_scene_4_1": "Éteindre le réveil lorsque quelqu’un passe à proximité",
    "common_scene_name_lm_scene_4_2": "Éteignez l’alarme du réveil lorsqu’une porte ou une fenêtre est ouverte",
    "common_scene_name_lm_scene_4_3": "Interrupteur sans fil appuie sur l'alarme",
    "common_scene_name_lm_scene_5_1": "La détection de fumée déclenchera l'alerte de l'assistant.",
    "common_scene_name_lm_scene_5_2": "La détection de gaz déclenchera l'alerte de l'assistant.",
    "common_scene_name_lm_scene_5_3": "La détection de fuite d'eau déclenchera l'alerte de l'assistant.",
    "common_close": "Désactiver",
    "sensor_set_ifttt_config_success": "Paramétré avec succès",
    "common_automation_configuring": "Configuration de l'automatisation du package, veuillez patienter ...",
    "sensor_set_ifttt_config_fail": "La configuration a échoué",
    "sensor_set_ifttt_config_fail_tip": "1.The Hub must be connected to Wi-Fi \n2.The phone must be connected to Wi-Fi \n3.Make sure Wi-Fi works properly",
    "mi_linuxHub_guard_guard_timer": "Guard schedule",
    "mi_linuxHub_timer_light_name": "Minuterie de lanterne",
    "mi_linuxHub_lazy_clock_name": "Réveil",
    "sensor_set_ifttt_scene_name_1": "Rappel d'ouverture de porte",
    "sensor_set_ifttt_scene_name_2": "Cliquez sur le commutateur sans fil pour allumer / éteindre la veilleuse",
    "sensor_set_ifttt_scene_name_3": "Double-cliquez sur l'alerte de commutateur sans fil",
    "sensor_set_ifttt_scene_name_4": "Quelqu'un est passé, la veilleuse était allumée",
    "sensor_set_ifttt_scene_name_5": "2 minutes de veilleuse éteinte",
    "sensor_set_ifttt_scene_name_6": "Quelqu'un bouge la veilleuse",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Non fermé plus d'une minute après l'ouverture",
    "sensor_set_ifttt_triggle_name_2": "2 minutes sans personnel",
    "sensor_set_ifttt_triggle_name_3": "Jouer la sonnerie spécifiée",
    "sensor_set_ifttt_triggle_name_4": "Veilleuse marche / arrêt",
    "sensor_set_ifttt_triggle_name_5": "Veilleuse à induction",
    "sensor_set_ifttt_triggle_name_6": "Éteindre la veilleuse",
    "sensor_set_ifttt_triggle_name_7": "Veilleuse",
    "sensor_set_ifttt_triggle_name_8": "Alerte marche / arrêt",
    "common_scene_execute_partiallysucceed": "Une partie des tâches est terminée avec succès",
    "common_short_date_mon": "Lun",
    "common_short_date_tues": "Mar",
    "common_short_date_wed": "Mer",
    "common_short_date_thur": "Jeu",
    "common_short_date_fri": "Ven",
    "common_short_date_sat": "Sam",
    "common_short_date_sun": "Dim",
    "common_repeat_timer_title": "Répéter l'option",
    "common_repeat_self_timer_title": "Répétition personnalisée",
    "common_on": "Marche",
    "common_off": "Arrêt",
    "common_timer": "Minuterie",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Conto alla rovescia",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Aujourd'hui",
    "common_plug_month_elec": "Mois",
    "common_plug_current_power": "Actuel",
    "common_setting_ifttt_auto_detail": "Automatisation",
    "mi_comboHub_mainPage_guard_base": "De base",
    "mi_comboHub_mainPage_guard_home": "À domicile",
    "mi_comboHub_mainPage_guard_away": "Domicile distante",
    "mi_comboHub_mainPage_guard_sleep": "Veille",
    "common_comboHub_triggle_device_alert": "Alerte",
    "common_comboHub_triggle_device_opened_guard": "(A été activé pour la protection {XX}.)",
    "common_comboHub_triggle_device_only_open_basic": "(Peut uniquement être utilisé pour la protection de base.)",
    "common_comboHub_triggle_device_opened_basic": "(A été activé pour la protection de base.)",
    "common_setting_homekit_device_desc": "Le dispositif peut être configuré et utilisé dans l'application Apple Home.",
    "common_ifttt_triggleName_switch": "L'alerte est déclenchée lorsque le commutateur change de statut.",
    "common_ifttt_triggleName_vibration": "L'alerte est déclenchée lorsque le statut change.",
    "common_ifttt_triggleName_cube": "L'alerte est déclenchée lorsque le dispositif est déplacé après avoir été inactif pendant 1 minute.",
    "common_ifttt_triggleName_magnet": "L'alerte est déclenchée lorsque change le statut du capteur de la porte ou de la fenêtre.",
    "common_ifttt_triggleName_motion": "Quelqu'un s'est déplacé et a déclenché l'alerte.",
    "common_timer_light_timer_light_period": "Période",
    "common_timer_light_timer_on": "Chronométré le",
    "common_timer_light_timer_off": "Chronométré",
    "common_timer_light_timer_time_after": "Heure de début après l'heure de fin",
    "common_lumi_sensor_setting_battery": "Batterie",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Niedrige Batterie, bitte wechseln Sie die Batterie",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Dispositif de déclenchement d'alarme",
    "mi_comboHub_triggleDevices_deleting": "Suppression en cours…",
    "mi_comboHub_triggleSubDevices_setting": "Configuration en cours…",
    "mi_comboHub_triggle_device_header_title_1": "Les appareils ne pouvant être activés",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "La protection de base est un mode de protection de 24 heures qui ne peut être désactivé. Les appareils appariés avec la station, qui doivent surveiller l'environnement en permanence, tels que les détecteurs de fumée, les détecteurs de gaz ou les capteurs de fuite d'eau, seront activés par défaut comme dispositifs de déclenchement de la protection de base.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "A été activé comme dispositif de déclenchement pour une protection domicile, protection domicile distante ou protège-sommeil. Il ne peut être utilisé comme protection de base.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Après avoir configuré le dispositif de déclenchement, vous pouvez activer la protection domicile.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "A été activé comme dispositif de déclenchement pour la protection de base. Il ne peut pas être utilisé pour une protection domicile.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Après avoir configuré le dispositif de déclenchement, vous pouvez activer la protection domicile distante.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "A été activé comme dispositif de déclenchement pour la protection de base. Il ne peut pas être utilisé pour une protection domicile distante.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Après avoir configuré le dispositif de déclenchement, vous pouvez activer le protège-sommeil.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "A été activé comme dispositif de déclenchement pour la surveillance de base. Il ne peut pas être utilisé pour une surveillance en veille.",
    "mi_comboHub_triggle_device_empty_tip": "Il n’y a pas de dispositifs appariés avec ce centre de commande qui puissent être utilisés pour déclencher une alerte, telle qu’un détecteur de mouvement, un détecteur de fenêtre et de porte ou un commutateur sans fil.",
    "mi_comboHub_triggle_device_go_to_bug": "Achat",
    "mi_commonHub_setting_nightlight_tomorrow": "Jour suivant",
    "mi_commonHub_setting_nightlight_allday": "Toute la journée",
    "mi_ifttt_launch": "Au cas où une quelconque condition est satisfaite",
    "mi_ifttt_action": "Alors",
    "mi_commonHub_nightlight_open": "Allumer la veilleuse",
    "mi_commonHub_nightlight_motion_limit": "Ne peut sélectionner que 9 capteurs du corps humain",
    "mi_commonHub_nightlight_delay_close_min": "Éteindre la veilleuse dans {value} min",
    "mi_commonHub_go_back_title": "Quitter",
    "mi_commonHub_go_back_content": "Renoncer aux changements et quitter maintenant ?",
    "mi_commonHub_setting_nightlight": "Éclairage nocturne inductif",
    "mi_commonHub_nightlight_commont": "Lorsque {value} se trouve dans un environnement sombre",
    "mi_commonHub_nightlight_timer": "Période d'induction",
    "mi_commonHub_linkage_alarm_number_ten": "Impossible de sélectionner jusqu'à 10 alarmes de passerelle",
    "common_offline": "hors ligne",
    "mi_commonHub_linkage_alarm_footer_text": "Lorsque la fonction de liaison du centre de commande est activée et qu’un centre de commande est déclenché, la sonnerie de l’alerte et le clignotement lumineux de tous les centres de commande seront déclenchés.",
    "mi_commonHub_linkage_alarm": "Alerte de couplage",
    "mi_commonHub_linkage_alarm_dis": "Alerte de couplage annulée"
  };
  exports.default = fr;
},10028,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var id = {
    "langugeName": "印度尼西亚语",
    "common_setting_title": "Pengaturan",
    "common_setting_feature_setting": "Pengaturan fungsi",
    "common_setting_general_setting": "Pengaturan umum",
    "common_setting_device_name": "Nama perangkat",
    "common_setting_multiswitch": "Pengaturan tombol",
    "common_setting_device_timeZone": "Pengaturan daerah",
    "common_setting_location_management": "Manajemen Lokasi",
    "common_setting_share_device": "Perangkat sedang berbagi",
    "common_setting_ifttt_auto": "Otomatisasi",
    "common_setting_btGateway": "Gateway Bluetooth Mesh",
    "common_setting_btGateway_status_read_fail": "Tidak dapat mengambil status gateway Bluetooth Mesh",
    "cocommon_setting_btGateway_connected": "Perangkat Bluetooth terhubung",
    "common_setting_firmware_upgrate": "Periksa pembaruan firmware",
    "common_setting_more_setting": "Pengaturan tambahan",
    "common_setting_add_to_desktop": "Tambahkan ke layar beranda",
    "common_setting_privacy_agreement": "Perjanjian Pengguna & Kebijakan Privasi",
    "common_setting_delete_device": "Hapus perangkat",
    "common_setting_help_page": "Bantuan",
    "common_setting_more_seting_security": "Pengaturan keamanan",
    "common_setting_more_seting_faq": "Pertanyaan umum (FAQ)",
    "common_setting_more_seting_isssues": "Umpan Balik",
    "common_setting_user_agreement": "Perjanjian Layanan dan Lisensi Perangkat Lunak",
    "common_setting_privacy_policy": "Kebijakan Privasi",
    "common_setting_feature_plug_in": "Versi Plug-in",
    "common_setting_homekit_device_add": "Pasangkan dengan HomeKit",
    "common_setting_homekit_device_bound": "Bind",
    "common_setting_homekit_device_noBind": "Tidak terikat",
    "common_log_title": "Catatan",
    "common_log_today": "Hari ini",
    "common_log_yesterday": "Kemarin",
    "common_log_no_logs": "Tidak ada catatan",
    "common_log_loading": "Memuat",
    "common_log_loading_with_dot": "Memuat...",
    "common_log_logDataHasloaded": "Catatan Log telah dimuat sepenuhnya",
    "common_log_all_data_has_been_loaded": "Semua data telah dimuat",
    "common_log_no_data": "Tidak ada data",
    "common_cancel": "Batalkan",
    "common_ok": "Oke",
    "common_manufacturer": "Diproduksi oleh",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Tidak bisa tersambung ke jaringan",
    "common_tips_battery_low": "Baterai lemah",
    "common_tips_iknow": "Oke",
    "common_button_done": "Selesai",
    "common_button_delete": "Hapus",
    "common_button_retry": "Coba lagi",
    "common_button_save": "Simpan",
    "common_tips_delete_succeed": "Berhasil menghapus",
    "common_tips_delete_failed": "Gagal menghapus",
    "common_tips_loading_failed": "Tidak dapat memuat",
    "common_tips_request_failed": "Permintaan gagal. Periksa jaringan Anda",
    "common_button_prev": "Kembali",
    "common_button_next": "Selanjutnya",
    "common_button_changename": "Ubah nama",
    "common_date_workday": "Senin sampai Jumat",
    "common_date_weekend": "Akhir pekan",
    "common_date_selfdefine": "Kustom",
    "common_date_mon": "Senin",
    "common_date_tues": "Selasa",
    "common_date_wed": "Rabu",
    "common_date_thur": "Kamis",
    "common_date_fri": "Jumat",
    "common_date_sat": "Sabtu",
    "common_date_sun": "Minggu",
    "common_date_day": " Hari",
    "common_date_week": " Minggu",
    "common_date_month": " Bulan",
    "common_date_hour": " j",
    "common_date_minute": " mnt",
    "common_date_second": " dtk",
    "common_tips_discard_operation": "Tutup operasi saat ini?",
    "common_tips_setting": "Setting, please wait…",
    "common_tips_setting_failed": "Failed to set",
    "common_tips_loading_failed_retry": "Tidak bisa memuat, ketuk untuk mencoba lagi",
    "common_tips_shared_no_promision": "The shared device has no permission",
    "common_electricity": "Statistik kelistrikan",
    "common_power_history": "Catatan riwayat daya",
    "common_hardware_update_updating": "Memperbarui firmware, harap tunggu…",
    "common_hardware_update_default": "Tersedia versi firmware yang baru, ({version}), perbarui sekarang?",
    "common_hardware_update_isforce": "Versi firmware perangkat Anda saat ini sudah lama, harap perbarui ke versi baru, ({version}).",
    "common_hardware_update": "Perbarui sekarang",
    "common_out": "Keluar",
    "common_hardware_checkupdate": "Lihat pembaruan",
    "common_operation_fail": "Operasi gagal",
    "common_repeat_everyday": "Setiap hari",
    "common_repeat_once": "Satu kali",
    "common_repeat_tomorrow": "Besok",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "Perangkat akan dihapus dari daftar.",
    "common_setting_device_delete_confirm": "Hapus perangkat?",
    "common_voice_mute": "Sunyi",
    "common_voice_high": "Tinggi",
    "common_voice_middle": "Sedang",
    "common_voice_low": "Rendah",
    "sub_device_list_title": "Daftar perangkat turunan",
    "sub_device_list_header_tips": "Perangkat turunan berikut sudah dipasangkan dengan hub ini.",
    "sub_device_list_empty_tips": "Tidak ada perangkat turunan terpasang dengan hub kontrol ini.",
    "sub_device_list_name_cant_empty": "Nama perangkat tidak boleh kosong",
    "sub_device_list_name_cant_support_emoji": "Tidak mendukung ekspresi emoji",
    "sub_device_list_name_cant_support_special_char": "Nama tidak boleh mengandung simbol khusus",
    "sub_device_list_name_cant_more_forty": "Nama tidak boleh melebihi 40 karakter",
    "sub_device_list_name_cant_same": "Nama perangkat tidak boleh sama",
    "sub_device_list_device_offline": "Perangkat offline",
    "sub_device_list_selected": "{XX} item dipilih",
    "sub_device_list_delete_multi_device": "Apakah Anda yakin akan menghapus perangkat {XX} yang dipilih?",
    "ifttt_triggle_single_press": "Klik",
    "ifttt_triggle_double_press": "Tekan dan tahan",
    "ifttt_triggle_long_press": "Klik dua kali",
    "ifttt_triggle_shake": "Guncangkan",
    "ifttt_triggle_someone_moved": "Seseorang bergerak",
    "ifttt_triggle_windoor_open": "Jendela/pintu terbuka",
    "ifttt_triggle_moved_afteronemin": "Pindah setelah satu menit tidak aktif",
    "ifttt_triggle_detect_vibration": "Terdeteksi getaran",
    "ifttt_triggle_detect_fall": "Terdeteksi jatuh",
    "ifttt_triggle_detect_tilting": "Merasa miring",
    "ifttt_triggle_fire_alert": "Alarm kebakaran",
    "ifttt_triggle_gas_leakage_alert": "Peringatan kebocoran gas",
    "ifttt_triggle_flood_alert": "Peringatan makanan",
    "guard_type_basic": "Penjaga dasar",
    "guard_type_home": "Penjaga di rumah",
    "guard_type_away": "Penjaga jauh-dari-rumah",
    "guard_type_sleep": "Penjaga tidur",
    "ifttt_push_title_triggle_alert_1": "Di {XX}, {YY} memicu alarm",
    "ifttt_push_title_triggle_alert_2": "Dalam {XX}, {YY} merasakan seseorang bergerak untuk memicu alarm",
    "ifttt_push_title_triggle_alert_3": "Di {XX}, {YY} menyalakan alarm pemicu",
    "ifttt_push_title_triggle_alert_4": "Dalam {XX}, {YY} indra dipindahkan",
    "ifttt_push_title_triggle_alert_5": "Dalam {XX}, {YY} merasakan alarm banjir",
    "ifttt_push_title_triggle_alert_6": "Pada {XX}, {YY} mendeteksi konsentrasi gas yang melebihi standar",
    "ifttt_push_title_triggle_alert_7": "Dalam {XX}, {YY} mendeteksi asap",
    "common_ifttt_scene_execute_result_fail": "Eksekusi gagal",
    "common_ifttt_scene_execute_result_unknow_error": "Kesalahan tidak normal",
    "common_ifttt_scene_execute_result_time_out": "Batas waktu implementasi",
    "common_ifttt_scene_execute_result_camera_sleep": "Kamera sedang tidur",
    "common_ifttt_device_offline": "(offline)",
    "timersetting_on": "Waktu mulai",
    "timersetting_off": "Waktu selesai",
    "timersetting_empty": "Tidak diatur",
    "timersetting_perio": "Aktif selama",
    "common_start": "Mulai",
    "common_end": "Akhir",
    "common_color": "Warna",
    "common_open": "Aktifkan",
    "common_scene_name_lm_scene_1_1": "Saat siaga, seseorang melewati alarm",
    "common_scene_name_lm_scene_1_2": "Alarm pintu dan jendela terbuka saat memperingatkan",
    "common_scene_name_lm_scene_1_3": "Ketika alarm menyala, saklar nirkabel menekan alarm.",
    "common_scene_name_lm_scene_1_4": "Saat memberi peringatan, Rubik's Cube dipicu untuk sementara waktu.",
    "common_scene_name_lm_scene_1_5": "Ketika peringatan, stiker statis dan statis dipicu selama dua menit dan alarm dipicu.",
    "common_scene_name_lm_scene_2_1": "Seseorang lewat, lampu malam menyala",
    "common_scene_name_lm_scene_3_1": "Sakelar nirkabel menekan bel pintu",
    "common_scene_name_lm_scene_3_2": "Bel pintu berdering saat pintu/jendela dibuka",
    "common_scene_name_lm_scene_3_3": "Seseorang melewati bel dering",
    "common_scene_name_lm_scene_4_1": "Matikan jam alarm saat seseorang lewat",
    "common_scene_name_lm_scene_4_2": "Matikan jam alarm saat pintu/jendela dibuka",
    "common_scene_name_lm_scene_4_3": "Sakelar nirkabel menekan alarm",
    "common_scene_name_lm_scene_5_1": "Deteksi asap akan mematikan peringatan hub.",
    "common_scene_name_lm_scene_5_2": "Deteksi gas akan mematikan peringatan hub.",
    "common_scene_name_lm_scene_5_3": "Deteksi kebocoran air akan mematikan peringatan hub.",
    "common_close": "Nonaktifkan",
    "sensor_set_ifttt_config_success": "Konfigurasi yang berhasil",
    "common_automation_configuring": "Mengkonfigurasi otomatisasi paket, harap tunggu ...",
    "sensor_set_ifttt_config_fail": "Konfigurasi gagal",
    "sensor_set_ifttt_config_fail_tip": "1. Anda harus menghubungkan gateway ke wifi \n2. Anda harus menghubungkan ponsel Anda ke wifi \n3. Pastikan wifi itu normal.",
    "mi_linuxHub_guard_guard_timer": "Waktu pelindung",
    "mi_linuxHub_timer_light_name": "Timer lentera",
    "mi_linuxHub_lazy_clock_name": "Jam alarm",
    "sensor_set_ifttt_scene_name_1": "Pengingat pembukaan pintu",
    "sensor_set_ifttt_scene_name_2": "Klik sakelar nirkabel untuk menyalakan / mematikan lampu malam",
    "sensor_set_ifttt_scene_name_3": "Klik dua kali pada sakelar sakelar switch nirkabel",
    "sensor_set_ifttt_scene_name_4": "Seseorang lewat, lampu malam menyala",
    "sensor_set_ifttt_scene_name_5": "2 menit mati malam tanpa awak",
    "sensor_set_ifttt_scene_name_6": "Seseorang yang menyalakan lampu malam",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Tidak ditutup setelah lebih dari 1 menit setelah pembukaan",
    "sensor_set_ifttt_triggle_name_2": "2 menit tanpa awak",
    "sensor_set_ifttt_triggle_name_3": "Mainkan nada dering yang ditentukan",
    "sensor_set_ifttt_triggle_name_4": "Nyalakan / matikan lampu malam",
    "sensor_set_ifttt_triggle_name_5": "Lampu malam induksi",
    "sensor_set_ifttt_triggle_name_6": "Matikan lampu malam",
    "sensor_set_ifttt_triggle_name_7": "Cahaya malam",
    "sensor_set_ifttt_triggle_name_8": "Peringatan hidup / mati",
    "common_scene_execute_partiallysucceed": "Bagian tugas berhasil diselesaikan",
    "common_short_date_mon": "周一",
    "common_short_date_tues": "周二",
    "common_short_date_wed": "周三",
    "common_short_date_thur": "周四",
    "common_short_date_fri": "周五",
    "common_short_date_sat": "周六",
    "common_short_date_sun": "周日",
    "common_repeat_timer_title": "ทำซ้ำตัวเลือก",
    "common_repeat_self_timer_title": "ทำซ้ำที่กำหนดเอง",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Schedules",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-การนับถอยหลัง",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " Celsius",
    "common_plug_today_elec": "Hari ini",
    "common_plug_month_elec": "Bulan",
    "common_plug_current_power": "Saat ini",
    "common_setting_ifttt_auto_detail": "Otomatisasi",
    "mi_comboHub_mainPage_guard_base": "Dasar",
    "mi_comboHub_mainPage_guard_home": "Di rumah",
    "mi_comboHub_mainPage_guard_away": "Jauh-dari-rumah",
    "mi_comboHub_mainPage_guard_sleep": "Tidur",
    "common_comboHub_triggle_device_alert": "Peringatan",
    "common_comboHub_triggle_device_opened_guard": "(Telah diaktifkan untuk penjaga {XX}.)",
    "common_comboHub_triggle_device_only_open_basic": "(Hanya dapat digunakan untuk penjaga dasar.)",
    "common_comboHub_triggle_device_opened_basic": "(Telah diaktifkan untuk penjaga dasar.)",
    "common_setting_homekit_device_desc": "Perangkat dapat dikonfigurasikan dan digunakan di aplikasi Apple Home.",
    "common_ifttt_triggleName_switch": "Peringatan dipicu saat status tombol berubah.",
    "common_ifttt_triggleName_vibration": "Peringatan dipicu saat status berubah.",
    "common_ifttt_triggleName_cube": "Peringatan terpicu saat perangkat digerakkan setelah tidak aktif selama 1 menit.",
    "common_ifttt_triggleName_magnet": "Peringatan dipicu saat status sensor pintu atau jendela berubah.",
    "common_ifttt_triggleName_motion": "Seseorang bergerak dan memicu peringatan.",
    "common_timer_light_timer_light_period": "Periode waktu",
    "common_timer_light_timer_on": "Tepat waktu",
    "common_timer_light_timer_off": "Batas waktu",
    "common_timer_light_timer_time_after": "Mulai waktu setelah waktu akhir",
    "common_lumi_sensor_setting_battery": "Baterai",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Baterai rendah, silahkan ganti baterai",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Perangkat pemicu alarm",
    "mi_comboHub_triggleDevices_deleting": "Menghapus...",
    "mi_comboHub_triggleSubDevices_setting": "Mengonfigurasi…",
    "mi_comboHub_triggle_device_header_title_1": "Perangkat yang tidak dapat diaktifkan",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "Penjaga dasar adalah mode penjaga 24-jam yang tidak dapat dinonaktifkan. Perangkat dipasangkan dengan hub, yang merupakan syarat untuk memantau lingkungan terus-menerus, seperti detektor asap, detektor gas, atau sensor kebocoran air akan diaktifkan sebagai perangkat pemicu penjaga dasar secara default.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Jika diaktifkan sebagai perangkat pemicu untuk penjaga di-rumah, penjaga jauh-dari-rumah, atau penjaga tidur, ini tidak dapat digunakan sebagai penjaga dasar.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Setelah mengatur perangkat pemicu, Anda dapat mengaktifkan penjaga rumah.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Jika diaktifkan sebagai perangkat pemicu untuk penjaga dasar, ini tidak dapat digunakan untuk penjaga di-rumah.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Setelah mengatur perangkat pemicu, Anda dapat mengaktifkan penjaga jauh-dari-rumah.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Jika diaktifkan sebagai perangkat pemicu untuk penjaga dasar, ini tidak dapat digunakan untuk penjaga jauh-dari-rumah.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Setelah mengatur perangkat pemicu, Anda dapat mengaktifkan penjaga tidur.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Jika diaktifkan sebagai perangkat pemicu untuk penjaga dasar, ini tidak dapat digunakan sebagai penjaga tidur.",
    "mi_comboHub_triggle_device_empty_tip": "Tidak ada perangkat terpasang dengan hub kontrol ini yang dapat digunakan untuk memicu peringatan, seperti sensor gerak, sensor jendela dan pintu, atau tombol nirkabel.",
    "mi_comboHub_triggle_device_go_to_bug": "Beli",
    "mi_commonHub_setting_nightlight_tomorrow": "Hari berikutnya",
    "mi_commonHub_setting_nightlight_allday": "Sepanjang hari",
    "mi_ifttt_launch": "Jika kondisi apa pun terpenuhi",
    "mi_ifttt_action": "Kemudian",
    "mi_commonHub_nightlight_open": "Nyalakan lampu malam",
    "mi_commonHub_nightlight_motion_limit": "Hanya dapat memilih hingga 9 sensor tubuh manusia",
    "mi_commonHub_nightlight_delay_close_min": "Matikan lampu malam dalam {value} menit",
    "mi_commonHub_go_back_title": "Keluar",
    "mi_commonHub_go_back_content": "Buang perubahan, lalu keluar sekarang?",
    "mi_commonHub_setting_nightlight": "Lampu malam otomatis",
    "mi_commonHub_nightlight_commont": "Saat {value} adalah lingkungan gelap",
    "mi_commonHub_nightlight_timer": "Periode induksi",
    "mi_commonHub_linkage_alarm_number_ten": "Hanya dapat memilih hingga 10 alarm gateway",
    "common_offline": "offline",
    "mi_commonHub_linkage_alarm_footer_text": "Saat fungsi tautan peringatan hub kontrol diaktifkan, dan hub kontrol dipicu, nada dering peringatan dan lampu berkedip dari semua hub kontrol akan dipicu.",
    "mi_commonHub_linkage_alarm": "Alarm terkait",
    "mi_commonHub_linkage_alarm_dis": "Alarm terkait dibatalkan"
  };
  exports.default = id;
},10031,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var it = {
    "langugeName": "意大利语",
    "common_setting_title": "Impostazioni",
    "common_setting_feature_setting": "Impostazioni della funzione",
    "common_setting_general_setting": "Impostazioni generali",
    "common_setting_device_name": "Nome dispositivo",
    "common_setting_multiswitch": "Impostazioni pulsante",
    "common_setting_device_timeZone": "Impostazioni regionali",
    "common_setting_location_management": "Gestione delle sedi",
    "common_setting_share_device": "Condivisione dispositivo",
    "common_setting_ifttt_auto": "Automazione",
    "common_setting_btGateway": "Gateway Mesh Bluetooth",
    "common_setting_btGateway_status_read_fail": "Impossibile recuperare lo stato del gateway Mesh Bluetooth ",
    "cocommon_setting_btGateway_connected": "Dispositivi Bluetooth collegati",
    "common_setting_firmware_upgrate": "Controlla se sono disponibili aggiornamenti del firmware",
    "common_setting_more_setting": "Impostazioni aggiuntive",
    "common_setting_add_to_desktop": "Aggiungi a schermata iniziale",
    "common_setting_privacy_agreement": "Contratto di licenza e Informativa sulla privacy",
    "common_setting_delete_device": "Elimina dispositivo",
    "common_setting_help_page": "Guida",
    "common_setting_more_seting_security": "Impostazioni di sicurezza",
    "common_setting_more_seting_faq": "Domande frequenti",
    "common_setting_more_seting_isssues": "Feedback",
    "common_setting_user_agreement": "Licenza Software e Accordo sui Servizi",
    "common_setting_privacy_policy": "Informativa sulla privacy",
    "common_setting_feature_plug_in": "Versione plug-in",
    "common_setting_homekit_device_add": "Abbina a HomeKit",
    "common_setting_homekit_device_bound": "legato",
    "common_setting_homekit_device_noBind": "Unbound",
    "common_log_title": "Registri",
    "common_log_today": "Oggi",
    "common_log_yesterday": "Ieri",
    "common_log_no_logs": "Nessun registro",
    "common_log_loading": "Caricamento in corso",
    "common_log_loading_with_dot": "Caricamento in corso ...",
    "common_log_logDataHasloaded": "I registri sono stati completamente caricati",
    "common_log_all_data_has_been_loaded": "Tutti i dati sono stati caricati",
    "common_log_no_data": "Nessun dato",
    "common_cancel": "Cancella",
    "common_ok": "OK",
    "common_manufacturer": "Fabricado por",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Impossibile connettersi alla rete",
    "common_tips_battery_low": "Batteria scarica",
    "common_tips_iknow": "OK",
    "common_button_done": "Operazione completata",
    "common_button_delete": "Elimina",
    "common_button_retry": "Riprova",
    "common_button_save": "Salva",
    "common_tips_delete_succeed": "Cancellato",
    "common_tips_delete_failed": "Eliminazione non riuscita",
    "common_tips_loading_failed": "Impossibile caricare",
    "common_tips_request_failed": "Richiesta non riuscita. Controllare la connessione di rete",
    "common_button_prev": "Indietro",
    "common_button_next": "Successiva",
    "common_button_changename": "Rinomina",
    "common_date_workday": "Lun/ven",
    "common_date_weekend": "Fine settimana",
    "common_date_selfdefine": "Personalizza",
    "common_date_mon": "Lunedì",
    "common_date_tues": "Martedì",
    "common_date_wed": "Mercoledì",
    "common_date_thur": "Giovedì",
    "common_date_fri": "Venerdì",
    "common_date_sat": "Sabato",
    "common_date_sun": "Domenica",
    "common_date_day": " Giorno",
    "common_date_week": " Settimana",
    "common_date_month": " Mese",
    "common_date_hour": " o",
    "common_date_minute": " min",
    "common_date_second": " s",
    "common_tips_discard_operation": "Interrompere l’operazione attuale?",
    "common_tips_setting": "Impostazione in corso, attendere…",
    "common_tips_setting_failed": "Impostazione non riuscita",
    "common_tips_loading_failed_retry": "Impossibile effettuare il caricamento, tocca per riprovare",
    "common_tips_shared_no_promision": "Il dispositivo condiviso non dispone di alcuna autorizzazione",
    "common_electricity": "Statistiche sull'elettricità",
    "common_power_history": "Record cronologia alimentazione",
    "common_hardware_update_updating": "Aggiornamento firmware, attendere ...",
    "common_hardware_update_default": "È disponibile una nuova versione del firmware ({version}), aggiornare ora?",
    "common_hardware_update_isforce": "L'attuale versione del firmware del dispositivo è obsoleta, si prega di aggiornare all'ultima versione ({version}).",
    "common_hardware_update": "Aggiorna adesso",
    "common_out": "Disconnetti",
    "common_hardware_checkupdate": "Visualizzare aggiornamento",
    "common_operation_fail": "Operazione non riuscita. ",
    "common_repeat_everyday": "Tutti i giorni",
    "common_repeat_once": "Una volta",
    "common_repeat_tomorrow": "Domani",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "Il dispositivo verrà rimosso dall'elenco.",
    "common_setting_device_delete_confirm": "Eliminare il dispositivo?",
    "common_voice_mute": "Silenzioso",
    "common_voice_high": "Alto",
    "common_voice_middle": "Medio",
    "common_voice_low": "Quasi scarica",
    "sub_device_list_title": "Lista dispositivo di protezione per bambini",
    "sub_device_list_header_tips": "I seguenti dispositivi di protezione bambini sono già associati a questo hub.",
    "sub_device_list_empty_tips": "Non ci sono dispositivi di protezione bambini associati a questo hub di controllo.",
    "sub_device_list_name_cant_empty": "Il nome del dispositivo non può essere vuoto",
    "sub_device_list_name_cant_support_emoji": "Non supporta le espressioni emoji",
    "sub_device_list_name_cant_support_special_char": "Il nome non può contenere simboli speciali",
    "sub_device_list_name_cant_more_forty": "Il nome non può superare i 40 caratteri",
    "sub_device_list_name_cant_same": "Il nome del dispositivo non può essere lo stesso",
    "sub_device_list_device_offline": "Dispositivo offline",
    "sub_device_list_selected": "{XX} elemento selezionato",
    "sub_device_list_delete_multi_device": "Vuoi eliminare i dispositivi {XX} selezionati?",
    "ifttt_triggle_single_press": "Clic",
    "ifttt_triggle_double_press": "Tenere premuto",
    "ifttt_triggle_long_press": "Premere due volte",
    "ifttt_triggle_shake": "Agita",
    "ifttt_triggle_someone_moved": "Movimento rilevato",
    "ifttt_triggle_windoor_open": "La finestra/porta è aperta",
    "ifttt_triggle_moved_afteronemin": "Spostato dopo un minuto di inattività",
    "ifttt_triggle_detect_vibration": "Vibrazione rilevata",
    "ifttt_triggle_detect_fall": "Caduta rilevata",
    "ifttt_triggle_detect_tilting": "Senso di inclinazione",
    "ifttt_triggle_fire_alert": "Allarme antincendio",
    "ifttt_triggle_gas_leakage_alert": "Allarme del perditadi gas",
    "ifttt_triggle_flood_alert": "Allerta alluvione",
    "guard_type_basic": "Protezione di base",
    "guard_type_home": "Protezione domestica",
    "guard_type_away": "Protezione fuori casa",
    "guard_type_sleep": "Protezione del sonno",
    "ifttt_push_title_triggle_alert_1": "In {XX}, {YY} attiva un allarme",
    "ifttt_push_title_triggle_alert_2": "In {XX}, {YY} rileva qualcuno che si muove per attivare un allarme",
    "ifttt_push_title_triggle_alert_3": "In {XX}, {YY} attiva l'allarme trigger",
    "ifttt_push_title_triggle_alert_4": "In {XX}, {YY} rileva lo spostamento",
    "ifttt_push_title_triggle_alert_5": "In {XX}, {YY} rileva l'allarme di allagamento",
    "ifttt_push_title_triggle_alert_6": "In {XX}, {YY} ha rilevato una concentrazione di gas superiore allo standard",
    "ifttt_push_title_triggle_alert_7": "In {XX}, {YY} ha rilevato fumo",
    "common_ifttt_scene_execute_result_fail": "Esecuzione non riuscita",
    "common_ifttt_scene_execute_result_unknow_error": "Errore anomalo",
    "common_ifttt_scene_execute_result_time_out": "Timeout di implementazione",
    "common_ifttt_scene_execute_result_camera_sleep": "La fotocamera sta dormendo",
    "common_ifttt_device_offline": "(Offline)",
    "timersetting_on": "Ora di inizio",
    "timersetting_off": "Ora di fine",
    "timersetting_empty": "Non impostato",
    "timersetting_perio": "Attivo per",
    "common_start": "Avvia",
    "common_end": "fine",
    "common_color": "Colore",
    "common_open": "Abilita",
    "common_scene_name_lm_scene_1_1": "Quando in allerta, qualcuno ha passato l'allarme",
    "common_scene_name_lm_scene_1_2": "Allarme di apertura di porte e finestre durante l'allerta",
    "common_scene_name_lm_scene_1_3": "Quando la sveglia è attiva, l'interruttore wireless preme la sveglia.",
    "common_scene_name_lm_scene_1_4": "Durante gli avvisi, il cubo di Rubik viene attivato per un po '.",
    "common_scene_name_lm_scene_1_5": "In caso di avviso, gli adesivi statici e statici vengono attivati per due minuti e viene attivato l'allarme.",
    "common_scene_name_lm_scene_2_1": "Qualcuno è passato, la luce notturna è stata illuminata",
    "common_scene_name_lm_scene_3_1": "L'interruttore wireless preme il campanello",
    "common_scene_name_lm_scene_3_2": "Il campanello suona quando una porta/finestra è aperta",
    "common_scene_name_lm_scene_3_3": "Qualcuno ha suonato il campanello",
    "common_scene_name_lm_scene_4_1": "Spegni sveglia quando sta passando qualcuno",
    "common_scene_name_lm_scene_4_2": "Spegni sveglia quando una porta/finestra è aperta",
    "common_scene_name_lm_scene_4_3": "L'interruttore wireless preme l'allarme",
    "common_scene_name_lm_scene_5_1": "Il rilevamento del fumo farà scattare l'allarme del mozzo.",
    "common_scene_name_lm_scene_5_2": "Il rilevamento del gas farà scattare l'allarme del mozzo.",
    "common_scene_name_lm_scene_5_3": "Il rilevamento delle perdite d'acqua farà scattare l'allarme del mozzo.",
    "common_close": "Disabilitare",
    "sensor_set_ifttt_config_success": "Configurazione riuscita",
    "common_automation_configuring": "Configurazione dell'automazione del pacchetto, attendere ...",
    "sensor_set_ifttt_config_fail": "Configurazione non riuscita",
    "sensor_set_ifttt_config_fail_tip": "1. Devi connettere il gateway al wifi \n2. Devi connettere il tuo telefono al wifi \n3. Assicurati che il wifi sia normale.",
    "mi_linuxHub_guard_guard_timer": "Tempistica del guardiano",
    "mi_linuxHub_timer_light_name": "Timer lanterna",
    "mi_linuxHub_lazy_clock_name": "Sveglia",
    "sensor_set_ifttt_scene_name_1": "Promemoria apertura porta",
    "sensor_set_ifttt_scene_name_2": "Fare clic sull'interruttore wireless per accendere / spegnere la luce notturna",
    "sensor_set_ifttt_scene_name_3": "Fare doppio clic sull'avviso dell'interruttore wireless",
    "sensor_set_ifttt_scene_name_4": "Qualcuno è passato, la luce notturna è stata illuminata",
    "sensor_set_ifttt_scene_name_5": "2 minuti di luce notturna senza pilota spenta",
    "sensor_set_ifttt_scene_name_6": "Qualcuno che accende la luce notturna",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Non chiuso dopo più di 1 minuto dall'apertura",
    "sensor_set_ifttt_triggle_name_2": "2 minuti senza pilota",
    "sensor_set_ifttt_triggle_name_3": "Riproduci la suoneria specificata",
    "sensor_set_ifttt_triggle_name_4": "Luce notturna on / off",
    "sensor_set_ifttt_triggle_name_5": "Luce notturna a induzione",
    "sensor_set_ifttt_triggle_name_6": "Spegni la luce notturna",
    "sensor_set_ifttt_triggle_name_7": "Luce notturna",
    "sensor_set_ifttt_triggle_name_8": "Avviso on / off",
    "common_scene_execute_partiallysucceed": "Una parte delle attività è stata completata",
    "common_short_date_mon": "Lun",
    "common_short_date_tues": "Mar",
    "common_short_date_wed": "Mer",
    "common_short_date_thur": "Gio",
    "common_short_date_fri": "Ven",
    "common_short_date_sat": "Sab",
    "common_short_date_sun": "Dom",
    "common_repeat_timer_title": "Ripeti opzione",
    "common_repeat_self_timer_title": "Ripetizione personalizzata",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Timer",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Retardateur",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " Celsius",
    "common_plug_today_elec": "Oggi",
    "common_plug_month_elec": "Mese",
    "common_plug_current_power": "In uso",
    "common_setting_ifttt_auto_detail": "Automazione",
    "mi_comboHub_mainPage_guard_base": "Di base",
    "mi_comboHub_mainPage_guard_home": "Domestica",
    "mi_comboHub_mainPage_guard_away": "Fuori casa",
    "mi_comboHub_mainPage_guard_sleep": "Sonno",
    "common_comboHub_triggle_device_alert": "Avviso",
    "common_comboHub_triggle_device_opened_guard": "(È stato abilitato per la protezione {XX}.)",
    "common_comboHub_triggle_device_only_open_basic": "(Può essere utilizzato solo per la protezione di base.)",
    "common_comboHub_triggle_device_opened_basic": "(È stato abilitato per la protezione di base.)",
    "common_setting_homekit_device_desc": "Il dispositivo può essere configurato e utilizzato nell'app Apple Home.",
    "common_ifttt_triggleName_switch": "L'allarme viene attivato quando lo stato dell'interruttore cambia.",
    "common_ifttt_triggleName_vibration": "L'allarme viene attivato quando lo stato cambia.",
    "common_ifttt_triggleName_cube": "L'allarme viene attivato quando viene spostato dopo essere rimasto inattivo per 1 minuto.",
    "common_ifttt_triggleName_magnet": "L'allarme viene attivato quando lo stato del sensore della porta o della finestra cambia.",
    "common_ifttt_triggleName_motion": "Qualcuno ha spostato e ha attivato l'avviso.",
    "common_timer_light_timer_light_period": "Periodo di tempo",
    "common_timer_light_timer_on": "A tempo",
    "common_timer_light_timer_off": "Scaduto",
    "common_timer_light_timer_time_after": "Ora di inizio dopo l'ora di fine",
    "common_lumi_sensor_setting_battery": "Batteria",
    "common_lumi_sensor_setting_battery_normal": "Normale",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Batería baja, sustitúyala",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Dispositivo di attivazione dell'allarme",
    "mi_comboHub_triggleDevices_deleting": "Eliminazione in corso...",
    "mi_comboHub_triggleSubDevices_setting": "Configurazione...",
    "mi_comboHub_triggle_device_header_title_1": "Dispositivi che non possono essere abilitati",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "La protezione di base è una modalità di protezione 24 ore su 24 che non può essere disabilitata. I dispositivi associati al Hub, necessari per monitorare continuamente l'ambiente come rilevatori di fumo, rilevatori di gas o sensori di perdite d'acqua saranno abilitati come dispositivi di attivazione della protezione di base per impostazione predefinita.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "È stato abilitato come dispositivo di attivazione per la protezione domestica, fuori casa o del sonno, non può essere utilizzato per la protezione di base.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Dopo aver impostato il dispositivo di attivazione, è possibile abilitare la protezione domestica.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "È stato abilitato come dispositivo di attivazione per la protezione di base, non può essere utilizzato per la protezione domestica.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Dopo aver impostato il dispositivo di attivazione, è possibile abilitare la protezione fuori casa.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "È stato abilitato come dispositivo di attivazione per la protezione di base, non può essere utilizzato per la protezione fuori casa.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Dopo aver impostato il dispositivo di attivazione, è possibile abilitare la protezione del sonno.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "È stato abilitato come dispositivo di attivazione per la protezione di base, non può essere utilizzato per la protezione del sonno.",
    "mi_comboHub_triggle_device_empty_tip": "Non esistono dispositivi associati a questo hub di controllo che possono essere utilizzati per attivare l'avviso, come un sensore di movimento, un sensore di porte e finestre o un interruttore wireless.",
    "mi_comboHub_triggle_device_go_to_bug": "Acquista",
    "mi_commonHub_setting_nightlight_tomorrow": "Il giorno dopo",
    "mi_commonHub_setting_nightlight_allday": "Tutto il giorno",
    "mi_ifttt_launch": "Quando una qualsiasi condizione viene soddisfatta",
    "mi_ifttt_action": "Allora",
    "mi_commonHub_nightlight_open": "Accendi le luci notturne",
    "mi_commonHub_nightlight_motion_limit": "Può selezionare solo fino a 9 sensori del corpo umano",
    "mi_commonHub_nightlight_delay_close_min": "Spegnere la luce notturna in {value} min",
    "mi_commonHub_go_back_title": "Uscita",
    "mi_commonHub_go_back_content": "Ignorare le modifiche e uscire ora?",
    "mi_commonHub_setting_nightlight": "Luce notturna a induzione",
    "mi_commonHub_nightlight_commont": "Quando {value} si trova in un ambiente buio",
    "mi_commonHub_nightlight_timer": "Periodo di induzione",
    "mi_commonHub_linkage_alarm_number_ten": "È possibile selezionare solo fino a 10 allarmi gateway",
    "common_offline": "Offline",
    "mi_commonHub_linkage_alarm_footer_text": "Quando la funzione di collegamento di avviso dell'hub di controllo è abilitata e viene attivato un hub di controllo, verranno attivate la suoneria di avviso e la luce lampeggiante di tutti gli hub di controllo.",
    "mi_commonHub_linkage_alarm": "Avviso di collegamento",
    "mi_commonHub_linkage_alarm_dis": "Avviso di collegamento annullato"
  };
  exports.default = it;
},10034,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},10036,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ja = {
    "langugeName": "日语",
    "common_setting_title": "設定",
    "common_setting_feature_setting": "機能設定",
    "common_setting_general_setting": "一般設定",
    "common_setting_device_name": "デバイス名",
    "common_setting_multiswitch": "ボタン設定",
    "common_setting_device_timeZone": "地域設定",
    "common_setting_location_management": "位置管理",
    "common_setting_share_device": "デバイスシェアリング",
    "common_setting_ifttt_auto": "オートメーション",
    "common_setting_btGateway": "ブルートゥースMeshゲートウェイ",
    "common_setting_btGateway_status_read_fail": "ブルートゥースMeshゲートウェイの読み込みに失敗しました。",
    "cocommon_setting_btGateway_connected": "接続したブルートゥース機デバイス",
    "common_setting_firmware_upgrate": "ファームウェアアップデートを確認します",
    "common_setting_more_setting": "追加設定",
    "common_setting_add_to_desktop": "ホーム画面に追加します",
    "common_setting_privacy_agreement": "利用規約とプライバシーポリシー",
    "common_setting_delete_device": "デバイスを削除",
    "common_setting_help_page": "ヘルプ",
    "common_setting_more_seting_security": "セキュリティ設定",
    "common_setting_more_seting_faq": "FAQ",
    "common_setting_more_seting_isssues": "フィードバック",
    "common_setting_user_agreement": "ソフトウェアライセンスとサービス契約",
    "common_setting_privacy_policy": "プライバシーポリシー",
    "common_setting_feature_plug_in": "プラグインバージョン番号",
    "common_setting_homekit_device_add": "HomeKitに関連付けする",
    "common_setting_homekit_device_bound": "バインド",
    "common_setting_homekit_device_noBind": "バインドされていない",
    "common_log_title": "ログ",
    "common_log_today": "本日",
    "common_log_yesterday": "昨日",
    "common_log_no_logs": "ログなし",
    "common_log_loading": "ローディング",
    "common_log_loading_with_dot": "ローディング...",
    "common_log_logDataHasloaded": "ログが完全にロードされました",
    "common_log_all_data_has_been_loaded": "すべてのデータがロードされました",
    "common_log_no_data": "データなし",
    "common_cancel": "キャンセル",
    "common_ok": "はい",
    "common_manufacturer": "製造者",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "ネットワークに接続できません",
    "common_tips_battery_low": "ローバッテリー",
    "common_tips_iknow": "はい",
    "common_button_done": "完了",
    "common_button_delete": "削除",
    "common_button_retry": "リトライ",
    "common_button_save": "保存",
    "common_tips_delete_succeed": "削除に成功しました",
    "common_tips_delete_failed": "削除に失敗しました",
    "common_tips_loading_failed": "ローディングに失敗しました",
    "common_tips_request_failed": "リクエストが失敗しました。インターネット接続を確認してください。",
    "common_button_prev": "次のステップ",
    "common_button_next": "前のステップ",
    "common_button_changename": "名前を変更",
    "common_date_workday": "月曜日から金曜日",
    "common_date_weekend": "週末",
    "common_date_selfdefine": "ユーザ定義",
    "common_date_mon": "月曜日",
    "common_date_tues": "火曜日",
    "common_date_wed": "水曜日",
    "common_date_thur": "木曜日",
    "common_date_fri": "金曜日",
    "common_date_sat": "土曜日",
    "common_date_sun": "日曜日",
    "common_date_day": "日",
    "common_date_week": "週",
    "common_date_month": "月",
    "common_date_hour": "時",
    "common_date_minute": "分",
    "common_date_second": "秒",
    "common_tips_discard_operation": "この操作をやめますか。",
    "common_tips_setting": "設定中，請稍候..",
    "common_tips_setting_failed": "設定失敗",
    "common_tips_loading_failed_retry": "読み込めませんでした。タップしてもう一度試してください",
    "common_tips_shared_no_promision": "被共用裝置無此權限",
    "common_electricity": "電気統計",
    "common_power_history": "功率歷史記錄",
    "common_hardware_update_updating": "ファームウェアがアップデートしていますので、少々お待ちください…",
    "common_hardware_update_default": "デバイスに最新のファームウェアバージョン{version}があることを検知しましたが、アップデートしますか？",
    "common_hardware_update_isforce": "デバイス今のファームウェアバージョンが低すぎて、正常に使用できることを保証するため、最新バージョン{version}にアップデートしてください",
    "common_hardware_update": "アップデートします",
    "common_out": "終了",
    "common_hardware_checkupdate": "アップデートを調べます",
    "common_operation_fail": "操作に失敗しました。",
    "common_repeat_everyday": "毎日",
    "common_repeat_once": "一度",
    "common_repeat_tomorrow": "明日",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "デバイスがリストから削除されます。",
    "common_setting_device_delete_confirm": "デバイスを削除しますか?",
    "common_voice_mute": "サイレント",
    "common_voice_high": "高",
    "common_voice_middle": "中",
    "common_voice_low": "低",
    "sub_device_list_title": "サブデバイスリスト",
    "sub_device_list_header_tips": "下記のサブデバイスがすでにこのゲートウェイに接続しました",
    "sub_device_list_empty_tips": "当該ゲートウェイでは関連のサブデバイスがありません",
    "sub_device_list_name_cant_empty": "デバイス名は空にできません",
    "sub_device_list_name_cant_support_emoji": "絵文字表現をサポートしていません",
    "sub_device_list_name_cant_support_special_char": "名前に特殊記号を含めることはできません",
    "sub_device_list_name_cant_more_forty": "名前は40文字を超えることはできません",
    "sub_device_list_name_cant_same": "デバイス名を同じにすることはできません",
    "sub_device_list_device_offline": "機器がオフライン状態です",
    "sub_device_list_selected": "{XX}個のアイテムが選択されました",
    "sub_device_list_delete_multi_device": "選択した{XX}デバイスを削除してもよろしいですか？",
    "ifttt_triggle_single_press": "クリック",
    "ifttt_triggle_double_press": "長押し",
    "ifttt_triggle_long_press": "ダブルクリックする",
    "ifttt_triggle_shake": "ちょっと揺れてください",
    "ifttt_triggle_someone_moved": "誰かが移動しています",
    "ifttt_triggle_windoor_open": "ドアと窓が開きます",
    "ifttt_triggle_moved_afteronemin": "1分間何も操作しないと移動した",
    "ifttt_triggle_detect_vibration": "振動を感知",
    "ifttt_triggle_detect_fall": "感度低下",
    "ifttt_triggle_detect_tilting": "傾きを検知",
    "ifttt_triggle_fire_alert": "火災警報",
    "ifttt_triggle_gas_leakage_alert": "ガス警報アラーム",
    "ifttt_triggle_flood_alert": "浸水アラーム警報",
    "guard_type_basic": "基本デーモンモード",
    "guard_type_home": "ローカルデーモンモード",
    "guard_type_away": "リモートデーモンモード",
    "guard_type_sleep": "スリープデーモンモード",
    "ifttt_push_title_triggle_alert_1": "{XX}で、{YY}はアラームをトリガーします",
    "ifttt_push_title_triggle_alert_2": "{XX}で、{YY}は誰かがアラームをトリガーするために動いていることを感知します",
    "ifttt_push_title_triggle_alert_3": "{XX}で、{YY}はトリガーアラームをオンにします",
    "ifttt_push_title_triggle_alert_4": "{XX}で、{YY}は移動されたと感じています",
    "ifttt_push_title_triggle_alert_5": "{XX}で、{YY}はフラッディングアラームを検知します",
    "ifttt_push_title_triggle_alert_6": "{XX}で、{YY}は標準を超えるガス濃度を検出しました",
    "ifttt_push_title_triggle_alert_7": "{XX}で、{YY}は煙を検出しました",
    "common_ifttt_scene_execute_result_fail": "実行に失敗しました",
    "common_ifttt_scene_execute_result_unknow_error": "異常エラー",
    "common_ifttt_scene_execute_result_time_out": "実装タイムアウト",
    "common_ifttt_scene_execute_result_camera_sleep": "カメラは寝ています",
    "common_ifttt_device_offline": "（オフライン）",
    "timersetting_on": "開始時期",
    "timersetting_off": "終了時間",
    "timersetting_empty": "未設定",
    "timersetting_perio": "開始時間",
    "common_start": "開始",
    "common_end": "終了",
    "common_color": "色",
    "common_open": "オン",
    "common_scene_name_lm_scene_1_1": "警戒すると、誰かがアラームを渡しました",
    "common_scene_name_lm_scene_1_2": "アラート発生時のドアと窓のオープンアラーム",
    "common_scene_name_lm_scene_1_3": "アラームがオンになると、ワイヤレススイッチがアラームを押します。",
    "common_scene_name_lm_scene_1_4": "警告すると、ルービックキューブがしばらくトリガーされます。",
    "common_scene_name_lm_scene_1_5": "警告すると、静的および静的ステッカーが2分間トリガーされ、アラームがトリガーされます。",
    "common_scene_name_lm_scene_2_1": "誰かが通り過ぎ、夜の光が照らされた",
    "common_scene_name_lm_scene_3_1": "ワイヤレススイッチがドアベルを押す",
    "common_scene_name_lm_scene_3_2": "ドアまたは窓が開けられたため、チャイムが鳴ります",
    "common_scene_name_lm_scene_3_3": "誰かが鳴る鐘を渡した",
    "common_scene_name_lm_scene_4_1": "人が通ると目覚まし時計をオフします",
    "common_scene_name_lm_scene_4_2": "ドアまたは窓が開けられたため、目覚まし時計をオフします",
    "common_scene_name_lm_scene_4_3": "ワイヤレススイッチがアラームをオフにします",
    "common_scene_name_lm_scene_5_1": "煙感アラーム",
    "common_scene_name_lm_scene_5_2": "エアセンシングアラーム",
    "common_scene_name_lm_scene_5_3": "浸水アラーム",
    "common_close": "オフ",
    "sensor_set_ifttt_config_success": "成功した構成",
    "common_automation_configuring": "パッケージの自動化を設定しています。お待ちください...",
    "sensor_set_ifttt_config_fail": "構成に失敗しました",
    "sensor_set_ifttt_config_fail_tip": "1.ゲートウェイをwifi \n2に接続する必要があります。携帯電話をwifi \n3に接続する必要があります。wifiが正常であることを確認してください。",
    "mi_linuxHub_guard_guard_timer": "ガーディアンタイミング",
    "mi_linuxHub_timer_light_name": "ランタンタイマー",
    "mi_linuxHub_lazy_clock_name": "目覚まし時計",
    "sensor_set_ifttt_scene_name_1": "ドア開放リマインダー",
    "sensor_set_ifttt_scene_name_2": "ワイヤレススイッチをクリックして、夜間照明のオン/オフを切り替えます",
    "sensor_set_ifttt_scene_name_3": "ワイヤレススイッチスイッチアラートをダブルクリックします",
    "sensor_set_ifttt_scene_name_4": "誰かが通り過ぎ、夜の光が照らされた",
    "sensor_set_ifttt_scene_name_5": "2分間の無人夜間消灯",
    "sensor_set_ifttt_scene_name_6": "夜間照明を動かす人",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "開封後1分以上経っても閉まらない",
    "sensor_set_ifttt_triggle_name_2": "無人で2分",
    "sensor_set_ifttt_triggle_name_3": "指定した着信音を再生する",
    "sensor_set_ifttt_triggle_name_4": "夜間照明のオン/オフ",
    "sensor_set_ifttt_triggle_name_5": "誘導ナイトライト",
    "sensor_set_ifttt_triggle_name_6": "夜の明かりを消す",
    "sensor_set_ifttt_triggle_name_7": "ナイトライト",
    "sensor_set_ifttt_triggle_name_8": "オン/オフアラート",
    "common_scene_execute_partiallysucceed": "タスクの一部が正常に完了しました",
    "common_short_date_mon": "周一",
    "common_short_date_tues": "周二",
    "common_short_date_wed": "周三",
    "common_short_date_thur": "周四",
    "common_short_date_fri": "周五",
    "common_short_date_sat": "周六",
    "common_short_date_sun": "周日",
    "common_repeat_timer_title": "Tekrarlama seçeneği",
    "common_repeat_self_timer_title": "Özel tekrar",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Schedules",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Geri sayım",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Today",
    "common_plug_month_elec": "Month",
    "common_plug_current_power": "Current",
    "common_setting_ifttt_auto_detail": "オートメーション",
    "mi_comboHub_mainPage_guard_base": "基本",
    "mi_comboHub_mainPage_guard_home": "ローカル",
    "mi_comboHub_mainPage_guard_away": "リモート",
    "mi_comboHub_mainPage_guard_sleep": "スリープ",
    "common_comboHub_triggle_device_alert": "アラーム",
    "common_comboHub_triggle_device_opened_guard": "（すでに{XX}デーモンモード中で起動しました）",
    "common_comboHub_triggle_device_only_open_basic": "（基本デーモンモードだけに使える）",
    "common_comboHub_triggle_device_opened_basic": "（すでに基本デーモンモード中で起動しました）",
    "common_setting_homekit_device_desc": "AppleファミリーAPPで当該設備の配置と使用が可能です。",
    "common_ifttt_triggleName_switch": "ドアと窓の状態が変化すれば、アラームがトリガされます",
    "common_ifttt_triggleName_vibration": "状態が変化すれば、アラームがトリガされます",
    "common_ifttt_triggleName_cube": "一分間の静止の後に移動されれば、アラームがトリガされます",
    "common_ifttt_triggleName_magnet": "ドアと窓の状態が変化すれば、アラームがトリガされます",
    "common_ifttt_triggleName_motion": "人が移動すれば、アラームがトリガされます",
    "common_timer_light_timer_light_period": "期間",
    "common_timer_light_timer_on": "タイミング",
    "common_timer_light_timer_off": "時間切れ",
    "common_timer_light_timer_time_after": "終了時間後の開始時間",
    "common_lumi_sensor_setting_battery": "Miスマート光センサー",
    "common_lumi_sensor_setting_battery_normal": "ノーマル",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "電池残量不足なため、早めに電池を交換してください。",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "アラームトリガ",
    "mi_comboHub_triggleDevices_deleting": "削除中",
    "mi_comboHub_triggleSubDevices_setting": "情報を設定しています",
    "mi_comboHub_triggle_device_header_title_1": "起動できない設備",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "基本デーモンモードは24時間に持続でオフできないデーモンモードである。当該ゲートウエーにおいて、煙感知器や天然ガス感知器や水浸感知器などの持続的に環境を感知できる設備が必要です。これらの設備は、基本デーモンモードのデフォルトアラームトリガとして使われます。",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "すでにローカル・リモート・スリープデーモンモードのアラームトリガとして使われるが、基本デーモンモードに適用しません。",
    "mi_comboHub_triggle_device_header1_subtitle_home": "アラームトリガした後、基本デーモンモードが起動すると設定できます。",
    "mi_comboHub_triggle_device_header2_subtitle_home": "すでに基本デーモンモードのアラームトリガとして使われるが、ローカルデーモンモードに適用しません。",
    "mi_comboHub_triggle_device_header1_subtitle_away": "アラームトリガした後、リモートデーモンモードが起動すると設定できます。",
    "mi_comboHub_triggle_device_header2_subtitle_away": "すでに基本デーモンモードのアラームトリガとして使われるが、リモートデーモンモードに適用しません。",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "アラームトリガした後、スリープデーモンモードが起動すると設定できます。",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "すでに基本デーモンモードのアラームトリガとして使われるが、スリープデーモンモードに適用しません。",
    "mi_comboHub_triggle_device_empty_tip": "当該ゲートウェイではアラームトリガとするデバイスがありません。例えばモーションセンサー、ドアと窓センサー及びワイヤレススイッチなど",
    "mi_comboHub_triggle_device_go_to_bug": "購入へ",
    "mi_commonHub_setting_nightlight_tomorrow": "翌日",
    "mi_commonHub_setting_nightlight_allday": "一日中",
    "mi_ifttt_launch": "いずれの条件に該当する場合",
    "mi_ifttt_action": "執行します",
    "mi_commonHub_nightlight_open": "ナイトライトをオンします",
    "mi_commonHub_nightlight_motion_limit": "最大9個の人体センサーのみを選択できます",
    "mi_commonHub_nightlight_delay_close_min": "{value}分間後ナイトライトをオフします",
    "mi_commonHub_go_back_title": "編集を終了します",
    "mi_commonHub_go_back_content": "終了した後修正した内容が紛失しますが、終了しますか？",
    "mi_commonHub_setting_nightlight": "感応ナイトライト",
    "mi_commonHub_nightlight_commont": "{value}所在する環境が暗い場合",
    "mi_commonHub_nightlight_timer": "導入期間",
    "mi_commonHub_linkage_alarm_number_ten": "最大10個のゲートウェイアラームのみを選択できます",
    "common_offline": "オフライン",
    "mi_commonHub_linkage_alarm_footer_text": "連動アラーム機能をオンしたゲートウェイの中で、いずれのゲートウェイがアラームすると、そのほかのゲートウェイも連動してアラームして、アラームの音がなり、また点灯します",
    "mi_commonHub_linkage_alarm": "連動アラーム",
    "mi_commonHub_linkage_alarm_dis": "連動アラームをキャンセルします"
  };
  exports.default = ja;
},10037,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ko = {
    "langugeName": "韩国",
    "common_setting_title": "설정",
    "common_setting_feature_setting": "기능 설정",
    "common_setting_general_setting": "일반 설정",
    "common_setting_device_name": "기기 이름",
    "common_setting_multiswitch": "버튼 설정",
    "common_setting_device_timeZone": "기기 표준 시간대",
    "common_setting_location_management": "위치 관리",
    "common_setting_share_device": "기기 공유",
    "common_setting_ifttt_auto": "지능형",
    "common_setting_btGateway": "블루투스 Mesh게이트웨어",
    "common_setting_btGateway_status_read_fail": "블루투스 Mesh 게이트웨어 식별 실패",
    "cocommon_setting_btGateway_connected": "연결된 블루투스 설비",
    "common_setting_firmware_upgrate": "펌웨어 업그레이드 확인",
    "common_setting_more_setting": "추가 설정",
    "common_setting_add_to_desktop": "데스크톱에 추가",
    "common_setting_privacy_agreement": "사용자 약관 및 개인 정보 보호 정책",
    "common_setting_delete_device": "기기 삭제",
    "common_setting_help_page": "도움말",
    "common_setting_more_seting_security": "보안 설정",
    "common_setting_more_seting_faq": "FAQ",
    "common_setting_more_seting_isssues": "피드백 문제",
    "common_setting_user_agreement": "소프트웨어 라이센스 및 서비스 계약",
    "common_setting_privacy_policy": "개인 정보 보호 정책",
    "common_setting_feature_plug_in": "플러그인 버전",
    "common_setting_homekit_device_add": "HomeKit에 연동하기",
    "common_setting_homekit_device_bound": "바인드",
    "common_setting_homekit_device_noBind": "언 바운드",
    "common_log_title": "로그",
    "common_log_today": "오늘",
    "common_log_yesterday": "어제",
    "common_log_no_logs": "로그 없음",
    "common_log_loading": "로딩 중",
    "common_log_loading_with_dot": "로딩 중 ...",
    "common_log_logDataHasloaded": "전체 로그 로딩",
    "common_log_all_data_has_been_loaded": "모든 데이터가 로드되었습니다",
    "common_log_no_data": "데이터가 없습니다",
    "common_cancel": "취소",
    "common_ok": "확인",
    "common_manufacturer": "제조사",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "네트워크에 연결할 수 없습니다",
    "common_tips_battery_low": "배터리 전량 부족",
    "common_tips_iknow": "확인",
    "common_button_done": "완료",
    "common_button_delete": "삭제",
    "common_button_retry": "다시 시도",
    "common_button_save": "저장",
    "common_tips_delete_succeed": "삭제 성공",
    "common_tips_delete_failed": "삭제 실패",
    "common_tips_loading_failed": "로딩 실패",
    "common_tips_request_failed": "요청 실패. 네트워크 연결 상태를 확인하세요",
    "common_button_prev": "뒤로",
    "common_button_next": "다음",
    "common_button_changename": "이름 바꾸기",
    "common_date_workday": "월-금",
    "common_date_weekend": "주말",
    "common_date_selfdefine": "맞춤설정",
    "common_date_mon": "월요일",
    "common_date_tues": "화요일",
    "common_date_wed": "수요일",
    "common_date_thur": "목요일",
    "common_date_fri": "금요일",
    "common_date_sat": "토요일",
    "common_date_sun": "일요일",
    "common_date_day": " 일",
    "common_date_week": " 주",
    "common_date_month": " 월",
    "common_date_hour": " 시",
    "common_date_minute": " 분",
    "common_date_second": " 초",
    "common_tips_discard_operation": "현재 작업을 취소할까요?",
    "common_tips_setting": "설정 중, 잠시 기다려 주세요…",
    "common_tips_setting_failed": "설정 실패",
    "common_tips_loading_failed_retry": "로드하지 못했습니다. 다시 시도하려면 클릭하십시오",
    "common_tips_shared_no_promision": "공유 장치에 권한이 없습니다",
    "common_electricity": "전기 통계",
    "common_power_history": "전력 기록",
    "common_hardware_update_updating": "펌웨어를 업그레이드하는 중입니다, 잠시만 기다려주십시오...",
    "common_hardware_update_default": "장치에 최신 펌웨어 버전이 {version}인 것으로 감지되었습니다, 업그레이드하시겠습니까?",
    "common_hardware_update_isforce": "장치의 현재 펌웨어 버전이 너무 낮습니다， 정상적으로 사용하려면 최신 버전 {version}로 업그레이드하십시오",
    "common_hardware_update": "업그레이드로 이동",
    "common_out": "종료",
    "common_hardware_checkupdate": "업그레이드 보기",
    "common_operation_fail": "작동 실패",
    "common_repeat_everyday": "매일",
    "common_repeat_once": "1회",
    "common_repeat_tomorrow": "내일",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "기기 목록에서 기기가 제거될 것입니다.",
    "common_setting_device_delete_confirm": "정말 기기를 삭제하시겠습니까?",
    "common_voice_mute": "음소거",
    "common_voice_high": "높음",
    "common_voice_middle": "중간",
    "common_voice_low": "낮음",
    "sub_device_list_title": "하위 장치 목록",
    "sub_device_list_header_tips": "이 게이트웨이에는 다음과 같은 하위 장치가 연결되어 있습니다",
    "sub_device_list_empty_tips": "이 게이트웨이에 연결된 하위 장치가 없습니다",
    "sub_device_list_name_cant_empty": "장치 이름은 비워 둘 수 없습니다",
    "sub_device_list_name_cant_support_emoji": "이모티콘 표현을 지원하지 않습니다",
    "sub_device_list_name_cant_support_special_char": "이름은 특수 기호를 포함 할 수 없습니다",
    "sub_device_list_name_cant_more_forty": "이름은 40자를 초과 할 수 없습니다",
    "sub_device_list_name_cant_same": "장치 이름은 같을 수 없습니다",
    "sub_device_list_device_offline": "장치가 오프라인 상태입니다",
    "sub_device_list_selected": "{XX} 항목 선택",
    "sub_device_list_delete_multi_device": "선택한 {XX} 기기를 삭제 하시겠습니까?",
    "ifttt_triggle_single_press": "한 번 누름",
    "ifttt_triggle_double_press": "누르고 홀드",
    "ifttt_triggle_long_press": "두 번 누름",
    "ifttt_triggle_shake": "흔듬",
    "ifttt_triggle_someone_moved": "인원 이동",
    "ifttt_triggle_windoor_open": "도어 및 창 열기",
    "ifttt_triggle_moved_afteronemin": "1 분 동안 활동이 없으면 이동",
    "ifttt_triggle_detect_vibration": "진동 감지",
    "ifttt_triggle_detect_fall": "드롭 다운 감지",
    "ifttt_triggle_detect_tilting": "기울이기 감지",
    "ifttt_triggle_fire_alert": "화재 경보",
    "ifttt_triggle_gas_leakage_alert": "가스 누설 경보",
    "ifttt_triggle_flood_alert": "침수 경보",
    "guard_type_basic": "기본 가드",
    "guard_type_home": "홈 가드",
    "guard_type_away": "외출 가드",
    "guard_type_sleep": "수면 가드",
    "ifttt_push_title_triggle_alert_1": "{XX}에서 {YY}는 알람을 트리거합니다",
    "ifttt_push_title_triggle_alert_2": "{XX}에서 {YY}는 누군가가 알람을 트리거하기 위해 움직이는 것을 감지합니다.",
    "ifttt_push_title_triggle_alert_3": "{XX}에서 {YY}는 트리거 알람을 켭니다.",
    "ifttt_push_title_triggle_alert_4": "{XX}에서 {YY}가 움직입니다.",
    "ifttt_push_title_triggle_alert_5": "{XX}에서 {YY}는 범람 경보를 감지합니다",
    "ifttt_push_title_triggle_alert_6": "{XX}에서 {YY}가 표준을 초과하는 가스 농도를 감지했습니다.",
    "ifttt_push_title_triggle_alert_7": "{XX}에서 {YY}가 연기를 감지했습니다.",
    "common_ifttt_scene_execute_result_fail": "실행 실패",
    "common_ifttt_scene_execute_result_unknow_error": "비정상적인 오류",
    "common_ifttt_scene_execute_result_time_out": "구현 타임 아웃",
    "common_ifttt_scene_execute_result_camera_sleep": "카메라가 자요",
    "common_ifttt_device_offline": "(오프라인)",
    "timersetting_on": "실행 시간",
    "timersetting_off": "오프 시간",
    "timersetting_empty": "미설정",
    "timersetting_perio": "실행 기간",
    "common_start": "시작",
    "common_end": "끝",
    "common_color": "컬러",
    "common_open": "활성화",
    "common_scene_name_lm_scene_1_1": "경고 할 때 누군가가 경보를 통과 한 경우",
    "common_scene_name_lm_scene_1_2": "경보시 도어 및 창 열기 경보",
    "common_scene_name_lm_scene_1_3": "알람이 켜져 있으면 무선 스위치가 알람을 누릅니다.",
    "common_scene_name_lm_scene_1_4": "경고 할 때 Rubik 's Cube가 잠시 동안 트리거됩니다.",
    "common_scene_name_lm_scene_1_5": "경고가 표시되면 정적 및 정적 스티커가 2 분 동안 트리거되고 알람이 트리거됩니다.",
    "common_scene_name_lm_scene_2_1": "누군가 지나가고 야간 조명이 켜졌습니다",
    "common_scene_name_lm_scene_3_1": "무선 스위치가 초인종을 누른다",
    "common_scene_name_lm_scene_3_2": "문/창문이 열리면 초인종이 울립니다",
    "common_scene_name_lm_scene_3_3": "누군가 울리는 종을 통과했습니다",
    "common_scene_name_lm_scene_4_1": "누가 지나가면 알람 시계를 멈춥니다",
    "common_scene_name_lm_scene_4_2": "문/창문이 열리면 알람 시계가 멈춥니다",
    "common_scene_name_lm_scene_4_3": "무선 스위치가 알람을 해제합니다",
    "common_scene_name_lm_scene_5_1": "연기 감지 연동 게이트웨이 경보",
    "common_scene_name_lm_scene_5_2": "가스 감지 연동 게이트웨이 경보",
    "common_scene_name_lm_scene_5_3": "침수 연동 게이트웨이 경보",
    "common_close": "닫기",
    "sensor_set_ifttt_config_success": "구성 성공",
    "common_automation_configuring": "패키지 자동화 구성 중입니다. 잠시만 기다려주십시오.",
    "sensor_set_ifttt_config_fail": "구성 실패",
    "sensor_set_ifttt_config_fail_tip": "1. 게이트웨이를 wifi \n2에 연결해야합니다. 휴대 전화를 wifi \n3에 연결해야합니다 .WiFi가 정상인지 확인하십시오.",
    "mi_linuxHub_guard_guard_timer": "가디언 타이밍",
    "mi_linuxHub_timer_light_name": "랜턴 타이머",
    "mi_linuxHub_lazy_clock_name": "알람 시계",
    "sensor_set_ifttt_scene_name_1": "문 열기 알림",
    "sensor_set_ifttt_scene_name_2": "야간 조명을 켜거나 끄려면 무선 스위치를 클릭하십시오",
    "sensor_set_ifttt_scene_name_3": "무선 스위치 스위치 경고를 두 번 클릭",
    "sensor_set_ifttt_scene_name_4": "누군가 지나가고 야간 조명이 켜졌습니다",
    "sensor_set_ifttt_scene_name_5": "무인 야간 조명 2 분",
    "sensor_set_ifttt_scene_name_6": "야간 조명을 움직이는 사람",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "개봉 후 1 분 이상 후에 닫히지 않음",
    "sensor_set_ifttt_triggle_name_2": "무인 2 분",
    "sensor_set_ifttt_triggle_name_3": "지정된 벨소리를 재생",
    "sensor_set_ifttt_triggle_name_4": "야간 조명 켜기 / 끄기",
    "sensor_set_ifttt_triggle_name_5": "유도 야간 조명",
    "sensor_set_ifttt_triggle_name_6": "야간 조명 끄기",
    "sensor_set_ifttt_triggle_name_7": "야간 조명",
    "sensor_set_ifttt_triggle_name_8": "온 / 오프 경고",
    "common_scene_execute_partiallysucceed": "일부 작업이 성공적으로 완료되었습니다.",
    "common_short_date_mon": "월",
    "common_short_date_tues": "화",
    "common_short_date_wed": "수",
    "common_short_date_thur": "목",
    "common_short_date_fri": "금",
    "common_short_date_sat": "토",
    "common_short_date_sun": "일",
    "common_repeat_timer_title": "반복 옵션",
    "common_repeat_self_timer_title": "맞춤 반복",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "타이머",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Countdown",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Today",
    "common_plug_month_elec": "Month",
    "common_plug_current_power": "Current",
    "common_setting_ifttt_auto_detail": "지능형",
    "mi_comboHub_mainPage_guard_base": "기본",
    "mi_comboHub_mainPage_guard_home": "홈",
    "mi_comboHub_mainPage_guard_away": "외출",
    "mi_comboHub_mainPage_guard_sleep": "수면",
    "common_comboHub_triggle_device_alert": "알람",
    "common_comboHub_triggle_device_opened_guard": "(이미{XX}가드에 실행되었습니다)",
    "common_comboHub_triggle_device_only_open_basic": "(기본 가드에만 실행될 수 있습니다)",
    "common_comboHub_triggle_device_opened_basic": "(기본 가드에 실행되었습니다)",
    "common_setting_homekit_device_desc": "Apple Home APP에서 장치를 구성하고 사용할 수 있습니다",
    "common_ifttt_triggleName_switch": "스위치 상태 변경으로 경보가 트리거됩니다",
    "common_ifttt_triggleName_vibration": "상태 변경으로 경보가 트리거됩니다",
    "common_ifttt_triggleName_cube": "1분 동안 사용하지 않으면 이동하여 경보가 트리거됩니다",
    "common_ifttt_triggleName_magnet": "도어 및 창 상태 변경으로 경보가 트리거됩니다",
    "common_ifttt_triggleName_motion": "인원 이동으로 경보가 트리거됩니다",
    "common_timer_light_timer_light_period": "기간",
    "common_timer_light_timer_on": "정시에",
    "common_timer_light_timer_off": "시간 초과",
    "common_timer_light_timer_time_after": "종료 시간 이후 시작 시간",
    "common_lumi_sensor_setting_battery": "Mi 라이트 센서",
    "common_lumi_sensor_setting_battery_normal": "정상",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "배터리가 부족합니다.  배터리를  교체해 주세요.",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "트리거링 경보 장치",
    "mi_comboHub_triggleDevices_deleting": "삭제중",
    "mi_comboHub_triggleSubDevices_setting": "설정중",
    "mi_comboHub_triggle_device_header_title_1": "실행 불가한 장치",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "기본 가드는 24 시간 보호 모드이며 해제할 수 없습니다. 연기 센서, 가스 경보, 플러드 센서 등과 같이 환경을 지속적으로 모니터링해야 하는 게이트웨이 하위 장치는 기본적으로 기본 가드의 트리거 경보 장치로 활성화됩니다.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "기본 가드가 아닌 홈 가드/외출 가드/수면 가드에 대한 트리거링 경보 장치로 사용되었습니다",
    "mi_comboHub_triggle_device_header1_subtitle_home": "트리거링 경보 장치를 설정한 후 홈 가드 모드를 실행할 수 있습니다",
    "mi_comboHub_triggle_device_header2_subtitle_home": "홈 가드가 아닌 기본 가드에 대한 트리거링 경보 장치로 사용되었습니다",
    "mi_comboHub_triggle_device_header1_subtitle_away": "트리거링 경보 장치를 설정한 후 홈 가드 모드를 실행할 수 있습니다",
    "mi_comboHub_triggle_device_header2_subtitle_away": "외출 가드가 아닌 기본 가드에 대한 트리거링 경보 장치로 사용되었습니다",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "트리거링 경보 장치를 설정한 후 수면 가드 모드를 실행할 수 있습니다",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "수면 가드가 아닌 기본 가드에 대한 트리거링 경보 장치로 사용되었습니다",
    "mi_comboHub_triggle_device_empty_tip": "이 게이트웨이에는 인체감지 센서, 방범 센서 및 무선 스위치와 같은 경보 트리거 소스로 사용할 수있는 장치가 없습니다",
    "mi_comboHub_triggle_device_go_to_bug": "구매로 이동",
    "mi_commonHub_setting_nightlight_tomorrow": "다음날",
    "mi_commonHub_setting_nightlight_allday": "하루 종일",
    "mi_ifttt_launch": "그 중 하나가 만족되면",
    "mi_ifttt_action": "실행됩니다",
    "mi_commonHub_nightlight_open": "야간 조명 켜기",
    "mi_commonHub_nightlight_motion_limit": "최대 9 개의 인체 센서 만 선택할 수 있습니다",
    "mi_commonHub_nightlight_delay_close_min": "{value}분 후 야간 조명 끄기",
    "mi_commonHub_go_back_title": "편집 종료",
    "mi_commonHub_go_back_content": "종료 후 수정 사항이 분실됩니다, 종료하시겠습니까?",
    "mi_commonHub_setting_nightlight": "자동 야간 조명",
    "mi_commonHub_nightlight_commont": "{value}어두운 환경에 있을 때",
    "mi_commonHub_nightlight_timer": "유도 기간",
    "mi_commonHub_linkage_alarm_number_ten": "최대 10 개의 게이트웨이 경보 만 선택할 수 있습니다",
    "common_offline": "오프라인",
    "mi_commonHub_linkage_alarm_footer_text": "경보 기능이 연동된 게이트웨 중, 한 개 라도 경보가 울리면 다른 게이트 웨이에서도 경보가 울리고 라이트가 켜지는 기능 활성화",
    "mi_commonHub_linkage_alarm": "연결 알람",
    "mi_commonHub_linkage_alarm_dis": "연결 알람 취소됨"
  };
  exports.default = ko;
},10040,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var pl = {
    "langugeName": "波兰语",
    "common_setting_title": "Ustawienia",
    "common_setting_feature_setting": "Ustawienia funkcji",
    "common_setting_general_setting": "Ustawienia ogólne",
    "common_setting_device_name": "Nazwa urządzenia",
    "common_setting_multiswitch": "Ustawienia przycisku",
    "common_setting_device_timeZone": "Ustawienia regionalne",
    "common_setting_location_management": "Zarządzanie lokalizacją",
    "common_setting_share_device": "Udostępnianie urządzenia",
    "common_setting_ifttt_auto": "Automatyzacja",
    "common_setting_btGateway": "Brama Bluetooth Mesh",
    "common_setting_btGateway_status_read_fail": "Nie można odzyskać statusu bramy Bluetooth Mesh",
    "cocommon_setting_btGateway_connected": "Połączono urządzenia Bluetooth",
    "common_setting_firmware_upgrate": "Sprawdź aktualizacje oprogramowania układowego",
    "common_setting_more_setting": "Dodatkowe ustawienia",
    "common_setting_add_to_desktop": "Dodaj do ekranu głównego",
    "common_setting_privacy_agreement": "Umowa użytkownika i polityka prywatności",
    "common_setting_delete_device": "Usuń urządzenie",
    "common_setting_help_page": "Pomoc",
    "common_setting_more_seting_security": "Ustawienia bezpieczeństwa",
    "common_setting_more_seting_faq": "Pytania i odpowiedzi",
    "common_setting_more_seting_isssues": "Opinia",
    "common_setting_user_agreement": "Umowa licencyjna na oprogramowanie oraz świadczenie usług",
    "common_setting_privacy_policy": "Polityka prywatności",
    "common_setting_feature_plug_in": "Wersja z wtyczką",
    "common_setting_homekit_device_add": "Sparuj z zestawem HomeKit",
    "common_setting_homekit_device_bound": "Bind",
    "common_setting_homekit_device_noBind": "Bez ograniczeń",
    "common_log_title": "Dzienniki",
    "common_log_today": "Dzisiaj",
    "common_log_yesterday": "Wczoraj",
    "common_log_no_logs": "Brak dzienników",
    "common_log_loading": "Ładowanie",
    "common_log_loading_with_dot": "Ładowanie ...",
    "common_log_logDataHasloaded": "Dzienniki zostały załadowane",
    "common_log_all_data_has_been_loaded": "Wszystkie dane zostały załadowane",
    "common_log_no_data": "Brak danych",
    "common_cancel": "Anuluj",
    "common_ok": "OK",
    "common_manufacturer": "Производитель",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Nie można połączyć z siecią",
    "common_tips_battery_low": "Niski poziom naładowania",
    "common_tips_iknow": "OK",
    "common_button_done": "Gotowe",
    "common_button_delete": "Usuń",
    "common_button_retry": "Spróbuj ponownie",
    "common_button_save": "Zapisz",
    "common_tips_delete_succeed": "Usuwanie powiodło się",
    "common_tips_delete_failed": "Usunięcie nie powiodło się",
    "common_tips_loading_failed": "Nie można wczytać",
    "common_tips_request_failed": "Żądanie nie powiodło się. Sprawdź działanie sieci",
    "common_button_prev": "Wróć",
    "common_button_next": "Następny",
    "common_button_changename": "Zmień nazwę",
    "common_date_workday": "Od pon do pt",
    "common_date_weekend": "Weekend",
    "common_date_selfdefine": "Niestandardowe",
    "common_date_mon": "Poniedziałek",
    "common_date_tues": "Wtorek",
    "common_date_wed": "Środa",
    "common_date_thur": "Czwartek",
    "common_date_fri": "Piątek",
    "common_date_sat": "Sobota",
    "common_date_sun": "Niedziela",
    "common_date_day": " Dzień",
    "common_date_week": " Tydzień",
    "common_date_month": " Miesiąc",
    "common_date_hour": " godz.",
    "common_date_minute": " min",
    "common_date_second": " s",
    "common_tips_discard_operation": "Przerwać bieżącą operację?",
    "common_tips_setting": "Ustawianie, proszę czekać…",
    "common_tips_setting_failed": "Ustawienie nie powiodło się",
    "common_tips_loading_failed_retry": "Nie można pobrać, dotknij ponownie",
    "common_tips_shared_no_promision": "Udostępnione urządzenie nie ma uprawnień",
    "common_electricity": "Statystyka energii elektrycznej",
    "common_power_history": "Zapis historii zużycia energii elektrycznej",
    "common_hardware_update_updating": "Trwa aktualizowanie oprogramowania sprzętowego, proszę czekać…",
    "common_hardware_update_default": "Dostępna jest nowa wersja oprogramowania sprzętowego ({version}), zaktualizować teraz?",
    "common_hardware_update_isforce": "Bieżąca wersja oprogramowania sprzętowego na Twoim urządzeniu jest przedawniona, zaktualizuj ją do ostatniej wersji ({version}).",
    "common_hardware_update": "Aktualizuj teraz",
    "common_out": "Wyloguj",
    "common_hardware_checkupdate": "Zobacz aktualizację",
    "common_operation_fail": "Operacja nie powiodła się. ",
    "common_repeat_everyday": "Codziennie",
    "common_repeat_once": "Jeden raz",
    "common_repeat_tomorrow": "Jutro",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "Urządzenie zostanie usunięte z listy.",
    "common_setting_device_delete_confirm": "Czy usunąć urządzenie?",
    "common_voice_mute": "Cichy",
    "common_voice_high": "Wysoki",
    "common_voice_middle": "Średni",
    "common_voice_low": "Niski",
    "sub_device_list_title": "Połączono z urządzeniem dziecięcym",
    "sub_device_list_header_tips": "Następujące urządzenia dla dzieci zostały już sparowane z tym centrum.",
    "sub_device_list_empty_tips": "Brak urządzeń dla dzieci sparowanych z tym centrum kontroli.",
    "sub_device_list_name_cant_empty": "Nazwa urządzenia nie może być pusta",
    "sub_device_list_name_cant_support_emoji": "Nie obsługuje wyrażeń emoji",
    "sub_device_list_name_cant_support_special_char": "Nazwa nie może zawierać specjalnych symboli",
    "sub_device_list_name_cant_more_forty": "Nazwa nie może przekraczać 40 znaków",
    "sub_device_list_name_cant_same": "Nazwa urządzenia nie może być taka sama",
    "sub_device_list_device_offline": "Urządzenie jest w trybie offline",
    "sub_device_list_selected": "Wybrano element {XX}",
    "sub_device_list_delete_multi_device": "Czy na pewno chcesz usunąć wybrane urządzenia {XX}?",
    "ifttt_triggle_single_press": "Kliknij",
    "ifttt_triggle_double_press": "Naciśnij i przytrzymaj",
    "ifttt_triggle_long_press": "Naciśnij dwukrotnie",
    "ifttt_triggle_shake": "Wstrząśnij",
    "ifttt_triggle_someone_moved": "Wykryto ruch",
    "ifttt_triggle_windoor_open": "Okno/drzwi są otwarte",
    "ifttt_triggle_moved_afteronemin": "Przeniesiony po minucie bezczynności",
    "ifttt_triggle_detect_vibration": "Wykryto wibrację",
    "ifttt_triggle_detect_fall": "Wykryto upadek",
    "ifttt_triggle_detect_tilting": "Wykrywanie przechyłu",
    "ifttt_triggle_fire_alert": "Alarm pożarowy",
    "ifttt_triggle_gas_leakage_alert": "Alarm wykrywacza gazu",
    "ifttt_triggle_flood_alert": "Alarm powodziowy",
    "guard_type_basic": "Ochrona podstawowa",
    "guard_type_home": "Ochrona domowa",
    "guard_type_away": "Ochrona poza domem",
    "guard_type_sleep": "Ochrona snu",
    "ifttt_push_title_triggle_alert_1": "W {XX} {YY} wyzwala alarm",
    "ifttt_push_title_triggle_alert_2": "W {XX} {YY} wyczuwa, że ktoś się porusza, aby uruchomić alarm",
    "ifttt_push_title_triggle_alert_3": "W {XX} {YY} włącza alarm wyzwalacza",
    "ifttt_push_title_triggle_alert_4": "W {XX} {YY} wyczuwa ruch",
    "ifttt_push_title_triggle_alert_5": "W {XX} {YY} wykrywa alarm zalania",
    "ifttt_push_title_triggle_alert_6": "W {XX} {YY} wykrył stężenie gazu przekraczające normę",
    "ifttt_push_title_triggle_alert_7": "W {XX} {YY} wykrył dym",
    "common_ifttt_scene_execute_result_fail": "Wykonanie nie powiodło się",
    "common_ifttt_scene_execute_result_unknow_error": "Nienormalny błąd",
    "common_ifttt_scene_execute_result_time_out": "Limit czasu realizacji",
    "common_ifttt_scene_execute_result_camera_sleep": "Aparat śpi",
    "common_ifttt_device_offline": "(offline)",
    "timersetting_on": "Czas rozpoczęcia",
    "timersetting_off": "Czas zakończenia",
    "timersetting_empty": "Nie ustawiono",
    "timersetting_perio": "Aktywny dla",
    "common_start": "Uruchom",
    "common_end": "Koniec",
    "common_color": "Kolor",
    "common_open": "Włącz",
    "common_scene_name_lm_scene_1_1": "Gdy alarm, ktoś przeszedł alarm",
    "common_scene_name_lm_scene_1_2": "Alarm otwarcia drzwi i okna podczas ostrzegania",
    "common_scene_name_lm_scene_1_3": "Gdy alarm jest włączony, przełącznik bezprzewodowy naciska alarm.",
    "common_scene_name_lm_scene_1_4": "Podczas alarmowania Kostka Rubika jest na chwilę uruchamiana.",
    "common_scene_name_lm_scene_1_5": "Po alarmie statyczne i statyczne naklejki są uruchamiane na dwie minuty, a alarm jest uruchamiany.",
    "common_scene_name_lm_scene_2_1": "Ktoś przeszedł, nocne światło było oświetlone",
    "common_scene_name_lm_scene_3_1": "Przełącznik bezprzewodowy naciska dzwonek do drzwi",
    "common_scene_name_lm_scene_3_2": "Dzwonek do drzwi dzwoni, gdy zostaną otwarte drzwi/okno",
    "common_scene_name_lm_scene_3_3": "Ktoś minął dzwonek",
    "common_scene_name_lm_scene_4_1": "Wyłącz budzik, gdy ktoś przechodzi",
    "common_scene_name_lm_scene_4_2": "Wyłącz budzik, gdy są otwarte drzwi lub okno",
    "common_scene_name_lm_scene_4_3": "Przełącznik bezprzewodowy naciska alarm",
    "common_scene_name_lm_scene_5_1": "Wykrycie dymu wyzwoli alarm centrali.",
    "common_scene_name_lm_scene_5_2": "Wykrycie gazu wyzwoli alarm centrali.",
    "common_scene_name_lm_scene_5_3": "Wykrycie wycieku wody wyzwoli alarm centrali.",
    "common_close": "Wyłączono",
    "sensor_set_ifttt_config_success": "Skonfigurowano pomyślnie",
    "common_automation_configuring": "Konfigurowanie automatyzacji pakietów, proszę czekać ...",
    "sensor_set_ifttt_config_fail": "Konfiguracja nie powiodła się",
    "sensor_set_ifttt_config_fail_tip": "1. Musisz podłączyć bramę do Wi-Fi \n2. Musisz podłączyć telefon do Wi-Fi \n3. Upewnij się, że Wi-Fi działa normalnie.",
    "mi_linuxHub_guard_guard_timer": "Czas opiekuna",
    "mi_linuxHub_timer_light_name": "Licznik latarni",
    "mi_linuxHub_lazy_clock_name": "Budzik",
    "sensor_set_ifttt_scene_name_1": "Przypomnienie o otwarciu drzwi",
    "sensor_set_ifttt_scene_name_2": "Kliknij przełącznik sieci bezprzewodowej, aby włączyć / wyłączyć lampkę nocną",
    "sensor_set_ifttt_scene_name_3": "Kliknij dwukrotnie alert przełącznika przełącznika łączności bezprzewodowej",
    "sensor_set_ifttt_scene_name_4": "Ktoś przeszedł, nocne światło było oświetlone",
    "sensor_set_ifttt_scene_name_5": "2 minuty bezzałogowego nocnego światła wyłączone",
    "sensor_set_ifttt_scene_name_6": "Ktoś włącza lampkę nocną",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Nie zamknięte po ponad 1 minucie od otwarcia",
    "sensor_set_ifttt_triggle_name_2": "2 minuty bezzałogowe",
    "sensor_set_ifttt_triggle_name_3": "Odtwórz określony dzwonek",
    "sensor_set_ifttt_triggle_name_4": "Włączanie / wyłączanie lampki nocnej",
    "sensor_set_ifttt_triggle_name_5": "Indukcyjne światło nocne",
    "sensor_set_ifttt_triggle_name_6": "Wyłącz lampkę nocną",
    "sensor_set_ifttt_triggle_name_7": "Światło nocne",
    "sensor_set_ifttt_triggle_name_8": "Alarm wł. / Wył",
    "common_scene_execute_partiallysucceed": "Część zadań wykonano pomyślnie",
    "common_short_date_mon": "Pon",
    "common_short_date_tues": "Wto",
    "common_short_date_wed": "Śr",
    "common_short_date_thur": "Cz.",
    "common_short_date_fri": "Pia",
    "common_short_date_sat": "Sob",
    "common_short_date_sun": "Nie",
    "common_repeat_timer_title": "Powtórz opcję",
    "common_repeat_self_timer_title": "Niestandardowe powtórzenie",
    "common_on": "WŁ",
    "common_off": "WYŁ",
    "common_timer": "Czasomierz",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-카운트 다운",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Dzisiaj",
    "common_plug_month_elec": "Miesiąc",
    "common_plug_current_power": "Bieżący",
    "common_setting_ifttt_auto_detail": "Automatyzacja",
    "mi_comboHub_mainPage_guard_base": "Podstawowa",
    "mi_comboHub_mainPage_guard_home": "Domowa",
    "mi_comboHub_mainPage_guard_away": "Poza domem",
    "mi_comboHub_mainPage_guard_sleep": "Uśpienie",
    "common_comboHub_triggle_device_alert": "Alarm",
    "common_comboHub_triggle_device_opened_guard": "(Został włączony dla ochrony {XX}.)",
    "common_comboHub_triggle_device_only_open_basic": "(Można go użyć tylko w przypadku ochrony podstawowej.)",
    "common_comboHub_triggle_device_opened_basic": "(Został włączony dla ochrony podstawowej.)",
    "common_setting_homekit_device_desc": "Urządzenie można skonfigurować i skorzystać z niego w aplikacji Apple Home.",
    "common_ifttt_triggleName_switch": "Alarm jest wyzwalany, gdy zmienia się status przełącznika.",
    "common_ifttt_triggleName_vibration": "Alarm jest wyzwalany, gdy zmienia się status.",
    "common_ifttt_triggleName_cube": "Alarm jest wyzwalany, gdy po okresie nieaktywności zostaje przesunięty o ponad 1 minutę.",
    "common_ifttt_triggleName_magnet": "Alarm jest wyzwalany, gdy zmienia się status czujnika drzwi lub okna.",
    "common_ifttt_triggleName_motion": "Ktoś się poruszył i wyzwolił alarm.",
    "common_timer_light_timer_light_period": "Okres czasu",
    "common_timer_light_timer_on": "Czas na",
    "common_timer_light_timer_off": "Czas skończył się",
    "common_timer_light_timer_time_after": "Czas rozpoczęcia po godzinie zakończenia",
    "common_lumi_sensor_setting_battery": "Akumulator",
    "common_lumi_sensor_setting_battery_normal": "Normalny",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Разряженный аккумулятор, замените аккумулятор",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Urządzenie wyzwalające alarm",
    "mi_comboHub_triggleDevices_deleting": "Usuwanie...",
    "mi_comboHub_triggleSubDevices_setting": "Trwa konfigurowanie…",
    "mi_comboHub_triggle_device_header_title_1": "Urządzenia, których nie można włączyć",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "Podstawowa ochrona to 24-godzinny tryb ochrony, którego nie można wyłączyć. Urządzenia sparowane z centralą, wymagane do stałego monitorowania środowiska, np. czujniki dymu, czujniki gazu, czujniki wycieków wody, zostaną włączone jako domyślne urządzenia podstawowej ochrony wyzwalające alarm.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Został włączony jako urządzenie wyzwalające w ramach ochrony domowej, ochrony poza domem lub ochrony snu; nie można go użyć jako ochrony podstawowej.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Po ustawieniu urządzenia wyzwalającego można włączyć ochronę domową.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Został włączony jako urządzenie wyzwalające w ramach ochrony podstawowej; nie można go użyć jako ochrony domowej.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Po ustawieniu urządzenia wyzwalającego można włączyć ochronę poza domem.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Został włączony jako urządzenie wyzwalające w ramach ochrony podstawowej; nie można go użyć jako ochrony poza domem.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Po ustawieniu urządzenia wyzwalającego można włączyć ochronę snu.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Został włączony jako urządzenie wyzwalające w ramach ochrony podstawowej; nie można go użyć jako ochrony snu.",
    "mi_comboHub_triggle_device_empty_tip": "Brak urządzeń sparowanych z tym centrum kontroli, które można by wykorzystać do wyzwolenia alarmu, np. czujnik ruchu, czujnik okien i drzwi czy bezprzewodowy wyłącznik.",
    "mi_comboHub_triggle_device_go_to_bug": "Kup",
    "mi_commonHub_setting_nightlight_tomorrow": "Następnego dnia",
    "mi_commonHub_setting_nightlight_allday": "Cały dzień",
    "mi_ifttt_launch": "Jeśli dowolny warunek jest spełniony",
    "mi_ifttt_action": "to",
    "mi_commonHub_nightlight_open": "Włącz światło nocne",
    "mi_commonHub_nightlight_motion_limit": "Można wybrać maksymalnie 9 czujników ludzkiego ciała",
    "mi_commonHub_nightlight_delay_close_min": "Wyłącz światło nocne za {value} minut/-y",
    "mi_commonHub_go_back_title": "Wyjdź",
    "mi_commonHub_go_back_content": "Zaniechać zmian i opuścić teraz?",
    "mi_commonHub_setting_nightlight": "Indukcyjne oświetlenie nocne",
    "mi_commonHub_nightlight_commont": "Gdy {value} znajduje się w ciemnym otoczeniu",
    "mi_commonHub_nightlight_timer": "Okres indukcyjny",
    "mi_commonHub_linkage_alarm_number_ten": "Można wybrać maksymalnie 10 alarmów bramy",
    "common_offline": "offline",
    "mi_commonHub_linkage_alarm_footer_text": "Jeśli funkcja łączenia alarmu z centrum kontroli jest włączona, a centrum kontroli zostało wyzwolone, wyzwoli się również dźwięk dzwonka towarzyszący alarmowi i migające światła wszystkich centrów kontroli.",
    "mi_commonHub_linkage_alarm": "Alarm powiązania",
    "mi_commonHub_linkage_alarm_dis": "Alarm powiązania anulowany"
  };
  exports.default = pl;
},10043,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ru = {
    "langugeName": "俄语",
    "common_setting_title": "Настройки",
    "common_setting_feature_setting": "Настройки функции",
    "common_setting_general_setting": "Общие настройки",
    "common_setting_device_name": "Имя устройства",
    "common_setting_multiswitch": "Настройка кнопок",
    "common_setting_device_timeZone": "Региональные настройки",
    "common_setting_location_management": "Управление местоположением",
    "common_setting_share_device": "Предоставление доступа к устройству",
    "common_setting_ifttt_auto": "Автоматизация",
    "common_setting_btGateway": "Bluetooth Mesh-шлюз",
    "common_setting_btGateway_status_read_fail": "Не удалось получить статус Bluetooth Mesh- шлюза",
    "cocommon_setting_btGateway_connected": "Подключённые устройства Bluetooth",
    "common_setting_firmware_upgrate": "Проверка наличия обновлений встроенного ПО",
    "common_setting_more_setting": "Дополнительные настройки",
    "common_setting_add_to_desktop": "Добавить на главный экран",
    "common_setting_privacy_agreement": "Пользовательское соглашение и политика конфиденциальности",
    "common_setting_delete_device": "Удалить устройство",
    "common_setting_help_page": "Справка",
    "common_setting_more_seting_security": "Настройки безопасности",
    "common_setting_more_seting_faq": "Часто задаваемые вопросы",
    "common_setting_more_seting_isssues": "Отзыв",
    "common_setting_user_agreement": "Лицензия на программное обеспечение и соглашение об обслуживании",
    "common_setting_privacy_policy": "Политика конфиденциальности",
    "common_setting_feature_plug_in": "Версия плагина",
    "common_setting_homekit_device_add": "Сопряжение с HomeKit",
    "common_setting_homekit_device_bound": "у нас есть статистика",
    "common_setting_homekit_device_noBind": "несвязанный",
    "common_log_title": "Журнал",
    "common_log_today": "Сегодня",
    "common_log_yesterday": "Вчера",
    "common_log_no_logs": "Нет журнала",
    "common_log_loading": "Загрузка",
    "common_log_loading_with_dot": "Загрузка ...",
    "common_log_logDataHasloaded": "Журналы полностью загружены",
    "common_log_all_data_has_been_loaded": "Все данные загружены",
    "common_log_no_data": "Нет данных",
    "common_cancel": "Отмена",
    "common_ok": "ОК",
    "common_manufacturer": "Produit fabriqué par",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Не удается подключиться к сети",
    "common_tips_battery_low": "Низкий уровень заряда аккумулятора",
    "common_tips_iknow": "OK",
    "common_button_done": "Готово",
    "common_button_delete": "Удалить",
    "common_button_retry": "Повторить попытку",
    "common_button_save": "Сохранить",
    "common_tips_delete_succeed": "Удалено",
    "common_tips_delete_failed": "Не удалось удалить",
    "common_tips_loading_failed": "Не удалось загрузить",
    "common_tips_request_failed": "Ошибка запроса. Проверьте сеть.",
    "common_button_prev": "Назад",
    "common_button_next": "Далее",
    "common_button_changename": "Переименовать",
    "common_date_workday": "С понедельника по пятницу",
    "common_date_weekend": "По будням",
    "common_date_selfdefine": "Другой",
    "common_date_mon": "Понедельник",
    "common_date_tues": "Вторник",
    "common_date_wed": "Среда",
    "common_date_thur": "Четверг",
    "common_date_fri": "Пятница",
    "common_date_sat": "Суббота",
    "common_date_sun": "Воскресенье",
    "common_date_day": " День",
    "common_date_week": " Неделя",
    "common_date_month": " Месяц",
    "common_date_hour": " ч",
    "common_date_minute": " мин",
    "common_date_second": " с",
    "common_tips_discard_operation": "Отменить текущую операцию?",
    "common_tips_setting": "Идет установка. Подождите...",
    "common_tips_setting_failed": "Не удалось установить",
    "common_tips_loading_failed_retry": "Не удалось выполнить загрузку. Коснитесь, чтобы повторить попытку",
    "common_tips_shared_no_promision": "У общего устройства нет разрешения",
    "common_electricity": "Статистика электричества",
    "common_power_history": "Запись журнала энергопотребления",
    "common_hardware_update_updating": "Обновление прошивки, подождите…",
    "common_hardware_update_default": "Доступна новая версия прошивки ({version}), обновить сейчас?",
    "common_hardware_update_isforce": "Текущая версия прошивки вашего устройства устарела. Обновите ее до последней версии ({version}).",
    "common_hardware_update": "Обновить",
    "common_out": "Выйти из системы",
    "common_hardware_checkupdate": "Просмотреть данные обновления",
    "common_operation_fail": "Сбой операции",
    "common_repeat_everyday": "Ежедневно",
    "common_repeat_once": "Один раз",
    "common_repeat_tomorrow": "Завтра",
    "comon_unit_kwh": " кВт⋅ч",
    "comon_unit_w": " Вт",
    "common_setting_device_delete_tip": "Устройство будет удалено из списка.",
    "common_setting_device_delete_confirm": "Удалить устройство?",
    "common_voice_mute": "Бесшумный режим",
    "common_voice_high": "Высокая",
    "common_voice_middle": "Средняя",
    "common_voice_low": "Низкая",
    "sub_device_list_title": "Дочернее устройство подключено",
    "sub_device_list_header_tips": "Следующие подчиненные устройства уже сопряжены с этим контроллером для умного дома.",
    "sub_device_list_empty_tips": "Нет подчиненных устройств, сопряженных с этим контроллером для умного дома.",
    "sub_device_list_name_cant_empty": "Имя устройства не может быть пустым",
    "sub_device_list_name_cant_support_emoji": "Не поддерживает выражения Emoji",
    "sub_device_list_name_cant_support_special_char": "Имя не может содержать специальные символы",
    "sub_device_list_name_cant_more_forty": "Имя не может превышать 40 символов",
    "sub_device_list_name_cant_same": "Имя устройства не может быть одинаковым",
    "sub_device_list_device_offline": "Устройство не в сети",
    "sub_device_list_selected": "{XX} пункт выбран",
    "sub_device_list_delete_multi_device": "Вы уверены, что хотите удалить выбранные устройства {XX}?",
    "ifttt_triggle_single_press": "Щелкните",
    "ifttt_triggle_double_press": "Нажмите и удерживайте",
    "ifttt_triggle_long_press": "Дважды щелкните",
    "ifttt_triggle_shake": "Потрясите",
    "ifttt_triggle_someone_moved": "Зафиксировано движение",
    "ifttt_triggle_windoor_open": "Дверь или окно открыта(-о)",
    "ifttt_triggle_moved_afteronemin": "Перемещено после одной минуты бездействия",
    "ifttt_triggle_detect_vibration": "Обнаружена вибрация",
    "ifttt_triggle_detect_fall": "Обнаружено падение",
    "ifttt_triggle_detect_tilting": "Ощущение наклона",
    "ifttt_triggle_fire_alert": "Пожарная тревога",
    "ifttt_triggle_gas_leakage_alert": "Обнаружена утечка газа",
    "ifttt_triggle_flood_alert": "Обнаружено подтопление",
    "guard_type_basic": "Основной режим охранной системы",
    "guard_type_home": "Режим охранной системы «дома»",
    "guard_type_away": "Режим охранной системы «вне дома»",
    "guard_type_sleep": "Режим охранной системы «сон»",
    "ifttt_push_title_triggle_alert_1": "В {XX} {YY} вызывает тревогу",
    "ifttt_push_title_triggle_alert_2": "В {XX} {YY} чувствует, что кто-то двигается, чтобы вызвать тревогу",
    "ifttt_push_title_triggle_alert_3": "В {XX} {YY} включает тревогу триггера",
    "ifttt_push_title_triggle_alert_4": "В {XX}, {YY} чувства перемещаются",
    "ifttt_push_title_triggle_alert_5": "В {XX} {YY} чувствует тревогу затопления",
    "ifttt_push_title_triggle_alert_6": "В {XX} {YY} обнаружена концентрация газа, превышающая стандартную",
    "ifttt_push_title_triggle_alert_7": "В {XX} {YY} обнаружен дым",
    "common_ifttt_scene_execute_result_fail": "Выполнение не удалось",
    "common_ifttt_scene_execute_result_unknow_error": "Ненормальная ошибка",
    "common_ifttt_scene_execute_result_time_out": "Тайм-аут реализации",
    "common_ifttt_scene_execute_result_camera_sleep": "Камера спит",
    "common_ifttt_device_offline": "(Offline)",
    "timersetting_on": "Время начала",
    "timersetting_off": "Время окончания",
    "timersetting_empty": "Не задано",
    "timersetting_perio": "Активно в течение",
    "common_start": "Пуск",
    "common_end": "конец",
    "common_color": "индикатора",
    "common_open": "Включить",
    "common_scene_name_lm_scene_1_1": "Когда сигнал тревоги, кто-то передал сигнал тревоги",
    "common_scene_name_lm_scene_1_2": "Дверь и окно открывают сигнализацию при предупреждении",
    "common_scene_name_lm_scene_1_3": "Когда будильник включен, беспроводной переключатель нажимает на будильник.",
    "common_scene_name_lm_scene_1_4": "При получении оповещения кубик Рубика срабатывает на некоторое время.",
    "common_scene_name_lm_scene_1_5": "При получении предупреждения статические и статические наклейки запускаются в течение двух минут, и срабатывает сигнализация.",
    "common_scene_name_lm_scene_2_1": "Кто-то прошел, ночной свет был освещен",
    "common_scene_name_lm_scene_3_1": "Беспроводной переключатель нажимает на дверной звонок",
    "common_scene_name_lm_scene_3_2": "Дверной звонок срабатывает при открытии двери или окна",
    "common_scene_name_lm_scene_3_3": "Кто-то передал звонок",
    "common_scene_name_lm_scene_4_1": "Выключать будильник при прохождении человека",
    "common_scene_name_lm_scene_4_2": "Выключать будильник при открытии двери или окна",
    "common_scene_name_lm_scene_4_3": "Беспроводной выключатель выключает будильник",
    "common_scene_name_lm_scene_5_1": "Выявление дыма приведет к срабатыванию тревожного сигнала центрального контроллера.",
    "common_scene_name_lm_scene_5_2": "Выявление газа приведет к срабатыванию тревожного сигнала центрального контроллера.",
    "common_scene_name_lm_scene_5_3": "Выявление утечки воды приведет к срабатыванию тревожного сигнала центрального контроллера.",
    "common_close": "Отключить",
    "sensor_set_ifttt_config_success": "Настроено",
    "common_automation_configuring": "Настройка автоматизации пакета, пожалуйста, подождите ...",
    "sensor_set_ifttt_config_fail": "Конфигурация не удалась",
    "sensor_set_ifttt_config_fail_tip": "1. Вам необходимо подключить шлюз к Wi-Fi \n2. Вам необходимо подключить телефон к Wi-Fi \n3. Убедитесь, что Wi-Fi работает нормально.",
    "mi_linuxHub_guard_guard_timer": "Время опекуна",
    "mi_linuxHub_timer_light_name": "Фонарь таймер",
    "mi_linuxHub_lazy_clock_name": "Будильник",
    "sensor_set_ifttt_scene_name_1": "Напоминание об открытии двери",
    "sensor_set_ifttt_scene_name_2": "Нажмите на беспроводной переключатель, чтобы включить / выключить ночной свет",
    "sensor_set_ifttt_scene_name_3": "Двойной щелчок по сигналу переключателя беспроводного коммутатора",
    "sensor_set_ifttt_scene_name_4": "Кто-то прошел, ночной свет был освещен",
    "sensor_set_ifttt_scene_name_5": "2 минуты безлюдного ночного света",
    "sensor_set_ifttt_scene_name_6": "Кто-то двигает ночной свет",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Не закрывается более чем через 1 минуту после открытия",
    "sensor_set_ifttt_triggle_name_2": "2 минуты беспилотный",
    "sensor_set_ifttt_triggle_name_3": "Воспроизвести указанный рингтон",
    "sensor_set_ifttt_triggle_name_4": "Вкл / выкл ночной свет",
    "sensor_set_ifttt_triggle_name_5": "Индукционный ночной свет",
    "sensor_set_ifttt_triggle_name_6": "Выключить ночной свет",
    "sensor_set_ifttt_triggle_name_7": "Ночной свет",
    "sensor_set_ifttt_triggle_name_8": "Вкл / выкл предупреждение",
    "common_scene_execute_partiallysucceed": "Часть задач успешно завершена",
    "common_short_date_mon": "ПН",
    "common_short_date_tues": "ВТ",
    "common_short_date_wed": "СР",
    "common_short_date_thur": "ЧТ",
    "common_short_date_fri": "ПТ",
    "common_short_date_sat": "СБ",
    "common_short_date_sun": "ВС",
    "common_repeat_timer_title": "Повторить вариант",
    "common_repeat_self_timer_title": "Пользовательское повторение",
    "common_on": "ВКЛ",
    "common_off": "ВЫКЛ",
    "common_timer": "Таймер",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Odliczanie",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Сегодня",
    "common_plug_month_elec": "Месяц",
    "common_plug_current_power": "Ток",
    "common_setting_ifttt_auto_detail": "Автоматизация",
    "mi_comboHub_mainPage_guard_base": "Базовый",
    "mi_comboHub_mainPage_guard_home": "дома",
    "mi_comboHub_mainPage_guard_away": "вне дома",
    "mi_comboHub_mainPage_guard_sleep": "Сон",
    "common_comboHub_triggle_device_alert": "Оповещение",
    "common_comboHub_triggle_device_opened_guard": "(Включен для режима охранной системы {XX}.)",
    "common_comboHub_triggle_device_only_open_basic": "(Может использоваться толькодля основного режима охранной системы.)",
    "common_comboHub_triggle_device_opened_basic": "(Был включен для основного режима охранной системы.)",
    "common_setting_homekit_device_desc": "Устройство можно настроить и использовать в приложении Apple Home.",
    "common_ifttt_triggleName_switch": "Сигнал оповещения срабатывает, когда изменяется состояние переключателя.",
    "common_ifttt_triggleName_vibration": "Сигнал оповещения срабатывает, когда изменяется состояние.",
    "common_ifttt_triggleName_cube": "Сигнал оповещения срабатывает при обнаружении движения после периода неактивности более 1 минуты.",
    "common_ifttt_triggleName_magnet": "Сигнал оповещения срабатывает, когда изменяется состояние датчика двери или окна.",
    "common_ifttt_triggleName_motion": "Обнаружено движение, вызвавшее срабатывание сигнала оповещения.",
    "common_timer_light_timer_light_period": "Период времени",
    "common_timer_light_timer_on": "Приурочен к",
    "common_timer_light_timer_off": "Тайм-аут",
    "common_timer_light_timer_time_after": "Время начала после времени окончания",
    "common_lumi_sensor_setting_battery": "Аккумулятор",
    "common_lumi_sensor_setting_battery_normal": "Нормальный",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Batterie faible, veuillez remplacer la batterie",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Устройство запуска звукового сигнала",
    "mi_comboHub_triggleDevices_deleting": "Удаление…",
    "mi_comboHub_triggleSubDevices_setting": "Настройка параметров…",
    "mi_comboHub_triggle_device_header_title_1": "Устройства не могут быть включены",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "Основной режим охранной системы — это 24-часовой режим охранной системы, который нельзя отключить. Устройства, связанные с центральным контроллером, которые должны непрерывно следить за окружением, например, детекторы дыма, детекторы газа или датчики утечки воды включены по умолчанию как устройства срабатывания охранной системы.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Был включен как устройство срабатывания для систем «дома», «вне дома» или «сон» и не может использоваться как основной режим охранной системы.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "После настройки устройства срабатывания можно включить режим охранной системы «дома».",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Был включен как устройство срабатывания для основного режима охранной системы, не может использоваться для режима охранной системы «дома».",
    "mi_comboHub_triggle_device_header1_subtitle_away": "После настройки режима срабатывания можно включить режим охранной системы «вне дома».",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Был включен как устройство срабатывания для основного режима охранной системы, не может использоваться для режима охранной системы «вне дома».",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "После настройки устройства срабатывания можно включить режим охранной системы «сон».",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Был включен как устройство срабатывания для основного режима охранной системы, не может использоваться для режима охранной системы «сон».",
    "mi_comboHub_triggle_device_empty_tip": "С этим контроллером для умного дома не сопряжено ни одно устройство, способное активировать тревогу (например, датчик движения, датчик открывания окон и дверей или беспроводной переключатель).",
    "mi_comboHub_triggle_device_go_to_bug": "Купить",
    "mi_commonHub_setting_nightlight_tomorrow": "Следующий день",
    "mi_commonHub_setting_nightlight_allday": "Весь день",
    "mi_ifttt_launch": "Если выполняется любое условие",
    "mi_ifttt_action": "Тогда",
    "mi_commonHub_nightlight_open": "Включить дежурное освещение",
    "mi_commonHub_nightlight_motion_limit": "Можно выбрать только до 9 датчиков человеческого тела.",
    "mi_commonHub_nightlight_delay_close_min": "Выключить дежурное освещение через {value} мин",
    "mi_commonHub_go_back_title": "Выйти",
    "mi_commonHub_go_back_content": "Отменить изменения и выйти?",
    "mi_commonHub_setting_nightlight": "Индукционное ночное освещение",
    "mi_commonHub_nightlight_commont": "Когда {value} в темноте",
    "mi_commonHub_nightlight_timer": "Индукционный период",
    "mi_commonHub_linkage_alarm_number_ten": "Можно выбрать только до 10 сигналов шлюза",
    "common_offline": "Offline",
    "mi_commonHub_linkage_alarm_footer_text": "При срабатывании контроллера для умного дома с активированной функцией обмена тревожными сигналами, будут активированы звуковая сигнализация и мигающие индикаторы всех контроллеров для умного дома.",
    "mi_commonHub_linkage_alarm": "Звуковой сигнал при соединении",
    "mi_commonHub_linkage_alarm_dis": "Звуковой сигнал при соединении отменен"
  };
  exports.default = ru;
},10046,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var th = {
    "langugeName": "泰语",
    "common_setting_title": "การตั้งค่า",
    "common_setting_feature_setting": "การตั้งค่าฟังก์ชั่น",
    "common_setting_general_setting": "การตั้งค่าทั่วไป",
    "common_setting_device_name": "ชื่ออุปกรณ์",
    "common_setting_multiswitch": "การตั้งค่าปุ่ม",
    "common_setting_device_timeZone": "การตั้งค่าภูมิภาค",
    "common_setting_location_management": "การจัดการตำแหน่งที่ตั้ง",
    "common_setting_share_device": "กำลังแชร์อุปกรณ์",
    "common_setting_ifttt_auto": "ระบบอัตโนมัติ",
    "common_setting_btGateway": "บลูทูธเมชเกตเวย์",
    "common_setting_btGateway_status_read_fail": "ไม่สามารถกู้คืนสถานะของบลูทูธเมชเกตเวย์ได้",
    "cocommon_setting_btGateway_connected": "อุปกรณ์บลูทูธที่เชื่อมต่อ",
    "common_setting_firmware_upgrate": "ตรวจสอบหาการอัปเดตเฟิร์มแวร์",
    "common_setting_more_setting": "การตั้งค่าเพิ่มเติม",
    "common_setting_add_to_desktop": "เพิ่มไปยังหน้าโฮม",
    "common_setting_privacy_agreement": "ข้อตกลงผู้ใช้งานและนโยบายความเป็นส่วนตัว",
    "common_setting_delete_device": "ลบอุปกรณ์",
    "common_setting_help_page": "ความช่วยเหลือ",
    "common_setting_more_seting_security": "การตั้งค่าความปลอดภัย",
    "common_setting_more_seting_faq": "คำถามที่พบบ่อย",
    "common_setting_more_seting_isssues": "คำติชม",
    "common_setting_user_agreement": "สิทธิในการใช้งานซอฟต์แวร์และข้อตกลงการให้บริการ",
    "common_setting_privacy_policy": "นโยบายความเป็นส่วนตัว",
    "common_setting_feature_plug_in": "เวอร์ชันปลั๊กอิน",
    "common_setting_homekit_device_add": "จับคู่กับ HomeKit",
    "common_setting_homekit_device_bound": "ขอบเขต",
    "common_setting_homekit_device_noBind": "หลุด",
    "common_log_title": "รายการบันทึก",
    "common_log_today": "วันนี้",
    "common_log_yesterday": "เมื่อวานนี้",
    "common_log_no_logs": "ไม่มีรายการบันทึก",
    "common_log_loading": "กำลังโหลด",
    "common_log_loading_with_dot": "กำลังโหลด...",
    "common_log_logDataHasloaded": "รายการบันทึกได้รับการโหลดเรียบร้อย",
    "common_log_all_data_has_been_loaded": "ข้อมูลทั้งหมดได้รับการโหลดแล้ว",
    "common_log_no_data": "ไม่มีข้อมูล",
    "common_cancel": "ยกเลิก",
    "common_ok": "ตกลง",
    "common_manufacturer": "ผลิตโดย",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "ไม่สามารถเชื่อมต่อกับเครือข่ายได้",
    "common_tips_battery_low": "แบตเตอรี่ต่ำ",
    "common_tips_iknow": "ตกลง",
    "common_button_done": "เสร็จสิ้น",
    "common_button_delete": "ลบ",
    "common_button_retry": "ลองอีกครั้ง",
    "common_button_save": "บันทึก",
    "common_tips_delete_succeed": "ทำการลบเรียบร้อย",
    "common_tips_delete_failed": "ไม่สามารถทำการลบได้",
    "common_tips_loading_failed": "ไม่สามารถโหลดได้",
    "common_tips_request_failed": "ไม่สามารถส่งคำร้องขอได้ ตรวจสอบเครือข่ายของคุณ",
    "common_button_prev": "ย้อนกลับ",
    "common_button_next": "ถัดไป",
    "common_button_changename": "ตั้งชื่อใหม่",
    "common_date_workday": "จันทร์ถึงศุกร์",
    "common_date_weekend": "สุดสัปดาห์",
    "common_date_selfdefine": "กำหนดเอง",
    "common_date_mon": "จันทร์",
    "common_date_tues": "อังคาร",
    "common_date_wed": "พุธ",
    "common_date_thur": "พฤหัสฯ",
    "common_date_fri": "ศุกร์",
    "common_date_sat": "เสาร์",
    "common_date_sun": "อาทิตย์",
    "common_date_day": " วัน",
    "common_date_week": " สัปดาห์",
    "common_date_month": " เดือน",
    "common_date_hour": " ชม.",
    "common_date_minute": " น.",
    "common_date_second": " ว.",
    "common_tips_discard_operation": "ยกเลิกการดำเนินการในปัจจุบันหรือไม่?",
    "common_tips_setting": "กำลังตั้งค่าโปรดรอ ...",
    "common_tips_setting_failed": "การตั้งค่าล้มเหลว",
    "common_tips_loading_failed_retry": "ไม่สามารถโหลดได้ แตะเพื่อลองอีกครั้ง",
    "common_tips_shared_no_promision": "The shared device has no permission",
    "common_electricity": "สถิติไฟฟ้า",
    "common_power_history": "บันทึกประวัติพลังงาน",
    "common_hardware_update_updating": "กำลังอัปเดตเฟิร์มแวร์ กรุณารอ…",
    "common_hardware_update_default": "มีเฟิร์มแวร์เวอร์ชั่นใหม่ ({version}) พร้อมใช้งาน จะอัปเดตเลยหรือไม่",
    "common_hardware_update_isforce": "เวอร์ชันเฟิร์มแวร์ในปัจจุบันของอุปกรณ์ของคุณเป็นเวอร์ชันเก่า กรุณาอัปเดตเป็นเวอร์ชันล่าสุด ({version})",
    "common_hardware_update": "อัปเดตตอนนี้เลย",
    "common_out": "ลงชื่อออก",
    "common_hardware_checkupdate": "ดูการอัปเดต",
    "common_operation_fail": "การดำเนินการล้มเหลว",
    "common_repeat_everyday": "ทุกวัน",
    "common_repeat_once": "ครั้งหนึ่ง",
    "common_repeat_tomorrow": "วันพรุ่งนี้",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "อุปกรณ์นี้จะถูกลบออกจากรายการ",
    "common_setting_device_delete_confirm": "ลบอุปกรณ์หรือไม่",
    "common_voice_mute": "เงียบ",
    "common_voice_high": "สูง",
    "common_voice_middle": "ปานกลาง",
    "common_voice_low": "ต่ำ",
    "sub_device_list_title": "รายชื่ออุปกรณ์สำหรับเด็ก",
    "sub_device_list_header_tips": "อุปกรณ์สำหรับเด็กดังต่อไปนี้ได้รับการจับคู่กับฮับนี้แล้ว",
    "sub_device_list_empty_tips": "ไม่มีอุปกรณ์สำหรับเด็กซึ่งได้รับการจับคู่กับฮับควบคุมนี้",
    "sub_device_list_name_cant_empty": "ชื่ออุปกรณ์ต้องไม่ว่างเปล่า",
    "sub_device_list_name_cant_support_emoji": "ไม่รองรับการแสดงออกอิโมจิ",
    "sub_device_list_name_cant_support_special_char": "ชื่อต้องไม่มีสัญลักษณ์พิเศษ",
    "sub_device_list_name_cant_more_forty": "ชื่อต้องไม่เกิน 40 ตัวอักษร",
    "sub_device_list_name_cant_same": "ชื่ออุปกรณ์ต้องไม่เหมือนกัน",
    "sub_device_list_device_offline": "อุปกรณ์ออฟไลน์",
    "sub_device_list_selected": "เลือก {XX} รายการ",
    "sub_device_list_delete_multi_device": "คุณแน่ใจว่าจะลบอุปกรณ์ {XX} ที่เลือกหรือไม่",
    "ifttt_triggle_single_press": "คลิก",
    "ifttt_triggle_double_press": "กดค้างไว้",
    "ifttt_triggle_long_press": "ดับเบิลคลิก",
    "ifttt_triggle_shake": "เขย่า",
    "ifttt_triggle_someone_moved": "มีคนย้ายไปแล้ว",
    "ifttt_triggle_windoor_open": "หน้าต่าง/ประตูเปิดอยู่",
    "ifttt_triggle_moved_afteronemin": "ย้ายหลังจากไม่มีกิจกรรมหนึ่งนาที",
    "ifttt_triggle_detect_vibration": "ตรวจพบการสั่นสะเทือน",
    "ifttt_triggle_detect_fall": "ตรวจพบการร่วงหล่น",
    "ifttt_triggle_detect_tilting": "การตรวจจับการเอียง",
    "ifttt_triggle_fire_alert": "การแจ้งเหตุเพลิงไหม้",
    "ifttt_triggle_gas_leakage_alert": "การแจ้งเตือนการรั่วของก๊าซ",
    "ifttt_triggle_flood_alert": "การแจ้งเตือนน้ำท่วม",
    "guard_type_basic": "การปกป้องขั้นพื้นฐาน",
    "guard_type_home": "การปกป้องเมื่ออยู่บ้าน",
    "guard_type_away": "การปกป้องเมื่อไม่อยู่บ้าน",
    "guard_type_sleep": "การปกป้องในยามหลับ",
    "ifttt_push_title_triggle_alert_1": "ใน {XX} {YY} ทริกเกอร์การเตือน",
    "ifttt_push_title_triggle_alert_2": "ใน {XX}, {YY} จะรู้สึกว่ามีใครบางคนกำลังเคลื่อนไหวเพื่อส่งสัญญาณ",
    "ifttt_push_title_triggle_alert_3": "ใน {XX}, {YY} จะเปิดการแจ้งเตือนทริกเกอร์",
    "ifttt_push_title_triggle_alert_4": "ใน {XX} มีการเคลื่อนไหวประสาทสัมผัส {YY}",
    "ifttt_push_title_triggle_alert_5": "ใน {XX}, {YY} จะตรวจจับสัญญาณเตือนน้ำท่วม",
    "ifttt_push_title_triggle_alert_6": "ใน {XX}, {YY} ตรวจพบความเข้มข้นของก๊าซเกินมาตรฐาน",
    "ifttt_push_title_triggle_alert_7": "ใน {XX}, {YY} ตรวจพบควัน",
    "common_ifttt_scene_execute_result_fail": "การดำเนินการล้มเหลว",
    "common_ifttt_scene_execute_result_unknow_error": "ข้อผิดพลาดที่ผิดปกติ",
    "common_ifttt_scene_execute_result_time_out": "หมดเวลาการใช้งาน",
    "common_ifttt_scene_execute_result_camera_sleep": "กล้องกำลังหลับ",
    "common_ifttt_device_offline": "(ออฟไลน์)",
    "timersetting_on": "เวลาที่เริ่ม",
    "timersetting_off": "เวลาสิ้นสุด",
    "timersetting_empty": "ไม่ได้ตั้งค่า",
    "timersetting_perio": "ใช้งานสำหรับ",
    "common_start": "เริ่ม",
    "common_end": "ปลาย",
    "common_color": "สี",
    "common_open": "เปิดใช้งาน",
    "common_scene_name_lm_scene_1_1": "เมื่อมีการแจ้งเตือนมีคนส่งสัญญาณเตือน",
    "common_scene_name_lm_scene_1_2": "เปิดประตูและหน้าต่างแจ้งเตือนเมื่อมีการแจ้งเตือน",
    "common_scene_name_lm_scene_1_3": "เมื่อเปิดสัญญาณเตือนสวิตช์ไร้สายจะกดสัญญาณเตือน",
    "common_scene_name_lm_scene_1_4": "เมื่อมีการแจ้งเตือน Cube ของ Rubik จะเริ่มทำงานชั่วขณะหนึ่ง",
    "common_scene_name_lm_scene_1_5": "เมื่อมีการแจ้งเตือนสติกเกอร์คงที่และคงที่จะถูกเรียกใช้เป็นเวลาสองนาทีและการแจ้งเตือนจะถูกเรียก",
    "common_scene_name_lm_scene_2_1": "มีคนผ่านไปแสงกลางคืนส่องสว่าง",
    "common_scene_name_lm_scene_3_1": "สวิตช์ไร้สายกดออด",
    "common_scene_name_lm_scene_3_2": "กริ่งประตูจะดังเมื่อประตู/หน้าต่างเปิดอยู่",
    "common_scene_name_lm_scene_3_3": "มีคนส่งเสียงระฆัง",
    "common_scene_name_lm_scene_4_1": "ปิดนาฬิกาปลุกเมื่อมีคนเดินผ่าน",
    "common_scene_name_lm_scene_4_2": "ปิดนาฬิกาปลุกเมื่อประตู/หน้าต่างเปิดอยู่",
    "common_scene_name_lm_scene_4_3": "สวิตช์ไร้สายกดปิดการเตือน",
    "common_scene_name_lm_scene_5_1": "การตรวจจพบควันจะเริ่มการแจ้งเตือนของศูนย์กลาง",
    "common_scene_name_lm_scene_5_2": "การตรวจจพบก๊าซจะเริ่มการแจ้งเตือนของศูนย์กลาง",
    "common_scene_name_lm_scene_5_3": "การตรวจจพบการรั่วของน้ำจะเริ่มการแจ้งเตือนของศูนย์กลาง",
    "common_close": "ปิดใช้งาน",
    "sensor_set_ifttt_config_success": "การกำหนดค่าที่ประสบความสำเร็จ",
    "common_automation_configuring": "กำลังกำหนดค่าแพ็คเกจอัตโนมัติโปรดรอ ...",
    "sensor_set_ifttt_config_fail": "การกำหนดค่าล้มเหลว",
    "sensor_set_ifttt_config_fail_tip": "1. คุณต้องเชื่อมต่อเกตเวย์กับ wifi \n2 คุณต้องเชื่อมต่อโทรศัพท์ของคุณกับ wifi \n3 โปรดตรวจสอบว่า wifi เป็นเรื่องปกติ",
    "mi_linuxHub_guard_guard_timer": "เวลาการ์เดียน",
    "mi_linuxHub_timer_light_name": "โคมไฟจับเวลา",
    "mi_linuxHub_lazy_clock_name": "นาฬิกาปลุก",
    "sensor_set_ifttt_scene_name_1": "เตือนการเปิดประตู",
    "sensor_set_ifttt_scene_name_2": "คลิกสวิตช์ไร้สายเพื่อเปิด / ปิดไฟกลางคืน",
    "sensor_set_ifttt_scene_name_3": "ดับเบิลคลิกที่สวิตช์แจ้งเตือนสวิตช์ไร้สาย",
    "sensor_set_ifttt_scene_name_4": "มีคนผ่านไปแสงกลางคืนส่องสว่าง",
    "sensor_set_ifttt_scene_name_5": "ไฟกลางคืนไร้คนขับ 2 นาทีดับลง",
    "sensor_set_ifttt_scene_name_6": "มีคนย้ายไฟกลางคืนบน",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "ไม่ปิดหลังจากเกิน 1 นาทีหลังจากเปิด",
    "sensor_set_ifttt_triggle_name_2": "หมดกำลังใจ 2 นาที",
    "sensor_set_ifttt_triggle_name_3": "เล่นเสียงเรียกเข้าที่ระบุ",
    "sensor_set_ifttt_triggle_name_4": "เปิด / ปิดไฟกลางคืน",
    "sensor_set_ifttt_triggle_name_5": "แสงกลางคืนเหนี่ยวนำ",
    "sensor_set_ifttt_triggle_name_6": "ปิดไฟกลางคืน",
    "sensor_set_ifttt_triggle_name_7": "ไฟกลางคืน",
    "sensor_set_ifttt_triggle_name_8": "เปิด / ปิดการแจ้งเตือน",
    "common_scene_execute_partiallysucceed": "งานส่วนหนึ่งเสร็จสมบูรณ์เป็นที่เรียบร้อยแล้ว",
    "common_short_date_mon": "周一",
    "common_short_date_tues": "周二",
    "common_short_date_wed": "周三",
    "common_short_date_thur": "周四",
    "common_short_date_fri": "周五",
    "common_short_date_sat": "周六",
    "common_short_date_sun": "周日",
    "common_repeat_timer_title": "Herhaal optie",
    "common_repeat_self_timer_title": "Aangepaste herhaling",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Schedules",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-Countdown",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " เซลเซียส",
    "common_plug_today_elec": "วันนี้",
    "common_plug_month_elec": "เดือน",
    "common_plug_current_power": "ปัจจุบัน",
    "common_setting_ifttt_auto_detail": "ระบบอัตโนมัติ",
    "mi_comboHub_mainPage_guard_base": "ขั้นพื้นฐาน",
    "mi_comboHub_mainPage_guard_home": "เมื่ออยู่บ้าน",
    "mi_comboHub_mainPage_guard_away": "เมื่อไม่อยู่บ้าน",
    "mi_comboHub_mainPage_guard_sleep": "ในยามหลับ",
    "common_comboHub_triggle_device_alert": "การแจ้งเตือน",
    "common_comboHub_triggle_device_opened_guard": "(ถูกเปิดใช้งานสำหรับการปกป้อง {XX})",
    "common_comboHub_triggle_device_only_open_basic": "(สามารถใช้ได้กับการปกป้องขั้นพื้นฐานเท่านั้น)",
    "common_comboHub_triggle_device_opened_basic": "(ถูกเปิดใช้งานสำหรับการปกป้องขั้นพื้นฐาน)",
    "common_setting_homekit_device_desc": "สามารถปรับแต่งและใช้งานอุปกรณ์ในแอป Apple Home ได้",
    "common_ifttt_triggleName_switch": "การแจ้งเตือนจะถูกสั่งงานเมื่อสถานะของสวิตช์มีการเปลี่ยนแปลง",
    "common_ifttt_triggleName_vibration": "การแจ้งเตือนจะถูกสั่งงานเมื่อสถานะมีการเปลี่ยนแปลง",
    "common_ifttt_triggleName_cube": "การแจ้งเตือนจะทำงานเมื่อมีการขยับหลังจากไม่ทำงานมานานเกิน 1 นาที",
    "common_ifttt_triggleName_magnet": "การแจ้งเตือนจะถูกสั่งงานเมื่อสถานะของเซ็นเซอร์ประตูหรือหน้าต่างมีการเปลี่ยนแปลง",
    "common_ifttt_triggleName_motion": "มีคนขยับและทำให้การแจ้งเตือนทำงาน",
    "common_timer_light_timer_light_period": "ระยะเวลา",
    "common_timer_light_timer_on": "หมดเวลาแล้ว",
    "common_timer_light_timer_off": "หมดเวลา",
    "common_timer_light_timer_time_after": "เวลาเริ่มหลังจากสิ้นสุดเวลา",
    "common_lumi_sensor_setting_battery": "แบตเตอรี่",
    "common_lumi_sensor_setting_battery_normal": "ปกติ",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "แบตเตอรี่อ่อน โปรดเปลี่ยนแบตเตอรี่",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "อุปกรณ์สั่งงานการแจ้งเตือน",
    "mi_comboHub_triggleDevices_deleting": "กำลังลบ...",
    "mi_comboHub_triggleSubDevices_setting": "กำลังปรับแต่ง…",
    "mi_comboHub_triggle_device_header_title_1": "อุปกรณ์ที่ไม่สามารถเปิดใช้งานได้",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "การปกป้องขั้นพื้นฐานคือโหมดการปกป้องตลอด 24 ชั่วโมงซึ่งไม่สามารถปิดใช้งานได้ อุปกรณ์ที่ได้รับการจับคู่กับศูนย์กลางอุปกรณ์ซึ่งจำเป็นในการติดตามสภาพแวดล้อมอย่างต่อเนื่อง เช่น อุปกรณ์ตรวจจับควัน อุปกรณ์ตรวจจับก๊าซหรือเซ็นเซอร์ตรวจจับน้ำรั่วซึมจะถูกเปิดใช้งานเป็นอุปกรณ์สั่งงานสำหรับการปกป้องขั้นพื้นฐานตามการตั้งค่าเริ่มต้น",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "ถูกเปิดใช้งานเป็นอุปกรณ์สั่งงานเมื่ออยู่บ้าน เมื่อไม่อยู่บ้านหรือในยามหลับ ไม่สามารถใช้กับการปกป้องขั้นพื้นฐานได้",
    "mi_comboHub_triggle_device_header1_subtitle_home": "หลังตั้งค่าอุปกรณ์สั่งงานแล้ว คุณสามารถเปิดใช้งานการปกป้องเมื่ออยู่บ้านได้",
    "mi_comboHub_triggle_device_header2_subtitle_home": "ถูกเปิดใช้งานเป็นอุปกรณ์สั่งงานสำหรับการปกป้องขั้นพื้นฐาน ไม่สามารถใช้กับการปกป้องเมื่ออยู่บ้านได้",
    "mi_comboHub_triggle_device_header1_subtitle_away": "หลังตั้งค่าอุปกรณ์สั่งงานแล้ว คุณสามารถเปิดใช้งานการปกป้องเมื่อไม่อยู่บ้านได้",
    "mi_comboHub_triggle_device_header2_subtitle_away": "ถูกเปิดใช้งานเป็นอุปกรณ์สั่งงานสำหรับการปกป้องขั้นพื้นฐาน ไม่สามารถใช้กับการปกป้องเมื่อไม่อยู่บ้านได้",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "หลังตั้งค่าอุปกรณ์สั่งงานแล้ว คุณสามารถเปิดใช้งานการปกป้องในยามหลับได้",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "ถูกเปิดใช้งานเป็นอุปกรณ์สั่งงานสำหรับการปกป้องขั้นพื้นฐาน ไม่สามารถใช้กับการปกป้องในยามหลับได้",
    "mi_comboHub_triggle_device_empty_tip": "ไม่มีอุปกรณ์ซึ่งได้รับการจับคู่กับฮับควบคุมนี้ที่สามารถใช้ได้ในการสั่งงานการแจ้งเตือน เช่น เซ็นเซอร์ตรวจจับความเคลื่อนไหว เซ็นเซอร์หน้าต่างและประตูหรือสวิตช์ไร้สาย",
    "mi_comboHub_triggle_device_go_to_bug": "ซื้อ",
    "mi_commonHub_setting_nightlight_tomorrow": "วันถัดไป",
    "mi_commonHub_setting_nightlight_allday": "ทั้งวัน",
    "mi_ifttt_launch": "หากตรงตามเงื่อนไขข้อใดข้อหนึ่ง",
    "mi_ifttt_action": "จากนั้น",
    "mi_commonHub_nightlight_open": "เปิดแสงกลางคืน",
    "mi_commonHub_nightlight_motion_limit": "สามารถเลือกเซ็นเซอร์ร่างกายมนุษย์ได้สูงสุด 9 ตัวเท่านั้น",
    "mi_commonHub_nightlight_delay_close_min": "ปิดแสงกลางคืนใน {value} นาที",
    "mi_commonHub_go_back_title": "ออก",
    "mi_commonHub_go_back_content": "ยกเลิกการเปลี่ยนแปลงและออกตอนนี้เลยหรือไม่?",
    "mi_commonHub_setting_nightlight": "แสงกลางคืนอัตโนมัติ",
    "mi_commonHub_nightlight_commont": "เมื่อ {value} อยู่ในที่มืด",
    "mi_commonHub_nightlight_timer": "ระยะเวลาการเหนี่ยวนำ",
    "mi_commonHub_linkage_alarm_number_ten": "เลือกสัญญาณเตือนเกตเวย์ได้สูงสุด 10 รายการเท่านั้น",
    "common_offline": "ออฟไลน์",
    "mi_commonHub_linkage_alarm_footer_text": "เมื่อเปิดใช้งานฟังก์ชันการเชื่อมต่อการแจ้งเตือนของฮับควบคุมและฮับควบคุมได้รับการสั่งงาน เสียงแจ้งเตือนและไฟกะพริบของฮับควบคุมทั้งหมดจะทำงาน",
    "mi_commonHub_linkage_alarm": "การแจ้งเตือนการเชื่อมต่อ",
    "mi_commonHub_linkage_alarm_dis": "ยกเลิกการแจ้งเตือนการเชื่อมต่อแล้ว"
  };
  exports.default = th;
},10049,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var tr = {
    "langugeName": "土耳其语",
    "common_setting_title": "Ayarlar",
    "common_setting_feature_setting": "İşlev ayarları",
    "common_setting_general_setting": "Genel ayarlar",
    "common_setting_device_name": "Cihaz adı",
    "common_setting_multiswitch": "Tuş ayarları",
    "common_setting_device_timeZone": "Bölgesel ayarlar",
    "common_setting_location_management": "Konum yönetimi",
    "common_setting_share_device": "Cihaz paylaşımı",
    "common_setting_ifttt_auto": "Otomasyon",
    "common_setting_btGateway": "Bluetooth Mesh ağ geçidi",
    "common_setting_btGateway_status_read_fail": "Bluetooth Mesh ağ geçidinin durum bilgisi alınamadı",
    "cocommon_setting_btGateway_connected": "Bağlı Bluetooth cihazları",
    "common_setting_firmware_upgrate": "Donanım yazılımı güncellemelerini kontrol et",
    "common_setting_more_setting": "Ek ayarlar",
    "common_setting_add_to_desktop": "Ana ekrana ekle",
    "common_setting_privacy_agreement": "Kullanıcı Sözleşmesi ve Gizlilik Politikası",
    "common_setting_delete_device": "Cihazı sil",
    "common_setting_help_page": "Yardım",
    "common_setting_more_seting_security": "Güvenlik ayarları",
    "common_setting_more_seting_faq": "SSS",
    "common_setting_more_seting_isssues": "Geri bildirim",
    "common_setting_user_agreement": "Yazılım Lisansı ve Hizmet Anlaşması",
    "common_setting_privacy_policy": "Gizlilik İlkesi",
    "common_setting_feature_plug_in": "Kablolu sürüm",
    "common_setting_homekit_device_add": "HomeKit ile eşleştir",
    "common_setting_homekit_device_bound": "ciltli",
    "common_setting_homekit_device_noBind": "bağsız",
    "common_log_title": "Kayıtlar",
    "common_log_today": "Bugün",
    "common_log_yesterday": "Dün",
    "common_log_no_logs": "Kayıt yok",
    "common_log_loading": "Yükleniyor",
    "common_log_loading_with_dot": "Yükleniyor...",
    "common_log_logDataHasloaded": "Kayıtların tamamı yüklendi",
    "common_log_all_data_has_been_loaded": "Tüm veriler yüklendi",
    "common_log_no_data": "Veri yok",
    "common_cancel": "İptal",
    "common_ok": "Tamam",
    "common_manufacturer": "Tarafından imal edilmiştir",
    "common_lumi": "Lumi United Technology Co., Ltd.",
    "common_tips_network_unconnect": "Ağa bağlanılamadı",
    "common_tips_battery_low": "Düşük batarya",
    "common_tips_iknow": "Tamam",
    "common_button_done": "Bitti",
    "common_button_delete": "Sil",
    "common_button_retry": "Tekrar deneyin",
    "common_button_save": "Kaydet",
    "common_tips_delete_succeed": "Silme başarılı",
    "common_tips_delete_failed": "Silme başarısız",
    "common_tips_loading_failed": "Yüklenemedi",
    "common_tips_request_failed": "Talep başarısız oldu. Ağ bağlantınızı kontrol edin",
    "common_button_prev": "Geri",
    "common_button_next": "Sonraki",
    "common_button_changename": "Yeniden adlandır",
    "common_date_workday": "Pzt - Cum",
    "common_date_weekend": "Haftasonu",
    "common_date_selfdefine": "Özel",
    "common_date_mon": "Pazartesi",
    "common_date_tues": "Salı",
    "common_date_wed": "Çarşamba",
    "common_date_thur": "Perşembe",
    "common_date_fri": "Cuma",
    "common_date_sat": "Cumartesi",
    "common_date_sun": "Pazar",
    "common_date_day": " Gün",
    "common_date_week": " Hafta",
    "common_date_month": " Ay",
    "common_date_hour": " s",
    "common_date_minute": " dak",
    "common_date_second": " san",
    "common_tips_discard_operation": "Mevcut işlem iptal edilsin mi?",
    "common_tips_setting": "Setting, please wait…",
    "common_tips_setting_failed": "Failed to set",
    "common_tips_loading_failed_retry": "Yüklenemedi, tekrar denemek için dokunun",
    "common_tips_shared_no_promision": "The shared device has no permission",
    "common_electricity": "Elektrik istatistikleri",
    "common_power_history": "Power history record",
    "common_hardware_update_updating": "Aygıt yazılımını güncelleniyor, lütfen bekleyin...",
    "common_hardware_update_default": "Aygıt yazılımının yeni sürümü ({version}) mevcut, şimdi güncellensin mi?",
    "common_hardware_update_isforce": "Cihazınızın mevcut aygıt yazılımı sürümü eskimiştir, lütfen son sürümü yükleyin ({version}).",
    "common_hardware_update": "Şimdi güncelle",
    "common_out": "Oturumu kapat",
    "common_hardware_checkupdate": "Güncellemeyi görüntüle",
    "common_operation_fail": "Operasyon başarısız",
    "common_repeat_everyday": "Her gün",
    "common_repeat_once": "Bir kere",
    "common_repeat_tomorrow": "Yarın",
    "comon_unit_kwh": " kWh",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "Cihaz listeden kaldırılacak.",
    "common_setting_device_delete_confirm": "Cihaz şimdi silinsin mi?",
    "common_voice_mute": "Sessiz",
    "common_voice_high": "Yüksek",
    "common_voice_middle": "Orta",
    "common_voice_low": "Düşük",
    "sub_device_list_title": "Çocuk cihazı listesi",
    "sub_device_list_header_tips": "Takip eden çocuk cihazları bu merkezi ünite ile zaten eşleşmiştir.",
    "sub_device_list_empty_tips": "Bu merkezi kontrol ünitesi ile eşleştirilmiş hiçbir çocuk cihazı bulunmuyor.",
    "sub_device_list_name_cant_empty": "Cihaz adı boş olamaz",
    "sub_device_list_name_cant_support_emoji": "Emoji ifadelerini desteklemiyor",
    "sub_device_list_name_cant_support_special_char": "İsim özel semboller içeremez",
    "sub_device_list_name_cant_more_forty": "İsim 40 karakteri aşamaz",
    "sub_device_list_name_cant_same": "Cihaz adı aynı olamaz",
    "sub_device_list_device_offline": "Cihaz çevrimdışı",
    "sub_device_list_selected": "{XX} öğe seçildi",
    "sub_device_list_delete_multi_device": "Seçilen {XX} aygıtları silmek istediğinize emin misiniz?",
    "ifttt_triggle_single_press": "Tıklayın",
    "ifttt_triggle_double_press": "Basın ve basılı tutun",
    "ifttt_triggle_long_press": "Çift tıklayın",
    "ifttt_triggle_shake": "Sallayın",
    "ifttt_triggle_someone_moved": "Birisi hareket etti",
    "ifttt_triggle_windoor_open": "Pencere/kapı açık",
    "ifttt_triggle_moved_afteronemin": "Bir dakika işlem yapılmadığında taşındı",
    "ifttt_triggle_detect_vibration": "Titreşim algılandı",
    "ifttt_triggle_detect_fall": "Düşme algılandı",
    "ifttt_triggle_detect_tilting": "Eğim algılama",
    "ifttt_triggle_fire_alert": "Yangın alarmı",
    "ifttt_triggle_gas_leakage_alert": "Gaz sızıntısı algılandı",
    "ifttt_triggle_flood_alert": "Sel uyarısı",
    "guard_type_basic": "Standart koruyucu",
    "guard_type_home": "Evdeyken koruyucu",
    "guard_type_away": "Evde değilken koruyucu",
    "guard_type_sleep": "Uykuda koruyucu",
    "ifttt_push_title_triggle_alert_1": "{XX} 'de, {YY} bir alarmı tetikler",
    "ifttt_push_title_triggle_alert_2": "{XX} 'de, {YY} bir alarmı tetiklemek için hareket eden birini algılar",
    "ifttt_push_title_triggle_alert_3": "{XX} 'da, {YY} tetikleyici alarmını açar",
    "ifttt_push_title_triggle_alert_4": "{XX} 'de, {YY} hareket edildiğini algılar",
    "ifttt_push_title_triggle_alert_5": "{XX} 'de, {YY} sel alarmını algılar",
    "ifttt_push_title_triggle_alert_6": "{XX} 'de, {YY} standardı aşan bir gaz konsantrasyonu tespit etti.",
    "ifttt_push_title_triggle_alert_7": "{XX} 'de, {YY} duman tespit etti",
    "common_ifttt_scene_execute_result_fail": "İcra başarısız oldu",
    "common_ifttt_scene_execute_result_unknow_error": "Anormal hata",
    "common_ifttt_scene_execute_result_time_out": "Uygulama zaman aşımı",
    "common_ifttt_scene_execute_result_camera_sleep": "Kamera uyuyor",
    "common_ifttt_device_offline": "(Offline)",
    "timersetting_on": "Başlangıç zamanı",
    "timersetting_off": "Bitiş saati",
    "timersetting_empty": "Ayarlanmadı",
    "timersetting_perio": "Aktif",
    "common_start": "Başlat",
    "common_end": "uç",
    "common_color": "rengi",
    "common_open": "Etkinleştir",
    "common_scene_name_lm_scene_1_1": "Uyarı olduğunda, biri alarmı geçti",
    "common_scene_name_lm_scene_1_2": "Uyarı sırasında kapı ve pencere açık alarmı",
    "common_scene_name_lm_scene_1_3": "Alarm açıkken, kablosuz anahtar alarma basar.",
    "common_scene_name_lm_scene_1_4": "Uyarırken, Rubik Küpü bir süre tetiklenir.",
    "common_scene_name_lm_scene_1_5": "Uyarıldığında, statik ve statik çıkartmalar iki dakika boyunca tetiklenir ve alarm tetiklenir.",
    "common_scene_name_lm_scene_2_1": "Biri geçti, gece lambası aydınlatıldı.",
    "common_scene_name_lm_scene_3_1": "Kablosuz anahtar kapı zili basar",
    "common_scene_name_lm_scene_3_2": "Bir kapı/pencere açıldığında kapı zili çalar",
    "common_scene_name_lm_scene_3_3": "Birisi çalan zili geçti",
    "common_scene_name_lm_scene_4_1": "Birisi geçerken çalar saati kapat",
    "common_scene_name_lm_scene_4_2": "Kapı/pencere açıldığında çalar saati kapat",
    "common_scene_name_lm_scene_4_3": "Kablosuz anahtar alarmı bastırır",
    "common_scene_name_lm_scene_5_1": "Duman tespiti, hub alarmını tetikleyecektir.",
    "common_scene_name_lm_scene_5_2": "Gaz tespiti, hub alarmını tetikleyecektir.",
    "common_scene_name_lm_scene_5_3": "Su sızıntısı tespiti, hub alarmını tetikleyecektir.",
    "common_close": "Devre dışı bırak",
    "sensor_set_ifttt_config_success": "Başarılı yapılandırma",
    "common_automation_configuring": "Paket otomasyonu yapılandırılıyor, lütfen bekleyin ...",
    "sensor_set_ifttt_config_fail": "Yapılandırma başarısız oldu",
    "sensor_set_ifttt_config_fail_tip": "1. Ağ geçidini wifi \n2'ye bağlamanız gerekir .. Telefonunuzu wifi \n3'e bağlamanız gerekir. Lütfen wifi'nin normal olduğundan emin olun.",
    "mi_linuxHub_guard_guard_timer": "Koruyucu zamanlama",
    "mi_linuxHub_timer_light_name": "Fener zamanlayıcı",
    "mi_linuxHub_lazy_clock_name": "Çalar saat",
    "sensor_set_ifttt_scene_name_1": "Kapı açma hatırlatma",
    "sensor_set_ifttt_scene_name_2": "Gece lambasını açmak / kapatmak için kablosuz düğmeyi tıklayın",
    "sensor_set_ifttt_scene_name_3": "Kablosuz anahtar anahtarı uyarısına çift tıklayın",
    "sensor_set_ifttt_scene_name_4": "Biri geçti, gece lambası aydınlatıldı.",
    "sensor_set_ifttt_scene_name_5": "2 dakika insansız gece ışığı",
    "sensor_set_ifttt_scene_name_6": "Gece ışığını hareket ettiren biri",
    "sensor_set_ifttt_scene_name_7": "Single press the Wireless Switch to turn plug on/off",
    "sensor_set_ifttt_triggle_name_1": "Açıldıktan sonra 1 dakikadan fazla kapanmadı",
    "sensor_set_ifttt_triggle_name_2": "2 dakika insansız",
    "sensor_set_ifttt_triggle_name_3": "Belirtilen zil sesini çal",
    "sensor_set_ifttt_triggle_name_4": "Açık / kapalı gece lambası",
    "sensor_set_ifttt_triggle_name_5": "İndüksiyon gece lambası",
    "sensor_set_ifttt_triggle_name_6": "Gece lambasını söndür",
    "sensor_set_ifttt_triggle_name_7": "Gece lambası",
    "sensor_set_ifttt_triggle_name_8": "Açık / kapalı uyarısı",
    "common_scene_execute_partiallysucceed": "Kısmen başarıyla çalıştırıldı",
    "common_short_date_mon": "周一",
    "common_short_date_tues": "周二",
    "common_short_date_wed": "周三",
    "common_short_date_thur": "周四",
    "common_short_date_fri": "周五",
    "common_short_date_sat": "周六",
    "common_short_date_sun": "周日",
    "common_repeat_timer_title": "繰り返しオプション",
    "common_repeat_self_timer_title": "カスタムリピート",
    "common_on": "ON",
    "common_off": "OFF",
    "common_timer": "Schedules",
    "common_unit_minute_short": "min",
    "common_count_down": "{XX}-カウントダウン",
    "common_percent": " %",
    "common_percent_str": "% {value}",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "Today",
    "common_plug_month_elec": "Month",
    "common_plug_current_power": "Current",
    "common_setting_ifttt_auto_detail": "Otomasyon",
    "mi_comboHub_mainPage_guard_base": "Standart",
    "mi_comboHub_mainPage_guard_home": "Evde",
    "mi_comboHub_mainPage_guard_away": "Evde değil",
    "mi_comboHub_mainPage_guard_sleep": "Uyku",
    "common_comboHub_triggle_device_alert": "Uyarı",
    "common_comboHub_triggle_device_opened_guard": "({XX} koruyucusu için etkinleştirildi.)",
    "common_comboHub_triggle_device_only_open_basic": "(Yalnızca standart koruyucu için kullanılabilir.)",
    "common_comboHub_triggle_device_opened_basic": "(Standart koruyucu için etkinleştirildi.)",
    "common_setting_homekit_device_desc": "Cihaz, Apple Home uygulamasında yapılandırılabilir ve kullanılabilir.",
    "common_ifttt_triggleName_switch": "Anahtarın durumu değiştiğinde uyarı tetiklenir.",
    "common_ifttt_triggleName_vibration": "Durum değiştiğinde uyarı tetiklenir.",
    "common_ifttt_triggleName_cube": "1 dakikadan uzun süre hareketsiz kaldıktan sonra hareket ettiğinde uyarı tetiklenir.",
    "common_ifttt_triggleName_magnet": "Kapı ya da pencere sensorunun durumu değiştiğinde uyarı tetiklenir.",
    "common_ifttt_triggleName_motion": "Birisi hareket etti ve uyarıyı tetikledi.",
    "common_timer_light_timer_light_period": "Zaman dönemi",
    "common_timer_light_timer_on": "Zaman aşımına uğradı",
    "common_timer_light_timer_off": "Zaman aşımına uğradı",
    "common_timer_light_timer_time_after": "Bitiş zamanından sonra başlangıç zamanı",
    "common_lumi_sensor_setting_battery": "Pil",
    "common_lumi_sensor_setting_battery_normal": "Normal",
    "common_lumi_sensor_battery_guide_title": "Battery replacing guide",
    "common_lumi_sensor_battery_guide_description": "Please replace the battery as shown",
    "common_ifttt_suit_apart_fail": "Partial configure failed",
    "common_ifttt_suit_success_tips": "Can be viewed or edited in the automation list",
    "common_ifttt_suit_apart_fail_tips": "What has been created successfully can be viewed or edited in the automation list",
    "common_ifttt_suit_not_build": "Not created yet",
    "common_kpa": " kPa",
    "common_battery_power_low": "Düşük pil seviyesi,lütfen pili değiştirin",
    "common_overheat_abnormal": "Overheated abnormality",
    "common_overload_abnormal": "Overloaded abnormality",
    "common_overheat_protect": "Overheat protection",
    "common_overload_protect": "Overload protection",
    "common_overheat_warn": "Overheated alert",
    "common_overload_warn": "Overloaded alert",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "Alarm tetikleyici cihaz",
    "mi_comboHub_triggleDevices_deleting": "Siliniyor…",
    "mi_comboHub_triggleSubDevices_setting": "Yapılandırılıyor…",
    "mi_comboHub_triggle_device_header_title_1": "Etkinleştirilemeyen cihazlar",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "Standart koruyucu, devre dışı bırakılamayan 24-saatlik bir koruyucu moddur. Hub’ı ile eşleştirilen, duman dedektörleri, gaz dedektörleri veya su kaçağı sensorları gibi sürekli çevreyi izlemesi gereken cihazlar, varsayılan olarak standart koruyucunun tetikleyici cihazları olarak etkinleştirilecektir.",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "Evde, evde değilken veya uyku koruyucusu için tetikleyici cihaz olarak etkinleştirildi, standart koruyucu için kullanılamaz.",
    "mi_comboHub_triggle_device_header1_subtitle_home": "Tetikleyici cihazı ayarladıktan sonra, evde koruyucusunu etkinleştirebilirsiniz.",
    "mi_comboHub_triggle_device_header2_subtitle_home": "Standart koruyucu için tetikleyici cihaz olarak etkinleştirildi, evde koruyucusu için kullanılamaz.",
    "mi_comboHub_triggle_device_header1_subtitle_away": "Tetikleyici cihazı ayarladıktan sonra, evde değilken koruyucusunu etkinleştirebilirsiniz.",
    "mi_comboHub_triggle_device_header2_subtitle_away": "Standart koruyucu için tetikleyici cihaz olarak etkinleştirildi, evde değilken koruyucusu için kullanılamaz.",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "Tetikleyici cihazı ayarladıktan sonra, uyku koruyucusunu etkinleştirebilirsiniz.",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "Standart koruyucu için tetikleyici cihaz olarak etkinleştirildi, uyku koruyucusu için kullanılamaz.",
    "mi_comboHub_triggle_device_empty_tip": "ไม่มีอุปกรณ์ซึ่งได้รับการจับคู่กับฮับควบคุมนี้ที่สามารถใช้ได้ในการสั่งงานการแจ้งเตือน เช่น เซ็นเซอร์ตรวจจับความเคลื่อนไหว เซ็นเซอร์หน้าต่างและประตูหรือสวิตช์ไร้สาย",
    "mi_comboHub_triggle_device_go_to_bug": "Satın al",
    "mi_commonHub_setting_nightlight_tomorrow": "Ertesi gün",
    "mi_commonHub_setting_nightlight_allday": "Bütün gün",
    "mi_ifttt_launch": "Herhangi bir koşul karşılanırsa",
    "mi_ifttt_action": "Ardından",
    "mi_commonHub_nightlight_open": "Gece lambasını aç",
    "mi_commonHub_nightlight_motion_limit": "Yalnızca 9 adede kadar insan vücudu sensörünü seçebilir",
    "mi_commonHub_nightlight_delay_close_min": "Gece lambasını {value} dk içinde kapat",
    "mi_commonHub_go_back_title": "Çıkış",
    "mi_commonHub_go_back_content": "Değişiklikleri sil ve şimdi çık?",
    "mi_commonHub_setting_nightlight": "Otomatik gece lambası",
    "mi_commonHub_nightlight_commont": "{value} karanlık bir ortamdayken",
    "mi_commonHub_nightlight_timer": "İndüksiyon süresi",
    "mi_commonHub_linkage_alarm_number_ten": "Yalnızca 10 ağ geçidi alarmı seçebilir",
    "common_offline": "Offline",
    "mi_commonHub_linkage_alarm_footer_text": "Merkezi kontrol ünitesi uyarı bağlantı işlevi etkinleştirildiğinde ve bir merkezi kontrol ünitesi tetiklendiğinde, tüm merkezi kontrol ünitelerinde uyarı zil sesi ve yanıp sönen ışıklar tetiklenir.",
    "mi_commonHub_linkage_alarm": "Bağlantı alarmı",
    "mi_commonHub_linkage_alarm_dis": "Bağlantı alarmı iptal edildi"
  };
  exports.default = tr;
},10052,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var zhHans = {
    "langugeName": "中文",
    "common_setting_title": "设置",
    "common_setting_feature_setting": "功能设置",
    "common_setting_general_setting": "通用设置",
    "common_setting_device_name": "设备名称",
    "common_setting_multiswitch": "按键设置",
    "common_setting_device_timeZone": "设备时区",
    "common_setting_location_management": "位置管理",
    "common_setting_share_device": "设备共享",
    "common_setting_ifttt_auto": "智能",
    "common_setting_btGateway": "蓝牙Mesh网关",
    "common_setting_btGateway_status_read_fail": "蓝牙Mesh网关状态读取失败",
    "cocommon_setting_btGateway_connected": "连接的蓝牙设备",
    "common_setting_firmware_upgrate": "检查固件升级",
    "common_setting_more_setting": "更多设置",
    "common_setting_add_to_desktop": "添加到桌面",
    "common_setting_privacy_agreement": "使用条款和隐私政策",
    "common_setting_delete_device": "删除设备",
    "common_setting_help_page": "使用帮助",
    "common_setting_more_seting_security": "安全设置",
    "common_setting_more_seting_faq": "常见问题",
    "common_setting_more_seting_isssues": "反馈问题",
    "common_setting_user_agreement": "软件许可及服务协议",
    "common_setting_privacy_policy": "隐私政策",
    "common_setting_feature_plug_in": "插件版本号",
    "common_setting_homekit_device_add": "绑定到HomeKit",
    "common_setting_homekit_device_bound": "已绑定",
    "common_setting_homekit_device_noBind": "未绑定",
    "common_log_title": "日志",
    "common_log_today": "今天",
    "common_log_yesterday": "昨天",
    "common_log_no_logs": "暂无日志",
    "common_log_loading": "加载中",
    "common_log_loading_with_dot": "加载中...",
    "common_log_logDataHasloaded": "加载完全部日志",
    "common_log_all_data_has_been_loaded": "全部数据已加载完成",
    "common_log_no_data": "暂无数据",
    "common_cancel": "取消",
    "common_ok": "确定",
    "common_manufacturer": "制造商",
    "common_lumi": "绿米联创",
    "common_tips_network_unconnect": "网络连接不可用",
    "common_tips_battery_low": "电池电量低",
    "common_tips_iknow": "我知道了",
    "common_button_done": "完成",
    "common_button_delete": "删除",
    "common_button_retry": "重试",
    "common_button_save": "保存",
    "common_tips_delete_succeed": "删除成功",
    "common_tips_delete_failed": "删除失败",
    "common_tips_loading_failed": "加载失败",
    "common_tips_request_failed": "请求失败，请检查网络",
    "common_button_prev": "上一步",
    "common_button_next": "下一步",
    "common_button_changename": "重命名",
    "common_date_workday": "周一至周五",
    "common_date_weekend": "周末",
    "common_date_selfdefine": "自定义",
    "common_date_mon": "星期一",
    "common_date_tues": "星期二",
    "common_date_wed": "星期三",
    "common_date_thur": "星期四",
    "common_date_fri": "星期五",
    "common_date_sat": "星期六",
    "common_date_sun": "星期日",
    "common_date_day": "日",
    "common_date_week": "周",
    "common_date_month": "月",
    "common_date_hour": "时",
    "common_date_minute": "分",
    "common_date_second": "秒",
    "common_tips_discard_operation": "确认放弃本次操作？",
    "common_tips_setting": "设置中，请稍候...",
    "common_tips_setting_failed": "设置失败",
    "common_tips_loading_failed_retry": "加载失败，点击重试",
    "common_tips_shared_no_promision": "被分享设备无此权限",
    "common_electricity": "电量统计",
    "common_power_history": "功率历史记录",
    "common_hardware_update_updating": "固件正在升级，请稍候…",
    "common_hardware_update_default": "检测到设备有最新固件版本{version}，是否升级？",
    "common_hardware_update_isforce": "设备当前固件版本过低，为了能正常使用，请升级至最新版本{version}",
    "common_hardware_update": "去升级",
    "common_out": "退出",
    "common_hardware_checkupdate": "查看升级",
    "common_operation_fail": "操作失败",
    "common_repeat_everyday": "每天",
    "common_repeat_once": "执行一次",
    "common_repeat_tomorrow": "明天",
    "comon_unit_kwh": "度",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "删除设备后，设备将从列表中移除。",
    "common_setting_device_delete_confirm": "确认删除设备吗？",
    "common_voice_mute": "静音",
    "common_voice_high": "高",
    "common_voice_middle": "中",
    "common_voice_low": "低",
    "sub_device_list_title": "子设备列表",
    "sub_device_list_header_tips": "下列子设备已经连接在本网关下",
    "sub_device_list_empty_tips": "该网关下暂无关联的子设备",
    "sub_device_list_name_cant_empty": "设备名称不能为空",
    "sub_device_list_name_cant_support_emoji": "不支持emoji表情",
    "sub_device_list_name_cant_support_special_char": "名称不能包含特殊符号",
    "sub_device_list_name_cant_more_forty": "名称不能超过40个字符",
    "sub_device_list_name_cant_same": "设备名称不能相同",
    "sub_device_list_device_offline": "设备已离线",
    "sub_device_list_selected": "已选中{XX}项",
    "sub_device_list_delete_multi_device": "确认删除所选的{XX}个设备吗？",
    "ifttt_triggle_single_press": "单击",
    "ifttt_triggle_double_press": "双击",
    "ifttt_triggle_long_press": "长按",
    "ifttt_triggle_shake": "摇一摇",
    "ifttt_triggle_someone_moved": "有人移动",
    "ifttt_triggle_windoor_open": "门窗打开",
    "ifttt_triggle_moved_afteronemin": "静止一分钟后被移动",
    "ifttt_triggle_detect_vibration": "感应到震动",
    "ifttt_triggle_detect_fall": "感应到跌落",
    "ifttt_triggle_detect_tilting": "感应到倾斜",
    "ifttt_triggle_fire_alert": "火警报警",
    "ifttt_triggle_gas_leakage_alert": "气体泄露报警",
    "ifttt_triggle_flood_alert": "漏水报警",
    "guard_type_basic": "基础守护",
    "guard_type_home": "在家守护",
    "guard_type_away": "离家守护",
    "guard_type_sleep": "睡眠守护",
    "ifttt_push_title_triggle_alert_1": "{XX}中，{YY}触发报警",
    "ifttt_push_title_triggle_alert_2": "{XX}中，{YY}感应到有人移动触发报警",
    "ifttt_push_title_triggle_alert_3": "{XX}中，{YY}打开触发报警",
    "ifttt_push_title_triggle_alert_4": "{XX}中，{YY}感应到被移动",
    "ifttt_push_title_triggle_alert_5": "{XX}中，{YY}感应到浸水报警",
    "ifttt_push_title_triggle_alert_6": "{XX}中，{YY}检测到气体浓度超标",
    "ifttt_push_title_triggle_alert_7": "{XX}中，{YY}检测到烟雾",
    "common_ifttt_scene_execute_result_fail": "执行失败",
    "common_ifttt_scene_execute_result_unknow_error": "异常错误",
    "common_ifttt_scene_execute_result_time_out": "执行超时",
    "common_ifttt_scene_execute_result_camera_sleep": "摄像机已休眠",
    "common_ifttt_device_offline": "（已离线）",
    "timersetting_on": "开启时间",
    "timersetting_off": "关闭时间",
    "timersetting_empty": "未设置",
    "timersetting_perio": "开启时段",
    "common_start": "开始",
    "common_end": "结束",
    "common_color": "颜色",
    "common_open": "开启",
    "common_scene_name_lm_scene_1_1": "警戒时，有人经过报警",
    "common_scene_name_lm_scene_1_2": "警戒时，门窗打开报警",
    "common_scene_name_lm_scene_1_3": "警戒时，无线开关按下报警",
    "common_scene_name_lm_scene_1_4": "警戒时，魔方静止一段时间被触发报警",
    "common_scene_name_lm_scene_1_5": "警戒时，动静贴静止两分钟被触发报警",
    "common_scene_name_lm_scene_2_1": "有人经过，感应夜灯亮",
    "common_scene_name_lm_scene_3_1": "无线开关按下响门铃",
    "common_scene_name_lm_scene_3_2": "门窗打开响门铃",
    "common_scene_name_lm_scene_3_3": "有人经过响门铃",
    "common_scene_name_lm_scene_4_1": "有人经过关闹钟",
    "common_scene_name_lm_scene_4_2": "门窗打开关闹钟",
    "common_scene_name_lm_scene_4_3": "无线开关按下关闹钟",
    "common_scene_name_lm_scene_5_1": "烟感联动网关报警",
    "common_scene_name_lm_scene_5_2": "气感联动网关报警",
    "common_scene_name_lm_scene_5_3": "水浸联动网关报警",
    "common_close": "关闭",
    "sensor_set_ifttt_config_success": "配置成功",
    "common_automation_configuring": "正在配置套装自动化，请稍候...",
    "sensor_set_ifttt_config_fail": "配置失败",
    "sensor_set_ifttt_config_fail_tip": "1. 需将网关连接wifi\n2. 需将手机连接wifi\n3. 请保证wifi正常",
    "mi_linuxHub_guard_guard_timer": "守护定时",
    "mi_linuxHub_timer_light_name": "彩灯定时器",
    "mi_linuxHub_lazy_clock_name": "闹钟定时器",
    "sensor_set_ifttt_scene_name_1": "门口打开提醒",
    "sensor_set_ifttt_scene_name_2": "单击无线开关开/关夜灯",
    "sensor_set_ifttt_scene_name_3": "双击无线开关开关警戒",
    "sensor_set_ifttt_scene_name_4": "有人经过，感应夜灯亮",
    "sensor_set_ifttt_scene_name_5": "2分钟无人移动夜灯关",
    "sensor_set_ifttt_scene_name_6": "有人移动夜灯开",
    "sensor_set_ifttt_scene_name_7": "单击无线开关开/关插座",
    "sensor_set_ifttt_triggle_name_1": "打开后超过1分钟未关闭",
    "sensor_set_ifttt_triggle_name_2": "2分钟无人移动",
    "sensor_set_ifttt_triggle_name_3": "播放指定的铃音",
    "sensor_set_ifttt_triggle_name_4": "开/关夜灯",
    "sensor_set_ifttt_triggle_name_5": "感应夜灯亮",
    "sensor_set_ifttt_triggle_name_6": "关夜灯",
    "sensor_set_ifttt_triggle_name_7": "开夜灯",
    "sensor_set_ifttt_triggle_name_8": "开/关警戒",
    "common_scene_execute_partiallysucceed": "部分执行成功",
    "common_short_date_mon": "周一",
    "common_short_date_tues": "周二",
    "common_short_date_wed": "周三",
    "common_short_date_thur": "周四",
    "common_short_date_fri": "周五",
    "common_short_date_sat": "周六",
    "common_short_date_sun": "周日",
    "common_repeat_timer_title": "重复选项",
    "common_repeat_self_timer_title": "自定义重复",
    "common_on": "开",
    "common_off": "关",
    "common_timer": "定时",
    "common_unit_minute_short": "分钟",
    "common_count_down": "{XX}-倒计时",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " °C",
    "common_plug_today_elec": "今日用电",
    "common_plug_month_elec": "当月用电",
    "common_plug_current_power": "当前功率",
    "common_setting_ifttt_auto_detail": "智能场景",
    "mi_comboHub_mainPage_guard_base": "基础",
    "mi_comboHub_mainPage_guard_home": "在家",
    "mi_comboHub_mainPage_guard_away": "离家",
    "mi_comboHub_mainPage_guard_sleep": "睡眠",
    "common_comboHub_triggle_device_alert": "报警",
    "common_comboHub_triggle_device_opened_guard": "（已在{XX}守护中开启）",
    "common_comboHub_triggle_device_only_open_basic": "（只可用于基础守护）",
    "common_comboHub_triggle_device_opened_basic": "（已在基础守护中开启）",
    "common_setting_homekit_device_desc": "该设备可在Apple家庭APP配置和使用",
    "common_ifttt_triggleName_switch": "开关状态变化触发报警",
    "common_ifttt_triggleName_vibration": "状态变化触发报警",
    "common_ifttt_triggleName_cube": "静止一分钟被移动触发报警",
    "common_ifttt_triggleName_magnet": "门窗状态变化触发报警",
    "common_ifttt_triggleName_motion": "有人移动触发报警",
    "common_timer_light_timer_light_period": "时间段定时",
    "common_timer_light_timer_on": "定时开启",
    "common_timer_light_timer_off": "定时关闭",
    "common_timer_light_timer_time_after": "开始时间在结束时间之后",
    "common_lumi_sensor_setting_battery": "电池电量",
    "common_lumi_sensor_setting_battery_normal": "正常",
    "common_lumi_sensor_battery_guide_title": "更换电池引导",
    "common_lumi_sensor_battery_guide_description": "请打开电池后盖，按照图示更换电池",
    "common_ifttt_suit_apart_fail": "配置部分失败",
    "common_ifttt_suit_success_tips": "可在智能场景列表查看或编辑",
    "common_ifttt_suit_apart_fail_tips": "已创建成功的可在智能场景列表查看或编辑",
    "common_ifttt_suit_not_build": "暂不创建",
    "common_kpa": " kPa",
    "common_battery_power_low": "电量低，请尽快更换电池。",
    "common_overheat_abnormal": "过温异常",
    "common_overload_abnormal": "过载异常",
    "common_overheat_protect": "过温保护",
    "common_overload_protect": "过载保护",
    "common_overheat_warn": "过温报警",
    "common_overload_warn": "过载报警",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "触发报警设备",
    "mi_comboHub_triggleDevices_deleting": "删除中",
    "mi_comboHub_triggleSubDevices_setting": "正在设置",
    "mi_comboHub_triggle_device_header_title_1": "不可启用的设备",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "基础守护是24小时且不可关闭的守护模式。该网关下需要持续监测环境的设备，如烟雾传感器、天然气报警器、水浸传感器等，将默认被启用为基础守护的触发报警设备。",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "已作为在家/离家/睡眠守护的触发报警设备，不可用于基础守护",
    "mi_comboHub_triggle_device_header1_subtitle_home": "设置触发报警设备后，你可以开启在家守护模式了",
    "mi_comboHub_triggle_device_header2_subtitle_home": "已作为基础守护的触发报警设备，不可用于在家守护",
    "mi_comboHub_triggle_device_header1_subtitle_away": "设置触发报警设备后，你可以开启离家守护模式了",
    "mi_comboHub_triggle_device_header2_subtitle_away": "已作为基础守护的触发报警设备，不可用于离家守护",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "设置触发报警设备后，你可以开启睡眠守护模式了",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "已作为基础守护的触发报警设备，不可用于睡眠守护",
    "mi_comboHub_triggle_device_empty_tip": "该网关下暂无可作为报警触发源的设备，如人体传感器、门窗传感器以及无线开关等",
    "mi_comboHub_triggle_device_go_to_bug": "去购买",
    "mi_commonHub_setting_nightlight_tomorrow": "次日",
    "mi_commonHub_setting_nightlight_allday": "全天",
    "mi_ifttt_launch": "如果任一满足时",
    "mi_ifttt_action": "就执行",
    "mi_commonHub_nightlight_open": "开启夜灯",
    "mi_commonHub_nightlight_motion_limit": "最多只能选择9个人体传感器",
    "mi_commonHub_nightlight_delay_close_min": "{value}分钟后关闭夜灯",
    "mi_commonHub_go_back_title": "退出编辑",
    "mi_commonHub_go_back_content": "退出后修改将丢失，退出？",
    "mi_commonHub_setting_nightlight": "感应夜灯",
    "mi_commonHub_nightlight_commont": "当{value}所在环境较暗时",
    "mi_commonHub_nightlight_timer": "感应时段",
    "mi_commonHub_linkage_alarm_number_ten": "最多只能选择10个网关报警",
    "common_offline": "已离线",
    "mi_commonHub_linkage_alarm_footer_text": "开启联动报警功能的网关中，当任意一个网关报警，其他网关也会联动报警，发出报警铃音和灯光",
    "mi_commonHub_linkage_alarm": "联动报警",
    "mi_commonHub_linkage_alarm_dis": "联动报警取消"
  };
  exports.default = zhHans;
},10055,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var zhHantHK = {
    "langugeName": "粤语(中国香港)",
    "common_setting_title": "設定",
    "common_setting_feature_setting": "功能設定",
    "common_setting_general_setting": "通用設定",
    "common_setting_device_name": "裝置名稱",
    "common_setting_multiswitch": "按鍵設定",
    "common_setting_device_timeZone": "裝置時區",
    "common_setting_location_management": "位置管理",
    "common_setting_share_device": "裝置共享",
    "common_setting_ifttt_auto": "智能",
    "common_setting_btGateway": "藍牙Mesh網關",
    "common_setting_btGateway_status_read_fail": "藍牙Mesh網關狀態讀取失敗",
    "cocommon_setting_btGateway_connected": "連接的藍牙設備",
    "common_setting_firmware_upgrate": "檢查韌體升級",
    "common_setting_more_setting": "更多設定",
    "common_setting_add_to_desktop": "新增至桌面",
    "common_setting_privacy_agreement": "使用者條款和私隱政策",
    "common_setting_delete_device": "刪除裝置",
    "common_setting_help_page": "使用説明",
    "common_setting_more_seting_security": "安全設定",
    "common_setting_more_seting_faq": "常見問題",
    "common_setting_more_seting_isssues": "意見反饋",
    "common_setting_user_agreement": "軟件許可及服務協議",
    "common_setting_privacy_policy": "私隱政策",
    "common_setting_feature_plug_in": "韌體程式版本號",
    "common_setting_homekit_device_add": "綁定到HomeKit",
    "common_setting_homekit_device_bound": "已綁定",
    "common_setting_homekit_device_noBind": "未綁定",
    "common_log_title": "日誌",
    "common_log_today": "今天",
    "common_log_yesterday": "昨天",
    "common_log_no_logs": "暫無記錄",
    "common_log_loading": "載入中",
    "common_log_loading_with_dot": "載入中...",
    "common_log_logDataHasloaded": "載入所有記錄",
    "common_log_all_data_has_been_loaded": "所有數據已載入完畢",
    "common_log_no_data": "暫無數據",
    "common_cancel": "取消",
    "common_ok": "確定",
    "common_manufacturer": "製造商",
    "common_lumi": "綠米聯創",
    "common_tips_network_unconnect": "網絡連接不可用",
    "common_tips_battery_low": "電池電量低",
    "common_tips_iknow": "我知道了",
    "common_button_done": "完成",
    "common_button_delete": "刪除",
    "common_button_retry": "重試",
    "common_button_save": "保存",
    "common_tips_delete_succeed": "刪除成功",
    "common_tips_delete_failed": "刪除失敗",
    "common_tips_loading_failed": "載入失敗",
    "common_tips_request_failed": "請求失敗，請檢查網路",
    "common_button_prev": "上一步",
    "common_button_next": "下一步",
    "common_button_changename": "重命名",
    "common_date_workday": "週一至週五",
    "common_date_weekend": "週末",
    "common_date_selfdefine": "自定義",
    "common_date_mon": "星期一",
    "common_date_tues": "星期二",
    "common_date_wed": "星期三",
    "common_date_thur": "星期四",
    "common_date_fri": "星期五",
    "common_date_sat": "星期六",
    "common_date_sun": "星期日",
    "common_date_day": "日",
    "common_date_week": "週",
    "common_date_month": "月",
    "common_date_hour": "時",
    "common_date_minute": "分",
    "common_date_second": "秒",
    "common_tips_discard_operation": "確認放棄本次操作？",
    "common_tips_setting": "設定中，請稍候..",
    "common_tips_setting_failed": "設定失敗",
    "common_tips_loading_failed_retry": "載入失敗，點選再試一次",
    "common_tips_shared_no_promision": "被共用裝置無此權限",
    "common_electricity": "電量統計",
    "common_power_history": "功率歷史記錄",
    "common_hardware_update_updating": "韌體正在升級，請稍候…",
    "common_hardware_update_default": "偵測到裝置有最新韌體版本 {version}，是否升級?",
    "common_hardware_update_isforce": "裝置目前韌體版本過低，為了能正常使用，請升級至最新版本 {version}",
    "common_hardware_update": "去升級",
    "common_out": "離開",
    "common_hardware_checkupdate": "檢視升級",
    "common_operation_fail": "操作失敗",
    "common_repeat_everyday": "每天",
    "common_repeat_once": "執行一次",
    "common_repeat_tomorrow": "明天",
    "comon_unit_kwh": "度",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "刪除裝置後，裝置將從清單中移除。",
    "common_setting_device_delete_confirm": "確認刪除裝置嗎？",
    "common_voice_mute": "靜音",
    "common_voice_high": "高",
    "common_voice_middle": "中",
    "common_voice_low": "低",
    "sub_device_list_title": "子裝置清單",
    "sub_device_list_header_tips": "下列子裝置已經連接在本閘道下",
    "sub_device_list_empty_tips": "該閘道下暫無關聯的子裝置",
    "sub_device_list_name_cant_empty": "設備名稱不能為空",
    "sub_device_list_name_cant_support_emoji": "不支持emoji表情",
    "sub_device_list_name_cant_support_special_char": "名稱不能包含特殊符號",
    "sub_device_list_name_cant_more_forty": "名稱不能超過40個字符",
    "sub_device_list_name_cant_same": "設備名稱不能相同",
    "sub_device_list_device_offline": "裝置已離線",
    "sub_device_list_selected": "已選中{XX}項",
    "sub_device_list_delete_multi_device": "確認刪除所選的{XX}個設備嗎？",
    "ifttt_triggle_single_press": "按一下",
    "ifttt_triggle_double_press": "長按",
    "ifttt_triggle_long_press": "按兩下",
    "ifttt_triggle_shake": "搖一搖",
    "ifttt_triggle_someone_moved": "有人移動",
    "ifttt_triggle_windoor_open": "門窗開啟",
    "ifttt_triggle_moved_afteronemin": "靜止一分鐘後被移動",
    "ifttt_triggle_detect_vibration": "感應到震動",
    "ifttt_triggle_detect_fall": "感應到跌落",
    "ifttt_triggle_detect_tilting": "感應到傾斜",
    "ifttt_triggle_fire_alert": "火警報警",
    "ifttt_triggle_gas_leakage_alert": "氣體洩露報警",
    "ifttt_triggle_flood_alert": "漏水報警",
    "guard_type_basic": "基礎守護",
    "guard_type_home": "在家守護",
    "guard_type_away": "離家守護",
    "guard_type_sleep": "睡眠守護",
    "ifttt_push_title_triggle_alert_1": "{XX}中，{YY}觸發報警",
    "ifttt_push_title_triggle_alert_2": "{XX}中，{YY}感應到有人移動觸發報警",
    "ifttt_push_title_triggle_alert_3": "{XX}中，{YY}打開觸發報警",
    "ifttt_push_title_triggle_alert_4": "{XX}中，{YY}感應到被移動",
    "ifttt_push_title_triggle_alert_5": "{XX}中，{YY}感應到浸水報警",
    "ifttt_push_title_triggle_alert_6": "{XX}中，{YY}檢測到氣體濃度超標",
    "ifttt_push_title_triggle_alert_7": "{XX}中，{YY}檢測到煙霧",
    "common_ifttt_scene_execute_result_fail": "執行失敗",
    "common_ifttt_scene_execute_result_unknow_error": "異常錯誤",
    "common_ifttt_scene_execute_result_time_out": "執行超時",
    "common_ifttt_scene_execute_result_camera_sleep": "攝像機已休眠",
    "common_ifttt_device_offline": "（已離線）",
    "timersetting_on": "開啓時間",
    "timersetting_off": "關閉時間",
    "timersetting_empty": "未設定",
    "timersetting_perio": "開啓時段",
    "common_start": "開始",
    "common_end": "結束",
    "common_color": "顏色",
    "common_open": "開啟",
    "common_scene_name_lm_scene_1_1": "警戒時，有人經過報警",
    "common_scene_name_lm_scene_1_2": "警戒時，門窗打開報警",
    "common_scene_name_lm_scene_1_3": "警戒時，無線開關按下報警",
    "common_scene_name_lm_scene_1_4": "警戒時，魔方靜止一段時間被觸發報警",
    "common_scene_name_lm_scene_1_5": "警戒時，動靜貼靜止兩分鐘被觸發報警",
    "common_scene_name_lm_scene_2_1": "有人經過，感應夜燈亮",
    "common_scene_name_lm_scene_3_1": "無線開關按下響門鈴",
    "common_scene_name_lm_scene_3_2": "門窗打開響門鈴",
    "common_scene_name_lm_scene_3_3": "有人經過響門鈴",
    "common_scene_name_lm_scene_4_1": "有人經過關鬧鐘",
    "common_scene_name_lm_scene_4_2": "門窗打開關鬧鐘",
    "common_scene_name_lm_scene_4_3": "無線開關按下關鬧鐘",
    "common_scene_name_lm_scene_5_1": "煙感連動網關警報",
    "common_scene_name_lm_scene_5_2": "氣感連動網關警報",
    "common_scene_name_lm_scene_5_3": "水浸連動網關警報",
    "common_close": "關閉",
    "sensor_set_ifttt_config_success": "配置成功",
    "common_automation_configuring": "正在配置套裝自動化，請稍候...",
    "sensor_set_ifttt_config_fail": "配置失敗",
    "sensor_set_ifttt_config_fail_tip": "1. 需將網關連接wifi\n2. 需將手機連接wifi\n3. 請保證wifi正常",
    "mi_linuxHub_guard_guard_timer": "守護定時",
    "mi_linuxHub_timer_light_name": "彩燈定時器",
    "mi_linuxHub_lazy_clock_name": "鬧鐘定時器",
    "sensor_set_ifttt_scene_name_1": "門口打開提醒",
    "sensor_set_ifttt_scene_name_2": "單擊無線開關開/關夜燈",
    "sensor_set_ifttt_scene_name_3": "雙擊無線開關開關警戒",
    "sensor_set_ifttt_scene_name_4": "有人經過，感應夜燈亮",
    "sensor_set_ifttt_scene_name_5": "2分鐘無人移動夜燈關",
    "sensor_set_ifttt_scene_name_6": "有人移動夜燈開",
    "sensor_set_ifttt_scene_name_7": "单击无线开关开/关插座",
    "sensor_set_ifttt_triggle_name_1": "打開後超過1分鐘未關閉",
    "sensor_set_ifttt_triggle_name_2": "2分鐘無人移動",
    "sensor_set_ifttt_triggle_name_3": "播放指定的鈴音",
    "sensor_set_ifttt_triggle_name_4": "開/關夜燈",
    "sensor_set_ifttt_triggle_name_5": "感應夜燈亮",
    "sensor_set_ifttt_triggle_name_6": "關夜燈",
    "sensor_set_ifttt_triggle_name_7": "開夜燈",
    "sensor_set_ifttt_triggle_name_8": "開/關警戒",
    "common_scene_execute_partiallysucceed": "部分執行成功",
    "common_short_date_mon": "週一",
    "common_short_date_tues": "週二",
    "common_short_date_wed": "週三",
    "common_short_date_thur": "週四",
    "common_short_date_fri": "週五",
    "common_short_date_sat": "週六",
    "common_short_date_sun": "週日",
    "common_repeat_timer_title": "重複選項",
    "common_repeat_self_timer_title": "自定義重複",
    "common_on": "開",
    "common_off": "關",
    "common_timer": "定時",
    "common_unit_minute_short": "分鐘",
    "common_count_down": "{XX}-倒計時",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "今日用电",
    "common_plug_month_elec": "当月用电",
    "common_plug_current_power": "当前功率",
    "common_setting_ifttt_auto_detail": "智能場景",
    "mi_comboHub_mainPage_guard_base": "基礎",
    "mi_comboHub_mainPage_guard_home": "在家",
    "mi_comboHub_mainPage_guard_away": "離家",
    "mi_comboHub_mainPage_guard_sleep": "睡眠",
    "common_comboHub_triggle_device_alert": "報警",
    "common_comboHub_triggle_device_opened_guard": "（已在{XX}看守中開啟）",
    "common_comboHub_triggle_device_only_open_basic": "（只可用於基礎看守）",
    "common_comboHub_triggle_device_opened_basic": "（已在基礎看守中開啟）",
    "common_setting_homekit_device_desc": "該設備可在Apple家庭APP配置和使用",
    "common_ifttt_triggleName_switch": "開關狀態變化觸發警報",
    "common_ifttt_triggleName_vibration": "狀態變化觸發警報",
    "common_ifttt_triggleName_cube": "靜止一分鐘被移動觸發警報",
    "common_ifttt_triggleName_magnet": "門窗狀態變化觸發警報",
    "common_ifttt_triggleName_motion": "有人移動觸發警報",
    "common_timer_light_timer_light_period": "時間段定時",
    "common_timer_light_timer_on": "定時開啟",
    "common_timer_light_timer_off": "定時關閉",
    "common_timer_light_timer_time_after": "開始時間在結束時間之後",
    "common_lumi_sensor_setting_battery": "電池電量",
    "common_lumi_sensor_setting_battery_normal": "正常",
    "common_lumi_sensor_battery_guide_title": "更换电池引导",
    "common_lumi_sensor_battery_guide_description": "请打开电池后盖，按照图示更换电池",
    "common_ifttt_suit_apart_fail": "配置部分失败",
    "common_ifttt_suit_success_tips": "可在智能场景列表查看或编辑",
    "common_ifttt_suit_apart_fail_tips": "已创建成功的可在智能场景列表查看或编辑",
    "common_ifttt_suit_not_build": "暂不创建",
    "common_kpa": " kPa",
    "common_battery_power_low": "電量低，請儘快更換電池。",
    "common_overheat_abnormal": "过温异常",
    "common_overload_abnormal": "过载异常",
    "common_overheat_protect": "过温保护",
    "common_overload_protect": "过载保护",
    "common_overheat_warn": "过温报警",
    "common_overload_warn": "过载报警",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "觸發警報設備",
    "mi_comboHub_triggleDevices_deleting": "删除中",
    "mi_comboHub_triggleSubDevices_setting": "正在设置",
    "mi_comboHub_triggle_device_header_title_1": "不可啟用的設備",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "基礎看守是24小時且不可關閉的看守模式。該網關下需要持續監測環境的設備，如煙霧傳感器、天然氣報警器、水浸傳感器等，將默認被啟用為基礎看守的觸發警報設備。",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "已作為在家/離家/睡眠看守的觸發警報設備，不可用於基礎看守",
    "mi_comboHub_triggle_device_header1_subtitle_home": "設置觸發警報設備後，你可以開啟在家看守模式了",
    "mi_comboHub_triggle_device_header2_subtitle_home": "已作為基礎看守的觸發警報設備，不可用於在家看守",
    "mi_comboHub_triggle_device_header1_subtitle_away": "設置觸發警報設備後，你可以開啟離家看守模式了",
    "mi_comboHub_triggle_device_header2_subtitle_away": "已作為基礎看守的觸發警報設備，不可用於離家看守",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "設置觸發警報設備後，你可以開啟睡眠看守模式了",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "已作為基礎看守的觸發警報設備，不可用於睡眠看守",
    "mi_comboHub_triggle_device_empty_tip": "該閘道下暫無可作為報警觸發源的裝置，如人體感測器、門窗感測器以及無線開關等",
    "mi_comboHub_triggle_device_go_to_bug": "去購買",
    "mi_commonHub_setting_nightlight_tomorrow": "次日",
    "mi_commonHub_setting_nightlight_allday": "全天",
    "mi_ifttt_launch": "如果任一滿足時",
    "mi_ifttt_action": "就執行",
    "mi_commonHub_nightlight_open": "開啟夜燈",
    "mi_commonHub_nightlight_motion_limit": "最多只能選擇9個人體傳感器",
    "mi_commonHub_nightlight_delay_close_min": "{value}分鐘後關閉夜燈",
    "mi_commonHub_go_back_title": "離開編輯",
    "mi_commonHub_go_back_content": "離開後修改將丟失，離開?",
    "mi_commonHub_setting_nightlight": "感應夜燈",
    "mi_commonHub_nightlight_commont": "當{value}所在環境較暗時",
    "mi_commonHub_nightlight_timer": "感應時段",
    "mi_commonHub_linkage_alarm_number_ten": "最多只能選擇10個網關報警",
    "common_offline": "已離線",
    "mi_commonHub_linkage_alarm_footer_text": "開啟聯動報警功能的閘道中，當任意一個閘道報警，其他閘道也會聯動報警，發出報警鈴音和燈光",
    "mi_commonHub_linkage_alarm": "聯動警報",
    "mi_commonHub_linkage_alarm_dis": "聯動警報取消"
  };
  exports.default = zhHantHK;
},10058,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var zhHant = {
    "langugeName": "粤语(中国台湾)",
    "common_setting_title": "設定",
    "common_setting_feature_setting": "功能設定",
    "common_setting_general_setting": "通用設定",
    "common_setting_device_name": "裝置名稱",
    "common_setting_multiswitch": "按鍵設定",
    "common_setting_device_timeZone": "裝置時區",
    "common_setting_location_management": "位置管理",
    "common_setting_share_device": "裝置共用",
    "common_setting_ifttt_auto": "智慧",
    "common_setting_btGateway": "藍牙Mesh網關",
    "common_setting_btGateway_status_read_fail": "藍牙Mesh網關狀態讀取失敗",
    "cocommon_setting_btGateway_connected": "連接的藍牙裝置",
    "common_setting_firmware_upgrate": "檢查韌體升級",
    "common_setting_more_setting": "更多設定",
    "common_setting_add_to_desktop": "新增至桌面",
    "common_setting_privacy_agreement": "使用者條款和隱私權政策",
    "common_setting_delete_device": "刪除裝置",
    "common_setting_help_page": "使用説明",
    "common_setting_more_seting_security": "安全設定",
    "common_setting_more_seting_faq": "常見問題",
    "common_setting_more_seting_isssues": "意見反應",
    "common_setting_user_agreement": "軟體授權及服務協議",
    "common_setting_privacy_policy": "隱私權政策",
    "common_setting_feature_plug_in": "韌體程式版本號",
    "common_setting_homekit_device_add": "綁定到HomeKit",
    "common_setting_homekit_device_bound": "已綁定",
    "common_setting_homekit_device_noBind": "未綁定",
    "common_log_title": "日誌",
    "common_log_today": "今天",
    "common_log_yesterday": "昨天",
    "common_log_no_logs": "暫無記錄",
    "common_log_loading": "載入中",
    "common_log_loading_with_dot": "載入中...",
    "common_log_logDataHasloaded": "載入所有記錄",
    "common_log_all_data_has_been_loaded": "所有資料已載入完畢",
    "common_log_no_data": "暫無資料",
    "common_cancel": "取消",
    "common_ok": "確定",
    "common_manufacturer": "製造商",
    "common_lumi": "綠米聯創",
    "common_tips_network_unconnect": "網絡連接不可用",
    "common_tips_battery_low": "電池電量低",
    "common_tips_iknow": "我知道了",
    "common_button_done": "完成",
    "common_button_delete": "刪除",
    "common_button_retry": "重試",
    "common_button_save": "保存",
    "common_tips_delete_succeed": "刪除成功",
    "common_tips_delete_failed": "刪除失敗",
    "common_tips_loading_failed": "載入失敗",
    "common_tips_request_failed": "請求失敗，請檢查網路",
    "common_button_prev": "上一步",
    "common_button_next": "下一步",
    "common_button_changename": "重命名",
    "common_date_workday": "週一至週五",
    "common_date_weekend": "週末",
    "common_date_selfdefine": "自定義",
    "common_date_mon": "星期一",
    "common_date_tues": "星期二",
    "common_date_wed": "星期三",
    "common_date_thur": "星期四",
    "common_date_fri": "星期五",
    "common_date_sat": "星期六",
    "common_date_sun": "星期日",
    "common_date_day": "日",
    "common_date_week": "週",
    "common_date_month": "月",
    "common_date_hour": "時",
    "common_date_minute": "分",
    "common_date_second": "秒",
    "common_tips_discard_operation": "確認放棄本次操作？",
    "common_tips_setting": "設定中，請稍候..",
    "common_tips_setting_failed": "設定失敗",
    "common_tips_loading_failed_retry": "載入失敗，點選再試一次",
    "common_tips_shared_no_promision": "被共用裝置無此權限",
    "common_electricity": "電量統計",
    "common_power_history": "功率歷史記錄",
    "common_hardware_update_updating": "韌體正在升級，請稍候…",
    "common_hardware_update_default": "偵測到裝置有最新韌體版本 {version}，是否升級?",
    "common_hardware_update_isforce": "裝置目前韌體版本過低，為了能正常使用，請升級至最新版本 {version}",
    "common_hardware_update": "去升級",
    "common_out": "離開",
    "common_hardware_checkupdate": "檢視升級",
    "common_operation_fail": "操作失敗",
    "common_repeat_everyday": "每天",
    "common_repeat_once": "執行一次",
    "common_repeat_tomorrow": "明天",
    "comon_unit_kwh": "度",
    "comon_unit_w": " W",
    "common_setting_device_delete_tip": "刪除裝置後，裝置將從清單中移除。",
    "common_setting_device_delete_confirm": "確認刪除裝置嗎？",
    "common_voice_mute": "靜音",
    "common_voice_high": "高",
    "common_voice_middle": "中",
    "common_voice_low": "低",
    "sub_device_list_title": "子裝置清單",
    "sub_device_list_header_tips": "下列子裝置已經連接在本閘道下",
    "sub_device_list_empty_tips": "該閘道下暫無關聯的子裝置",
    "sub_device_list_name_cant_empty": "設備名稱不能為空",
    "sub_device_list_name_cant_support_emoji": "不支持emoji表情",
    "sub_device_list_name_cant_support_special_char": "名稱不能包含特殊符號",
    "sub_device_list_name_cant_more_forty": "名稱不能超過40個字符",
    "sub_device_list_name_cant_same": "設備名稱不能相同",
    "sub_device_list_device_offline": "裝置已離線",
    "sub_device_list_selected": "已選中{XX}項",
    "sub_device_list_delete_multi_device": "確認刪除所選的{XX}個設備嗎？",
    "ifttt_triggle_single_press": "按一下",
    "ifttt_triggle_double_press": "長按",
    "ifttt_triggle_long_press": "按兩下",
    "ifttt_triggle_shake": "搖一搖",
    "ifttt_triggle_someone_moved": "有人移動",
    "ifttt_triggle_windoor_open": "門窗開啟",
    "ifttt_triggle_moved_afteronemin": "靜止一分鐘後被移動",
    "ifttt_triggle_detect_vibration": "感應到震動",
    "ifttt_triggle_detect_fall": "感應到跌落",
    "ifttt_triggle_detect_tilting": "感應到傾斜",
    "ifttt_triggle_fire_alert": "火警報警",
    "ifttt_triggle_gas_leakage_alert": "氣體洩露報警",
    "ifttt_triggle_flood_alert": "漏水報警",
    "guard_type_basic": "基礎守護",
    "guard_type_home": "在家守護",
    "guard_type_away": "離家守護",
    "guard_type_sleep": "睡眠守護",
    "ifttt_push_title_triggle_alert_1": "{XX}中，{YY}觸發報警",
    "ifttt_push_title_triggle_alert_2": "{XX}中，{YY}感應到有人移動觸發報警",
    "ifttt_push_title_triggle_alert_3": "{XX}中，{YY}打開觸發報警",
    "ifttt_push_title_triggle_alert_4": "{XX}中，{YY}感應到被移動",
    "ifttt_push_title_triggle_alert_5": "{XX}中，{YY}感應到浸水報警",
    "ifttt_push_title_triggle_alert_6": "{XX}中，{YY}檢測到氣體濃度超標",
    "ifttt_push_title_triggle_alert_7": "{XX}中，{YY}檢測到煙霧",
    "common_ifttt_scene_execute_result_fail": "執行失敗",
    "common_ifttt_scene_execute_result_unknow_error": "異常錯誤",
    "common_ifttt_scene_execute_result_time_out": "執行超時",
    "common_ifttt_scene_execute_result_camera_sleep": "攝像機已休眠",
    "common_ifttt_device_offline": "（已離線）",
    "timersetting_on": "開啓時間",
    "timersetting_off": "關閉時間",
    "timersetting_empty": "未設定",
    "timersetting_perio": "開啓時段",
    "common_start": "開始",
    "common_end": "結束",
    "common_color": "顏色",
    "common_open": "開啟",
    "common_scene_name_lm_scene_1_1": "警戒時，有人經過報警",
    "common_scene_name_lm_scene_1_2": "警戒時，門窗打開報警",
    "common_scene_name_lm_scene_1_3": "警戒時，無線開關按下報警",
    "common_scene_name_lm_scene_1_4": "警戒時，魔方靜止一段時間被觸發報警",
    "common_scene_name_lm_scene_1_5": "警戒時，動靜貼靜止兩分鐘被觸發報警",
    "common_scene_name_lm_scene_2_1": "有人經過，感應夜燈亮",
    "common_scene_name_lm_scene_3_1": "無線開關按下響門鈴",
    "common_scene_name_lm_scene_3_2": "門窗打開響門鈴",
    "common_scene_name_lm_scene_3_3": "有人經過響門鈴",
    "common_scene_name_lm_scene_4_1": "有人經過關鬧鐘",
    "common_scene_name_lm_scene_4_2": "門窗打開關鬧鐘",
    "common_scene_name_lm_scene_4_3": "無線開關按下關鬧鐘",
    "common_scene_name_lm_scene_5_1": "煙感連動網關警報",
    "common_scene_name_lm_scene_5_2": "氣感連動網關警報",
    "common_scene_name_lm_scene_5_3": "水浸連動網關警報",
    "common_close": "關閉",
    "sensor_set_ifttt_config_success": "配置成功",
    "common_automation_configuring": "正在配置套裝自動化，請稍候...",
    "sensor_set_ifttt_config_fail": "配置失敗",
    "sensor_set_ifttt_config_fail_tip": "1. 需將網關連接wifi\n2. 需將手機連接wifi\n3. 請保證wifi正常",
    "mi_linuxHub_guard_guard_timer": "守護定時",
    "mi_linuxHub_timer_light_name": "彩燈定時器",
    "mi_linuxHub_lazy_clock_name": "鬧鐘定時器",
    "sensor_set_ifttt_scene_name_1": "門口打開提醒",
    "sensor_set_ifttt_scene_name_2": "單擊無線開關開/關夜燈",
    "sensor_set_ifttt_scene_name_3": "雙擊無線開關開關警戒",
    "sensor_set_ifttt_scene_name_4": "有人經過，感應夜燈亮",
    "sensor_set_ifttt_scene_name_5": "2分鐘無人移動夜燈關",
    "sensor_set_ifttt_scene_name_6": "有人移動夜燈開",
    "sensor_set_ifttt_scene_name_7": "单击无线开关开/关插座",
    "sensor_set_ifttt_triggle_name_1": "打開後超過1分鐘未關閉",
    "sensor_set_ifttt_triggle_name_2": "2分鐘無人移動",
    "sensor_set_ifttt_triggle_name_3": "播放指定的鈴音",
    "sensor_set_ifttt_triggle_name_4": "開/關夜燈",
    "sensor_set_ifttt_triggle_name_5": "感應夜燈亮",
    "sensor_set_ifttt_triggle_name_6": "關夜燈",
    "sensor_set_ifttt_triggle_name_7": "開夜燈",
    "sensor_set_ifttt_triggle_name_8": "開/關警戒",
    "common_scene_execute_partiallysucceed": "部分執行成功",
    "common_short_date_mon": "週一",
    "common_short_date_tues": "週二",
    "common_short_date_wed": "週三",
    "common_short_date_thur": "週四",
    "common_short_date_fri": "週五",
    "common_short_date_sat": "週六",
    "common_short_date_sun": "週日",
    "common_repeat_timer_title": "重複選項",
    "common_repeat_self_timer_title": "自定義重複",
    "common_on": "開",
    "common_off": "關",
    "common_timer": "定時",
    "common_unit_minute_short": "分鐘",
    "common_count_down": "{XX}-倒計時",
    "common_percent": " %",
    "common_percent_str": "{value} %",
    "common_degree_centigrade": " ℃",
    "common_plug_today_elec": "今日用电",
    "common_plug_month_elec": "当月用电",
    "common_plug_current_power": "当前功率",
    "common_setting_ifttt_auto_detail": "智慧場景",
    "mi_comboHub_mainPage_guard_base": "基礎",
    "mi_comboHub_mainPage_guard_home": "在家",
    "mi_comboHub_mainPage_guard_away": "離家",
    "mi_comboHub_mainPage_guard_sleep": "睡眠",
    "common_comboHub_triggle_device_alert": "報警",
    "common_comboHub_triggle_device_opened_guard": "（已在{XX}看守中開啟）",
    "common_comboHub_triggle_device_only_open_basic": "（只可用於基礎看守）",
    "common_comboHub_triggle_device_opened_basic": "（已在基礎看守中開啟）",
    "common_setting_homekit_device_desc": "該裝置可在Apple家庭APP配置和使用",
    "common_ifttt_triggleName_switch": "開關狀態變化觸發警報",
    "common_ifttt_triggleName_vibration": "狀態變化觸發警報",
    "common_ifttt_triggleName_cube": "靜止一分鐘被移動觸發警報",
    "common_ifttt_triggleName_magnet": "門窗狀態變化觸發警報",
    "common_ifttt_triggleName_motion": "有人移動觸發警報",
    "common_timer_light_timer_light_period": "時間段定時",
    "common_timer_light_timer_on": "定時開啟",
    "common_timer_light_timer_off": "定時關閉",
    "common_timer_light_timer_time_after": "開始時間在結束時間之後",
    "common_lumi_sensor_setting_battery": "電池型號",
    "common_lumi_sensor_setting_battery_normal": "正常",
    "common_lumi_sensor_battery_guide_title": "更换电池引导",
    "common_lumi_sensor_battery_guide_description": "请打开电池后盖，按照图示更换电池",
    "common_ifttt_suit_apart_fail": "配置部分失败",
    "common_ifttt_suit_success_tips": "可在智能场景列表查看或编辑",
    "common_ifttt_suit_apart_fail_tips": "已创建成功的可在智能场景列表查看或编辑",
    "common_ifttt_suit_not_build": "暂不创建",
    "common_kpa": " kPa",
    "common_battery_power_low": "電量低，請儘快更換電池。",
    "common_overheat_abnormal": "过温异常",
    "common_overload_abnormal": "过载异常",
    "common_overheat_protect": "过温保护",
    "common_overload_protect": "过载保护",
    "common_overheat_warn": "过温报警",
    "common_overload_warn": "过载报警",
    "common_Lux": " Lux",
    "mi_comboHub_mainPage_trigger_devices": "觸發警報裝置",
    "mi_comboHub_triggleDevices_deleting": "删除中",
    "mi_comboHub_triggleSubDevices_setting": "正在设置",
    "mi_comboHub_triggle_device_header_title_1": "不可啟用的裝置",
    "mi_comboHub_triggle_device_header1_subtitle_basic": "基礎看守是24小時且不可關閉的看守模式。該網關下需要持續監測環境的裝置，如煙霧感應器、天然氣報警器、水浸感應器等，將默認被啟用為基礎看守的觸發警報裝置。",
    "mi_comboHub_triggle_device_header2_subtitle_basic": "已作為在家/離家/睡眠看守的觸發警報裝置，不可用於基礎看守",
    "mi_comboHub_triggle_device_header1_subtitle_home": "設定觸發警報裝置後，你可以開啟在家看守模式了",
    "mi_comboHub_triggle_device_header2_subtitle_home": "已作為基礎看守的觸發警報裝置，不可用於在家看守",
    "mi_comboHub_triggle_device_header1_subtitle_away": "設定觸發警報裝置後，你可以開啟離家看守模式了",
    "mi_comboHub_triggle_device_header2_subtitle_away": "已作為基礎看守的觸發警報裝置，不可用於離家看守",
    "mi_comboHub_triggle_device_header1_subtitle_sleep": "設置觸發警報裝置後，你可以開啟睡眠看守模式了",
    "mi_comboHub_triggle_device_header2_subtitle_sleep": "已作為基礎看守的觸發警報裝置，不可用於睡眠看守",
    "mi_comboHub_triggle_device_empty_tip": "該閘道下暫無可作為報警觸發源的裝置，如人體感測器、門窗感測器以及無線開關等",
    "mi_comboHub_triggle_device_go_to_bug": "去購買",
    "mi_commonHub_setting_nightlight_tomorrow": "次日",
    "mi_commonHub_setting_nightlight_allday": "全天",
    "mi_ifttt_launch": "如果任一滿足時",
    "mi_ifttt_action": "就執行",
    "mi_commonHub_nightlight_open": "開啟夜燈",
    "mi_commonHub_nightlight_motion_limit": "最多只能選擇9個人體傳感器",
    "mi_commonHub_nightlight_delay_close_min": "{value}分鐘後關閉夜燈",
    "mi_commonHub_go_back_title": "離開編輯",
    "mi_commonHub_go_back_content": "離開後修改將丟失，離開?",
    "mi_commonHub_setting_nightlight": "感應夜燈",
    "mi_commonHub_nightlight_commont": "當{value}所在環境較暗時",
    "mi_commonHub_nightlight_timer": "感應時段",
    "mi_commonHub_linkage_alarm_number_ten": "最多只能選擇10個網關報警",
    "common_offline": "已離線",
    "mi_commonHub_linkage_alarm_footer_text": "開啟聯動報警功能的閘道中，當任意一個閘道報警，其他閘道也會聯動報警，發出報警鈴音和燈光",
    "mi_commonHub_linkage_alarm": "連動警報",
    "mi_commonHub_linkage_alarm_dis": "連動警報取消"
  };
  exports.default = zhHant;
},10061,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deepCompare = deepCompare;
  exports.default = undefined;
  var maxDep = 6;
  var jsType = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error'];
  var dUtil = {};

  var _loop = function _loop(i) {
    dUtil['is' + jsType[i]] = function (obj) {
      return Object.prototype.toString.call(obj) === '[object ' + jsType[i] + ']';
    };
  };

  for (var i = 0; i < jsType.length; i += 1) {
    _loop(i);
  }

  function skipKeys(key) {
    var keyMaps = {
      $$typeof: 1,
      _owner: 1,
      _store: 1,
      _self: 1,
      _source: 1
    };

    if (keyMaps[key]) {
      return true;
    }

    return false;
  }

  function deepEqual(objA, objB, depth) {
    if (depth > maxDep) {
      return false;
    }

    depth += 1;

    if (!dUtil.isObject(objA) && !dUtil.isArray(objB)) {
      if (!valCompare(objA, objB)) {
        return false;
      }
    }

    var keysA = Object.keys(objA || {});
    var keysB = Object.keys(objB || {});

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i += 1) {
      var comPareValA = objA[keysA[i]];
      var comPareValB = objB[keysB[i]];

      if (keysA[0] === '$$typeof' && keysA[i] === 'children') {
        return true;
      } else if (keysA[0] === '$$typeof' && skipKeys(keysA[i])) {
        continue;
      }

      if (!objB.hasOwnProperty(keysA[i])) {
        return false;
      }

      if (!valCompare(comPareValA, comPareValB, depth)) {
        return false;
      }
    }

    return true;
  }

  function valCompare(valA, valB, depth) {
    if (dUtil.isFunction(valA)) {
      if (valA.hasOwnProperty('name') && valB.hasOwnProperty('name') && valA.name === valB.name) {
        return true;
      }

      return false;
    }

    if (dUtil.isString(valA) || dUtil.isNumber(valA) || dUtil.isBoolean(valA)) {
      if (valA !== valB) {
        return false;
      }

      return true;
    }

    if (dUtil.isDate(valA)) {
      if (valA.getTime() !== valB.getTime()) {
        return false;
      }

      return true;
    }

    if (dUtil.isObject(valA) || dUtil.isArray(valA)) {
      return deepEqual(valA, valB, depth);
    }

    if (valA !== valB) {
      return false;
    }

    return true;
  }

  function deepCompare(instance, nextProps, nextState) {
    var result = !deepEqual(instance.props, nextProps, 1) || !deepEqual(instance.state, nextState, 1);
    return result;
  }

  function shouldComponentUpdate(nextProps, nextState) {
    return deepCompare(this, nextProps, nextState);
  }

  function LHPureRenderDecorator(component) {
    component.prototype.shouldComponentUpdate = shouldComponentUpdate;
    return component;
  }

  var _default = LHPureRenderDecorator;
  exports.default = _default;
},10064,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _LHGetPx = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var LHUiUtils = function () {
    function LHUiUtils() {
      (0, _classCallCheck2.default)(this, LHUiUtils);
    }

    (0, _createClass2.default)(LHUiUtils, null, [{
      key: "GetPx",
      value: function GetPx(px, design, minDesign) {
        return (0, _LHGetPx.default)(px, design, minDesign);
      }
    }]);
    return LHUiUtils;
  }();

  exports.default = LHUiUtils;
  LHUiUtils.MiJiaBlue = '#0099FF';
  LHUiUtils.MiJiaBluePres = '#18BAF0';
  LHUiUtils.MiJiaGreen = '#18BAF0';
  LHUiUtils.MiJiaRed = '#F43F31';
  LHUiUtils.MiJiaRedPres = '#d53c32';
  LHUiUtils.MiJiaWhite = '#ffffff';
  LHUiUtils.MiJiaBackgroundGray = '#f7f7f7';
  LHUiUtils.MiJiaCellSelBgColor = 'rgba(0,0,0,0.1)';
  LHUiUtils.MiJiaTitleColor = '#000';
  LHUiUtils.MiJiaSubTitleColor = '#666666';
  LHUiUtils.MiJiaDescriptionColor = '#999999';
  LHUiUtils.MiJiaLineColor = 'rgba(0,0,0,0.15)';
  LHUiUtils.MiJiaBorderWidth = _reactNative.StyleSheet.hairlineWidth || 0.5;
  LHUiUtils.MiJiaListHeaderColor = '#7F7F7F';
  LHUiUtils.MiJiaOrangeColor = '#FF9900';
  LHUiUtils.MiJiaLightGray = '#ccc';
  LHUiUtils.FontFamilyDDINCondensed = 'D-DINCondensed';
  LHUiUtils.FontFamilyDDIN = 'D-DIN';
  LHUiUtils.CellDefaultFontFamily = 'D-DINCondensed';
  LHUiUtils.TitleBarHeight = _reactNative.Platform.OS === 'android' ? 55 : 44;
  LHUiUtils.NumberDefaultFontFamily = _reactNative.Platform.OS === 'android' ? 'Mitype2018-60' : 'PingFangSC-Regular';
  LHUiUtils.DefaultFontFamily = _reactNative.Platform.OS === 'android' ? 'MI-LANTING_GB-OUTSIDE-YS' : 'PingFangSC-Regular';
},10067,[14305,14320,14323,10033,10070]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = GetPx;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  function GetPx(px, design, minDesign) {
    design = design || 360;
    minDesign = minDesign || 360;
    var calPx = Math.abs(px) / design * (width > 400 ? 400 : width < minDesign ? minDesign : width);

    var roundToNearestPixel = _reactNative.PixelRatio.roundToNearestPixel(calPx);

    return px < 0 ? -roundToNearestPixel : roundToNearestPixel;
  }
},10070,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[4]);

  var LHDateUtils = function () {
    function LHDateUtils() {
      (0, _classCallCheck2.default)(this, LHDateUtils);
    }

    (0, _createClass2.default)(LHDateUtils, null, [{
      key: "DateFormat",
      value: function DateFormat(format, time, isUtc) {
        var time2Date = function time2Date(value) {
          if (Number(value) > 10000000000) {
            return new Date(value);
          }

          return new Date(value * 1000);
        };

        var date = time2Date(time);
        var formatS = format;
        var fortmatKey;
        var fullYear;

        if (isUtc) {
          fortmatKey = {
            'M+': date.getUTCMonth() + 1,
            'd+': date.getUTCDate(),
            'h+': date.getUTCHours(),
            'm+': date.getUTCMinutes(),
            's+': date.getUTCSeconds(),
            'q+': Math.floor((date.getUTCMonth() + 3) / 3),
            'S+': date.getMilliseconds()
          };
          fullYear = date.getUTCFullYear();
        } else {
          fortmatKey = {
            'M+': date.getMonth() + 1,
            'd+': date.getDate(),
            'h+': date.getHours(),
            'm+': date.getMinutes(),
            's+': date.getSeconds(),
            'q+': Math.floor((date.getMonth() + 3) / 3),
            'S+': date.getMilliseconds()
          };
          fullYear = date.getFullYear();
        }

        if (/(y+)/i.test(formatS)) {
          formatS = formatS.replace(RegExp.$1, (fullYear + '').substr(4 - RegExp.$1.length));
        }

        for (var k in fortmatKey) {
          if (new RegExp('(' + k + ')').test(formatS)) {
            formatS = formatS.replace(RegExp.$1, RegExp.$1.length === 1 ? fortmatKey[k] : ('00' + fortmatKey[k]).substr(('' + fortmatKey[k]).length));
          }
        }

        return formatS;
      }
    }, {
      key: "GetStandardTimeText",
      value: function GetStandardTimeText(time) {
        var today = new Date();
        var todaySec = Math.floor(today.getTime() / 1000);
        var yesterday = new Date(today.getFullYear(), today.getMonth());
        yesterday.setDate(today.getDate() - 1);
        var yesterdaySec = Math.floor(yesterday.getTime() / 1000);

        if (LHDateUtils.DateFormat('yyyy-MM-dd', todaySec) === LHDateUtils.DateFormat('yyyy-MM-dd', time)) {
          return _LHCommonFunction.LHCommonLocalizableString.common_log_today;
        } else if (LHDateUtils.DateFormat('yyyy-MM-dd', yesterdaySec) === LHDateUtils.DateFormat('yyyy-MM-dd', time)) {
          return _LHCommonFunction.LHCommonLocalizableString.common_log_yesterday;
        }

        if (LHDateUtils.DateFormat('yyyy', todaySec) !== LHDateUtils.DateFormat('yyyy', time)) {
          return LHDateUtils.DateFormat(LHDateUtils.GetDateFormatter(true), time);
        }

        return LHDateUtils.DateFormat(LHDateUtils.GetDateFormatter(), time);
      }
    }, {
      key: "GetHomeLogTime",
      value: function GetHomeLogTime(time) {
        var today = new Date();
        var todaySec = Math.floor(today.getTime() / 1000);
        var todayYear = today.getFullYear();
        var todayMonth = today.getMonth();
        var todayDate = today.getDate();
        var yesterday = new Date(todayYear, todayMonth);
        yesterday.setDate(todayDate - 1);
        var yesterdaySec = Math.floor(yesterday.getTime() / 1000);

        if (LHDateUtils.DateFormat('yyyy-MM-dd', todaySec) === LHDateUtils.DateFormat('yyyy-MM-dd', time)) {
          return LHDateUtils.DateFormat('hh:mm', time);
        } else if (LHDateUtils.DateFormat('yyyy-MM-dd', yesterdaySec) === LHDateUtils.DateFormat('yyyy-MM-dd', time)) {
          return _LHCommonFunction.LHCommonLocalizableString.common_log_yesterday + ' ' + LHDateUtils.DateFormat('hh:mm', time);
        }

        return todayYear === new Date(time * 1000).getFullYear() ? LHDateUtils.DateFormat(LHDateUtils.GetDateFormatter() + ' hh:mm', time) : LHDateUtils.DateFormat(LHDateUtils.GetDateFormatter(true) + ' hh:mm', time);
      }
    }, {
      key: "GetDateFormatter",
      value: function GetDateFormatter(hasYear) {
        var YMD = ['ja', 'zh', 'zh_tw', 'zh_hk', 'ko'];
        var DMY = ['es', 'fr', 'ru', 'it', 'pl', 'id', 'de', 'vi', 'th', 'pt', 'ar', 'tr'];
        var language = _miot.Host.locale.language;

        if (DMY.indexOf(language) > -1) {
          return hasYear ? 'dd/MM/yyyy' : 'dd/MM';
        } else if (YMD.indexOf(language) > -1) {
          return hasYear ? 'yyyy/MM/dd' : 'MM/dd';
        } else {
          return hasYear ? 'MM/dd/yyyy' : 'MM/dd';
        }
      }
    }, {
      key: "GetDateFormatterCommon",
      value: function GetDateFormatterCommon(hasYear) {
        var symbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
        var YMD = ['ja', 'zh', 'zh_tw', 'zh_hk', 'ko'];
        var DMY = ['es', 'fr', 'ru', 'it', 'pl', 'id', 'de', 'vi', 'th', 'pt', 'ar', 'tr'];
        var language = _miot.Host.locale.language;

        if (DMY.indexOf(language) > -1) {
          return hasYear ? 'dd' + symbol + 'MM' + symbol + 'yyyy' : 'dd' + symbol + 'MM';
        } else if (YMD.indexOf(language) > -1) {
          return hasYear ? 'yyyy' + symbol + 'MM' + symbol + 'dd' : 'MM' + symbol + 'dd';
        } else {
          return hasYear ? 'MM' + symbol + 'dd' + symbol + 'yyyy' : 'MM' + symbol + 'dd';
        }
      }
    }, {
      key: "isLeapYear",
      value: function isLeapYear(eDate) {
        var year = eDate.getFullYear();
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
    }, {
      key: "getDaysInMonth",
      value: function getDaysInMonth(eDate) {
        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        daysInMonth[1] = LHDateUtils.isLeapYear(eDate) ? 29 : 28;
        return daysInMonth[eDate.getMonth() + 1];
      }
    }, {
      key: "getTimeDiff",
      value: function getTimeDiff(date) {
        var currentDate = new Date();
        currentDate.setMinutes(0);
        currentDate.setHours(0);
        currentDate.setSeconds(0);
        currentDate.setMilliseconds(0);
        var difValue = (date.getTime() - currentDate.getTime()) / 86400000;
        return Math.floor(difValue);
      }
    }, {
      key: "isTomorrow",
      value: function isTomorrow(date) {
        if (this.getTimeDiff(date) === 1) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "isYesterday",
      value: function isYesterday(date) {
        if (this.getTimeDiff(date) === -1) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "isToday",
      value: function isToday(date) {
        if (this.getTimeDiff(date) === 0) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "isAfter",
      value: function isAfter(date) {
        var currentDate = new Date();

        if (date.getTime() > currentDate.getTime()) {
          return true;
        }

        return false;
      }
    }, {
      key: "isBefore",
      value: function isBefore(date) {
        var currentDate = new Date();

        if (date.getTime() < currentDate.getTime()) {
          return true;
        }

        return false;
      }
    }]);
    return LHDateUtils;
  }();

  exports.default = LHDateUtils;
},10073,[14305,14320,14323,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var LHLogUtils = function (_React$Component) {
    (0, _inherits2.default)(LHLogUtils, _React$Component);

    function LHLogUtils() {
      (0, _classCallCheck2.default)(this, LHLogUtils);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLogUtils).apply(this, arguments));
    }

    (0, _createClass2.default)(LHLogUtils, null, [{
      key: "GetLatestLog",
      value: function GetLatestLog(setting) {
        var params = {
          did: _miot.Device.deviceID,
          type: 'event',
          time_start: 0,
          time_end: new Date().getTime() / 1000,
          limit: 2
        };
        return new Promise(function (resolve, reject) {
          var onSuccess = function onSuccess(res) {
            resolve(res[0]);
          };

          _LHCommonFunction.LHMiServer.GetDeviceData((0, _objectSpread2.default)({}, params, setting), onSuccess, reject);
        });
      }
    }, {
      key: "GetLatestDeviceLog",
      value: function GetLatestDeviceLog() {
        return LHLogUtils.GetLatestLog({
          key: 'device_log',
          type: 'prop'
        });
      }
    }]);
    return LHLogUtils;
  }(_react.default.Component);

  exports.default = LHLogUtils;
},10076,[14305,14314,14320,14323,14371,14377,14386,10297,10004,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var tempRPCParams;
  var rpcPayloads = {};
  var rpcStatus = {
    unExecuted: 0,
    success: 1,
    failed: 2
  };

  function baseRequire(requireFn, errorCount, params, onSuccess, onFail) {
    var nextErrorCount = errorCount + 1;
    requireFn(params).then(function (res) {
      if (typeof onSuccess === 'function') {
        nextErrorCount = -1;
        onSuccess(res);
      }
    }).catch(function (err) {
      console.log(err);

      if (nextErrorCount === -1) {
        console.warn('回调函数代码有错误，请仔细检查，%o', err);
      } else {
        setTimeout(function () {
          if (errorCount < 3) {
            console.warn('拉取数据失败，1秒后尝试重新拉取');
            return baseRequire(requireFn, nextErrorCount, params, onSuccess, onFail);
          }

          if (typeof onFail === 'function') onFail(err);
          return null;
        }, 1000);
      }
    });
  }

  function baseRequireWithMultipleParams(requireFn, errorCount, onSuccess, onFail) {
    for (var _len = arguments.length, params = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
      params[_key - 4] = arguments[_key];
    }

    console.log(params);
    var nextErrorCount = errorCount + 1;
    requireFn.apply(undefined, params).then(function (res) {
      if (typeof onSuccess === 'function') {
        nextErrorCount = -1;
        onSuccess(res);
      }
    }).catch(function (err) {
      console.log(err);

      if (nextErrorCount === -1) {
        console.warn('回调函数代码有错误，请仔细检查，%o', err);
      } else {
        setTimeout(function () {
          if (errorCount < 3) {
            console.warn('拉取数据失败，1秒后尝试重新拉取');
            return baseRequire(requireFn, nextErrorCount, params, onSuccess, onFail);
          }

          if (typeof onFail === 'function') onFail(err);
          return null;
        }, 1000);
      }
    });
  }

  var LHMiServer = function () {
    function LHMiServer() {
      (0, _classCallCheck2.default)(this, LHMiServer);
    }

    (0, _createClass2.default)(LHMiServer, null, [{
      key: "GetDeviceData",
      value: function GetDeviceData(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getDeviceData, 0, params, onSuccess, onFail);
      }
    }, {
      key: "GetDeviceDataPromise",
      value: function GetDeviceDataPromise(params) {
        return _miot.Service.smarthome.getDeviceData(params);
      }
    }, {
      key: "GetUserDeviceDataTab",
      value: function GetUserDeviceDataTab(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getUserDeviceDataTab, 0, params, onSuccess, onFail);
      }
    }, {
      key: "GetUserDeviceLog",
      value: function GetUserDeviceLog(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getUserDeviceLog, 0, params, onSuccess, onFail);
      }
    }, {
      key: "GetHostStorage",
      value: function GetHostStorage(key) {
        return _miot.Host.storage.get(key).then(function (res) {
          if (res && typeof res === 'object') {
            return _LHCommonFunction.CommonMethod.DeepClone(res);
          }

          return res;
        });
      }
    }, {
      key: "SetHostStorage",
      value: function SetHostStorage(key, value, opt) {
        return _miot.Host.storage.set(key, value, opt || {
          expire: 0
        });
      }
    }, {
      key: "GetDeviceSetting",
      value: function GetDeviceSetting(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getDeviceSettingV2, 0, params, onSuccess, onFail);
      }
    }, {
      key: "SetDeviceSetting",
      value: function SetDeviceSetting(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.setDeviceSetting, 3, params, onSuccess, onFail);
      }
    }, {
      key: "OpenPrivacyLicense",
      value: function OpenPrivacyLicense(licenseText, licenseUrl, policyText, policyUrl) {
        return _miot.Host.ui.openPrivacyLicense(licenseText, licenseUrl, policyText, policyUrl);
      }
    }, {
      key: "GetSubDevices",
      value: function GetSubDevices(onSuccess, onFail) {
        return _miot.Device.getSubDevices().then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "LoadRealDeviceConfig",
      value: function LoadRealDeviceConfig(model, onSuccess, onFail) {
        return _miot.Device.loadRealDeviceConfig(model).then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "DeleteDevices",
      value: function DeleteDevices(didAndPid, onSuccess, onFail) {
        return _miot.Device.deleteDevices(didAndPid).then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "ChangeDeviceName",
      value: function ChangeDeviceName(newName, did, onSuccess, onFail) {
        return _miot.Device.changeDeviceName(newName, did).then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "LoadSceneList",
      value: function LoadSceneList(did, sceneType, opt, onSuccess, onFail) {
        return baseRequireWithMultipleParams(_miot.Service.scene.loadScenes, 0, onSuccess, onFail, did, sceneType, opt);
      }
    }, {
      key: "LoadScenesHistoryForDevice",
      value: function LoadScenesHistoryForDevice(did, timestamp, limit, onSuccess, onFail) {
        return baseRequireWithMultipleParams(_miot.Service.scene.loadScenesHistoryForDevice, 0, onSuccess, onFail, did, timestamp, limit);
      }
    }, {
      key: "GetPropertiesValue",
      value: function GetPropertiesValue(params, onSuccess, onFail) {
        var errorCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        return baseRequire(_miot.Service.spec.getPropertiesValue, errorCount, params, onSuccess, onFail);
      }
    }, {
      key: "SetPropertiesValue",
      value: function SetPropertiesValue(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.spec.setPropertiesValue, 3, params, onSuccess, onFail);
      }
    }, {
      key: "GetSpecProperties",
      value: function GetSpecProperties(params) {
        var _this = this;

        return new Promise(function (resolve, reject) {
          _this.GetPropertiesValue(params, resolve, reject, 3);
        }).catch(function (error) {
          console.warn("GetSpecProperties error warning:\n          params: " + JSON.stringify(params) + ",\n          error: " + JSON.stringify(error.message || error.error || error));
          throw error;
        });
      }
    }, {
      key: "SetSpecProperties",
      value: function SetSpecProperties(params) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          _this2.SetPropertiesValue(params, resolve, reject);
        }).catch(function (error) {
          console.warn("SetSpecProperties error warning:\n          params: " + JSON.stringify(params) + ",\n          error: " + JSON.stringify(error.message || error.error || error));
          throw error;
        });
      }
    }, {
      key: "GetGateWayListWithModel",
      value: function GetGateWayListWithModel(model, onSuccess, onFail) {
        return baseRequire(_miot.Host.ui.getDevicesWithModel, 0, model, onSuccess, onFail);
      }
    }, {
      key: "DoActionValue",
      value: function DoActionValue(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.spec.doAction, 0, params, onSuccess, onFail);
      }
    }, {
      key: "GetUserStatistics",
      value: function GetUserStatistics(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getUserStatistics, 0, params, onSuccess, onFail);
      }
    }, {
      key: "GetMultiSwitchTemplateWithModel",
      value: function GetMultiSwitchTemplateWithModel(model, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getMultiSwitchTemplateWithModel, 0, model, onSuccess, onFail);
      }
    }, {
      key: "GetMultiSwitchInfoWithDids",
      value: function GetMultiSwitchInfoWithDids(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.getMultiSwitchInfoWithDids, 0, params, onSuccess, onFail);
      }
    }, {
      key: "SendRPCRequest",
      value: function SendRPCRequest(methodName, array, params, onSuccess, onFail) {
        if (typeof _miot.Device.parentDevice === 'undefined') {
          _miot.Device.getDeviceWifi().callMethod(methodName, array, params !== null ? params : {}).then(function (res) {
            onSuccess(res);
          }).catch(function (err) {
            onFail(err);
          });
        } else {
          _miot.Device.parentDevice.getDeviceWifi().callMethod(methodName, [array], params !== null ? params : {}).then(function (res) {
            onSuccess(res);
          }).catch(function (err) {
            onFail(err);
          });
        }
      }
    }, {
      key: "SendRPCPayload",
      value: function SendRPCPayload(methodName, args) {
        var _this3 = this;

        var isChildMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var device = _miot.Device.parentDevice || _miot.Device;
        var rpcKey = this.getRPCPayloadKey(methodName, args, _miot.Device.deviceID);
        var rpcPayload = this.checkAndInitRPCPayload(rpcKey);

        if (!this.isAllowSendRPC(methodName, args, _miot.Device.deviceID)) {
          return new Promise(function (resolve, reject) {
            var result = rpcPayload.result;
            var status = rpcPayload.status;

            if (status === rpcStatus.success) {
              resolve(result);
            } else if (status === rpcStatus.failed) {
              reject(result);
            } else {
              if (!rpcPayload.promises) rpcPayload.promises = [];
              rpcPayload.promises.push({
                resolve: resolve,
                reject: reject
              });
            }
          });
        }

        rpcPayload.status = rpcStatus.unExecuted;
        this.updateTempRPCParams(methodName, args, _miot.Device.deviceID);
        return device.getDeviceWifi().callMethod(methodName, args, isChildMethod ? {
          sid: _miot.Device.deviceID
        } : {}).then(function (res) {
          var error = res.error;

          if (error) {
            throw (0, _extends2.default)(new Error(JSON.stringify(error)), {
              error: error
            });
          }

          _this3.tempPromiseList(rpcKey, res, true);

          return res;
        }).catch(function (error) {
          _this3.tempPromiseList(rpcKey, error, false);

          console.warn("SendRPCPayload error warning:\n            method: " + methodName + ",\n            params: " + JSON.stringify(args) + ",\n            isChildMethod: " + isChildMethod + ",\n            error: " + JSON.stringify(error.message || error.error || error));
          throw error;
        });
      }
    }, {
      key: "checkAndInitRPCPayload",
      value: function checkAndInitRPCPayload(rpcKey) {
        var rpcPayload = rpcPayloads[rpcKey];

        if (!rpcPayload) {
          rpcPayload = {
            promises: [],
            result: null,
            status: rpcStatus.unExecuted
          };
          rpcPayloads[rpcKey] = rpcPayload;
        }

        return rpcPayload;
      }
    }, {
      key: "tempPromiseList",
      value: function tempPromiseList(rpcKey, result, isSuccess) {
        var rpcPayload = this.checkAndInitRPCPayload(rpcKey);
        rpcPayload.time = new Date().getTime();
        rpcPayload.status = isSuccess ? rpcStatus.success : rpcStatus.failed;
        rpcPayload.result = result;

        if (rpcPayload.promises && rpcPayload.promises.length > 0) {
          rpcPayload.promises.forEach(function (element) {
            console.warn('-- 来自已经被拦截的 RPC 的成功回调 --');

            if (isSuccess) {
              if (element.resolve) element.resolve(result);
            } else if (element.reject) element.reject(result);
          });
        }

        rpcPayload.promises = [];
        this.removeRpcPayload();
      }
    }, {
      key: "removeRpcPayload",
      value: function removeRpcPayload() {
        var time = new Date().getTime();
        var keys = Object.keys(rpcPayloads);

        for (var i = 0, len = keys.length; i < len; i += 1) {
          if (rpcPayloads[keys[i]].status !== rpcStatus.unExecuted && time - rpcPayloads[keys[i]].time > 1100) {
            delete rpcPayloads[keys[i]];
          }
        }
      }
    }, {
      key: "getRPCPayloadKey",
      value: function getRPCPayloadKey(methodName, params, did) {
        var keyObj = {
          methodName: methodName,
          params: JSON.stringify(params),
          did: did
        };
        return JSON.stringify(keyObj);
      }
    }, {
      key: "isAllowSendRPC",
      value: function isAllowSendRPC(methodName, params, did) {
        if (!tempRPCParams) {
          return true;
        }

        if (methodName !== tempRPCParams.methodName || did !== tempRPCParams.did || JSON.stringify(params) !== tempRPCParams.params) {
          return true;
        }

        if (new Date().getTime() - tempRPCParams.time >= 1100) {
          return true;
        }

        return false;
      }
    }, {
      key: "updateTempRPCParams",
      value: function updateTempRPCParams(methodName, params, did) {
        tempRPCParams = {
          methodName: methodName,
          params: JSON.stringify(params),
          did: did,
          time: new Date().getTime()
        };
      }
    }, {
      key: "UpdateDeviceHardware",
      value: function UpdateDeviceHardware(onSuccess, onFail) {
        return baseRequireWithMultipleParams(_miot.Service.smarthome.checkDeviceVersion, 0, onSuccess, onFail, _miot.Device.deviceID, _miot.Device.type);
      }
    }, {
      key: "OpenYouPinShop",
      value: function OpenYouPinShop(key) {
        return _miot.Host.ui.openShopSearchPage(key);
      }
    }, {
      key: "BatchGetDeviceDatas",
      value: function BatchGetDeviceDatas(params, onSuccess, onFail) {
        return _miot.Service.smarthome.batchGetDeviceDatas(params).then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "BatchSetDeviceDatas",
      value: function BatchSetDeviceDatas(params, onSuccess, onFail) {
        return baseRequire(_miot.Service.smarthome.batchSetDeviceDatas, 0, params, onSuccess, onFail);
      }
    }, {
      key: "GetCurrentServerInfo",
      value: function GetCurrentServerInfo(onSuccess) {
        var serverInfo = {
          server: 'cn',
          country: 'cn'
        };

        _miot.Service.getServerName().then(function (res) {
          var serverCode = res.serverCode,
              countryCode = res.countryCode;
          var mServerCode = serverCode.toLowerCase();
          var mCountryCode = countryCode.toLowerCase();
          serverInfo.server = mServerCode;
          serverInfo.country = mCountryCode;
          if (typeof onSuccess === 'function') onSuccess(serverInfo);
        }).catch(function () {
          if (typeof onSuccess === 'function') onSuccess(serverInfo);
        });
      }
    }, {
      key: "isOverSea",
      value: function isOverSea(onSuccess) {
        LHMiServer.GetCurrentServerInfo(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res.server !== 'cn');
        });
      }
    }]);
    return LHMiServer;
  }();

  exports.default = LHMiServer;
},10079,[14305,14344,14320,14323,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var XSMAX_WIDTH = 414;
  var XSMAX_HEIGHT = 896;
  var PAD_WIDTH = 768;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var isIPhoneX = function () {
    return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT) || D_HEIGHT === XSMAX_HEIGHT && D_WIDTH === XSMAX_WIDTH || D_HEIGHT === XSMAX_WIDTH && D_WIDTH === XSMAX_HEIGHT;
  }();

  var isIPad = function () {
    if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (_reactNative.Platform.OS === 'android') {
      return _reactNative.StatusBar.currentHeight;
    }

    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  function getInset(key, isLandscape) {
    switch (key) {
      case 'horizontal':
      case 'right':
      case 'left':
        {
          return isLandscape ? isIPhoneX ? 44 : 0 : 0;
        }

      case 'vertical':
      case 'top':
        {
          return statusBarHeight(isLandscape);
        }

      case 'bottom':
        {
          return isIPhoneX ? isLandscape ? 24 : 34 : 0;
        }

      default:
        return 0;
    }
  }

  var androidHeight = 0;

  var LHDeviceUtils = function () {
    function LHDeviceUtils() {
      (0, _classCallCheck2.default)(this, LHDeviceUtils);
    }

    (0, _createClass2.default)(LHDeviceUtils, null, [{
      key: "getPhoneInset",
      value: function getPhoneInset(key, isLandscape) {
        return getInset(key, isLandscape);
      }
    }, {
      key: "GetPhoneScreenHeight",
      value: function GetPhoneScreenHeight(onSuccess) {
        var _Dimensions$get2 = _reactNative.Dimensions.get('window'),
            height = _Dimensions$get2.height;

        if (_reactNative.Platform.OS === 'android') {
          if (androidHeight > 0) {
            if (typeof onSuccess === 'function') onSuccess(androidHeight);
          } else {
            setTimeout(function () {
              _miot.Host.getPhoneScreenInfo().then(function (res) {
                console.log('LHDeviceUtils GetPhoneScreenHeight android', res.viewHeight, res);
                if (res && res.viewHeight) androidHeight = res.viewHeight;
                if (typeof onSuccess === 'function') onSuccess(res ? res.viewHeight || height : height);
              }).catch(function () {
                if (typeof onSuccess === 'function') onSuccess(height);
              });
            }, 100);
          }
        } else {
          console.log('LHDeviceUtils GetPhoneScreenHeight ios', height);
          if (typeof onSuccess === 'function') onSuccess(height);
        }
      }
    }]);
    return LHDeviceUtils;
  }();

  exports.default = LHDeviceUtils;
  LHDeviceUtils.statusBarHeight = getInset('top', false);
  LHDeviceUtils.AppHomeIndicatorHeight = getInset('bottom', false);
},10082,[14305,14320,14323,10074,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var _LHSensorSetIFTTTConstant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHSensorSetIFTTTEURequest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHSensorSetIFTTTUKRequest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHSensorSetIFTTTUSRequest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var SensorSetIFTTTKey = 'SensorSetIFTTTKey';
  var SensorSetAlreadyBuildIFTTTKey = 'SensorSetAlreadyBuildIFTTTKey';

  var LHSensorSetIFTTTManager = function () {
    function LHSensorSetIFTTTManager() {
      (0, _classCallCheck2.default)(this, LHSensorSetIFTTTManager);
    }

    (0, _createClass2.default)(LHSensorSetIFTTTManager, null, [{
      key: "buildSensorSetIFTTT",
      value: function buildSensorSetIFTTT(onSuccess, onFail) {
        var _this = this;

        if (_miot.Device.isOnline === false) {
          console.log('设备不在线，不进行套装自动化的构建');
          if (typeof onFail === 'function') onFail(_LHSensorSetIFTTTConstant.default.errorCode().OFFLine);
          return;
        }

        if (_LHSensorSetIFTTTConstant.default.getCurrentGatewaySensorSetIFTTTType() === _LHSensorSetIFTTTConstant.default.IFTTTType.UnNecessary) {
          console.log('设备不属于套装，不进行套装自动化的构建');
          if (typeof onFail === 'function') onFail(_LHSensorSetIFTTTConstant.default.errorCode().NotSupportSensorSetIFTTT);
          return;
        }

        this.getBuildSensorSetIFTTTCache(function (cacheResCode) {
          if (cacheResCode === _LHSensorSetIFTTTConstant.default.successCode().AlreadyBuild) {
            console.log('本地缓存已经标记未创建过套装自动化，不进行套装自动化的构建');
            if (typeof onSuccess === 'function') onSuccess(_LHSensorSetIFTTTConstant.default.successCode().AlreadyBuild);
          } else {
            _this.getCurrentGatewayIFTTTConfig(function (res) {
              if (res === _LHSensorSetIFTTTConstant.default.successCode().AlreadyBuild) {
                console.log('网关已经标记未创建过套装自动化，不进行套装自动化的构建');
                if (typeof onSuccess === 'function') onSuccess(_LHSensorSetIFTTTConstant.default.successCode().AlreadyBuild);
              } else if (res === _LHSensorSetIFTTTConstant.default.successCode().NeedBuild) {
                console.log('需要构建套装自动化');

                _this.startBuildSensorSetIFTTT(function (resCode) {
                  _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                  _this.showBuildSuccessToast();

                  if (typeof onSuccess === 'function') onSuccess(resCode);
                }, function (errCode) {
                  _this.showBuildFailToast();

                  if (typeof onFail === 'function') onFail(errCode);
                });
              } else {
                _this.showBuildFailToast();

                if (typeof onFail === 'function') onFail(_LHSensorSetIFTTTConstant.default.errorCode().RPCError);
              }
            }, function (err) {
              _this.showBuildFailToast();

              if (typeof onFail === 'function') onFail(err);
            });
          }
        });
      }
    }, {
      key: "getCurrentGatewayIFTTTConfig",
      value: function getCurrentGatewayIFTTTConfig(onSuccess, onFail) {
        _LHCommonFunction.LHMiServer.SendRPCRequest('get_lumi_bind', ['scene'], {}, function (res) {
          if (res && res.result) {
            if (res.result.fac_scene_enable > 0) {
              onSuccess(_LHSensorSetIFTTTConstant.default.successCode().NeedBuild);
            } else if (res.result.fac_scene_enable === 0) {
              onSuccess(_LHSensorSetIFTTTConstant.default.successCode().AlreadyBuild);
            } else {
              onFail(_LHSensorSetIFTTTConstant.default.errorCode().RPCError);
            }
          } else {
            onFail(_LHSensorSetIFTTTConstant.default.errorCode().RPCError);
          }
        }, function () {
          onFail(_LHSensorSetIFTTTConstant.default.errorCode().RPCError);
        });
      }
    }, {
      key: "showRetryDialog",
      value: function showRetryDialog(onSuccess, onFail) {
        var _this2 = this;

        _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

        setTimeout(function () {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            title: _LHCommonLocalizableString.default.sensor_set_ifttt_config_fail,
            message: _LHCommonLocalizableString.default.sensor_set_ifttt_config_fail_tip,
            cancel: _LHCommonLocalizableString.default.common_cancel,
            confirm: _LHCommonLocalizableString.default.common_button_retry,
            confirmStyle: {
              color: _LHCommonFunction.LHUiUtils.MiJiaBlue
            },
            onConfirm: function onConfirm() {
              setTimeout(function () {
                _this2.startBuildSensorSetIFTTT(onSuccess, onFail);
              }, 300);
            }
          });
        }, 500);
      }
    }, {
      key: "showBuildFailToast",
      value: function showBuildFailToast() {
        _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

        var iftttType = _LHSensorSetIFTTTConstant.default.getCurrentGatewaySensorSetIFTTTType();

        if (iftttType !== _LHSensorSetIFTTTConstant.default.IFTTTType().US) {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonLocalizableString.default.sensor_set_ifttt_config_fail);
        }
      }
    }, {
      key: "showBuildSuccessToast",
      value: function showBuildSuccessToast() {
        _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

        var iftttType = _LHSensorSetIFTTTConstant.default.getCurrentGatewaySensorSetIFTTTType();

        if (iftttType !== _LHSensorSetIFTTTConstant.default.IFTTTType().US) {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonLocalizableString.default.sensor_set_ifttt_config_success);
        }
      }
    }, {
      key: "startBuildSensorSetIFTTT",
      value: function startBuildSensorSetIFTTT(onSuccess, onFail) {
        var _this3 = this;

        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonLocalizableString.default.common_automation_configuring
        });

        _LHCommonFunction.LHMiServer.GetSubDevices(function (devices) {
          if (devices.length === 0) {
            onFail(_LHSensorSetIFTTTConstant.default.errorCode().DeviceListEmpty);
          } else {
            _this3.buildCurrentGatewaySensorSetIFTTT(devices, function (resCode) {
              var iftttType = _LHSensorSetIFTTTConstant.default.getCurrentGatewaySensorSetIFTTTType();

              if (iftttType === _LHSensorSetIFTTTConstant.default.IFTTTType().US) {
                console.log(resCode);
                onSuccess(resCode);
              } else if (resCode === _LHSensorSetIFTTTConstant.default.successCode().SuccessBuild) {
                onSuccess(_LHSensorSetIFTTTConstant.default.successCode().SuccessBuild);
              } else {
                _this3.showRetryDialog(onSuccess, onFail);
              }
            });
          }
        }, function () {
          onFail(_LHSensorSetIFTTTConstant.default.errorCode().RPCError);
        });
      }
    }, {
      key: "buildCurrentGatewaySensorSetIFTTT",
      value: function buildCurrentGatewaySensorSetIFTTT(devicesList, callBack) {
        var _this4 = this;

        var iftttType, callBackfunc;
        return _regenerator.default.async(function buildCurrentGatewaySensorSetIFTTT$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('准备构建套装自动化列表');
                iftttType = _LHSensorSetIFTTTConstant.default.getCurrentGatewaySensorSetIFTTTType();

                callBackfunc = function callBackfunc(successList, failList) {
                  var rescode = _LHSensorSetIFTTTConstant.default.successCode().SuccessBuild;

                  if (successList.length === 0) {
                    rescode = _LHSensorSetIFTTTConstant.default.errorCode().BuildError;
                  } else if (failList.length > 0 && successList.length > 0) {
                    rescode = _LHSensorSetIFTTTConstant.default.successCode().ApartBuild;
                  } else if (failList.length === 0) {
                    rescode = _LHSensorSetIFTTTConstant.default.successCode().SuccessBuild;
                  }

                  if (rescode === _LHSensorSetIFTTTConstant.default.successCode().SuccessBuild) {
                    _this4.saveSuccessBuildIFTTTCache([]);
                  } else {
                    _this4.saveSuccessBuildIFTTTCache(successList);
                  }

                  if (successList.length > 0) {
                    _this4.saveAlreadyBuildSensorSetIFTTT();
                  }

                  callBack(rescode);
                };

                this.getAlreadyBuildIFTTTCache(function (alreadyBuildIFTTTList) {
                  console.log('已经创建了的自动化列表：' + alreadyBuildIFTTTList);

                  if (iftttType === _LHSensorSetIFTTTConstant.default.IFTTTType().EU) {
                    _LHSensorSetIFTTTEURequest.default.buildSensorSetIFTTT(devicesList, alreadyBuildIFTTTList, callBackfunc);
                  } else if (iftttType === _LHSensorSetIFTTTConstant.default.IFTTTType().UK) {
                    _LHSensorSetIFTTTUKRequest.default.buildSensorSetIFTTT(devicesList, alreadyBuildIFTTTList, callBackfunc);
                  } else if (iftttType === _LHSensorSetIFTTTConstant.default.IFTTTType().US) {
                    _LHSensorSetIFTTTUSRequest.default.buildSensorSetIFTTT(devicesList, alreadyBuildIFTTTList, callBackfunc);
                  }
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getBuildSensorSetIFTTTCache",
      value: function getBuildSensorSetIFTTTCache(onSuccess) {
        _LHCommonFunction.LHMiServer.GetHostStorage(_LHCommonFunction.CommonMethod.CreatCacheKey(SensorSetIFTTTKey)).then(function (res) {
          if (!res) {
            onSuccess(_LHSensorSetIFTTTConstant.default.successCode().NeedBuild);
          } else {
            onSuccess(_LHSensorSetIFTTTConstant.default.successCode().AlreadyBuild);
          }
        });
      }
    }, {
      key: "saveAlreadyBuildSensorSetIFTTT",
      value: function saveAlreadyBuildSensorSetIFTTT() {
        _LHCommonFunction.LHMiServer.SetHostStorage(_LHCommonFunction.CommonMethod.CreatCacheKey(SensorSetIFTTTKey), true);
      }
    }, {
      key: "getAlreadyBuildIFTTTCache",
      value: function getAlreadyBuildIFTTTCache(onSuccess) {
        _LHCommonFunction.LHMiServer.GetHostStorage(_LHCommonFunction.CommonMethod.CreatCacheKey(SensorSetAlreadyBuildIFTTTKey)).then(function (res) {
          onSuccess(res);
        });
      }
    }, {
      key: "saveSuccessBuildIFTTTCache",
      value: function saveSuccessBuildIFTTTCache(successList) {
        _LHCommonFunction.LHMiServer.SetHostStorage(_LHCommonFunction.CommonMethod.CreatCacheKey(SensorSetAlreadyBuildIFTTTKey), successList);
      }
    }]);
    return LHSensorSetIFTTTManager;
  }();

  exports.default = LHSensorSetIFTTTManager;
},10085,[14305,14674,14320,14323,10074,10004,10088,10094,10118,10121,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHDeviceModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var SensorSetIFTTTType = {
    UnNecessary: -1,
    V3: 1,
    ACP201705: 2,
    TW: 3,
    EU: 4,
    ACDongpeng2018: 5,
    UK: 6,
    US: 100
  };

  var LHSensorSetIFTTTConstant = function () {
    function LHSensorSetIFTTTConstant() {
      (0, _classCallCheck2.default)(this, LHSensorSetIFTTTConstant);
    }

    (0, _createClass2.default)(LHSensorSetIFTTTConstant, null, [{
      key: "errorCode",
      value: function errorCode() {
        return {
          OFFLine: -1,
          NotSupportSensorSetIFTTT: -2,
          RPCError: -3,
          DeviceListEmpty: -4,
          BuildError: -5
        };
      }
    }, {
      key: "successCode",
      value: function successCode() {
        return {
          AlreadyBuild: 1,
          NeedBuild: 2,
          SuccessBuild: 3,
          ApartBuild: 4
        };
      }
    }, {
      key: "IFTTTType",
      value: function IFTTTType() {
        return SensorSetIFTTTType;
      }
    }, {
      key: "getCurrentGatewaySensorSetIFTTTType",
      value: function getCurrentGatewaySensorSetIFTTTType() {
        if (_miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubLmUK01()) {
          return SensorSetIFTTTType.UK;
        } else if (_miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiEU01()) {
          return SensorSetIFTTTType.EU;
        } else if (_miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM02()) {
          return SensorSetIFTTTType.US;
        }

        return SensorSetIFTTTType.UnNecessary;
      }
    }]);
    return LHSensorSetIFTTTConstant;
  }();

  exports.default = LHSensorSetIFTTTConstant;
  LHSensorSetIFTTTConstant.US_SWITCH_TOGGLE_PLUG = 'us_switch_toggle_plug';
  LHSensorSetIFTTTConstant.US_SWITCH_ALARM = 'us_switch_alarm';
  LHSensorSetIFTTTConstant.US_MAGNET_ALARM = 'us_magnet_alarm';
  LHSensorSetIFTTTConstant.US_MOTION_ALARM = 'us_motion_alarm';
  LHSensorSetIFTTTConstant.US_OPEN_SMART_LIGHT = 'us_open_smart_light';
},10088,[14305,14320,14323,10074,10091]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var LHDeviceModel = function () {
    function LHDeviceModel() {
      (0, _classCallCheck2.default)(this, LHDeviceModel);
    }

    (0, _createClass2.default)(LHDeviceModel, null, [{
      key: "AqaraHubM1S",
      value: function AqaraHubM1S() {
        return 'lumi.gateway.acn01';
      }
    }, {
      key: "DeviceModelMijiaMultiModeHub",
      value: function DeviceModelMijiaMultiModeHub() {
        return 'lumi.gateway.mgl03';
      }
    }, {
      key: "DeviceModelAqaraHubLmUK01",
      value: function DeviceModelAqaraHubLmUK01() {
        return 'lumi.gateway.lmuk01';
      }
    }, {
      key: "DeviceModelAqaraHubMiEU01",
      value: function DeviceModelAqaraHubMiEU01() {
        return 'lumi.gateway.mieu01';
      }
    }, {
      key: "DeviceModelAqaraHubMiTW01",
      value: function DeviceModelAqaraHubMiTW01() {
        return 'lumi.gateway.mitw01';
      }
    }, {
      key: "DeviceModelAqaraHubMiHK01",
      value: function DeviceModelAqaraHubMiHK01() {
        return 'lumi.gateway.mihk01';
      }
    }, {
      key: "DeviceModelAqaraHubAqHM01",
      value: function DeviceModelAqaraHubAqHM01() {
        return 'lumi.gateway.aqhm01';
      }
    }, {
      key: "DeviceModelAqaraHubAqHM02",
      value: function DeviceModelAqaraHubAqHM02() {
        return 'lumi.gateway.aqhm02';
      }
    }, {
      key: "DeviceModelAqaraHubAqHM03",
      value: function DeviceModelAqaraHubAqHM03() {
        return 'lumi.gateway.aqhm03';
      }
    }, {
      key: "DeviceModelGatewayV1",
      value: function DeviceModelGatewayV1() {
        return 'lumi.gateway.v1';
      }
    }, {
      key: "DeviceModelGatewayV2",
      value: function DeviceModelGatewayV2() {
        return 'lumi.gateway.v2';
      }
    }, {
      key: "DeviceModelGatewayV3",
      value: function DeviceModelGatewayV3() {
        return 'lumi.gateway.v3';
      }
    }, {
      key: "DeviceAcpartnerV1",
      value: function DeviceAcpartnerV1() {
        return 'lumi.acpartner.v1';
      }
    }, {
      key: "DeviceAcpartnerV2",
      value: function DeviceAcpartnerV2() {
        return 'lumi.acpartner.v2';
      }
    }, {
      key: "DeviceAcpartnerV3",
      value: function DeviceAcpartnerV3() {
        return 'lumi.acpartner.v3';
      }
    }, {
      key: "DeviceCameraAq1",
      value: function DeviceCameraAq1() {
        return 'lumi.camera.aq1';
      }
    }, {
      key: "DeviceCameraGwAq1",
      value: function DeviceCameraGwAq1() {
        return 'lumi.camera.gwagl01';
      }
    }, {
      key: "DeviceModelWirelessSwitchAq2",
      value: function DeviceModelWirelessSwitchAq2() {
        return 'lumi.sensor_switch.aq2';
      }
    }, {
      key: "DeviceModelWirelessSwitchCN01",
      value: function DeviceModelWirelessSwitchCN01() {
        return 'lumi.remote.b1acn01';
      }
    }, {
      key: "AqaraSwitchT1",
      value: function AqaraSwitchT1() {
        return 'lumi.remote.b1acn02';
      }
    }, {
      key: "DeviceModelWirelessSwitchAq3",
      value: function DeviceModelWirelessSwitchAq3() {
        return 'lumi.sensor_switch.aq3';
      }
    }, {
      key: "DeviceModelWirelessSwitchV2",
      value: function DeviceModelWirelessSwitchV2() {
        return 'lumi.sensor_switch.v2';
      }
    }, {
      key: "DeviceModelSensorMotionAq2",
      value: function DeviceModelSensorMotionAq2() {
        return 'lumi.sensor_motion.aq2';
      }
    }, {
      key: "DeviceModelSensorMotionV2",
      value: function DeviceModelSensorMotionV2() {
        return 'lumi.sensor_motion.v2';
      }
    }, {
      key: "DeviceModelSensorMagnetAq2",
      value: function DeviceModelSensorMagnetAq2() {
        return 'lumi.sensor_magnet.aq2';
      }
    }, {
      key: "DeviceModelSensorMagnetV2",
      value: function DeviceModelSensorMagnetV2() {
        return 'lumi.sensor_magnet.v2';
      }
    }, {
      key: "DeviceModelVibrationAq1",
      value: function DeviceModelVibrationAq1() {
        return 'lumi.vibration.aq1';
      }
    }, {
      key: "DeviceModelCubeAq1",
      value: function DeviceModelCubeAq1() {
        return 'lumi.sensor_cube.aqgl01';
      }
    }, {
      key: "DeviceModelCubeMijiaV1",
      value: function DeviceModelCubeMijiaV1() {
        return 'lumi.sensor_cube.v1';
      }
    }, {
      key: "DeviceModelSensorHTV1",
      value: function DeviceModelSensorHTV1() {
        return 'lumi.sensor_ht.v1';
      }
    }, {
      key: "DeviceModelWeatherV1",
      value: function DeviceModelWeatherV1() {
        return 'lumi.weather.v1';
      }
    }, {
      key: "DeviceModelSensorWleakAq1",
      value: function DeviceModelSensorWleakAq1() {
        return 'lumi.sensor_wleak.aq1';
      }
    }, {
      key: "AqaraWleakT1",
      value: function AqaraWleakT1() {
        return 'lumi.flood.agl02';
      }
    }, {
      key: "DeviceModelSensor86SWV1",
      value: function DeviceModelSensor86SWV1() {
        return 'lumi.sensor_86sw1.v1';
      }
    }, {
      key: "DeviceModelSensor86ACN01",
      value: function DeviceModelSensor86ACN01() {
        return 'lumi.remote.b186acn01';
      }
    }, {
      key: "AqaraSwitchRemoteT1",
      value: function AqaraSwitchRemoteT1() {
        return 'lumi.remote.b186acn03';
      }
    }, {
      key: "AqaraSwitchRemoteDoubleT1",
      value: function AqaraSwitchRemoteDoubleT1() {
        return 'lumi.remote.b286acn03';
      }
    }, {
      key: "DeviceModelSensorNatgasV1",
      value: function DeviceModelSensorNatgasV1() {
        return 'lumi.sensor_natgas.v1';
      }
    }, {
      key: "DeviceModelSensorSmokeV1",
      value: function DeviceModelSensorSmokeV1() {
        return 'lumi.sensor_smoke.v1';
      }
    }, {
      key: "DeviceModelPlugUs",
      value: function DeviceModelPlugUs() {
        return 'lumi.plug.maus01';
      }
    }, {
      key: "isProfileGateway",
      value: function isProfileGateway(deviceModel) {
        if (!deviceModel) {
          return false;
        }

        var data = [];
        data.push(this.DeviceAcpartnerV1());
        data.push(this.DeviceAcpartnerV2());
        data.push(this.DeviceAcpartnerV3());
        data.push(this.DeviceModelGatewayV1());
        data.push(this.DeviceModelGatewayV2());
        data.push(this.DeviceModelGatewayV3());
        data.push(this.DeviceModelAqaraHubAqHM01());
        data.push(this.DeviceModelAqaraHubAqHM02());
        data.push(this.DeviceModelAqaraHubLmUK01());
        data.push(this.DeviceModelAqaraHubMiEU01());
        data.push(this.DeviceModelAqaraHubMiHK01());
        data.push(this.DeviceModelAqaraHubMiTW01());
        data.push(this.DeviceCameraAq1());
        data.push(this.DeviceCameraGwAq1());
        return data.indexOf(deviceModel) > -1;
      }
    }, {
      key: "isOtherMultiModeHub",
      value: function isOtherMultiModeHub(deviceModel) {
        var modes = [this.AqaraHubM1S()];
        return modes.indexOf(deviceModel) > -1;
      }
    }]);
    return LHDeviceModel;
  }();

  exports.default = LHDeviceModel;
},10091,[14305,14320,14323]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[4]);

  var _LHSensorSetIFTTTRequest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var LHSensorSetIFTTTEURequest = function () {
    function LHSensorSetIFTTTEURequest() {
      (0, _classCallCheck2.default)(this, LHSensorSetIFTTTEURequest);
    }

    (0, _createClass2.default)(LHSensorSetIFTTTEURequest, null, [{
      key: "buildSensorSetIFTTT",
      value: function buildSensorSetIFTTT(devicesList, alreadyBuildIFTTTList, callBackFunc) {
        var sensorMagnetDeviceList, sensorMotionDeviceList, sensorSwitchDeviceList, successBuildIFTTTList, failBuildIFTTTList, key, _iterator, _isArray, _i, _ref, _device, model, lazyClock;

        return _regenerator.default.async(function buildSensorSetIFTTT$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('开始构建欧标套装自动化列表');
                sensorMagnetDeviceList = [];
                sensorMotionDeviceList = [];
                sensorSwitchDeviceList = [];
                successBuildIFTTTList = alreadyBuildIFTTTList === null ? [] : alreadyBuildIFTTTList;
                failBuildIFTTTList = [];
                key = '';
                _iterator = devicesList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();

              case 8:
                if (!_isArray) {
                  _context.next = 14;
                  break;
                }

                if (!(_i >= _iterator.length)) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("break", 55);

              case 11:
                _ref = _iterator[_i++];
                _context.next = 18;
                break;

              case 14:
                _i = _iterator.next();

                if (!_i.done) {
                  _context.next = 17;
                  break;
                }

                return _context.abrupt("break", 55);

              case 17:
                _ref = _i.value;

              case 18:
                _device = _ref;
                model = _device.model;

                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelSensorMagnetV2())) {
                  _context.next = 33;
                  break;
                }

                if (!(sensorMagnetDeviceList.length < 2)) {
                  _context.next = 31;
                  break;
                }

                key = 'alarm_' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 26;
                  break;
                }

                _context.next = 26;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 26:
                key = 'doorbell_' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 30;
                  break;
                }

                _context.next = 30;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMagnetDoorBellRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 30:
                sensorMagnetDeviceList.push(_device);

              case 31:
                _context.next = 53;
                break;

              case 33:
                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelSensorMotionV2())) {
                  _context.next = 42;
                  break;
                }

                if (!(sensorMotionDeviceList.length < 2)) {
                  _context.next = 40;
                  break;
                }

                key = 'alarm_' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 39;
                  break;
                }

                _context.next = 39;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 39:
                sensorMotionDeviceList.push(_device);

              case 40:
                _context.next = 53;
                break;

              case 42:
                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelWirelessSwitchV2())) {
                  _context.next = 53;
                  break;
                }

                if (!(sensorSwitchDeviceList.length < 1)) {
                  _context.next = 53;
                  break;
                }

                key = 'triggle_light' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 48;
                  break;
                }

                _context.next = 48;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorSwitchTriggleTheNightLightRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 48:
                key = 'triggle_alarm' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 52;
                  break;
                }

                _context.next = 52;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorSwitchTriggleTheAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 52:
                sensorSwitchDeviceList.push(_device);

              case 53:
                _context.next = 8;
                break;

              case 55:
                if (!(sensorMagnetDeviceList.length > 0 && sensorMagnetDeviceList.length <= 2)) {
                  _context.next = 60;
                  break;
                }

                key = 'ring_bell';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 60;
                  break;
                }

                _context.next = 60;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMagnetRingBellRequest(sensorMagnetDeviceList).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 60:
                if (!(sensorMotionDeviceList.length > 0 && sensorMotionDeviceList.length <= 2)) {
                  _context.next = 65;
                  break;
                }

                key = 'triggle_smart_light';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 65;
                  break;
                }

                _context.next = 65;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMotionOpenTheNightLightRequest(sensorMotionDeviceList).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 65:
                key = 'timing_alarm';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 69;
                  break;
                }

                _context.next = 69;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getAlarmTimingRequest().then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 69:
                key = 'timing_light';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 73;
                  break;
                }

                _context.next = 73;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getColorLightTimingRequest('2b00ff00').then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 73:
                lazyClock = 'lazy_clock';

                if (successBuildIFTTTList.includes(lazyClock)) {
                  _context.next = 77;
                  break;
                }

                _context.next = 77;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getLazyClockAlarmTimingRequest().then(function () {
                  successBuildIFTTTList.push(lazyClock);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 77:
                console.log('成功配置自动化的列表：');
                console.log(successBuildIFTTTList);
                callBackFunc(successBuildIFTTTList, failBuildIFTTTList);

              case 80:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]);
    return LHSensorSetIFTTTEURequest;
  }();

  exports.default = LHSensorSetIFTTTEURequest;
},10094,[14305,14674,14320,14323,10004,10097]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHAlarmIFTTTAdapter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHGuardTypeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHDeivceTriggleModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHDeviceActionModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var LHSensorSetIFTTTRequest = function () {
    function LHSensorSetIFTTTRequest() {
      (0, _classCallCheck2.default)(this, LHSensorSetIFTTTRequest);
    }

    (0, _createClass2.default)(LHSensorSetIFTTTRequest, null, [{
      key: "getAlarmTimingRequest",
      value: function getAlarmTimingRequest() {
        return new Promise(function (resolve, reject) {
          var setting = {
            enable_push: '1',
            on_time: '0 9 * * 1,2,3,4,5',
            off_time: '0 18 * * 1,2,3,4,5',
            off_method: 'set_arming',
            off_param: 'off',
            on_method: 'set_arming',
            on_param: 'on',
            enable_timer_on: '1',
            enable_timer_off: '1',
            enable_timer: '0'
          };

          var scene = _miot.Service.scene.createTimerScene(_miot.Device.deviceID, {
            setting: setting,
            identify: 'lumi_gateway_arming_timer',
            name: _LHCommonLocalizableString.default.mi_linuxHub_guard_guard_timer
          });

          scene.save().then(function () {
            console.log('套装自动化---【定时警戒】创建成功');
            resolve();
          }).catch(function () {
            console.log('套装自动化---【定时警戒】创建成功');
            reject();
          });
        });
      }
    }, {
      key: "getColorLightTimingRequest",
      value: function getColorLightTimingRequest(color) {
        return new Promise(function (resolve, reject) {
          var setting = {
            enable_push: '1',
            on_time: '0 18 * * 0,1,2,3,4,5,6',
            off_time: '0 22 * * 0,1,2,3,4,5,6',
            off_method: 'toggle_light',
            off_param: 'off',
            on_method: 'set_night_light_rgb',
            on_param: parseInt(color, 16).toString(),
            enable_timer_on: '1',
            enable_timer_off: '1',
            enable_timer: '0'
          };

          var scene = _miot.Service.scene.createTimerScene(_miot.Device.deviceID, {
            setting: setting,
            identify: 'lumi_gateway_single_rgb_timer',
            name: _LHCommonLocalizableString.default.mi_linuxHub_timer_light_name
          });

          scene.save().then(function () {
            console.log('套装自动化---【定时彩灯】创建成功');
            resolve();
          }).catch(function () {
            console.log('套装自动化---【定时彩灯】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getLazyClockAlarmTimingRequest",
      value: function getLazyClockAlarmTimingRequest() {
        return new Promise(function (resolve, reject) {
          var setting = {
            enable_push: '1',
            on_time: '30 7 * * 1,2,3,4,5',
            off_time: '0 0 * * 1,2,3,4,5',
            off_method: 'play_alarm_clock',
            off_param: 'off',
            on_method: 'play_alarm_clock',
            on_param: ['on', '20', 50],
            enable_timer_on: '1',
            enable_timer_off: '1',
            enable_timer: '0'
          };

          var scene = _miot.Service.scene.createTimerScene(_miot.Device.deviceID, {
            setting: setting,
            identify: 'lumi_gateway_clock_timer',
            name: _LHCommonLocalizableString.default.mi_linuxHub_lazy_clock_name
          });

          scene.save().then(function () {
            console.log('套装自动化---【懒人闹钟】创建成功');
            resolve();
          }).catch(function () {
            console.log('套装自动化---【懒人闹钟】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorAlarmRequest",
      value: function getSensorAlarmRequest(device) {
        return new Promise(function (resolve, reject) {
          var deviceModel = _LHAlarmIFTTTAdapter.default.getLinuxGatewayAlarmIFTTTModel(device);

          _LHIFTTTManager.default.saveSceneRecord(_miot.Device.deviceID, deviceModel, _LHGuardTypeMode.default.getNormalGuardType(), function (res) {
            console.log('套装自动化---【传感器警戒】创建成功');
            resolve(res);
          }, function (err) {
            console.log('套装自动化---【传感器警戒】创建失败');
            reject(err);
          });
        });
      }
    }, {
      key: "getSensorMagnetRingBellRequest",
      value: function getSensorMagnetRingBellRequest(devices) {
        var triggleList = [];
        var authedList = [_miot.Device.deviceID];
        devices.forEach(function (device) {
          triggleList.push(_LHDeivceTriggleModel.default.getSensorMagnetTriggleModel(device, '22', 'no_close', _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_1));
          authedList.push(device.deviceID);
        });
        var actionList = [_LHDeviceActionModel.default.getPlayMusiceAction()];
        return new Promise(function (resolve, reject) {
          _LHIFTTTManager.default.saveMijiaSmartSceneRecord(triggleList, actionList, authedList, _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_1, 0, function () {
            console.log('套装自动化---【门窗传感器响铃】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【门窗传感器响铃】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorSwitchTriggleTheNightLightRequest",
      value: function getSensorSwitchTriggleTheNightLightRequest(device) {
        return new Promise(function (resolve, reject) {
          _LHIFTTTManager.default.saveMijiaSmartSceneRecord([_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '18', 'click', _LHCommonLocalizableString.default.ifttt_triggle_single_press)], [_LHDeviceActionModel.default.getToggleLightAction()], [_miot.Device.deviceID, device.deviceID], _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_2, 1, function () {
            console.log('套装自动化---【单击无线开关 开/关 网关夜灯】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【单击无线开关 开/关 网关夜灯】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorSwitchTriggleTheAlarmRequest",
      value: function getSensorSwitchTriggleTheAlarmRequest(device) {
        return new Promise(function (resolve, reject) {
          _LHIFTTTManager.default.saveMijiaSmartSceneRecord([_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '19', 'double_click', _LHCommonLocalizableString.default.ifttt_triggle_double_press)], [_LHDeviceActionModel.default.getToggleAlarmAction()], [_miot.Device.deviceID, device.deviceID], _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_3, 1, function () {
            console.log('套装自动化---【双击无线开关，网关开警戒模式/关警戒模式】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【双击无线开关，网关开警戒模式/关警戒模式】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorMagnetDoorBellRequest",
      value: function getSensorMagnetDoorBellRequest(device) {
        return new Promise(function (resolve, reject) {
          var triggleModel = _LHAlarmIFTTTAdapter.default.getLinuxGatewayAlarmIFTTTModel(device);

          _LHIFTTTManager.default.saveSceneRecord(_miot.Device.deviceID, triggleModel, _LHGuardTypeMode.default.getDoorbellType(), function () {
            console.log('套装自动化---【门铃触发设备】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【门铃触发设备】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorMotionOpenTheNightLightRequest",
      value: function getSensorMotionOpenTheNightLightRequest(devices) {
        return new Promise(function (resolve, reject) {
          var triggerList = [];
          var authedList = [_miot.Device.deviceID];
          devices.forEach(function (device) {
            var triggleModel = _LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '23', 'motion', _LHCommonLocalizableString.default.ifttt_triggle_someone_moved);

            triggleModel.timespan = {
              to: {
                min: 0,
                hour: 0
              },
              wday: [0, 1, 2, 3, 4, 5, 6],
              from: {
                min: 0,
                hour: 0
              }
            };
            triggerList.push(triggleModel);
            authedList.push(device.deviceID);
          });
          var params = {
            us_id: 0,
            model: _miot.Device.model,
            did: _miot.Device.deviceID,
            st_id: 22,
            identify: 'lm_scene_toggle_smart_light',
            name: _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_4,
            authed: authedList,
            setting: {
              enable: 1,
              enable_push: 1,
              launch: {
                attr: triggerList,
                express: 1
              },
              action_list: [_LHDeviceActionModel.default.getOpenSmartLightAction()]
            }
          };

          _LHIFTTTManager.default.editSceneRecord(params, function () {
            console.log('套装自动化---【感应夜灯】创建成功');
            resolve();
          }, function () {
            reject();
            console.log('套装自动化---【感应夜灯】创建失败');
          });
        });
      }
    }, {
      key: "getSensorMotionCloseTheNightLightRequestMijia",
      value: function getSensorMotionCloseTheNightLightRequestMijia(devices) {
        var triggleList = [];
        var authedList = [_miot.Device.deviceID];
        devices.forEach(function (device) {
          triggleList.push(_LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '24', 'no_motion', _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_2));
          authedList.push(device.deviceID);
        });
        var actionList = [_LHDeviceActionModel.default.getCloseLightAction()];
        return new Promise(function (resolve, reject) {
          _LHIFTTTManager.default.saveMijiaSmartSceneRecord(triggleList, actionList, authedList, _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_5, 0, function () {
            console.log('套装自动化---【2分钟无人移动夜灯关】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【2分钟无人移动夜灯关】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorMotionOpenTheNightLightRequestMijia",
      value: function getSensorMotionOpenTheNightLightRequestMijia(devices) {
        var triggleList = [];
        var authedList = [_miot.Device.deviceID];
        devices.forEach(function (device) {
          triggleList.push(_LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '23', 'motion', _LHCommonLocalizableString.default.ifttt_triggle_someone_moved));
          authedList.push(device.deviceID);
        });
        var actionList = [_LHDeviceActionModel.default.getOpenLightAction()];
        return new Promise(function (resolve, reject) {
          _LHIFTTTManager.default.saveMijiaSmartSceneRecord(triggleList, actionList, authedList, _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_6, 0, function () {
            console.log('套装自动化---【2分钟无人移动夜灯关】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【2分钟无人移动夜灯关】创建失败');
            reject();
          });
        });
      }
    }, {
      key: "getSensorSwitchTriggleTogglePlug",
      value: function getSensorSwitchTriggleTogglePlug(device, plugDevice) {
        return new Promise(function (resolve, reject) {
          _LHIFTTTManager.default.saveMijiaSmartSceneRecord([_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '18', 'click', _LHCommonLocalizableString.default.ifttt_triggle_single_press)], [_LHDeviceActionModel.default.getPlugToggleAction(plugDevice)], [_miot.Device.deviceID, device.deviceID], _LHCommonLocalizableString.default.sensor_set_ifttt_scene_name_7, 1, function () {
            console.log('套装自动化---【单击无线开关 开/关插座】创建成功');
            resolve();
          }, function () {
            console.log('套装自动化---【单击无线开关 开/关插座】创建失败');
            reject();
          });
        });
      }
    }]);
    return LHSensorSetIFTTTRequest;
  }();

  exports.default = LHSensorSetIFTTTRequest;
},10097,[14305,14320,14323,10074,10100,10103,10106,10109,10115,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHMiServer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHAlarmIFTTTAdapter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHGuardTypeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHDeivceTriggleModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHDeviceActionModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHDeviceModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var MiJiaIFTTTTypeIFThen = 15;
  var AlarmIFTTTTypeIFThen = 22;
  var AlarmIFTTTTypeWhenIFThen = 53;

  var LHIFTTTManager = function () {
    function LHIFTTTManager() {
      (0, _classCallCheck2.default)(this, LHIFTTTManager);
    }

    (0, _createClass2.default)(LHIFTTTManager, null, [{
      key: "fetchAlarmTriggleDeviceList",
      value: function fetchAlarmTriggleDeviceList(did, onSuccess, onFail) {
        var _this = this;

        this.fetchSubDeviceListAndSceneData(did, AlarmIFTTTTypeWhenIFThen, function (res) {
          if (typeof onSuccess === 'function') onSuccess(_this.adaptAlarmTriggleDeviceData(res[0], res[1]));
        }, function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "getLinuxGatewayIFTTTDeviceList",
      value: function getLinuxGatewayIFTTTDeviceList(did, type, onSuccess, onFail) {
        var _this2 = this;

        this.fetchSubDeviceListAndSceneData(did, AlarmIFTTTTypeIFThen, function (res) {
          if (typeof onSuccess === 'function') onSuccess(_this2.adaptLinuxGatewayIFTTTDeviceData(res[0], res[1], type));
        }, function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "isLinuxGatewayCanControlAlarm",
      value: function isLinuxGatewayCanControlAlarm(did, onSuccess, onFail) {
        var _this3 = this;

        this.fetchSubDeviceListAndSceneData(did, AlarmIFTTTTypeIFThen, function (res) {
          var canControl = _this3.matchAlarmTriggleDeviceData(res[0], res[1], _LHGuardTypeMode.default.getNormalGuardType());

          var dataList = _this3.adaptLinuxGatewayIFTTTDeviceData(res[0], res[1], _LHGuardTypeMode.default.getNormalGuardType());

          if (typeof onSuccess === 'function') onSuccess(canControl, dataList);
        }, function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "fetchSubDeviceListAndSceneData",
      value: function fetchSubDeviceListAndSceneData(did, type, onSuccess, onFail) {
        Promise.all([new Promise(function (resolve, reject) {
          return _LHMiServer.default.LoadSceneList(did, type, [], function (scenesList) {
            resolve(scenesList);
          }, function (err) {
            reject(err);
          });
        }), new Promise(function (resolve, reject) {
          return _LHMiServer.default.GetSubDevices(function (subDevices) {
            resolve(subDevices);
          }).catch(function (err) {
            reject(err);
          });
        })]).then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "getMultiModeHubReadyToDeleteSceneIDList",
      value: function getMultiModeHubReadyToDeleteSceneIDList(type, triggleDeviceId, onSuccess, onFail) {
        this.getReadyToDeleteSceneIDList(type, triggleDeviceId, onSuccess, onFail, AlarmIFTTTTypeWhenIFThen);
      }
    }, {
      key: "getReadyToDeleteSceneIDList",
      value: function getReadyToDeleteSceneIDList(type, triggleDeviceId, onSuccess, onFail) {
        var _this4 = this;

        var iftttType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : AlarmIFTTTTypeIFThen;

        _LHMiServer.default.LoadSceneList(_miot.Device.deviceID, iftttType, [], function (scenesList) {
          var deviceSceneList = [];
          scenesList.forEach(function (scene) {
            if (_LHAlarmIFTTTAdapter.default.isSceneNeedToShow(scene.identify, type)) {
              var triggleDevice = _this4.getTriggleDeviceWithScene(scene);

              if (triggleDevice === null || triggleDevice.did === triggleDeviceId) {
                deviceSceneList.push(scene.sceneID + '');
              }
            }
          });
          if (typeof onSuccess === 'function') onSuccess(deviceSceneList);
        }, function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "adaptAlarmTriggleDeviceData",
      value: function adaptAlarmTriggleDeviceData() {
        var sceneList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var subDevices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var data = [];
        var canControlDatas = [];
        var cantControlDatas = [];
        var newSceneList = this.deleteSceneWhichStatusNotCorrect(sceneList);

        for (var index = 0; index < 4; index += 1) {
          canControlDatas = [];
          cantControlDatas = [];
          var guardType = index;

          for (var i = 0, deviceLen = subDevices.length; i < deviceLen; i += 1) {
            var subDevice = subDevices[i];

            if (_LHAlarmIFTTTAdapter.default.isSupportIFTTT(subDevice.model, guardType)) {
              var isCanControl = true;
              var isAdded = false;
              var cantControlAddedGuardTypeList = [];

              for (var j = 0, sceneLen = newSceneList.length; j < sceneLen; j += 1) {
                var scene = newSceneList[j];
                var triggleDevice = this.getTriggleDeviceWithScene(scene);

                if (triggleDevice !== null && triggleDevice.did === subDevice.deviceID) {
                  if (scene.identify === _LHGuardTypeMode.default.getGuardModelWithGuardType(guardType).identify) {
                    isCanControl = true;
                    isAdded = true;
                    break;
                  }

                  if (scene.identify === _LHGuardTypeMode.default.getGuardModelWithGuardType(_LHGuardTypeMode.default.getBaseGuardType()).identify && guardType !== _LHGuardTypeMode.default.getBaseGuardType()) {
                    isCanControl = false;
                    cantControlAddedGuardTypeList.push(_LHGuardTypeMode.default.getGuardTypeWithSceneIdentify(scene.identify));
                    break;
                  }

                  if (scene.identify !== _LHGuardTypeMode.default.getGuardModelWithGuardType(_LHGuardTypeMode.default.getBaseGuardType()).identify && guardType === _LHGuardTypeMode.default.getBaseGuardType()) {
                    isCanControl = false;
                    cantControlAddedGuardTypeList.push(_LHGuardTypeMode.default.getGuardTypeWithSceneIdentify(scene.identify));
                  }
                }
              }

              if (isCanControl) {
                var model = _LHAlarmIFTTTAdapter.default.getAlarmTriggleDeviceModel(subDevice);

                model.isAdded = isAdded;
                canControlDatas.push(model);
              } else {
                var _model = _LHAlarmIFTTTAdapter.default.getAlarmTriggleDeviceCantControlModel(subDevice, cantControlAddedGuardTypeList, guardType);

                cantControlDatas.push(_model);
              }
            } else if ((subDevice.model === _LHDeviceModel.default.DeviceModelSensorNatgasV1() || subDevice.model === _LHDeviceModel.default.DeviceModelSensorSmokeV1()) && guardType !== _LHGuardTypeMode.default.getBaseGuardType()) {
              var _model2 = _LHAlarmIFTTTAdapter.default.getAlarmTriggleDeviceCantControlModel(subDevice, [], guardType);

              cantControlDatas.push(_model2);
            }
          }

          data.push([canControlDatas, cantControlDatas]);
        }

        return data;
      }
    }, {
      key: "adaptLinuxGatewayIFTTTDeviceData",
      value: function adaptLinuxGatewayIFTTTDeviceData() {
        var sceneList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var subDevices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var type = arguments.length > 2 ? arguments[2] : undefined;
        var newSceneList = this.deleteSceneWhichStatusNotCorrect(sceneList);
        var datas = [];

        for (var j = 0, deviceLen = subDevices.length; j < deviceLen; j += 1) {
          var subDevice = subDevices[j];

          if (_LHAlarmIFTTTAdapter.default.isSupportIFTTT(subDevice.model, type)) {
            var newSubDeviceModel = _LHAlarmIFTTTAdapter.default.getLinuxGatewayAlarmIFTTTModel(subDevice);

            for (var i = 0, sceneLen = newSceneList.length; i < sceneLen; i += 1) {
              var scene = newSceneList[i];
              var triggleDevice = this.getTriggleDeviceWithScene(scene);

              if (triggleDevice !== null && _LHAlarmIFTTTAdapter.default.isSceneNeedToShow(scene.identify, type)) {
                if (triggleDevice.did === subDevice.deviceID) {
                  newSubDeviceModel.isAddedInLinuxGateway = true;
                  newSubDeviceModel.sceneID = scene.sceneID;
                  datas.push(newSubDeviceModel);
                  break;
                }
              }
            }

            if (newSubDeviceModel.isAddedInLinuxGateway === false) {
              datas.push(newSubDeviceModel);
            }
          }
        }

        return datas;
      }
    }, {
      key: "isLinuxGatewayCanGotoGuardSettingPage",
      value: function isLinuxGatewayCanGotoGuardSettingPage(onSuccess, onFail) {
        _LHMiServer.default.GetSubDevices(function (subDevices) {
          var isCanGo = false;

          for (var j = 0, deviceLen = subDevices.length; j < deviceLen; j += 1) {
            var subDevice = subDevices[j];

            if (_LHAlarmIFTTTAdapter.default.isSupportIFTTT(subDevice.model, _LHGuardTypeMode.default.getNormalGuardType())) {
              isCanGo = true;
              break;
            }
          }

          if (typeof onSuccess === 'function') onSuccess(isCanGo);
        }, function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "matchAlarmTriggleDeviceData",
      value: function matchAlarmTriggleDeviceData() {
        var sceneList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var subDevices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var guardType = arguments.length > 2 ? arguments[2] : undefined;
        var match = false;

        for (var i = 0, sceneLen = sceneList.length; i < sceneLen; i += 1) {
          if (match) {
            break;
          }

          var scene = sceneList[i];
          var triggleDevice = this.getTriggleDeviceWithScene(scene);

          if (triggleDevice !== null && _LHAlarmIFTTTAdapter.default.isSceneNeedToShow(scene.identify, guardType)) {
            for (var j = 0, deviceLen = subDevices.length; j < deviceLen; j += 1) {
              var subDevice = subDevices[j];

              if (triggleDevice.did === subDevice.deviceID) {
                match = true;
                break;
              }
            }
          }
        }

        return match;
      }
    }, {
      key: "getTriggleDeviceWithScene",
      value: function getTriggleDeviceWithScene(scene) {
        if (scene === null || scene === undefined) {
          return null;
        }

        var triggleList;

        if (scene.setting.trigger) {
          triggleList = scene.setting.trigger;
        } else {
          triggleList = scene.setting.launch.attr;
        }

        if (triggleList === null || triggleList === undefined || triggleList.length === 0) {
          return null;
        }

        var triggleDevice = null;

        for (var i = 0, triggleLen = triggleList.length; i < triggleLen; i += 1) {
          var triggle = triggleList[i];

          if (triggle.did !== _miot.Device.deviceID) {
            triggleDevice = triggle;
            break;
          }
        }

        return triggleDevice;
      }
    }, {
      key: "isAlarmTriggleDeviceCanBeDeletedWithModel",
      value: function isAlarmTriggleDeviceCanBeDeletedWithModel(model) {
        if (model === undefined || model === null || model === '') {
          return true;
        }

        if (model === _LHDeviceModel.default.DeviceModelSensorNatgasV1() || model === _LHDeviceModel.default.DeviceModelSensorSmokeV1()) {
          return false;
        }

        return true;
      }
    }, {
      key: "saveSceneRecord",
      value: function saveSceneRecord(did, device, alarmType, onSuccess, onFail) {
        var params = null;

        if (alarmType === _LHGuardTypeMode.default.getBaseGuardType() || alarmType === _LHGuardTypeMode.default.getHomeGuardType() || alarmType === _LHGuardTypeMode.default.getAwayGuardType() || alarmType === _LHGuardTypeMode.default.getSleepGuardType()) {
          params = this.getWhenIfThenIFTTTParams(device, alarmType);
        } else if (alarmType === _LHGuardTypeMode.default.getNormalGuardType()) {
          params = this.getAlarmTriggleIFTTTParams(device, alarmType);
        } else if (alarmType === _LHGuardTypeMode.default.getDoorbellType()) {
          params = this.getDoorBellIFTTTParams(device, alarmType);
        } else if (alarmType === _LHGuardTypeMode.default.getCloseAlarmClockType()) {
          params = this.getCloseClockIFTTTParams(device, alarmType);
        }

        if (params === null) {
          if (typeof onFail === 'function') onFail();
          return;
        }

        this.editSceneRecord(params, onSuccess, onFail);
      }
    }, {
      key: "saveMijiaSmartSceneRecord",
      value: function saveMijiaSmartSceneRecord(triggerList, actionList, authedList, name, enable, onSuccess, onFail) {
        var params = {
          us_id: 0,
          model: _miot.Device.model,
          did: _miot.Device.deviceID,
          st_id: MiJiaIFTTTTypeIFThen,
          identify: '',
          name: name,
          authed: authedList,
          setting: {
            enable: enable,
            enable_push: 0,
            launch: {
              attr: triggerList,
              express: 1
            },
            action_list: actionList
          }
        };
        this.editSceneRecord(params, onSuccess, onFail);
      }
    }, {
      key: "editSceneRecord",
      value: function editSceneRecord(params, onSuccess, onFail) {
        console.log('准备要保存的自动化参数：');
        console.log(JSON.stringify(params));

        _miot.Service.scene.editSceneRecord(params).then(function (res) {
          console.log('自动化保存成功');
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          console.log('自动化保存失败：' + err);
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "getWhenIfThenIFTTTParams",
      value: function getWhenIfThenIFTTTParams(device, alarmType) {
        var whenList = device.triggleModel.triggle;

        var triggerModel = _LHDeivceTriggleModel.default.getGatewayAlarmTriggleModelWithAlarmType(alarmType);

        var triggerList = Array.isArray(triggerModel) ? triggerModel : [triggerModel];

        var actionList = _LHDeviceActionModel.default.getGatewayAlarmActionListWithAlarmType(alarmType);

        var authedList = [_miot.Device.deviceID, device.did];

        var pushString = _LHAlarmIFTTTAdapter.default.getIFTTTPushString(device.model, device.subTitle, alarmType);

        return {
          us_id: 0,
          model: _miot.Device.model,
          did: _miot.Device.deviceID,
          st_id: AlarmIFTTTTypeWhenIFThen,
          identify: _LHGuardTypeMode.default.getGuardModelWithGuardType(alarmType).identify,
          name: pushString,
          authed: authedList,
          setting: {
            enable: 1,
            enable_push: 1,
            launch: {
              attr: triggerList,
              express: 1
            },
            action_list: actionList,
            trigger: whenList
          }
        };
      }
    }, {
      key: "getAlarmTriggleIFTTTParams",
      value: function getAlarmTriggleIFTTTParams(device, alarmType) {
        var triggerList = [];
        triggerList.push(device.triggleModel.triggle);
        triggerList.push(_LHDeivceTriggleModel.default.getGatewayAlarmTriggleModelWithAlarmType(alarmType));
        var authedList = [_miot.Device.deviceID, device.did];
        return {
          us_id: 0,
          model: _miot.Device.model,
          did: _miot.Device.deviceID,
          st_id: AlarmIFTTTTypeIFThen,
          identify: _LHGuardTypeMode.default.getGuardModelWithGuardType(alarmType).identify,
          name: _LHAlarmIFTTTAdapter.default.getNormalGatewayAlarmIFTTTName(device),
          authed: authedList,
          setting: {
            enable: 1,
            enable_push: 0,
            launch: {
              attr: triggerList,
              express: 0
            },
            action_list: _LHDeviceActionModel.default.getGatewayAlarmActionListWithAlarmType(alarmType)
          }
        };
      }
    }, {
      key: "getDoorBellIFTTTParams",
      value: function getDoorBellIFTTTParams(device, alarmType) {
        var triggerList = [];
        triggerList.push(device.triggleModel.triggle);
        var authedList = [_miot.Device.deviceID, device.did];
        return {
          us_id: 0,
          model: _miot.Device.model,
          did: _miot.Device.deviceID,
          st_id: AlarmIFTTTTypeIFThen,
          identify: _LHGuardTypeMode.default.getGuardModelWithGuardType(alarmType).identify,
          name: _LHAlarmIFTTTAdapter.default.getNormalGatewayDoorBellIFTTTName(device),
          authed: authedList,
          setting: {
            enable: 1,
            enable_push: 0,
            launch: {
              attr: triggerList,
              express: 0
            },
            action_list: _LHDeviceActionModel.default.getDoorbellAction()
          }
        };
      }
    }, {
      key: "getCloseClockIFTTTParams",
      value: function getCloseClockIFTTTParams(device, alarmType) {
        var triggerList = [];
        triggerList.push(device.triggleModel.triggle);
        var authedList = [_miot.Device.deviceID, device.did];
        return {
          us_id: 0,
          model: _miot.Device.model,
          did: _miot.Device.deviceID,
          st_id: AlarmIFTTTTypeIFThen,
          identify: _LHGuardTypeMode.default.getGuardModelWithGuardType(alarmType).identify,
          name: _LHAlarmIFTTTAdapter.default.getNormalGatewayClockIFTTTName(device),
          authed: authedList,
          setting: {
            enable: 1,
            enable_push: 0,
            launch: {
              attr: triggerList,
              express: 0
            },
            action_list: _LHDeviceActionModel.default.getCloseClockAction()
          }
        };
      }
    }, {
      key: "getLinkageAlarmIFTTTParams",
      value: function getLinkageAlarmIFTTTParams(type) {
        if (type !== 1 && type !== 2 && type !== 3) return null;
        var identify = 'lm_scene_5_' + String(type);
        var authedList = [_miot.Device.deviceID, _miot.Device.parentDevice.deviceID];

        var action = _LHDeviceActionModel.default.getLinkageAlarmAction(_miot.Device.parentDevice);

        var triggle;

        if (type === 1) {
          triggle = _LHDeivceTriggleModel.default.getSensorSmokeTriggleModel(_miot.Device, '火警报警');
        } else if (type === 2) {
          triggle = _LHDeivceTriggleModel.default.getSensorNatgasTriggleModel(_miot.Device, '气体泄漏报警');
        } else {
          triggle = _LHDeivceTriggleModel.default.getSensorWleakTriggleModel(_miot.Device, '水浸报警');
        }

        return {
          identify: identify,
          name: _LHAlarmIFTTTAdapter.default.getLeakAlarmIFTTTName(type),
          us_id: 0,
          model: _miot.Device.model,
          did: _miot.Device.deviceID,
          st_id: AlarmIFTTTTypeIFThen,
          authed: authedList,
          setting: {
            enable: 1,
            enable_push: 0,
            st_id: 0,
            launch: {
              attr: [triggle],
              express: 0
            },
            action_list: [action]
          }
        };
      }
    }, {
      key: "deleteSceneWhichStatusNotCorrect",
      value: function deleteSceneWhichStatusNotCorrect(sceneList) {
        if (sceneList.length === 0 || sceneList === null || sceneList === undefined) {
          return [];
        }

        var finalSceneList = [];
        var notCorrectSceneList = [];
        sceneList.forEach(function (scene) {
          if (scene.status === 3) {
            notCorrectSceneList.push(scene);
          } else {
            finalSceneList.push(scene);
          }
        });

        if (notCorrectSceneList.length !== 0) {
          console.log("\u5C1D\u8BD5\u5220\u9664\u672C\u5730\u81EA\u52A8\u5316\u5931\u8D25\u7684\u81EA\u52A8\u5316\uFF1A");
          this.deleteAllScenes(notCorrectSceneList);
        }

        return finalSceneList;
      }
    }, {
      key: "deleteAllScenes",
      value: function deleteAllScenes(sceneList, onSuccess, onFail) {
        var sceneIdList = [];
        sceneList.forEach(function (scene) {
          sceneIdList.push(scene.sceneID + '');
        });
        this.deleteScenes(sceneIdList, onSuccess, onFail);
      }
    }, {
      key: "deleteScenes",
      value: function deleteScenes() {
        var sceneIdList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var onSuccess = arguments.length > 1 ? arguments[1] : undefined;
        var onFail = arguments.length > 2 ? arguments[2] : undefined;

        if (!Array.isArray(sceneIdList) || sceneIdList.length === 0) {
          if (typeof onFail === 'function') onFail();
          return;
        }

        _miot.Service.scene.deleteSceneRecords(sceneIdList).then(function (res) {
          if (typeof onSuccess === 'function') onSuccess(res);
        }).catch(function (err) {
          if (typeof onFail === 'function') onFail(err);
        });
      }
    }, {
      key: "getTriggerTemplatesWithDid",
      value: function getTriggerTemplatesWithDid(did) {
        console.log('模版did:' + did);

        _miot.Service.scene.triggerTemplatesForQualified(did).then(function (res) {
          console.log(JSON.stringify(res));
        }).catch(function (err) {
          console.log(err);
        });
      }
    }, {
      key: "ifScenesExistWithIdentify",
      value: function ifScenesExistWithIdentify(identify, triggleID, actionID) {
        return new Promise(function (resolve, reject) {
          _LHMiServer.default.LoadSceneList(_miot.Device.deviceID, 22, [], function (sceneList) {
            var targetList = [];

            if (sceneList.length > 0) {
              sceneList.forEach(function (scene) {
                if (scene.identify === identify) {
                  var isTriggerDid = false;
                  var isActionDid = false;
                  scene.setting.launch.attr.forEach(function (triggle) {
                    if (triggle.did === triggleID) {
                      isTriggerDid = true;
                    }
                  });
                  scene.setting.action_list.forEach(function (action) {
                    if (action.payload.did === actionID) {
                      isActionDid = true;
                    }
                  });

                  if (isTriggerDid && isActionDid) {
                    targetList.push(scene);
                  }
                }
              });
            }

            resolve(targetList);
          }, function (err) {
            reject(err);
          });
        });
      }
    }]);
    return LHIFTTTManager;
  }();

  exports.default = LHIFTTTManager;
  LHIFTTTManager.AlarmIFTTTTypeWhenIFThen = AlarmIFTTTTypeWhenIFThen;
},10100,[14305,14320,14323,10074,10079,10103,10106,10109,10115,10091]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHDeviceModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHGuardTypeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHDeivceTriggleModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHDeviceTrigglesConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var kIFTTTKeyClick = 'click';
  var kIFTTTKeyDoubleClick = 'double_click';
  var kIFTTTKeyLongClickPress = 'long_click_press';
  var kIFTTTKeyShake = 'shake';
  var kIFTTTKeyVibrate = 'vibrate';
  var kIFTTTKeyFreefall = 'free_fall';
  var kIFTTTKeyTilt = 'tilt';
  var kIFTTTKeyMotion = 'motion';
  var kIFTTTKeyOpen = 'open';
  var kIFTTTKeyClickCh0 = 'click_ch0';
  var kIFTTTKeyDoubleClickCh0 = 'double_click_ch0';
  var kIFTTTKeyLongClickCh0 = 'long_click_ch0';

  var LHAlarmIFTTTAdapter = function () {
    function LHAlarmIFTTTAdapter() {
      (0, _classCallCheck2.default)(this, LHAlarmIFTTTAdapter);
    }

    (0, _createClass2.default)(LHAlarmIFTTTAdapter, null, [{
      key: "isSupportIFTTT",
      value: function isSupportIFTTT(model, iftttType) {
        if (_miot.Device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub() || _LHDeviceModel.default.isOtherMultiModeHub(_miot.Device.model)) {
          if (iftttType === _LHGuardTypeMode.default.getBaseGuardType()) {
            if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.AqaraSwitchT1() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2() || model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetV2() || model === _LHDeviceModel.default.DeviceModelVibrationAq1() || model === _LHDeviceModel.default.DeviceModelCubeAq1() || model === _LHDeviceModel.default.DeviceModelCubeMijiaV1() || model === _LHDeviceModel.default.DeviceModelSensor86SWV1() || model === _LHDeviceModel.default.DeviceModelSensor86ACN01() || model === _LHDeviceModel.default.AqaraSwitchRemoteT1() || model === _LHDeviceModel.default.AqaraSwitchRemoteDoubleT1() || model === _LHDeviceModel.default.DeviceModelSensorNatgasV1() || model === _LHDeviceModel.default.DeviceModelSensorSmokeV1() || model === _LHDeviceModel.default.DeviceModelSensorWleakAq1() || model === _LHDeviceModel.default.AqaraWleakT1()) {
              return true;
            }
          } else if (iftttType === _LHGuardTypeMode.default.getHomeGuardType() || iftttType === _LHGuardTypeMode.default.getAwayGuardType() || iftttType === _LHGuardTypeMode.default.getSleepGuardType()) {
            if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.AqaraSwitchT1() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2() || model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetV2() || model === _LHDeviceModel.default.DeviceModelVibrationAq1() || model === _LHDeviceModel.default.DeviceModelCubeAq1() || model === _LHDeviceModel.default.DeviceModelCubeMijiaV1() || model === _LHDeviceModel.default.DeviceModelSensor86SWV1() || model === _LHDeviceModel.default.DeviceModelSensor86ACN01() || model === _LHDeviceModel.default.AqaraSwitchRemoteT1() || model === _LHDeviceModel.default.AqaraSwitchRemoteDoubleT1() || model === _LHDeviceModel.default.DeviceModelSensorWleakAq1() || model === _LHDeviceModel.default.AqaraWleakT1()) {
              return true;
            }
          }
        } else if (_miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubLmUK01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiEU01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiTW01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiHK01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM02() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM03()) {
          if (iftttType === _LHGuardTypeMode.default.getNormalGuardType()) {
            if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2() || model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetV2() || model === _LHDeviceModel.default.DeviceModelVibrationAq1() || model === _LHDeviceModel.default.DeviceModelCubeAq1() || model === _LHDeviceModel.default.DeviceModelCubeMijiaV1()) {
              return true;
            } else {
              return false;
            }
          } else if (iftttType === _LHGuardTypeMode.default.getDoorbellType() || iftttType === _LHGuardTypeMode.default.getCloseAlarmClockType()) {
            if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2() || model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetV2()) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return false;
        }

        return false;
      }
    }, {
      key: "isSceneNeedToShow",
      value: function isSceneNeedToShow(identify, guardType) {
        var guardMode = _LHGuardTypeMode.default.getGuardModelWithGuardType(guardType);

        if (identify === guardMode.identify) {
          return true;
        } else if (guardType === _LHGuardTypeMode.default.getBaseGuardType()) {
          if (identify === 'lm_scene_5_1' || identify === 'lm_scene_5_2' || identify === 'lm_scene_5_3') {
            return true;
          }
        } else if (guardType === _LHGuardTypeMode.default.getNormalGuardType()) {
          if (identify === 'lm_scene_1_1' || identify === 'lm_scene_1_2' || identify === 'lm_scene_1_3' || identify === 'lm_scene_1_4' || identify === 'lm_scene_1_5' || identify === 'lm_scene_1_6' || identify === 'lm_scene_1_7') {
            return true;
          }
        } else if (guardType === _LHGuardTypeMode.default.getDoorbellType()) {
          if (identify === 'lm_scene_3_1' || identify === 'lm_scene_3_2' || identify === 'lm_scene_3_3') {
            return true;
          }
        } else if (guardType === _LHGuardTypeMode.default.getCloseAlarmClockType()) {
          if (identify === 'lm_scene_4_1' || identify === 'lm_scene_4_2' || identify === 'lm_scene_4_3') {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "getAlarmTriggleDeviceModel",
      value: function getAlarmTriggleDeviceModel(subDevice) {
        var iconURL = subDevice.iconURL,
            name = subDevice.name,
            isOnline = subDevice.isOnline,
            did = subDevice.deviceID,
            model = subDevice.model;
        var triggleModel = this.getDeviceTriggleModel(subDevice);
        return {
          model: model,
          iconURL: iconURL,
          title: triggleModel.triggleName,
          isOnline: isOnline,
          subTitle: name,
          triggleModel: triggleModel,
          did: did,
          isAdded: false
        };
      }
    }, {
      key: "getAlarmTriggleDeviceCantControlModel",
      value: function getAlarmTriggleDeviceCantControlModel(subDevice) {
        var addedGuardList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var currentGuardType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        var newAddedGuardList = addedGuardList;

        for (var i = 0; i < newAddedGuardList.length - 1; i += 1) {
          for (var j = 0; j < newAddedGuardList.length - i - 1; j += 1) {
            if (newAddedGuardList[j] > newAddedGuardList[j + 1]) {
              var swap = newAddedGuardList[j];
              newAddedGuardList[j] = newAddedGuardList[j + 1];
              newAddedGuardList[j + 1] = swap;
            }
          }
        }

        var iconURL = subDevice.iconURL,
            name = subDevice.name,
            isOnline = subDevice.isOnline,
            did = subDevice.deviceID,
            model = subDevice.model;
        var triggleModel = this.getDeviceTriggleModel(subDevice);
        var subTitleDescribe = '';

        if (currentGuardType === _LHGuardTypeMode.default.getBaseGuardType()) {
          for (var index = 0; index < newAddedGuardList.length; index += 1) {
            var element = newAddedGuardList[index];
            subTitleDescribe += _LHGuardTypeMode.default.getGuardModelWithGuardType(element).guardShortName;

            if (index !== newAddedGuardList.length - 1) {
              subTitleDescribe += '、';
            }
          }

          subTitleDescribe = _LHCommonLocalizableString.default.common_comboHub_triggle_device_opened_guard.replace('{XX}', subTitleDescribe);
        } else {
          if (this.isSupportIFTTT(model, currentGuardType) === false) {
            subTitleDescribe = _LHCommonLocalizableString.default.common_comboHub_triggle_device_only_open_basic;
          } else {
            subTitleDescribe = _LHCommonLocalizableString.default.common_comboHub_triggle_device_opened_basic;
          }
        }

        return {
          model: model,
          iconURL: iconURL,
          title: triggleModel.triggleName,
          isOnline: isOnline,
          subTitle: name + ' ' + subTitleDescribe,
          did: did
        };
      }
    }, {
      key: "getAlarmTriggleDeviceCellTitle",
      value: function getAlarmTriggleDeviceCellTitle(model, triggleName) {
        if (model === _LHDeviceModel.default.DeviceModelSensorNatgasV1() || model === _LHDeviceModel.default.DeviceModelSensorSmokeV1() || model === _LHDeviceModel.default.DeviceModelSensorWleakAq1()) {
          return triggleName;
        } else {
          return triggleName + ' ' + _LHCommonLocalizableString.default.common_comboHub_triggle_device_alert;
        }
      }
    }, {
      key: "getLinuxGatewayAlarmIFTTTModel",
      value: function getLinuxGatewayAlarmIFTTTModel(subDevice) {
        var triggleModel = this.getDeviceTriggleModel(subDevice);
        var name = subDevice.name,
            isOnline = subDevice.isOnline,
            did = subDevice.deviceID,
            model = subDevice.model;
        var onLineString = isOnline ? '' : _LHCommonLocalizableString.default.common_ifttt_device_offline;
        return {
          title: triggleModel.triggleName,
          isOnline: isOnline,
          subTitle: name + onLineString,
          triggleModel: triggleModel,
          did: did,
          isAddedInLinuxGateway: false,
          sceneID: '',
          model: model
        };
      }
    }, {
      key: "getDeviceTriggleModel",
      value: function getDeviceTriggleModel(device) {
        if (_miot.Device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub() || _LHDeviceModel.default.isOtherMultiModeHub(_miot.Device.model)) {
          return this.getMijiaMultiModeGatewayTriggleModelWithDevice(device);
        } else if (_miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubLmUK01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiEU01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiTW01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubMiHK01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM01() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM02() || _miot.Device.model === _LHDeviceModel.default.DeviceModelAqaraHubAqHM03()) {
          return this.getNormalGatewayTriggleModelWithDevice(device);
        }

        return null;
      }
    }, {
      key: "getMijiaMultiModeGatewayTriggleModelWithDevice",
      value: function getMijiaMultiModeGatewayTriggleModelWithDevice(device) {
        if (device === null || device === undefined) {
          return null;
        }

        var model = device.model;
        var triggles;
        var triggleName = '';

        if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = [_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '270', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '271', kIFTTTKeyDoubleClick, _LHCommonLocalizableString.default.ifttt_triggle_double_press)];
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = [_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '688', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '689', kIFTTTKeyDoubleClick, _LHCommonLocalizableString.default.ifttt_triggle_double_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '690', kIFTTTKeyLongClickPress, _LHCommonLocalizableString.default.ifttt_triggle_long_press)];
        } else if (model === _LHDeviceModel.default.AqaraSwitchT1()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = _LHDeivceTriggleModel.default.getDeviceTriggles(device, _LHDeviceTrigglesConfig.default.GetAqaraSwitchT1());
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = [_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '406', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '407', kIFTTTKeyDoubleClick, _LHCommonLocalizableString.default.ifttt_triggle_double_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '408', kIFTTTKeyLongClickPress, _LHCommonLocalizableString.default.ifttt_triggle_long_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '409', kIFTTTKeyShake, _LHCommonLocalizableString.default.ifttt_triggle_shake)];
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = [_LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '18', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '19', kIFTTTKeyDoubleClick, _LHCommonLocalizableString.default.ifttt_triggle_double_press), _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '58', kIFTTTKeyLongClickPress, _LHCommonLocalizableString.default.ifttt_triggle_long_press)];
        } else if (model === _LHDeviceModel.default.DeviceModelVibrationAq1()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_vibration;
          triggles = [_LHDeivceTriggleModel.default.getVibrationTriggleModel(device, '199', kIFTTTKeyVibrate, _LHCommonLocalizableString.default.ifttt_triggle_detect_vibration), _LHDeivceTriggleModel.default.getVibrationTriggleModel(device, '277', kIFTTTKeyFreefall, _LHCommonLocalizableString.default.ifttt_triggle_detect_fall), _LHDeivceTriggleModel.default.getVibrationTriggleModel(device, '498', kIFTTTKeyTilt, _LHCommonLocalizableString.default.ifttt_triggle_detect_tilting)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionAq2()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_motion;
          triggles = [_LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '264', kIFTTTKeyMotion, _LHCommonLocalizableString.default.ifttt_triggle_someone_moved)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionV2()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_motion;
          triggles = [_LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '23', kIFTTTKeyMotion, _LHCommonLocalizableString.default.ifttt_triggle_someone_moved)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetV2()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_magnet;
          triggles = [_LHDeivceTriggleModel.default.getSensorMagnetTriggleModel(device, '20', kIFTTTKeyOpen, _LHCommonLocalizableString.default.ifttt_triggle_windoor_open)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_magnet;
          triggles = [_LHDeivceTriggleModel.default.getSensorMagnetTriggleModel(device, '272', kIFTTTKeyOpen, _LHCommonLocalizableString.default.ifttt_triggle_windoor_open)];
        } else if (model === _LHDeviceModel.default.DeviceModelCubeAq1() || model === _LHDeviceModel.default.DeviceModelCubeMijiaV1()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_cube;
          triggles = [_LHDeivceTriggleModel.default.getSensorCubeTriggleModel(device, _LHCommonLocalizableString.default.ifttt_triggle_moved_afteronemin)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensorWleakAq1()) {
          triggles = [_LHDeivceTriggleModel.default.getSensorWleakTriggleModel(device, _LHCommonLocalizableString.default.ifttt_triggle_flood_alert)];
        } else if (model === _LHDeviceModel.default.AqaraWleakT1()) {
          triggles = _LHDeivceTriggleModel.default.getDeviceTriggles(device, _LHDeviceTrigglesConfig.default.GetAqaraWleakT1());
        } else if (model === _LHDeviceModel.default.DeviceModelSensorSmokeV1()) {
          triggles = [_LHDeivceTriggleModel.default.getSensorSmokeTriggleModel(device, _LHCommonLocalizableString.default.ifttt_triggle_fire_alert)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensorNatgasV1()) {
          triggles = [_LHDeivceTriggleModel.default.getSensorNatgasTriggleModel(device, _LHCommonLocalizableString.default.ifttt_triggle_gas_leakage_alert)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensor86SWV1()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = [_LHDeivceTriggleModel.default.getSensor86SWTriggleModel(device, '83', kIFTTTKeyClickCh0, _LHCommonLocalizableString.default.ifttt_triggle_single_press)];
        } else if (model === _LHDeviceModel.default.DeviceModelSensor86ACN01()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = [_LHDeivceTriggleModel.default.getSensor86SWTriggleModel(device, '691', kIFTTTKeyClickCh0, _LHCommonLocalizableString.default.ifttt_triggle_single_press), _LHDeivceTriggleModel.default.getSensor86SWTriggleModel(device, '692', kIFTTTKeyDoubleClickCh0, _LHCommonLocalizableString.default.ifttt_triggle_double_press), _LHDeivceTriggleModel.default.getSensor86SWTriggleModel(device, '693', kIFTTTKeyLongClickCh0, _LHCommonLocalizableString.default.ifttt_triggle_long_press)];
        } else if (model === _LHDeviceModel.default.AqaraSwitchRemoteT1()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = _LHDeivceTriggleModel.default.getDeviceTriggles(device, _LHDeviceTrigglesConfig.default.GetAqaraSwitchRemoteT1());
        } else if (model === _LHDeviceModel.default.AqaraSwitchRemoteDoubleT1()) {
          triggleName = _LHCommonLocalizableString.default.common_ifttt_triggleName_switch;
          triggles = _LHDeivceTriggleModel.default.getDeviceTriggles(device, _LHDeviceTrigglesConfig.default.GetAqaraSwitchRemoteDoubleT1());
        }

        return {
          triggle: triggles,
          triggleName: triggleName === '' ? this.getTriggleNameWithTriggles(triggles) : triggleName
        };
      }
    }, {
      key: "getIFTTTPushString",
      value: function getIFTTTPushString(model, deviceName, guardType) {
        var _LHGuardTypeMode$getG = _LHGuardTypeMode.default.getGuardModelWithGuardType(guardType),
            guardName = _LHGuardTypeMode$getG.guardName;

        if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.AqaraSwitchT1() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2() || model === _LHDeviceModel.default.DeviceModelSensor86SWV1() || model === _LHDeviceModel.default.DeviceModelSensor86ACN01() || model === _LHDeviceModel.default.AqaraSwitchRemoteT1() || model === _LHDeviceModel.default.AqaraSwitchRemoteDoubleT1() || model === _LHDeviceModel.default.DeviceModelVibrationAq1()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_1.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_2.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetV2()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_3.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else if (model === _LHDeviceModel.default.DeviceModelCubeAq1() || model === _LHDeviceModel.default.DeviceModelCubeMijiaV1()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_4.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorWleakAq1() || model === _LHDeviceModel.default.AqaraWleakT1()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_5.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorNatgasV1()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_6.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorSmokeV1()) {
          return _LHCommonLocalizableString.default.ifttt_push_title_triggle_alert_7.replace('{XX}', guardName).replace('{YY}', deviceName);
        } else {
          return 'unknown';
        }
      }
    }, {
      key: "getNormalGatewayTriggleModelWithDevice",
      value: function getNormalGatewayTriggleModelWithDevice(device) {
        if (device === null || device === undefined) {
          return null;
        }

        var model = device.model;
        var triggles;

        if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2()) {
          triggles = _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '270', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press);
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01()) {
          triggles = _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '688', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press);
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3()) {
          triggles = _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '406', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press);
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2()) {
          triggles = _LHDeivceTriggleModel.default.getSensorSwitchTriggleModel(device, '18', kIFTTTKeyClick, _LHCommonLocalizableString.default.ifttt_triggle_single_press);
        } else if (model === _LHDeviceModel.default.DeviceModelVibrationAq1()) {
          triggles = _LHDeivceTriggleModel.default.getVibrationTriggleModel(device, '199', kIFTTTKeyVibrate, _LHCommonLocalizableString.default.ifttt_triggle_detect_vibration);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionAq2()) {
          triggles = _LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '264', kIFTTTKeyMotion, _LHCommonLocalizableString.default.ifttt_triggle_someone_moved);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionV2()) {
          triggles = _LHDeivceTriggleModel.default.getSensorMotionTriggleModel(device, '23', kIFTTTKeyMotion, _LHCommonLocalizableString.default.ifttt_triggle_someone_moved);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetV2()) {
          triggles = _LHDeivceTriggleModel.default.getSensorMagnetTriggleModel(device, '20', kIFTTTKeyOpen, _LHCommonLocalizableString.default.ifttt_triggle_windoor_open);
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2()) {
          triggles = _LHDeivceTriggleModel.default.getSensorMagnetTriggleModel(device, '272', kIFTTTKeyOpen, _LHCommonLocalizableString.default.ifttt_triggle_windoor_open);
        } else if (model === _LHDeviceModel.default.DeviceModelCubeAq1()) {
          triggles = _LHDeivceTriggleModel.default.getSensorCubeTriggleModel(device, _LHCommonLocalizableString.default.ifttt_triggle_moved_afteronemin);
        } else if (model === _LHDeviceModel.default.DeviceModelCubeMijiaV1()) {
          triggles = _LHDeivceTriggleModel.default.getSensorCubeTriggleModel(device, _LHCommonLocalizableString.default.ifttt_triggle_moved_afteronemin);
        }

        return {
          triggle: triggles,
          triggleName: this.getTriggleNameWithTriggles(triggles),
          pushString: '警戒时，' + device.name + '触发报警'
        };
      }
    }, {
      key: "getNormalGatewayDoorBellIFTTTName",
      value: function getNormalGatewayDoorBellIFTTTName(device) {
        if (device === null || device === undefined) {
          return null;
        }

        var model = device.model;
        var name = 'unknown';

        if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_1;
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_1;
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_1;
        } else if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_1;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionAq2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_3;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_3;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_2;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_3_2;
        }

        return name;
      }
    }, {
      key: "getNormalGatewayAlarmIFTTTName",
      value: function getNormalGatewayAlarmIFTTTName(device) {
        if (device === null || device === undefined) {
          return null;
        }

        var model = device.model;
        var name = 'unknown';

        if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.AqaraSwitchT1() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_1_3;
        } else if (model === _LHDeviceModel.default.DeviceModelVibrationAq1()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_1_5;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_1_1;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetV2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_1_2;
        } else if (model === _LHDeviceModel.default.DeviceModelCubeAq1() || model === _LHDeviceModel.default.DeviceModelCubeMijiaV1()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_1_4;
        }

        return name;
      }
    }, {
      key: "getNormalGatewayClockIFTTTName",
      value: function getNormalGatewayClockIFTTTName(device) {
        if (device === null || device === undefined) {
          return null;
        }

        var model = device.model;
        var name = 'unknown';

        if (model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq2() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchCN01() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchAq3() || model === _LHDeviceModel.default.DeviceModelWirelessSwitchV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_4_3;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMotionAq2() || model === _LHDeviceModel.default.DeviceModelSensorMotionV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_4_1;
        } else if (model === _LHDeviceModel.default.DeviceModelSensorMagnetAq2() || model === _LHDeviceModel.default.DeviceModelSensorMagnetV2()) {
          name = _LHCommonLocalizableString.default.common_scene_name_lm_scene_4_2;
        }

        return name;
      }
    }, {
      key: "getLeakAlarmIFTTTName",
      value: function getLeakAlarmIFTTTName(type) {
        if (type === 1) {
          return _LHCommonLocalizableString.default.common_scene_name_lm_scene_5_1;
        } else if (type === 2) {
          return _LHCommonLocalizableString.default.common_scene_name_lm_scene_5_2;
        } else if (type === 3) {
          return _LHCommonLocalizableString.default.common_scene_name_lm_scene_5_3;
        }

        return null;
      }
    }, {
      key: "getTriggleNameWithTriggles",
      value: function getTriggleNameWithTriggles(triggles) {
        if (triggles === null || triggles === undefined) {
          return '';
        }

        if (!Array.isArray(triggles)) {
          return triggles.name;
        }

        var name = '';

        for (var i = 0, triggleLen = triggles.length; i < triggleLen; i += 1) {
          var triggle = triggles[i].name;

          if (name === '') {
            name = triggle;
          } else {
            name = name + '/' + triggle;
          }
        }

        return name;
      }
    }]);
    return LHAlarmIFTTTAdapter;
  }();

  exports.default = LHAlarmIFTTTAdapter;
},10103,[14305,14320,14323,10074,10010,10091,10106,10109,10112]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var LHGuardTypeMode = function () {
    function LHGuardTypeMode() {
      (0, _classCallCheck2.default)(this, LHGuardTypeMode);
    }

    (0, _createClass2.default)(LHGuardTypeMode, null, [{
      key: "getBaseGuardType",
      value: function getBaseGuardType() {
        return 0;
      }
    }, {
      key: "getHomeGuardType",
      value: function getHomeGuardType() {
        return 1;
      }
    }, {
      key: "getAwayGuardType",
      value: function getAwayGuardType() {
        return 2;
      }
    }, {
      key: "getSleepGuardType",
      value: function getSleepGuardType() {
        return 3;
      }
    }, {
      key: "getNormalGuardType",
      value: function getNormalGuardType() {
        return 20;
      }
    }, {
      key: "getDoorbellType",
      value: function getDoorbellType() {
        return 21;
      }
    }, {
      key: "getCloseAlarmClockType",
      value: function getCloseAlarmClockType() {
        return 22;
      }
    }, {
      key: "getLinkageAlarmType",
      value: function getLinkageAlarmType() {
        return 23;
      }
    }, {
      key: "getGuardTypeWithSceneIdentify",
      value: function getGuardTypeWithSceneIdentify(identify) {
        if (identify === 'lm_scene_base') {
          return this.getBaseGuardType();
        } else if (identify === 'lm_scene_home') {
          return this.getHomeGuardType();
        } else if (identify === 'lm_scene_away') {
          return this.getAwayGuardType();
        } else if (identify === 'lm_scene_sleep') {
          return this.getSleepGuardType();
        } else {
          return this.getBaseGuardType();
        }
      }
    }, {
      key: "getGuardModelWithGuardType",
      value: function getGuardModelWithGuardType(guardType) {
        var guardModel = {};

        switch (guardType) {
          case this.getBaseGuardType():
            guardModel = this.buildGuardModel('lm_scene_base', '2135', _LHCommonLocalizableString.default.guard_type_basic, _LHCommonLocalizableString.default.mi_comboHub_mainPage_guard_base);
            break;

          case this.getHomeGuardType():
            guardModel = this.buildGuardModel('lm_scene_home', '2132', _LHCommonLocalizableString.default.guard_type_home, _LHCommonLocalizableString.default.mi_comboHub_mainPage_guard_home);
            break;

          case this.getAwayGuardType():
            guardModel = this.buildGuardModel('lm_scene_away', '2133', _LHCommonLocalizableString.default.guard_type_away, _LHCommonLocalizableString.default.mi_comboHub_mainPage_guard_away);
            break;

          case this.getSleepGuardType():
            guardModel = this.buildGuardModel('lm_scene_sleep', '2134', _LHCommonLocalizableString.default.guard_type_sleep, _LHCommonLocalizableString.default.mi_comboHub_mainPage_guard_sleep);
            break;

          case this.getNormalGuardType():
            guardModel = this.buildGuardModel('lm_scene_alarm');
            break;

          case this.getDoorbellType():
            guardModel = this.buildGuardModel('lm_scene_doorbell');
            break;

          case this.getCloseAlarmClockType():
            guardModel = this.buildGuardModel('lm_scene_closeAlarmClock');
            break;

          case this.getLinkageAlarmType():
            guardModel = this.buildGuardModel('lm_scene_linkageAlarm');
            break;

          default:
            break;
        }

        return guardModel;
      }
    }, {
      key: "buildGuardModel",
      value: function buildGuardModel(identify) {
        var scId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var guardName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var guardShortName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
        return {
          sc_id: scId,
          identify: identify,
          guardName: guardName,
          guardShortName: guardShortName
        };
      }
    }]);
    return LHGuardTypeMode;
  }();

  exports.default = LHGuardTypeMode;
},10106,[14305,14320,14323,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHGuardTypeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHDeviceModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var LHDeviceTriggleModel = function () {
    function LHDeviceTriggleModel() {
      (0, _classCallCheck2.default)(this, LHDeviceTriggleModel);
    }

    (0, _createClass2.default)(LHDeviceTriggleModel, null, [{
      key: "getVibrationTriggleModel",
      value: function getVibrationTriggleModel(device, scId, key, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.' + key,
          device_name: device.name,
          sc_id: scId,
          tr_id: 101,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: ''
        };
      }
    }, {
      key: "getSensorMotionTriggleModel",
      value: function getSensorMotionTriggleModel(device, scId, key, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.' + key,
          device_name: device.name,
          sc_id: scId,
          tr_id: 108,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensorSwitchTriggleModel",
      value: function getSensorSwitchTriggleModel(device, scId, key, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.' + key,
          device_name: device.name,
          sc_id: scId,
          tr_id: 101,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensorMagnetTriggleModel",
      value: function getSensorMagnetTriggleModel(device, scId, key, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.' + key,
          device_name: device.name,
          sc_id: scId,
          tr_id: 107,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensorCubeTriggleModel",
      value: function getSensorCubeTriggleModel(device, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.alert',
          extra: '[1,18,2,85,[0,2],0,0]',
          device_name: device.name,
          sc_id: '',
          tr_id: 0,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensorWleakTriggleModel",
      value: function getSensorWleakTriggleModel(device, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.leak',
          device_name: device.name,
          sc_id: '300',
          tr_id: 104,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensorSmokeTriggleModel",
      value: function getSensorSmokeTriggleModel(device, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.alarm',
          device_name: device.name,
          sc_id: '125',
          tr_id: 104,
          default_value: 0,
          value: 1,
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensorNatgasTriggleModel",
      value: function getSensorNatgasTriggleModel(device, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.alarm',
          device_name: device.name,
          sc_id: '124',
          tr_id: 104,
          default_value: 0,
          value: 1,
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getSensor86SWTriggleModel",
      value: function getSensor86SWTriggleModel(device, scId, key, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'event.' + device.model + '.' + key,
          device_name: device.name,
          sc_id: scId,
          tr_id: 101,
          default_value: 0,
          value: '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getGatewayAlarmTriggleModelWithAlarmType",
      value: function getGatewayAlarmTriggleModelWithAlarmType(alarmType) {
        var guardModel = _LHGuardTypeMode.default.getGuardModelWithGuardType(alarmType);

        if (alarmType === _LHGuardTypeMode.default.getNormalGuardType()) {
          return {
            device_name: _miot.Device.name,
            did: _miot.Device.deviceID,
            src: 'device',
            tr_id: 104,
            sc_id: 0,
            value: 'on',
            default_value: 0,
            extra: '[1,19,6,111,[0,1],2,0]',
            key: 'prop.' + _miot.Device.model + '.arming',
            device_abbr: ''
          };
        } else if (alarmType === _LHGuardTypeMode.default.getBaseGuardType()) {
          return [{
            device_name: _miot.Device.name,
            did: _miot.Device.deviceID,
            src: 'device',
            tr_id: 104,
            sc_id: guardModel.sc_id,
            value: alarmType,
            default_value: 0,
            key: 'prop.' + _miot.Device.model + '.3.1',
            device_abbr: ''
          }, this.getGatewayAlarmTriggleModelWithAlarmType(_LHGuardTypeMode.default.getHomeGuardType()), this.getGatewayAlarmTriggleModelWithAlarmType(_LHGuardTypeMode.default.getAwayGuardType()), this.getGatewayAlarmTriggleModelWithAlarmType(_LHGuardTypeMode.default.getSleepGuardType())];
        } else {
          return {
            device_name: _miot.Device.name,
            did: _miot.Device.deviceID,
            src: 'device',
            tr_id: 104,
            sc_id: guardModel.sc_id,
            value: alarmType,
            default_value: 0,
            key: 'prop.' + _miot.Device.model + '.3.1',
            device_abbr: ''
          };
        }
      }
    }, {
      key: "getM1SNightTriggleModel",
      value: function getM1SNightTriggleModel(device, scId, key, triggleName) {
        return {
          name: triggleName,
          did: device.deviceID,
          key: 'prop.' + device.model + '.' + key,
          device_name: device.name,
          sc_id: scId,
          tr_id: 104,
          default_value: 0,
          value: {
            min: 0,
            max: 30
          },
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getDeviceTriggleItem",
      value: function getDeviceTriggleItem(device, triggle) {
        return {
          name: triggle.triggleName,
          did: device.deviceID,
          key: triggle.type + '.' + device.model + '.' + triggle.key,
          device_name: device.name,
          sc_id: triggle.scId,
          tr_id: triggle.tr_id,
          default_value: triggle.default_value,
          value: typeof triggle.value !== 'undefined' ? triggle.value : '',
          src: 'device',
          device_abbr: 'device'
        };
      }
    }, {
      key: "getDeviceTriggles",
      value: function getDeviceTriggles(device, deviceTrigglesConfig) {
        var triggles = [];

        for (var i = 0, len = deviceTrigglesConfig.length; i < len; i += 1) {
          var triggle = deviceTrigglesConfig[i];
          triggles.push(this.getDeviceTriggleItem(device, triggle));
        }

        return triggles;
      }
    }, {
      key: "getLinkageAlarmLaunchAttr",
      value: function getLinkageAlarmLaunchAttr(device) {
        var attr = this.getLinkageAttr(device, _LHCommonLocalizableString.default.mi_commonHub_linkage_alarm);

        if (device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
          attr.key = 'prop.' + device.model + '.3.22';
          attr.value = {
            min: 1,
            max: 2
          };
        } else {
          attr.key = 'event.' + device.model + '.arming';
          attr.extra = '[1,19,1,111,[0,1],2,0]';
        }
      }
    }, {
      key: "getLinkageDisAlarmLaunchAttr",
      value: function getLinkageDisAlarmLaunchAttr(device) {
        var attr = this.getLinkageAttr(device, _LHCommonLocalizableString.default.mi_commonHub_linkage_alarm_dis);

        if (device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
          attr.key = 'prop.' + device.model + '.3.22';
          attr.value = 0;
        } else {
          attr.key = 'event.' + device.model + '.alarm';
          attr.extra = '[1,19,9,111,[0,0],0,0]';
          attr.value = 'off';
        }
      }
    }, {
      key: "getLinkageDisAllAlarmLaunchAttr",
      value: function getLinkageDisAllAlarmLaunchAttr(device) {
        var attr = this.getLinkageAttr(device, _LHCommonLocalizableString.default.mi_commonHub_linkage_alarm_dis);

        if (device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
          attr.key = 'prop.' + device.model + '.3.22';
          attr.value = 0;
        } else {
          attr.key = 'event.' + device.model + '.alarm';
          attr.extra = '[1,19,9,111,[0,0],0,0]';
          attr.value = 'all_off';
        }
      }
    }, {
      key: "getLinkageAttr",
      value: function getLinkageAttr(device, name) {
        return {
          device_name: device.name,
          did: device.deviceID ? device.deviceID : device.did,
          name: name,
          src: 'device'
        };
      }
    }]);
    return LHDeviceTriggleModel;
  }();

  exports.default = LHDeviceTriggleModel;
},10109,[14305,14320,14323,10074,10106,10091,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var LHDeviceTrigglesConfig = function () {
    function LHDeviceTrigglesConfig() {
      (0, _classCallCheck2.default)(this, LHDeviceTrigglesConfig);
    }

    (0, _createClass2.default)(LHDeviceTrigglesConfig, null, [{
      key: "GetBaseItem",
      value: function GetBaseItem(scId, type, key, trId, defaultValue, triggleName) {
        return {
          triggleName: triggleName || '',
          type: type,
          key: key,
          scId: scId,
          tr_id: trId,
          default_value: defaultValue
        };
      }
    }, {
      key: "GetBasePress",
      value: function GetBasePress(scId, key, triggleName) {
        return this.GetBaseItem(scId, 'event', key, 104, '', triggleName);
      }
    }, {
      key: "GetSinglePress",
      value: function GetSinglePress(scId) {
        return this.GetBasePress(scId, '3.1', _LHCommonLocalizableString.default.ifttt_triggle_single_press);
      }
    }, {
      key: "GetDoublePress",
      value: function GetDoublePress(scId) {
        return this.GetBasePress(scId, '3.2', _LHCommonLocalizableString.default.ifttt_triggle_double_press);
      }
    }, {
      key: "GetLongPress",
      value: function GetLongPress(scId) {
        return this.GetBasePress(scId, '3.3', _LHCommonLocalizableString.default.ifttt_triggle_long_press);
      }
    }, {
      key: "GetAqaraWleakT1",
      value: function GetAqaraWleakT1() {
        return [this.GetBaseItem(3434, 'prop', '2.1', 104, true, _LHCommonLocalizableString.default.ifttt_triggle_flood_alert)];
      }
    }, {
      key: "GetAqaraSwitchT1",
      value: function GetAqaraSwitchT1() {
        return [this.GetSinglePress(3420), this.GetDoublePress(3421), this.GetLongPress(3422)];
      }
    }, {
      key: "GetAqaraSwitchRemoteT1",
      value: function GetAqaraSwitchRemoteT1() {
        return [this.GetSinglePress(3768), this.GetDoublePress(3769), this.GetLongPress(3770)];
      }
    }, {
      key: "GetAqaraSwitchRemoteDoubleT1",
      value: function GetAqaraSwitchRemoteDoubleT1() {
        return [this.GetSinglePress(3771), this.GetBasePress(3772), this.GetLongPress(3773), this.GetBasePress(3774, '4.1'), this.GetBasePress(3775, '4.2'), this.GetBasePress(3776, '4.3'), this.GetBasePress(3777, '5.1')];
      }
    }]);
    return LHDeviceTrigglesConfig;
  }();

  exports.default = LHDeviceTrigglesConfig;
},10112,[14305,14320,14323,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHGuardTypeMode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHDeviceModel = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var LHDeviceActionModel = function () {
    function LHDeviceActionModel() {
      (0, _classCallCheck2.default)(this, LHDeviceActionModel);
    }

    (0, _createClass2.default)(LHDeviceActionModel, null, [{
      key: "getGatewayAlarmActionListWithAlarmType",
      value: function getGatewayAlarmActionListWithAlarmType(alarmType) {
        if (alarmType === _LHGuardTypeMode.default.getNormalGuardType()) {
          return [{
            keyName: 'name',
            model: _miot.Device.model,
            name: _miot.Device.name,
            payload: {
              command: _miot.Device.model + '.alarm',
              did: _miot.Device.deviceID,
              extra: '[1,18,2,85,[0,2],0,0]',
              value: 10000
            }
          }];
        } else {
          return [{
            keyName: 'name',
            model: _miot.Device.model,
            name: _miot.Device.name,
            type: 0,
            tr_id: 201,
            sa_id: 3832,
            payload: {
              command: _miot.Device.model + '.set_properties',
              did: _miot.Device.deviceID,
              value: [{
                piid: 22,
                value: this.getAlarmWriteValue(alarmType),
                siid: 3
              }]
            }
          }];
        }
      }
    }, {
      key: "getAlarmWriteValue",
      value: function getAlarmWriteValue(alarmType) {
        if (_miot.Device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
          return alarmType === _LHGuardTypeMode.default.getBaseGuardType() ? 2 : 1;
        } else if (_LHDeviceModel.default.isOtherMultiModeHub(_miot.Device.model)) {
          return Number(alarmType) + 1;
        }

        return 1;
      }
    }, {
      key: "getDoorbellAction",
      value: function getDoorbellAction() {
        return [{
          keyName: 'name',
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.door_bell',
            did: _miot.Device.deviceID,
            extra: '[1,19,2,85,[44,10000],0,0]',
            value: '10000'
          }
        }];
      }
    }, {
      key: "getCloseClockAction",
      value: function getCloseClockAction() {
        return [{
          keyName: 'name',
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.play_alarm_clock',
            did: _miot.Device.deviceID,
            extra: '[1,19,5,111,[44,0],0,0]',
            value: 'off'
          }
        }];
      }
    }, {
      key: "getPlayMusiceAction",
      value: function getPlayMusiceAction() {
        return {
          keyName: _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_3,
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.play_music_new',
            did: _miot.Device.deviceID,
            extra: '[1,19,5,85,[56,8,0,60],0,0]',
            value: ['8', 60],
            key: 'value'
          }
        };
      }
    }, {
      key: "getToggleLightAction",
      value: function getToggleLightAction() {
        return {
          keyName: _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_4,
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.toggle_light',
            did: _miot.Device.deviceID,
            extra: '[1,19,7,111,[40,2],0,0]',
            value: 'toggle',
            key: 'value'
          }
        };
      }
    }, {
      key: "getOpenSmartLightAction",
      value: function getOpenSmartLightAction() {
        return {
          keyName: _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_5,
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.toggle_smart_light',
            did: _miot.Device.deviceID,
            extra: '[1,19,7,111,[48,3],0,0]',
            value: 'on',
            key: 'value'
          }
        };
      }
    }, {
      key: "getCloseLightAction",
      value: function getCloseLightAction() {
        return {
          keyName: _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_6,
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.toggle_light',
            did: _miot.Device.deviceID,
            extra: '[1,19,7,111,[48,0],0,0]',
            value: 'off',
            key: 'value'
          }
        };
      }
    }, {
      key: "getOpenLightAction",
      value: function getOpenLightAction() {
        return {
          keyName: _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_7,
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.toggle_light',
            did: _miot.Device.deviceID,
            extra: '[1,19,7,111,[48,1],0,0]',
            value: 'on',
            key: 'value'
          }
        };
      }
    }, {
      key: "getToggleAlarmAction",
      value: function getToggleAlarmAction() {
        return {
          keyName: _LHCommonLocalizableString.default.sensor_set_ifttt_triggle_name_8,
          model: _miot.Device.model,
          name: _miot.Device.name,
          payload: {
            command: _miot.Device.model + '.set_arming',
            did: _miot.Device.deviceID,
            extra: '[1,19,6,111,[40,3],0,0]',
            value: 'toggle',
            key: 'value'
          }
        };
      }
    }, {
      key: "getLinkageAlarmAction",
      value: function getLinkageAlarmAction(device) {
        return {
          model: device.model,
          type: 0,
          did: device.deviceID,
          name: _miot.Device.name,
          extra: '[1,19,9,85,[40,10000],0,0]',
          payload: {
            value: 'toggle',
            did: device.deviceID,
            command: device.model + ".linkage_alarm",
            total_length: 0,
            extra: '[1,19,9,85,[40,10000],0,0]'
          }
        };
      }
    }, {
      key: "getPlugToggleAction",
      value: function getPlugToggleAction(device) {
        return {
          keyName: 'name',
          model: device.model,
          name: device.name,
          payload: {
            command: device.model + '.toggle_plug',
            did: device.deviceID,
            extra: '[1,6,1,0,[48,2],0,0]',
            value: ['channel_0', 'toggle'],
            key: 'value'
          }
        };
      }
    }, {
      key: "getLinkageDisAlarmAction",
      value: function getLinkageDisAlarmAction(device) {
        var action = this.getLinkageAction(_LHCommonLocalizableString.default.mi_commonHub_linkage_alarm_dis);

        if (device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
          action.payload.command = device.model + '.set_properties';
          action.payload.value = [{
            siid: 3,
            piid: 22,
            value: 0
          }];
        } else {
          action.payload.command = device.model + '.dis_alarm';
          action.payload.extra = '[1,19,9,111,[40,0],0,0]';
        }
      }
    }, {
      key: "getLinkageDisAllAlarmAction",
      value: function getLinkageDisAllAlarmAction(device) {
        var action = this.getLinkageAction(_LHCommonLocalizableString.default.mi_commonHub_linkage_alarm_dis);

        if (device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
          action.payload.command = device.model + '.set_properties';
          action.payload.value = [{
            siid: 3,
            piid: 22,
            value: 0
          }];
        } else {
          action.payload.command = device.model + '.dis_alarm';
          action.payload.extra = '[1,19,9,111,[40,0],0,0]';
          action.payload.value = 1;
        }
      }
    }, {
      key: "getLinkageAction",
      value: function getLinkageAction(device, keyName) {
        return {
          keyName: keyName,
          model: device.model,
          name: device.name,
          payload: {
            did: device.deviceID ? device.deviceID : device.did
          }
        };
      }
    }]);
    return LHDeviceActionModel;
  }();

  exports.default = LHDeviceActionModel;

  LHDeviceActionModel.getLinkageAlarmAction = function (device) {
    var action = LHDeviceActionModel.getLinkageAction(_LHCommonLocalizableString.default.mi_commonHub_linkage_alarm);

    if (device.model === _LHDeviceModel.default.DeviceModelMijiaMultiModeHub()) {
      action.payload.command = device.model + '.set_properties';
      action.payload.value = [{
        siid: 3,
        piid: 22,
        value: 1
      }];
    } else {
      action.payload.command = device.model + '.linkage_alarm';
      action.payload.extra = '[1,19,9,85,[40,10000],0,0]';
      action.payload.value = 10000;
    }
  };
},10115,[14305,14320,14323,10074,10106,10010,10091]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[4]);

  var _LHSensorSetIFTTTRequest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var LHSensorSetIFTTTUKRequest = function () {
    function LHSensorSetIFTTTUKRequest() {
      (0, _classCallCheck2.default)(this, LHSensorSetIFTTTUKRequest);
    }

    (0, _createClass2.default)(LHSensorSetIFTTTUKRequest, null, [{
      key: "buildSensorSetIFTTT",
      value: function buildSensorSetIFTTT(devicesList, alreadyBuildIFTTTList, callBackFunc) {
        var sensorMagnetDeviceList, sensorMotionDeviceList, sensorSwitchDeviceList, successBuildIFTTTList, failBuildIFTTTList, key, _iterator, _isArray, _i, _ref, _device, model, lazyClock;

        return _regenerator.default.async(function buildSensorSetIFTTT$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('开始构建英标套装自动化列表');
                sensorMagnetDeviceList = [];
                sensorMotionDeviceList = [];
                sensorSwitchDeviceList = [];
                successBuildIFTTTList = alreadyBuildIFTTTList === null ? [] : alreadyBuildIFTTTList;
                failBuildIFTTTList = [];
                key = '';
                _iterator = devicesList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();

              case 8:
                if (!_isArray) {
                  _context.next = 14;
                  break;
                }

                if (!(_i >= _iterator.length)) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("break", 49);

              case 11:
                _ref = _iterator[_i++];
                _context.next = 18;
                break;

              case 14:
                _i = _iterator.next();

                if (!_i.done) {
                  _context.next = 17;
                  break;
                }

                return _context.abrupt("break", 49);

              case 17:
                _ref = _i.value;

              case 18:
                _device = _ref;
                model = _device.model;

                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelSensorMagnetV2())) {
                  _context.next = 28;
                  break;
                }

                key = 'alarm_' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 25;
                  break;
                }

                _context.next = 25;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 25:
                if (sensorMagnetDeviceList.length < 2) {
                  sensorMagnetDeviceList.push(_device);
                }

                _context.next = 47;
                break;

              case 28:
                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelSensorMotionV2())) {
                  _context.next = 36;
                  break;
                }

                key = 'alarm_' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 33;
                  break;
                }

                _context.next = 33;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 33:
                if (sensorMotionDeviceList.length < 2) {
                  sensorMotionDeviceList.push(_device);
                }

                _context.next = 47;
                break;

              case 36:
                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelWirelessSwitchV2())) {
                  _context.next = 47;
                  break;
                }

                if (!(sensorSwitchDeviceList.length < 1)) {
                  _context.next = 47;
                  break;
                }

                key = 'triggle_light' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 42;
                  break;
                }

                _context.next = 42;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorSwitchTriggleTheNightLightRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 42:
                key = 'triggle_alarm' + _device.deviceID;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 46;
                  break;
                }

                _context.next = 46;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorSwitchTriggleTheAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 46:
                sensorSwitchDeviceList.push(_device);

              case 47:
                _context.next = 8;
                break;

              case 49:
                if (!(sensorMagnetDeviceList.length > 0 && sensorMagnetDeviceList.length <= 2)) {
                  _context.next = 54;
                  break;
                }

                key = 'ring_bell';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 54;
                  break;
                }

                _context.next = 54;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMagnetRingBellRequest(sensorMagnetDeviceList).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 54:
                if (!(sensorMotionDeviceList.length > 0 && sensorMotionDeviceList.length <= 2)) {
                  _context.next = 63;
                  break;
                }

                key = 'close_smart_light';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 59;
                  break;
                }

                _context.next = 59;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMotionCloseTheNightLightRequestMijia(sensorMotionDeviceList).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 59:
                key = 'open_smart_light';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 63;
                  break;
                }

                _context.next = 63;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMotionOpenTheNightLightRequestMijia(sensorMotionDeviceList).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 63:
                key = 'timing_alarm';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 67;
                  break;
                }

                _context.next = 67;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getAlarmTimingRequest().then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 67:
                key = 'timing_light';

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 71;
                  break;
                }

                _context.next = 71;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getColorLightTimingRequest('2bffff00').then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 71:
                lazyClock = 'lazy_clock';

                if (successBuildIFTTTList.includes(lazyClock)) {
                  _context.next = 75;
                  break;
                }

                _context.next = 75;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getLazyClockAlarmTimingRequest().then(function () {
                  successBuildIFTTTList.push(lazyClock);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 75:
                console.log('成功配置自动化的列表：');
                console.log(successBuildIFTTTList);
                callBackFunc(successBuildIFTTTList, failBuildIFTTTList);

              case 78:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]);
    return LHSensorSetIFTTTUKRequest;
  }();

  exports.default = LHSensorSetIFTTTUKRequest;
},10118,[14305,14674,14320,14323,10004,10097]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var start = Date.now();

  _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  _$$_REQUIRE(_dependencyMap[2]);

  _$$_REQUIRE(_dependencyMap[3]);

  _$$_REQUIRE(_dependencyMap[4]);

  _$$_REQUIRE(_dependencyMap[5]);

  _$$_REQUIRE(_dependencyMap[6]);

  _$$_REQUIRE(_dependencyMap[7]);

  _$$_REQUIRE(_dependencyMap[8]);

  _$$_REQUIRE(_dependencyMap[9]);

  _$$_REQUIRE(_dependencyMap[10]);

  var GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[11]);

  GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
  GlobalPerformanceLogger.markPoint('initializeCore_end');
},10120,[14449,14452,14455,14470,14479,14485,14500,14524,14533,14536,14560,14548]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[4]);

  var _LHSensorSetIFTTTRequest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var LHSensorSetIFTTTUSRequest = function () {
    function LHSensorSetIFTTTUSRequest() {
      (0, _classCallCheck2.default)(this, LHSensorSetIFTTTUSRequest);
    }

    (0, _createClass2.default)(LHSensorSetIFTTTUSRequest, null, [{
      key: "buildSensorSetIFTTT",
      value: function buildSensorSetIFTTT(devicesList, alreadyBuildIFTTTList, callBackFunc) {
        var sensorMagnetDeviceList, sensorMotionDeviceList, sensorSwitchDeviceList, successBuildIFTTTList, failBuildIFTTTList, key, plugDevice, _iterator, _isArray, _i, _ref, _device, model;

        return _regenerator.default.async(function buildSensorSetIFTTT$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('开始构建美标套装自动化列表');
                sensorMagnetDeviceList = [];
                sensorMotionDeviceList = [];
                sensorSwitchDeviceList = [];
                successBuildIFTTTList = alreadyBuildIFTTTList === null ? [] : alreadyBuildIFTTTList;
                failBuildIFTTTList = [];
                key = '';
                devicesList.forEach(function (device) {
                  var model = device.model;

                  if (model === _LHCommonFunction.LHDeviceModel.DeviceModelPlugUs()) {
                    plugDevice = device;
                  }
                });
                _iterator = devicesList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();

              case 9:
                if (!_isArray) {
                  _context.next = 15;
                  break;
                }

                if (!(_i >= _iterator.length)) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt("break", 61);

              case 12:
                _ref = _iterator[_i++];
                _context.next = 19;
                break;

              case 15:
                _i = _iterator.next();

                if (!_i.done) {
                  _context.next = 18;
                  break;
                }

                return _context.abrupt("break", 61);

              case 18:
                _ref = _i.value;

              case 19:
                _device = _ref;
                model = _device.model;
                console.log(model);

                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelWirelessSwitchCN01())) {
                  _context.next = 39;
                  break;
                }

                if (!(sensorSwitchDeviceList.length < 1)) {
                  _context.next = 37;
                  break;
                }

                key = _LHCommonFunction.LHSensorSetIFTTTConstant.US_SWITCH_TOGGLE_PLUG;
                console.log(successBuildIFTTTList);

                if (!(!successBuildIFTTTList.includes(key) && plugDevice)) {
                  _context.next = 30;
                  break;
                }

                console.log(key);
                _context.next = 30;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorSwitchTriggleTogglePlug(_device, plugDevice).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 30:
                key = _LHCommonFunction.LHSensorSetIFTTTConstant.US_SWITCH_ALARM;
                console.log(successBuildIFTTTList);

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 36;
                  break;
                }

                console.log(key);
                _context.next = 36;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorSwitchTriggleTheAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 36:
                sensorSwitchDeviceList.push(_device);

              case 37:
                _context.next = 59;
                break;

              case 39:
                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelSensorMagnetAq2())) {
                  _context.next = 48;
                  break;
                }

                if (!(sensorMagnetDeviceList.length < 1)) {
                  _context.next = 46;
                  break;
                }

                key = _LHCommonFunction.LHSensorSetIFTTTConstant.US_MAGNET_ALARM;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 45;
                  break;
                }

                _context.next = 45;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 45:
                sensorMagnetDeviceList.push(_device);

              case 46:
                _context.next = 59;
                break;

              case 48:
                if (!(model === _LHCommonFunction.LHDeviceModel.DeviceModelSensorMotionAq2())) {
                  _context.next = 59;
                  break;
                }

                if (!(sensorMotionDeviceList.length < 1)) {
                  _context.next = 59;
                  break;
                }

                key = _LHCommonFunction.LHSensorSetIFTTTConstant.US_MOTION_ALARM;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 54;
                  break;
                }

                _context.next = 54;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorAlarmRequest(_device).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 54:
                key = _LHCommonFunction.LHSensorSetIFTTTConstant.US_OPEN_SMART_LIGHT;

                if (successBuildIFTTTList.includes(key)) {
                  _context.next = 58;
                  break;
                }

                _context.next = 58;
                return _regenerator.default.awrap(_LHSensorSetIFTTTRequest.default.getSensorMotionOpenTheNightLightRequest([_device]).then(function () {
                  successBuildIFTTTList.push(key);
                }).catch(function () {
                  failBuildIFTTTList.push(key);
                }));

              case 58:
                sensorMotionDeviceList.push(_device);

              case 59:
                _context.next = 9;
                break;

              case 61:
                console.log('成功配置自动化的列表：');
                console.log(successBuildIFTTTList);
                callBackFunc(successBuildIFTTTList, failBuildIFTTTList);

              case 64:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]);
    return LHSensorSetIFTTTUSRequest;
  }();

  exports.default = LHSensorSetIFTTTUSRequest;
},10121,[14305,14674,14320,14323,10004,10097]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var LHDeviceAuthorityUtils = function () {
    function LHDeviceAuthorityUtils() {
      (0, _classCallCheck2.default)(this, LHDeviceAuthorityUtils);
    }

    (0, _createClass2.default)(LHDeviceAuthorityUtils, null, [{
      key: "isFamilyShare",
      value: function isFamilyShare() {
        if (!_miot.Device.isOwner) {
          return _miot.Device.isFamily;
        }

        return false;
      }
    }, {
      key: "isShared",
      value: function isShared() {
        return !_miot.Device.isOwner;
      }
    }]);
    return LHDeviceAuthorityUtils;
  }();

  exports.default = LHDeviceAuthorityUtils;
},10124,[14305,14320,14323,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var LHAppiumUtils = function () {
    function LHAppiumUtils() {
      (0, _classCallCheck2.default)(this, LHAppiumUtils);
    }

    (0, _createClass2.default)(LHAppiumUtils, null, [{
      key: "GetAccessibilityLabel",
      value: function GetAccessibilityLabel(contentDesc) {
        if (_reactNative.Platform.OS === 'android') {
          return contentDesc;
        } else {
          return null;
        }
      }
    }, {
      key: "getWhiteList",
      value: function getWhiteList() {
        return ['840907289', '1090807515', '702333240', '2250935325', '978172332'];
      }
    }, {
      key: "isWhiteList",
      value: function isWhiteList() {
        var whiteList = LHAppiumUtils.getWhiteList();
        var isWhite = whiteList.indexOf('' + _miot.Service.account.ID) > -1;
        return isWhite;
      }
    }, {
      key: "handleTestRequestData",
      value: function handleTestRequestData(originalData, type, key, requestTime, params, response, dataMaxLength) {
        var requestClone = _LHCommonFunction.CommonMethod.DeepClone(originalData);

        if (LHAppiumUtils.isWhiteList()) {
          if (!requestClone[key]) requestClone[key] = [];
          if (requestClone[key].length >= (dataMaxLength || 3)) requestClone[key].shift();
          requestClone[key].push({
            type: type,
            requestTime: requestTime,
            params: params || {},
            response: response || {},
            responseTime: new Date().getTime()
          });
        }

        return requestClone;
      }
    }]);
    return LHAppiumUtils;
  }();

  exports.default = LHAppiumUtils;
},10127,[14305,14320,14323,10033,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _resources = _$$_REQUIRE(_dependencyMap[5]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[6]);

  var _LHCommonLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var navigaitonRef = null;

  function _getSettingItem(type, extendParams) {
    var allItems = {
      deviceName: {
        index: 1,
        title: _resources.strings.name,
        testID: 'deviceNameItem',
        rightDescription: '',
        press: function press() {
          _miot.Host.ui.openChangeDeviceName();
        }
      },
      switchSetting: {
        index: 6,
        title: _resources.strings.memberSet,
        testID: 'switchSettingItem',
        press: function press() {
          _miot.Host.ui.openPowerMultikeyPage(_miot.Device.deviceID, _miot.Device.mac);
        }
      },
      shareDevice: {
        index: 9,
        title: _resources.strings.share,
        testID: 'shareDeviceItem',
        press: function press() {
          _miot.Host.ui.openShareDevicePage();
        }
      },
      roomManagement: {
        index: 3,
        title: _resources.strings.location,
        testID: 'roomManagementItem',
        press: function press() {
          _miot.Host.ui.openRoomManagementPage();
        }
      },
      deviceTimeZone: {
        title: _resources.strings.timezone,
        testID: 'deviceTimeZoneItem',
        press: function press() {
          _miot.Host.ui.openDeviceTimeZoneSettingPage({
            sync_device: false
          });
        }
      },
      iftttAuto: {
        index: 18,
        title: _resources.strings.ifttt,
        testID: 'iftttAutoItem',
        press: function press() {
          _miot.Host.ui.openIftttAutoPage();
        }
      },
      btGateway: {
        index: 12,
        title: _LHCommonLocalizableString.default.common_setting_btGateway,
        testID: 'btGatewayItem',
        press: function press() {
          _miot.Host.ui.openBtGatewayPage();
        }
      },
      firmwareUpgrate: {
        index: 21,
        title: _resources.strings.firmwareUpgrade,
        testID: 'firmwareUpgrateItem',
        press: function press() {
          _miot.Host.ui.openDeviceUpgradePage();
        }
      },
      pairWithHomeKitiOS: {
        index: 24,
        title: _LHCommonLocalizableString.default.common_setting_homekit_device_add,
        testID: 'HomeKitiItem'
      },
      helpPage: {
        index: 30,
        title: _resources.strings.help,
        testID: 'helpPageItem',
        press: function press() {
          _miot.Host.ui.openHelpPage();
        }
      },
      addToDesktop: {
        title: _resources.strings.addToDesktop,
        testID: 'addToDesktopItem',
        press: function press() {
          _miot.Host.ui.openAddToDesktopPage();
        }
      },
      privacyLicense: {
        index: 33,
        title: _resources.strings.legalInfo,
        testID: 'privacyLicenseItem',
        press: function press() {}
      },
      deleteDevice: {
        title: _resources.strings.deleteDevice,
        testID: 'deleteDeviceItem',
        press: function press() {
          if (_miot.Device.parentDevice) {
            _LHCommonFunction.LHDialogUtils.MessageDialogShow({
              title: _LHCommonLocalizableString.default.common_setting_device_delete_confirm,
              message: _LHCommonLocalizableString.default.common_setting_device_delete_tip,
              confirm: _LHCommonLocalizableString.default.common_ok,
              onConfirm: function onConfirm() {
                _LHCommonFunction.LHMiServer.DeleteDevices([{
                  did: _miot.Device.deviceID,
                  pid: _miot.Device.type
                }], function () {
                  _miot.Package.exit();
                }, function () {
                  _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonLocalizableString.default.common_operation_fail);
                });
              },
              cancel: _LHCommonLocalizableString.default.common_cancel,
              onCancel: function onCancel() {}
            });
          } else {
            _miot.Host.ui.openDeleteDevice();
          }
        }
      },
      securitySetting: {
        title: _resources.strings.security,
        testID: 'securitySettingItem',
        press: function press() {
          _miot.Host.ui.openSecuritySetting();
        }
      },
      feedbackInput: {
        title: _resources.strings.feedback,
        testID: 'feedbackInputItem',
        press: function press() {
          _miot.Host.ui.openFeedbackInput();
        }
      },
      plugIn: {
        title: _LHCommonLocalizableString.default.common_setting_feature_plug_in,
        testID: 'pluginVersionItem',
        hideRightArrow: true,
        noTouchableHighlight: true,
        longPress: function longPress() {
          if (_LHCommonFunction.LHAppiumUtils.isWhiteList && _LHCommonFunction.LHAppiumUtils.isWhiteList() && navigaitonRef) {
            navigaitonRef.navigate('LHDebugPage');
          }
        }
      },
      voiceAuth: {
        index: 15,
        title: _resources.strings.voiceAuth,
        testID: 'voiceAuthItem',
        press: function press() {
          _miot.Host.ui.openVoiceCtrlDeviceAuthPage();
        }
      },
      battery: {
        title: _LHCommonLocalizableString.default.lumi_sensor_setting_battery
      },
      networkInfo: {
        title: _resources.strings.networkInfo,
        testID: 'networkInfoItem',
        press: function press() {
          _miot.Host.ui.openDeviceNetworkInfoPage();
        }
      }
    };
    return allItems[type] && (0, _extends2.default)({}, allItems[type], extendParams) || null;
  }

  var LHSettingItem = function () {
    function LHSettingItem() {
      (0, _classCallCheck2.default)(this, LHSettingItem);
    }

    (0, _createClass2.default)(LHSettingItem, null, [{
      key: "getSettingItem",
      value: function getSettingItem(type, extendParams) {
        return _getSettingItem(type, extendParams);
      }
    }, {
      key: "updateNavigation",
      value: function updateNavigation(navi) {
        navigaitonRef = navi;
      }
    }]);
    return LHSettingItem;
  }();

  exports.default = LHSettingItem;

  LHSettingItem.plugInItem = function (plugIn) {
    return _getSettingItem('plugIn', {
      rightDescription: plugIn
    });
  };

  LHSettingItem.batteryItem = function (navigation, isBatteryLow, batteryIcon) {
    return _getSettingItem('battery', {
      title: _LHCommonLocalizableString.default.common_lumi_sensor_setting_battery,
      rightDescription: isBatteryLow ? _LHCommonLocalizableString.default.common_voice_low : _LHCommonLocalizableString.default.common_lumi_sensor_setting_battery_normal,
      hideRightArrow: !isBatteryLow,
      noTouchableHighlight: !isBatteryLow,
      testID: 'batteryLowItem',
      press: function press() {
        if (!isBatteryLow) {
          return;
        }

        navigation.navigate('LHBatteryPushPage', {
          batteryIcon: batteryIcon
        });
      }
    });
  };

  LHSettingItem.deviceNameItem = function (deviceName) {
    return _getSettingItem('deviceName', {
      rightDescription: deviceName
    });
  };

  LHSettingItem.GetPrivacyLicenseItem = function (policyResource) {
    var policyLicenseUrl = _LHCommonFunction.LHPolicyLicenseUtils.GexPolicyLicenseUrl(policyResource, _LHCommonFunction.LHAuthorizationUtils.PolicyCode.languageCode, _LHCommonFunction.LHAuthorizationUtils.PolicyCode.serverCode, _LHCommonFunction.LHAuthorizationUtils.PolicyCode.countryCode);

    console.log('LHSettingItem GetPrivacyLicenseItem', _LHCommonFunction.LHAuthorizationUtils.PolicyCode.languageCode, policyLicenseUrl.licenseUrl);
    return _getSettingItem('privacyLicense', {
      press: function press() {
        _miot.Host.ui.privacyAndProtocolReview(_LHCommonLocalizableString.default.common_setting_user_agreement, policyLicenseUrl.licenseUrl, _LHCommonLocalizableString.default.common_setting_privacy_policy, policyLicenseUrl.policyUrl);
      }
    });
  };

  LHSettingItem.GetMoreSettingItem = function (navigation, showDeviceTimeZone, syncDeviceTimeZoneToDevice) {
    return {
      index: 27,
      title: _resources.strings.more,
      testID: 'moreSettingItem',
      press: function press() {
        navigation.navigate('LHMoreSettingPage', {
          showDeviceTimeZone: showDeviceTimeZone,
          syncDeviceTimeZoneToDevice: syncDeviceTimeZoneToDevice
        });
      }
    };
  };

  LHSettingItem.GetBleGatewayMeshItem = function (navigation, switchColor) {
    return {
      index: 13,
      title: _LHCommonLocalizableString.default.common_setting_btGateway,
      testID: 'btGatewayItem',
      press: function press() {
        navigation.navigate('LHBleGatewayMeshPage', {
          switchColor: switchColor
        });
      }
    };
  };

  LHSettingItem.roomManagementItem = _getSettingItem('roomManagement');
  LHSettingItem.shareDeviceItem = _getSettingItem('shareDevice');
  LHSettingItem.deviceTimeZoneItem = _getSettingItem('deviceTimeZone');
  LHSettingItem.iftttAutoItem = _getSettingItem('iftttAuto');
  LHSettingItem.btGatewayItem = _getSettingItem('btGateway');
  LHSettingItem.btGatewayConnectedItem = _getSettingItem('btGatewayConnected');
  LHSettingItem.firmwareUpgrateItem = _getSettingItem('firmwareUpgrate');
  LHSettingItem.helpPageItem = _getSettingItem('helpPage');
  LHSettingItem.addToDesktopItem = _getSettingItem('addToDesktop');
  LHSettingItem.deleteDeviceItem = _getSettingItem('deleteDevice');
  LHSettingItem.securitySettingItem = _getSettingItem('securitySetting');
  LHSettingItem.feedbackInputItem = _getSettingItem('feedbackInput');
  LHSettingItem.voiceAuthItem = _getSettingItem('voiceAuth');
  LHSettingItem.switchSettingItem = _getSettingItem('switchSetting');
},10130,[14305,14320,14323,14344,10074,10077,10004,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _miot = _$$_REQUIRE(_dependencyMap[5]);

  var LHDialogUtils = function () {
    function LHDialogUtils() {
      (0, _classCallCheck2.default)(this, LHDialogUtils);
    }

    (0, _createClass2.default)(LHDialogUtils, null, [{
      key: "MessageDialogShow",
      value: function MessageDialogShow(config) {
        var data = (0, _extends2.default)({}, config);

        if (_miot.API_LEVEL >= 10022) {
          var getBtnData = function getBtnData(type, configData) {
            var result = {};

            if (type === 'confirm') {
              result.callback = configData.onConfirm;
              result.text = configData.confirm;
              result.style = (0, _extends2.default)({
                color: '#32BAC0'
              }, configData.confirmStyle || {});
            } else {
              result.callback = configData.onCancel;
              result.text = configData.cancel;
            }

            return result;
          };

          if (data.confirm && data.cancel && !data.buttons) {
            data.buttons = [getBtnData('cancel', data), getBtnData('confirm', data)];
          } else if (data.confirm && !data.buttons) {
            data.buttons = [getBtnData('confirm', data)];
          } else if (data.cancel && !data.buttons) {
            data.buttons = [getBtnData('cancel', data)];
          }
        }

        _reactNative.DeviceEventEmitter.emit('LHMessageDialog', (0, _extends2.default)({
          visible: true
        }, data));
      }
    }, {
      key: "MessageDialogHide",
      value: function MessageDialogHide() {
        _reactNative.DeviceEventEmitter.emit('LHMessageDialog', (0, _extends2.default)({
          visible: false
        }));
      }
    }, {
      key: "LoadingDialogShow",
      value: function LoadingDialogShow(config) {
        _reactNative.DeviceEventEmitter.emit('LHLoadingDialog', (0, _extends2.default)({
          visible: true
        }, config));
      }
    }, {
      key: "LoadingDialogHide",
      value: function LoadingDialogHide() {
        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
        setTimeout(function () {
          _reactNative.DeviceEventEmitter.emit('LHLoadingDialog', (0, _extends2.default)({
            visible: false
          }));
        }, delay);
      }
    }, {
      key: "InputDialogShow",
      value: function InputDialogShow(config) {
        console.warn('请使用ShowInputDialog替代该方法，使用新版的InputDialog');

        _reactNative.DeviceEventEmitter.emit('LHInputDialog', (0, _extends2.default)({
          visible: true
        }, config));
      }
    }, {
      key: "ShowInputDialog",
      value: function ShowInputDialog(config) {
        var data = (0, _extends2.default)({}, config);

        var getBtnData = function getBtnData(type, configData) {
          var result = {};

          if (type === 'confirm') {
            result.callback = configData.onConfirm;
            result.text = configData.confirm;
            result.style = (0, _extends2.default)({
              color: '#32BAC0'
            }, configData.confirmStyle || {});
          } else {
            result.callback = configData.onCancel;
            result.text = configData.cancel;
          }

          return result;
        };

        if (data.confirm && data.cancel && !data.buttons) {
          data.buttons = [getBtnData('cancel', data), getBtnData('confirm', data)];
        } else if (data.confirm && !data.buttons) {
          data.buttons = [getBtnData('confirm', data)];
        } else if (data.cancel && !data.buttons) {
          data.buttons = [getBtnData('cancel', data)];
        }

        _reactNative.DeviceEventEmitter.emit('LHNewInputDialog', (0, _extends2.default)({
          visible: true
        }, data));
      }
    }, {
      key: "HideInputDialog",
      value: function HideInputDialog() {
        _reactNative.DeviceEventEmitter.emit('LHNewInputDialog', (0, _extends2.default)({
          visible: false
        }));
      }
    }, {
      key: "ShowSingleChoseDialog",
      value: function ShowSingleChoseDialog(config) {
        _reactNative.DeviceEventEmitter.emit('SingleChoseDialog', (0, _extends2.default)({
          visible: true
        }, config));
      }
    }, {
      key: "HideSingleChoseDialog",
      value: function HideSingleChoseDialog() {
        _reactNative.DeviceEventEmitter.emit('SingleChoseDialog', (0, _extends2.default)({
          visible: false
        }));
      }
    }, {
      key: "showConfirmDialog",
      value: function showConfirmDialog(config) {
        _reactNative.DeviceEventEmitter.emit('LHConfirmDialog', (0, _extends2.default)({
          visible: true
        }, config));
      }
    }, {
      key: "hideConfirmDialog",
      value: function hideConfirmDialog() {
        _reactNative.DeviceEventEmitter.emit('LHConfirmDialog', (0, _extends2.default)({
          visible: false
        }));
      }
    }, {
      key: "showCustomLoadingDialog",
      value: function showCustomLoadingDialog(config) {
        _reactNative.DeviceEventEmitter.emit('CustomLoadingDialog', (0, _extends2.default)({
          visible: true
        }, config));
      }
    }, {
      key: "hideCustomLoadingDialog",
      value: function hideCustomLoadingDialog() {
        _reactNative.DeviceEventEmitter.emit('CustomLoadingDialog', (0, _extends2.default)({
          visible: false
        }));
      }
    }, {
      key: "showCustomSingleChoseDialog",
      value: function showCustomSingleChoseDialog(config) {
        _reactNative.DeviceEventEmitter.emit('CustomSingleChose', (0, _extends2.default)({
          visible: true
        }, config));
      }
    }, {
      key: "hideCustomSingleChoseDialog",
      value: function hideCustomSingleChoseDialog() {
        _reactNative.DeviceEventEmitter.emit('CustomSingleChose', (0, _extends2.default)({
          visible: false
        }));
      }
    }]);
    return LHDialogUtils;
  }();

  exports.default = LHDialogUtils;
},10133,[14305,14344,14320,14323,10033,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[4]);

  var LanguageArray = {
    cn: 'zh',
    pl: 'pl',
    gr: 'el',
    de: 'de',
    pt: 'pt',
    ru: 'ru',
    id: 'id',
    vn: 'vi',
    th: 'th',
    ua: 'uk',
    by: 'be',
    ae: 'ar',
    eg: 'ar',
    il: 'he',
    tr: 'tr',
    ma: 'ar',
    es: 'es',
    tw: 'tw',
    hk: 'hk',
    it: 'it',
    fr: 'fr',
    sg: 'sg',
    us: 'en',
    kr: 'ko',
    nl: 'nl',
    cz: 'cz',
    ro: 'ro',
    sk: 'sk',
    at: 'de',
    br: 'pt_br',
    cl: 'es_la',
    pe: 'es_la',
    ar: 'es_la',
    mx: 'es_la',
    pa: 'es_la',
    co: 'es_la',
    iq: 'ar',
    om: 'ar',
    qa: 'ar',
    sa: 'ar',
    za: 'sg',
    nz: 'sg',
    au: 'sg',
    ph: 'sg',
    my: 'ms',
    be: 'belg',
    ch: 'ch',
    bh: 'ar',
    kw: 'ar',
    lu: 'lu',
    mm: 'my',
    jp: 'ja',
    bg: 'bg',
    dk: 'da',
    fi: 'fi',
    no: 'no',
    se: 'sv',
    hu: 'hu',
    gb: 'en'
  };
  var EU_GDPR = ['gb', 'de', 'es', 'it', 'fr', 'pl', 'ro', 'bg', 'gr', 'fi', 'se', 'dk', 'lt', 'ee', 'lv', 'pt', 'cz', 'hu', 'sk', 'si', 'hr', 'ie', 'nl', 'at', 'be', 'lu', 'cy', 'mt', 'no', 'is', 'li', 'ch', 'ua', 'by'];
  var SeverEn = {
    cn: 'en',
    sg: 'us_en',
    ru: 'us_en',
    us: 'us_en',
    de: 'eu_en',
    in: 'us_en'
  };
  var MijiaHTServer = {
    de: 'en',
    us: 'en',
    sg: 'en',
    ru: 'en',
    cn: 'zhen',
    in: 'en'
  };
  var NoShowModel = ['lumi.acpartner.v1', 'lumi.acpartner.v2', 'lumi.acpartner.v3', 'lumi.camera.aq1', 'lumi.camera.gwagl01', 'lumi.gateway.v2', 'lumi.gateway.v3'];
  var MijiaHkGateway = 'lumi.gateway.mihk01';
  var MijiaHt = 'lumi.sensor_ht.v1';
  var MijiaTwHk = ['lumi.gateway.mitw01', 'lumi.gateway.mihk01'];
  var Aqara3Switch = ['lumi.switch.l3acn3', 'lumi.switch.n3acn3'];
  var MijiaEuModel = 'lumi.gateway.mieu01';
  var MijiaUkModel = 'lumi.gateway.lmuk01';
  var MijiaEuPrefix = 'mieu01_';
  var MijiaUkPrefix = 'lmuk01_';
  var MijiaHkSmoke = 'lumi.sensor_smoke.v1';
  var PlugEuModel = 'lumi.plug.mmeu01';
  var OpLightModel = ['lumi.light.cwopcn01', 'lumi.light.cwopcn02', 'lumi.light.cwopcn03'];
  var WirelessSwitchModel = ['lumi.remote.b286opcn01', 'lumi.remote.b486opcn01', 'lumi.remote.b686opcn01'];
  var SubDeviceModel = ['lumi.remote.b1acn02', 'lumi.flood.agl02', 'lumi.motion.agl02', 'lumi.sensor_ht.agl02', 'lumi.magnet.agl02', 'lumi.sen_ill.agl01', 'lumi.remote.b186acn03', 'lumi.remote.b286acn03', 'lumi.switch.b2lacn01', 'lumi.switch.b1lacn01', 'lumi.switch.b2nacn01', 'lumi.switch.b1nacn01', 'lumi.curtain.hagl07', 'lumi.sen_ill.mgl01', 'lumi.gateway.mgl03', 'lumi.light.cbacn1', 'lumi.switch.n1acn1', 'lumi.switch.n2acn1', 'lumi.switch.n3acn1', 'lumi.light.rgbac1', 'lumi.sensor_motion.v2', 'lumi.sensor_magnet.v2', 'lumi.plug.mitw01', 'lumi.switch.n0acn2'];

  var LHPolicyLicenseUtils = function () {
    function LHPolicyLicenseUtils() {
      (0, _classCallCheck2.default)(this, LHPolicyLicenseUtils);
    }

    (0, _createClass2.default)(LHPolicyLicenseUtils, null, [{
      key: "GexPolicyLicenseUrl",
      value: function GexPolicyLicenseUrl(urls, languageCode, serveCode, countryCode) {
        var defaultEn = LHPolicyLicenseUtils.GetDefaultEn(urls, serveCode, countryCode);
        return {
          licenseUrl: urls['licenseUrl_' + languageCode] || defaultEn.dafaultLicenseUrl,
          policyUrl: urls['policyUrl_' + languageCode] || defaultEn.defaultPolicyUrl
        };
      }
    }]);
    return LHPolicyLicenseUtils;
  }();

  exports.default = LHPolicyLicenseUtils;

  LHPolicyLicenseUtils.NotShowPolicy = function (model) {
    return NoShowModel.indexOf(model) > -1;
  };

  LHPolicyLicenseUtils.checkOwnPolicySubDevice = function () {
    return SubDeviceModel.indexOf(_miot.Device.model) > -1;
  };

  LHPolicyLicenseUtils.checkMieu01 = function () {
    return _miot.Device.model === MijiaEuModel || _miot.Device.parentDevice && _miot.Device.parentDevice.model === MijiaEuModel;
  };

  LHPolicyLicenseUtils.checkLmuk01 = function () {
    return _miot.Device.model === MijiaUkModel || _miot.Device.parentDevice && _miot.Device.parentDevice.model === MijiaUkModel;
  };

  LHPolicyLicenseUtils.checkMitw01 = function () {
    return MijiaTwHk.indexOf(_miot.Device.model) > -1 || _miot.Device.parentDevice && MijiaTwHk.indexOf(_miot.Device.parentDevice.model) > -1;
  };

  LHPolicyLicenseUtils.checkMihktw = function (index) {
    return _miot.Device.model === MijiaTwHk[index] || _miot.Device.parentDevice && _miot.Device.parentDevice.model === MijiaTwHk[index];
  };

  LHPolicyLicenseUtils.checkHkSmoke = function () {
    return _miot.Device.model === MijiaHkSmoke && _miot.Device.parentDevice && _miot.Device.parentDevice.model === MijiaHkGateway;
  };

  LHPolicyLicenseUtils.checkMijiaHT = function () {
    return _miot.Device.model === MijiaHt;
  };

  LHPolicyLicenseUtils.checkSwitch = function () {
    return Aqara3Switch.indexOf(_miot.Device.model) > -1;
  };

  LHPolicyLicenseUtils.checkOpLight = function () {
    return OpLightModel.indexOf(_miot.Device.model) > -1;
  };

  LHPolicyLicenseUtils.checkWirelessSwitch = function () {
    return WirelessSwitchModel.indexOf(_miot.Device.model) > -1;
  };

  LHPolicyLicenseUtils.getSwitchModelSuffix = function () {
    var model = _miot.Device.model;
    if (!model || model.indexOf('.') === -1 || model.split('.').length < 3) return '';
    return model.split('.')[2] ? model.split('.')[2] : '';
  };

  LHPolicyLicenseUtils.getSwitchModelMiddle = function () {
    var model = _miot.Device.model;
    if (!model || model.indexOf('.') === -1 || model.split('.').length < 3) return '';
    return model.split('.')[1] ? model.split('.')[1] : '';
  };

  LHPolicyLicenseUtils.getModelSuffix = function () {
    var model = _miot.Device.model;
    if (!model || model.indexOf('.') === -1 || model.split('.').length < 3) return '';
    var modelArr = model.split('.');
    return modelArr[1] + '_' + modelArr[2];
  };

  LHPolicyLicenseUtils.checkEuPlug = function () {
    return _miot.Device.model === PlugEuModel;
  };

  LHPolicyLicenseUtils.checkEUGDPRArea = function (serveCode, countryCode) {
    return serveCode === 'de' && EU_GDPR.indexOf(countryCode) > -1;
  };

  LHPolicyLicenseUtils.GetCountryLanguageCode = function (onSuccess) {
    _miot.Service.getServerName().then(function (res) {
      var serverCode = res.serverCode;
      var countryCode = res.countryCode;
      var mServerCode = serverCode.toLowerCase();
      var mCountryCode = countryCode.toLowerCase();

      if (LHPolicyLicenseUtils.checkWirelessSwitch() || LHPolicyLicenseUtils.checkOpLight()) {
        LHPolicyLicenseUtils.checkOpLightAndRemoteSwitchModel(mServerCode, mCountryCode, onSuccess);
        return;
      }

      if (LHPolicyLicenseUtils.checkOwnPolicySubDevice()) {
        LHPolicyLicenseUtils.checkSubDeviceModel(mServerCode, mCountryCode, onSuccess);
        return;
      }

      if (LHPolicyLicenseUtils.checkSwitch()) {
        LHPolicyLicenseUtils.checkSwitchModel(mServerCode, mCountryCode, onSuccess);
        return;
      }

      if (LHPolicyLicenseUtils.checkMijiaHT()) {
        LHPolicyLicenseUtils.checkMijiaHTModel(mServerCode, mCountryCode, onSuccess);
        return;
      }

      if (!LHPolicyLicenseUtils.checkEuPlug()) {
        if (LHPolicyLicenseUtils.checkMieu01()) {
          LHPolicyLicenseUtils.checkMieuModel(mServerCode, mCountryCode, onSuccess);
          return;
        }

        if (LHPolicyLicenseUtils.checkLmuk01()) {
          LHPolicyLicenseUtils.checkLmukModel(mServerCode, mCountryCode, onSuccess);
          return;
        }

        if (LHPolicyLicenseUtils.checkMitw01() && !LHPolicyLicenseUtils.checkHkSmoke()) {
          LHPolicyLicenseUtils.checkTwHkModel(mServerCode, mCountryCode, onSuccess);
          return;
        }
      }

      if (mServerCode === 'us' && mCountryCode === 'us') {
        onSuccess('us_en', mServerCode, mCountryCode);
        return;
      }

      if (mServerCode === 'de' && mCountryCode === 'gb') {
        onSuccess('eu_en', mServerCode, mCountryCode);
        return;
      }

      if (_LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage() === 'en') {
        if (mCountryCode === 'kr') {
          onSuccess('ko_en', mServerCode, mCountryCode);
          return;
        }

        onSuccess(SeverEn[mServerCode] || 'en', mServerCode, mCountryCode);
        return;
      }

      onSuccess(LanguageArray[mCountryCode] || 'en', mServerCode, mCountryCode);
    });
  };

  LHPolicyLicenseUtils.checkSubDeviceModel = function (serverCode, countryCode, onSuccess) {
    var subDevicePrefix = LHPolicyLicenseUtils.getModelSuffix() + '_';

    var interfaceLanguage = _LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage();

    var IS_EU_GDPR = LHPolicyLicenseUtils.checkEUGDPRArea(serverCode, countryCode);

    if (serverCode === 'de' && countryCode === 'gb') {
      onSuccess(subDevicePrefix + 'gdpr_en', serverCode, countryCode);
      return;
    }

    if (interfaceLanguage === 'en') {
      if (countryCode === 'cn') {
        onSuccess(subDevicePrefix + 'zh_en', serverCode, countryCode);
        return;
      }

      if (countryCode === 'kr') {
        onSuccess(subDevicePrefix + 'ko_en', serverCode, countryCode);
        return;
      }

      if (IS_EU_GDPR) {
        onSuccess(subDevicePrefix + 'gdpr_en', serverCode, countryCode);
      } else {
        onSuccess(subDevicePrefix + 'en', serverCode, countryCode);
      }

      return;
    }

    onSuccess(subDevicePrefix + LanguageArray[countryCode] || subDevicePrefix + 'en', serverCode, countryCode);
  };

  LHPolicyLicenseUtils.checkOpLightAndRemoteSwitchModel = function (serverCode, countryCode, onSuccess) {
    var opLightPrefix = LHPolicyLicenseUtils.getSwitchModelSuffix() + '_';

    if (_LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage() === 'en') {
      onSuccess(opLightPrefix + 'en', serverCode, countryCode);
      return;
    }

    onSuccess(opLightPrefix + LanguageArray[countryCode] || opLightPrefix + 'en', serverCode, countryCode);
  };

  LHPolicyLicenseUtils.checkSwitchModel = function (serverCode, countryCode, onSuccess) {
    var switchPrefix = LHPolicyLicenseUtils.getSwitchModelSuffix() + '_';

    if (serverCode === 'us' && countryCode === 'us') {
      onSuccess(switchPrefix + 'en', serverCode, countryCode);
      return;
    }

    if (serverCode === 'de' && countryCode === 'gb') {
      onSuccess(switchPrefix + 'en', serverCode, countryCode);
      return;
    }

    if (_LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage() === 'en') {
      onSuccess(switchPrefix + 'en', serverCode, countryCode);
      return;
    }

    onSuccess(switchPrefix + LanguageArray[countryCode] || switchPrefix + 'en', serverCode, countryCode);
  };

  LHPolicyLicenseUtils.checkMijiaHTModel = function (serverCode, countryCode, onSuccess) {
    var interfaceLanguage = _LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage();

    var modelMiddle = LHPolicyLicenseUtils.getSwitchModelMiddle() + '_';
    var IS_EU_GDPR = LHPolicyLicenseUtils.checkEUGDPRArea(serverCode, countryCode);
    var commonEnArray = ['ph', 'sg', 'au', 'nz'];

    if (commonEnArray.indexOf(countryCode) > -1) {
      onSuccess(modelMiddle + 'en', serverCode, countryCode);
      return;
    }

    if (serverCode === 'de' && countryCode === 'gb') {
      onSuccess(modelMiddle + 'gdpr_en', serverCode, countryCode);
      return;
    }

    if (interfaceLanguage === 'en') {
      if (countryCode === 'kr') {
        onSuccess(modelMiddle + 'ko_en', serverCode, countryCode);
        return;
      }

      if (IS_EU_GDPR) {
        onSuccess(modelMiddle + 'gdpr_en', serverCode, countryCode);
      } else {
        onSuccess(modelMiddle + MijiaHTServer[serverCode], serverCode, countryCode);
      }

      return;
    }

    onSuccess(modelMiddle + LanguageArray[countryCode] || (IS_EU_GDPR ? modelMiddle + 'gdpr_en' : modelMiddle + MijiaHTServer[serverCode]), serverCode, countryCode);
  };

  LHPolicyLicenseUtils.checkMieuModel = function (serverCode, countryCode, onSuccess) {
    var IS_EU_GDPR = LHPolicyLicenseUtils.checkEUGDPRArea(serverCode, countryCode);

    if (serverCode === 'us' && countryCode === 'us') {
      onSuccess("mieu01_us_en", serverCode, countryCode);
      return;
    }

    if (serverCode === 'de' && countryCode === 'gb') {
      onSuccess("mieu01_eu_en", serverCode, countryCode);
      return;
    }

    if (_LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage() === 'en') {
      if (IS_EU_GDPR) {
        onSuccess("mieu01_eu_en", serverCode, countryCode);
        return;
      }

      onSuccess("mieu01_us_en", serverCode, countryCode);
      return;
    }

    onSuccess(MijiaEuPrefix + LanguageArray[countryCode] || (IS_EU_GDPR ? "mieu01_eu_en" : "mieu01_us_en"), serverCode, countryCode);
  };

  LHPolicyLicenseUtils.checkLmukModel = function (serverCode, countryCode, onSuccess) {
    var IS_EU_GDPR = LHPolicyLicenseUtils.checkEUGDPRArea(serverCode, countryCode);

    if (serverCode === 'us' && countryCode === 'us') {
      onSuccess("lmuk01_en", serverCode, countryCode);
      return;
    }

    if (serverCode === 'de' && countryCode === 'gb') {
      onSuccess("lmuk01_eu_en", serverCode, countryCode);
      return;
    }

    if (IS_EU_GDPR) {
      onSuccess("lmuk01_eu_en", serverCode, countryCode);
      return;
    }

    if (serverCode === 'sg' && countryCode === 'sg') {
      onSuccess("lmuk01_en", serverCode, countryCode);
      return;
    }

    if (_LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage() === 'en') {
      onSuccess("lmuk01_en", serverCode, countryCode);
      return;
    }

    onSuccess(MijiaUkPrefix + LanguageArray[countryCode] || "lmuk01_en", serverCode, countryCode);
  };

  LHPolicyLicenseUtils.checkTwHkModel = function (serverCode, countryCode, onSuccess) {
    var interfaceLanguage = _LHCommonFunction.LHCommonLocalizableString.getInterfaceLanguage();

    if (LHPolicyLicenseUtils.checkMihktw(1) && countryCode === 'hk') {
      onSuccess(interfaceLanguage === 'en' ? 'mi_hk_en' : 'mi_hk', serverCode, countryCode);
      return;
    }

    if (LHPolicyLicenseUtils.checkMihktw(0) && countryCode === 'tw') {
      onSuccess(interfaceLanguage === 'en' ? 'mi_tw_en' : 'mi_tw', serverCode, countryCode);
      return;
    }

    onSuccess(LHPolicyLicenseUtils.checkMihktw(1) ? 'mi_hk_en' : 'mi_tw_en', serverCode, countryCode);
  };

  LHPolicyLicenseUtils.GetDefaultEn = function (urls, serveCode, countryCode) {
    var IS_EU_GDPR = LHPolicyLicenseUtils.checkEUGDPRArea(serveCode, countryCode);

    if (LHPolicyLicenseUtils.checkOwnPolicySubDevice()) {
      var subDevicePrefix = LHPolicyLicenseUtils.getModelSuffix() + '_';
      var prifixEn = IS_EU_GDPR ? subDevicePrefix + 'gdpr_en' : subDevicePrefix + 'en';
      return {
        dafaultLicenseUrl: urls['licenseUrl_' + prifixEn],
        defaultPolicyUrl: urls['policyUrl_' + prifixEn]
      };
    }

    if (LHPolicyLicenseUtils.checkMijiaHT()) {
      var modelMiddle = LHPolicyLicenseUtils.getSwitchModelMiddle() + '_';

      var _prifixEn = IS_EU_GDPR ? modelMiddle + 'gdpr_en' : modelMiddle + MijiaHTServer[serveCode];

      return {
        dafaultLicenseUrl: urls['licenseUrl_' + _prifixEn],
        defaultPolicyUrl: urls['policyUrl_' + _prifixEn]
      };
    }

    if (LHPolicyLicenseUtils.checkSwitch() || LHPolicyLicenseUtils.checkWirelessSwitch() || LHPolicyLicenseUtils.checkOpLight()) {
      var commonPrefix = LHPolicyLicenseUtils.getSwitchModelSuffix() + '_';
      return {
        dafaultLicenseUrl: urls['licenseUrl_' + commonPrefix + 'en'],
        defaultPolicyUrl: urls['policyUrl_' + commonPrefix + 'en']
      };
    }

    if (!LHPolicyLicenseUtils.checkEuPlug()) {
      if (LHPolicyLicenseUtils.checkMieu01()) {
        var _prifixEn2 = IS_EU_GDPR ? "mieu01_eu_en" : "mieu01_us_en";

        return {
          dafaultLicenseUrl: urls['licenseUrl_' + _prifixEn2],
          defaultPolicyUrl: urls['policyUrl_' + _prifixEn2]
        };
      }

      if (LHPolicyLicenseUtils.checkLmuk01()) {
        return {
          dafaultLicenseUrl: urls.licenseUrl_lmuk01_en,
          defaultPolicyUrl: urls.policyUrl_lmuk01_en
        };
      }

      if (LHPolicyLicenseUtils.checkMitw01()) {
        var _prifixEn3 = _miot.Device.model === MijiaTwHk[1] ? 'mi_hk_en' : 'mi_tw_en';

        return {
          dafaultLicenseUrl: urls['licenseUrl_' + _prifixEn3],
          defaultPolicyUrl: urls['policyUrl_' + _prifixEn3]
        };
      }
    }

    return {
      dafaultLicenseUrl: urls.licenseUrl_en,
      defaultPolicyUrl: urls.policyUrl_en
    };
  };
},10136,[14305,14320,14323,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNativeRootToast = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHUiUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var Instance = null;

  var LHToastUtils = function () {
    function LHToastUtils() {
      (0, _classCallCheck2.default)(this, LHToastUtils);
    }

    (0, _createClass2.default)(LHToastUtils, null, [{
      key: "showShortToast",
      value: function showShortToast(message, options) {
        this.hide();
        Instance = _reactNativeRootToast.default.show(message, (0, _extends2.default)({
          visible: true,
          duration: _reactNativeRootToast.default.durations.SHORT,
          position: _reactNativeRootToast.default.positions.CENTER,
          textStyle: {
            fontFamily: _LHUiUtils.default.DefaultFontFamily
          }
        }, options));
      }
    }, {
      key: "hide",
      value: function hide() {
        var toast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Instance;
        if (toast) _reactNativeRootToast.default.hide(toast);
      }
    }, {
      key: "showLongToast",
      value: function showLongToast(message, options) {
        this.hide();
        Instance = _reactNativeRootToast.default.show(message, (0, _extends2.default)({
          visible: true,
          duration: _reactNativeRootToast.default.durations.LONG,
          position: _reactNativeRootToast.default.positions.CENTER,
          textStyle: {
            fontFamily: _LHUiUtils.default.DefaultFontFamily
          }
        }, options));
      }
    }]);
    return LHToastUtils;
  }();

  exports.default = LHToastUtils;
},10139,[14305,14344,14320,14323,10142,10067]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;

  var _Toast = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  Object.keys(_Toast).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Toast[key];
      }
    });
  });
  var _default = _Toast.default;
  exports.default = _default;
},10142,[14308,10145]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Manager", {
    enumerable: true,
    get: function get() {
      return _reactNativeRootSiblings.default;
    }
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNativeRootSiblings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ToastContainer = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var Toast = function (_Component) {
    (0, _inherits2.default)(Toast, _Component);

    function Toast() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Toast);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Toast)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._toast = null;

      _this.componentWillMount = function () {
        _this._toast = new _reactNativeRootSiblings.default(_react.default.createElement(_ToastContainer.default, (0, _extends2.default)({}, _this.props, {
          duration: 0
        })));
      };

      _this.componentWillReceiveProps = function (nextProps) {
        _this._toast.update(_react.default.createElement(_ToastContainer.default, (0, _extends2.default)({}, nextProps, {
          duration: 0
        })));
      };

      _this.componentWillUnmount = function () {
        _this._toast.destroy();
      };

      return _this;
    }

    (0, _createClass2.default)(Toast, [{
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return Toast;
  }(_react.Component);

  Toast.displayName = 'Toast';
  Toast.propTypes = _ToastContainer.default.propTypes;
  Toast.positions = _ToastContainer.positions;
  Toast.durations = _ToastContainer.durations;

  Toast.show = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      position: _ToastContainer.positions.BOTTOM,
      duration: _ToastContainer.durations.SHORT
    };
    return new _reactNativeRootSiblings.default(_react.default.createElement(_ToastContainer.default, (0, _extends2.default)({}, options, {
      visible: true
    }), message));
  };

  Toast.hide = function (toast) {
    if (toast instanceof _reactNativeRootSiblings.default) {
      toast.destroy();
    } else {
      console.warn("Toast.hide expected a `RootSiblings` instance as argument.\nBut got `" + typeof toast + "` instead.");
    }
  };

  var _default = Toast;
  exports.default = _default;
},10145,[14308,14305,14344,14320,14323,14371,14377,14386,10297,10033,10148,10154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _staticContainer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });

  var Provider = function (_Component) {
    (0, _inherits2.default)(Provider, _Component);

    function Provider() {
      (0, _classCallCheck2.default)(this, Provider);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Provider).apply(this, arguments));
    }

    (0, _createClass2.default)(Provider, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          store: this.props.store
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return Provider;
  }(_react.Component);

  Provider.childContextTypes = {
    store: _propTypes.default.shape({
      subscribe: _propTypes.default.func.isRequired,
      dispatch: _propTypes.default.func.isRequired,
      getState: _propTypes.default.func.isRequired
    })
  };

  function RootSiblingsWrapper(props) {
    return _react.default.createElement(_reactNative.View, {
      style: styles.container,
      pointerEvents: "box-none"
    }, props.children, _react.default.createElement(RootSiblings, null));
  }

  ;

  if (!global.__rootSiblingsInjected) {
    _reactNative.AppRegistry.setWrapperComponentProvider(function () {
      return RootSiblingsWrapper;
    });

    global.__rootSiblingsInjected = true;
  }

  var uuid = 0;
  var triggers = [];

  var RootSiblings = function (_Component2) {
    (0, _inherits2.default)(RootSiblings, _Component2);

    function RootSiblings(props) {
      var _this;

      (0, _classCallCheck2.default)(this, RootSiblings);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RootSiblings).call(this, props));
      _this._updatedSiblings = {};
      _this._siblings = {};
      _this._stores = {};

      _this._update = function (id, element, callback, store) {
        var siblings = (0, _objectSpread2.default)({}, _this._siblings);
        var stores = (0, _objectSpread2.default)({}, _this._stores);

        if (siblings[id] && !element) {
          delete siblings[id];
          delete stores[id];
        } else if (element) {
          siblings[id] = element;
          stores[id] = store;
        }

        _this._updatedSiblings[id] = true;
        _this._siblings = siblings;
        _this._stores = stores;

        _this.forceUpdate(callback);
      };

      _this._siblings = {};
      triggers.push(_this._update);
      return _this;
    }

    (0, _createClass2.default)(RootSiblings, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        triggers.splice(triggers.indexOf(this._update), 1);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var siblings = this._siblings;
        var stores = this._stores;
        var elements = [];
        Object.keys(siblings).forEach(function (key) {
          var element = siblings[key];

          if (element) {
            var sibling = _react.default.createElement(_staticContainer.default, {
              key: "root-sibling-" + key,
              shouldUpdate: !!_this2._updatedSiblings[key]
            }, element);

            var store = stores[key];

            if (store) {
              elements.push(_react.default.createElement(Provider, {
                store: store,
                key: "root-sibling-" + key + "-provider"
              }, sibling));
            } else {
              elements.push(sibling);
            }
          }
        });
        this._updatedSiblings = {};
        return elements;
      }
    }]);
    return RootSiblings;
  }(_react.Component);

  var RootSiblingManager = function RootSiblingManager(element, callback, store) {
    (0, _classCallCheck2.default)(this, RootSiblingManager);
    var id = uuid++;

    function update(element, callback, store) {
      triggers.forEach(function (trigger) {
        trigger(id, element, callback, store);
      });
    }

    function destroy(callback) {
      triggers.forEach(function (trigger) {
        trigger(id, null, callback);
      });
    }

    update(element, callback, store);
    this.update = update;
    this.destroy = destroy;
  };

  exports.default = RootSiblingManager;
},10148,[14308,14305,14314,14320,14323,14371,14377,14386,10297,10033,10151,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _$$_REQUIRE(_dependencyMap[6]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        var child = this.props.children;
        return child === null || child === false ? null : _react.Children.only(child);
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.propTypes = {
    shouldUpdate: _propTypes.default.bool.isRequired
  };
},10151,[14305,14320,14323,14371,14377,14386,10297,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.durations = exports.positions = exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var TOAST_MAX_WIDTH = 0.8;
  var TOAST_ANIMATION_DURATION = 200;
  var positions = {
    TOP: 20,
    BOTTOM: -20,
    CENTER: 0
  };
  exports.positions = positions;
  var durations = {
    LONG: 3500,
    SHORT: 2000
  };
  exports.durations = durations;

  var styles = _reactNative.StyleSheet.create({
    defaultStyle: {
      position: 'absolute',
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center'
    },
    containerStyle: {
      padding: 10,
      backgroundColor: '#000',
      opacity: 0.8,
      borderRadius: 5
    },
    shadowStyle: {
      shadowColor: '#000',
      shadowOffset: {
        width: 4,
        height: 4
      },
      shadowOpacity: 0.8,
      shadowRadius: 6,
      elevation: 10
    },
    textStyle: {
      fontSize: 16,
      color: '#fff',
      textAlign: 'center'
    }
  });

  var ToastContainer = function (_Component) {
    (0, _inherits2.default)(ToastContainer, _Component);

    function ToastContainer() {
      var _this;

      (0, _classCallCheck2.default)(this, ToastContainer);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ToastContainer).apply(this, arguments));

      _this.componentDidMount = function () {
        if (_this.state.visible) {
          _this._showTimeout = setTimeout(function () {
            return _this._show();
          }, _this.props.delay);
        }
      };

      _this.componentWillReceiveProps = function (nextProps) {
        if (nextProps.visible !== _this.props.visible) {
          if (nextProps.visible) {
            clearTimeout(_this._showTimeout);
            clearTimeout(_this._hideTimeout);
            _this._showTimeout = setTimeout(function () {
              return _this._show();
            }, _this.props.delay);
          } else {
            _this._hide();
          }

          _this.setState({
            visible: nextProps.visible
          });
        }
      };

      _this.componentWillUnmount = function () {
        _reactNative.Dimensions.removeEventListener('change', _this._windowChanged);

        _reactNative.Keyboard.removeListener('keyboardDidChangeFrame', _this._keyboardDidChangeFrame);

        _this._hide();
      };

      _this._animating = false;
      _this._root = null;
      _this._hideTimeout = null;
      _this._showTimeout = null;
      _this._keyboardHeight = 0;

      _this._windowChanged = function (_ref) {
        var window = _ref.window;

        _this.setState({
          windowWidth: window.width,
          windowHeight: window.height
        });
      };

      _this._keyboardDidChangeFrame = function (_ref2) {
        var endCoordinates = _ref2.endCoordinates;

        _this.setState({
          keyboardScreenY: endCoordinates.screenY
        });
      };

      _this._show = function () {
        clearTimeout(_this._showTimeout);

        if (!_this._animating) {
          clearTimeout(_this._hideTimeout);
          _this._animating = true;

          _this._root.setNativeProps({
            pointerEvents: 'auto'
          });

          _this.props.onShow && _this.props.onShow(_this.props.siblingManager);

          _reactNative.Animated.timing(_this.state.opacity, {
            toValue: _this.props.opacity,
            duration: _this.props.animation ? TOAST_ANIMATION_DURATION : 0,
            easing: _reactNative.Easing.out(_reactNative.Easing.ease)
          }).start(function (_ref3) {
            var finished = _ref3.finished;

            if (finished) {
              _this._animating = !finished;
              _this.props.onShown && _this.props.onShown(_this.props.siblingManager);

              if (_this.props.duration > 0) {
                _this._hideTimeout = setTimeout(function () {
                  return _this._hide();
                }, _this.props.duration);
              }
            }
          });
        }
      };

      _this._hide = function () {
        clearTimeout(_this._showTimeout);
        clearTimeout(_this._hideTimeout);

        if (!_this._animating) {
          _this._root.setNativeProps({
            pointerEvents: 'none'
          });

          _this.props.onHide && _this.props.onHide(_this.props.siblingManager);

          _reactNative.Animated.timing(_this.state.opacity, {
            toValue: 0,
            duration: _this.props.animation ? TOAST_ANIMATION_DURATION : 0,
            easing: _reactNative.Easing.in(_reactNative.Easing.ease)
          }).start(function (_ref4) {
            var finished = _ref4.finished;

            if (finished) {
              _this._animating = false;
              _this.props.onHidden && _this.props.onHidden(_this.props.siblingManager);
            }
          });
        }
      };

      var _window = _reactNative.Dimensions.get('window');

      _this.state = {
        visible: _this.props.visible,
        opacity: new _reactNative.Animated.Value(0),
        windowWidth: _window.width,
        windowHeight: _window.height,
        keyboardScreenY: _window.height
      };
      return _this;
    }

    (0, _createClass2.default)(ToastContainer, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        _reactNative.Dimensions.addEventListener('change', this._windowChanged);

        _reactNative.Keyboard.addListener('keyboardDidChangeFrame', this._keyboardDidChangeFrame);
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate() {
        var _this$state = this.state,
            windowHeight = _this$state.windowHeight,
            keyboardScreenY = _this$state.keyboardScreenY;
        this._keyboardHeight = Math.max(windowHeight - keyboardScreenY, 0);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var windowWidth = this.state.windowWidth;
        var offset = props.position;
        var position = offset ? (0, _defineProperty2.default)({}, offset < 0 ? 'bottom' : 'top', offset < 0 ? this._keyboardHeight - offset : offset) : {
          top: 0,
          bottom: this._keyboardHeight
        };
        return this.state.visible || this._animating ? _react.default.createElement(_reactNative.View, {
          style: [styles.defaultStyle, position],
          pointerEvents: "box-none"
        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress() {
            typeof _this2.props.onPress === 'function' ? _this2.props.onPress() : null;
            _this2.props.hideOnPress ? _this2._hide() : null;
          }
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.containerStyle, {
            marginHorizontal: windowWidth * 0.09999999999999998
          }, props.containerStyle, props.backgroundColor && {
            backgroundColor: props.backgroundColor
          }, {
            opacity: this.state.opacity
          }, props.shadow && styles.shadowStyle, props.shadowColor && {
            shadowColor: props.shadowColor
          }],
          pointerEvents: "none",
          ref: function ref(ele) {
            return _this2._root = ele;
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.textStyle, props.textStyle, props.textColor && {
            color: props.textColor
          }]
        }, this.props.children)))) : null;
      }
    }]);
    return ToastContainer;
  }(_react.Component);

  ToastContainer.displayName = 'ToastContainer';
  ToastContainer.propTypes = (0, _objectSpread2.default)({}, _reactNative.ViewPropTypes, {
    containerStyle: _reactNative.ViewPropTypes.style,
    duration: _propTypes.default.number,
    visible: _propTypes.default.bool,
    position: _propTypes.default.number,
    animation: _propTypes.default.bool,
    shadow: _propTypes.default.bool,
    backgroundColor: _propTypes.default.string,
    opacity: _propTypes.default.number,
    shadowColor: _propTypes.default.string,
    textColor: _propTypes.default.string,
    textStyle: _reactNative.Text.propTypes.style,
    delay: _propTypes.default.number,
    hideOnPress: _propTypes.default.bool,
    onPress: _propTypes.default.func,
    onHide: _propTypes.default.func,
    onHidden: _propTypes.default.func,
    onShow: _propTypes.default.func,
    onShown: _propTypes.default.func
  });
  ToastContainer.defaultProps = {
    visible: false,
    duration: durations.SHORT,
    animation: true,
    shadow: true,
    position: positions.BOTTOM,
    opacity: 0.8,
    delay: 0,
    hideOnPress: true
  };
  var _default = ToastContainer;
  exports.default = _default;
},10154,[14308,14305,14314,14317,14320,14323,14371,14377,14386,10297,10318,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  function EVERYDAY() {
    return [0, 1, 2, 3, 4, 5, 6];
  }

  function WORKDAY() {
    return [1, 2, 3, 4, 5];
  }

  function WEEKDAY() {
    return [0, 6];
  }

  function DEFAULT_TIME_SPAN() {
    return {
      from: {
        hour: 0,
        min: 0
      },
      to: {
        hour: 0,
        min: 0
      },
      wday: EVERYDAY()
    };
  }

  function getTimeSpan(fromTime, toTime) {
    var timeSpan;

    if (fromTime instanceof Array && fromTime.length === 2 && toTime instanceof Array && toTime.length === 2) {
      timeSpan = {
        from: {
          hour: Number(fromTime[0]),
          min: Number(fromTime[1])
        },
        to: {
          hour: Number(toTime[0]),
          min: Number(toTime[1])
        },
        wday: EVERYDAY()
      };
    } else {
      timeSpan = DEFAULT_TIME_SPAN();
    }

    return timeSpan;
  }

  function gettimerArrayStr(timeSpan) {
    var timerArray = ['00:00', '00:00', false];

    if (timeSpan !== null && timeSpan !== undefined) {
      var from = timeSpan.from,
          to = timeSpan.to;
      var fromHour = from.hour < 10 ? '0' + from.hour : from.hour;
      var fromMin = from.min < 10 ? '0' + from.min : from.min;
      var toHour = to.hour < 10 ? '0' + to.hour : to.hour;
      var toMin = to.min < 10 ? '0' + to.min : to.min;
      timerArray[0] = fromHour + ':' + fromMin;
      timerArray[1] = toHour + ':' + toMin;

      if (from.hour * 60 + from.min > to.hour * 60 + to.min) {
        timerArray[2] = true;
      }
    }

    return timerArray;
  }

  function getLocalDate(east8date) {
    var targetTimezone = -8;
    var dif = new Date().getTimezoneOffset();
    var localTime = east8date.getTime() + -28800000 - dif * 60 * 1000;
    return new Date(localTime);
  }

  function getEast8Date(date) {
    var targetTimezone = -8;
    var dif = new Date().getTimezoneOffset();
    var east8time = date.getTime() + dif * 60 * 1000 - -28800000;
    return new Date(east8time);
  }

  function convertWday(timespan, originDate, zoneDate) {
    var unitDay = 86400000;
    var dif = zoneDate.getTime() / unitDay - originDate.getTime() / unitDay;
    dif = parseInt(dif, 10);

    if (dif === 0) {
      return timespan.wday;
    } else if (dif > 0) {
      return timespan.wday.map(function (value) {
        return value === 6 ? 0 : value + 1;
      });
    } else {
      return timespan.wday.map(function (value) {
        return value === 0 ? 6 : value - 1;
      });
    }
  }

  function getLocalTimespan(timespan, onEnable) {
    var fromEnable = onEnable;

    if (typeof onEnable === 'string') {
      fromEnable = onEnable === '1';
    }

    var localTimespan = DEFAULT_TIME_SPAN();
    var fromDate = new Date();
    fromDate.setHours(timespan.from.hour);
    fromDate.setMinutes(timespan.from.min);
    var toDate = new Date();
    toDate.setHours(timespan.to.hour);
    toDate.setMinutes(timespan.to.min);
    var localFromDate = getLocalDate(fromDate);
    var localToDate = getLocalDate(toDate);
    localTimespan.wday = convertWday(timespan, fromEnable ? fromDate : toDate, fromEnable ? localFromDate : localToDate);
    localTimespan.from.hour = localFromDate.getHours();
    localTimespan.from.min = localFromDate.getMinutes();
    localTimespan.to.hour = localToDate.getHours();
    localTimespan.to.min = localToDate.getMinutes();
    return localTimespan;
  }

  function getEast8Timespan(timespan, onEnable) {
    var fromEnable = onEnable;

    if (typeof onEnable === 'string') {
      fromEnable = onEnable === '1';
    }

    var east8Timespan = DEFAULT_TIME_SPAN();
    var fromDate = new Date();
    fromDate.setHours(timespan.from.hour);
    fromDate.setMinutes(timespan.from.min);
    var toDate = new Date();
    toDate.setHours(timespan.to.hour);
    toDate.setMinutes(timespan.to.min);
    var east8FromDate = getEast8Date(fromDate);
    var east8ToDate = getEast8Date(toDate);
    east8Timespan.wday = convertWday(timespan, fromEnable ? fromDate : toDate, fromEnable ? east8FromDate : east8ToDate);
    east8Timespan.from.hour = east8FromDate.getHours();
    east8Timespan.from.min = east8FromDate.getMinutes();
    east8Timespan.to.hour = east8ToDate.getHours();
    east8Timespan.to.min = east8ToDate.getMinutes();
    return east8Timespan;
  }

  function getSceneTimerSpan(fromTime, toTime, onEnable, offEnable) {
    var transformEnable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var fromEnable = onEnable;

    if (typeof onEnable === 'string') {
      fromEnable = onEnable === '1';
    }

    var toEnable = offEnable;

    if (typeof offEnable === 'string') {
      toEnable = offEnable === '1';
    }

    var result = {
      timeSpan: DEFAULT_TIME_SPAN(),
      fromDate: new Date(),
      toDate: new Date()
    };
    var timeSpan = result.timeSpan;
    var fromDate = result.fromDate,
        toDate = result.toDate;
    var regex1 = /\d{1,2}\s\d{1,2}\s\*\s\*\s[0-6]/;
    var regex2 = /^\d{1,2}\s\d{1,2}\s\d{1,2}\s\d{1,2}\s\*+$/;

    if (!regex1.test(fromTime) && !regex2.test(fromTime)) {
      return timeSpan;
    }

    if (!regex1.test(toTime) && !regex2.test(toTime)) {
      return timeSpan;
    }

    if (fromTime.includes('*')) {
      var fromArray = fromTime.split(' ');
      timeSpan.from.min = Number(fromArray[0]);
      timeSpan.from.hour = Number(fromArray[1]);

      if (fromTime.endsWith('*')) {
        fromDate.setMinutes(Number(fromArray[0]));
        fromDate.setHours(Number(fromArray[1]));
        fromDate.setDate(Number(fromArray[2]));
        fromDate.setMonth(Number(fromArray[3]) - 1);
      }
    }

    if (toTime.includes('*')) {
      var toArray = toTime.split(' ');
      timeSpan.to.min = Number(toArray[0]);
      timeSpan.to.hour = Number(toArray[1]);

      if (fromTime.endsWith('*')) {
        toDate.setMinutes(Number(toArray[0]));
        toDate.setHours(Number(toArray[1]));
        toDate.setDate(Number(toArray[2]));
        toDate.setMonth(Number(toArray[3]) - 1);
      }
    }

    if (fromEnable) {
      if (fromTime.endsWith('*')) {
        timeSpan.wday = [];
      } else {
        var _fromArray = fromTime.split(' ');

        timeSpan.wday = _fromArray[4].split(',').map(function (value) {
          return Number(value);
        });
      }
    } else if (toEnable) {
      if (toTime.endsWith('*')) {
        timeSpan.wday = [];
      } else {
        var _toArray = toTime.split(' ');

        timeSpan.wday = _toArray[4].split(',').map(function (value) {
          return Number(value);
        });
      }
    } else {
      timeSpan.wday = EVERYDAY();
    }

    if (transformEnable) {
      result.timeSpan = getLocalTimespan(timeSpan, fromEnable);
      result.fromDate = getLocalDate(fromDate);
      result.toDate = getLocalDate(toDate);
    } else {
      result.timeSpan = timeSpan;
      result.fromDate = fromDate;
      result.toDate = toDate;
    }

    return result;
  }

  function getTimeSlotToCloud(timespan, onEnable, offEnable) {
    var fromEnable = onEnable;

    if (typeof onEnable === 'string') {
      fromEnable = onEnable === '1';
    }

    var toEnable = offEnable;

    if (typeof offEnable === 'string') {
      toEnable = offEnable === '1';
    }

    var timeSlot = timespan;
    var fromMins = timeSlot.from.hour * 60 + timeSlot.from.min;
    var toMins = timeSlot.to.hour * 60 + timeSlot.to.min;
    var fromTime;
    var toTime;

    if (!timeSlot.wday || timeSlot.wday.length === 0) {
      var fromDate = new Date();
      var nowMins = fromDate.getHours() * 60 + fromDate.getMinutes();
      fromDate.setHours(timeSlot.from.hour);
      fromDate.setMinutes(timeSlot.from.min);
      var toDate = new Date();
      toDate.setHours(timeSlot.to.hour);
      toDate.setMinutes(timeSlot.to.min);

      if (fromEnable && toEnable) {
        var fromAddDate = false;

        if (fromMins <= nowMins) {
          fromDate = new Date(fromDate.getTime() + 86400000);
          fromAddDate = true;
        }

        if (fromAddDate || toMins <= fromMins || toMins <= nowMins) {
          toDate = new Date(toDate.getTime() + 86400000);
        }
      } else if (!fromEnable && toEnable) {
        if (toMins <= nowMins) {
          toDate = new Date(toDate.getTime() + 86400000);
        }
      } else if (fromEnable && !toEnable) {
        if (fromMins <= nowMins) {
          fromDate = new Date(fromDate.getTime() + 86400000);
        }
      }

      var east8FromDate = getEast8Date(fromDate);
      var east8ToDate = getEast8Date(toDate);
      fromTime = east8FromDate.getMinutes() + ' ' + east8FromDate.getHours() + ' ' + east8FromDate.getDate() + ' ' + (east8FromDate.getMonth() + 1) + ' *';
      toTime = east8ToDate.getMinutes() + ' ' + east8ToDate.getHours() + ' ' + east8ToDate.getDate() + ' ' + (east8ToDate.getMonth() + 1) + ' *';
      return {
        fromTime: fromTime,
        toTime: toTime
      };
    }

    var timeSlotEast8 = getEast8Timespan(timeSlot, fromEnable);
    fromTime = timeSlotEast8.from.min + ' ' + timeSlotEast8.from.hour + ' * * ' + timeSlotEast8.wday.join(',');
    toTime = timeSlotEast8.to.min + ' ' + timeSlotEast8.to.hour + ' * * ' + timeSlotEast8.wday.join(',');

    if (fromEnable && toEnable && fromMins > toMins) {
      var towday = timeSlotEast8.wday;
      towday.map(function (value) {
        return value === 6 ? 0 : value + 1;
      });
      towday.sort(function (a, b) {
        return a - b;
      });
      toTime = timeSlotEast8.to.min + ' ' + timeSlotEast8.to.hour + ' * * ' + towday.join(',');
    }

    return {
      fromTime: fromTime,
      toTime: toTime
    };
  }

  var _default = {
    getTimeSpan: getTimeSpan,
    getSceneTimerSpan: getSceneTimerSpan,
    gettimerArrayStr: gettimerArrayStr,
    getTimeSlotToCloud: getTimeSlotToCloud,
    getLocalTimespan: getLocalTimespan,
    getEast8Timespan: getEast8Timespan,
    EVERYDAY: EVERYDAY,
    WEEKDAY: WEEKDAY,
    WORKDAY: WORKDAY,
    DEFAULT_TIME_SPAN: DEFAULT_TIME_SPAN,
    getLocalDate: getLocalDate,
    getEast8Date: getEast8Date
  };
  exports.default = _default;
},10157,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _miot = _$$_REQUIRE(_dependencyMap[6]);

  var _LHDeepClone = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  function CRC16Array(data) {
    var result = new Array(2);
    var crc16 = 0x8005;
    var crc = 0x00;
    var bitLen = 8;

    if (!data || data.length === 0) {
      return [0, 0];
    }

    var flag;

    for (var k = 0, len = data.length; k < len; k += 1) {
      for (var i = 0; i < bitLen; i += 1) {
        flag = crc >> 15;
        crc <<= 1;
        crc |= data[k] >> 7 - i & 1;

        if ((flag & 1) == 1) {
          crc ^= crc16;
        }
      }
    }

    crc &= 0xffff;

    for (var _i = 0; _i < result.length; _i += 1) {
      result[_i] = crc >> 8 * _i & 0xFF;
    }

    return result;
  }

  var numberLocalMap = new Map([["fi", [" ", ","]], ["fr", [" ", ","]], ["hr", [".", ","]], ["hu", ["", ","]], ["id", [".", ","]], ["it", [".", ","]], ["ja", [",", "."]], ["ko", [",", "."]], ["nb", [" ", ","]], ["nl", [".", ","]], ["ca", [".", ","]], ["pl", [" ", ","]], ["cs", [" ", ","]], ["pt-BR", [".", ","]], ["da", [".", ","]], ["ro", [".", ","]], ["de", [".", ","]], ["ru", [" ", ","]], ["el", [".", ","]], ["sk", [" ", ","]], ["en-AU", [",", "."]], ["sv", [" ", ","]], ["en-CA", [",", "."]], ["th", [",", "."]], ["en-GB", [",", "."]], ["tr", [".", ","]], ["en-IN", [",", "."]], ["uk", [" ", ","]], ["en-NZ", [",", "."]], ["vi", [".", ","]], ["en-SG", [",", "."]], ["zh-Hans", [",", "."]], ["en-ZA", [" ", ","]], ["zh-Hant-HK", [",", "."]], ["en", [",", "."]], ["zh-Hant", [",", "."]], ["ar", [",", "."]], ["es", [".", ","]]]);

  var CommonMethod = function () {
    function CommonMethod() {
      (0, _classCallCheck2.default)(this, CommonMethod);
    }

    (0, _createClass2.default)(CommonMethod, null, [{
      key: "DeepClone",
      value: function DeepClone(source, targetObj) {
        return (0, _LHDeepClone.default)(source, targetObj);
      }
    }, {
      key: "RandomNum",
      value: function RandomNum(min, max) {
        var range = max - min;
        var rand = Math.random();
        var num = min + Math.round(rand * range);
        return num;
      }
    }, {
      key: "Find",
      value: function Find(array, attr, value) {
        for (var i = 0, len = array.length; i < len; i += 1) {
          if (array[i][attr] === value) return i;
        }

        return -1;
      }
    }, {
      key: "FindSpec",
      value: function FindSpec(array, siid, piid) {
        for (var i = 0, len = array.length; i < len; i += 1) {
          if (array[i].siid === siid && array[i].piid === piid) return array[i];
        }

        return null;
      }
    }, {
      key: "CRC16String",
      value: function CRC16String(msg) {
        var data = [];

        for (var i = 0, len = msg.length; i < len; i += 2) {
          data.push('0x' + msg.substr(i, 2));
        }

        var crc = CRC16Array(data);
        var result = '';

        for (var j = 0, len1 = crc.length; j < len1; j += 1) {
          var crcStr = crc[j].toString(16);
          result += crcStr.length < 2 ? '0' + crcStr : crcStr;
        }

        return result;
      }
    }, {
      key: "bigEndianStrToLittleEndianString",
      value: function bigEndianStrToLittleEndianString(hexStr) {
        var littleEndianString = "";
        var byteArr = CommonMethod.hexStrToByteArr(hexStr);

        for (var i = byteArr.length - 1; i >= 0; i -= 1) {
          var hexNum = byteArr[i];

          if (hexNum >= 0 && hexNum <= 255) {
            var hexByteStr = hexNum.toString(16).toUpperCase();

            if (hexByteStr.length % 2 == 1) {
              hexByteStr = '0' + hexByteStr;
            }

            littleEndianString = littleEndianString + hexByteStr;
          }
        }

        return littleEndianString;
      }
    }, {
      key: "hexStrToByteArr",
      value: function hexStrToByteArr(hexStr) {
        var byteArr = [];

        if (!hexStr || !hexStr.length || hexStr.length % 2 !== 0) {
          return byteArr;
        }

        hexStr = hexStr.toLocaleUpperCase();
        var hexs = '0123456789ABCDEF';

        for (var i = 0; i < hexStr.length / 2; i += 1) {
          var bytePR = hexStr[2 * i];
          var byteSF = hexStr[2 * i + 1];

          if (bytePR.indexOf(hexs) && byteSF.indexOf(hexs)) {
            byteArr.push(parseInt(bytePR + byteSF, 16));
          }
        }

        return byteArr;
      }
    }, {
      key: "QuickSort",
      value: function QuickSort(array, attr) {
        var sortFn = function sortFn(start, end) {
          if (start === end) return;
          var oStart = start,
              oEnd = end,
              key = array[start];

          while (start < end) {
            if (attr ? key[attr] <= array[end][attr] : key <= array[end]) {
              end--;
            } else {
              array[start] = array[end];

              while (end > ++start) {
                if (attr ? key[attr] < array[start][attr] : array[start] > key) {
                  array[end] = array[start];
                  end--;
                  break;
                }
              }
            }
          }

          if (start === oStart) {
            sortFn(++oStart, oEnd);
            return;
          }

          array[start] = key;

          if (start === oEnd) {
            sortFn(oStart, --oEnd);
            return;
          }

          sortFn(oStart, --start);
          sortFn(++end, oEnd);
        };

        if (array.length > 1) sortFn(0, array.length - 1);
        return array;
      }
    }, {
      key: "getDistanceBetweenDot",
      value: function getDistanceBetweenDot(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
      }
    }, {
      key: "CreatCacheKey",
      value: function CreatCacheKey(keyName) {
        return keyName + '_' + _miot.Device.deviceID + _miot.Service.account.ID;
      }
    }, {
      key: "PromiseRetry",
      value: function PromiseRetry(request, option) {
        var p = Promise.reject();
        var defaultOpt = {
          maxRetryTime: 3,
          interval: 1000
        };
        var opt = (0, _extends2.default)({}, defaultOpt, option);
        var interval = opt.interval,
            maxRetryTime = opt.maxRetryTime,
            onTest = opt.onTest,
            params = opt.params;

        function rejectDelay(reason) {
          return new Promise(function (resolve, reject) {
            setTimeout(reject.bind(null, reason), interval);
          });
        }

        for (var i = 0; i < maxRetryTime; i += 1) {
          p = p.catch(request.bind.apply(request, [null].concat((0, _toConsumableArray2.default)(params || [])))).then(onTest).catch(rejectDelay);
        }

        return p;
      }
    }, {
      key: "numToLocalString",
      value: function numToLocalString(number, options) {
        var fixed = options.fixed,
            language = options.language;

        if (typeof number !== 'number' && Number.isNaN(Number(number))) {
          return number;
        }

        var toFixed = fixed;

        if (typeof toFixed !== 'number' && Number.isNaN(Number(toFixed))) {
          toFixed = 0;
        }

        if (toFixed > 100 || toFixed < 0) {
          console.warn('formatDataNumber 小数点位数不正确');
          return number;
        }

        function format() {
          var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var lang = numberLocalMap.get(language);
          var thousand = lang ? lang[0] : ',';
          var reg = /\d{1,3}(?=(\d{3})+$)/g;
          return (num + '').replace(reg, '$&' + thousand);
        }

        var formatNumber = function formatNumber(number) {
          var fixNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var lang = numberLocalMap.get(language);
          var numberPoint = lang ? lang[1] || '.' : '.';
          var elec = number.toFixed(fixNum);
          var int = Number(elec) >= 0 ? Math.floor(Number(elec)) : Math.ceil(Number(elec));
          var match = /\.\d*/.exec(elec + '');
          var fraction = match ? match[0] || '' : '';
          var fracString = fraction.replace('.', numberPoint);
          return format(int) + fracString;
        };

        return formatNumber(number, toFixed);
      }
    }, {
      key: "round",
      value: function round(v, e) {
        var t = 1;

        for (; e > 0; t *= 10, e--) {
          ;
        }

        for (; e < 0; t /= 10, e++) {
          ;
        }

        return Math.round(v * t) / t;
      }
    }]);
    return CommonMethod;
  }();

  exports.default = CommonMethod;

  CommonMethod.AwaitForeach = function _callee(count, callback) {
    var k;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            k = 0;

          case 1:
            if (!(k < count)) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return _regenerator.default.awrap(callback(k));

          case 4:
            k += 1;
            _context.next = 1;
            break;

          case 7:
          case "end":
            return _context.stop();
        }
      }
    });
  };
},10160,[14305,14674,14359,14344,14320,14323,10074,10163]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = DeepClone;

  function DeepClone(source, targetObj) {
    if (!source || typeof source !== 'object') {
      throw new Error('error arguments', 'shallowClone');
    }

    var result = targetObj;

    if (!result) {
      result = source.constructor === Array ? [] : {};
    }

    for (var keys in source) {
      if (source.hasOwnProperty(keys)) {
        if (source[keys] && typeof source[keys] === 'object') {
          result[keys] = source[keys].constructor === Array ? [] : {};
          result[keys] = DeepClone(source[keys]);
        } else {
          result[keys] = source[keys];
        }
      }
    }

    return result;
  }
},10163,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var LHStringUtils = function () {
    function LHStringUtils() {
      (0, _classCallCheck2.default)(this, LHStringUtils);
    }

    (0, _createClass2.default)(LHStringUtils, null, [{
      key: "isContainsEmoji",
      value: function isContainsEmoji(substring) {
        if (substring) {
          for (var i = 0; i < substring.length; i += 1) {
            var hs = substring.charCodeAt(i);

            if (hs >= 0xd800 && hs <= 0xdbff) {
              if (substring.length > 1) {
                var ls = substring.charCodeAt(i + 1);
                var uc = (hs - 0xd800) * 0x400 + (ls - 0xdc00) + 0x10000;

                if (uc >= 0x1d000 && uc <= 0x1f9f9) {
                  return true;
                }
              }
            } else if (substring.length > 1) {
              var _ls = substring.charCodeAt(i + 1);

              if (_ls === 0x20e3 || _ls === 0xfe0f || _ls === 0xd83c) {
                return true;
              }
            } else if (hs >= 0x2100 && hs <= 0x27ff && hs !== 0x2103) {
              return true;
            } else if (hs >= 0x2B05 && hs <= 0x2b07) {
              return true;
            } else if (hs >= 0x2934 && hs <= 0x2935) {
              return true;
            } else if (hs >= 0x3297 && hs <= 0x3299) {
              return true;
            } else if (hs === 0xa9 || hs === 0xae || hs === 0x303d || hs === 0x3030 || hs === 0x2b55 || hs === 0x2b1c || hs === 0x2b1b || hs === 0x2b50 || hs === 0x231a) {
              return true;
            }
          }
        }

        return false;
      }
    }, {
      key: "isContainsNotSupportChar",
      value: function isContainsNotSupportChar(substring) {
        if (substring.indexOf('--') !== -1) {
          return true;
        }

        if (substring.indexOf('\\') !== -1) {
          return true;
        }

        var pattern = new RegExp('[!$^*{}<>?\\[\\]=|]');

        if (pattern.test(substring)) {
          return true;
        }

        return false;
      }
    }]);
    return LHStringUtils;
  }();

  exports.default = LHStringUtils;

  LHStringUtils.judgeStringLength = function (str) {
    var strLen = 0;

    for (var i = 0; i < str.length; i += 1) {
      var code = str.charAt(i);

      if (code.match(/[^\x00-\xff]/ig) !== null) {
        strLen += 2;
      } else {
        strLen += 1;
      }
    }

    return strLen;
  };
},10166,[14305,14320,14323]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var instance = null;

  var LHHardwareUpdateUtils = function () {
    function LHHardwareUpdateUtils(offDialog) {
      (0, _classCallCheck2.default)(this, LHHardwareUpdateUtils);

      if (instance) {
        return instance;
      }

      this.offDialog = offDialog;
      this.mCallback = [];
      this.needCheck = false;
      this.serverData = null;
      this.hasNewVersion = false;
      instance = this;
      this.addViewWillAppearListener();
      return instance;
    }

    (0, _createClass2.default)(LHHardwareUpdateUtils, [{
      key: "addCallback",
      value: function addCallback(callback) {
        var _this = this;

        this.mCallback.push(callback);
        return {
          remove: function remove() {
            var index = _this.mCallback.indexOf(callback);

            if (index > -1) {
              _this.mCallback.splice(index, 1);
            }
          }
        };
      }
    }, {
      key: "addViewWillAppearListener",
      value: function addViewWillAppearListener() {
        var _this2 = this;

        this.packageViewWillAppearListener = _miot.PackageEvent.packageViewWillAppear.addListener(function () {
          console.log('packageViewWillAppear');

          if (_this2.needCheck) {
            _this2.checkHardwareUpdate();
          }
        });
      }
    }, {
      key: "removeViewWillAppearListener",
      value: function removeViewWillAppearListener() {
        if (this.packageViewWillAppearListener) {
          this.packageViewWillAppearListener.remove();
          this.packageViewWillAppearListener = null;
        }
      }
    }, {
      key: "checkHardwareUpdate",
      value: function checkHardwareUpdate() {
        var _this3 = this;

        _LHCommonFunction.LHMiServer.UpdateDeviceHardware(function (res) {
          console.log(res);

          if (!res) {
            return;
          }

          _this3.needCheck = false;
          _this3.serverData = res;
          _this3.hasNewVersion = !res.isLatest;

          var title = _LHCommonFunction.CommonMethod.CreatCacheKey(res.newVersion);

          if (res.hasNewFirmware) {
            for (var i = 0; i < _this3.mCallback.length; i += 1) {
              _this3.mCallback[i](res);
            }

            if (_this3.offDialog) return;

            if (res.isForce) {
              var config = {
                message: _LHCommonFunction.LHCommonLocalizableString.common_hardware_update_isforce.replace('{version}', res.newVersion),
                confirm: _LHCommonFunction.LHCommonLocalizableString.common_hardware_update,
                cancel: _LHCommonFunction.LHCommonLocalizableString.common_out,
                onCancel: function onCancel() {
                  _miot.Package.exit();
                },
                onConfirm: function onConfirm() {
                  _this3.needCheck = true;

                  _miot.Host.ui.openDeviceUpgradePage();
                }
              };

              if (res.isUpdating) {
                config = (0, _extends2.default)(config, {
                  message: _LHCommonFunction.LHCommonLocalizableString.common_hardware_update_updating,
                  confirm: _LHCommonFunction.LHCommonLocalizableString.common_hardware_checkupdate
                });
              }

              _LHCommonFunction.LHDialogUtils.MessageDialogShow(config);
            } else {
              _LHCommonFunction.LHMiServer.GetHostStorage(title).then(function (data) {
                if (!data) {
                  _LHCommonFunction.LHMiServer.SetHostStorage(title, true);

                  _LHCommonFunction.LHDialogUtils.MessageDialogShow({
                    message: _LHCommonFunction.LHCommonLocalizableString.common_hardware_update_default.replace('{version}', res.newVersion),
                    confirm: _LHCommonFunction.LHCommonLocalizableString.common_hardware_update,
                    cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
                    onCancel: function onCancel() {},
                    onConfirm: function onConfirm() {
                      _this3.needCheck = false;

                      _miot.Host.ui.openDeviceUpgradePage();
                    }
                  });
                }
              }).catch(function (suberr) {
                console.log(suberr);
              });
            }
          } else {
            for (var _i = 0; _i < _this3.mCallback.length; _i += 1) {
              _this3.mCallback[_i](res);
            }
          }
        }, function (err) {
          console.log(err);
        });
      }
    }]);
    return LHHardwareUpdateUtils;
  }();

  exports.default = LHHardwareUpdateUtils;
},10169,[14305,14344,14320,14323,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var LHDebugConfig = function () {
    function LHDebugConfig() {
      (0, _classCallCheck2.default)(this, LHDebugConfig);
    }

    (0, _createClass2.default)(LHDebugConfig, null, [{
      key: "OffDebug",
      value: function OffDebug(isOff) {
        var off = isOff || true;

        if (off) {
          global.console.info = function () {};

          global.console.log = function () {};

          global.console.warn = function () {};

          global.console.debug = function () {};

          global.console.error = function () {};

          global.console.assert = function () {};
        }
      }
    }, {
      key: "consoleScene",
      value: function consoleScene(scene) {
        var authorizedDeviceIDs = scene.authorizedDeviceIDs,
            createTime = scene.createTime,
            deviceID = scene.deviceID,
            identify = scene.identify,
            isArtificial = scene.isArtificial,
            isAutomatic = scene.isAutomatic,
            isNew = scene.isNew,
            isTimer = scene.isTimer,
            name = scene.name,
            sceneID = scene.sceneID,
            setting = scene.setting,
            status = scene.status,
            type = scene.type;
        var json = {
          authorizedDeviceIDs: authorizedDeviceIDs,
          createTime: createTime,
          deviceID: deviceID,
          identify: identify,
          isArtificial: isArtificial,
          isAutomatic: isAutomatic,
          isNew: isNew,
          isTimer: isTimer,
          name: name,
          sceneID: sceneID,
          setting: setting,
          status: status,
          type: type
        };
        console.log(JSON.stringify(json, null, 4));
      }
    }, {
      key: "consoleSceneArray",
      value: function consoleSceneArray(sceneArray) {
        var _this = this;

        sceneArray.forEach(function (scene) {
          _this.consoleScene(scene);
        });
      }
    }]);
    return LHDebugConfig;
  }();

  exports.default = LHDebugConfig;
},10172,[14305,14320,14323]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _miot = _$$_REQUIRE(_dependencyMap[1]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[2]);

  var _Stores = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHMainPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHSettingPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHVolumePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHDoorBellPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHDoorBellTonePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHNightLightDelayPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _LHNightLightDevicePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LHGuardSettingPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHNightLightTimerPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHGatewayLanguage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHLogPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHDelayEffectivePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHAlarmTonePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHGatewayIFTTTPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHLazyAlarmClockPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _LHLazyClockTimerListPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _LHAlarmSettingPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _LHTimeLightListPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _LHTimeLightEditPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _LHLazyClockTimerAddPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _LHLinkageAlarmPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _LHLazyClockRingPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _LHCustomScenePage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var store = (0, _Stores.default)();
  var APP = (0, _LHCommonUI.LHInitPage)({
    LHMainPage: _LHMainPage.default,
    LHSettingPage: _LHSettingPage.default,
    LHVolumePage: _LHVolumePage.default,
    LHDoorBellPage: _LHDoorBellPage.default,
    LHDoorBellTonePage: _LHDoorBellTonePage.default,
    LHNightLightDelayPage: _LHNightLightDelayPage.default,
    LHNightLightDevicePage: _LHNightLightDevicePage.default,
    LHSubDevicesListPage: _LHCommonUI.LHSubDevicesListPage,
    LHGuardSettingPage: _LHGuardSettingPage.default,
    LHNightLightTimerPage: _LHNightLightTimerPage.default,
    LHGatewayLanguage: _LHGatewayLanguage.default,
    LHLogPage: _LHLogPage.default,
    LHDelayEffectivePage: _LHDelayEffectivePage.default,
    LHGatewayIFTTTPage: _LHGatewayIFTTTPage.default,
    LHAlarmSettingPage: _LHAlarmSettingPage.default,
    LHAlarmTonePage: _LHAlarmTonePage.default,
    LHTimerPage: _LHCommonUI.LHTimerPage,
    LHNewTimerPage: _LHCommonUI.LHNewTimerPage,
    LHLazyAlarmClockPage: _LHLazyAlarmClockPage.default,
    LHLazyClockTimerListPage: _LHLazyClockTimerListPage.default,
    LHTimeLightListPage: _LHTimeLightListPage.default,
    LHTimeLightEditPage: _LHTimeLightEditPage.default,
    LHLazyClockTimerAddPage: _LHLazyClockTimerAddPage.default,
    LHLinkageAlarmPage: _LHLinkageAlarmPage.default,
    LHLazyClockRingPage: _LHLazyClockRingPage.default,
    LHCustomScenePage: _LHCustomScenePage.default,
    LHMoreSettingPage: _LHCommonUI.LHMoreSettingPage
  }, _miot.Entrance.Scene === _miot.Package.entrance ? 'LHCustomScenePage' : 'LHMainPage', store);
  var _default = APP;
  exports.default = _default;
},10175,[14305,10074,10178,10601,10736,11285,11297,11300,11303,11306,11309,11315,11327,11330,11333,11336,11339,11342,11345,11348,11360,11366,11369,11375,11378,11381,11384]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "LHInitPage", {
    enumerable: true,
    get: function get() {
      return _index.default;
    }
  });
  Object.defineProperty(exports, "LHTitleBarCustom", {
    enumerable: true,
    get: function get() {
      return _LHTitleBarCustom.default;
    }
  });
  Object.defineProperty(exports, "LHImageButton", {
    enumerable: true,
    get: function get() {
      return _LHImageButton.default;
    }
  });
  Object.defineProperty(exports, "LHSeparator", {
    enumerable: true,
    get: function get() {
      return _LHSeparator.default;
    }
  });
  Object.defineProperty(exports, "LHMessageDialog", {
    enumerable: true,
    get: function get() {
      return _LHMessageDialog.default;
    }
  });
  Object.defineProperty(exports, "LHText", {
    enumerable: true,
    get: function get() {
      return _LHText.default;
    }
  });
  Object.defineProperty(exports, "LHSubDevicesListPage", {
    enumerable: true,
    get: function get() {
      return _LHSubDevicesListPage.default;
    }
  });
  Object.defineProperty(exports, "LHStandardListSwipeout", {
    enumerable: true,
    get: function get() {
      return _LHStandardListSwipeout.default;
    }
  });
  Object.defineProperty(exports, "LHStandardCell", {
    enumerable: true,
    get: function get() {
      return _LHStandardCell.default;
    }
  });
  Object.defineProperty(exports, "LHPlaceHolderImage", {
    enumerable: true,
    get: function get() {
      return _LHPlaceHolderImage.default;
    }
  });
  Object.defineProperty(exports, "LHSwitch", {
    enumerable: true,
    get: function get() {
      return _LHSwitch.default;
    }
  });
  Object.defineProperty(exports, "LHSwipeoutButton", {
    enumerable: true,
    get: function get() {
      return _LHSwipeoutButton.default;
    }
  });
  Object.defineProperty(exports, "LHCommonIcon", {
    enumerable: true,
    get: function get() {
      return _LHCommonIcon.default;
    }
  });
  Object.defineProperty(exports, "Swipeout", {
    enumerable: true,
    get: function get() {
      return _swipeout.default;
    }
  });
  Object.defineProperty(exports, "LHCommonStyles", {
    enumerable: true,
    get: function get() {
      return _LHCommonBaseStyle.default;
    }
  });
  Object.defineProperty(exports, "LHBottomButtonGroup", {
    enumerable: true,
    get: function get() {
      return _LHBottomButtonGroup.default;
    }
  });
  Object.defineProperty(exports, "LHTimerPage", {
    enumerable: true,
    get: function get() {
      return _LHTimerPage.default;
    }
  });
  Object.defineProperty(exports, "LHStandardList", {
    enumerable: true,
    get: function get() {
      return _LHStandardList.default;
    }
  });
  Object.defineProperty(exports, "LHNewTimerPage", {
    enumerable: true,
    get: function get() {
      return _LHNewTimerPage.default;
    }
  });
  Object.defineProperty(exports, "LHDatePicker", {
    enumerable: true,
    get: function get() {
      return _LHDatePicker.default;
    }
  });
  Object.defineProperty(exports, "LHMoreSettingPage", {
    enumerable: true,
    get: function get() {
      return _LHMoreSettingPage.default;
    }
  });
  Object.defineProperty(exports, "LHStandardEmpty", {
    enumerable: true,
    get: function get() {
      return _LHStandardEmpty.default;
    }
  });
  Object.defineProperty(exports, "LHStandardLog", {
    enumerable: true,
    get: function get() {
      return _LHStandardLog.default;
    }
  });
  Object.defineProperty(exports, "LHStandardLogUI", {
    enumerable: true,
    get: function get() {
      return _LHStandardLogUI.default;
    }
  });
  Object.defineProperty(exports, "LHSetting", {
    enumerable: true,
    get: function get() {
      return _LHSetting.default;
    }
  });
  Object.defineProperty(exports, "LHCardBase", {
    enumerable: true,
    get: function get() {
      return _LHCardBase.default;
    }
  });
  Object.defineProperty(exports, "LHProgressCard", {
    enumerable: true,
    get: function get() {
      return _LHProgressCard.default;
    }
  });
  Object.defineProperty(exports, "LHDoubleStringSpinner", {
    enumerable: true,
    get: function get() {
      return _LHDoubleStringSpinner.default;
    }
  });

  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _LHTitleBarCustom = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _LHImageButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHMessageDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _LHText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHSubDevicesListPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHStandardListSwipeout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHStandardCell = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _LHPlaceHolderImage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LHSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHSwipeoutButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHCommonIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _swipeout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCommonBaseStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHBottomButtonGroup = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHTimerPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHStandardList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _LHNewTimerPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _LHDatePicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _LHMoreSettingPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _LHStandardEmpty = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _LHStandardLog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _LHStandardLogUI = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _LHSetting = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _LHCardBase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var _LHProgressCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));

  var _LHDoubleStringSpinner = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));
},10178,[14305,10181,10265,10283,10286,10289,10292,10295,10301,10304,10523,10526,10529,10307,10532,10544,10547,10550,10553,10556,10559,10562,10565,10571,10580,10583,10586,10595,10598]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = LHInitPage;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[10]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[11]);

  var _ui = _$$_REQUIRE(_dependencyMap[12]);

  var _miot = _$$_REQUIRE(_dependencyMap[13]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[14]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[15]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[16]);

  var _LHDebugPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var debugPages = _LHCommonFunction.LHAppiumUtils.isWhiteList ? (0, _objectSpread2.default)({
    LHDebugPage: _LHDebugPage.default
  }, _LHDebugPage.default.SubDebugPages) : {};

  function LHInitPage(pageConfig, initialRouteName, store) {
    var initialRouteParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var RootStack = (0, _reactNavigation.createStackNavigator)((0, _extends2.default)({}, pageConfig, debugPages), {
      headerMode: 'screen',
      transitionConfig: function transitionConfig() {
        return {
          transitionSpec: _reactNavigation.StackViewTransitionConfigs.SlideFromRightIOS.transitionSpec,
          screenInterpolator: _reactNavigation.StackViewTransitionConfigs.SlideFromRightIOS.screenInterpolator
        };
      },
      initialRouteName: initialRouteName,
      initialRouteParams: initialRouteParams,
      navigationOptions: function navigationOptions(_ref) {
        var navigation = _ref.navigation;
        var title = navigation.getParam('title');
        return {
          header: _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
            title: title || '',
            style: {
              backgroundColor: '#fff'
            },
            onPressLeft: function onPressLeft() {
              navigation.goBack();
            }
          })
        };
      }
    });

    var App = function (_React$Component) {
      (0, _inherits2.default)(App, _React$Component);

      function App(props, context) {
        var _this;

        (0, _classCallCheck2.default)(this, App);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(App).call(this, props, context));
        _this.state = {
          MessageDialogObject: {},
          LoadingDialogObject: {},
          InputDialogObject: {},
          NewInputDialogObject: {},
          SingleChoseDialogObject: {}
        };

        _this.bindListener();

        return _this;
      }

      (0, _createClass2.default)(App, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.MessageDialogListener.remove();
          this.LoadingDialogListener.remove();
          this.InputDialogListener.remove();
          this.SingleChoseDialogListener.remove();
          this.NewInputDialogListener.remove();
        }
      }, {
        key: "bindListener",
        value: function bindListener() {
          var _this2 = this;

          this.MessageDialogListener = _reactNative.DeviceEventEmitter.addListener('LHMessageDialog', function (MessageDialogConfig) {
            _this2.setState({
              MessageDialogObject: MessageDialogConfig
            });
          });
          this.LoadingDialogListener = _reactNative.DeviceEventEmitter.addListener('LHLoadingDialog', function (LoadingDialogConfig) {
            _this2.setState({
              LoadingDialogObject: LoadingDialogConfig
            });
          });
          this.InputDialogListener = _reactNative.DeviceEventEmitter.addListener('LHInputDialog', function (InputDialogConfig) {
            _this2.setState({
              InputDialogObject: InputDialogConfig
            });
          });
          this.SingleChoseDialogListener = _reactNative.DeviceEventEmitter.addListener('SingleChoseDialog', function (SingleChoseDialogConfig) {
            _this2.setState({
              SingleChoseDialogObject: SingleChoseDialogConfig
            });
          });
          this.NewInputDialogListener = _reactNative.DeviceEventEmitter.addListener('LHNewInputDialog', function (NewInputDialogConfig) {
            _this2.setState({
              NewInputDialogObject: NewInputDialogConfig
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var _this$state = this.state,
              MessageDialogObject = _this$state.MessageDialogObject,
              LoadingDialogObject = _this$state.LoadingDialogObject,
              InputDialogObject = _this$state.InputDialogObject,
              SingleChoseDialogObject = _this$state.SingleChoseDialogObject,
              NewInputDialogObject = _this$state.NewInputDialogObject;
          return _react.default.createElement(_reactRedux.Provider, {
            store: store
          }, _react.default.createElement(RootStack, {
            screenProps: {
              store: store
            }
          }), _miot.API_LEVEL >= 10022 ? _react.default.createElement(_Dialog.LoadingDialog, {
            message: LoadingDialogObject.title || LoadingDialogObject.message,
            visible: LoadingDialogObject.visible,
            timeout: LoadingDialogObject.timeout || 30000,
            onDismiss: function onDismiss() {
              _this3.setState({
                LoadingDialogObject: (0, _extends2.default)({}, LoadingDialogObject, {
                  visible: false
                })
              });
            }
          }) : _react.default.createElement(_ui.LoadingDialog, {
            title: LoadingDialogObject.title,
            message: LoadingDialogObject.message,
            visible: LoadingDialogObject.visible,
            cancelable: LoadingDialogObject.cancelable || false,
            timeout: LoadingDialogObject.timeout || 30000,
            onDismiss: function onDismiss() {
              _this3.setState({
                LoadingDialogObject: (0, _extends2.default)({}, LoadingDialogObject, {
                  visible: false
                })
              });
            }
          }), _miot.API_LEVEL >= 10022 ? _react.default.createElement(_LHCommonUI.LHMessageDialog, {
            visible: MessageDialogObject.visible,
            title: MessageDialogObject.title,
            titleStyle: MessageDialogObject.titleStyle,
            buttons: MessageDialogObject.buttons,
            message: MessageDialogObject.message,
            messageStyle: MessageDialogObject.messageStyle,
            onDismiss: function onDismiss() {
              _this3.setState({
                MessageDialogObject: (0, _extends2.default)({}, MessageDialogObject, {
                  visible: false
                })
              });
            }
          }) : _react.default.createElement(_ui.MessageDialog, {
            title: MessageDialogObject.title,
            message: MessageDialogObject.message,
            visible: MessageDialogObject.visible,
            confirm: MessageDialogObject.confirm,
            onConfirm: MessageDialogObject.onConfirm,
            cancel: MessageDialogObject.cancel,
            onCancel: MessageDialogObject.onCancel,
            cancelable: MessageDialogObject.cancelable || false,
            timeout: MessageDialogObject.timeout || 0,
            onDismiss: function onDismiss() {
              _this3.setState({
                MessageDialogObject: (0, _extends2.default)({}, MessageDialogObject, {
                  visible: false
                })
              });
            }
          }), _react.default.createElement(_ui.InputDialog, {
            title: InputDialogObject.title,
            message: InputDialogObject.message,
            defaultText: InputDialogObject.defaultText,
            placeholder: InputDialogObject.placeholder,
            singleLine: InputDialogObject.singleLine,
            visible: InputDialogObject.visible,
            confirm: InputDialogObject.confirm,
            onConfirm: InputDialogObject.onConfirm,
            cancel: InputDialogObject.cancel,
            onCancel: InputDialogObject.onCancel,
            cancelable: InputDialogObject.cancelable || false,
            timeout: InputDialogObject.timeout || 0,
            onDismiss: function onDismiss() {
              _this3.setState({
                InputDialogObject: (0, _extends2.default)({}, InputDialogObject, {
                  visible: false
                })
              });
            }
          }), _react.default.createElement(_Dialog.InputDialog, {
            title: NewInputDialogObject.title,
            type: NewInputDialogObject.type,
            defaultText: NewInputDialogObject.defaultText,
            color: NewInputDialogObject.color,
            underlineData: NewInputDialogObject.underlineData,
            visible: NewInputDialogObject.visible,
            inputs: NewInputDialogObject.inputs,
            checkboxData: NewInputDialogObject.checkboxData,
            buttons: NewInputDialogObject.buttons,
            onDismiss: function onDismiss() {
              _this3.setState({
                NewInputDialogObject: (0, _extends2.default)({}, NewInputDialogObject, {
                  visible: false
                })
              });
            }
          }), _react.default.createElement(_ui.SingleChoseDialog, {
            title: SingleChoseDialogObject.title,
            visible: SingleChoseDialogObject.visible,
            dataSource: SingleChoseDialogObject.dataSource,
            cancel: SingleChoseDialogObject.cancel,
            onCancel: SingleChoseDialogObject.onCancel,
            confirm: SingleChoseDialogObject.confirm,
            onConfirm: SingleChoseDialogObject.onConfirm,
            cancelable: SingleChoseDialogObject.cancelable || false,
            onDismiss: function onDismiss() {
              _this3.setState({
                SingleChoseDialogObject: (0, _extends2.default)({}, SingleChoseDialogObject, {
                  visible: false
                })
              });
            }
          }));
        }
      }]);
      return App;
    }(_react.default.Component);

    return App;
  }
},10181,[14305,14320,14323,14371,14377,14386,14344,14314,10297,10033,10918,10184,10230,10074,10755,10178,10004,10247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;

  var _Provider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  exports.Provider = _Provider.default;

  var _connectAdvanced = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  exports.connectAdvanced = _connectAdvanced.default;

  var _Context = _$$_REQUIRE(_dependencyMap[3]);

  exports.ReactReduxContext = _Context.ReactReduxContext;

  var _connect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  exports.connect = _connect.default;
},10184,[14305,10187,10196,10193,10205]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  exports.__esModule = true;
  exports.default = undefined;

  var _inheritsLoose2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _Context = _$$_REQUIRE(_dependencyMap[5]);

  var Provider = function (_Component) {
    (0, _inheritsLoose2.default)(Provider, _Component);

    function Provider(props) {
      var _this;

      _this = _Component.call(this, props) || this;
      var store = props.store;
      _this.state = {
        storeState: store.getState(),
        store: store
      };
      return _this;
    }

    var _proto = Provider.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this._isMounted = true;
      this.subscribe();
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.unsubscribe) this.unsubscribe();
      this._isMounted = false;
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.store !== prevProps.store) {
        if (this.unsubscribe) this.unsubscribe();
        this.subscribe();
      }
    };

    _proto.subscribe = function subscribe() {
      var _this2 = this;

      var store = this.props.store;
      this.unsubscribe = store.subscribe(function () {
        var newStoreState = store.getState();

        if (!_this2._isMounted) {
          return;
        }

        _this2.setState(function (providerState) {
          if (providerState.storeState === newStoreState) {
            return null;
          }

          return {
            storeState: newStoreState
          };
        });
      });
      var postMountStoreState = store.getState();

      if (postMountStoreState !== this.state.storeState) {
        this.setState({
          storeState: postMountStoreState
        });
      }
    };

    _proto.render = function render() {
      var Context = this.props.context || _Context.ReactReduxContext;
      return _react.default.createElement(Context.Provider, {
        value: this.state
      }, this.props.children);
    };

    return Provider;
  }(_react.Component);

  Provider.propTypes = {
    store: _propTypes.default.shape({
      subscribe: _propTypes.default.func.isRequired,
      dispatch: _propTypes.default.func.isRequired,
      getState: _propTypes.default.func.isRequired
    }),
    context: _propTypes.default.object,
    children: _propTypes.default.any
  };
  var _default = Provider;
  exports.default = _default;
},10187,[14308,14305,10190,10297,10318,10193]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  module.exports = _inheritsLoose;
},10190,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.default = exports.ReactReduxContext = undefined;

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var ReactReduxContext = _react.default.createContext(null);

  exports.ReactReduxContext = ReactReduxContext;
  var _default = ReactReduxContext;
  exports.default = _default;
},10193,[14305,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  exports.__esModule = true;
  exports.default = connectAdvanced;

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _inheritsLoose2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _hoistNonReactStatics = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactIs = _$$_REQUIRE(_dependencyMap[9]);

  var _Context = _$$_REQUIRE(_dependencyMap[10]);

  function connectAdvanced(selectorFactory, _ref) {
    if (_ref === undefined) {
      _ref = {};
    }

    var _ref2 = _ref,
        _ref2$getDisplayName = _ref2.getDisplayName,
        getDisplayName = _ref2$getDisplayName === undefined ? function (name) {
      return "ConnectAdvanced(" + name + ")";
    } : _ref2$getDisplayName,
        _ref2$methodName = _ref2.methodName,
        methodName = _ref2$methodName === undefined ? 'connectAdvanced' : _ref2$methodName,
        _ref2$renderCountProp = _ref2.renderCountProp,
        renderCountProp = _ref2$renderCountProp === undefined ? undefined : _ref2$renderCountProp,
        _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
        shouldHandleStateChanges = _ref2$shouldHandleSta === undefined ? true : _ref2$shouldHandleSta,
        _ref2$storeKey = _ref2.storeKey,
        storeKey = _ref2$storeKey === undefined ? 'store' : _ref2$storeKey,
        _ref2$withRef = _ref2.withRef,
        withRef = _ref2$withRef === undefined ? false : _ref2$withRef,
        _ref2$forwardRef = _ref2.forwardRef,
        forwardRef = _ref2$forwardRef === undefined ? false : _ref2$forwardRef,
        _ref2$context = _ref2.context,
        context = _ref2$context === undefined ? _Context.ReactReduxContext : _ref2$context,
        connectOptions = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);
    (0, _invariant.default)(renderCountProp === undefined, "renderCountProp is removed. render counting is built into the latest React dev tools profiling extension");
    (0, _invariant.default)(!withRef, 'withRef is removed. To access the wrapped instance, use a ref on the connected component');
    var customStoreWarningMessage = "To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
    (0, _invariant.default)(storeKey === 'store', "storeKey has been removed and does not do anything. To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");
    var Context = context;
    return function wrapWithConnect(WrappedComponent) {
      var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
      var displayName = getDisplayName(wrappedComponentName);
      var selectorFactoryOptions = (0, _extends2.default)({}, connectOptions, {
        getDisplayName: getDisplayName,
        methodName: methodName,
        renderCountProp: renderCountProp,
        shouldHandleStateChanges: shouldHandleStateChanges,
        storeKey: storeKey,
        displayName: displayName,
        wrappedComponentName: wrappedComponentName,
        WrappedComponent: WrappedComponent
      });
      var pure = connectOptions.pure;
      var OuterBaseComponent = _react.Component;

      if (pure) {
        OuterBaseComponent = _react.PureComponent;
      }

      function makeDerivedPropsSelector() {
        var lastProps;
        var lastState;
        var lastDerivedProps;
        var lastStore;
        var lastSelectorFactoryOptions;
        var sourceSelector;
        return function selectDerivedProps(state, props, store, selectorFactoryOptions) {
          if (pure && lastProps === props && lastState === state) {
            return lastDerivedProps;
          }

          if (store !== lastStore || lastSelectorFactoryOptions !== selectorFactoryOptions) {
            lastStore = store;
            lastSelectorFactoryOptions = selectorFactoryOptions;
            sourceSelector = selectorFactory(store.dispatch, selectorFactoryOptions);
          }

          lastProps = props;
          lastState = state;
          var nextProps = sourceSelector(state, props);
          lastDerivedProps = nextProps;
          return lastDerivedProps;
        };
      }

      function makeChildElementSelector() {
        var lastChildProps, lastForwardRef, lastChildElement, lastComponent;
        return function selectChildElement(WrappedComponent, childProps, forwardRef) {
          if (childProps !== lastChildProps || forwardRef !== lastForwardRef || lastComponent !== WrappedComponent) {
            lastChildProps = childProps;
            lastForwardRef = forwardRef;
            lastComponent = WrappedComponent;
            lastChildElement = _react.default.createElement(WrappedComponent, (0, _extends2.default)({}, childProps, {
              ref: forwardRef
            }));
          }

          return lastChildElement;
        };
      }

      var Connect = function (_OuterBaseComponent) {
        (0, _inheritsLoose2.default)(Connect, _OuterBaseComponent);

        function Connect(props) {
          var _this;

          _this = _OuterBaseComponent.call(this, props) || this;
          (0, _invariant.default)(forwardRef ? !props.wrapperProps[storeKey] : !props[storeKey], "Passing redux store in props has been removed and does not do anything. To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");
          _this.selectDerivedProps = makeDerivedPropsSelector();
          _this.selectChildElement = makeChildElementSelector();
          _this.indirectRenderWrappedComponent = _this.indirectRenderWrappedComponent.bind((0, _assertThisInitialized2.default)(_this));
          return _this;
        }

        var _proto = Connect.prototype;

        _proto.indirectRenderWrappedComponent = function indirectRenderWrappedComponent(value) {
          return this.renderWrappedComponent(value);
        };

        _proto.renderWrappedComponent = function renderWrappedComponent(value) {
          (0, _invariant.default)(value, "Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
          var storeState = value.storeState,
              store = value.store;
          var wrapperProps = this.props;
          var forwardedRef;

          if (forwardRef) {
            wrapperProps = this.props.wrapperProps;
            forwardedRef = this.props.forwardedRef;
          }

          var derivedProps = this.selectDerivedProps(storeState, wrapperProps, store, selectorFactoryOptions);
          return this.selectChildElement(WrappedComponent, derivedProps, forwardedRef);
        };

        _proto.render = function render() {
          var ContextToUse = this.props.context && this.props.context.Consumer && (0, _reactIs.isContextConsumer)(_react.default.createElement(this.props.context.Consumer, null)) ? this.props.context : Context;
          return _react.default.createElement(ContextToUse.Consumer, null, this.indirectRenderWrappedComponent);
        };

        return Connect;
      }(OuterBaseComponent);

      Connect.WrappedComponent = WrappedComponent;
      Connect.displayName = displayName;

      if (forwardRef) {
        var forwarded = _react.default.forwardRef(function forwardConnectRef(props, ref) {
          return _react.default.createElement(Connect, {
            wrapperProps: props,
            forwardedRef: ref
          });
        });

        forwarded.displayName = displayName;
        forwarded.WrappedComponent = WrappedComponent;
        return (0, _hoistNonReactStatics.default)(forwarded, WrappedComponent);
      }

      return (0, _hoistNonReactStatics.default)(Connect, WrappedComponent);
    };
  }
},10196,[14308,14305,14374,10190,14344,14410,10993,13495,10297,10199,10193]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},10199,[10202]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.8.6
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var b = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      c = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      d = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      e = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      f = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      g = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      h = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      k = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      l = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      m = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      n = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      p = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      q = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      r = b ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;

  function t(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;

      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case h:
                  return a;

                default:
                  return u;
              }

          }

        case r:
        case q:
        case d:
          return u;
      }
    }
  }

  function v(a) {
    return t(a) === m;
  }

  exports.typeOf = t;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = r;
  exports.Memo = q;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
  };

  exports.isAsyncMode = function (a) {
    return v(a) || t(a) === l;
  };

  exports.isConcurrentMode = v;

  exports.isContextConsumer = function (a) {
    return t(a) === k;
  };

  exports.isContextProvider = function (a) {
    return t(a) === h;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };

  exports.isForwardRef = function (a) {
    return t(a) === n;
  };

  exports.isFragment = function (a) {
    return t(a) === e;
  };

  exports.isLazy = function (a) {
    return t(a) === r;
  };

  exports.isMemo = function (a) {
    return t(a) === q;
  };

  exports.isPortal = function (a) {
    return t(a) === d;
  };

  exports.isProfiler = function (a) {
    return t(a) === g;
  };

  exports.isStrictMode = function (a) {
    return t(a) === f;
  };

  exports.isSuspense = function (a) {
    return t(a) === p;
  };
},10202,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.createConnect = createConnect;
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _connectAdvanced = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _shallowEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _mapDispatchToProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _mapStateToProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _mergeProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _selectorFactory = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  function match(arg, factories, name) {
    for (var i = factories.length - 1; i >= 0; i--) {
      var result = factories[i](arg);
      if (result) return result;
    }

    return function (dispatch, options) {
      throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
    };
  }

  function strictEqual(a, b) {
    return a === b;
  }

  function createConnect(_temp) {
    var _ref = _temp === undefined ? {} : _temp,
        _ref$connectHOC = _ref.connectHOC,
        connectHOC = _ref$connectHOC === undefined ? _connectAdvanced.default : _ref$connectHOC,
        _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
        mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? _mapStateToProps.default : _ref$mapStateToPropsF,
        _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
        mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? _mapDispatchToProps.default : _ref$mapDispatchToPro,
        _ref$mergePropsFactor = _ref.mergePropsFactories,
        mergePropsFactories = _ref$mergePropsFactor === undefined ? _mergeProps.default : _ref$mergePropsFactor,
        _ref$selectorFactory = _ref.selectorFactory,
        selectorFactory = _ref$selectorFactory === undefined ? _selectorFactory.default : _ref$selectorFactory;

    return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
      if (_ref2 === undefined) {
        _ref2 = {};
      }

      var _ref3 = _ref2,
          _ref3$pure = _ref3.pure,
          pure = _ref3$pure === undefined ? true : _ref3$pure,
          _ref3$areStatesEqual = _ref3.areStatesEqual,
          areStatesEqual = _ref3$areStatesEqual === undefined ? strictEqual : _ref3$areStatesEqual,
          _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
          areOwnPropsEqual = _ref3$areOwnPropsEqua === undefined ? _shallowEqual.default : _ref3$areOwnPropsEqua,
          _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
          areStatePropsEqual = _ref3$areStatePropsEq === undefined ? _shallowEqual.default : _ref3$areStatePropsEq,
          _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
          areMergedPropsEqual = _ref3$areMergedPropsE === undefined ? _shallowEqual.default : _ref3$areMergedPropsE,
          extraOptions = (0, _objectWithoutPropertiesLoose2.default)(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
      var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
      var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
      var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
      return connectHOC(selectorFactory, (0, _extends2.default)({
        methodName: 'connect',
        getDisplayName: function getDisplayName(name) {
          return "Connect(" + name + ")";
        },
        shouldHandleStateChanges: Boolean(mapStateToProps),
        initMapStateToProps: initMapStateToProps,
        initMapDispatchToProps: initMapDispatchToProps,
        initMergeProps: initMergeProps,
        pure: pure,
        areStatesEqual: areStatesEqual,
        areOwnPropsEqual: areOwnPropsEqual,
        areStatePropsEqual: areStatePropsEqual,
        areMergedPropsEqual: areMergedPropsEqual
      }, extraOptions));
    };
  }

  var _default = createConnect();

  exports.default = _default;
},10205,[14305,14344,14410,10196,10208,10211,10235,10238,10241]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = shallowEqual;
  var hasOwn = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }
},10208,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
  exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
  exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;
  exports.default = undefined;

  var _redux = _$$_REQUIRE(_dependencyMap[0]);

  var _wrapMapToProps = _$$_REQUIRE(_dependencyMap[1]);

  function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
    return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
  }

  function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
    return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
      return {
        dispatch: dispatch
      };
    }) : undefined;
  }

  function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
    return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
      return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
    }) : undefined;
  }

  var _default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
  exports.default = _default;
},10211,[10214,10223]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _interopDefault(ex) {
    return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
  }

  var $$observable = _interopDefault(_$$_REQUIRE(_dependencyMap[0]));

  var randomString = function randomString() {
    return Math.random().toString(36).substring(7).split('').join('.');
  };

  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };

  function isPlainObject(obj) {
    if (typeof obj !== 'object' || obj === null) return false;
    var proto = obj;

    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(obj) === proto;
  }

  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
      throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");
    }

    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
      enhancer = preloadedState;
      preloadedState = undefined;
    }

    if (typeof enhancer !== 'undefined') {
      if (typeof enhancer !== 'function') {
        throw new Error('Expected the enhancer to be a function.');
      }

      return enhancer(createStore)(reducer, preloadedState);
    }

    if (typeof reducer !== 'function') {
      throw new Error('Expected the reducer to be a function.');
    }

    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;

    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }

    function getState() {
      if (isDispatching) {
        throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }

      return currentState;
    }

    function subscribe(listener) {
      if (typeof listener !== 'function') {
        throw new Error('Expected the listener to be a function.');
      }

      if (isDispatching) {
        throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");
      }

      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }

        if (isDispatching) {
          throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");
        }

        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
      };
    }

    function dispatch(action) {
      if (!isPlainObject(action)) {
        throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
      }

      if (typeof action.type === 'undefined') {
        throw new Error("Actions may not have an undefined \"type\" property. Have you misspelled a constant?");
      }

      if (isDispatching) {
        throw new Error('Reducers may not dispatch actions.');
      }

      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }

      var listeners = currentListeners = nextListeners;

      for (var i = 0; i < listeners.length; i++) {
        var listener = listeners[i];
        listener();
      }

      return action;
    }

    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== 'function') {
        throw new Error('Expected the nextReducer to be a function.');
      }

      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.REPLACE
      });
    }

    function observable() {
      var _ref;

      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe(observer) {
          if (typeof observer !== 'object' || observer === null) {
            throw new TypeError('Expected the observer to be an object.');
          }

          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }

          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe: unsubscribe
          };
        }
      }, _ref[$$observable] = function () {
        return this;
      }, _ref;
    }

    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState,
      replaceReducer: replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }

  function getUndefinedStateErrorMessage(key, action) {
    var actionType = action && action.type;
    var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
    return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
  }

  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function (key) {
      var reducer = reducers[key];
      var initialState = reducer(undefined, {
        type: ActionTypes.INIT
      });

      if (typeof initialState === 'undefined') {
        throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
      }

      if (typeof reducer(undefined, {
        type: ActionTypes.PROBE_UNKNOWN_ACTION()
      }) === 'undefined') {
        throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
      }
    });
  }

  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};

    for (var i = 0; i < reducerKeys.length; i++) {
      var key = reducerKeys[i];

      if (typeof reducers[key] === 'function') {
        finalReducers[key] = reducers[key];
      }
    }

    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    var shapeAssertionError;

    try {
      assertReducerShape(finalReducers);
    } catch (e) {
      shapeAssertionError = e;
    }

    return function combination(state, action) {
      if (state === undefined) {
        state = {};
      }

      if (shapeAssertionError) {
        throw shapeAssertionError;
      }

      var hasChanged = false;
      var nextState = {};

      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);

        if (typeof nextStateForKey === 'undefined') {
          var errorMessage = getUndefinedStateErrorMessage(_key, action);
          throw new Error(errorMessage);
        }

        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }

      return hasChanged ? nextState : state;
    };
  }

  function bindActionCreator(actionCreator, dispatch) {
    return function () {
      return dispatch(actionCreator.apply(this, arguments));
    };
  }

  function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === 'function') {
      return bindActionCreator(actionCreators, dispatch);
    }

    if (typeof actionCreators !== 'object' || actionCreators === null) {
      throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
    }

    var keys = Object.keys(actionCreators);
    var boundActionCreators = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var actionCreator = actionCreators[key];

      if (typeof actionCreator === 'function') {
        boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
      }
    }

    return boundActionCreators;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    if (funcs.length === 0) {
      return function (arg) {
        return arg;
      };
    }

    if (funcs.length === 1) {
      return funcs[0];
    }

    return funcs.reduce(function (a, b) {
      return function () {
        return a(b.apply(undefined, arguments));
      };
    });
  }

  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }

    return function (createStore) {
      return function () {
        var store = createStore.apply(undefined, arguments);

        var _dispatch = function dispatch() {
          throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };

        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(undefined, arguments);
          }
        };
        var chain = middlewares.map(function (middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(undefined, chain)(store.dispatch);
        return _objectSpread({}, store, {
          dispatch: _dispatch
        });
      };
    };
  }

  exports.createStore = createStore;
  exports.combineReducers = combineReducers;
  exports.bindActionCreators = bindActionCreators;
  exports.applyMiddleware = applyMiddleware;
  exports.compose = compose;
  exports.__DO_NOT_USE__ActionTypes = ActionTypes;
},10214,[10217]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _ponyfill = _$$_REQUIRE(_dependencyMap[0]);

  var _ponyfill2 = _interopRequireDefault(_ponyfill);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var root;

  if (typeof self !== 'undefined') {
    root = self;
  } else if (typeof window !== 'undefined') {
    root = window;
  } else if (typeof global !== 'undefined') {
    root = global;
  } else if (typeof module !== 'undefined') {
    root = module;
  } else {
    root = Function('return this')();
  }

  var result = (0, _ponyfill2['default'])(root);
  exports['default'] = result;
},10217,[10220]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports['default'] = symbolObservablePonyfill;

  function symbolObservablePonyfill(root) {
    var result;
    var _Symbol = root.Symbol;

    if (typeof _Symbol === 'function') {
      if (_Symbol.observable) {
        result = _Symbol.observable;
      } else {
        result = _Symbol('observable');
        _Symbol.observable = result;
      }
    } else {
      result = '@@observable';
    }

    return result;
  }

  ;
},10220,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
  exports.getDependsOnOwnProps = getDependsOnOwnProps;
  exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

  var _verifyPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch, options) {
      var constant = getConstant(dispatch, options);

      function constantSelector() {
        return constant;
      }

      constantSelector.dependsOnOwnProps = false;
      return constantSelector;
    };
  }

  function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
  }

  function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch, _ref) {
      var displayName = _ref.displayName;

      var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
        return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
      };

      proxy.dependsOnOwnProps = true;

      proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
        proxy.mapToProps = mapToProps;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
        var props = proxy(stateOrDispatch, ownProps);

        if (typeof props === 'function') {
          proxy.mapToProps = props;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
          props = proxy(stateOrDispatch, ownProps);
        }

        return props;
      };

      return proxy;
    };
  }
},10223,[14305,10226]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.default = verifyPlainObject;

  var _isPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _warning = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function verifyPlainObject(value, displayName, methodName) {
    if (!(0, _isPlainObject.default)(value)) {
      (0, _warning.default)(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
    }
  }
},10226,[14305,10229,10232]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = isPlainObject;

  function isPlainObject(obj) {
    if (typeof obj !== 'object' || obj === null) return false;
    var proto = Object.getPrototypeOf(obj);
    if (proto === null) return true;
    var baseProto = proto;

    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }

    return proto === baseProto;
  }
},10229,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = warning;

  function warning(message) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }

    try {
      throw new Error(message);
    } catch (e) {}
  }
},10232,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
  exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;
  exports.default = undefined;

  var _wrapMapToProps = _$$_REQUIRE(_dependencyMap[0]);

  function whenMapStateToPropsIsFunction(mapStateToProps) {
    return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
  }

  function whenMapStateToPropsIsMissing(mapStateToProps) {
    return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
      return {};
    }) : undefined;
  }

  var _default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
  exports.default = _default;
},10235,[10223]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.defaultMergeProps = defaultMergeProps;
  exports.wrapMergePropsFunc = wrapMergePropsFunc;
  exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
  exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _verifyPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return (0, _extends2.default)({}, ownProps, stateProps, dispatchProps);
  }

  function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch, _ref) {
      var displayName = _ref.displayName,
          pure = _ref.pure,
          areMergedPropsEqual = _ref.areMergedPropsEqual;
      var hasRunOnce = false;
      var mergedProps;
      return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
        var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

        if (hasRunOnce) {
          if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
        } else {
          hasRunOnce = true;
          mergedProps = nextMergedProps;
        }

        return mergedProps;
      };
    };
  }

  function whenMergePropsIsFunction(mergeProps) {
    return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
  }

  function whenMergePropsIsOmitted(mergeProps) {
    return !mergeProps ? function () {
      return defaultMergeProps;
    } : undefined;
  }

  var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
  exports.default = _default;
},10238,[14305,14344,10226]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
  exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
  exports.default = finalPropsSelectorFactory;

  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _verifySubselectors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
    return function impureFinalPropsSelector(state, ownProps) {
      return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
    };
  }

  function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
    var areStatesEqual = _ref.areStatesEqual,
        areOwnPropsEqual = _ref.areOwnPropsEqual,
        areStatePropsEqual = _ref.areStatePropsEqual;
    var hasRunAtLeastOnce = false;
    var state;
    var ownProps;
    var stateProps;
    var dispatchProps;
    var mergedProps;

    function handleFirstCall(firstState, firstOwnProps) {
      state = firstState;
      ownProps = firstOwnProps;
      stateProps = mapStateToProps(state, ownProps);
      dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      hasRunAtLeastOnce = true;
      return mergedProps;
    }

    function handleNewPropsAndNewState() {
      stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleNewProps() {
      if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleNewState() {
      var nextStateProps = mapStateToProps(state, ownProps);
      var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
      stateProps = nextStateProps;
      if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleSubsequentCalls(nextState, nextOwnProps) {
      var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
      var stateChanged = !areStatesEqual(nextState, state);
      state = nextState;
      ownProps = nextOwnProps;
      if (propsChanged && stateChanged) return handleNewPropsAndNewState();
      if (propsChanged) return handleNewProps();
      if (stateChanged) return handleNewState();
      return mergedProps;
    }

    return function pureFinalPropsSelector(nextState, nextOwnProps) {
      return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
  }

  function finalPropsSelectorFactory(dispatch, _ref2) {
    var initMapStateToProps = _ref2.initMapStateToProps,
        initMapDispatchToProps = _ref2.initMapDispatchToProps,
        initMergeProps = _ref2.initMergeProps,
        options = (0, _objectWithoutPropertiesLoose2.default)(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
    var mapStateToProps = initMapStateToProps(dispatch, options);
    var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
    var mergeProps = initMergeProps(dispatch, options);
    var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
    return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
  }
},10241,[14305,14410,10244]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  exports.__esModule = true;
  exports.default = verifySubselectors;

  var _warning = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function verify(selector, methodName, displayName) {
    if (!selector) {
      throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
    } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
      if (!selector.hasOwnProperty('dependsOnOwnProps')) {
        (0, _warning.default)("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
      }
    }
  }

  function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
    verify(mapStateToProps, 'mapStateToProps', displayName);
    verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
    verify(mergeProps, 'mergeProps', displayName);
  }
},10244,[14305,10232]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var _LHSpecDebugPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LHKooKongDemoPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var LHDebugPage = function (_Component) {
    (0, _inherits2.default)(LHDebugPage, _Component);

    function LHDebugPage() {
      (0, _classCallCheck2.default)(this, LHDebugPage);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDebugPage).apply(this, arguments));
    }

    (0, _createClass2.default)(LHDebugPage, [{
      key: "render",
      value: function render() {
        var navigation = this.props.navigation;
        var parentDeviceProp = _miot.Device.parentDevice ? _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, null, 'Device parentDevice model: ', _react.default.createElement(_reactNative.Text, {
          style: {
            backgroundColor: '#999'
          }
        }, _miot.Device.parentDevice.model)), _react.default.createElement(_reactNative.Text, null, 'Device parentDevice deviceID: ', _react.default.createElement(_reactNative.Text, {
          style: {
            backgroundColor: '#999'
          }
        }, _miot.Device.parentDevice.deviceID))) : null;
        return _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.Text, null, 'Device name: ', _react.default.createElement(_reactNative.Text, {
          style: {
            backgroundColor: '#999'
          }
        }, _miot.Device.name)), _react.default.createElement(_reactNative.Text, null, 'Device model: ', _react.default.createElement(_reactNative.Text, {
          style: {
            backgroundColor: '#999'
          }
        }, _miot.Device.model)), _react.default.createElement(_reactNative.Text, null, 'Device did: ', _react.default.createElement(_reactNative.Text, {
          style: {
            backgroundColor: '#999'
          }
        }, _miot.Device.deviceID)), parentDeviceProp, _react.default.createElement(_reactNative.Text, null, "\u70B9\u51FB\u8DF3\u8F6C\u8C03\u8BD5\u9875\u9762\uFF1A"), _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            navigation.navigate('LHSpecDebugPage');
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: {
            height: 50,
            width: '100%',
            backgroundColor: '#5FA7FE'
          }
        }, "Spec\u8C03\u8BD5\u9875\u9762")), _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            navigation.navigate('LHKooKongDemoPage');
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: {
            height: 50,
            width: '100%',
            backgroundColor: '#aFf7FE'
          }
        }, "Kookong\u63A5\u53E3\u8C03\u8BD5\u9875\u9762")));
      }
    }]);
    return LHDebugPage;
  }(_react.Component);

  exports.default = LHDebugPage;
  LHDebugPage.SubDebugPages = {
    LHSpecDebugPage: _LHSpecDebugPage.default,
    LHKooKongDemoPage: _LHKooKongDemoPage.default
  };
},10247,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10074,10250,10259]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _miot = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var styles = _reactNative.StyleSheet.create({
    btn: {
      flex: 1.5,
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(10),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBlue,
      height: _LHCommonFunction.LHUiUtils.GetPx(40),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(5),
      flexDirection: 'row',
      alignItems: 'center'
    },
    input: {
      borderWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      borderColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
      height: _LHCommonFunction.LHUiUtils.GetPx(40),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(5),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(16),
      color: 'rgba(0,0,0, 0.7)',
      textAlign: 'center',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      flex: 1,
      marginHorizontal: _LHCommonFunction.LHUiUtils.GetPx(8)
    },
    text: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(19),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    btnText: {
      width: '100%',
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(19),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      color: '#fff',
      textAlign: 'center'
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: _LHCommonFunction.LHUiUtils.GetPx(23),
      paddingVertical: _LHCommonFunction.LHUiUtils.GetPx(10),
      alignItems: 'center'
    },
    params: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(17),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      color: '#333'
    },
    checkBox: {
      width: 18,
      height: 18
    },
    checkBoxWrap: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center'
    },
    checkBoxText: {
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(10),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(19),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    }
  });

  var subscribeMessagesErrorCount = 0;

  var LHSpecDebugPage = function (_React$Component) {
    (0, _inherits2.default)(LHSpecDebugPage, _React$Component);

    function LHSpecDebugPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHSpecDebugPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSpecDebugPage).call(this, props, context));
      console.log(_miot.Device);
      _this.hasListenerKey = [];
      _this.state = {
        did: _miot.Device.deviceID,
        readSiid: '',
        readPiid: '',
        readParams: '',
        readResult: '',
        writeSiid: '',
        writePiid: '',
        writeValue: '',
        writeParams: '',
        writeResult: '',
        listenerType: 'event',
        currentListener: '',
        listenerResult: []
      };
      return _this;
    }

    (0, _createClass2.default)(LHSpecDebugPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.deviceStatusListener = _miot.DeviceEvent.deviceReceivedMessages.addListener(function (device, map, res) {
          var _this2$state = _this2.state,
              currentListener = _this2$state.currentListener,
              listenerResult = _this2$state.listenerResult;

          var index = _LHCommonFunction.CommonMethod.Find(res, 'key', currentListener);

          if (index > -1) {
            var data = _LHCommonFunction.CommonMethod.DeepClone(listenerResult, []);

            data.unshift({
              time: _LHCommonFunction.LHDateUtils.DateFormat('hh:mm:ss', +new Date()),
              data: JSON.stringify(res[index])
            });
            console.log(data);

            _this2.setState({
              listenerResult: data
            });
          }

          console.log(res);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.deviceStatusListener) this.deviceStatusListener.remove();
        if (this.subscribeMessagesListener) this.subscribeMessagesListener.remove();
      }
    }, {
      key: "GetSpecValue",
      value: function GetSpecValue(did, siid, piid) {
        var _this3 = this;

        var params = [{
          did: did,
          siid: siid,
          piid: piid
        }];
        this.setState({
          readParams: JSON.stringify(params),
          readResult: '读取中...'
        });
        console.log(JSON.stringify(params));

        _LHCommonFunction.LHMiServer.GetPropertiesValue(params, function (res) {
          console.log(res);

          _this3.setState({
            readResult: JSON.stringify(res)
          });
        }, function (res) {
          _this3.setState({
            readResult: '读取失败：' + JSON.stringify(res)
          });
        });
      }
    }, {
      key: "SetSpecValue",
      value: function SetSpecValue(did, siid, piid, value) {
        var _this4 = this;

        var params = [{
          did: did,
          siid: siid,
          piid: piid,
          value: value
        }];
        this.setState({
          writeParams: JSON.stringify(params),
          writeResult: '写入中...'
        });
        console.log(JSON.stringify(params));

        _LHCommonFunction.LHMiServer.SetPropertiesValue(params, function (res) {
          console.log(res);

          _this4.setState({
            writeResult: JSON.stringify(res)
          });
        }, function (res) {
          _this4.setState({
            writeResult: '写入失败：' + JSON.stringify(res)
          });
        });
      }
    }, {
      key: "subscribeMessages",
      value: function subscribeMessages(params) {
        var _this5 = this;

        this.setState({
          currentListener: params,
          listenerResult: []
        });

        if (this.hasListenerKey.indexOf(params) > -1) {
          return;
        }

        this.hasListenerKey.push(params);
        console.log(params);

        _miot.Device.getDeviceWifi().subscribeMessages(params).then(function (subcription) {
          subscribeMessagesErrorCount = 0;
          _this5.subscribeMessagesListener = subcription;
        }).catch(function () {
          console.log('subscribe failed');

          for (var i = 0, len = _this5.hasListenerKey.length; i < len; i += 1) {
            if (params === _this5.hasListenerKey[i]) {
              _this5.hasListenerKey.splice(i, 1);

              break;
            }
          }

          subscribeMessagesErrorCount += 1;

          if (subscribeMessagesErrorCount < 3) {
            _this5.subscribeMessages(params);
          }
        });
      }
    }, {
      key: "AddListenerEvent",
      value: function AddListenerEvent(did, listenerSiid, listenerPiid) {
        var listenerType = this.state.listenerType;
        this.subscribeMessages(listenerType + '.' + listenerSiid + '.' + listenerPiid);
      }
    }, {
      key: "renderListenerResultItem",
      value: function renderListenerResultItem(item, index) {
        return _react.default.createElement(_reactNative.View, {
          key: 'key_' + index,
          style: [styles.row]
        }, _react.default.createElement(_reactNative.Text, null, item.time + '：' + item.data));
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        var _this$state = this.state,
            did = _this$state.did,
            readParams = _this$state.readParams,
            readResult = _this$state.readResult,
            writeParams = _this$state.writeParams,
            writeResult = _this$state.writeResult,
            listenerType = _this$state.listenerType,
            currentListener = _this$state.currentListener,
            listenerResult = _this$state.listenerResult;
        var currentListenerEl = currentListener !== '' ? _react.default.createElement(_reactNative.View, {
          style: [styles.row, {
            paddingTop: 0
          }]
        }, _react.default.createElement(_reactNative.Text, null, '当前监听：' + currentListener)) : null;
        return _react.default.createElement(_reactNative.ScrollView, {
          style: {
            flex: 1,
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
          }
        }, _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "did:"), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 20,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          defaultValue: did,
          onChangeText: function onChangeText(text) {
            _this6.setState({
              did: text
            });
          }
        })), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "siid:"), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 2,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            _this6.setState({
              readSiid: Number(text)
            });
          }
        }), _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "piid:"), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 2,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            _this6.setState({
              readPiid: Number(text)
            });
          }
        }), _react.default.createElement(_reactNative.TouchableOpacity, {
          style: styles.btn,
          onPress: function onPress() {
            var _this6$state = _this6.state,
                readSiid = _this6$state.readSiid,
                readPiid = _this6$state.readPiid;
            console.log(readSiid + ' ' + readPiid);
            if (did === '' || readSiid === '' || readPiid === '') return false;
            return _this6.GetSpecValue(did, readSiid, readPiid);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.btnText
        }, "\u8BFB\u53D6"))), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.params
        }, "\u8BFB\u53D6\u53C2\u6570:", readParams)), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.params
        }, "\u8BFB\u53D6\u7ED3\u679C:", readResult)), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "siid:"), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 2,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            _this6.setState({
              writeSiid: Number(text)
            });
          }
        }), _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "piid:"), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 2,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            _this6.setState({
              writePiid: Number(text)
            });
          }
        }), _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "val:"), _react.default.createElement(_reactNative.TextInput, {
          style: styles.input,
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            console.log(text);
            var value = text;

            if (text === 'false') {
              value = false;
            } else if (text === 'true') {
              value = true;
            } else if (text > -1) {
              value = Number(text);
            }

            console.log(value);

            _this6.setState({
              writeValue: value
            });
          }
        }), _react.default.createElement(_reactNative.TouchableOpacity, {
          style: styles.btn,
          onPress: function onPress() {
            var _this6$state2 = _this6.state,
                writeSiid = _this6$state2.writeSiid,
                writePiid = _this6$state2.writePiid,
                writeValue = _this6$state2.writeValue;
            console.log(writeSiid + ' ' + writePiid);
            if (did === '' || writeSiid === '' || writePiid === '') return false;
            return _this6.SetSpecValue(did, writeSiid, writePiid, writeValue);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.btnText
        }, "\u5199"))), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.params
        }, "\u5199\u5165\u53C2\u6570:", writeParams)), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.params
        }, "\u5199\u5165\u7ED3\u679C:", writeResult)), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.TouchableOpacity, {
          style: styles.checkBoxWrap,
          onPress: function onPress() {
            _this6.setState({
              listenerType: 'event'
            });
          }
        }, _react.default.createElement(_reactNative.Image, {
          style: styles.checkBox,
          source: listenerType === 'event' ? _$$_REQUIRE(_dependencyMap[11]) : _$$_REQUIRE(_dependencyMap[12])
        }), _react.default.createElement(_reactNative.Text, {
          style: styles.checkBoxText
        }, "\u4E8B\u4EF6")), _react.default.createElement(_reactNative.TouchableOpacity, {
          style: styles.checkBoxWrap,
          onPress: function onPress() {
            _this6.setState({
              listenerType: 'prop'
            });
          }
        }, _react.default.createElement(_reactNative.Image, {
          style: styles.checkBox,
          source: listenerType === 'event' ? _$$_REQUIRE(_dependencyMap[12]) : _$$_REQUIRE(_dependencyMap[11])
        }), _react.default.createElement(_reactNative.Text, {
          style: styles.checkBoxText
        }, "\u5C5E\u6027"))), _react.default.createElement(_reactNative.View, {
          style: styles.row
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, "siid:"), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 2,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            _this6.setState({
              listenerSiid: Number(text)
            });
          }
        }), _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, listenerType === 'event' ? 'eiid:' : 'piid:'), _react.default.createElement(_reactNative.TextInput, {
          maxLength: 2,
          style: styles.input,
          keyboardType: "numeric",
          underlineColorAndroid: "transparent",
          onChangeText: function onChangeText(text) {
            _this6.setState({
              listenerPiid: Number(text)
            });
          }
        }), _react.default.createElement(_reactNative.TouchableOpacity, {
          style: styles.btn,
          onPress: function onPress() {
            var _this6$state3 = _this6.state,
                listenerSiid = _this6$state3.listenerSiid,
                listenerPiid = _this6$state3.listenerPiid;
            console.log(listenerSiid + ' ' + listenerPiid);
            if (did === '' || listenerSiid === '' || listenerPiid === '') return false;
            return _this6.AddListenerEvent(did, listenerSiid, listenerPiid);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.btnText
        }, "\u8BA2\u9605"))), currentListenerEl, listenerResult.map(function (item, index) {
          return _this6.renderListenerResultItem(item, index);
        }));
      }
    }]);
    return LHSpecDebugPage;
  }(_react.default.Component);

  LHSpecDebugPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: "Spec\u8C03\u8BD5\u9875\u9762",
        style: [{
          backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
          borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
          borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
        }],
        onPressLeft: function onPressLeft() {
          if (navigation.dangerouslyGetParent().state && navigation.dangerouslyGetParent().state.index === 0) {
            _miot.Package.exit();
          } else {
            navigation.goBack();
          }
        }
      }))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHSpecDebugPage);

  exports.default = _default;
},10250,[14305,14320,14323,14371,14377,14386,10297,10033,10074,10004,10178,10253,10256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/checkBox",
    "width": 60,
    "height": 60,
    "scales": [1],
    "hash": "4a5fa99c78ec9378db7c96c443dd5ba5",
    "name": "check1",
    "type": "png"
  });
},10253,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/checkBox",
    "width": 60,
    "height": 60,
    "scales": [1],
    "hash": "d227a99e37864193ff359406534a4e55",
    "name": "check2",
    "type": "png"
  });
},10256,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _miot = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var KKookongApiKey = 'E1F0EEA5B365121753C181D1485A7964';
  var KKookongManagerIdentifier = 'managerIdentify_ac_kookong_xiaomidemo';

  var irdata = _$$_REQUIRE(_dependencyMap[10]);

  var irremote = '10727';

  var LHKooKongDemoPage = function (_React$Component) {
    (0, _inherits2.default)(LHKooKongDemoPage, _React$Component);

    function LHKooKongDemoPage() {
      (0, _classCallCheck2.default)(this, LHKooKongDemoPage);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHKooKongDemoPage).apply(this, arguments));
    }

    (0, _createClass2.default)(LHKooKongDemoPage, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _miot.Service.kookong.removeACManager(KKookongManagerIdentifier);
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var items = [{
          title: '',
          data: [{
            name: 'registerWithKey',
            title: '注册sdk',
            press: function press() {
              _miot.Service.kookong.registerWithKey(KKookongApiKey, null).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'createZipACManager',
            title: '创建 带状态控制的空凋控制实例',
            press: function press() {
              _miot.Service.kookong.createZipACManager(KKookongManagerIdentifier, irremote, irdata, null).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'createNonACManager',
            title: '创建 不带状态控制的空凋控制实例',
            press: function press() {
              _miot.Service.kookong.createNonACManager(KKookongManagerIdentifier, irdata).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'removeZipACManager',
            title: '移除 空凋控制实例 一般在退出插件时候调用',
            press: function press() {
              _miot.Service.kookong.removeACManager(KKookongManagerIdentifier).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'canControlWithType',
            title: '判断是否可以支持 风量 风向 温度 的控制',
            press: function press() {
              _miot.Service.kookong.canControlWithType(KKookongManagerIdentifier, 1).then(function (res) {
                console.log(JSON.stringify(res));
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'getCurrentValueWithType',
            title: '获取当前控制的指定type的值',
            press: function press() {
              _miot.Service.kookong.getCurrentValueWithType(KKookongManagerIdentifier, 1).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'getAllSupportValueWithType',
            title: '获取当前控制的指定type的所有的能控制的值',
            press: function press() {
              _miot.Service.kookong.getAllSupportValueWithType(KKookongManagerIdentifier, 1).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }, {
            name: 'changeStateValueForType',
            title: '发送控制指令',
            press: function press() {
              _miot.Service.kookong.changeStateValueForType(KKookongManagerIdentifier, 1, 1).then(function (res) {
                alert('success:' + JSON.stringify(res));
              }).catch(function (res) {
                alert('fail:' + JSON.stringify(res));
              });
            }
          }]
        }];
        return items;
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1
          }
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }));
      }
    }]);
    return LHKooKongDemoPage;
  }(_react.default.Component);

  exports.default = LHKooKongDemoPage;
},10259,[14305,14320,14323,14371,14377,14386,10297,10033,10074,10178,10262]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "keys": [],
  "id": 10727,
  "type": 2,
  "exts": [
    {
      "tag": 300,
      "value": "9000,4500"
    },
    {
      "tag": 301,
      "value": "610,580"
    },
    {
      "tag": 302,
      "value": "610,1680"
    },
    {
      "tag": 303,
      "value": "4&610,20000|8&610,40000,9000,4500|13&610,20000"
    },
    {
      "tag": 305,
      "value": "482"
    },
    {
      "tag": 306,
      "value": "1"
    },
    {
      "tag": 1001,
      "value": "000400400940"
    },
    {
      "tag": 1002,
      "value": "12490020500211200050490020700200000030"
    },
    {
      "tag": 1003,
      "value": "0401010A01"
    },
    {
      "tag": 1008,
      "value": "0805100C010305070A"
    },
    {
      "tag": 1012,
      "value": "060508014D5001060508044D50040C0508000C10094D50005458090F0204010508034A4C014D5003808401060508024D5002"
    },
    {
      "tag": 1013,
      "value": "090204004A4C00808400090204014A4C01808401090204034A4C03808403090204034A4C03808405"
    },
    {
      "tag": 1015,
      "value": "090102012C3001494A01090102002C3000494A00"
    },
    {
      "tag": 1503,
      "value": "T"
    },
    {
      "tag": 1505,
      "value": "S&0,2,3"
    },
    {
      "tag": 1506,
      "value": "0,1"
    },
    {
      "tag": 1507,
      "value": "0,1"
    },
    {
      "tag": 1509,
      "value": "4&3|13&3"
    },
    {
      "tag": 1511,
      "value": "bytes[17]= (byte)( (bytes[9]&0x0F) +  ( bytes[10]&0x0F) +  (bytes[11]&0x0F) +  (bytes[12]&0x0F) +  ((bytes[14]&0xF0)>>>4) +  ((bytes[16]&0xF0)>>>4)); \t  bytes[17]=(byte)(((byte)0x0A+(byte)(bytes[17]&0x0F))<<4);"
    },
    {
      "tag": 1518,
      "value": "if(exts~=nil) then\nif power==0 then\nlf=exts[21]; \nif lf ==1 then\nbytes[1]=(bytes[1]&0xBF) + 0x40 ;\nbytes[6]=(bytes[6]&0x0F )+ 0x10 ;\nbytes[10]=(bytes[10]&0xBF) + 0x40 ;\nelseif lf ==2 then\nbytes[1]=(bytes[1]&0xBF);\nbytes[6]=(bytes[6]&0x0F);\nbytes[10]=(bytes[10]&0xBF);\nend\nbytes[9]= 0xC0+(((bytes[1]&0x0F)+ (bytes[2]&0x0F) + ( bytes[3]&0x0F) +( bytes[4]&0x0F) +  ((bytes[6]&0xF0)>>4) )<<4) ;\nss=exts[18]; \nif ss ==1 then\nbytes[9]= bytes[9]+0x04;\nend\nend\nif(power==1) then\ntiming_on=exts[9]; \nif((timing_on~=nil)and(timing_on>0) and (timing_on<=1440))then\nbytes1={};\nif timing_on<600  then\nif timing_on%60==0 then\nbytes[2]=bytes[2]+0x80;\nelse \nbytes[2]=bytes[2]+0x90;\nend\nbytes[3]=bytes[3]+(math.floor(timing_on/60));\nelseif timing_on>600 and timing_on<1200  then\nif timing_on%60==0 then\nbytes[2]=bytes[2]+0xA0;\nelse \nbytes[2]=bytes[2]+0xB0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_on/60))-10;\nelseif timing_on>1200 and timing_on<=1440  then\nif timing_on%60==0 then\nbytes[2]=bytes[2]+0xC0;\nelse \nbytes[2]=bytes[2]+0xD0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_on/60))-20;\nend\nbytes1[1]=bytes[1];\nbytes1[2]=bytes[2];\nbytes1[3]=bytes[3];\nbytes1[4]=bytes[4];\nbytes1[5]=bytes[5];\nbytes1[6]=bytes[6];\nbytes1[7]=bytes[7];\nbytes1[8]=bytes[8];\nbytes1[9]= 0xC0+(((bytes1[1]&0x0F)+ (bytes1[2]&0x0F) + ( bytes1[3]&0x0F) +( bytes1[4]&0x0F) +  ((bytes1[6]&0xF0)>>4) )<<4) ;\nbytes1[10]=bytes[1];\nbytes1[11]=bytes[2];\nbytes1[12]=bytes[3];\nbytes1[13]=bytes[4]+0x10;;\nbytes1[14]=bytes[5];\nbytes1[15]=(timing_on&0xFF);\nbytes1[16]=((timing_on&0xF00)>>8);\nbytes1[17]=0;\nbytes1[18]= (bytes1[10]&0x0F) + ( bytes1[11]&0x0F) +   (bytes1[12]&0x0F) +   (bytes1[13]&0x0F) +  ((bytes1[15]&0xF0)>>4);\nbytes1[18]=((0x0A+(bytes1[18]&0x0F))<<4)+0x02;\nbytes1[19]=bytes[1];\nbytes1[20]=bytes[2];\nbytes1[21]=bytes[3];\nbytes1[22]=bytes[4]+0x20;\nbytes1[23]=bytes[5];\nbytes1[24]=bytes[15];\nbytes1[25]=bytes[16];\nbytes1[26]=bytes[17];\nbytes1[27]= (bytes1[19]&0x0F) + ( bytes1[20]&0x0F) +   (bytes1[21]&0x0F) +   (bytes1[22]&0x0F) +  ((bytes1[24]&0xF0)>>4)+((bytes1[26]&0xF0)>>4);\nbytes1[27]=((0x0A+(bytes1[27]&0x0F))<<4);\nbytes=bytes1;\nreturn;\nend\nelseif(power==0) then\ntiming_off=exts[10]; \nif((timing_off~=nil)and(timing_off>0) and (timing_off<=1440))then\nbytes1={};\nif timing_off<600  then\nif timing_off%60==0 then\nbytes[2]=bytes[2]+0x80;\nelse \nbytes[2]=bytes[2]+0x90;\nend\nbytes[3]=bytes[3]+(math.floor(timing_off/60));\nelseif timing_off>600 and timing_off<1200  then\nif timing_off%60==0 then\nbytes[2]=bytes[2]+0xA0;\nelse \nbytes[2]=bytes[2]+0xB0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_off/60))-10;\nelseif timing_off>1200 and timing_off<=1440  then\nif timing_off%60==0 then\nbytes[2]=bytes[2]+0xC0;\nelse \nbytes[2]=bytes[2]+0xD0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_off/60))-20;\nend\nbytes1[1]=bytes[1];\nbytes1[2]=bytes[2];\nbytes1[3]=bytes[3];\nbytes1[4]=bytes[4];\nbytes1[5]=bytes[5];\nbytes1[6]=bytes[6];\nbytes1[7]=bytes[7];\nbytes1[8]=bytes[8];\nbytes1[9]= 0xC0+(((bytes1[1]&0x0F)+ (bytes1[2]&0x0F) + ( bytes1[3]&0x0F) +( bytes1[4]&0x0F) +  ((bytes1[6]&0xF0)>>4) )<<4) ;\nbytes1[10]=bytes[1];\nbytes1[11]=bytes[2];\nbytes1[12]=bytes[3];\nbytes1[13]=bytes[4]+0x10;;\nbytes1[14]=bytes[5];\nbytes1[15]=0;\nbytes1[16]=((timing_off&0x0F)<<4);\nbytes1[17]=((timing_off&0xFF0)>>4);\nbytes1[18]= (bytes1[10]&0x0F) + ( bytes1[11]&0x0F) +   (bytes1[12]&0x0F) +   (bytes1[13]&0x0F) +  ((bytes1[16]&0xF0)>>4)+  ((bytes1[17]&0xF0)>>4);\nbytes1[18]=((0x0A+(bytes1[18]&0x0F))<<4)+0x01;\nbytes1[19]=bytes[1];\nbytes1[20]=bytes[2];\nbytes1[21]=bytes[3];\nbytes1[22]=bytes[4]+0x20;\nbytes1[23]=bytes[5];\nbytes1[24]=bytes[15];\nbytes1[25]=bytes[16];\nbytes1[26]=bytes[17];\nbytes1[27]= (bytes1[19]&0x0F) + ( bytes1[20]&0x0F) +   (bytes1[21]&0x0F) +   (bytes1[22]&0x0F) +  ((bytes1[24]&0xF0)>>4)+((bytes1[26]&0xF0)>>4);\nbytes1[27]=((0x0A+(bytes1[27]&0x0F))<<4);\nbytes=bytes1;\nreturn;\nend\nend\nend\n\nbytes[18]=(bytes[18]&0x0F)+(( 0x0A+(bytes[10]&0x0F) + ( bytes[11]&0x0F) +   (bytes[12]&0x0F) +   (bytes[13]&0x0F) +  ((bytes[15]&0xF0)>>4) +   ((bytes[17]&0xF0)>>4))<<4) ;"
    },
    {
      "tag": 1522,
      "value": "if(exts~=nil) then\nif power==0 then\nlf=exts[21]; \nif lf ==1 then\nbytes[1]=bit32.band(bytes[1],0xBF) + 0x40 ;\nbytes[6]=bit32.band(bytes[6],0x0F )+ 0x10 ;\nbytes[10]=bit32.band(bytes[10],0xBF) + 0x40 ;\nelseif lf ==2 then\nbytes[1]=bit32.band(bytes[1],0xBF);\nbytes[6]=bit32.band(bytes[6],0x0F);\nbytes[10]=bit32.band(bytes[10],0xBF);\nend\nbytes[9]= 0xC0+bit32.lshift((bit32.band(bytes[1],0x0F)+ bit32.band(bytes[2],0x0F) + bit32.band( bytes[3],0x0F) +bit32.band( bytes[4],0x0F) +  bit32.rshift(bit32.band(bytes[6],0xF0),4) ),4) ;\nss=exts[18]; \nif ss ==1 then\nbytes[9]= bytes[9]+0x04;\nend\nend\nif(power==1) then\ntiming_on=exts[9]; \nif((timing_on~=nil)and(timing_on>0) and (timing_on<=1440))then\nbytes1={};\nif timing_on<600  then\nif timing_on%60==0 then\nbytes[2]=bytes[2]+0x80;\nelse \nbytes[2]=bytes[2]+0x90;\nend\nbytes[3]=bytes[3]+(math.floor(timing_on/60));\nelseif timing_on>600 and timing_on<1200  then\nif timing_on%60==0 then\nbytes[2]=bytes[2]+0xA0;\nelse \nbytes[2]=bytes[2]+0xB0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_on/60))-10;\nelseif timing_on>1200 and timing_on<=1440  then\nif timing_on%60==0 then\nbytes[2]=bytes[2]+0xC0;\nelse \nbytes[2]=bytes[2]+0xD0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_on/60))-20;\nend\nbytes1[1]=bytes[1];\nbytes1[2]=bytes[2];\nbytes1[3]=bytes[3];\nbytes1[4]=bytes[4];\nbytes1[5]=bytes[5];\nbytes1[6]=bytes[6];\nbytes1[7]=bytes[7];\nbytes1[8]=bytes[8];\nbytes1[9]= 0xC0+bit32.lshift((bit32.band(bytes1[1],0x0F)+ bit32.band(bytes1[2],0x0F) + bit32.band( bytes1[3],0x0F) +bit32.band( bytes1[4],0x0F) +  bit32.rshift(bit32.band(bytes1[6],0xF0),4) ),4) ;\nbytes1[10]=bytes[1];\nbytes1[11]=bytes[2];\nbytes1[12]=bytes[3];\nbytes1[13]=bytes[4]+0x10;;\nbytes1[14]=bytes[5];\nbytes1[15]=bit32.band(timing_on,0xFF);\nbytes1[16]=bit32.rshift(bit32.band(timing_on,0xF00),8);\nbytes1[17]=0;\nbytes1[18]= bit32.band(bytes1[10],0x0F) + bit32.band( bytes1[11],0x0F) +   bit32.band(bytes1[12],0x0F) +   bit32.band(bytes1[13],0x0F) +  bit32.rshift(bit32.band(bytes1[15],0xF0),4);\nbytes1[18]=bit32.lshift((0x0A+bit32.band(bytes1[18],0x0F)),4)+0x02;\nbytes1[19]=bytes[1];\nbytes1[20]=bytes[2];\nbytes1[21]=bytes[3];\nbytes1[22]=bytes[4]+0x20;\nbytes1[23]=bytes[5];\nbytes1[24]=bytes[15];\nbytes1[25]=bytes[16];\nbytes1[26]=bytes[17];\nbytes1[27]= bit32.band(bytes1[19],0x0F) + bit32.band( bytes1[20],0x0F) +   bit32.band(bytes1[21],0x0F) +   bit32.band(bytes1[22],0x0F) +  bit32.rshift(bit32.band(bytes1[24],0xF0),4)+bit32.rshift(bit32.band(bytes1[26],0xF0),4);\nbytes1[27]=bit32.lshift((0x0A+bit32.band(bytes1[27],0x0F)),4);\nbytes=bytes1;\nreturn;\nend\nelseif(power==0) then\ntiming_off=exts[10]; \nif((timing_off~=nil)and(timing_off>0) and (timing_off<=1440))then\nbytes1={};\nif timing_off<600  then\nif timing_off%60==0 then\nbytes[2]=bytes[2]+0x80;\nelse \nbytes[2]=bytes[2]+0x90;\nend\nbytes[3]=bytes[3]+(math.floor(timing_off/60));\nelseif timing_off>600 and timing_off<1200  then\nif timing_off%60==0 then\nbytes[2]=bytes[2]+0xA0;\nelse \nbytes[2]=bytes[2]+0xB0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_off/60))-10;\nelseif timing_off>1200 and timing_off<=1440  then\nif timing_off%60==0 then\nbytes[2]=bytes[2]+0xC0;\nelse \nbytes[2]=bytes[2]+0xD0;\nend\nbytes[3]=bytes[3]+(math.floor(timing_off/60))-20;\nend\nbytes1[1]=bytes[1];\nbytes1[2]=bytes[2];\nbytes1[3]=bytes[3];\nbytes1[4]=bytes[4];\nbytes1[5]=bytes[5];\nbytes1[6]=bytes[6];\nbytes1[7]=bytes[7];\nbytes1[8]=bytes[8];\nbytes1[9]= 0xC0+bit32.lshift((bit32.band(bytes1[1],0x0F)+ bit32.band(bytes1[2],0x0F) + bit32.band( bytes1[3],0x0F) +bit32.band( bytes1[4],0x0F) +  bit32.rshift(bit32.band(bytes1[6],0xF0),4) ),4) ;\nbytes1[10]=bytes[1];\nbytes1[11]=bytes[2];\nbytes1[12]=bytes[3];\nbytes1[13]=bytes[4]+0x10;;\nbytes1[14]=bytes[5];\nbytes1[15]=0;\nbytes1[16]=bit32.lshift(bit32.band(timing_off,0x0F),4);\nbytes1[17]=bit32.rshift(bit32.band(timing_off,0xFF0),4);\nbytes1[18]= bit32.band(bytes1[10],0x0F) + bit32.band( bytes1[11],0x0F) +   bit32.band(bytes1[12],0x0F) +   bit32.band(bytes1[13],0x0F) +  bit32.rshift(bit32.band(bytes1[16],0xF0),4)+  bit32.rshift(bit32.band(bytes1[17],0xF0),4);\nbytes1[18]=bit32.lshift((0x0A+bit32.band(bytes1[18],0x0F)),4)+0x01;\nbytes1[19]=bytes[1];\nbytes1[20]=bytes[2];\nbytes1[21]=bytes[3];\nbytes1[22]=bytes[4]+0x20;\nbytes1[23]=bytes[5];\nbytes1[24]=bytes[15];\nbytes1[25]=bytes[16];\nbytes1[26]=bytes[17];\nbytes1[27]= bit32.band(bytes1[19],0x0F) + bit32.band( bytes1[20],0x0F) +   bit32.band(bytes1[21],0x0F) +   bit32.band(bytes1[22],0x0F) +  bit32.rshift(bit32.band(bytes1[24],0xF0),4)+bit32.rshift(bit32.band(bytes1[26],0xF0),4);\nbytes1[27]=bit32.lshift((0x0A+bit32.band(bytes1[27],0x0F)),4);\nbytes=bytes1;\nreturn;\nend\nend\nend\n\nbytes[18]=bit32.band(bytes[18],0x0F)+bit32.lshift(( 0x0A+bit32.band(bytes[10],0x0F) + bit32.band( bytes[11],0x0F) +   bit32.band(bytes[12],0x0F) +   bit32.band(bytes[13],0x0F) +  bit32.rshift(bit32.band(bytes[15],0xF0),4) +   bit32.rshift(bit32.band(bytes[17],0xF0),4)),4) ;"
    },
    {
      "tag": 99999,
      "value": "00120ED8010000000017001600170040010004015A00AD0404030D0316050400170301090800170602015A00AD050D0017030100"
    }
  ],
  "frequency": 38000
};
},10262,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNativeUiKitten = _$$_REQUIRE(_dependencyMap[11]);

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[13]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[14]);

  var _Images = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var titleHeight = _LHCommonFunction.LHUiUtils.TitleBarHeight;

  var styles = _reactNative.StyleSheet.create({
    titleBarContainer: {
      width: width,
      flexDirection: 'row',
      alignItems: 'flex-end',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      height: (_reactNative.StatusBar.currentHeight || 0) + titleHeight
    },
    textContainer: {
      height: titleHeight,
      flex: 1,
      alignItems: 'stretch',
      justifyContent: 'center'
    },
    titleText: {
      color: '#000000cc',
      fontSize: 15,
      textAlignVertical: 'center',
      textAlign: 'center',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      fontWeight: 'bold'
    },
    subtitleText: {
      color: '#00000088',
      fontSize: 12,
      textAlignVertical: 'center',
      textAlign: 'center',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    leftRightText: {
      flexDirection: 'column',
      backgroundColor: '#0000',
      alignItems: 'center',
      justifyContent: 'center',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    leftRightTextFontStyle: {
      color: '#00000088',
      fontSize: 14,
      textAlignVertical: 'center',
      textAlign: 'center'
    }
  });

  var LHTitleBarCustom = function (_Component) {
    (0, _inherits2.default)(LHTitleBarCustom, _Component);

    function LHTitleBarCustom(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHTitleBarCustom);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHTitleBarCustom).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(LHTitleBarCustom, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        if (_reactNative.Platform.OS === 'android') {
          _reactNative.StatusBar.setTranslucent(true);
        }
      }
    }, {
      key: "getDeafultBackBtn",
      value: function getDeafultBackBtn(position, btns, btn, index) {
        var backBtnIcon = this.props.backBtnIcon;
        var resources = this.initIconResources();
        return _react.default.createElement(_LHCommonUI.LHImageButton, {
          onPress: btn.press,
          key: 'btn_back_' + index,
          testID: "navBackBtn",
          style: [this.initIconResources().imgStyle, {
            height: resources.imgHeight
          }, {
            marginRight: 0
          }, btn.style],
          source: backBtnIcon === 'white' || btn.btnIconType === 'white' ? resources.backBtnIconWhite : resources.backBtnIconBlack,
          highlightedSource: backBtnIcon === 'white' || btn.btnIconType === 'white' ? resources.backBtnIconWhitePress : resources.backBtnIconBlackPress
        });
      }
    }, {
      key: "getDeafultMoreBtn",
      value: function getDeafultMoreBtn(position, btns, btn, index) {
        var resources = this.initIconResources();
        return _react.default.createElement(_LHCommonUI.LHImageButton, {
          onPress: btn.press,
          testID: "navMoreBtn",
          key: 'btn_more_' + index,
          style: [this.initIconResources().imgStyle, {
            height: resources.imgHeight,
            marginRight: position === 'right' ? index !== btns.length - 1 ? 0 : resources.leftRightBtnMargin : resources.btnGap,
            marginLeft: position === 'left' ? index === 0 ? resources.leftRightBtnMargin : 0 : resources.btnGap
          }, btn.style],
          source: btn.btnIconType === 'white' ? resources.moreIconWhite : resources.moreIconBlack,
          highlightedSource: btn.btnIconType === 'white' ? resources.moreIconWhitePress : resources.moreIconBlackPress
        });
      }
    }, {
      key: "getDeafultShareBtn",
      value: function getDeafultShareBtn(position, btns, btn, index) {
        var resources = this.initIconResources();
        return _react.default.createElement(_LHCommonUI.LHImageButton, {
          onPress: btn.press,
          testID: "navShareBtn",
          key: 'btn_share_' + index,
          style: [this.initIconResources().imgStyle, {
            marginRight: position === 'right' ? index !== btns.length - 1 ? 0 : resources.leftRightBtnMargin : resources.btnGap,
            marginLeft: position === 'left' ? index === 0 ? resources.leftRightBtnMargin : 0 : resources.btnGap,
            height: resources.imgHeight
          }, btn.style],
          source: btn.btnIconType === 'white' ? resources.shareIconWhite : resources.shareIconBlack,
          highlightedSource: btn.btnIconType === 'white' ? resources.shareIconWhitePress : resources.shareIconBlackPress
        });
      }
    }, {
      key: "getDeafultCloseBtn",
      value: function getDeafultCloseBtn(position, btns, btn, index) {
        var resources = this.initIconResources();
        return _react.default.createElement(_LHCommonUI.LHImageButton, {
          onPress: btn.press,
          testID: "navBackBtn",
          key: 'btn_close_' + index,
          style: [this.initIconResources().imgStyle, {
            marginRight: position === 'right' ? index !== btns.length - 1 ? 0 : resources.leftRightBtnMargin : resources.btnGap,
            marginLeft: position === 'left' ? index === 0 ? resources.leftRightBtnMargin : 0 : resources.btnGap,
            height: resources.imgHeight
          }, btn.style],
          source: btn.btnIconType === 'white' ? resources.closeIconWhite : resources.closeIconBlack,
          highlightedSource: btn.btnIconType === 'white' ? resources.closeIconWhitePress : resources.closeIconBlackPress
        });
      }
    }, {
      key: "getDeafultCompleteBtn",
      value: function getDeafultCompleteBtn(position, btns, btn, index) {
        var resources = this.initIconResources();
        return _react.default.createElement(_LHCommonUI.LHImageButton, {
          onPress: btn.press,
          testID: "navCompleteBtn",
          key: 'btn_complete_' + index,
          style: [this.initIconResources().imgStyle, {
            marginRight: position === 'right' ? index !== btns.length - 1 ? 0 : resources.leftRightBtnMargin : resources.btnGap,
            marginLeft: position === 'left' ? index === 0 ? resources.leftRightBtnMargin : 0 : resources.btnGap,
            height: resources.imgHeight
          }, btn.style],
          source: btn.btnIconType === 'white' ? btn.disable ? resources.completeIconWhiteDisable : resources.completeIconWhite : btn.disable ? resources.completeIconBlackDisable : resources.completeIconBlack,
          highlightedSource: btn.btnIconType === 'white' ? btn.disable ? resources.completeIconWhiteDisable : resources.completeIconWhitePress : btn.disable ? resources.completeIconBlackDisable : resources.completeIconBlackPress
        });
      }
    }, {
      key: "getDefaultEditBtn",
      value: function getDefaultEditBtn(position, btns, btn, index) {
        var resources = this.initIconResources();
        return _react.default.createElement(_LHCommonUI.LHImageButton, {
          onPress: btn.press,
          testID: "navEditBtn",
          key: 'btn_edit_' + index,
          style: [this.initIconResources().imgStyle, {
            marginRight: position === 'right' ? index !== btns.length - 1 ? 0 : resources.leftRightBtnMargin : resources.btnGap,
            marginLeft: position === 'left' ? index === 0 ? resources.leftRightBtnMargin : 0 : resources.btnGap,
            height: resources.imgHeight
          }, btn.style],
          source: btn.btnIconType === 'white' ? btn.disable ? resources.editIconWhiteDisable : resources.editIconWhite : btn.disable ? resources.editIconBlackDisable : resources.editIconBlack,
          highlightedSource: btn.btnIconType === 'white' ? btn.disable ? resources.editIconWhiteDisable : resources.editIconWhitePress : btn.disable ? resources.editIconBlackDisable : resources.editIconBlackPress
        });
      }
    }, {
      key: "balanceLeftRightButtons",
      value: function balanceLeftRightButtons(leftButtons, rightBtns) {
        var gap = leftButtons.length - rightBtns.length;

        for (var i = 0; i < Math.abs(gap); i += 1) {
          var btn = {
            text: '',
            press: function press() {},
            source: this.initIconResources().backBtnIconBlack,
            style: {
              opacity: 0
            }
          };
          gap > 0 ? rightBtns.push(btn) : leftButtons.push(btn);
        }
      }
    }, {
      key: "initIconResources",
      value: function initIconResources() {
        var useOldIcon = this.props.useOldIcon;
        var btnGap;
        var leftRightBtnMargin;
        var imgHeight;
        var dotWidth;
        var result;

        if (_miot.API_LEVEL < 10021 || useOldIcon) {
          imgHeight = 28;
          btnGap = 14;
          leftRightBtnMargin = 14;
          dotWidth = 10;
          result = {
            backBtnIconWhite: _$$_REQUIRE(_dependencyMap[16]),
            backBtnIconWhitePress: _$$_REQUIRE(_dependencyMap[17]),
            backBtnIconBlack: _$$_REQUIRE(_dependencyMap[18]),
            backBtnIconBlackPress: _$$_REQUIRE(_dependencyMap[19]),
            dotIcon: _$$_REQUIRE(_dependencyMap[20]),
            moreIconWhite: _$$_REQUIRE(_dependencyMap[21]),
            moreIconWhitePress: _$$_REQUIRE(_dependencyMap[22]),
            moreIconBlack: _$$_REQUIRE(_dependencyMap[23]),
            moreIconBlackPress: _$$_REQUIRE(_dependencyMap[24]),
            shareIconWhite: _$$_REQUIRE(_dependencyMap[25]),
            shareIconWhitePress: _$$_REQUIRE(_dependencyMap[26]),
            shareIconBlack: _$$_REQUIRE(_dependencyMap[27]),
            shareIconBlackPress: _$$_REQUIRE(_dependencyMap[28]),
            closeIconWhite: _$$_REQUIRE(_dependencyMap[29]),
            closeIconWhitePress: _$$_REQUIRE(_dependencyMap[29]),
            closeIconBlack: _$$_REQUIRE(_dependencyMap[29]),
            closeIconBlackPress: _$$_REQUIRE(_dependencyMap[29]),
            completeIconWhite: _$$_REQUIRE(_dependencyMap[30]),
            completeIconWhiteDisable: _$$_REQUIRE(_dependencyMap[30]),
            completeIconWhitePress: _$$_REQUIRE(_dependencyMap[30]),
            completeIconBlack: _$$_REQUIRE(_dependencyMap[30]),
            completeIconBlackPress: _$$_REQUIRE(_dependencyMap[30]),
            completeIconBlackDisable: _$$_REQUIRE(_dependencyMap[30])
          };
        } else {
          imgHeight = 40;
          dotWidth = 40;
          btnGap = 0;
          leftRightBtnMargin = 9;
          result = {
            backBtnIconWhite: _Images.default.navigation.dark.back.normal,
            backBtnIconWhitePress: _Images.default.navigation.dark.back.press,
            backBtnIconBlack: _Images.default.navigation.light.back.normal,
            backBtnIconBlackPress: _Images.default.navigation.light.back.press,
            dotIcon: _Images.default.navigation.dot,
            moreIconWhite: _Images.default.navigation.dark.more.normal,
            moreIconWhitePress: _Images.default.navigation.dark.more.press,
            moreIconBlack: _Images.default.navigation.light.more.normal,
            moreIconBlackPress: _Images.default.navigation.light.more.press,
            shareIconWhite: _Images.default.navigation.dark.share.normal,
            shareIconWhitePress: _Images.default.navigation.dark.share.press,
            shareIconBlack: _Images.default.navigation.light.share.normal,
            shareIconBlackPress: _Images.default.navigation.light.share.press,
            closeIconWhite: _Images.default.navigation.dark.close.normal,
            closeIconWhitePress: _Images.default.navigation.dark.close.press,
            closeIconBlack: _Images.default.navigation.light.close.normal,
            closeIconBlackPress: _Images.default.navigation.light.close.press,
            completeIconWhite: _Images.default.navigation.dark.complete.normal,
            completeIconWhiteDisable: _Images.default.navigation.dark.complete.disable,
            completeIconWhitePress: _Images.default.navigation.dark.complete.press,
            completeIconBlack: _Images.default.navigation.light.complete.normal,
            completeIconBlackPress: _Images.default.navigation.light.complete.press,
            completeIconBlackDisable: _Images.default.navigation.light.complete.disable,
            editIconWhite: _$$_REQUIRE(_dependencyMap[31]),
            editIconWhiteDisable: _$$_REQUIRE(_dependencyMap[32]),
            editIconWhitePress: _$$_REQUIRE(_dependencyMap[33]),
            editIconBlack: _$$_REQUIRE(_dependencyMap[31]),
            editIconBlackPress: _$$_REQUIRE(_dependencyMap[33]),
            editIconBlackDisable: _$$_REQUIRE(_dependencyMap[32])
          };
        }

        (0, _extends2.default)(result, {
          imgHeight: imgHeight,
          btnGap: btnGap,
          leftRightBtnMargin: leftRightBtnMargin,
          imgStyle: {
            width: imgHeight,
            height: imgHeight,
            resizeMode: 'contain',
            marginLeft: leftRightBtnMargin,
            marginTop: (titleHeight - imgHeight) / 2,
            marginBottom: (titleHeight - imgHeight) / 2,
            marginRight: leftRightBtnMargin
          },
          dotStyle: {
            position: 'absolute',
            width: dotWidth,
            height: dotWidth,
            resizeMode: 'contain',
            right: leftRightBtnMargin,
            top: _LHCommonFunction.LHDeviceUtils.statusBarHeight + (titleHeight - imgHeight) / 2
          }
        });
        return result;
      }
    }, {
      key: "renderBtn",
      value: function renderBtn(position, btns, btn, index) {
        var resources = this.initIconResources();
        var type = btn.type;

        if (type === 'deafultBackBtn' || type === 'defaultBackBtn') {
          return this.getDeafultBackBtn(position, btns, btn, index);
        } else if (type === 'deafultShareBtn' || type === 'defaultShareBtn') {
          return this.getDeafultShareBtn(position, btns, btn, index);
        } else if (type === 'deafultMoreBtn' || type === 'defaultMoreBtn') {
          return this.getDeafultMoreBtn(position, btns, btn, index);
        } else if (type === 'deafultCloseBtn' || type === 'defaultCloseBtn') {
          return this.getDeafultCloseBtn(position, btns, btn, index);
        } else if (type === 'deafultCompleteBtn' || type === 'defaultCompleteBtn') {
          return this.getDeafultCompleteBtn(position, btns, btn, index);
        } else if (type === 'defaultEditBtn') {
          return this.getDefaultEditBtn(position, btns, btn, index);
        } else {
          return btn.source ? _react.default.createElement(_LHCommonUI.LHImageButton, {
            testID: btn.testID,
            onPress: btn.press,
            key: position + index,
            style: [this.initIconResources().imgStyle, {
              height: resources.imgHeight,
              marginRight: position === 'right' ? index !== btns.length - 1 ? 0 : resources.leftRightBtnMargin : resources.btnGap,
              marginLeft: position === 'left' ? index === 0 ? resources.leftRightBtnMargin : 0 : resources.btnGap
            }, btn.style],
            source: btn.source,
            highlightedSource: btn.highlightedSource
          }) : _react.default.createElement(_reactNativeUiKitten.RkButton, {
            onPress: btn.press,
            key: position + index,
            contentStyle: [styles.leftRightTextFontStyle, btn.style],
            style: [styles.leftRightText, {
              height: titleHeight,
              width: resources.imgHeight + resources.btnGap * 2
            }, btn.textContainerStyle]
          }, btn.text);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var resources = this.initIconResources();
        var _this$props = this.props,
            onPressLeft = _this$props.onPressLeft,
            statusBarStyle = _this$props.statusBarStyle;

        var leftButtons = _LHCommonFunction.CommonMethod.DeepClone(this.props.leftButtons || [], []);

        var rightBtns = _LHCommonFunction.CommonMethod.DeepClone(this.props.rightButtons || [], []);

        var rightButtons = [];

        if (onPressLeft && leftButtons.length === 0) {
          leftButtons.push({
            type: 'deafultBackBtn',
            press: onPressLeft
          });
        }

        this.balanceLeftRightButtons(leftButtons, rightBtns);

        for (var i = rightBtns.length - 1; i > -1; i -= 1) {
          rightButtons.push(rightBtns[i]);
        }

        var _this$props2 = this.props,
            containerStyle = _this$props2.containerStyle,
            style = _this$props2.style,
            titleStyle = _this$props2.titleStyle,
            onPressTitle = _this$props2.onPressTitle,
            title = _this$props2.title,
            subTitle = _this$props2.subTitle,
            subTitleStyle = _this$props2.subTitleStyle,
            showDot = _this$props2.showDot,
            showSeparator = _this$props2.showSeparator;
        var subTitleEle = subTitle ? _react.default.createElement(_reactNative.Text, {
          numberOfLines: 1,
          style: [styles.subtitleText, subTitleStyle],
          onPress: onPressTitle
        }, subTitle) : null;
        return _react.default.createElement(_reactNative.View, {
          style: containerStyle
        }, _react.default.createElement(_reactNavigation.SafeAreaView, {
          style: [styles.titleBarContainer, style]
        }, _react.default.createElement(_reactNative.StatusBar, {
          backgroundColor: "transparent",
          barStyle: statusBarStyle === 'light' ? 'light-content' : 'dark-content'
        }), leftButtons.map(function (item, i) {
          return _this2.renderBtn('left', leftButtons, item, i);
        }), _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer]
        }, _react.default.createElement(_reactNative.Text, {
          numberOfLines: 1,
          style: [styles.titleText, titleStyle],
          onPress: onPressTitle,
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('navTitle'),
          testID: "navTitle"
        }, title), subTitleEle), rightButtons.map(function (item, i) {
          return _this2.renderBtn('right', rightButtons, item, i);
        }), showDot && _react.default.createElement(_reactNative.Image, {
          pointerEvents: "none",
          style: resources.dotStyle,
          source: resources.dotIcon
        })), showSeparator ? _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: {
            alignSelf: 'flex-end'
          }
        }) : null);
      }
    }]);
    return LHTitleBarCustom;
  }(_react.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHTitleBarCustom);

  exports.default = _default;
},10265,[14308,14305,14344,14320,14323,14371,14377,14386,10297,10033,10918,11251,10074,10004,10178,10308,10239,10242,10158,10161,10170,10266,10269,10173,10176,10278,10281,10185,10188,10268,10271,10274,10277,10280]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "ff79b74a7b284b15dc7aeb051e6e3c13",
    "name": "lumi_navigation_close",
    "type": "png"
  });
},10268,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "0f13c7ef095b1d54a30a8f2f6d517735",
    "name": "lumi_navigation_confirm",
    "type": "png"
  });
},10271,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/edit_icon",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "dc4140dcfa147cea19abc0cd6645881b",
    "name": "lumi_gateway_a_mode_edit",
    "type": "png"
  });
},10274,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/edit_icon",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "73fece056660f59756cf619af75fd92f",
    "name": "lumi_gateway_a_mode_edit_disable",
    "type": "png"
  });
},10277,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/edit_icon",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "9c17932b38bc03bdb1b7537dc3c88d8a",
    "name": "lumi_gateway_a_mode_edit_press",
    "type": "png"
  });
},10280,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var LHImageButton = function (_React$Component) {
    (0, _inherits2.default)(LHImageButton, _React$Component);

    function LHImageButton(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHImageButton);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHImageButton).call(this, props));
      _this.state = {
        buttonPressed: false
      };
      return _this;
    }

    (0, _createClass2.default)(LHImageButton, [{
      key: "buttonPressIn",
      value: function buttonPressIn() {
        this.setState({
          buttonPressed: true
        });
      }
    }, {
      key: "buttonPressOut",
      value: function buttonPressOut() {
        this.setState({
          buttonPressed: false
        });
      }
    }, {
      key: "isButtonPressed",
      value: function isButtonPressed() {
        var buttonPressed = this.state.buttonPressed;
        return buttonPressed;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var source = this.props.source;
        var _this$props = this.props,
            highlightedSource = _this$props.highlightedSource,
            style = _this$props.style,
            _onPress = _this$props.onPress,
            testID = _this$props.testID;

        if (this.isButtonPressed() && highlightedSource) {
          source = highlightedSource;
        }

        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress() {
            if (typeof _onPress === 'function') _onPress();
          },
          onPressIn: function onPressIn() {
            _this2.buttonPressIn();
          },
          onPressOut: function onPressOut() {
            _this2.buttonPressOut();
          },
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID),
          testID: testID || ''
        }, _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, {
          style: style,
          source: source
        })));
      }
    }]);
    return LHImageButton;
  }(_react.default.Component);

  LHImageButton.initialState = {
    buttonPressed: false
  };
  LHImageButton.defaultProps = {
    source: null,
    highlightedSource: null,
    onPress: null
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHImageButton);

  exports.default = _default;
},10283,[14305,14320,14323,14371,14377,14386,10297,10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var styles = _reactNative.StyleSheet.create({
    separatorContainer: {
      height: _LHCommonFunction.LHUiUtils.GetPx(0.5),
      overflow: 'hidden',
      backgroundColor: 'transparent',
      flexDirection: 'row'
    },
    separatorStyle: {
      height: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
      alignSelf: 'center',
      flex: 1
    }
  });

  var LHSeparator = function (_React$PureComponent) {
    (0, _inherits2.default)(LHSeparator, _React$PureComponent);

    function LHSeparator() {
      (0, _classCallCheck2.default)(this, LHSeparator);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSeparator).apply(this, arguments));
    }

    (0, _createClass2.default)(LHSeparator, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            separatorContainerStyle = _this$props.separatorContainerStyle;
        return _reactNative.Platform.select({
          android: _react.default.createElement(_reactNative.View, {
            style: [styles.separatorContainer, separatorContainerStyle]
          }, _react.default.createElement(_reactNative.View, {
            style: [styles.separatorStyle, style]
          })),
          ios: _react.default.createElement(_reactNative.View, {
            style: {
              flexDirection: 'row'
            }
          }, _react.default.createElement(_reactNative.View, {
            style: [styles.separatorStyle, style]
          }))
        });
      }
    }]);
    return LHSeparator;
  }(_react.default.PureComponent);

  exports.default = LHSeparator;
},10286,[14305,14320,14323,14371,14377,14386,10297,10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[11]);

  var styles = _reactNative.StyleSheet.create({
    title: {
      color: '#000',
      fontSize: 15,
      lineHeight: 21,
      textAlign: 'center',
      paddingTop: 23,
      fontWeight: 'bold',
      letterSpacing: 0,
      paddingHorizontal: 64
    },
    message: {
      color: '#666',
      fontSize: 15,
      lineHeight: 20,
      textAlign: 'center',
      paddingTop: 22,
      letterSpacing: 0,
      paddingHorizontal: 29
    },
    bottomGap: {
      height: 27
    },
    btn: {
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      color: '#666',
      fontSize: 14,
      lineHeight: 19,
      letterSpacing: 0,
      fontWeight: 'bold'
    }
  });

  var LHMessageDialog = function (_React$Component) {
    (0, _inherits2.default)(LHMessageDialog, _React$Component);

    function LHMessageDialog(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHMessageDialog);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHMessageDialog).call(this, props, context));
      _this.state = {
        visible: false
      };
      return _this;
    }

    (0, _createClass2.default)(LHMessageDialog, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var visible = this.state.visible;

        if (newProps.visible !== visible) {
          this.setState({
            visible: newProps.visible
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "closeDialog",
      value: function closeDialog() {
        this.setState({
          visible: false
        });
        var onDismiss = this.props.onDismiss;

        if (typeof onDismiss === 'function') {
          onDismiss();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            closeAfterBtnClick = _this$props.closeAfterBtnClick,
            buttons = _this$props.buttons,
            title = _this$props.title,
            message = _this$props.message,
            titleStyle = _this$props.titleStyle,
            messageStyle = _this$props.messageStyle;
        var visible = this.state.visible;
        var btns = null;

        if (buttons && buttons.length > 0) {
          btns = _LHCommonFunction.CommonMethod.DeepClone(buttons, []);

          var _loop = function _loop(i, len) {
            if (closeAfterBtnClick) {
              btns[i].callback = function () {
                _this2.closeDialog();

                if (typeof buttons[i].callback === 'function') buttons[i].callback();
              };
            }

            btns[i].style = (0, _extends2.default)({}, _reactNative.StyleSheet.flatten(styles.btn), _reactNative.StyleSheet.flatten(btns[i].style));
          };

          for (var i = 0, len = btns.length; i < len; i += 1) {
            _loop(i, len);
          }
        }

        return _react.default.createElement(_Dialog.AbstractDialog, {
          ref: function ref(Dialog) {
            _this2.Dialog = Dialog;
          },
          style: {
            bottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight || _LHCommonFunction.LHUiUtils.GetPx(10)
          },
          visible: visible,
          showTitle: false,
          canDismiss: false,
          onDismiss: function onDismiss() {
            _this2.closeDialog();
          },
          buttons: btns
        }, _react.default.createElement(_reactNative.View, {
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('LHMessageDialog'),
          testID: "LHMessageDialog"
        }, title ? _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.title, titleStyle]
        }, title) : null, message ? _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.message, messageStyle]
        }, message) : null, _react.default.createElement(_reactNative.View, {
          style: styles.bottomGap
        }), _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: [{
            alignSelf: 'flex-end',
            height: 0.6
          }]
        })));
      }
    }]);
    return LHMessageDialog;
  }(_react.default.Component);

  LHMessageDialog.defaultProps = {
    closeAfterBtnClick: true
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHMessageDialog);

  exports.default = _default;
},10289,[14305,14344,14320,14323,14371,14377,14386,10297,10033,10755,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var LHText = function (_React$Component) {
    (0, _inherits2.default)(LHText, _React$Component);

    function LHText(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHText);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHText).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(LHText, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style;
        var props = (0, _objectSpread2.default)({}, this.props);
        delete props.style;

        if (props.testID) {
          props.accessibilityLabel = _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(props.testID);
        }

        return _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, props, {
          style: [{
            fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
          }, _reactNative.StyleSheet.flatten(style)]
        }), children);
      }
    }]);
    return LHText;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHText);

  exports.default = _default;
},10292,[14305,14344,14314,14320,14323,14371,14377,14386,10297,10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[12]);

  var _LHSubDeviceListStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  function LHSubDeviceModel(device) {
    var pid = device.type,
        did = device.deviceID,
        model = device.model,
        iconURL = device.iconURL,
        title = device.name,
        isOnline = device.isOnline;
    return {
      pid: pid,
      did: did,
      model: model,
      iconURL: iconURL,
      title: title,
      subTitle: isOnline ? '' : _LHCommonFunction.LHCommonLocalizableString.sub_device_list_device_offline,
      selected: false
    };
  }

  var cacheKey = 'LHSubDeviceListKey';
  var Instance;

  var LHSubDevicesListPage = function (_React$Component) {
    (0, _inherits2.default)(LHSubDevicesListPage, _React$Component);
    (0, _createClass2.default)(LHSubDevicesListPage, [{
      key: "renameDevice",
      value: function renameDevice(device, onSuccess, onFail) {
        var navigation = this.props.navigation;
        var pageType = navigation.getParam('pageType');
        var newName = device.title || '';

        _LHCommonFunction.LHDialogUtils.ShowInputDialog({
          inputs: [{
            type: 'simple',
            defaultValue: device.title || '',
            onChangeText: function onChangeText(name) {
              newName = name;
            },
            textInputProps: {
              autoFocus: true
            }
          }],
          visible: true,
          title: _LHCommonFunction.LHCommonLocalizableString.common_button_changename,
          confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
          confirmStyle: {
            color: pageType === 'hub' ? '#0289FF' : '#01ACFF'
          },
          cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
          onConfirm: function onConfirm() {
            _LHCommonFunction.LHDialogUtils.HideInputDialog();

            if (newName === '' || newName === undefined || newName === null) {
              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.sub_device_list_name_cant_empty);

              return;
            } else if (_LHCommonFunction.LHStringUtils.isContainsEmoji(newName)) {
              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.sub_device_list_name_cant_support_emoji);

              return;
            } else if (_LHCommonFunction.LHStringUtils.isContainsNotSupportChar(newName)) {
              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.sub_device_list_name_cant_support_special_char);

              return;
            } else if (newName.length > 40) {
              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.sub_device_list_name_cant_more_forty);

              return;
            } else if (newName === device.title) {
              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.sub_device_list_name_cant_same);

              return;
            }

            _LHCommonFunction.LHMiServer.ChangeDeviceName(newName, device.did, function () {
              if (typeof onSuccess === 'function') onSuccess(newName);
            }, function (err) {
              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);

              if (typeof onFail === 'function') onFail(err);
            });
          }
        });
      }
    }], [{
      key: "deleteDevices",
      value: function deleteDevices(devices, onSuccess, onFail) {
        var _this2 = this;

        if (devices.length === 0) return;
        var message = devices.length === 1 ? _LHCommonFunction.LHCommonLocalizableString.common_setting_device_delete_confirm : _LHCommonFunction.LHCommonLocalizableString.sub_device_list_delete_multi_device.replace('{XX}', devices.length);

        _LHCommonFunction.LHDialogUtils.MessageDialogShow({
          message: message,
          messageStyle: {
            textAlign: 'center'
          },
          confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
          cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
          confirmStyle: {
            color: _LHCommonFunction.LHUiUtils.MiJiaBlue
          },
          onConfirm: function onConfirm() {
            setTimeout(function () {
              var deleteDevicesData = [];

              for (var i = 0, len = devices.length; i < len; i += 1) {
                deleteDevicesData.push({
                  did: devices[i].did,
                  pid: devices[i].pid
                });
              }

              _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
                title: _LHCommonFunction.LHCommonLocalizableString.common_tips_setting
              });

              var time = new Date().getTime;

              _LHCommonFunction.LHMiServer.DeleteDevices(deleteDevicesData, function () {
                _this2.hideDialog(time);

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_delete_succeed);

                if (typeof onSuccess === 'function') onSuccess();
              }, function () {
                _this2.hideDialog(time);

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_delete_failed);

                if (typeof onFail === 'function') onFail();
              });
            }, 300);
          }
        });
      }
    }, {
      key: "hideDialog",
      value: function hideDialog(time) {
        var delay = new Date().getTime - time;
        var delayTime = delay > 400 ? 0 : 400 - delay;

        _LHCommonFunction.LHDialogUtils.LoadingDialogHide(delayTime);
      }
    }, {
      key: "openZigbeeConnectDeviceList",
      value: function openZigbeeConnectDeviceList() {
        _miot.Host.ui.openZigbeeConnectDeviceList(_miot.Device.did);
      }
    }]);

    function LHSubDevicesListPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHSubDevicesListPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSubDevicesListPage).call(this, props, context));
      var deviceIconSource = null;

      if (_miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelMijiaMultiModeHub()) {
        deviceIconSource = _LHCommonUI.LHCommonIcon.deviceIcon.lumiGatewaymgl03;
      } else if (_miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubAqHM01() || _miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubAqHM02() || _miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubAqHM03()) {
        deviceIconSource = _LHCommonUI.LHCommonIcon.deviceIcon.lumiAqaraLinuxHub;
      } else if (_miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubLmUK01() || _miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubMiEU01() || _miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubMiTW01() || _miot.Device.model === _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubMiHK01()) {
        deviceIconSource = _LHCommonUI.LHCommonIcon.deviceIcon.lumiMijiaLinuxHub;
      }

      _this.deviceIconSource = deviceIconSource;
      _this.state = {
        devicesList: [],
        selfIconUrl: '',
        isEditStatus: false,
        isLoading: false,
        renameBtnWidth: 0,
        deleteBtnWidth: 0
      };
      var navigation = _this.props.navigation;
      navigation.setParams({
        isEditStatus: false,
        selectedCount: 0
      });
      Instance = (0, _assertThisInitialized2.default)(_this);
      _this.haveGotPageData = false;
      return _this;
    }

    (0, _createClass2.default)(LHSubDevicesListPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var navigation = this.props.navigation;
        if (!navigation.isFocused()) return;
        this.loadLogDataFromCache();
        var subDeviceList = navigation.getParam('subDeviceList');
        this.getSubDevices(subDeviceList === null);
        this.getSelfIconUrl();
        this.addViewWillAppearListener();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.removeViewWillAppearListener();
        this.clearSetLoadingFalseTimeoutId();
      }
    }, {
      key: "addViewWillAppearListener",
      value: function addViewWillAppearListener() {
        var _this3 = this;

        this.packageViewWillAppearListener = _miot.PackageEvent.packageViewWillAppear.addListener(function () {
          _this3.getSubDevices(false);
        });
      }
    }, {
      key: "removeViewWillAppearListener",
      value: function removeViewWillAppearListener() {
        if (this.packageViewWillAppearListener) {
          this.packageViewWillAppearListener.remove();
          this.packageViewWillAppearListener = null;
        }
      }
    }, {
      key: "getSelfIconUrl",
      value: function getSelfIconUrl() {
        var _this4 = this;

        if (this.deviceIconSource === null) {
          _LHCommonFunction.LHMiServer.LoadRealDeviceConfig(_miot.Device.model, function (config) {
            _this4.setState({
              selfIconUrl: config.deviceIconURL
            });
          }, function () {});
        }
      }
    }, {
      key: "getSubDevices",
      value: function getSubDevices() {
        var _this5 = this;

        var isNeedShowRefreshControl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (isNeedShowRefreshControl) {
          this.setState({
            isLoading: true
          });
        }

        _LHCommonFunction.LHMiServer.GetSubDevices(function (devices) {
          _miot.Host.ui.refreshDeviceList().then(function () {
            _this5.refreshDeviceList(devices);
          }).catch(function () {
            _this5.refreshDeviceList(devices);
          });
        }, function () {
          _this5.setLoadingFalse();
        });
      }
    }, {
      key: "refreshDeviceList",
      value: function refreshDeviceList(devices) {
        this.haveGotPageData = true;
        console.log(devices);
        var newDevices = [];

        if (devices.length !== 0) {
          for (var i = 0, len = devices.length; i < len; i += 1) {
            newDevices.push(LHSubDeviceModel(devices[i]));
          }
        }

        this.setState({
          devicesList: newDevices
        });
        this.setDevivceListCache(newDevices);
        this.setLoadingFalse();
      }
    }, {
      key: "setLoadingFalse",
      value: function setLoadingFalse() {
        var _this6 = this;

        this.clearSetLoadingFalseTimeoutId();
        this.setLoadingFalseTimeoutId = setTimeout(function () {
          _this6.setState({
            isLoading: false
          });
        }, 200);
      }
    }, {
      key: "clearSetLoadingFalseTimeoutId",
      value: function clearSetLoadingFalseTimeoutId() {
        if (this.setLoadingFalseTimeoutId) {
          clearTimeout(this.setLoadingFalseTimeoutId);
          this.setLoadingFalseTimeoutId = null;
        }
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this7 = this;

        var _this$state = this.state,
            devicesList = _this$state.devicesList,
            selfIconUrl = _this$state.selfIconUrl,
            isEditStatus = _this$state.isEditStatus,
            renameBtnWidth = _this$state.renameBtnWidth,
            deleteBtnWidth = _this$state.deleteBtnWidth;
        var source = this.deviceIconSource === null ? selfIconUrl === '' ? _LHCommonUI.LHCommonIcon.deviceIcon.default : {
          uri: selfIconUrl
        } : this.deviceIconSource;

        var headerImage = _react.default.createElement(_reactNative.Image, {
          style: _LHSubDeviceListStyle.default.headerImageStyle,
          source: source
        });

        var headerBottomSpaceView = devicesList.length !== 0 ? _react.default.createElement(_reactNative.View, {
          style: _LHSubDeviceListStyle.default.headerBottomViewStyle
        }) : null;
        var headerBottomLine = devicesList.length !== 0 ? _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: [{
            alignSelf: 'flex-end'
          }]
        }) : null;

        var headerView = _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
          style: _LHSubDeviceListStyle.default.headerViewStyle
        }, headerImage, _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHSubDeviceListStyle.default.headerTitleTextStyle
        }, devicesList.length === 0 ? _LHCommonFunction.LHCommonLocalizableString.sub_device_list_empty_tips : _LHCommonFunction.LHCommonLocalizableString.sub_device_list_header_tips)), _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: [{
            alignSelf: 'flex-start'
          }]
        }), headerBottomSpaceView, headerBottomLine);

        var data = [];

        if (devicesList.length !== 0) {
          var _loop = function _loop(i, len) {
            var device = devicesList[i];
            data.push({
              testID: 'subDevice',
              title: device.title,
              titleNumberOfLines: 1,
              description: device.subTitle,
              showPlaceHolderImage: true,
              iconSource: {
                uri: device.iconURL
              },
              leftIconStyle: {
                width: _LHCommonFunction.LHUiUtils.GetPx(42),
                height: _LHCommonFunction.LHUiUtils.GetPx(42)
              },
              marginLeft: _LHCommonFunction.LHUiUtils.GetPx(19),
              swipeoutClose: true,
              hideRightArrow: isEditStatus,
              hasCheckBox: isEditStatus,
              checkBoxActive: device.selected,
              hideTopSeparatorLine: i === 0,
              rowContainerStyle: {
                height: _LHCommonFunction.LHUiUtils.GetPx(60)
              },
              textContainer: {
                alignSelf: 'center'
              },
              swipeoutBtns: isEditStatus === true ? null : [{
                testID: 'swipeoutRenameButton',
                component: _react.default.createElement(_LHCommonUI.LHSwipeoutButton, {
                  type: "rename",
                  text: _LHCommonFunction.LHCommonLocalizableString.common_button_changename
                }),
                width: renameBtnWidth + _LHCommonFunction.LHUiUtils.GetPx(10) < _LHCommonFunction.LHUiUtils.GetPx(66) ? _LHCommonFunction.LHUiUtils.GetPx(66) : renameBtnWidth + _LHCommonFunction.LHUiUtils.GetPx(10),
                press: function press() {
                  _this7.renameDevice(device, function (newName) {
                    var newDevicesList = _this7.state.devicesList;
                    newDevicesList[i].title = newName;

                    _this7.setDevivceListCache(newDevicesList);

                    _this7.forceUpdate();
                  }, function () {});
                }
              }, {
                testID: 'swipeoutDeleteButton',
                component: _react.default.createElement(_LHCommonUI.LHSwipeoutButton, {
                  text: _LHCommonFunction.LHCommonLocalizableString.common_button_delete
                }),
                width: deleteBtnWidth + _LHCommonFunction.LHUiUtils.GetPx(10) < _LHCommonFunction.LHUiUtils.GetPx(66) ? _LHCommonFunction.LHUiUtils.GetPx(66) : deleteBtnWidth + _LHCommonFunction.LHUiUtils.GetPx(10),
                press: function press() {
                  LHSubDevicesListPage.deleteDevices([device], function () {
                    var newDevicesList = _this7.state.devicesList;
                    newDevicesList.splice(i, 1);

                    _this7.setDevivceListCache(newDevicesList);

                    _this7.forceUpdate();

                    _this7.changePageEditStatus(false);
                  });
                }
              }],
              press: function press() {
                if (isEditStatus === false) {
                  _miot.Host.ui.openDevice(device.did, device.model, {
                    dismiss_current_plug: false
                  });
                } else {
                  var newDevicesList = _this7.state.devicesList;
                  newDevicesList[i].selected = !newDevicesList[i].selected;

                  _this7.forceUpdate();

                  var selectedCount = 0;

                  for (var j = 0, devicesLen = devicesList.length; j < devicesLen; j += 1) {
                    if (devicesList[j].selected === true) {
                      selectedCount += 1;
                    }
                  }

                  var navigation = _this7.props.navigation;
                  navigation.setParams({
                    selectedCount: selectedCount
                  });
                }
              },
              minimumLongPressDuration: 500,
              longPress: function longPress() {
                if (isEditStatus === false) {
                  var newDevicesList = _this7.state.devicesList;
                  newDevicesList[i].selected = true;

                  _this7.changePageEditStatus(true, 1);
                }
              }
            });
          };

          for (var i = 0, len = devicesList.length; i < len; i += 1) {
            _loop(i, len);
          }
        }

        return [{
          sectionHeader: function sectionHeader() {
            return headerView;
          },
          data: data
        }];
      }
    }, {
      key: "changePageEditStatus",
      value: function changePageEditStatus(editStatus) {
        var selectedCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var devicesList = this.state.devicesList;
        var isChange = false;

        if (editStatus === false) {
          for (var i = 0, devicesLen = devicesList.length; i < devicesLen; i += 1) {
            if (devicesList[i].selected === true) {
              isChange = true;
              devicesList[i].selected = false;
            }
          }
        }

        if (isChange) {
          this.forceUpdate();
        }

        this.setState({
          isEditStatus: editStatus
        });
        var navigation = this.props.navigation;
        navigation.setParams({
          isEditStatus: editStatus,
          selectedCount: selectedCount
        });
      }
    }, {
      key: "didClickBottomDeleteButton",
      value: function didClickBottomDeleteButton() {
        var _this8 = this;

        var devicesList = this.state.devicesList;
        var deleteList = [];

        for (var i = 0, devicesLen = devicesList.length; i < devicesLen; i += 1) {
          if (devicesList[i].selected === true) {
            deleteList.push(devicesList[i]);
          }
        }

        if (deleteList.length > 0) {
          LHSubDevicesListPage.deleteDevices(deleteList, function () {
            var newDevice = [];

            for (var _i = 0, _devicesLen = devicesList.length; _i < _devicesLen; _i += 1) {
              if (devicesList[_i].selected === false) {
                newDevice.push(devicesList[_i]);
              }
            }

            _this8.setDevivceListCache(newDevice);

            _this8.setState({
              devicesList: newDevice
            });

            _this8.changePageEditStatus(false);
          });
        }
      }
    }, {
      key: "didClickButtomRenameButton",
      value: function didClickButtomRenameButton() {
        var _this9 = this;

        var devicesList = this.state.devicesList;
        var renameDevice = null;

        for (var i = 0, devicesLen = devicesList.length; i < devicesLen; i += 1) {
          if (devicesList[i].selected === true) {
            renameDevice = devicesList[i];
            break;
          }
        }

        this.renameDevice(renameDevice, function (newName) {
          renameDevice.title = newName;

          _this9.forceUpdate();

          _this9.changePageEditStatus(false);
        });
      }
    }, {
      key: "loadLogDataFromCache",
      value: function loadLogDataFromCache() {
        var _this10 = this;

        var navigation = this.props.navigation;
        var subDeviceList = navigation.getParam('subDeviceList');

        if (subDeviceList) {
          if (subDeviceList.length > 0) {
            this.setState({
              devicesList: subDeviceList
            });
          }
        } else {
          _LHCommonFunction.LHMiServer.GetHostStorage(_LHCommonFunction.CommonMethod.CreatCacheKey(cacheKey)).then(function (res) {
            if (!res || _this10.haveGotPageData === true) return;

            _this10.setState({
              devicesList: res
            });
          });
        }
      }
    }, {
      key: "setDevivceListCache",
      value: function setDevivceListCache(data) {
        _LHCommonFunction.LHMiServer.SetHostStorage(_LHCommonFunction.CommonMethod.CreatCacheKey(cacheKey), data);
      }
    }, {
      key: "render",
      value: function render() {
        var _this11 = this;

        var pageData = this.getPageData();
        var _this$state2 = this.state,
            isEditStatus = _this$state2.isEditStatus,
            isLoading = _this$state2.isLoading;
        var navigation = this.props.navigation;
        var selectedCount = navigation.getParam('selectedCount');
        var pageType = navigation.getParam('pageType');
        var BottomViewComponent = null;
        var BottomAddSubDeviceComponent = null;

        if (isEditStatus === true) {
          BottomViewComponent = _react.default.createElement(_LHCommonUI.LHBottomButtonGroup, {
            buttons: [{
              text: _LHCommonFunction.LHCommonLocalizableString.common_button_delete,
              type: 'delete',
              testID: 'bottomDeleteBtn',
              disabled: selectedCount === 0,
              onPress: function onPress() {
                _this11.didClickBottomDeleteButton();
              }
            }, {
              text: _LHCommonFunction.LHCommonLocalizableString.common_button_changename,
              type: 'rename',
              testID: 'bottomRenameBtn',
              disabled: selectedCount !== 1,
              onPress: function onPress() {
                _this11.didClickButtomRenameButton();
              }
            }]
          });
        } else {
          var iconSource = _LHCommonUI.LHCommonIcon.common.add.normal;

          if (pageType === 'hub') {
            iconSource = _LHCommonUI.LHCommonIcon.common.add.mgl03;
          }

          BottomAddSubDeviceComponent = _react.default.createElement(_reactNative.TouchableOpacity, {
            style: _LHSubDeviceListStyle.default.addSubDeviceViewStyle,
            onPress: function onPress() {
              LHSubDevicesListPage.openZigbeeConnectDeviceList();
            },
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('addIcon'),
            testID: "addIcon"
          }, _react.default.createElement(_reactNative.Image, {
            style: _LHSubDeviceListStyle.default.addSubDeviceButtonStyle,
            source: iconSource
          }));
        }

        var listViewPaddingBottom = 0;

        if (pageData.length > 0) {
          if (isEditStatus === true) {
            listViewPaddingBottom = 10;
          } else {
            listViewPaddingBottom = _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight + _LHCommonFunction.LHUiUtils.GetPx(86);
          }
        }

        return _react.default.createElement(_reactNative.View, {
          style: _LHSubDeviceListStyle.default.listViewStyle,
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('LHSubDevicesListPage'),
          testID: "LHSubDevicesListPage"
        }, _react.default.createElement(_LHCommonUI.LHStandardListSwipeout, {
          data: pageData,
          contentContainerStyle: {
            paddingBottom: listViewPaddingBottom
          },
          stickySectionHeadersEnabled: false,
          ListEmptyComponent: _react.default.createElement(_reactNative.View, {
            pointerEvents: "none"
          }, _react.default.createElement(_LHCommonUI.LHStandardEmpty, {
            pointerEvents: "none",
            text: _LHCommonFunction.LHCommonLocalizableString.sub_device_list_empty_tips
          })),
          ListFooterComponent: _react.default.createElement(_reactNative.View, {
            style: _LHSubDeviceListStyle.default.footer
          }),
          refreshControl: isEditStatus ? null : _react.default.createElement(_reactNative.RefreshControl, {
            refreshing: isLoading === true && isEditStatus === false,
            onRefresh: function onRefresh() {
              _this11.getSubDevices(true);
            }
          })
        }), BottomViewComponent, BottomAddSubDeviceComponent, _react.default.createElement(_LHCommonUI.LHText, {
          style: [{
            position: 'absolute',
            left: 0,
            top: 0,
            opacity: 0,
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(12)
          }],
          onLayout: function onLayout(e) {
            _this11.setState({
              renameBtnWidth: e.nativeEvent.layout.width
            });
          }
        }, _LHCommonFunction.LHCommonLocalizableString.common_button_changename), _react.default.createElement(_LHCommonUI.LHText, {
          style: [{
            position: 'absolute',
            left: 0,
            top: 0,
            opacity: 0,
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(12)
          }],
          onLayout: function onLayout(e) {
            _this11.setState({
              deleteBtnWidth: e.nativeEvent.layout.width
            });
          }
        }, _LHCommonFunction.LHCommonLocalizableString.common_button_delete));
      }
    }]);
    return LHSubDevicesListPage;
  }(_react.default.Component);

  LHSubDevicesListPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var isEditStatus = navigation.getParam('isEditStatus');
    var showSeparator = navigation.getParam('showSeparator');
    var pageTitle = navigation.getParam('pageTitle');
    var props = {
      showSeparator: showSeparator
    };

    if (isEditStatus) {
      props = (0, _objectSpread2.default)({}, props, {
        title: _LHCommonFunction.LHCommonLocalizableString.sub_device_list_selected.replace('{XX}', navigation.getParam('selectedCount')),
        leftButtons: [{
          type: 'deafultCloseBtn',
          press: function press() {
            Instance.changePageEditStatus(false);
          }
        }],
        rightButtons: [{
          type: 'deafultCompleteBtn',
          press: function press() {
            Instance.changePageEditStatus(false);
          }
        }]
      });
    } else {
      props = (0, _objectSpread2.default)({}, props, {
        title: pageTitle || _LHCommonFunction.LHCommonLocalizableString.sub_device_list_title,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      });
    }

    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, props))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHSubDevicesListPage);

  exports.default = _default;
},10295,[14305,14314,14320,14371,14377,14374,14323,14386,10297,10033,10074,10004,10178,10298]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      height = _Dimensions$get.height;

  var LHSubDeviceListStyle = _reactNative.StyleSheet.create({
    headerViewStyle: {
      width: '100%',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    headerImageStyle: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(30),
      width: _LHCommonFunction.LHUiUtils.GetPx(100),
      height: _LHCommonFunction.LHUiUtils.GetPx(100),
      alignSelf: 'center'
    },
    bottomViewTopLineStyle: {
      width: '100%',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
      position: 'absolute',
      height: 0.5
    },
    headerTitleTextStyle: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(14),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(20),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(20),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(33),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      alignSelf: 'center',
      color: '#000000',
      textAlign: 'center'
    },
    headerBottomViewStyle: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray,
      height: _LHCommonFunction.LHUiUtils.GetPx(8)
    },
    navigateButton: {
      height: _LHCommonFunction.LHUiUtils.GetPx(30),
      width: _LHCommonFunction.LHUiUtils.GetPx(30)
    },
    bottomViewStyle: {
      height: _LHCommonFunction.LHUiUtils.GetPx(67) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight,
      width: '100%',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      justifyContent: 'center',
      flexDirection: 'row'
    },
    bottomButtonStyle: {
      height: _LHCommonFunction.LHUiUtils.GetPx(67),
      minWidth: _LHCommonFunction.LHUiUtils.GetPx(63),
      justifyContent: 'center',
      flexDirection: 'column',
      alignItems: 'center',
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(14)
    },
    bottomButtonImageStyleDisable: {
      width: _LHCommonFunction.LHUiUtils.GetPx(25),
      height: _LHCommonFunction.LHUiUtils.GetPx(25),
      opacity: 0.4
    },
    bottomButtonImageStyleNormal: {
      width: _LHCommonFunction.LHUiUtils.GetPx(25),
      height: _LHCommonFunction.LHUiUtils.GetPx(25),
      opacity: 1
    },
    bottomButtonTextStyle: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(10),
      alignSelf: 'center',
      opacity: 1
    },
    bottomButtonTextDisableStyle: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(10),
      alignSelf: 'center',
      opacity: 0.38
    },
    addSubDeviceButtonStyle: {
      width: _LHCommonFunction.LHUiUtils.GetPx(66),
      height: _LHCommonFunction.LHUiUtils.GetPx(66)
    },
    addSubDeviceViewStyle: {
      position: 'absolute',
      right: _LHCommonFunction.LHUiUtils.GetPx(20),
      bottom: _LHCommonFunction.LHUiUtils.GetPx(20),
      width: _LHCommonFunction.LHUiUtils.GetPx(66),
      height: _LHCommonFunction.LHUiUtils.GetPx(66)
    },
    listViewStyle: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: '100%',
      height: '100%',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    bottomBtn: {
      width: _LHCommonFunction.LHUiUtils.GetPx(66),
      height: _LHCommonFunction.LHUiUtils.GetPx(66),
      position: 'absolute',
      bottom: _LHCommonFunction.LHUiUtils.GetPx(12) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight,
      right: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    renameComponent: {
      backgroundColor: '#FCBD4E',
      width: '100%',
      height: '100%',
      justifyContent: 'center',
      alignItems: 'center'
    },
    deleteComponent: {
      backgroundColor: '#F43F31',
      width: '100%',
      height: '100%',
      justifyContent: 'center',
      alignItems: 'center'
    },
    swipeoutImage: {
      width: _LHCommonFunction.LHUiUtils.GetPx(25),
      height: _LHCommonFunction.LHUiUtils.GetPx(25)
    },
    swipeoutText: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      color: '#ffffff'
    },
    emptyPageWrap: {
      height: height - _LHCommonFunction.LHUiUtils.TitleBarHeight - _LHCommonFunction.LHDeviceUtils.statusBarHeight,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    }
  });

  exports.default = LHSubDeviceListStyle;
},10298,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var styles = _reactNative.StyleSheet.create({
    sectionHeader: {
      paddingTop: _LHCommonFunction.LHUiUtils.GetPx(20),
      paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(8),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    listTitle: {
      color: _LHCommonFunction.LHUiUtils.MiJiaListHeaderColor,
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(23)
    },
    btnContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      flex: 1,
      backgroundColor: '#fff',
      height: _LHCommonFunction.LHUiUtils.GetPx(50),
      alignItems: 'center'
    },
    btnText: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(16),
      flex: 1,
      color: _LHCommonFunction.LHUiUtils.MiJiaRed,
      textAlign: 'center',
      fontWeight: 'bold'
    }
  });

  var LHStandardListSwipeout = function (_React$Component) {
    (0, _inherits2.default)(LHStandardListSwipeout, _React$Component);
    (0, _createClass2.default)(LHStandardListSwipeout, null, [{
      key: "dealData",
      value: function dealData(data) {
        var result = data;

        for (var i = 0; i < result.length; i += 1) {
          result[i].index = i;
        }

        return result;
      }
    }]);

    function LHStandardListSwipeout(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHStandardListSwipeout);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHStandardListSwipeout).call(this, props));
      _this.prevScrollTop = 0;
      _this.swipeoutScroll = false;
      var data = _this.props.data;
      _this.state = {
        data: data,
        scrollEnabled: true
      };
      return _this;
    }

    (0, _createClass2.default)(LHStandardListSwipeout, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(data) {
        this.setState({
          data: data.data || []
        });
      }
    }, {
      key: "closeSwipeout",
      value: function closeSwipeout(closeAll, sectionIndex, index) {
        var data = this.state.data;
        var copyData = data;

        for (var i = 0, len = copyData.length; i < len; i += 1) {
          for (var j = 0, len1 = copyData[i].data.length; j < len1; j += 1) {
            copyData[i].data[j].swipeoutClose = true;
          }
        }

        if (!closeAll) copyData[sectionIndex].data[index].swipeoutClose = false;
        this.forceUpdate();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            noBounces = _this$props.noBounces,
            stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
            style = _this$props.style,
            _ListEmptyComponent = _this$props.ListEmptyComponent,
            contentContainerStyle = _this$props.contentContainerStyle,
            _ListFooterComponent = _this$props.ListFooterComponent,
            refreshControl = _this$props.refreshControl,
            showsVerticalScrollIndicator = _this$props.showsVerticalScrollIndicator;
        var _this$state = this.state,
            data = _this$state.data,
            scrollEnabled = _this$state.scrollEnabled;
        return _react.default.createElement(_reactNative.SectionList, {
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('SectionList'),
          testID: "SectionList",
          initialNumToRender: 20,
          scrollEnabled: scrollEnabled,
          contentContainerStyle: contentContainerStyle,
          style: style,
          bounces: !noBounces,
          sections: LHStandardListSwipeout.dealData(data),
          stickySectionHeadersEnabled: typeof stickySectionHeadersEnabled === 'undefined' ? true : stickySectionHeadersEnabled,
          showsVerticalScrollIndicator: showsVerticalScrollIndicator,
          ListEmptyComponent: function ListEmptyComponent() {
            if (_ListEmptyComponent) {
              return _ListEmptyComponent;
            } else {
              return _react.default.createElement(_reactNative.View, null);
            }
          },
          ListFooterComponent: function ListFooterComponent() {
            if (_ListFooterComponent) {
              return _ListFooterComponent;
            } else {
              return _react.default.createElement(_reactNative.View, null);
            }
          },
          refreshControl: typeof refreshControl === 'undefined' ? null : refreshControl,
          renderItem: function renderItem(_ref) {
            var item = _ref.item,
                index = _ref.index,
                section = _ref.section;

            if (section.title === 'type:bottomButton') {
              return _react.default.createElement(_reactNative.TouchableHighlight, {
                onPress: item.press
              }, _react.default.createElement(_reactNative.View, {
                style: styles.btnContainer
              }, _react.default.createElement(_reactNative.Text, {
                style: styles.btnText
              }, item.title)));
            } else {
              var StandardCell = _react.default.createElement(_LHCommonUI.LHStandardCell, {
                testID: item.testID,
                marginLeft: item.marginLeft,
                marginBottom: item.marginBottom,
                marginTop: item.marginTop,
                separatorMarginLeft: item.separatorMarginLeft,
                iconSource: item.iconSource,
                iconSourceStyle: item.iconSourceStyle,
                showPlaceHolderImage: item.showPlaceHolderImage,
                isIconSourceNeedCache: item.isIconSourceNeedCache,
                leftIconStyle: item.leftIconStyle,
                hasRightArrow: !item.hideRightArrow,
                rightArrowStyle: item.rightArrowStyle,
                hasBadge: item.hasBadge,
                showBadge: item.showBadge,
                badge: item.badge,
                descriptionNumberOfLines: item.descriptionNumberOfLines,
                active: item.active,
                activeIconStyle: item.activeIconStyle,
                leftArrowSource: item.leftRrrowSource,
                description: item.description,
                descriptionStyle: item.descriptionStyle,
                rightDescriptionStyle: item.rightDescriptionStyle,
                rightDescriptionColor: item.rightDescriptionColor,
                rightDescription: item.rightDescription,
                rightIconSource: item.rightIconSource,
                rightIconStype: item.rightIconStype,
                hasSwitch: item.hasSwitch,
                switchColor: item.switchColor,
                switchValue: item.switchValue,
                useControlledSwitch: item.useControlledSwitch,
                switchDisabled: item.switchDisabled,
                onSwitchChange: item.onSwitchChange,
                hasSlider: item.hasSlider,
                sliderValue: item.sliderValue,
                onSliderChange: item.onSliderChange,
                hasCheckBox: item.hasCheckBox,
                checkBoxActive: item.checkBoxActive,
                rowContainerStyle: item.rowContainerStyle,
                titleStyle: item.titleStyle,
                title: item.title,
                titleNumberOfLines: item.titleNumberOfLines,
                style: item.style,
                topSeparatorStyle: index === 0 && !section.title ? {
                  marginLeft: 0
                } : item.topSeparatorStyle,
                topSeparatorLine: index !== 0 && !item.hideTopSeparatorLine,
                bottomSeparatorStyle: index === section.data.length - 1 ? {
                  marginLeft: 0
                } : item.bottomSeparatorStyle,
                bottomSeparatorLine: typeof item.bottomSeparatorLine !== 'undefined' ? item.bottomSeparatorLine : index === section.data.length - 1,
                useTouchableHighlight: !item.noTouchableHighlight,
                minimumLongPressDuration: item.minimumLongPressDuration,
                press: item.press,
                longPress: item.longPress,
                textContainer: item.textContainer,
                showOfflineIcon: item.showOfflineIcon,
                showDeletedIcon: item.showDeletedIcon,
                cellContainerStyle: item.cellContainerStyle,
                disabled: item.disabled
              });

              if (item.swipeoutBtns) {
                var swipeoutBtns = item.swipeoutBtns;

                var _loop = function _loop(i, len) {
                  var rowData = swipeoutBtns[i];
                  delete rowData.onPress;

                  if (rowData.press) {
                    rowData.onPress = function () {
                      rowData.press(item, section.index, index);
                    };
                  }
                };

                for (var i = 0, len = swipeoutBtns.length; i < len; i += 1) {
                  _loop(i, len);
                }

                return _react.default.createElement(_LHCommonUI.Swipeout, {
                  scroll: function scroll(e) {
                    _this2.setState({
                      scrollEnabled: e
                    });
                  },
                  sensitivity: 5,
                  right: swipeoutBtns || [],
                  close: item.swipeoutClose,
                  buttonWidth: item.swipeoutButtonWidth,
                  onOpen: function onOpen(sectionID, rowID, direction) {
                    if (direction) {
                      _this2.closeSwipeout(false, section.index, index);
                    } else {
                      data[section.index].data[index].swipeoutClose = false;

                      _this2.forceUpdate();
                    }
                  }
                }, StandardCell);
              } else {
                return StandardCell;
              }
            }
          },
          renderSectionHeader: function renderSectionHeader(_ref2) {
            var section = _ref2.section;

            if (typeof section.sectionHeader === 'function') {
              return section.sectionHeader();
            }

            if (section.title === 'type:bottomButton') {
              return _react.default.createElement(_reactNative.View, {
                style: {
                  height: _LHCommonFunction.LHUiUtils.GetPx(20),
                  backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
                }
              });
            } else if (section.title) {
              console.log(section.title);
              return _react.default.createElement(_reactNative.View, {
                style: styles.sectionHeader
              }, _react.default.createElement(_reactNative.Text, {
                style: styles.listTitle
              }, section.title));
            } else {
              return null;
            }
          },
          keyExtractor: function keyExtractor(item, index) {
            return index;
          },
          onScroll: function onScroll(e) {
            if (Math.abs(e.nativeEvent.contentOffset.y - _this2.prevScrollTop) > 20) {
              _this2.prevScrollTop = e.nativeEvent.contentOffset.y;

              _this2.closeSwipeout(true);
            }
          },
          scrollEventThrottle: 500
        });
      }
    }]);
    return LHStandardListSwipeout;
  }(_react.default.Component);

  LHStandardListSwipeout.defaultProps = {
    showsVerticalScrollIndicator: false
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHStandardListSwipeout);

  exports.default = _default;
},10301,[14305,14320,14371,14377,14323,14386,10297,10033,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }

      var test1 = new String('abc');
      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }

      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      }

      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(_extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      return false;
    }
  }

  module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };
},10303,[14344]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _Switch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ListItem = _$$_REQUIRE(_dependencyMap[12]);

  var _Images = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHCommonIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHWebImage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var styles = _reactNative.StyleSheet.create({
    dot: {
      width: _LHCommonFunction.LHUiUtils.GetPx(10),
      height: _LHCommonFunction.LHUiUtils.GetPx(10),
      backgroundColor: '#F05353',
      alignSelf: 'center',
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(-4),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(5),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    whiteBg: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    allContainer: {
      alignSelf: 'stretch',
      flex: 1
    },
    textContainer: {
      alignSelf: 'stretch',
      flexDirection: 'column',
      minWidth: '45%'
    },
    rowContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      width: '100%'
    },
    cellContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      width: '100%'
    },
    icon: {
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(12),
      alignSelf: 'center',
      width: _LHCommonFunction.LHUiUtils.GetPx(36)
    },
    iconSource: {
      width: '100%',
      height: '100%'
    },
    offlineIcon: {
      position: 'absolute',
      width: _LHCommonFunction.LHUiUtils.GetPx(15),
      height: _LHCommonFunction.LHUiUtils.GetPx(15),
      right: 0,
      bottom: 0
    },
    rightIcon: {
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(12),
      alignSelf: 'center'
    },
    activeIcon: {
      width: _LHCommonFunction.LHUiUtils.GetPx(6),
      height: _LHCommonFunction.LHUiUtils.GetPx(10),
      alignSelf: 'center',
      tintColor: _LHCommonFunction.LHUiUtils.MiJiaBlue
    },
    title: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      alignItems: 'stretch',
      alignSelf: 'stretch',
      textAlign: 'left',
      color: _LHCommonFunction.LHUiUtils.MiJiaTitleColor,
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(24),
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(14),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(1),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    active: {
      color: _LHCommonFunction.LHUiUtils.MiJiaBlue
    },
    description: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      alignItems: 'stretch',
      alignSelf: 'stretch',
      textAlign: 'left',
      color: '#999999',
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(12),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    descTextStyle: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      alignItems: 'stretch',
      alignSelf: 'stretch',
      textAlign: 'left',
      color: '#999999',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    descContainerStyle: {
      flexDirection: 'row',
      alignItems: 'center',
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    rightDescription: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(17),
      color: '#7F7F7F',
      alignSelf: 'center',
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(12),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(-4),
      textAlign: 'right',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      flex: 1,
      minWidth: '12%'
    },
    noRightArrow: {
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(24)
    },
    switch: {
      alignSelf: 'center',
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(20)
    },
    subArrow: {
      width: _LHCommonFunction.LHUiUtils.GetPx(24),
      height: _LHCommonFunction.LHUiUtils.GetPx(24),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(24),
      alignSelf: 'center'
    },
    badgeText: {
      width: _LHCommonFunction.LHUiUtils.GetPx(16),
      height: _LHCommonFunction.LHUiUtils.GetPx(16),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(8),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(12),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBlueColor,
      alignSelf: 'center',
      justifyContent: 'center',
      color: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      textAlign: 'center',
      overflow: 'hidden',
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    checkBox: {
      width: _LHCommonFunction.LHUiUtils.GetPx(20),
      height: _LHCommonFunction.LHUiUtils.GetPx(20),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(9),
      alignSelf: 'center',
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(24),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    checkBoxActive: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBlue,
      borderColor: _LHCommonFunction.LHUiUtils.MiJiaBlue
    },
    checkBoxInner: {
      transform: [{
        rotate: '-225deg'
      }],
      borderColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      borderRightWidth: 2,
      borderTopWidth: 2,
      width: _LHCommonFunction.LHUiUtils.GetPx(10),
      height: _LHCommonFunction.LHUiUtils.GetPx(6),
      alignSelf: 'center',
      marginTop: 2,
      opacity: 0
    },
    checkBoxInnerShow: {
      opacity: 1
    },
    sliderTitleText: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      color: _LHCommonFunction.LHUiUtils.MiJiaTitleColor,
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    sliderValueText: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16)
    },
    sliderThumbStyle: {
      width: _LHCommonFunction.LHUiUtils.GetPx(24),
      height: _LHCommonFunction.LHUiUtils.GetPx(24),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(12),
      borderWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      borderColor: 'rgba(0,0,0,0.15)'
    }
  });

  var LHStandardCell = function (_React$Component) {
    (0, _inherits2.default)(LHStandardCell, _React$Component);

    function LHStandardCell(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHStandardCell);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHStandardCell).call(this, props));

      _this.renderDescription = function () {
        var _this$props = _this.props,
            iconSource = _this$props.iconSource,
            active = _this$props.active,
            description = _this$props.description,
            descriptionNumberOfLines = _this$props.descriptionNumberOfLines,
            descriptionStyle = _this$props.descriptionStyle;
        var marginLeft = _this.state.marginLeft;
        if (!description) return null;
        var leftSty = {
          marginLeft: iconSource || active ? 0 : marginLeft
        };

        if (typeof description === 'function') {
          return description([styles.descContainerStyle, leftSty], styles.descTextStyle);
        }

        return descriptionNumberOfLines ? _react.default.createElement(_reactNative.Text, {
          numberOfLines: descriptionNumberOfLines,
          style: [styles.description, leftSty, descriptionStyle]
        }, description) : _react.default.createElement(_reactNative.Text, {
          style: [styles.description, leftSty, descriptionStyle]
        }, description);
      };

      _this.renderRightDescription = function () {
        var _this$props2 = _this.props,
            rightDescription = _this$props2.rightDescription,
            hasRightArrow = _this$props2.hasRightArrow,
            rightDescriptionStyle = _this$props2.rightDescriptionStyle,
            testID = _this$props2.testID;

        if (typeof rightDescription === 'function') {
          return rightDescription();
        }

        return rightDescription ? _react.default.createElement(_reactNative.Text, {
          numberOfLines: 1,
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID + '_RightDescriptionLabel'),
          testID: testID + '_RightDescriptionLabel',
          style: [styles.rightDescription, hasRightArrow ? '' : styles.noRightArrow, rightDescriptionStyle]
        }, rightDescription) : _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1
          }
        });
      };

      var _this$props3 = _this.props,
          _marginLeft = _this$props3.marginLeft,
          data = _this$props3.data,
          marginTop = _this$props3.marginTop,
          marginBottom = _this$props3.marginBottom,
          separatorMarginLeft = _this$props3.separatorMarginLeft,
          switchDisabled = _this$props3.switchDisabled,
          useControlledSwitch = _this$props3.useControlledSwitch,
          hasSwitch = _this$props3.hasSwitch;

      if (hasSwitch && switchDisabled && !useControlledSwitch) {
        console.warn('请指点useControlledSwitch使用LHSwitch控件，使用更优雅的disable态UI效果');
      }

      _this.state = {
        marginLeft: typeof _marginLeft !== 'undefined' ? _marginLeft : _LHCommonFunction.LHUiUtils.GetPx(24),
        data: data || {},
        marginTop: typeof marginTop !== 'undefined' ? marginTop : _LHCommonFunction.LHUiUtils.GetPx(14),
        marginBottom: typeof marginBottom !== 'undefined' ? marginBottom : typeof marginTop !== 'undefined' ? marginTop : _LHCommonFunction.LHUiUtils.GetPx(15),
        separatorMarginLeft: _this.getSeparatorMarginLeft(separatorMarginLeft)
      };
      return _this;
    }

    (0, _createClass2.default)(LHStandardCell, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(data) {
        var separatorMarginLeft = this.state.separatorMarginLeft;

        if (data.separatorMarginLeft !== separatorMarginLeft) {
          this.setState({
            separatorMarginLeft: this.getSeparatorMarginLeft(data.separatorMarginLeft)
          });
        }
      }
    }, {
      key: "getSeparatorMarginLeft",
      value: function getSeparatorMarginLeft(separatorMarginLeft) {
        var marginLeft = this.props.marginLeft;
        return typeof separatorMarginLeft !== 'undefined' ? separatorMarginLeft : typeof marginLeft !== 'undefined' ? marginLeft : _LHCommonFunction.LHUiUtils.GetPx(24);
      }
    }, {
      key: "viewOnTouched",
      value: function viewOnTouched() {
        var press = this.props.press;
        var data = this.state.data;

        if (press) {
          press(data);
        }
      }
    }, {
      key: "viewOnLongPressed",
      value: function viewOnLongPressed() {
        var longPress = this.props.longPress;
        var data = this.state.data;

        if (longPress) {
          longPress(data);
        }
      }
    }, {
      key: "switchIsOn",
      value: function switchIsOn(isOn) {
        var onSwitchChange = this.props.onSwitchChange;

        if (onSwitchChange) {
          onSwitchChange(isOn);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props4 = this.props,
            iconSource = _this$props4.iconSource,
            isIconSourceNeedCache = _this$props4.isIconSourceNeedCache,
            leftIconStyle = _this$props4.leftIconStyle,
            showPlaceHolderImage = _this$props4.showPlaceHolderImage,
            iconSourceStyle = _this$props4.iconSourceStyle,
            hasRightArrow = _this$props4.hasRightArrow,
            rightArrowStyle = _this$props4.rightArrowStyle,
            hasBadge = _this$props4.hasBadge,
            showBadge = _this$props4.showBadge,
            badge = _this$props4.badge,
            active = _this$props4.active,
            leftArrowSource = _this$props4.leftArrowSource,
            activeTitleStyle = _this$props4.activeTitleStyle,
            activeIconStyle = _this$props4.activeIconStyle,
            description = _this$props4.description,
            rightDescription = _this$props4.rightDescription,
            rightIconSource = _this$props4.rightIconSource,
            rightIconStype = _this$props4.rightIconStype,
            hasSwitch = _this$props4.hasSwitch,
            hasDot = _this$props4.hasDot,
            useControlledSwitch = _this$props4.useControlledSwitch,
            switchValue = _this$props4.switchValue,
            switchColor = _this$props4.switchColor,
            switchDisabled = _this$props4.switchDisabled,
            switchTintColor = _this$props4.switchTintColor,
            hasCheckBox = _this$props4.hasCheckBox,
            checkBoxActive = _this$props4.checkBoxActive,
            rowContainerStyle = _this$props4.rowContainerStyle,
            titleStyle = _this$props4.titleStyle,
            title = _this$props4.title,
            titleNumberOfLines = _this$props4.titleNumberOfLines,
            style = _this$props4.style,
            topSeparatorStyle = _this$props4.topSeparatorStyle,
            topSeparatorLine = _this$props4.topSeparatorLine,
            bottomSeparatorStyle = _this$props4.bottomSeparatorStyle,
            bottomSeparatorLine = _this$props4.bottomSeparatorLine,
            useTouchableHighlight = _this$props4.useTouchableHighlight,
            minimumLongPressDuration = _this$props4.minimumLongPressDuration,
            textContainer = _this$props4.textContainer,
            showOfflineIcon = _this$props4.showOfflineIcon,
            showDeletedIcon = _this$props4.showDeletedIcon,
            showSliderView = _this$props4.showSliderView,
            showWithPercent = _this$props4.showWithPercent,
            valueStyle = _this$props4.valueStyle,
            sliderStyle = _this$props4.sliderStyle,
            sliderProps = _this$props4.sliderProps,
            onSlidingComplete = _this$props4.onSlidingComplete,
            children = _this$props4.children,
            cellContainerStyle = _this$props4.cellContainerStyle,
            disabled = _this$props4.disabled,
            testID = _this$props4.testID;
        var _this$state = this.state,
            marginLeft = _this$state.marginLeft,
            marginBottom = _this$state.marginBottom,
            marginTop = _this$state.marginTop,
            separatorMarginLeft = _this$state.separatorMarginLeft;
        var offlineIcon = showDeletedIcon === true ? null : showOfflineIcon ? _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: styles.offlineIcon,
          source: _LHCommonIcon.default.cellIcon.offLine
        }) : null;
        var deletedIcon = showDeletedIcon ? _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: styles.offlineIcon,
          source: _LHCommonIcon.default.cellIcon.deleted
        }) : null;
        var iconImage = null;

        if (isIconSourceNeedCache) {
          iconImage = _react.default.createElement(_LHWebImage.default, {
            source: iconSource,
            style: styles.iconSource
          });
        } else if (iconSource) {
          iconImage = _react.default.createElement(_reactNative.Image, {
            resizeMode: "contain",
            key: iconSource.uri,
            style: [styles.iconSource, iconSourceStyle],
            source: iconSource
          });
        }

        var icon = iconImage ? showPlaceHolderImage ? _react.default.createElement(_LHCommonUI.LHPlaceHolderImage, {
          style: [styles.icon, {
            marginLeft: marginLeft
          }, leftIconStyle],
          iconSource: iconSource,
          iconSourceStyle: iconSourceStyle
        }, offlineIcon, deletedIcon) : _react.default.createElement(_reactNative.View, {
          style: [styles.icon, {
            marginLeft: marginLeft
          }, leftIconStyle]
        }, iconImage, offlineIcon, deletedIcon) : null;
        var rightArrow = hasRightArrow ? _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: [styles.subArrow, rightArrowStyle],
          source: _Images.default.common.right_arrow
        }) : null;
        var badgeElement = hasBadge ? _react.default.createElement(_reactNative.Text, {
          style: [styles.badgeText, {
            opacity: showBadge ? 1 : 0
          }]
        }, badge) : null;
        var descriptionElement = this.renderDescription();
        var activeIcon = active ? _react.default.createElement(_reactNative.View, {
          style: {
            width: _LHCommonFunction.LHUiUtils.GetPx(24),
            alignSelf: 'center'
          }
        }, _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: [styles.activeIcon, activeIconStyle],
          source: leftArrowSource || _LHCommonIcon.default.cellIcon.rightArrow
        })) : null;
        var rightDescriptionElement = this.renderRightDescription();
        var rightDotElement = hasDot ? _react.default.createElement(_reactNative.View, {
          style: [styles.dot, hasRightArrow ? '' : styles.noRightArrow]
        }) : null;
        var rightIcon = rightIconSource ? _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: [styles.rightIcon, hasRightArrow ? '' : styles.noRightArrow, rightIconStype],
          source: rightIconSource
        }) : null;
        var rightSwitch = hasSwitch ? _react.default.createElement(_reactNative.View, {
          style: {
            alignSelf: 'center',
            marginRight: _LHCommonFunction.LHUiUtils.GetPx(24),
            marginLeft: _LHCommonFunction.LHUiUtils.GetPx(12)
          }
        }, useControlledSwitch ? _react.default.createElement(_LHCommonUI.LHSwitch, {
          disabled: switchDisabled || false,
          tintColor: switchTintColor || '#f0f0f0',
          onTintColor: switchColor || _LHCommonFunction.LHUiUtils.MiJiaBlue,
          onValueChange: function onValueChange(state) {
            _this2.switchIsOn(state);
          },
          value: switchValue,
          ref: function ref(switchBtn) {
            _this2.switchBtn = switchBtn;
          },
          testID: testID + 'Switch'
        }) : _react.default.createElement(_Switch.default, {
          disabled: switchDisabled || false,
          tintColor: switchTintColor || '#f0f0f0',
          onTintColor: switchColor || _LHCommonFunction.LHUiUtils.MiJiaBlue,
          onValueChange: function onValueChange(state) {
            _this2.switchIsOn(state);
          },
          value: switchValue,
          ref: function ref(switchBtn) {
            _this2.switchBtn = switchBtn;
          }
        })) : null;
        var rightCheckbBox = hasCheckBox ? _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: styles.checkBox,
          source: checkBoxActive ? _LHCommonIcon.default.cellIcon.checkActive : _LHCommonIcon.default.cellIcon.checkNotActive
        }) : null;
        var titleS = [styles.title, {
          marginBottom: description ? 1 : iconSource ? _LHCommonFunction.LHUiUtils.GetPx(20) : marginBottom
        }, {
          marginTop: description ? _LHCommonFunction.LHUiUtils.GetPx(10) : iconSource ? _LHCommonFunction.LHUiUtils.GetPx(19) : marginTop
        }, active ? typeof activeTitleStyle === 'undefined' ? styles.active : activeTitleStyle : '', {
          marginLeft: iconSource || active ? 0 : marginLeft
        }, titleStyle];
        var titleEle = title ? titleNumberOfLines ? _react.default.createElement(_reactNative.Text, {
          numberOfLines: titleNumberOfLines,
          style: titleS
        }, title) : _react.default.createElement(_reactNative.Text, {
          style: titleS
        }, title) : null;

        var content = _react.default.createElement(_reactNative.View, {
          style: [styles.rowContainer, {
            opacity: disabled ? 0.3 : 1
          }, rowContainerStyle]
        }, activeIcon, icon, _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer, {
            maxWidth: (width - _LHCommonFunction.LHUiUtils.GetPx(24) - (icon ? (leftIconStyle && _reactNative.StyleSheet.flatten(leftIconStyle).width || _LHCommonFunction.LHUiUtils.GetPx(36)) + _LHCommonFunction.LHUiUtils.GetPx(12) : 0) - (activeIcon ? _LHCommonFunction.LHUiUtils.GetPx(6) : 0) - (rightDescription ? width * 0.12 + _LHCommonFunction.LHUiUtils.GetPx(12) : 0) - (rightSwitch ? _LHCommonFunction.LHUiUtils.GetPx(44) + _LHCommonFunction.LHUiUtils.GetPx(20) : 0) - (rightCheckbBox ? _LHCommonFunction.LHUiUtils.GetPx(20) + _LHCommonFunction.LHUiUtils.GetPx(12) : 0) - (rightArrow ? _LHCommonFunction.LHUiUtils.GetPx(24) : 0) - (rightDotElement ? _LHCommonFunction.LHUiUtils.GetPx(10) + _LHCommonFunction.LHUiUtils.GetPx(12) : 0) - (rightIcon ? (rightIconStype && _reactNative.StyleSheet.flatten(rightIconStype).width || _LHCommonFunction.LHUiUtils.GetPx(20)) + _LHCommonFunction.LHUiUtils.GetPx(12) : 0) - _LHCommonFunction.LHUiUtils.GetPx(24) - _LHCommonFunction.LHUiUtils.GetPx(3)) / width * 100 + '%'
          }, textContainer]
        }, titleEle, descriptionElement), rightDescriptionElement, rightDotElement, rightIcon, badgeElement, rightSwitch, rightCheckbBox, rightArrow);

        if (useTouchableHighlight && !disabled) {
          content = _react.default.createElement(_reactNative.TouchableHighlight, {
            style: [styles.cellContainer, styles.whiteBg, cellContainerStyle],
            onPress: function onPress() {
              _this2.viewOnTouched();
            },
            onLongPress: function onLongPress() {
              _this2.viewOnLongPressed();
            },
            delayLongPress: minimumLongPressDuration || 500,
            underlayColor: _LHCommonFunction.LHUiUtils.MiJiaCellSelBgColor,
            activeOpacity: 1,
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID),
            testID: testID
          }, content);
        } else {
          content = _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
            style: [styles.cellContainer, cellContainerStyle],
            onPress: function onPress() {
              _this2.viewOnTouched();
            },
            onLongPress: function onLongPress() {
              _this2.viewOnLongPressed();
            },
            delayLongPress: minimumLongPressDuration || 500,
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID),
            testID: testID
          }, content);
        }

        if (showSliderView) {
          content = _react.default.createElement(_ListItem.ListItemWithSlider, {
            title: title,
            containerStyle: (0, _extends2.default)({}, {
              paddingHorizontal: _LHCommonFunction.LHUiUtils.GetPx(24),
              height: _LHCommonFunction.LHUiUtils.GetPx(105)
            }, rowContainerStyle),
            sliderStyle: _reactNative.StyleSheet.flatten([{
              thumbStyle: styles.sliderThumbStyle
            }, sliderStyle]),
            titleStyle: _reactNative.StyleSheet.flatten([styles.sliderTitleText, titleStyle, {
              marginRight: _LHCommonFunction.LHUiUtils.GetPx(2)
            }]),
            valueStyle: _reactNative.StyleSheet.flatten([styles.sliderValueText, valueStyle, {
              marginLeft: _LHCommonFunction.LHUiUtils.GetPx(2)
            }]),
            showSeparator: false,
            showWithPercent: typeof showWithPercent === 'undefined' ? false : showWithPercent,
            sliderProps: sliderProps,
            onSlidingComplete: onSlidingComplete
          });
        }

        return _react.default.createElement(_reactNative.View, {
          style: [{
            width: '100%'
          }, styles.whiteBg, style]
        }, _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: [{
            opacity: topSeparatorLine ? disabled ? 0.3 : 1 : 0,
            alignSelf: 'flex-start'
          }, {
            marginLeft: separatorMarginLeft
          }, topSeparatorStyle]
        }), children || content, _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: [{
            opacity: bottomSeparatorLine ? disabled ? 0.3 : 1 : 0,
            alignSelf: 'flex-start'
          }, {
            marginLeft: separatorMarginLeft
          }, bottomSeparatorStyle]
        }));
      }
    }]);
    return LHStandardCell;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHStandardCell);

  exports.default = _default;
},10304,[14305,14344,14320,14323,14371,14377,14386,10297,10033,10004,10178,10347,10338,10308,10307,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};
  module.exports = emptyObject;
},10306,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var LHCommonIcon = function LHCommonIcon() {
    (0, _classCallCheck2.default)(this, LHCommonIcon);
  };

  LHCommonIcon.card = {
    alarm: _$$_REQUIRE(_dependencyMap[2]),
    ifttt: _$$_REQUIRE(_dependencyMap[3])
  };
  LHCommonIcon.navigation = {
    add: {
      disable: _$$_REQUIRE(_dependencyMap[4]),
      normal: _$$_REQUIRE(_dependencyMap[5]),
      press: _$$_REQUIRE(_dependencyMap[6])
    },
    back: {
      disable: _$$_REQUIRE(_dependencyMap[7]),
      normal: _$$_REQUIRE(_dependencyMap[8]),
      press: _$$_REQUIRE(_dependencyMap[9])
    },
    cancel: {
      disable: _$$_REQUIRE(_dependencyMap[10]),
      normal: _$$_REQUIRE(_dependencyMap[11]),
      press: _$$_REQUIRE(_dependencyMap[12])
    },
    confirm: {
      disable: _$$_REQUIRE(_dependencyMap[13]),
      normal: _$$_REQUIRE(_dependencyMap[14]),
      press: _$$_REQUIRE(_dependencyMap[15])
    },
    info: {
      disable: _$$_REQUIRE(_dependencyMap[16]),
      normal: _$$_REQUIRE(_dependencyMap[17]),
      press: _$$_REQUIRE(_dependencyMap[18])
    },
    like: {
      disable: _$$_REQUIRE(_dependencyMap[19]),
      normal: _$$_REQUIRE(_dependencyMap[20]),
      press: _$$_REQUIRE(_dependencyMap[21])
    },
    more: {
      disable: _$$_REQUIRE(_dependencyMap[22]),
      normal: _$$_REQUIRE(_dependencyMap[23]),
      press: _$$_REQUIRE(_dependencyMap[24])
    },
    my: {
      disable: _$$_REQUIRE(_dependencyMap[25]),
      normal: _$$_REQUIRE(_dependencyMap[26]),
      press: _$$_REQUIRE(_dependencyMap[27])
    },
    next: {
      disable: _$$_REQUIRE(_dependencyMap[28]),
      normal: _$$_REQUIRE(_dependencyMap[29]),
      press: _$$_REQUIRE(_dependencyMap[30])
    },
    scan: {
      disable: _$$_REQUIRE(_dependencyMap[31]),
      normal: _$$_REQUIRE(_dependencyMap[32]),
      press: _$$_REQUIRE(_dependencyMap[33])
    },
    search: {
      disable: _$$_REQUIRE(_dependencyMap[34]),
      normal: _$$_REQUIRE(_dependencyMap[35]),
      press: _$$_REQUIRE(_dependencyMap[36])
    },
    select: {
      disable: _$$_REQUIRE(_dependencyMap[37]),
      normal: _$$_REQUIRE(_dependencyMap[38]),
      press: _$$_REQUIRE(_dependencyMap[39])
    },
    selectReverse: {
      disable: _$$_REQUIRE(_dependencyMap[40]),
      normal: _$$_REQUIRE(_dependencyMap[41]),
      press: _$$_REQUIRE(_dependencyMap[42])
    },
    setting: {
      disable: _$$_REQUIRE(_dependencyMap[43]),
      normal: _$$_REQUIRE(_dependencyMap[44]),
      press: _$$_REQUIRE(_dependencyMap[45])
    },
    share: {
      disable: _$$_REQUIRE(_dependencyMap[46]),
      normal: _$$_REQUIRE(_dependencyMap[47]),
      press: _$$_REQUIRE(_dependencyMap[48])
    }
  };
  LHCommonIcon.common = {
    emptyImage: {
      normal: _$$_REQUIRE(_dependencyMap[49])
    },
    rename: {
      normal: _$$_REQUIRE(_dependencyMap[50]),
      white: _$$_REQUIRE(_dependencyMap[51])
    },
    delete: {
      normal: _$$_REQUIRE(_dependencyMap[52]),
      white: _$$_REQUIRE(_dependencyMap[53])
    },
    swipeoutBtnMore: _$$_REQUIRE(_dependencyMap[54]),
    add: {
      normal: _$$_REQUIRE(_dependencyMap[55]),
      mgl03: _$$_REQUIRE(_dependencyMap[56])
    },
    navigation_close: _$$_REQUIRE(_dependencyMap[57]),
    navigation_confirm: _$$_REQUIRE(_dependencyMap[58])
  };
  LHCommonIcon.bottomViewIcon = {
    bottom_bar_collect: _$$_REQUIRE(_dependencyMap[59]),
    bottom_bar_move: _$$_REQUIRE(_dependencyMap[60]),
    bottom_bar_top: _$$_REQUIRE(_dependencyMap[61])
  };
  LHCommonIcon.cellIcon = {
    checkActive: _$$_REQUIRE(_dependencyMap[62]),
    checkNotActive: _$$_REQUIRE(_dependencyMap[63]),
    offLine: _$$_REQUIRE(_dependencyMap[64]),
    rightArrow: _$$_REQUIRE(_dependencyMap[65]),
    deleted: _$$_REQUIRE(_dependencyMap[66])
  };
  LHCommonIcon.deviceIcon = {
    default: _$$_REQUIRE(_dependencyMap[67]),
    lumiGatewaymgl03: _$$_REQUIRE(_dependencyMap[68]),
    lumiAqaraLinuxHub: _$$_REQUIRE(_dependencyMap[69]),
    lumiMijiaLinuxHub: _$$_REQUIRE(_dependencyMap[70])
  };
  LHCommonIcon.iftttIcon = {
    iftttCardSuccessIcon: _$$_REQUIRE(_dependencyMap[71]),
    iftttCardFailIcon: _$$_REQUIRE(_dependencyMap[72]),
    iftttSuccessIcon: _$$_REQUIRE(_dependencyMap[73]),
    iftttFailIcon: _$$_REQUIRE(_dependencyMap[74])
  };
  LHCommonIcon.triggleDevice = {
    emptyImg: _$$_REQUIRE(_dependencyMap[75])
  };
  var _default = LHCommonIcon;
  exports.default = _default;
},10307,[14305,14320,10310,10313,10316,10319,10322,10325,10328,10331,10334,10337,10340,10343,10346,10349,10352,10355,10358,10361,10364,10367,10370,10373,10376,10379,10382,10385,10388,10391,10394,10397,10400,10403,10406,10409,10412,10415,10418,10421,10424,10427,10430,10433,10436,10439,10442,10445,10448,10451,10454,10457,10460,10463,10466,10469,10472,10268,10271,10475,10478,10481,10253,10256,10484,10487,10490,10493,10496,10499,10502,10505,10508,10511,10514,10517]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/card",
    "width": 102,
    "height": 90,
    "scales": [1],
    "hash": "50efd7fdd644a64f7804711b75554c1e",
    "name": "card_alarm",
    "type": "png"
  });
},10310,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/card",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "610760181887b30ebae20932f6544190",
    "name": "card_ifttt",
    "type": "png"
  });
},10313,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "9f08092e22849b0b48d5e7dafe9296f3",
    "name": "add_dis",
    "type": "png"
  });
},10316,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  {
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},10318,[10321]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f181dc99569d27f731afa9f9600c4a63",
    "name": "add_nor",
    "type": "png"
  });
},10319,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0]);

  function emptyFunction() {}

  function emptyFunctionWithReset() {}

  emptyFunctionWithReset.resetWarningCache = emptyFunction;

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},10321,[10324]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "b178ee6650b9111e4d780438718856cf",
    "name": "add_pes",
    "type": "png"
  });
},10322,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},10324,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f9e41309e0df814e279ab339029286f5",
    "name": "back_dis",
    "type": "png"
  });
},10325,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "6fdfb6cf7038adf1a4eb7094d4f5841b",
    "name": "back_nor",
    "type": "png"
  });
},10328,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "ebf425369ce192fc23933b221fb1c326",
    "name": "back_pes",
    "type": "png"
  });
},10331,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "5b73a3d065c1fab6e230b02ab83d44ef",
    "name": "cancel_dis",
    "type": "png"
  });
},10334,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "b8d50bd5e6632fd41dffda9f42e79318",
    "name": "cancel_nor",
    "type": "png"
  });
},10337,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "a3b0bc78f6d4cd458c2eb8342e3ac972",
    "name": "cancel_pes",
    "type": "png"
  });
},10340,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "129d1f533c98ecfda6e8d924b8a16d0b",
    "name": "confirm_dis",
    "type": "png"
  });
},10343,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "a3a7b8fd0df829e51c2f5249d3e015b5",
    "name": "confirm_nor",
    "type": "png"
  });
},10346,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "15b01c19173e8b5985e99989fc97d8d4",
    "name": "confirm_pes",
    "type": "png"
  });
},10349,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "48a3cc655c0c8499b574cffc0339f343",
    "name": "info_dis",
    "type": "png"
  });
},10352,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "7e63a53ead8799e159bd8e7efbc261ae",
    "name": "info_nor",
    "type": "png"
  });
},10355,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "bdbf7bcaaf4a7d854847700d577fc394",
    "name": "info_pes",
    "type": "png"
  });
},10358,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "91983b2aa4cc8997f2f078ac923b47b3",
    "name": "like_dis",
    "type": "png"
  });
},10361,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "02d01920c2bb28e05a5e9c17a59b8363",
    "name": "like_nor",
    "type": "png"
  });
},10364,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "e086e95bfa83d27a1cd88c0e52e632d4",
    "name": "like_pes",
    "type": "png"
  });
},10367,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "89c75b1f9c3068734ec43553be748670",
    "name": "more_dis",
    "type": "png"
  });
},10370,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f6224c3e94746228b122d22d2f5c83ea",
    "name": "more_nor",
    "type": "png"
  });
},10373,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f6a20d7d3417f95a5674018313b4e6b8",
    "name": "more_pes",
    "type": "png"
  });
},10376,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "b55192688b413eb960c6b13b4d0ad3bf",
    "name": "my_dis",
    "type": "png"
  });
},10379,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "a2b4e239008d779db161e292358dbbd1",
    "name": "my_nor",
    "type": "png"
  });
},10382,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "549e375b098cd55efc96e23c4d21f470",
    "name": "my_pes",
    "type": "png"
  });
},10385,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "8bf387c3f55ef5848ff23baf619e21da",
    "name": "next_dis",
    "type": "png"
  });
},10388,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "864a6a7b9ad2494a220aad0a0786f2a3",
    "name": "next_nor",
    "type": "png"
  });
},10391,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "a24c5e248a8938079abcc4f1a0a81645",
    "name": "next_pes",
    "type": "png"
  });
},10394,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "8b990b5d732c3c86487fddc81da0c7a4",
    "name": "scan_dis",
    "type": "png"
  });
},10397,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "224d07736186c49a32dd02920171fd33",
    "name": "scan_nor",
    "type": "png"
  });
},10400,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "167a8ca389f4927d5b4f3cd5af96a023",
    "name": "scan_pes",
    "type": "png"
  });
},10403,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "72d4877b91e0cad61f64c7186bfea4d8",
    "name": "search_dis",
    "type": "png"
  });
},10406,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "5fb27e3d53019bc977bef10c4d8b4113",
    "name": "search_nor",
    "type": "png"
  });
},10409,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "4aac68b55ffc57f043b436e4b6c52ac5",
    "name": "search_pes",
    "type": "png"
  });
},10412,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "afd5ffd9fe5d507c0fc8d24951cdd898",
    "name": "select_dis",
    "type": "png"
  });
},10415,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "fa8158b92ec714b7350e90bfe37f6d2c",
    "name": "select_nor",
    "type": "png"
  });
},10418,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "aa61eb67f1da648f57be2f5ff1a90ca5",
    "name": "select_pes",
    "type": "png"
  });
},10421,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "8e3a62b1f55f377cfe1be36908c9321c",
    "name": "select_reverse_dis",
    "type": "png"
  });
},10424,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "9ce4617814d809649b6e298885107ec7",
    "name": "select_reverse_nor",
    "type": "png"
  });
},10427,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f191d9b98f03c7a3c04e3b50f42378af",
    "name": "select_reverse_pes",
    "type": "png"
  });
},10430,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "a6fada523e2f5cb2e9f5abfed1bc3b91",
    "name": "setting_dis",
    "type": "png"
  });
},10433,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "b7109c6c545f6692f9081715b0c1b055",
    "name": "setting_nor",
    "type": "png"
  });
},10436,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "0ed12edb462f64598571437d60aff50a",
    "name": "setting_pes",
    "type": "png"
  });
},10439,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_dis",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "d001a697ceed0a57ff847002614c5f12",
    "name": "share_dis",
    "type": "png"
  });
},10442,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_nor",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "1165b701dbd96ad6f81355e43d08a785",
    "name": "share_nor",
    "type": "png"
  });
},10445,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/navigation/navigation_pes",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "588f31abb81c385b9d83add9350a270c",
    "name": "share_pes",
    "type": "png"
  });
},10448,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 648,
    "height": 546,
    "scales": [1],
    "hash": "59ec58baef0e22456d3036a5b833877d",
    "name": "mj_list_empty",
    "type": "png"
  });
},10451,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 50,
    "height": 50,
    "scales": [1],
    "hash": "c51e4ffb50d4f5f1511a691bd5504dd2",
    "name": "rename_nor",
    "type": "png"
  });
},10454,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var factory = _$$_REQUIRE(_dependencyMap[1]);

  if (typeof React === 'undefined') {
    throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},10456,[10297,10459]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 75,
    "height": 75,
    "scales": [1],
    "hash": "ed980bb83eefbe1740761031ab9dd3d4",
    "name": "rename_nor_white",
    "type": "png"
  });
},10457,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _assign = _$$_REQUIRE(_dependencyMap[0]);

  var emptyObject = _$$_REQUIRE(_dependencyMap[1]);

  var _invariant = _$$_REQUIRE(_dependencyMap[2]);

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;
  {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {}
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, "ReactClass: You are attempting to define a reserved property, `%s`, that shouldn't be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.", name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},10459,[10303,10306,10036]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 50,
    "height": 50,
    "scales": [1],
    "hash": "6a65282662c651f3037f653b573891e9",
    "name": "delete_nor",
    "type": "png"
  });
},10460,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 75,
    "height": 75,
    "scales": [1],
    "hash": "00f3cbcca2bc4a549a705464e772d54d",
    "name": "delete_nor_white",
    "type": "png"
  });
},10463,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "3e8bdff6fd3b6edc7f0603756890fb6c",
    "name": "swipeout_btn_more",
    "type": "png"
  });
},10466,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 198,
    "height": 198,
    "scales": [1],
    "hash": "47d61148afeb325ebf9eed752bc836cd",
    "name": "add_button_nor",
    "type": "png"
  });
},10469,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 198,
    "height": 198,
    "scales": [1],
    "hash": "3cd088ed56ddf943dd3b90bef598a881",
    "name": "add_button_mgl03_nor",
    "type": "png"
  });
},10472,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 75,
    "height": 75,
    "scales": [1],
    "hash": "f93299ea5cf0bf2eed290c8e997372cb",
    "name": "bottom_bar_collect",
    "type": "png"
  });
},10475,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 75,
    "height": 75,
    "scales": [1],
    "hash": "a39a6a79bba009e2d03f70b815fec98d",
    "name": "bottom_bar_move",
    "type": "png"
  });
},10478,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 75,
    "height": 75,
    "scales": [1],
    "hash": "98ab2384e431b749de9087a2de931a80",
    "name": "bottom_bar_top",
    "type": "png"
  });
},10481,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 51,
    "height": 51,
    "scales": [1],
    "hash": "51b0e88e272812a9a65792b952466f3d",
    "name": "device_offline",
    "type": "png"
  });
},10484,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources",
    "width": 18,
    "height": 30,
    "scales": [1],
    "hash": "bafcee8b1c0c1cad2ea2efae4656d5ef",
    "name": "select_icon",
    "type": "png"
  });
},10487,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/other",
    "width": 51,
    "height": 51,
    "scales": [1],
    "hash": "18a680fe7fca66e0506df789405ee8bc",
    "name": "device_deleted",
    "type": "png"
  });
},10490,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/deviceIcon",
    "width": 171,
    "height": 168,
    "scales": [1],
    "hash": "44941a15c5f495a226052a843725fb38",
    "name": "device_icon_default",
    "type": "png"
  });
},10493,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/deviceIcon",
    "width": 300,
    "height": 300,
    "scales": [1],
    "hash": "daf9d0d03dceeff6e9104cc602f8ce19",
    "name": "lumi.gateway.mgl03",
    "type": "png"
  });
},10496,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/deviceIcon",
    "width": 300,
    "height": 300,
    "scales": [1],
    "hash": "9c9e8a08d89c88101e5e39843711fe9b",
    "name": "lumi_aqara_linuxhub",
    "type": "png"
  });
},10499,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/deviceIcon",
    "width": 300,
    "height": 300,
    "scales": [1],
    "hash": "fc9a62a9d726d669268193e31557e317",
    "name": "lumi_mijia_linuxhub",
    "type": "png"
  });
},10502,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/ifttt",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "d5259257f18bddbc73e4b3dfa721e81e",
    "name": "lumi_card_ic_success",
    "type": "png"
  });
},10505,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/ifttt",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "4f7d8589d84842f05ef9029df3242e5c",
    "name": "lumi_card_ic_fail",
    "type": "png"
  });
},10508,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/ifttt",
    "width": 414,
    "height": 414,
    "scales": [1],
    "hash": "8a8a6a11e9fb67c5ba52c81cb81ca4e6",
    "name": "lumi_success_icon",
    "type": "png"
  });
},10511,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},10513,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/ifttt",
    "width": 414,
    "height": 414,
    "scales": [1],
    "hash": "cc5054ceebca7ee1ba70f569aa0b786b",
    "name": "lumi_fail_icon",
    "type": "png"
  });
},10514,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources/triggleDevice",
    "width": 414,
    "height": 414,
    "scales": [1],
    "hash": "372948f0ea16947674da3df52c8be05e",
    "name": "lumi_gateway_empty_image",
    "type": "png"
  });
},10517,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _miot = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var LHWebImage = function (_React$Component) {
    (0, _inherits2.default)(LHWebImage, _React$Component);

    function LHWebImage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHWebImage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHWebImage).call(this, props));
      _this.state = {
        source: ''
      };
      return _this;
    }

    (0, _createClass2.default)(LHWebImage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        console.log('LHWebImageLHWebImageLHWebImageLHWebImageLHWebImageLHWebImageLHWebImage');
        this.downloadWebImage();
      }
    }, {
      key: "downloadWebImage",
      value: function downloadWebImage() {
        var _this2 = this;

        var source = this.props.source;
        var fileName = 'lumi_teyhhhyyst.png';

        _miot.Host.file.isFileExists(fileName).then(function (res) {
          console.log('file exist at path:', res);

          if (res === true) {
            _this2.setState({
              source: fileName
            });
          } else {
            _miot.Host.file.downloadFile(source.uri, fileName).then(function (res1) {
              console.log(res1);

              _this2.setState({
                source: res1.path
              });
            }).catch(function () {});
          }
        }).catch(function (err) {
          console.log(err);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var source = this.state.source;
        var style = this.props.style;
        return _react.default.createElement(_reactNative.View, {
          style: {
            width: '100%',
            height: '100%'
          }
        }, _react.default.createElement(_reactNative.Image, {
          source: {
            local: source
          },
          style: {
            width: '100%',
            height: '100%'
          }
        }));
      }
    }]);
    return LHWebImage;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHWebImage);

  exports.default = _default;
},10520,[14305,14320,14323,14371,14377,14386,10297,10033,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonIcon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var LHPlaceHolderImage = function (_React$Component) {
    (0, _inherits2.default)(LHPlaceHolderImage, _React$Component);

    function LHPlaceHolderImage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHPlaceHolderImage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHPlaceHolderImage).call(this, props));
      _this.state = {
        showPlaceHolder: true
      };
      return _this;
    }

    (0, _createClass2.default)(LHPlaceHolderImage, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(data) {
        if (!data.iconSource || !data.iconSource.uri) {
          this.setState({
            showPlaceHolder: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            style = _this$props.style,
            iconSource = _this$props.iconSource,
            iconSourceStyle = _this$props.iconSourceStyle,
            children = _this$props.children;
        var showPlaceHolder = this.state.showPlaceHolder;
        var iconSourceImage = iconSource.uri ? _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          key: iconSource.uri,
          style: [{
            width: '100%',
            height: '100%'
          }, iconSourceStyle, {
            opacity: !showPlaceHolder ? 1 : 0
          }],
          source: iconSource,
          onLoad: function onLoad() {
            _this2.setState({
              showPlaceHolder: false
            });
          },
          onError: function onError() {
            _this2.setState({
              showPlaceHolder: true
            });
          }
        }) : null;
        return _react.default.createElement(_reactNative.View, {
          style: style
        }, _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: {
            position: 'absolute',
            width: '100%',
            height: '100%',
            opacity: showPlaceHolder ? 1 : 0
          },
          source: _LHCommonIcon.default.deviceIcon.default
        }), _react.default.createElement(_reactNative.View, {
          style: {
            width: '100%',
            height: '100%'
          }
        }, iconSourceImage, children));
      }
    }]);
    return LHPlaceHolderImage;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHPlaceHolderImage);

  exports.default = _default;
},10523,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10307]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var OFF_COLOR = '#f0f0f0';
  var BORDER_COLOR = 'rgba(0,0,0,0.1)';

  var BACK_WIDTH = _LHCommonFunction.LHUiUtils.GetPx(44);

  var BACK_HEIGHT = _LHCommonFunction.LHUiUtils.GetPx(24);

  var BORDER_WIDTH = _LHCommonFunction.LHUiUtils.MiJiaBorderWidth;

  var minMargin = _LHCommonFunction.LHUiUtils.GetPx(3);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    back: {
      justifyContent: 'center',
      borderWidth: BORDER_WIDTH,
      borderColor: BORDER_COLOR
    },
    circle: {
      position: 'absolute',
      borderWidth: BORDER_WIDTH,
      borderColor: BORDER_COLOR,
      backgroundColor: '#fff'
    }
  });

  var LHSwitch = function (_React$Component) {
    (0, _inherits2.default)(LHSwitch, _React$Component);

    function LHSwitch(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHSwitch);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSwitch).call(this, props));
      _this.state = {};
      var _this$props = _this.props,
          style = _this$props.style,
          value = _this$props.value;
      var width = style.width,
          height = style.height;
      var backWidth = width || BACK_WIDTH;
      var backHeight = height || BACK_HEIGHT;
      var margin = minMargin;
      var circleSize = backHeight - 2 * margin;
      _this.offsetXMax = backWidth - backHeight;
      _this.backStyle = {
        width: backWidth,
        height: backHeight,
        borderRadius: backHeight / 2
      };
      _this.circleStyle = {
        margin: margin,
        width: circleSize,
        height: circleSize,
        borderRadius: circleSize / 2
      };
      _this.offsetX = new _reactNative.Animated.Value(value ? _this.offsetXMax : 0);
      return _this;
    }

    (0, _createClass2.default)(LHSwitch, [{
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var value = this.props.value;

        if (newProps.value !== value) {
          this.animated(newProps.value);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            value = _this$props2.value,
            onTintColor = _this$props2.onTintColor,
            tintColor = _this$props2.tintColor,
            disabled = _this$props2.disabled,
            testID = _this$props2.testID;
        var _this$backStyle = this.backStyle,
            width = _this$backStyle.width,
            height = _this$backStyle.height;
        var backgroundColor = value ? onTintColor : tintColor;
        var opacity = disabled ? 0.3 : 1;
        return _react.default.createElement(_reactNative.View, {
          key: 'LHSwitch_' + disabled,
          style: [styles.container]
        }, _react.default.createElement(_reactNative.TouchableOpacity, {
          style: [styles.back, this.backStyle, {
            borderWidth: BORDER_WIDTH,
            borderColor: BORDER_COLOR,
            width: width,
            height: height,
            borderRadius: height / 2,
            backgroundColor: backgroundColor,
            opacity: opacity
          }],
          disabled: disabled,
          activeOpacity: 0.8,
          onPress: function onPress() {
            return _this2.onValueChange();
          },
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID),
          testID: testID
        }), _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: "none",
          style: [styles.circle, this.circleStyle, {
            transform: [{
              translateX: this.offsetX
            }]
          }]
        }));
      }
    }, {
      key: "animated",
      value: function animated(value) {
        var toValue = value ? this.offsetXMax : 0;

        _reactNative.Animated.spring(this.offsetX, {
          toValue: toValue,
          bounciness: 9,
          speed: 9
        }).start();
      }
    }, {
      key: "onValueChange",
      value: function onValueChange() {
        var _this$props3 = this.props,
            value = _this$props3.value,
            onValueChange = _this$props3.onValueChange;

        if (onValueChange) {
          onValueChange(!value);
        }
      }
    }]);
    return LHSwitch;
  }(_react.default.Component);

  exports.default = LHSwitch;
  LHSwitch.propTypes = {
    value: _propTypes.default.bool.isRequired,
    style: _propTypes.default.object,
    onTintColor: _propTypes.default.string,
    tintColor: _propTypes.default.string,
    disabled: _propTypes.default.bool,
    onValueChange: _propTypes.default.func.isRequired
  };
  LHSwitch.defaultProps = {
    value: false,
    style: {},
    onTintColor: _LHCommonFunction.LHUiUtils.MiJiaBlue,
    tintColor: OFF_COLOR,
    disabled: false
  };
},10526,[14305,14320,14323,14371,14377,14386,10318,10297,10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var LHSwipeoutButton = function (_React$Component) {
    (0, _inherits2.default)(LHSwipeoutButton, _React$Component);

    function LHSwipeoutButton(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHSwipeoutButton);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSwipeoutButton).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(LHSwipeoutButton, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            text = _this$props.text,
            type = _this$props.type,
            hideIcon = _this$props.hideIcon,
            icon = _this$props.icon;
        var iconEle = hideIcon ? null : _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: {
            width: _LHCommonFunction.LHUiUtils.GetPx(24),
            height: _LHCommonFunction.LHUiUtils.GetPx(24)
          },
          source: icon || (type === 'more' ? _LHCommonUI.LHCommonIcon.common.swipeBtnMore : type === 'rename' ? _LHCommonUI.LHCommonIcon.common.rename.white : _LHCommonUI.LHCommonIcon.common.delete.white)
        });
        return _react.default.createElement(_reactNative.View, {
          style: [{
            width: '100%',
            height: '100%',
            justifyContent: 'center',
            alignItems: 'center',
            backgroundColor: type === 'more' ? '#A1ADB8' : type === 'rename' ? '#FCBD4E' : '#F43F31'
          }, style]
        }, iconEle, _react.default.createElement(_LHCommonUI.LHText, {
          style: {
            color: '#fff',
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
            lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16)
          }
        }, text));
      }
    }]);
    return LHSwipeoutButton;
  }(_react.default.Component);

  LHSwipeoutButton.defaultProps = {
    type: 'delete'
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHSwipeoutButton);

  exports.default = _default;
},10529,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactTweenState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _NativeButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _styles = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _createReactClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var SwipeoutBtn = (0, _createReactClass.default)({
    displayName: "SwipeoutBtn",
    propTypes: {
      backgroundColor: _propTypes.default.string,
      color: _propTypes.default.string,
      component: _propTypes.default.node,
      onPress: _propTypes.default.func,
      text: _propTypes.default.node,
      type: _propTypes.default.string,
      underlayColor: _propTypes.default.string
    },
    getDefaultProps: function getDefaultProps() {
      return {
        backgroundColor: null,
        color: null,
        component: null,
        underlayColor: null,
        height: 0,
        onPress: null,
        disabled: false,
        text: 'Click me',
        type: '',
        width: 0
      };
    },
    render: function render() {
      var btn = this.props;
      var styleSwipeoutBtn = [_styles.default.swipeoutBtn];
      if (btn.type === 'delete') styleSwipeoutBtn.push(_styles.default.colorDelete);else if (btn.type === 'primary') styleSwipeoutBtn.push(_styles.default.colorPrimary);else if (btn.type === 'secondary') styleSwipeoutBtn.push(_styles.default.colorSecondary);
      if (btn.backgroundColor) styleSwipeoutBtn.push([{
        backgroundColor: btn.backgroundColor
      }]);
      styleSwipeoutBtn.push([{
        height: btn.height,
        width: btn.width
      }]);
      var styleSwipeoutBtnComponent = [];
      styleSwipeoutBtnComponent.push([{
        height: btn.height,
        width: btn.width
      }]);
      var styleSwipeoutBtnText = [_styles.default.swipeoutBtnText];
      if (btn.color) styleSwipeoutBtnText.push({
        color: btn.color
      });
      return _react.default.createElement(_NativeButton.default, {
        testID: this.props.testID,
        onPress: this.props.onPress,
        underlayColor: this.props.underlayColor,
        disabled: this.props.disabled,
        style: [styleSwipeoutBtn],
        textStyle: styleSwipeoutBtnText
      }, btn.component ? _react.default.createElement(_reactNative.View, {
        style: styleSwipeoutBtnComponent
      }, btn.component) : btn.text);
    }
  });
  var Swipeout = (0, _createReactClass.default)({
    displayName: "Swipeout",
    mixins: [_reactTweenState.default.Mixin],
    propTypes: {
      autoClose: _propTypes.default.bool,
      backgroundColor: _propTypes.default.string,
      close: _propTypes.default.bool,
      left: _propTypes.default.array,
      onOpen: _propTypes.default.func,
      onClose: _propTypes.default.func,
      right: _propTypes.default.array,
      scroll: _propTypes.default.func,
      style: (_reactNative.ViewPropTypes || _reactNative.View.propTypes).style,
      sensitivity: _propTypes.default.number,
      buttonWidth: _propTypes.default.number,
      disabled: _propTypes.default.bool
    },
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        rowID: -1,
        sectionID: -1,
        sensitivity: 50
      };
    },
    getInitialState: function getInitialState() {
      return {
        autoClose: this.props.autoClose || false,
        btnWidth: 0,
        btnsLeftWidth: 0,
        btnsRightWidth: 0,
        contentHeight: 0,
        contentPos: 0,
        contentWidth: 0,
        openedRight: false,
        swiping: false,
        tweenDuration: 160,
        timeStart: null
      };
    },
    componentWillMount: function componentWillMount() {
      var _this = this;

      this._panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder(event, gestureState) {
          return true;
        },
        onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(event, gestureState) {
          return _this.state.openedLeft || _this.state.openedRight;
        },
        onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(event, gestureState) {
          return Math.abs(gestureState.dx) > _this.props.sensitivity && Math.abs(gestureState.dy) <= _this.props.sensitivity;
        },
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        },
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return true;
        }
      });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (nextProps.close) this._close();
      if (nextProps.openRight) this._openRight();
      if (nextProps.openLeft) this._openLeft();
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(e, gestureState) {
      var _this2 = this;

      if (this.props.disabled) return;

      if (!this.state.openedLeft && !this.state.openedRight) {
        this._callOnOpen();
      } else {
        this._callOnClose();
      }

      this.refs.swipeoutContent.measure(function (ox, oy, width, height) {
        var buttonWidth = _this2.props.buttonWidth || width / 5;

        _this2.setState({
          btnWidth: buttonWidth,
          btnsLeftWidth: _this2.props.left ? buttonWidth * _this2.props.left.length : 0,
          btnsRightWidth: _this2.props.right ? _this2._getButtonsWidth(_this2.props.right, buttonWidth) : 0,
          swiping: true,
          timeStart: new Date().getTime()
        });
      });
    },
    _getButtonsWidth: function _getButtonsWidth(btns, buttonWidth) {
      var width = 0;

      for (var i = 0, len = btns.length; i < len; i++) {
        width += btns[i].width || buttonWidth;
      }

      return width;
    },
    _handlePanResponderMove: function _handlePanResponderMove(e, gestureState) {
      if (this.props.disabled) return;
      var posX = gestureState.dx;
      var posY = gestureState.dy;
      var leftWidth = this.state.btnsLeftWidth;
      var rightWidth = this.state.btnsRightWidth;
      if (this.state.openedRight) var posX = gestureState.dx - rightWidth;else if (this.state.openedLeft) var posX = gestureState.dx + leftWidth;
      var moveX = Math.abs(posX) > Math.abs(posY);

      if (this.props.scroll) {
        if (moveX) this.props.scroll(false);else this.props.scroll(true);
      }

      if (this.state.swiping) {
        if (posX < 0 && this.props.right) {
          this.setState({
            contentPos: Math.min(posX, 0)
          });
        } else if (posX > 0 && this.props.left) {
          this.setState({
            contentPos: Math.max(posX, 0)
          });
        }

        ;
      }
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(e, gestureState) {
      if (this.props.disabled) return;
      var posX = gestureState.dx;
      var contentPos = this.state.contentPos;
      var contentWidth = this.state.contentWidth;
      var btnsLeftWidth = this.state.btnsLeftWidth;
      var btnsRightWidth = this.state.btnsRightWidth;
      var openX = contentWidth * 0.33;
      var openLeft = posX > openX || posX > btnsLeftWidth / 2;
      var openRight = posX < -openX || posX < -btnsRightWidth / 2;
      if (this.state.openedRight) var openRight = posX - openX < -openX;
      if (this.state.openedLeft) var openLeft = posX + openX > openX;
      var timeDiff = new Date().getTime() - this.state.timeStart < 200;

      if (timeDiff) {
        var openRight = posX < -openX / 10 && !this.state.openedLeft;
        var openLeft = posX > openX / 10 && !this.state.openedRight;
      }

      if (this.state.swiping) {
        if (openRight && contentPos < 0 && posX < 0) {
          this._open(-btnsRightWidth, 'right');
        } else if (openLeft && contentPos > 0 && posX > 0) {
          this._open(btnsLeftWidth, 'left');
        } else {
          this._close();
        }
      }

      if (this.props.scroll) this.props.scroll(true);
    },
    _tweenContent: function _tweenContent(state, endValue) {
      this.tweenState(state, {
        easing: _reactTweenState.default.easingTypes.easeInOutQuad,
        duration: endValue === 0 ? this.state.tweenDuration * 1.5 : this.state.tweenDuration,
        endValue: endValue
      });
    },
    _rubberBandEasing: function _rubberBandEasing(value, limit) {
      if (value < 0 && value < limit) return limit - Math.pow(limit - value, 0.85);else if (value > 0 && value > limit) return limit + Math.pow(value - limit, 0.85);
      return value;
    },
    _autoClose: function _autoClose(btn) {
      if (this.state.autoClose) this._close();
      var onPress = btn.onPress;
      if (onPress) onPress();
    },
    _open: function _open(contentPos, direction) {
      var left = direction === 'left';
      var _this$props = this.props,
          sectionID = _this$props.sectionID,
          rowID = _this$props.rowID,
          onOpen = _this$props.onOpen;
      onOpen && onOpen(sectionID, rowID, direction);

      this._tweenContent('contentPos', contentPos);

      this.setState({
        contentPos: contentPos,
        openedLeft: left,
        openedRight: !left,
        swiping: false
      });
    },
    _close: function _close() {
      var _this$props2 = this.props,
          sectionID = _this$props2.sectionID,
          rowID = _this$props2.rowID,
          onClose = _this$props2.onClose;

      if (onClose && (this.state.openedLeft || this.state.openedRight)) {
        var direction = this.state.openedRight ? 'right' : 'left';
        onClose(sectionID, rowID, direction);
      }

      this._tweenContent('contentPos', 0);

      this._callOnClose();

      this.setState({
        openedRight: false,
        openedLeft: false,
        swiping: false
      });
    },
    _callOnClose: function _callOnClose() {
      if (this.props.onClose) this.props.onClose(this.props.sectionID, this.props.rowID);
    },
    _callOnOpen: function _callOnOpen() {
      if (this.props.onOpen) this.props.onOpen(this.props.sectionID, this.props.rowID);
    },
    _openRight: function _openRight() {
      var _this3 = this;

      this.refs.swipeoutContent.measure(function (ox, oy, width, height) {
        var btnWidth = _this3.props.buttonWidth || width / 5;

        _this3.setState({
          btnWidth: btnWidth,
          btnsRightWidth: _this3.props.right ? btnWidth * _this3.props.right.length : 0
        }, function () {
          _this3._tweenContent('contentPos', -_this3.state.btnsRightWidth);

          _this3._callOnOpen();

          _this3.setState({
            contentPos: -_this3.state.btnsRightWidth,
            openedLeft: false,
            openedRight: true,
            swiping: false
          });
        });
      });
    },
    _openLeft: function _openLeft() {
      var _this4 = this;

      this.refs.swipeoutContent.measure(function (ox, oy, width, height) {
        var btnWidth = _this4.props.buttonWidth || width / 5;

        _this4.setState({
          btnWidth: btnWidth,
          btnsLeftWidth: _this4.props.left ? btnWidth * _this4.props.left.length : 0
        }, function () {
          _this4._tweenContent('contentPos', _this4.state.btnsLeftWidth);

          _this4._callOnOpen();

          _this4.setState({
            contentPos: _this4.state.btnsLeftWidth,
            openedLeft: true,
            openedRight: false,
            swiping: false
          });
        });
      });
    },
    render: function render() {
      var contentWidth = this.state.contentWidth;
      var posX = this.getTweeningValue('contentPos');
      var styleSwipeout = [_styles.default.swipeout, this.props.style];

      if (this.props.backgroundColor) {
        styleSwipeout.push([{
          backgroundColor: this.props.backgroundColor
        }]);
      }

      var limit = -this.state.btnsRightWidth;
      if (posX > 0) var limit = this.state.btnsLeftWidth;
      var styleLeftPos = {
        left: {
          left: 0,
          overflow: 'hidden',
          width: Math.min(limit * (posX / limit), limit)
        }
      };
      var styleRightPos = {
        right: {
          left: Math.abs(contentWidth + Math.max(limit, posX)),
          right: 0
        }
      };
      var styleContentPos = {
        content: {
          transform: [{
            translateX: this._rubberBandEasing(posX, limit)
          }]
        }
      };
      var styleContent = [_styles.default.swipeoutContent];
      styleContent.push(styleContentPos.content);
      var styleRight = [_styles.default.swipeoutBtns];
      styleRight.push(styleRightPos.right);
      var styleLeft = [_styles.default.swipeoutBtns];
      styleLeft.push(styleLeftPos.left);
      var isRightVisible = posX < 0;
      var isLeftVisible = posX > 0;
      return _react.default.createElement(_reactNative.View, {
        style: styleSwipeout
      }, _react.default.createElement(_reactNative.View, (0, _extends2.default)({
        ref: "swipeoutContent",
        style: styleContent,
        onLayout: this._onLayout
      }, this._panResponder.panHandlers), this.props.children), this._renderButtons(this.props.right, isRightVisible, styleRight), this._renderButtons(this.props.left, isLeftVisible, styleLeft));
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      this.setState({
        contentWidth: width,
        contentHeight: height
      });
    },
    _renderButtons: function _renderButtons(buttons, isVisible, style) {
      if (buttons && isVisible) {
        return _react.default.createElement(_reactNative.View, {
          style: style
        }, buttons.map(this._renderButton));
      } else {
        return _react.default.createElement(_reactNative.View, null);
      }
    },
    _renderButton: function _renderButton(btn, i) {
      var _this5 = this;

      return _react.default.createElement(SwipeoutBtn, {
        backgroundColor: btn.backgroundColor,
        color: btn.color,
        component: btn.component,
        disabled: btn.disabled,
        height: this.state.contentHeight,
        key: i,
        onPress: function onPress() {
          return _this5._autoClose(btn);
        },
        text: btn.text,
        type: btn.type,
        underlayColor: btn.underlayColor,
        width: btn.width || this.state.btnWidth,
        testID: btn.testID || ''
      });
    }
  });
  Swipeout.NativeButton = _NativeButton.default;
  Swipeout.SwipeoutButton = SwipeoutBtn;
  var _default = Swipeout;
  exports.default = _default;
},10532,[14308,14305,14344,10535,10538,10541,10297,10318,10456,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  !function (e, n) {
    "object" == typeof exports && "object" == typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define([], n) : "object" == typeof exports ? exports.tweenState = n() : e.tweenState = n();
  }(this, function () {
    return function (e) {
      function n(r) {
        if (t[r]) return t[r].exports;
        var a = t[r] = {
          exports: {},
          id: r,
          loaded: false
        };
        return e[r].call(a.exports, a, a.exports, n), a.loaded = true, a.exports;
      }

      var t = {};
      return n.m = e, n.c = t, n.p = "", n(0);
    }({
      0: function _(e, n, t) {
        e.exports = t(90);
      },
      1: function _(e, n) {
        function t() {
          c = false, o.length ? s = o.concat(s) : f = -1, s.length && r();
        }

        function r() {
          if (!c) {
            var e = setTimeout(t);
            c = true;

            for (var n = s.length; n;) {
              for (o = s, s = []; ++f < n;) {
                o && o[f].run();
              }

              f = -1, n = s.length;
            }

            o = null, c = false, clearTimeout(e);
          }
        }

        function a(e, n) {
          this.fun = e, this.array = n;
        }

        function u() {}

        var o,
            i = e.exports = {},
            s = [],
            c = false,
            f = -1;
        i.nextTick = function (e) {
          var n = new Array(arguments.length - 1);
          if (arguments.length > 1) for (var t = 1; t < arguments.length; t++) {
            n[t - 1] = arguments[t];
          }
          s.push(new a(e, n)), 1 !== s.length || c || setTimeout(r, 0);
        }, a.prototype.run = function () {
          this.fun.apply(null, this.array);
        }, i.title = "browser", i.browser = true, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = u, i.addListener = u, i.once = u, i.off = u, i.removeListener = u, i.removeAllListeners = u, i.emit = u, i.binding = function (e) {
          throw new Error("process.binding is not supported");
        }, i.cwd = function () {
          return "/";
        }, i.chdir = function (e) {
          throw new Error("process.chdir is not supported");
        }, i.umask = function () {
          return 0;
        };
      },
      90: function _(e, n, t) {
        "use strict";

        function r(e) {
          return e && e.__esModule ? e : {
            "default": e
          };
        }

        Object.defineProperty(n, "__esModule", {
          value: true
        });
        var a = t(165),
            u = r(a),
            o = t(91),
            i = r(o),
            s = "ADDITIVE",
            c = a.easeInOutQuad,
            f = 300,
            l = 0,
            h = {
          ADDITIVE: "ADDITIVE",
          DESTRUCTIVE: "DESTRUCTIVE"
        },
            v = {
          _rafID: null,
          getInitialState: function getInitialState() {
            return {
              tweenQueue: []
            };
          },
          componentWillUnmount: function componentWillUnmount() {
            i["default"].cancel(this._rafID), this._rafID = -1;
          },
          tweenState: function tweenState(e, n) {
            var t = this,
                r = n.easing,
                a = n.duration,
                u = n.delay,
                o = n.beginValue,
                v = n.endValue,
                d = n.onEnd,
                p = n.stackBehavior;
            this.setState(function (n) {
              var I = n,
                  w = undefined,
                  g = undefined;
              if ("string" == typeof e) w = e, g = e;else {
                for (var M = 0; M < e.length - 1; M++) {
                  I = I[e[M]];
                }

                w = e[e.length - 1], g = e.join("|");
              }
              var m = {
                easing: r || c,
                duration: null == a ? f : a,
                delay: null == u ? l : u,
                beginValue: null == o ? I[w] : o,
                endValue: v,
                onEnd: d,
                stackBehavior: p || s
              },
                  x = n.tweenQueue;
              return m.stackBehavior === h.DESTRUCTIVE && (x = n.tweenQueue.filter(function (e) {
                return e.pathHash !== g;
              })), x.push({
                pathHash: g,
                config: m,
                initTime: Date.now() + m.delay
              }), I[w] = m.endValue, 1 === x.length && (t._rafID = (0, i["default"])(t._rafCb)), {
                tweenQueue: x
              };
            });
          },
          getTweeningValue: function getTweeningValue(e) {
            var n = this.state,
                t = undefined,
                r = undefined;
            if ("string" == typeof e) t = n[e], r = e;else {
              t = n;

              for (var a = 0; a < e.length; a++) {
                t = t[e[a]];
              }

              r = e.join("|");
            }

            for (var u = Date.now(), a = 0; a < n.tweenQueue.length; a++) {
              var o = n.tweenQueue[a],
                  i = o.pathHash,
                  s = o.initTime,
                  c = o.config;

              if (i === r) {
                var f = u - s > c.duration ? c.duration : Math.max(0, u - s),
                    l = 0 === c.duration ? c.endValue : c.easing(f, c.beginValue, c.endValue, c.duration),
                    h = l - c.endValue;
                t += h;
              }
            }

            return t;
          },
          _rafCb: function _rafCb() {
            var e = this.state;

            if (0 !== e.tweenQueue.length) {
              for (var n = Date.now(), t = [], r = 0; r < e.tweenQueue.length; r++) {
                var a = e.tweenQueue[r],
                    u = a.initTime,
                    o = a.config;
                n - u < o.duration ? t.push(a) : o.onEnd && o.onEnd();
              }

              -1 !== this._rafID && (this.setState({
                tweenQueue: t
              }), this._rafID = (0, i["default"])(this._rafCb));
            }
          }
        };
        n["default"] = {
          Mixin: v,
          easingTypes: u["default"],
          stackBehavior: h
        }, e.exports = n["default"];
      },
      91: function _(e, n, t) {
        for (var r = t(92), a = "undefined" == typeof window ? {} : window, u = ["moz", "webkit"], o = "AnimationFrame", i = a["requestAnimationFrame"], s = a["cancelAnimationFrame"] || a["cancelRequestAnimationFrame"], c = 0; c < u.length && !i; c++) {
          i = a[u[c] + "Request" + o], s = a[u[c] + "Cancel" + o] || a[u[c] + "CancelRequest" + o];
        }

        if (!i || !s) {
          var f = 0,
              l = 0,
              h = [],
              v = 16.666666666666668;
          i = function i(e) {
            if (0 === h.length) {
              var n = r(),
                  t = Math.max(0, v - (n - f));
              f = t + n, setTimeout(function () {
                var e = h.slice(0);
                h.length = 0;

                for (var n = 0; n < e.length; n++) {
                  if (!e[n].cancelled) try {
                    e[n].callback(f);
                  } catch (t) {
                    setTimeout(function () {
                      throw t;
                    }, 0);
                  }
                }
              }, Math.round(t));
            }

            return h.push({
              handle: ++l,
              callback: e,
              cancelled: false
            }), l;
          }, s = function s(e) {
            for (var n = 0; n < h.length; n++) {
              h[n].handle === e && (h[n].cancelled = true);
            }
          };
        }

        e.exports = function (e) {
          return i.call(a, e);
        }, e.exports.cancel = function () {
          s.apply(a, arguments);
        };
      },
      92: function _(e, n, t) {
        (function (n) {
          (function () {
            var t, r, a;
            "undefined" != typeof performance && null !== performance && performance.now ? e.exports = function () {
              return performance.now();
            } : "undefined" != typeof n && null !== n && n.hrtime ? (e.exports = function () {
              return (t() - a) / 1e6;
            }, r = n.hrtime, t = function t() {
              var e;
              return e = r(), 1e9 * e[0] + e[1];
            }, a = t()) : Date.now ? (e.exports = function () {
              return Date.now() - a;
            }, a = Date.now()) : (e.exports = function () {
              return new Date().getTime() - a;
            }, a = new Date().getTime());
          }).call(this);
        }).call(n, t(1));
      },
      165: function _(e, n) {
        "use strict";

        var t = {
          linear: function linear(e, n, t, r) {
            var a = t - n;
            return a * e / r + n;
          },
          easeInQuad: function easeInQuad(e, n, t, r) {
            var a = t - n;
            return a * (e /= r) * e + n;
          },
          easeOutQuad: function easeOutQuad(e, n, t, r) {
            var a = t - n;
            return -a * (e /= r) * (e - 2) + n;
          },
          easeInOutQuad: function easeInOutQuad(e, n, t, r) {
            var a = t - n;
            return (e /= r / 2) < 1 ? a / 2 * e * e + n : -a / 2 * (--e * (e - 2) - 1) + n;
          },
          easeInCubic: function easeInCubic(e, n, t, r) {
            var a = t - n;
            return a * (e /= r) * e * e + n;
          },
          easeOutCubic: function easeOutCubic(e, n, t, r) {
            var a = t - n;
            return a * ((e = e / r - 1) * e * e + 1) + n;
          },
          easeInOutCubic: function easeInOutCubic(e, n, t, r) {
            var a = t - n;
            return (e /= r / 2) < 1 ? a / 2 * e * e * e + n : a / 2 * ((e -= 2) * e * e + 2) + n;
          },
          easeInQuart: function easeInQuart(e, n, t, r) {
            var a = t - n;
            return a * (e /= r) * e * e * e + n;
          },
          easeOutQuart: function easeOutQuart(e, n, t, r) {
            var a = t - n;
            return -a * ((e = e / r - 1) * e * e * e - 1) + n;
          },
          easeInOutQuart: function easeInOutQuart(e, n, t, r) {
            var a = t - n;
            return (e /= r / 2) < 1 ? a / 2 * e * e * e * e + n : -a / 2 * ((e -= 2) * e * e * e - 2) + n;
          },
          easeInQuint: function easeInQuint(e, n, t, r) {
            var a = t - n;
            return a * (e /= r) * e * e * e * e + n;
          },
          easeOutQuint: function easeOutQuint(e, n, t, r) {
            var a = t - n;
            return a * ((e = e / r - 1) * e * e * e * e + 1) + n;
          },
          easeInOutQuint: function easeInOutQuint(e, n, t, r) {
            var a = t - n;
            return (e /= r / 2) < 1 ? a / 2 * e * e * e * e * e + n : a / 2 * ((e -= 2) * e * e * e * e + 2) + n;
          },
          easeInSine: function easeInSine(e, n, t, r) {
            var a = t - n;
            return -a * Math.cos(e / r * (Math.PI / 2)) + a + n;
          },
          easeOutSine: function easeOutSine(e, n, t, r) {
            var a = t - n;
            return a * Math.sin(e / r * (Math.PI / 2)) + n;
          },
          easeInOutSine: function easeInOutSine(e, n, t, r) {
            var a = t - n;
            return -a / 2 * (Math.cos(Math.PI * e / r) - 1) + n;
          },
          easeInExpo: function easeInExpo(e, n, t, r) {
            var a = t - n;
            return 0 == e ? n : a * Math.pow(2, 10 * (e / r - 1)) + n;
          },
          easeOutExpo: function easeOutExpo(e, n, t, r) {
            var a = t - n;
            return e == r ? n + a : a * (-Math.pow(2, -10 * e / r) + 1) + n;
          },
          easeInOutExpo: function easeInOutExpo(e, n, t, r) {
            var a = t - n;
            return 0 === e ? n : e === r ? n + a : (e /= r / 2) < 1 ? a / 2 * Math.pow(2, 10 * (e - 1)) + n : a / 2 * (-Math.pow(2, -10 * --e) + 2) + n;
          },
          easeInCirc: function easeInCirc(e, n, t, r) {
            var a = t - n;
            return -a * (Math.sqrt(1 - (e /= r) * e) - 1) + n;
          },
          easeOutCirc: function easeOutCirc(e, n, t, r) {
            var a = t - n;
            return a * Math.sqrt(1 - (e = e / r - 1) * e) + n;
          },
          easeInOutCirc: function easeInOutCirc(e, n, t, r) {
            var a = t - n;
            return (e /= r / 2) < 1 ? -a / 2 * (Math.sqrt(1 - e * e) - 1) + n : a / 2 * (Math.sqrt(1 - (e -= 2) * e) + 1) + n;
          },
          easeInElastic: function easeInElastic(e, n, t, r) {
            var a,
                u,
                o,
                i = t - n;
            return o = 1.70158, u = 0, a = i, 0 === e ? n : 1 === (e /= r) ? n + i : (u || (u = .3 * r), a < Math.abs(i) ? (a = i, o = u / 4) : o = u / (2 * Math.PI) * Math.asin(i / a), -(a * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / u)) + n);
          },
          easeOutElastic: function easeOutElastic(e, n, t, r) {
            var a,
                u,
                o,
                i = t - n;
            return o = 1.70158, u = 0, a = i, 0 === e ? n : 1 === (e /= r) ? n + i : (u || (u = .3 * r), a < Math.abs(i) ? (a = i, o = u / 4) : o = u / (2 * Math.PI) * Math.asin(i / a), a * Math.pow(2, -10 * e) * Math.sin((e * r - o) * (2 * Math.PI) / u) + i + n);
          },
          easeInOutElastic: function easeInOutElastic(e, n, t, r) {
            var a,
                u,
                o,
                i = t - n;
            return o = 1.70158, u = 0, a = i, 0 === e ? n : 2 === (e /= r / 2) ? n + i : (u || (u = r * 0.44999999999999996), a < Math.abs(i) ? (a = i, o = u / 4) : o = u / (2 * Math.PI) * Math.asin(i / a), 1 > e ? -0.5 * (a * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / u)) + n : a * Math.pow(2, -10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / u) * .5 + i + n);
          },
          easeInBack: function easeInBack(e, n, t, r, a) {
            var u = t - n;
            return undefined === a && (a = 1.70158), u * (e /= r) * e * ((a + 1) * e - a) + n;
          },
          easeOutBack: function easeOutBack(e, n, t, r, a) {
            var u = t - n;
            return undefined === a && (a = 1.70158), u * ((e = e / r - 1) * e * ((a + 1) * e + a) + 1) + n;
          },
          easeInOutBack: function easeInOutBack(e, n, t, r, a) {
            var u = t - n;
            return undefined === a && (a = 1.70158), (e /= r / 2) < 1 ? u / 2 * (e * e * (((a *= 1.525) + 1) * e - a)) + n : u / 2 * ((e -= 2) * e * (((a *= 1.525) + 1) * e + a) + 2) + n;
          },
          easeInBounce: function easeInBounce(e, n, r, a) {
            var u,
                o = r - n;
            return u = t.easeOutBounce(a - e, 0, o, a), o - u + n;
          },
          easeOutBounce: function easeOutBounce(e, n, t, r) {
            var a = t - n;
            return (e /= r) < 0.36363636363636365 ? a * (7.5625 * e * e) + n : 0.7272727272727273 > e ? a * (7.5625 * (e -= 0.5454545454545454) * e + .75) + n : 0.9090909090909091 > e ? a * (7.5625 * (e -= 0.8181818181818182) * e + .9375) + n : a * (7.5625 * (e -= 0.9545454545454546) * e + .984375) + n;
          },
          easeInOutBounce: function easeInOutBounce(e, n, r, a) {
            var u,
                o = r - n;
            return a / 2 > e ? (u = t.easeInBounce(2 * e, 0, o, a), .5 * u + n) : (u = t.easeOutBounce(2 * e - a, 0, o, a), .5 * u + .5 * o + n);
          }
        };
        e.exports = t;
      }
    });
  });
},10535,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createReactClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var styles = _reactNative.StyleSheet.create({
    button: {
      flexDirection: 'row',
      alignSelf: 'stretch',
      justifyContent: 'center'
    },
    textButton: {
      fontSize: 14,
      alignSelf: 'center'
    },
    opacity: {
      opacity: 0.8
    }
  });

  var NativeButton = (0, _createReactClass.default)({
    displayName: "NativeButton",
    propTypes: (0, _objectSpread2.default)({}, _reactNative.TouchableWithoutFeedback.propTypes, {
      textStyle: _propTypes.default.any,
      disabledStyle: _propTypes.default.any,
      children: _propTypes.default.node.isRequired,
      underlayColor: _propTypes.default.string,
      background: _propTypes.default.any
    }),
    statics: {
      isAndroid: _reactNative.Platform.OS === 'android'
    },
    getDefaultProps: function getDefaultProps() {
      return {
        textStyle: null,
        disabledStyle: null,
        underlayColor: null
      };
    },
    _renderText: function _renderText() {
      if (typeof this.props.children !== 'string') {
        return this.props.children;
      }

      return _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        ellipsizeMode: _reactNative.Platform.OS === 'ios' ? 'clip' : 'tail',
        style: [styles.textButton, this.props.textStyle]
      }, this.props.children);
    },
    render: function render() {
      var disabledStyle = this.props.disabled ? this.props.disabledStyle || styles.opacity : {};
      var buttonProps = {
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        accessible: this.props.accessible,
        delayLongPress: this.props.delayLongPress,
        delayPressIn: this.props.delayPressIn,
        delayPressOut: this.props.delayPressOut,
        disabled: this.props.disabled,
        hitSlop: this.props.hitSlop,
        onLayout: this.props.onLayout,
        onPress: this.props.onPress,
        onPressIn: this.props.onPressIn,
        onPressOut: this.props.onPressOut,
        onLongPress: this.props.onLongPress,
        pressRetentionOffset: this.props.pressRetentionOffset,
        accessibilityLabel: _reactNative.Platform.OS === 'android' ? this.props.testID : null,
        testID: this.props.testID
      };

      if (NativeButton.isAndroid) {
        buttonProps = (0, _extends2.default)(buttonProps, {
          background: this.props.background || _reactNative.TouchableNativeFeedback.SelectableBackground()
        });
        return _react.default.createElement(_reactNative.TouchableNativeFeedback, buttonProps, _react.default.createElement(_reactNative.View, {
          style: [styles.button, this.props.style, disabledStyle]
        }, this._renderText()));
      }

      return _react.default.createElement(_reactNative.TouchableHighlight, (0, _extends2.default)({}, buttonProps, {
        style: [styles.button, this.props.style, disabledStyle],
        underlayColor: this.props.underlayColor
      }), this._renderText());
    }
  });
  var _default = NativeButton;
  exports.default = _default;
},10538,[14305,14344,14314,10297,10318,10456,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var styles = _reactNative.StyleSheet.create({
    swipeout: {
      backgroundColor: '#dbddde',
      overflow: 'hidden'
    },
    swipeoutBtnTouchable: {
      flex: 1
    },
    swipeoutBtn: {
      alignItems: 'center',
      backgroundColor: '#b6bec0',
      justifyContent: 'center',
      overflow: 'hidden'
    },
    swipeoutBtnText: {
      color: '#fff',
      textAlign: 'center'
    },
    swipeoutBtns: {
      bottom: 0,
      flex: 1,
      flexDirection: 'row',
      position: 'absolute',
      right: 0,
      top: 0
    },
    swipeoutContent: {},
    colorDelete: {
      backgroundColor: '#fb3d38'
    },
    colorPrimary: {
      backgroundColor: '#006fff'
    },
    colorSecondary: {
      backgroundColor: '#fd9427'
    }
  });

  var _default = styles;
  exports.default = _default;
},10541,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      height = _Dimensions$get.height;

  var LHCommonStyles = _reactNative.StyleSheet.create({
    navigatorWithBorderBotoom: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
    },
    navigatorWithoutBorderBotoom: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaPageBgColor
    },
    pageGrayStyle: {
      flex: 1,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    pageWhiteStyle: {
      flex: 1,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    bottomBtn: {
      width: _LHCommonFunction.LHUiUtils.GetPx(66),
      height: _LHCommonFunction.LHUiUtils.GetPx(66),
      position: 'absolute',
      bottom: _LHCommonFunction.LHUiUtils.GetPx(12) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight,
      right: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    emptyImg: {
      width: _LHCommonFunction.LHUiUtils.GetPx(240),
      height: _LHCommonFunction.LHUiUtils.GetPx(240),
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(83 * (height - 44 - _LHCommonFunction.LHDeviceUtils.statusBarHeight - _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight - _LHCommonFunction.LHUiUtils.GetPx(240)) / 333),
      alignSelf: 'center'
    },
    emptyView: {
      height: height - _LHCommonFunction.LHUiUtils.TitleBarHeight - _LHCommonFunction.LHDeviceUtils.statusBarHeight,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    emptyPageWrap: {
      height: height - _LHCommonFunction.LHUiUtils.TitleBarHeight - _LHCommonFunction.LHDeviceUtils.statusBarHeight,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    }
  });

  exports.default = LHCommonStyles;
},10544,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var LHBottomButtonGroup = function (_React$Component) {
    (0, _inherits2.default)(LHBottomButtonGroup, _React$Component);

    function LHBottomButtonGroup(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHBottomButtonGroup);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHBottomButtonGroup).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(LHBottomButtonGroup, [{
      key: "renderButtons",
      value: function renderButtons(item, index) {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          key: 'LHBottomButtonGroup_' + index,
          disabled: item.disabled || false,
          style: {
            height: '100%',
            minWidth: _LHCommonFunction.LHUiUtils.GetPx(49),
            justifyContent: 'center',
            flexDirection: 'column',
            alignItems: 'center',
            marginHorizontal: _LHCommonFunction.LHUiUtils.GetPx(7)
          },
          onPress: function onPress() {
            if (typeof item.onPress === 'function') item.onPress();
          },
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(item.testID),
          testID: item.testID
        }, _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: {
            width: _LHCommonFunction.LHUiUtils.GetPx(25),
            height: _LHCommonFunction.LHUiUtils.GetPx(25),
            opacity: item.disabled ? 0.38 : 1
          },
          source: item.icon || (item.type === 'rename' ? _LHCommonUI.LHCommonIcon.common.rename.normal : item.type === 'collect' ? _LHCommonUI.LHCommonIcon.bottomViewIcon.bottom_bar_collect : item.type === 'move' ? _LHCommonUI.LHCommonIcon.bottomViewIcon.bottom_bar_move : item.type === 'top' ? _LHCommonUI.LHCommonIcon.bottomViewIcon.bottom_bar_top : _LHCommonUI.LHCommonIcon.common.delete.normal)
        }), _react.default.createElement(_LHCommonUI.LHText, {
          style: {
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(10),
            lineHeight: _LHCommonFunction.LHUiUtils.GetPx(13),
            color: '#333',
            textAlign: 'center',
            marginBottom: _LHCommonFunction.LHUiUtils.GetPx(4),
            opacity: item.disabled ? 0.38 : 1
          }
        }, item.text));
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            style = _this$props.style,
            buttons = _this$props.buttons;
        return _react.default.createElement(_reactNative.View, {
          style: [{
            height: _LHCommonFunction.LHUiUtils.GetPx(67) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight,
            paddingBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight,
            width: '100%',
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
            justifyContent: 'center',
            flexDirection: 'row'
          }, style]
        }, buttons.map(function (item, index) {
          return _this2.renderButtons(item, index);
        }), _react.default.createElement(_reactNative.View, {
          style: {
            position: 'absolute',
            left: 0,
            top: 0,
            right: 0,
            zIndex: 1
          }
        }, _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: {
            alignSelf: 'flex-start'
          }
        })));
      }
    }]);
    return LHBottomButtonGroup;
  }(_react.default.Component);

  LHBottomButtonGroup.defaultProps = {};

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHBottomButtonGroup);

  exports.default = _default;
},10547,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[11]);

  var LHTimerPage = function (_Component) {
    (0, _inherits2.default)(LHTimerPage, _Component);

    function LHTimerPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHTimerPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHTimerPage).call(this, props));

      _this.addPress = function () {
        _this.setState({
          actionSheetVisible: true
        });
      };

      _this.dismissAction = function () {
        _this.setState({
          actionSheetVisible: false
        });
      };

      _this.state = {
        actionSheetVisible: false
      };
      return _this;
    }

    (0, _createClass2.default)(LHTimerPage, [{
      key: "getPageData",
      value: function getPageData() {
        return [{
          data: [{
            title: '17:22',
            hideRightArrow: true,
            description: '开启时间 | 今天',
            hasSwitch: true,
            switchValue: false,
            hideTopSeparatorLine: true
          }, {
            title: '12:02',
            hideRightArrow: true,
            description: '关闭时间 | 周末',
            hasSwitch: true,
            switchValue: true
          }, {
            title: '19:17-20:27',
            hideRightArrow: true,
            description: '开启时段 | 执行一次 | 2019-04-25 开启',
            hasSwitch: true,
            switchValue: true
          }, {
            title: '20:38-明天18:28',
            hideRightArrow: true,
            description: '开启时段 | 执行一次 | 2019-04-25 开启',
            hasSwitch: true,
            switchValue: true
          }]
        }];
      }
    }, {
      key: "getActionSheetData",
      value: function getActionSheetData() {
        var navigation = this.props.navigation;
        return [{
          title: '时间段定时',
          onPress: function onPress() {
            navigation.navigate('LHNewTimerPage', {
              title: '时间段定时',
              index: 1
            });
          }
        }, {
          title: '定时开启',
          onPress: function onPress() {
            navigation.navigate('LHNewTimerPage', {
              title: '定时开启',
              index: 2
            });
          }
        }, {
          title: '定时关闭',
          onPress: function onPress() {
            navigation.navigate('LHNewTimerPage', {
              title: '定时关闭',
              index: 3
            });
          }
        }];
      }
    }, {
      key: "render",
      value: function render() {
        var actionSheetVisible = this.state.actionSheetVisible;
        var pageData = this.getPageData();
        var actionSheetData = this.getActionSheetData();
        return _react.default.createElement(_reactNative.View, {
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }), _react.default.createElement(_reactNative.TouchableHighlight, {
          onPress: this.addPress
        }, _react.default.createElement(_reactNative.Image, {
          style: _LHCommonUI.LHCommonStyles.bottomBtn,
          source: _LHCommonUI.LHCommonIcon.common.add.normal
        })), _react.default.createElement(_Dialog.ActionSheet, {
          visible: actionSheetVisible,
          options: actionSheetData,
          buttons: [{
            text: '取消',
            callback: this.dismissAction
          }],
          onDismiss: this.dismissAction
        }));
      }
    }]);
    return LHTimerPage;
  }(_react.Component);

  LHTimerPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: navigation.getParam('title'),
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHTimerPage);

  exports.default = _default;
},10550,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10755]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var styles = _reactNative.StyleSheet.create({
    sectionHeader: {
      paddingTop: _LHCommonFunction.LHUiUtils.GetPx(9),
      paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(8),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    listTitle: {
      color: _LHCommonFunction.LHUiUtils.MiJiaListHeaderColor,
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(11),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(14),
      paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(23.5)
    },
    btnContainer: {
      alignSelf: 'stretch',
      flexDirection: 'row',
      flex: 1,
      backgroundColor: '#fff',
      height: _LHCommonFunction.LHUiUtils.GetPx(42),
      alignItems: 'center'
    },
    btnText: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(13),
      flex: 1,
      color: '#f43f31',
      textAlign: 'center',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    }
  });

  var LHStandardList = function (_React$Component) {
    (0, _inherits2.default)(LHStandardList, _React$Component);

    function LHStandardList(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHStandardList);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHStandardList).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(LHStandardList, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {}
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(sectionIndex, itemIndex, viewOffset) {
        if (this.sectionList) {
          console.log(sectionIndex + ',' + itemIndex + ',' + viewOffset);
          this.sectionList.scrollToLocation({
            sectionIndex: sectionIndex,
            itemIndex: itemIndex,
            viewOffset: viewOffset
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            data = _this$props.data,
            noBounces = _this$props.noBounces,
            stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
            style = _this$props.style,
            contentContainerStyle = _this$props.contentContainerStyle,
            ListFooterComponent = _this$props.ListFooterComponent,
            refreshControl = _this$props.refreshControl,
            _ListEmptyComponent = _this$props.ListEmptyComponent,
            showsVerticalScrollIndicator = _this$props.showsVerticalScrollIndicator,
            keyboardShouldPersistTaps = _this$props.keyboardShouldPersistTaps,
            getItemLayout = _this$props.getItemLayout,
            sectionHeaderStyle = _this$props.sectionHeaderStyle,
            onScroll = _this$props.onScroll,
            initialNumToRender = _this$props.initialNumToRender,
            _keyExtractor = _this$props.keyExtractor,
            onMomentumScrollBegin = _this$props.onMomentumScrollBegin;
        return _react.default.createElement(_reactNative.SectionList, {
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('SectionList'),
          testID: "SectionList",
          onScroll: onScroll,
          onMomentumScrollBegin: onMomentumScrollBegin,
          getItemLayout: getItemLayout,
          ref: function ref(view) {
            _this2.sectionList = view;
          },
          keyboardShouldPersistTaps: keyboardShouldPersistTaps,
          initialNumToRender: initialNumToRender || 20,
          style: style,
          contentContainerStyle: contentContainerStyle,
          bounces: !noBounces,
          sections: data,
          ListFooterComponent: ListFooterComponent,
          refreshControl: typeof refreshControl === 'undefined' ? null : refreshControl,
          stickySectionHeadersEnabled: typeof stickySectionHeadersEnabled === 'undefined' ? true : stickySectionHeadersEnabled,
          ListEmptyComponent: function ListEmptyComponent() {
            if (_ListEmptyComponent) {
              return _ListEmptyComponent;
            } else {
              return _react.default.createElement(_reactNative.View, null);
            }
          },
          showsVerticalScrollIndicator: showsVerticalScrollIndicator,
          renderItem: function renderItem(_ref) {
            var item = _ref.item,
                index = _ref.index,
                section = _ref.section;

            if (section.title === 'type:bottomButton') {
              return _react.default.createElement(_reactNative.TouchableHighlight, {
                onPress: item.press,
                accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(item.testID),
                testID: item.testID,
                style: {
                  marginHorizontal: _LHCommonFunction.LHUiUtils.GetPx(24),
                  marginBottom: _LHCommonFunction.LHUiUtils.GetPx(50),
                  borderRadius: _LHCommonFunction.LHUiUtils.GetPx(5),
                  borderWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
                  borderColor: 'rgba(0, 0, 0, 0.2)',
                  overflow: 'hidden'
                }
              }, _react.default.createElement(_reactNative.View, {
                style: styles.btnContainer
              }, _react.default.createElement(_reactNative.Text, {
                style: styles.btnText
              }, item.title)));
            } else {
              return _react.default.createElement(_LHCommonUI.LHStandardCell, {
                testID: item.testID,
                marginLeft: item.marginLeft,
                marginBottom: item.marginBottom,
                marginTop: item.marginTop,
                showOfflineIcon: item.showOfflineIcon,
                separatorMarginLeft: item.separatorMarginLeft,
                iconSource: item.iconSource,
                showPlaceHolderImage: item.showPlaceHolderImage,
                isIconSourceNeedCache: item.isIconSourceNeedCache,
                leftIconStyle: item.leftIconStyle,
                hasRightArrow: !item.hideRightArrow,
                rightArrowStyle: item.rightArrowStyle,
                hasBadge: item.hasBadge,
                showBadge: item.showBadge,
                badge: item.badge,
                descriptionNumberOfLines: item.descriptionNumberOfLines,
                active: item.active,
                leftArrowSource: item.leftRrrowSource,
                textContainer: item.textContainer,
                description: item.description,
                descriptionStyle: item.descriptionStyle,
                rightDescriptionStyle: item.rightDescriptionStyle,
                rightDescriptionColor: item.rightDescriptionColor,
                rightDescription: item.rightDescription,
                rightIconSource: item.rightIconSource,
                rightIconStype: item.rightIconStype,
                hasDot: item.hasDot,
                hasSwitch: item.hasSwitch,
                useControlledSwitch: item.useControlledSwitch,
                switchValue: item.switchValue,
                switchDisabled: item.switchDisabled,
                switchColor: item.switchColor,
                onSwitchChange: item.onSwitchChange,
                hasSlider: item.hasSlider,
                sliderValue: item.sliderValue,
                onSliderChange: item.onSliderChange,
                hasCheckBox: item.hasCheckBox,
                checkBoxActive: item.checkBoxActive,
                rowContainerStyle: item.rowContainerStyle,
                titleStyle: item.titleStyle,
                title: item.title,
                activeTitleStyle: item.activeTitleStyle,
                activeIconStyle: item.activeIconStyle,
                titleNumberOfLines: item.titleNumberOfLines,
                topSeparatorStyle: typeof item.topSeparatorStyle === 'undefined' ? index === 0 && !section.title ? {
                  marginLeft: 0
                } : item.topSeparatorStyle : item.topSeparatorStyle,
                topSeparatorLine: index !== 0 && !item.hideTopSeparatorLine || !section.title && !item.hideTopSeparatorLine,
                bottomSeparatorStyle: typeof item.bottomSeparatorStyle === 'undefined' ? index === section.data.length - 1 ? {
                  marginLeft: 0
                } : item.bottomSeparatorStyle : item.bottomSeparatorStyle,
                bottomSeparatorLine: typeof item.bottomSeparatorLine !== 'undefined' ? item.bottomSeparatorLine : index === section.data.length - 1,
                useTouchableHighlight: !item.noTouchableHighlight,
                minimumLongPressDuration: item.minimumLongPressDuration,
                press: item.press,
                longPress: item.longPress,
                showSliderView: item.showSliderView,
                showWithPercent: item.showWithPercent,
                valueStyle: item.valueStyle,
                sliderStyle: item.sliderStyle,
                sliderProps: item.sliderProps,
                onSlidingComplete: item.onSlidingComplete,
                style: [{
                  marginBottom: index === section.data.length - 1 && data.indexOf(section) !== data.length - 1 ? _LHCommonFunction.LHUiUtils.GetPx(8) : 0
                }, item.style],
                cellContainerStyle: item.cellContainerStyle,
                disabled: item.disabled
              });
            }
          },
          renderSectionHeader: function renderSectionHeader(_ref2) {
            var section = _ref2.section;

            if (section.title === 'type:bottomButton') {
              return _react.default.createElement(_reactNative.View, {
                style: {
                  height: _LHCommonFunction.LHUiUtils.GetPx(16),
                  backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
                }
              });
            } else if (section.title) {
              return _react.default.createElement(_reactNative.View, {
                style: [{
                  backgroundColor: '#fff'
                }, sectionHeaderStyle]
              }, _react.default.createElement(_LHCommonUI.LHSeparator, {
                style: {
                  backgroundColor: data.indexOf(section) === 0 ? '#fff' : _LHCommonFunction.LHUiUtils.MiJiaLineColor,
                  alignSelf: 'flex-start'
                }
              }), _react.default.createElement(_reactNative.View, {
                style: [styles.sectionHeader]
              }, _react.default.createElement(_reactNative.Text, {
                style: styles.listTitle
              }, section.title)), _react.default.createElement(_LHCommonUI.LHSeparator, {
                style: {
                  marginLeft: _LHCommonFunction.LHUiUtils.GetPx(24)
                }
              }));
            } else if (typeof section.sectionHeader === 'function') {
              return section.sectionHeader();
            } else {
              return null;
            }
          },
          keyExtractor: function keyExtractor(item, index) {
            if (typeof _keyExtractor === 'function') {
              return _keyExtractor(item, index);
            } else {
              return index;
            }
          }
        });
      }
    }]);
    return LHStandardList;
  }(_react.default.Component);

  LHStandardList.defaultProps = {
    showsVerticalScrollIndicator: false,
    keyboardShouldPersistTaps: 'never'
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHStandardList);

  exports.default = _default;
},10553,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[11]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[12]);

  var LHTimerPage = function (_Component) {
    (0, _inherits2.default)(LHTimerPage, _Component);

    function LHTimerPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHTimerPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHTimerPage).call(this, props));

      _this.selectedDatePicker = function (data) {
        var datePickerVisible = _this.state.datePickerVisible;
        var rawArray = data.rawArray,
            rawString = data.rawString;

        if (datePickerVisible === 1) {
          _this.setState({
            startTime: rawArray,
            startTimeStr: rawString
          });
        } else {
          _this.setState({
            endTime: rawArray,
            endTimeStr: rawString
          });
        }
      };

      _this.dialogSelected = function (data) {
        console.warn(data);

        _this.setState({
          choiceDialogVisible: 2
        });
      };

      _this.state = {
        datePickerVisible: 0,
        choiceDialogVisible: 0,
        startTime: null,
        endTime: null,
        startTimeStr: null,
        endTimeStr: null
      };
      return _this;
    }

    (0, _createClass2.default)(LHTimerPage, [{
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var navigation = this.props.navigation;
        var _this$state = this.state,
            startTimeStr = _this$state.startTimeStr,
            endTimeStr = _this$state.endTimeStr;
        var index = navigation.getParam('index');
        var data = [];
        var open = {
          title: '开启时间',
          description: startTimeStr === null ? '未设置' : startTimeStr,
          press: function press() {
            _this2.setState({
              datePickerVisible: 1
            });
          }
        };
        var close = {
          title: '关闭时间',
          description: endTimeStr === null ? '未设置' : endTimeStr,
          press: function press() {
            _this2.setState({
              datePickerVisible: 2
            });
          }
        };

        if (index === 1 || index === 2) {
          open = (0, _extends2.default)(open, {
            hideTopSeparatorLine: true
          });

          if (index === 1) {
            data.push(open);
            data.push(close);
          } else {
            data.push(open);
          }
        } else if (index === 3) {
          open = (0, _extends2.default)(close, {
            hideTopSeparatorLine: true
          });
          data.push(close);
        }

        data.push({
          title: '重复',
          description: '每天',
          press: function press() {
            _this2.setState({
              choiceDialogVisible: 1
            });
          }
        });
        return [{
          data: data
        }];
      }
    }, {
      key: "getCurrentTime",
      value: function getCurrentTime() {
        var date = new Date();
        var hour = date.getHours().toString();
        var minute = date.getMinutes().toString();
        return [hour, minute];
      }
    }, {
      key: "getDatePickerData",
      value: function getDatePickerData() {
        var _this$state2 = this.state,
            datePickerVisible = _this$state2.datePickerVisible,
            startTime = _this$state2.startTime,
            endTime = _this$state2.endTime;

        if (datePickerVisible === 1) {
          return {
            title: '开启时间',
            time: startTime === null ? this.getCurrentTime() : startTime
          };
        } else {
          return {
            title: '关闭时间',
            time: endTime === null ? this.getCurrentTime() : endTime
          };
        }
      }
    }, {
      key: "getChoiceDialogData",
      value: function getChoiceDialogData() {
        var choiceDialogVisible = this.state.choiceDialogVisible;

        if (choiceDialogVisible === 1) {
          return {
            title: '重复选项',
            type: _Dialog.ChoiceDialog.TYPE.SINGLE,
            selectedIndexArray: [0],
            options: [{
              title: '执行一次'
            }, {
              title: '每天'
            }, {
              title: '工作日'
            }, {
              title: '周末'
            }, {
              title: '自定义'
            }]
          };
        } else {
          return {
            title: '自定义重复',
            type: _Dialog.ChoiceDialog.TYPE.MULTIPLE,
            selectedIndexArray: [0],
            options: [{
              title: '周一'
            }, {
              title: '周二'
            }, {
              title: '周三'
            }, {
              title: '周四'
            }, {
              title: '周五'
            }, {
              title: '周六'
            }, {
              title: '周日'
            }]
          };
        }
      }
    }, {
      key: "renderChoiceDialog",
      value: function renderChoiceDialog(visible, choiceDialogData) {
        var _this3 = this;

        var choiceDialogVisible = this.state.choiceDialogVisible;
        return _react.default.createElement(_Dialog.ChoiceDialog, {
          visible: choiceDialogVisible === visible,
          title: choiceDialogData.title,
          type: choiceDialogData.type,
          options: choiceDialogData.options,
          selectedIndexArray: choiceDialogData.selectedIndexArray,
          onDismiss: function onDismiss() {
            _this3.setState({
              choiceDialogVisible: 0
            });
          },
          onSelect: this.dialogSelected
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var datePickerVisible = this.state.datePickerVisible;
        var pageData = this.getPageData();
        var datePickerData = this.getDatePickerData();
        var choiceDialogData = this.getChoiceDialogData();
        return _react.default.createElement(_reactNative.View, {
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }), _react.default.createElement(_LHCommonUI.LHDatePicker, {
          visible: datePickerVisible > 0,
          title: datePickerData.title,
          current: datePickerData.time,
          type: _LHCommonUI.LHDatePicker.TYPE.TIME24,
          onDismiss: function onDismiss() {
            _this4.setState({
              datePickerVisible: 0
            });
          },
          onSelect: this.selectedDatePicker
        }), this.renderChoiceDialog(1, choiceDialogData), this.renderChoiceDialog(2, choiceDialogData));
      }
    }]);
    return LHTimerPage;
  }(_react.Component);

  LHTimerPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var leftButton = {
      type: 'deafultCloseBtn',
      press: function press() {
        navigation.goBack();
      }
    };
    var rightButton = {
      type: 'deafultCompleteBtn',
      press: function press() {
        navigation.goBack();
      }
    };
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: navigation.getParam('title'),
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        leftButtons: [leftButton],
        rightButtons: [rightButton]
      }))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHTimerPage);

  exports.default = _default;
},10556,[14308,14305,14344,14320,14323,14371,14377,14386,10297,10033,10004,10178,10755]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _resources = _$$_REQUIRE(_dependencyMap[12]);

  var _Strings = _$$_REQUIRE(_dependencyMap[13]);

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _StringSpinner = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _singleDataSource;

  var TYPE = {
    SINGLE: 'single',
    TIME24: 'time24',
    TIME12: 'time12',
    DATE: 'date'
  };
  Object.freeze(TYPE);
  var SINGLE_TYPE = {
    MONTH: 'month',
    DAY: 'day',
    HOUR: 'hour',
    MINUTE: 'minute',
    SECOND: 'second'
  };
  Object.freeze(SINGLE_TYPE);

  function constructArray(length) {
    var zeroPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var fromZero = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var maxLength = (length - (fromZero ? 1 : 0)).toString().length;
    return Array.from({
      length: length
    }, function (v, i) {
      return ((zeroPrefix ? '0000000000000' : '') + (i + (fromZero ? 0 : 1))).slice(-maxLength);
    });
  }

  var screenBackgroundColor = 'rgba(0,0,0,0.4)';
  var margin = 10;
  var borderRadius = 15;
  var titleHeightThin = 66;
  var titleHeightFat = 85;
  var rowHeight = 52;

  var pickerContainerHeight = _reactNative.Platform.select({
    android: 260,
    ios: 220
  });

  var buttonHeight = 50;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  var modalWidth = width - 20;
  var pickerInnerStyle = {
    lineColor: _resources.Styles.common.hairlineColor,
    textColor: '#666666',
    fontSize: 15,
    selectTextColor: '#333333',
    selectFontSize: 20,
    unitTextColor: '#333333',
    unitFontSize: 10,
    rowHeight: rowHeight,
    selectBgColor: '#f3f3f3'
  };
  var months = constructArray(12, 1, 0);
  var days = constructArray(31, 1, 0);
  var hours24 = constructArray(24, 1, 1);
  var timeSystem = [_resources.strings.am, _resources.strings.pm];
  var hours12 = hours24.slice(1, 13);
  var minutes = constructArray(60, 1, 1);
  var singleDataSource = (_singleDataSource = {}, (0, _defineProperty2.default)(_singleDataSource, SINGLE_TYPE.MONTH, months), (0, _defineProperty2.default)(_singleDataSource, SINGLE_TYPE.DAY, days), (0, _defineProperty2.default)(_singleDataSource, SINGLE_TYPE.HOUR, constructArray(24, 1, 0)), (0, _defineProperty2.default)(_singleDataSource, SINGLE_TYPE.MINUTE, constructArray(60, 1, 0)), (0, _defineProperty2.default)(_singleDataSource, SINGLE_TYPE.SECOND, constructArray(60, 1, 0)), _singleDataSource);
  Object.freeze(singleDataSource);
  var days31 = ['01', '03', '05', '07', '08', '10', '12'];
  var days30 = ['04', '06', '09', '11'];
  var defaultYearOffset = 15;

  var LHDatePicker = function (_React$Component) {
    (0, _inherits2.default)(LHDatePicker, _React$Component);

    function LHDatePicker(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHDatePicker);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDatePicker).call(this, props, context));

      var _this$init = _this.init(),
          currentArray = _this$init.currentArray,
          dataSourceArray = _this$init.dataSourceArray;

      var subtitle = _this.getSubtitle(currentArray);

      _this.state = {
        visible: _this.props.visible,
        dataSourceArray: dataSourceArray,
        currentArray: currentArray,
        subtitle: subtitle
      };
      return _this;
    }

    (0, _createClass2.default)(LHDatePicker, [{
      key: "getSubtitle",
      value: function getSubtitle(arr) {
        var _TYPE$DATE$TYPE$TIME;

        if (this.props.type === TYPE.SINGLE) {
          var count = parseInt(arr[0]);
          var unit = count > 1 ? _resources.strings[this.props.singleType + 's'] : _resources.strings[this.props.singleType];
          return (0, _Strings.formatString)(_resources.strings.singleSubTitle, count, unit);
        }

        return _Strings.formatString.apply(undefined, [(_TYPE$DATE$TYPE$TIME = {}, (0, _defineProperty2.default)(_TYPE$DATE$TYPE$TIME, TYPE.DATE, _resources.strings.dateSubTitle), (0, _defineProperty2.default)(_TYPE$DATE$TYPE$TIME, TYPE.TIME24, _resources.strings.time24SubTitle), (0, _defineProperty2.default)(_TYPE$DATE$TYPE$TIME, TYPE.TIME12, _resources.strings.time12SubTitle), _TYPE$DATE$TYPE$TIME)[this.props.type]].concat((0, _toConsumableArray2.default)(arr)));
      }
    }, {
      key: "convert",
      value: function convert(cur) {
        var type = this.props.type;

        if (cur instanceof Date) {
          switch (type) {
            case TYPE.DATE:
              return this.convert([cur.getFullYear(), cur.getMonth() + 1, cur.getDate()]);

            case TYPE.TIME24:
              return this.convert([cur.getHours(), cur.getMinutes()]);

            case TYPE.TIME12:
              return this.convertTo12([cur.getHours(), cur.getMinutes()]);

            case TYPE.SINGLE:
              return ['01'];

            default:
              return ['01'];
          }
        } else if (cur instanceof Array) {
          switch (type) {
            case TYPE.DATE:
              return cur.slice(0, 3).map(function (v, i) {
                return i === 0 ? '' + v : ('0' + v).slice(-2);
              });

            case TYPE.TIME24:
              return cur.slice(0, 2).map(function (v) {
                return ('0' + v).slice(-2);
              });

            case TYPE.TIME12:
              return this.convertTo12(cur);

            case TYPE.SINGLE:
              return cur.slice(0, 1).map(function (v) {
                return ('0' + v).slice(-2);
              });

            default:
              return ['01'];
          }
        } else if (typeof cur === 'string' || typeof cur === 'number') {
            return [cur + ''];
          } else {
              return ['01'];
            }
      }
    }, {
      key: "convertTo12",
      value: function convertTo12(arr) {
        if (arr.length === 2) {
          var newArr = arr.map(function (v) {
            return parseInt(v);
          });

          if (newArr.every(function (v) {
            return Number.isInteger;
          })) {
            var res;

            if (newArr[0] === 0) {
              res = [_resources.strings.am, 12, newArr[1]];
            } else {
              var _timeSystem = newArr[0] > 11 ? _resources.strings.pm : _resources.strings.am;

              var hour = newArr[0] > 12 ? newArr[0] - 12 + '' : newArr[0] + '';
              var minute = newArr[1] + '';
              res = [_timeSystem, hour, minute];
            }

            return res.map(function (v, i) {
              return i > 0 ? ('0' + v).slice(-2) : v;
            });
          }
        }

        return this.convert(new Date());
      }
    }, {
      key: "slice",
      value: function slice(arr, head, tail) {
        if (head === undefined && tail === undefined) return arr;
        var index = arr.indexOf(('0' + head).slice(-2)) || 0;
        var lastIndex = arr.lastIndexOf(('0' + tail).slice(-2)) || arr.length - 1;
        return arr.slice(index, lastIndex + 1);
      }
    }, {
      key: "getYears",
      value: function getYears(min, max) {
        this.min = this.convert(min);
        this.max = this.convert(max);
        var minY = Number.parseInt(this.min[0]);
        var maxY = Number.parseInt(this.max[0]);
        return this.generateArray(minY, maxY);
      }
    }, {
      key: "generateArray",
      value: function generateArray(min, max) {
        if (min > max) {
          console.warn('max < min');
          return [];
        }

        return Array.from({
          length: max - min + 1
        }, function (v, i) {
          return i + min;
        }).map(function (v) {
          return v + '';
        });
      }
    }, {
      key: "init",
      value: function init() {
        var _this$props = this.props,
            type = _this$props.type,
            singleType = _this$props.singleType,
            current = _this$props.current,
            min = _this$props.min,
            max = _this$props.max;
        var currentArray = this.convert(current || new Date());

        switch (type) {
          case TYPE.DATE:
            var yearNow = new Date().getFullYear();
            var minDefault = new Date();
            minDefault.setFullYear(yearNow - defaultYearOffset);
            var maxDefault = new Date();
            maxDefault.setFullYear(yearNow + defaultYearOffset);
            var years = this.getYears(min || minDefault, max || maxDefault);
            var dataSourceArray = [years, months, days];
            this.updateDays(currentArray, dataSourceArray);
            this.unitArray = [_resources.strings.yearUnit, _resources.strings.monthUnit, _resources.strings.dayUnit];
            return {
              currentArray: currentArray,
              dataSourceArray: dataSourceArray
            };

          case TYPE.TIME24:
            this.unitArray = [_resources.strings.hourUnit, _resources.strings.minuteUnit];
            return {
              currentArray: currentArray,
              dataSourceArray: [hours24, minutes]
            };

          case TYPE.TIME12:
            this.unitArray = ['', _resources.strings.hourUnit, _resources.strings.minuteUnit];
            return {
              currentArray: currentArray,
              dataSourceArray: [timeSystem, hours12, minutes]
            };

          case TYPE.SINGLE:
          default:
            this.unitArray = [_resources.strings[singleType + 'Unit']];
            return {
              currentArray: currentArray,
              dataSourceArray: [this.slice(singleDataSource[singleType], min, max)]
            };
        }
      }
    }, {
      key: "initByNewProps",
      value: function initByNewProps(newProps) {
        if (!newProps) {
          return;
        }

        var type = newProps.type,
            singleType = newProps.singleType,
            current = newProps.current,
            min = newProps.min,
            max = newProps.max;
        var currentArray = this.convert(current || new Date());

        switch (type) {
          case TYPE.DATE:
            var yearNow = new Date().getFullYear();
            var minDefault = new Date();
            minDefault.setFullYear(yearNow - defaultYearOffset);
            var maxDefault = new Date();
            maxDefault.setFullYear(yearNow + defaultYearOffset);
            var years = this.getYears(min || minDefault, max || maxDefault);
            var dataSourceArray = [years, months, days];
            this.updateDays(currentArray, dataSourceArray);
            this.unitArray = [_resources.strings.yearUnit, _resources.strings.monthUnit, _resources.strings.dayUnit];
            return {
              currentArray: currentArray,
              dataSourceArray: dataSourceArray
            };

          case TYPE.TIME24:
            this.unitArray = [_resources.strings.hourUnit, _resources.strings.minuteUnit];
            return {
              currentArray: currentArray,
              dataSourceArray: [hours24, minutes]
            };

          case TYPE.TIME12:
            this.unitArray = ['', _resources.strings.hourUnit, _resources.strings.minuteUnit];
            return {
              currentArray: currentArray,
              dataSourceArray: [timeSystem, hours12, minutes]
            };

          case TYPE.SINGLE:
          default:
            this.unitArray = [_resources.strings[singleType + 'Unit']];
            return {
              currentArray: currentArray,
              dataSourceArray: [this.slice(singleDataSource[singleType], min, max)]
            };
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        if (newProps.visible !== this.state.visible) {
          if (this.props.current === undefined) {
            var currentArray = this.init()['currentArray'];
            this.state.currentArray = currentArray;
            this.state.subtitle = this.getSubtitle(currentArray);
          }

          this.setState({
            visible: newProps.visible
          });
        }

        if (newProps.current !== this.state.currentArray) {
          var _this$initByNewProps = this.initByNewProps(newProps),
              _currentArray = _this$initByNewProps.currentArray,
              dataSourceArray = _this$initByNewProps.dataSourceArray;

          this.setState({
            currentArray: _currentArray,
            dataSourceArray: dataSourceArray,
            title: newProps.title,
            subtitle: this.getSubtitle(newProps.current)
          });
        }
      }
    }, {
      key: "renderTitle",
      value: function renderTitle() {
        var height = {
          height: this.props.showSubtitle ? titleHeightFat : titleHeightThin
        };
        return _react.default.createElement(_reactNative.View, {
          style: [styles.titleContainer, height]
        }, _react.default.createElement(_reactNative.Text, {
          numberOfLines: 1,
          style: [_resources.Styles.common.title, styles.title]
        }, this.props.title || ''), this.props.showSubtitle ? _react.default.createElement(_reactNative.Text, {
          numberOfLines: 1,
          style: styles.subtitle
        }, this.state.subtitle) : null);
      }
    }, {
      key: "renderContent",
      value: function renderContent() {
        var _this2 = this;

        var _this$state = this.state,
            currentArray = _this$state.currentArray,
            dataSourceArray = _this$state.dataSourceArray;
        var length = currentArray.length;
        var actualWidth = modalWidth - (length - 1) * _reactNative.StyleSheet.hairlineWidth;
        var normalWidth = actualWidth / length;
        var yearWidth = normalWidth + 10;
        var monthWidth = (actualWidth - yearWidth) / 2;
        return _react.default.createElement(_reactNative.View, {
          style: styles.pickerContainer
        }, dataSourceArray.map(function (dataSource, index) {
          var style = {
            width: normalWidth
          };

          if (_this2.props.type === TYPE.DATE) {
            if (index === 0) style = {
              width: yearWidth
            };else style = {
              width: monthWidth
            };
          } else if (_this2.props.type === TYPE.SINGLE) {
            if (_this2.props.replaceZero) {
              if (!dataSource.includes(_this2.props.replaceZero)) {
                dataSource.unshift(_this2.props.replaceZero);
              }
            }
          }

          return _react.default.createElement(_reactNative.View, {
            style: [{
              flexDirection: 'row'
            }, style]
          }, _react.default.createElement(_StringSpinner.default, {
            key: index + _this2.unitArray[index],
            style: style,
            unit: _this2.props.showUnit ? _this2.unitArray[index] : '',
            dataSource: dataSource,
            defaultValue: currentArray[index],
            pickerInnerStyle: pickerInnerStyle,
            onValueChanged: function onValueChanged(data) {
              return _this2._onValueChanged(index, data);
            }
          }), index < length - 1 ? _react.default.createElement(_Separator.default, {
            type: "column",
            style: {
              height: pickerContainerHeight
            }
          }) : null);
        }));
      }
    }, {
      key: "renderButton",
      value: function renderButton() {
        var _this3 = this;

        return _react.default.createElement(_reactNative.View, {
          style: styles.buttons
        }, _react.default.createElement(_reactNative.TouchableHighlight, {
          style: [styles.button, {
            borderBottomLeftRadius: borderRadius
          }],
          onPress: function onPress(_) {
            return _this3.dismiss();
          },
          underlayColor: "rgba(0,0,0,.05)"
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.buttonText
        }, _resources.strings.cancel)), _react.default.createElement(_Separator.default, {
          type: "column",
          style: {
            height: buttonHeight
          }
        }), _react.default.createElement(_reactNative.TouchableHighlight, {
          style: [styles.button, {
            borderBottomRightRadius: borderRadius
          }],
          onPress: function onPress(_) {
            return _this3.confirm();
          },
          underlayColor: "rgba(0,0,0,.05)"
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.buttonText, {
            color: this.props.confirmColor
          }]
        }, _resources.strings.ok)));
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        return _react.default.createElement(_reactNative.Modal, {
          animationType: this.props.animationType,
          transparent: true,
          visible: this.state.visible,
          onRequestClose: function onRequestClose(_) {}
        }, _react.default.createElement(_reactNative.View, {
          style: styles.background
        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress(_) {
            return _this4.dismiss();
          }
        }, _react.default.createElement(_reactNative.View, {
          style: {
            width: width,
            height: height
          }
        })), _react.default.createElement(_reactNative.View, {
          style: styles.modal
        }, this.renderTitle(), _react.default.createElement(_Separator.default, null), this.renderContent(), _react.default.createElement(_Separator.default, null), this.renderButton())));
      }
    }, {
      key: "isLeapYear",
      value: function isLeapYear(y) {
        return y % 4 === 0 && y % 100 !== 0 || y % 400 === 0 && y % 3200 !== 0;
      }
    }, {
      key: "compareDateArray",
      value: function compareDateArray(arrA, arrB) {
        return arrA.join('') - arrB.join('');
      }
    }, {
      key: "updateDays",
      value: function updateDays(newCurrentArray, newDataSourceArray) {
        var _newCurrentArray = (0, _slicedToArray2.default)(newCurrentArray, 3),
            year = _newCurrentArray[0],
            month = _newCurrentArray[1],
            day = _newCurrentArray[2];

        if (days31.includes(month)) {
          newDataSourceArray[2] = days;
        } else if (days30.includes(month)) {
          newDataSourceArray[2] = days.slice(0, 30);
        } else {
          if (this.isLeapYear(parseInt(year))) {
            newDataSourceArray[2] = days.slice(0, 29);
          } else {
            newDataSourceArray[2] = days.slice(0, 28);
          }
        }

        if (!newDataSourceArray[2].includes(day)) {
          newCurrentArray[2] = newDataSourceArray[2][newDataSourceArray[2].length - 1];
        }
      }
    }, {
      key: "_onValueChanged",
      value: function _onValueChanged(index, data) {
        var _this5 = this;

        var newCurrentArray = (0, _toConsumableArray2.default)(this.state.currentArray);
        newCurrentArray[index] = data.newValue;
        var newDataSourceArray = (0, _toConsumableArray2.default)(this.state.dataSourceArray);
        this.setState({
          currentArray: newCurrentArray,
          subtitle: this.getSubtitle(newCurrentArray)
        }, function (_) {
          if (_this5.props.type === TYPE.DATE) {
            var needUpdate = false;

            if (_this5.compareDateArray(newCurrentArray, _this5.max) > 0) {
              newCurrentArray = _this5.max;
              needUpdate = true;
            }

            if (_this5.compareDateArray(newCurrentArray, _this5.min) < 0) {
              newCurrentArray = _this5.min;
              needUpdate = true;
            }

            _this5.updateDays(newCurrentArray, newDataSourceArray);

            if (newDataSourceArray[2].length !== _this5.state.dataSourceArray[2].length) {
              needUpdate = true;
            }

            needUpdate && _this5.setState({
              subtitle: _this5.getSubtitle(newCurrentArray),
              currentArray: newCurrentArray,
              dataSourceArray: newDataSourceArray
            });
          }
        });
      }
    }, {
      key: "dismiss",
      value: function dismiss() {
        this.setState({
          visible: false
        });
        this.props.onDismiss && this.props.onDismiss();
      }
    }, {
      key: "array2Date",
      value: function array2Date() {
        var currentArray = this.state.currentArray;
        var date = new Date();

        switch (this.props.type) {
          case TYPE.DATE:
            date.setFullYear(currentArray[0]);
            date.setMonth(parseInt(currentArray[1]) - 1);
            date.setDate(parseInt(currentArray[2]));
            break;

          case TYPE.TIME24:
            date.setHours(currentArray[0]);
            date.setMinutes(currentArray[1]);
            break;

          case TYPE.TIME12:
            var hour = parseInt(currentArray[1]);

            if (currentArray[0] === _resources.strings.am) {
              hour = hour === 12 ? 0 : hour;
            } else {
              hour = hour < 12 ? hour + 12 : hour;
            }

            date.setHours(hour);
            date.setMinutes(currentArray[2]);
            break;

          case TYPE.SINGLE:
          default:
            return null;
        }

        return date;
      }
    }, {
      key: "confirm",
      value: function confirm() {
        if (this.props.onSelect) {
          this.props.onSelect({
            rawArray: this.state.currentArray,
            rawString: this.state.subtitle,
            date: this.array2Date()
          });
        }

        this.dismiss();
      }
    }]);
    return LHDatePicker;
  }(_react.default.Component);

  exports.default = LHDatePicker;
  LHDatePicker.propTypes = {
    animationType: _propTypes.default.string,
    visible: _propTypes.default.bool,
    title: _propTypes.default.string,
    showSubtitle: _propTypes.default.bool,
    confirmColor: _propTypes.default.string,
    replaceZero: _propTypes.default.string,
    type: _propTypes.default.oneOf([TYPE.DATE, TYPE.SINGLE, TYPE.TIME12, TYPE.TIME24]),
    singleType: _propTypes.default.oneOf([SINGLE_TYPE.MONTH, SINGLE_TYPE.DAY, SINGLE_TYPE.HOUR, SINGLE_TYPE.MINUTE, SINGLE_TYPE.SECOND]),
    current: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.instanceOf(Date)]),
    min: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.instanceOf(Date)]),
    max: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.instanceOf(Date)]),
    onSelect: _propTypes.default.func,
    onDismiss: _propTypes.default.func
  };
  LHDatePicker.defaultProps = {
    animationType: 'fade',
    visible: false,
    title: '开启时间',
    showSubtitle: true,
    confirmColor: _resources.Styles.common.MHGreen,
    type: TYPE.TIME24,
    singleType: SINGLE_TYPE.MINUTE,
    onSelect: function onSelect(obj) {
      return console.log(obj);
    }
  };
  LHDatePicker.TYPE = TYPE;
  LHDatePicker.SINGLE_TYPE = SINGLE_TYPE;

  var styles = _reactNative.StyleSheet.create({
    background: {
      flex: 1,
      backgroundColor: screenBackgroundColor
    },
    modal: {
      position: 'absolute',
      bottom: 20,
      width: modalWidth,
      marginHorizontal: margin,
      backgroundColor: '#fff',
      borderRadius: borderRadius
    },
    titleContainer: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    title: {
      fontFamily: 'D-DINCondensed-Bold'
    },
    subtitle: {
      width: modalWidth,
      textAlign: 'center',
      fontSize: 13,
      color: '#666'
    },
    pickerContainer: {
      flexDirection: 'row',
      height: pickerContainerHeight,
      justifyContent: 'space-between'
    },
    spinnerStyle: {},
    buttons: {
      height: buttonHeight,
      flexDirection: 'row',
      backgroundColor: 'transparent',
      justifyContent: 'space-between'
    },
    button: {
      flex: 1,
      backgroundColor: 'transparent',
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonText: {
      fontSize: 14,
      lineHeight: 19,
      color: '#666',
      fontFamily: 'D-DINCondensed-Bold'
    }
  });
},10559,[14305,14347,14359,14320,14323,14371,14377,14386,14317,10318,10297,10033,10077,10320,10332,10365]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _miot = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var isShared = _LHCommonFunction.LHDeviceAuthorityUtils.isShared();

  var LHMoreSettingPage = function (_React$Component) {
    (0, _inherits2.default)(LHMoreSettingPage, _React$Component);

    function LHMoreSettingPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHMoreSettingPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHMoreSettingPage).call(this, props, context));
      _this.state = {
        timeZone: _miot.Device.timeZone || ''
      };
      return _this;
    }

    (0, _createClass2.default)(LHMoreSettingPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var navigation = this.props.navigation;
        var showDeviceTimeZone = navigation.getParam('showDeviceTimeZone');

        if (showDeviceTimeZone) {
          this.deviceTimeZoneChangedListener = _miot.DeviceEvent.deviceTimeZoneChanged.addListener(function (device) {
            _this2.setState({
              timeZone: device.timeZone
            });
          });

          _miot.Device.getDeviceTimeZone().then(function (result) {
            console.log(result);

            _this2.setState({
              timeZone: result && result.timeZone || ''
            });
          }).catch(function (error) {
            console.log('获取设备时区失败，错误：', error);
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.deviceTimeZoneChangedListener) this.deviceTimeZoneChangedListener.remove();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var navigation = this.props.navigation;
        var showDeviceTimeZone = navigation.getParam('showDeviceTimeZone');
        var syncDeviceTimeZoneToDevice = navigation.getParam('syncDeviceTimeZoneToDevice') || false;
        var timeZone = this.state.timeZone;
        var items = [{
          title: '',
          data: [isShared || !['0', '8'].includes(_miot.Device.type) ? null : _LHCommonFunction.LHSettingItem.getSettingItem('networkInfo', {
            hideTopSeparatorLine: !isShared
          }), isShared ? null : _LHCommonFunction.LHSettingItem.getSettingItem('securitySetting', {
            hideTopSeparatorLine: isShared || !['0', '8'].includes(_miot.Device.type)
          }), _LHCommonFunction.LHSettingItem.getSettingItem('feedbackInput', {
            hideTopSeparatorLine: isShared
          }), showDeviceTimeZone ? _LHCommonFunction.LHSettingItem.getSettingItem('deviceTimeZone', {
            rightDescription: timeZone,
            rightDescriptionStyle: timeZone ? {
              flex: 1
            } : null,
            textContainer: timeZone ? {
              flex: 0
            } : null,
            press: function press() {
              _miot.Host.ui.openDeviceTimeZoneSettingPage({
                sync_device: syncDeviceTimeZoneToDevice
              });
            }
          }) : null, _LHCommonFunction.LHSettingItem.addToDesktopItem]
        }];

        for (var i = 0; i < items[0].data.length; i += 1) {
          if (!items[0].data[i]) {
            items[0].data.splice(i, 1);
            i -= 1;
          }
        }

        return items;
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
          },
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('moreSettingPage'),
          testID: "moreSettingPage"
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }));
      }
    }]);
    return LHMoreSettingPage;
  }(_react.default.Component);

  LHMoreSettingPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHCommonFunction.LHCommonLocalizableString.common_setting_more_setting,
        style: [{
          backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
          borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
          borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
        }],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHMoreSettingPage);

  exports.default = _default;
},10562,[14305,14320,14323,14371,14377,14386,10297,10033,10074,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      height = _Dimensions$get.height;

  var styles = _reactNative.StyleSheet.create({
    emptyWrap: {
      alignItems: 'center'
    },
    emptyPageWrap: {
      height: height - _LHCommonFunction.LHUiUtils.TitleBarHeight - _LHCommonFunction.LHDeviceUtils.statusBarHeight,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    emptyImg: {
      width: _LHCommonFunction.LHUiUtils.GetPx(128),
      height: _LHCommonFunction.LHUiUtils.GetPx(101),
      alignSelf: 'center'
    },
    emptyText: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(19),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(40),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(40),
      textAlign: 'center',
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      color: '#999999',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    }
  });

  var LHStandardEmpty = function (_React$PureComponent) {
    (0, _inherits2.default)(LHStandardEmpty, _React$PureComponent);

    function LHStandardEmpty(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHStandardEmpty);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHStandardEmpty).call(this, props));
      _this.state = {
        screenHeight: height
      };
      return _this;
    }

    (0, _createClass2.default)(LHStandardEmpty, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (_reactNative.Platform.OS === 'android') this.getAndroidHeight();
      }
    }, {
      key: "getAndroidHeight",
      value: function getAndroidHeight() {
        var _this2 = this;

        _LHCommonFunction.LHDeviceUtils.GetPhoneScreenHeight(function (value) {
          _this2.setState({
            screenHeight: value
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            emptyPageStyle = _this$props.emptyPageStyle,
            text = _this$props.text,
            emptyIcon = _this$props.emptyIcon,
            emptyIconStyle = _this$props.emptyIconStyle,
            style = _this$props.style,
            emptyTextStyle = _this$props.emptyTextStyle,
            onClicked = _this$props.onClicked,
            contentHeight = _this$props.contentHeight;
        var screenHeight = this.state.screenHeight;
        var marginTop = contentHeight ? (contentHeight - _LHCommonFunction.LHUiUtils.GetPx(140)) * 0.3 : _LHCommonFunction.LHUiUtils.GetPx(139);
        return _react.default.createElement(_reactNative.View, {
          style: [styles.emptyPageWrap, {
            height: screenHeight - _LHCommonFunction.LHUiUtils.TitleBarHeight - _LHCommonFunction.LHDeviceUtils.statusBarHeight
          }, contentHeight ? {
            height: contentHeight
          } : null, emptyPageStyle]
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.emptyWrap, style]
        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: onClicked
        }, _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, {
          style: [styles.emptyImg, {
            marginTop: marginTop
          }, emptyIconStyle],
          source: emptyIcon || _$$_REQUIRE(_dependencyMap[9])
        }), _react.default.createElement(_reactNative.Text, {
          style: [styles.emptyText, emptyTextStyle]
        }, text)))));
      }
    }]);
    return LHStandardEmpty;
  }(_react.default.PureComponent);

  exports.default = LHStandardEmpty;
},10565,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10568]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources",
    "width": 381,
    "height": 303,
    "scales": [1],
    "hash": "710e550f31234e2763915ba2acfb2750",
    "name": "list_blank",
    "type": "png"
  });
},10568,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[12]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var LHStandardLog = function (_React$Component) {
    (0, _inherits2.default)(LHStandardLog, _React$Component);

    function LHStandardLog(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHStandardLog);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHStandardLog).call(this, props));
      _this.timestamp = Math.floor(+new Date() / 1000);
      var _this$props = _this.props,
          serverType = _this$props.serverType,
          extraParam = _this$props.extraParam;

      if (serverType === 'ScenesHistory') {
        _this.cacheKey = _LHCommonFunction.CommonMethod.CreatCacheKey('Log_IFTTT');
      } else {
        _this.cacheKey = _LHCommonFunction.CommonMethod.CreatCacheKey('Log_Normal_' + (extraParam && extraParam.key || ''));
      }

      _this.pageSize = 20;
      _this.state = {
        logListData: [],
        isLoading: false,
        page: 1,
        pageOver: false,
        firstIn: true,
        loadFail: false
      };
      return _this;
    }

    (0, _createClass2.default)(LHStandardLog, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var loadCache;
        return _regenerator.default.async(function componentDidMount$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                loadCache = this.props.loadCache;

                if (!loadCache) {
                  _context.next = 4;
                  break;
                }

                _context.next = 4;
                return _regenerator.default.awrap(this.getLocalData());

              case 4:
                if (_reactNative.Platform.OS === 'ios') {
                  setTimeout(function () {
                    _this2.getServerData(1);
                  }, 100);
                } else {
                  this.getServerData(1);
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearTimeoutId();
      }
    }, {
      key: "onRefresh",
      value: function onRefresh() {
        this.timestamp = Math.floor(+new Date() / 1000);
        this.setState({
          page: 1,
          loadFail: false
        });
        this.getServerData(1);
        var onRefresh = this.props.onRefresh;

        if (onRefresh) {
          onRefresh();
        }
      }
    }, {
      key: "onEndReached",
      value: function onEndReached() {
        var _this$state = this.state,
            page = _this$state.page,
            firstIn = _this$state.firstIn;
        if (firstIn) return;
        var _this$state2 = this.state,
            isLoading = _this$state2.isLoading,
            pageOver = _this$state2.pageOver;
        if (isLoading || pageOver) return;
        this.getServerData(page);
      }
    }, {
      key: "getLocalData",
      value: function getLocalData() {
        var _this$props2, extraParam, serverType, res;

        return _regenerator.default.async(function getLocalData$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$props2 = this.props, extraParam = _this$props2.extraParam, serverType = _this$props2.serverType;
                if (extraParam && extraParam.limit) this.pageSize = extraParam.limit;

                if (!(serverType === 'ScenesHistory')) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 5;
                return _regenerator.default.awrap(_LHCommonFunction.LHMiServer.GetHostStorage(this.cacheKey));

              case 5:
                res = _context2.sent;
                _context2.next = 11;
                break;

              case 8:
                _context2.next = 10;
                return _regenerator.default.awrap(_LHCommonFunction.LHMiServer.GetHostStorage(this.cacheKey));

              case 10:
                res = _context2.sent;

              case 11:
                if (!res) {
                  _context2.next = 14;
                  break;
                }

                _context2.next = 14;
                return _regenerator.default.awrap(this.setState({
                  logListData: res
                }));

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setLocalData",
      value: function setLocalData(page, dataSource) {
        var loadCache = this.props.loadCache;

        if (loadCache && page === 1) {
          _LHCommonFunction.LHMiServer.SetHostStorage(this.cacheKey, dataSource);
        }
      }
    }, {
      key: "getServerData",
      value: function getServerData(page) {
        var _this3 = this;

        this.setState({
          isLoading: true
        });
        var _this$props3 = this.props,
            extraParam = _this$props3.extraParam,
            serverType = _this$props3.serverType;
        var logListData = this.state.logListData;
        if (extraParam && extraParam.limit) this.pageSize = extraParam.limit;

        if (serverType === 'ScenesHistory') {
          _LHCommonFunction.LHMiServer.LoadScenesHistoryForDevice(_miot.Device.deviceID, this.timestamp, this.pageSize, function (res) {
            var dataSource = res && res.history || [];

            _this3.setLocalData(page, dataSource);

            _this3.dealSucc(page, dataSource);
          }, function () {
            _this3.setState({
              isLoading: false,
              loadFail: true
            });

            if (logListData && logListData.length > 0) _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
          });
        } else {
          _LHCommonFunction.LHMiServer.GetUserDeviceDataTab((0, _extends2.default)({}, {
            did: _miot.Device.deviceID,
            timestamp: this.timestamp,
            limit: this.pageSize
          }, extraParam), function (res) {
            var dataSource = res && res.data || [];

            _this3.setLocalData(page, dataSource);

            _this3.dealSucc(page, dataSource);
          }, function () {
            _this3.setState({
              isLoading: false,
              loadFail: true
            });

            if (logListData && logListData.length > 0) _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
          });
        }
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var logListData = this.state.logListData;
        var result = this.dealData(logListData);
        return result;
      }
    }, {
      key: "dealSucc",
      value: function dealSucc(page, dataSource) {
        var _this4 = this;

        console.log(dataSource);
        var pageOverFlag = true;

        if (dataSource.length === this.pageSize) {
          pageOverFlag = false;
          this.timestamp = dataSource[this.pageSize - 1].time;
        }

        var data = [];

        if (page === 1) {
          data = dataSource;
        } else {
          var logListData = this.state.logListData;
          data = logListData.concat(dataSource);
        }

        this.setState({
          logListData: data,
          pageOver: pageOverFlag
        });
        this.clearTimeoutId();
        this.timeoutId = setTimeout(function () {
          _this4.timeoutId = null;

          _this4.setState({
            loadFail: false,
            firstIn: false,
            isLoading: false,
            page: page + 1
          });
        }, 200);
      }
    }, {
      key: "dealData",
      value: function dealData(data) {
        var dataMap = this.props.dataMap;
        var result = [];

        for (var i = 0, len = data.length; i < len; i += 1) {
          if (!dataMap(data[i])) continue;
          var dataItem = (0, _extends2.default)({}, data[i], dataMap(data[i]), {
            time: data[i].time
          });
          var index = LHStandardLog.getDataIndex(result, dataItem);

          if (index > -1) {
            result[index].data.push(dataItem);
          } else {
            result.push({
              title: dataItem.time,
              data: [dataItem]
            });
          }
        }

        return result;
      }
    }, {
      key: "clearTimeoutId",
      value: function clearTimeoutId() {
        if (this.timeoutId) {
          clearTimeout(this.timeoutId);
          this.timeoutId = null;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var _this$state3 = this.state,
            page = _this$state3.page,
            isLoading = _this$state3.isLoading,
            pageOver = _this$state3.pageOver,
            firstIn = _this$state3.firstIn,
            logListData = _this$state3.logListData,
            loadFail = _this$state3.loadFail;
        var _this$props4 = this.props,
            style = _this$props4.style,
            contentContainerStyle = _this$props4.contentContainerStyle,
            firstSectionHeaderStyle = _this$props4.firstSectionHeaderStyle,
            styleType = _this$props4.styleType,
            empty = _this$props4.empty,
            failure = _this$props4.failure,
            loadingText = _this$props4.loadingText,
            allDataHasLoadedText = _this$props4.allDataHasLoadedText,
            titleNumberOfLines = _this$props4.titleNumberOfLines,
            showsScrollIndicator = _this$props4.showsScrollIndicator,
            ListHeaderComponent = _this$props4.ListHeaderComponent,
            dataMap = _this$props4.dataMap;
        var isFirstPageLoadFail = loadFail && page === 1;
        var tipText = isFirstPageLoadFail ? failure && failure.text || _LHCommonFunction.LHCommonLocalizableString.common_tips_loading_failed_retry : empty && empty.text;
        var tipIcon = isFirstPageLoadFail ? failure && failure.icon || _$$_REQUIRE(_dependencyMap[14]) : empty && empty.icon || _$$_REQUIRE(_dependencyMap[15]);
        var tipStyle = isFirstPageLoadFail ? failure && failure.style : empty && empty.style;
        return _react.default.createElement(_LHCommonUI.LHStandardLogUI, {
          firstSectionHeaderStyle: firstSectionHeaderStyle,
          contentContainerStyle: contentContainerStyle,
          page: page,
          scrollEnabled: !isFirstPageLoadFail || logListData && logListData.length > 0,
          loadFail: loadFail,
          pageSize: this.pageSize,
          isLoading: isLoading,
          pageOver: pageOver,
          firstIn: firstIn,
          logListData: logListData,
          style: style,
          styleType: styleType,
          emptyText: tipText,
          emptyIcon: tipIcon,
          emptyStyle: tipStyle,
          loadingText: loadingText,
          allDataHasLoadedText: allDataHasLoadedText,
          titleNumberOfLines: titleNumberOfLines,
          showsScrollIndicator: showsScrollIndicator,
          ListHeaderComponent: ListHeaderComponent,
          dataMap: dataMap,
          onEndReached: function onEndReached() {
            _this5.onEndReached();
          },
          onRefresh: function onRefresh() {
            _this5.onRefresh();
          },
          onReloaded: function onReloaded() {
            _this5.onRefresh();
          }
        });
      }
    }]);
    return LHStandardLog;
  }(_react.default.Component);

  LHStandardLog.getDataIndex = function (dataList, data) {
    for (var i = 0, len = dataList.length; i < len; i += 1) {
      if (_LHCommonFunction.LHDateUtils.DateFormat('yyyy-MM-dd', data.time) === _LHCommonFunction.LHDateUtils.DateFormat('yyyy-MM-dd', dataList[i].title)) return i;
    }

    return -1;
  };

  LHStandardLog.defaultProps = {
    loadCache: true,
    styleType: 0,
    titleNumberOfLines: 9999,
    contentContainerStyle: {},
    firstSectionHeaderStyle: undefined,
    ListHeaderComponent: function ListHeaderComponent() {
      return null;
    },
    showsScrollIndicator: false
  };
  LHStandardLog.propTypes = {
    loadCache: _propTypes.default.bool,
    styleType: _propTypes.default.number,
    titleNumberOfLines: _propTypes.default.number,
    ListHeaderComponent: _propTypes.default.func,
    onRefresh: _propTypes.default.func,
    contentContainerStyle: _reactNative.ViewPropTypes.style,
    firstSectionHeaderStyle: _reactNative.ViewPropTypes.style,
    showsScrollIndicator: _propTypes.default.bool
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHStandardLog);

  exports.default = _default;
},10571,[14305,14344,14674,14320,14323,14371,14377,14386,10297,10033,10074,10004,10178,10318,10574,10577]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources",
    "width": 414,
    "height": 414,
    "scales": [1],
    "hash": "372948f0ea16947674da3df52c8be05e",
    "name": "load_fail",
    "type": "png"
  });
},10574,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources",
    "width": 414,
    "height": 414,
    "scales": [1],
    "hash": "b32040edd73d33048f9a37e94f29c79a",
    "name": "log_blank",
    "type": "png"
  });
},10577,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var styles = _reactNative.StyleSheet.create({
    sectionListStyle: {
      width: '100%',
      height: '100%',
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    gap: {
      height: _LHCommonFunction.LHUiUtils.GetPx(8),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    borderTop: {
      paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(24),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    listTitle: {
      color: _LHCommonFunction.LHUiUtils.MiJiaListHeaderColor,
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(15),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(11),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(9),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(8),
      textAlignVertical: 'center'
    },
    row: {
      flexDirection: 'row'
    },
    itemWrap: {
      paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(24),
      paddingRight: _LHCommonFunction.LHUiUtils.GetPx(24),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    cardItemWrap: {
      paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(15),
      paddingRight: _LHCommonFunction.LHUiUtils.GetPx(15),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    time: {
      width: _LHCommonFunction.LHUiUtils.GetPx(57),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(14),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      color: _LHCommonFunction.LHUiUtils.MiJiaTitleColor,
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    lineWrap: {
      alignItems: 'center'
    },
    contextValue: {
      paddingVertical: _LHCommonFunction.LHUiUtils.GetPx(15),
      flex: 1
    },
    context: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(20),
      color: _LHCommonFunction.LHUiUtils.MiJiaTitleColor,
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      letterSpacing: 0
    },
    subContext: {
      marginTop: 1,
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(20),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor,
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily,
      letterSpacing: 0
    },
    circle: {
      width: _LHCommonFunction.LHUiUtils.GetPx(5),
      height: _LHCommonFunction.LHUiUtils.GetPx(5),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(2.5),
      backgroundColor: '#d8d8d8'
    },
    line: {
      width: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      height: _LHCommonFunction.LHUiUtils.GetPx(21),
      backgroundColor: '#e5e5e5'
    },
    lineBottom: {
      flex: 1,
      width: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      backgroundColor: '#e5e5e5'
    },
    lastItem: {
      paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(14)
    },
    noMoreWrap: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray,
      paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(20),
      paddingTop: _LHCommonFunction.LHUiUtils.GetPx(18),
      alignItems: 'center'
    },
    noMoreText: {
      color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor,
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      letterSpacing: 0,
      textAlign: 'center',
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    loadingcontainer: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray,
      paddingVertical: _LHCommonFunction.LHUiUtils.GetPx(12),
      alignItems: 'center'
    },
    loadingWrap: {
      flexDirection: 'row'
    },
    loadingText: {
      color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor,
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      letterSpacing: -0.11,
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(10),
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    footer: {
      height: _LHCommonFunction.LHUiUtils.GetPx(40),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    }
  });

  var LHStandardLogUI = function (_React$Component) {
    (0, _inherits2.default)(LHStandardLogUI, _React$Component);

    function LHStandardLogUI(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHStandardLogUI);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHStandardLogUI).call(this, props));
      _this.state = {
        listHeight: 0
      };
      return _this;
    }

    (0, _createClass2.default)(LHStandardLogUI, [{
      key: "getPageData",
      value: function getPageData() {
        var logListData = this.props.logListData;
        var result = this.dealData(logListData);
        return result;
      }
    }, {
      key: "dealData",
      value: function dealData(data) {
        var dataMap = this.props.dataMap;
        var result = [];

        for (var i = 0, len = data.length; i < len; i += 1) {
          if (!dataMap(data[i])) continue;
          var dataItem = (0, _extends2.default)({}, data[i], dataMap(data[i]), {
            time: data[i].time
          });
          var index = LHStandardLogUI.getDataIndex(result, dataItem);

          if (index > -1) {
            result[index].data.push(dataItem);
          } else {
            result.push({
              title: dataItem.time,
              data: [dataItem]
            });
          }
        }

        return result;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            style = _this$props.style,
            contentContainerStyle = _this$props.contentContainerStyle,
            firstSectionHeaderStyle = _this$props.firstSectionHeaderStyle,
            styleType = _this$props.styleType,
            emptyText = _this$props.emptyText,
            emptyIcon = _this$props.emptyIcon,
            emptyStyle = _this$props.emptyStyle,
            loadingText = _this$props.loadingText,
            allDataHasLoadedText = _this$props.allDataHasLoadedText,
            titleNumberOfLines = _this$props.titleNumberOfLines,
            page = _this$props.page,
            pageSize = _this$props.pageSize,
            isLoading = _this$props.isLoading,
            pageOver = _this$props.pageOver,
            firstIn = _this$props.firstIn,
            logListData = _this$props.logListData,
            _onEndReached = _this$props.onEndReached,
            _onRefresh = _this$props.onRefresh,
            hasRefreshControl = _this$props.hasRefreshControl,
            showsScrollIndicator = _this$props.showsScrollIndicator,
            scrollEnabled = _this$props.scrollEnabled,
            onReloaded = _this$props.onReloaded,
            ListHeaderComponent = _this$props.ListHeaderComponent,
            loadFail = _this$props.loadFail;
        var listHeight = this.state.listHeight;
        var pageData = this.getPageData();
        var normalStyle = styleType === 0;
        return _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(e) {
            var height = e.nativeEvent.layout.height;

            _this2.setState({
              listHeight: height
            });
          }
        }, _react.default.createElement(_reactNative.SectionList, {
          contentContainerStyle: contentContainerStyle,
          style: [styles.sectionListStyle, style],
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('SectionList'),
          testID: "SectionList",
          scrollEnabled: scrollEnabled,
          resizeMode: "stretch",
          initialNumToRender: 20,
          showsVerticalScrollIndicator: showsScrollIndicator,
          sections: pageData,
          refreshControl: hasRefreshControl ? _react.default.createElement(_reactNative.RefreshControl, {
            refreshing: page === 1 && isLoading,
            onRefresh: function onRefresh() {
              if (typeof _onRefresh === 'function') _onRefresh();
            }
          }) : null,
          onEndReached: function onEndReached() {
            if (typeof _onEndReached === 'function') {
              _onEndReached();
            }
          },
          onEndReachedThreshold: 0.2,
          stickySectionHeadersEnabled: false,
          ListEmptyComponent: function ListEmptyComponent() {
            if (firstIn && logListData.length === 0 && !loadFail) return null;
            return _react.default.createElement(_LHCommonUI.LHStandardEmpty, {
              contentHeight: listHeight,
              emptyPageStyle: emptyStyle,
              text: emptyText || _LHCommonFunction.LHCommonLocalizableString.common_log_no_logs,
              emptyIcon: emptyIcon,
              onClicked: loadFail && page === 1 ? onReloaded : null
            });
          },
          renderItem: function renderItem(_ref) {
            var item = _ref.item,
                index = _ref.index,
                section = _ref.section;
            var circleColor = item.logType === 'alert' ? _LHCommonFunction.LHUiUtils.MiJiaOrangeColor : item.logType === 'error' ? '#F46666' : '#d8d8d8';
            var textColor = item.logType === 'alert' ? _LHCommonFunction.LHUiUtils.MiJiaOrangeColor : item.logType === 'error' ? '#F46666' : _LHCommonFunction.LHUiUtils.MiJiaTitleColor;
            var subContext = item.subContext ? _react.default.createElement(_reactNative.Text, {
              style: [styles.subContext, item.subContextStyle],
              numberOfLines: 1
            }, item.subContext) : null;
            return _react.default.createElement(_reactNative.View, {
              style: {
                backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
              }
            }, _react.default.createElement(_reactNative.View, {
              style: [styles.row, normalStyle ? styles.itemWrap : styles.cardItemWrap, index === section.data.length - 1 ? {
                paddingBottom: normalStyle ? _LHCommonFunction.LHUiUtils.GetPx(14) : _LHCommonFunction.LHUiUtils.GetPx(1)
              } : null]
            }, _react.default.createElement(_reactNative.Text, {
              style: [styles.time, {
                marginTop: subContext ? _LHCommonFunction.LHUiUtils.GetPx(11) : _LHCommonFunction.LHUiUtils.GetPx(15)
              }]
            }, _LHCommonFunction.LHDateUtils.DateFormat('hh:mm', item.time)), _react.default.createElement(_reactNative.View, {
              style: styles.lineWrap
            }, _react.default.createElement(_reactNative.View, {
              style: [styles.line, {
                backgroundColor: index === 0 ? 'transparent' : '#E5E5E5',
                height: subContext ? _LHCommonFunction.LHUiUtils.GetPx(19) : _LHCommonFunction.LHUiUtils.GetPx(23)
              }]
            }), _react.default.createElement(_reactNative.View, {
              style: [styles.circle, {
                backgroundColor: circleColor
              }]
            }), _react.default.createElement(_reactNative.View, {
              style: [styles.lineBottom, {
                backgroundColor: index === section.data.length - 1 ? 'transparent' : '#E5E5E5'
              }]
            })), _react.default.createElement(_reactNative.View, {
              style: [styles.contextValue, {
                paddingVertical: subContext ? _LHCommonFunction.LHUiUtils.GetPx(11) : _LHCommonFunction.LHUiUtils.GetPx(15)
              }]
            }, _react.default.createElement(_reactNative.Text, {
              style: [styles.context, {
                color: textColor
              }],
              numberOfLines: titleNumberOfLines
            }, item.context), subContext)), index === section.data.length - 1 && normalStyle ? _react.default.createElement(_LHCommonUI.LHSeparator, {
              style: [{
                marginBottom: _LHCommonFunction.LHUiUtils.GetPx(0.5)
              }]
            }) : null);
          },
          renderSectionHeader: function renderSectionHeader(_ref2) {
            var section = _ref2.section;
            var firstSection = pageData[0].title === section.title;

            if (normalStyle) {
              var gapElement = null;

              if (!firstSection) {
                gapElement = _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
                  style: styles.gap
                }), _react.default.createElement(_LHCommonUI.LHSeparator, {
                  style: {
                    alignSelf: 'flex-start'
                  }
                }));
              }

              var sectionHeaderStyle = {
                paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(14),
                backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
              };

              if (firstSection && firstSectionHeaderStyle) {
                sectionHeaderStyle = [sectionHeaderStyle, firstSectionHeaderStyle];
              }

              return _react.default.createElement(_reactNative.View, {
                style: sectionHeaderStyle
              }, gapElement, _react.default.createElement(_reactNative.View, {
                style: styles.borderTop
              }, _react.default.createElement(_reactNative.Text, {
                style: styles.listTitle
              }, _LHCommonFunction.LHDateUtils.GetStandardTimeText(section.title)), _react.default.createElement(_LHCommonUI.LHSeparator, null)));
            } else {
              return _react.default.createElement(_reactNative.View, {
                style: {
                  backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
                }
              }, _react.default.createElement(_reactNative.View, {
                style: [styles.borderTop, !normalStyle ? {
                  paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(14)
                } : null]
              }, firstSection ? null : _react.default.createElement(_LHCommonUI.LHSeparator, {
                style: {
                  backgroundColor: '#e5e5e5'
                }
              }), _react.default.createElement(_reactNative.Text, {
                style: [styles.listTitle, !normalStyle ? {
                  marginTop: _LHCommonFunction.LHUiUtils.GetPx(16),
                  marginBottom: 0
                } : null]
              }, _LHCommonFunction.LHDateUtils.GetStandardTimeText(section.title))));
            }
          },
          ListHeaderComponent: ListHeaderComponent,
          ListFooterComponent: function ListFooterComponent() {
            if (!isLoading && pageOver && logListData.length > pageSize && !firstIn) {
              if (normalStyle) {
                return _react.default.createElement(_reactNative.View, {
                  style: [styles.noMoreWrap, {
                    backgroundColor: normalStyle ? _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray : _LHCommonFunction.LHUiUtils.MiJiaWhite
                  }]
                }, _react.default.createElement(_reactNative.Text, {
                  style: styles.noMoreText
                }, allDataHasLoadedText || _LHCommonFunction.LHCommonLocalizableString.common_log_all_data_has_been_loaded));
              } else {
                return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHSeparator, {
                  style: {
                    marginLeft: _LHCommonFunction.LHUiUtils.GetPx(14)
                  }
                }), _react.default.createElement(_reactNative.View, {
                  style: [styles.noMoreWrap, {
                    backgroundColor: normalStyle ? _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray : _LHCommonFunction.LHUiUtils.MiJiaWhite
                  }]
                }, _react.default.createElement(_reactNative.Text, {
                  style: styles.noMoreText
                }, allDataHasLoadedText || _LHCommonFunction.LHCommonLocalizableString.common_log_all_data_has_been_loaded)));
              }
            } else if (page !== 1 && isLoading && !loadFail) {
              return _react.default.createElement(_reactNative.View, {
                style: [styles.loadingcontainer, {
                  backgroundColor: normalStyle ? _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray : _LHCommonFunction.LHUiUtils.MiJiaWhite
                }]
              }, _react.default.createElement(_reactNative.View, {
                style: styles.loadingWrap
              }, _react.default.createElement(_reactNative.ActivityIndicator, {
                color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor
              }), _react.default.createElement(_reactNative.Text, {
                style: styles.loadingText
              }, loadingText || _LHCommonFunction.LHCommonLocalizableString.common_log_loading)));
            } else if (!isLoading && pageData.length === 0) {
              return null;
            } else {
              return _react.default.createElement(_reactNative.View, {
                style: [styles.footer, {
                  backgroundColor: normalStyle ? _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray : _LHCommonFunction.LHUiUtils.MiJiaWhite
                }]
              });
            }
          },
          keyExtractor: function keyExtractor(item, index) {
            return index;
          }
        }));
      }
    }]);
    return LHStandardLogUI;
  }(_react.default.Component);

  LHStandardLogUI.getDataIndex = function (dataList, data) {
    for (var i = 0, len = dataList.length; i < len; i += 1) {
      if (_LHCommonFunction.LHDateUtils.DateFormat('yyyy-MM-dd', data.time) === _LHCommonFunction.LHDateUtils.DateFormat('yyyy-MM-dd', dataList[i].title)) return i;
    }

    return -1;
  };

  LHStandardLogUI.defaultProps = {
    styleType: 0,
    titleNumberOfLines: 9999,
    hasRefreshControl: true,
    showsScrollIndicator: false,
    scrollEnabled: true,
    contentContainerStyle: {},
    firstSectionHeaderStyle: undefined,
    ListHeaderComponent: function ListHeaderComponent() {
      return null;
    },
    onReloaded: function onReloaded() {
      console.log('onReloaded');
    }
  };
  LHStandardLogUI.propTypes = {
    styleType: _propTypes.default.number,
    titleNumberOfLines: _propTypes.default.number,
    hasRefreshControl: _propTypes.default.bool,
    showsScrollIndicator: _propTypes.default.bool,
    scrollEnabled: _propTypes.default.bool,
    ListHeaderComponent: _propTypes.default.func,
    contentContainerStyle: _reactNative.ViewPropTypes.style,
    firstSectionHeaderStyle: _reactNative.ViewPropTypes.style,
    onReloaded: _propTypes.default.func
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHStandardLogUI);

  exports.default = _default;
},10580,[14305,14344,14320,14323,14371,14377,14386,10297,10033,10004,10178,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _miot = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var isShared = _LHCommonFunction.LHDeviceAuthorityUtils.isShared();

  var LHSetting = function (_React$Component) {
    (0, _inherits2.default)(LHSetting, _React$Component);

    function LHSetting(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHSetting);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSetting).call(this, props));
      _this.state = {
        deviceName: _miot.Device.name,
        isHomeKitDevice: false,
        pairedHomeKit: false,
        showFirmwareUpgrateDot: false
      };
      return _this;
    }

    (0, _createClass2.default)(LHSetting, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var _this$props = this.props,
            showIsHomeKitDevice = _this$props.showIsHomeKitDevice,
            showFirmwareUpgrate = _this$props.showFirmwareUpgrate,
            needFirmwareUpgrateDot = _this$props.needFirmwareUpgrateDot;

        if (showIsHomeKitDevice && _reactNative.Platform.OS !== 'android') {
          var majorVersionIOS = parseInt(_reactNative.Platform.Version, 10);

          if (majorVersionIOS >= 10) {
            _miot.Device.checkIsHomeKitDevice().then(function (res1) {
              if (res1) {
                _this2.setState({
                  isHomeKitDevice: true
                });

                _miot.Device.checkHomeKitConnected().then(function (res2) {
                  _this2.setState({
                    pairedHomeKit: !!res2
                  });
                });
              }
            });
          }
        }

        if (showFirmwareUpgrate && needFirmwareUpgrateDot) {
          this.hardwareUpdateInstance = new _LHCommonFunction.LHHardwareUpdateUtils(true);
          this.checkHardwareUpdateCallback = this.hardwareUpdateInstance.addCallback(function (res) {
            _this2.setState({
              showFirmwareUpgrateDot: !res.isLatest
            });
          });
          this.hardwareUpdateInstance.checkHardwareUpdate();
        }

        this.deviceNameChangedListener = _miot.DeviceEvent.deviceNameChanged.addListener(function (event) {
          _this2.setState({
            deviceName: event.name
          });
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.deviceNameChangedListener) this.deviceNameChangedListener.remove();
        if (this.checkHardwareUpdateCallback) this.checkHardwareUpdateCallback.remove();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this3 = this;

        var _this$state = this.state,
            deviceName = _this$state.deviceName,
            isHomeKitDevice = _this$state.isHomeKitDevice,
            pairedHomeKit = _this$state.pairedHomeKit,
            showFirmwareUpgrateDot = _this$state.showFirmwareUpgrateDot;
        var _this$props2 = this.props,
            navigation = _this$props2.navigation,
            settingItems = _this$props2.settingItems,
            PolicyLicenseUrl = _this$props2.PolicyLicenseUrl,
            showShare = _this$props2.showShare,
            showBtGateway = _this$props2.showBtGateway,
            showVoiceAuth = _this$props2.showVoiceAuth,
            showSwitchSetting = _this$props2.showSwitchSetting,
            showIftt = _this$props2.showIftt,
            showDeviceTimeZone = _this$props2.showDeviceTimeZone,
            syncDeviceTimeZoneToDevice = _this$props2.syncDeviceTimeZoneToDevice,
            showFirmwareUpgrate = _this$props2.showFirmwareUpgrate,
            hideLegalInformation = _this$props2.hideLegalInformation,
            AdjustmentCommonItems = _this$props2.AdjustmentCommonItems,
            hideGatewayShare = _this$props2.hideGatewayShare,
            bleMeshPageSwitchColor = _this$props2.bleMeshPageSwitchColor;

        if (typeof PolicyLicenseUrl === 'undefined') {
          console.warn('请传入PolicyLicenseUrl');
        }

        _LHCommonFunction.LHSettingItem.updateNavigation(navigation);

        var items = typeof settingItems === 'undefined' || settingItems.length === 0 ? [] : [{
          title: _LHCommonFunction.LHCommonLocalizableString.common_setting_feature_setting,
          data: settingItems
        }];
        var conmonSettingsData = [isShared ? null : _LHCommonFunction.LHSettingItem.getSettingItem('deviceName', {
          rightDescription: deviceName
        }), isShared ? null : _LHCommonFunction.LHSettingItem.roomManagementItem, isShared ? null : showSwitchSetting ? _LHCommonFunction.LHSettingItem.switchSettingItem : null, isShared ? null : showShare || !hideGatewayShare && _miot.Device.model.indexOf('gateway') > -1 ? _LHCommonFunction.LHSettingItem.shareDeviceItem : null, isShared ? null : showBtGateway ? _LHCommonFunction.LHSettingItem.GetBleGatewayMeshItem(navigation, bleMeshPageSwitchColor) : null, isShared ? null : showVoiceAuth ? _LHCommonFunction.LHSettingItem.voiceAuthItem : null, isShared ? null : showIftt ? _LHCommonFunction.LHSettingItem.iftttAutoItem : null, isShared ? null : showFirmwareUpgrate ? _LHCommonFunction.LHSettingItem.getSettingItem('firmwareUpgrate', {
          hasDot: showFirmwareUpgrateDot,
          press: function press() {
            if (_this3.hardwareUpdateInstance) _this3.hardwareUpdateInstance.needCheck = true;

            _miot.Host.ui.openDeviceUpgradePage();
          }
        }) : null, isShared ? null : isHomeKitDevice ? _LHCommonFunction.LHSettingItem.getSettingItem('pairWithHomeKitiOS', {
          rightDescription: pairedHomeKit ? _LHCommonFunction.LHCommonLocalizableString.common_setting_homekit_device_bound : _LHCommonFunction.LHCommonLocalizableString.common_setting_homekit_device_noBind,
          description: _miot.Device.model.indexOf('lumi.lock') > -1 && pairedHomeKit ? _LHCommonFunction.LHCommonLocalizableString.common_setting_homekit_device_desc : null,
          hideRightArrow: pairedHomeKit,
          press: function press() {
            var newPairedHomeKit = _this3.state.pairedHomeKit;
            if (newPairedHomeKit) return;

            _miot.Device.bindToHomeKit().then(function (res) {
              console.log(res);

              _this3.setState({
                pairedHomeKit: true
              });
            }).catch(function (error) {
              console.log(error);
            });
          }
        }) : null, _LHCommonFunction.LHSettingItem.GetMoreSettingItem(navigation, showDeviceTimeZone, syncDeviceTimeZoneToDevice), _LHCommonFunction.LHSettingItem.helpPageItem, isShared || hideLegalInformation ? null : _LHCommonFunction.LHSettingItem.GetPrivacyLicenseItem(PolicyLicenseUrl)];

        for (var i = 0; i < conmonSettingsData.length; i += 1) {
          if (!conmonSettingsData[i]) {
            conmonSettingsData.splice(i, 1);
            i -= 1;
          }
        }

        var conmonSettings = {
          title: _LHCommonFunction.LHCommonLocalizableString.common_setting_general_setting,
          data: typeof AdjustmentCommonItems === 'function' ? AdjustmentCommonItems(conmonSettingsData) : conmonSettingsData
        };
        items.push(conmonSettings);

        if (!_LHCommonFunction.LHDeviceAuthorityUtils.isFamilyShare()) {
          items.push({
            title: 'type:bottomButton',
            data: [_LHCommonFunction.LHSettingItem.deleteDeviceItem]
          });
        }

        return items;
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        });
      }
    }]);
    return LHSetting;
  }(_react.default.Component);

  LHSetting.defaultProps = {
    showFirmwareUpgrate: true,
    needFirmwareUpgrateDot: true,
    showIftt: true,
    hideLegalInformation: false,
    showDeviceTimeZone: true,
    syncDeviceTimeZoneToDevice: false
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHSetting);

  exports.default = _default;
},10583,[14305,14320,14323,14371,14377,14386,10297,10033,10074,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _Card = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[12]);

  var _Images = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var styles = _reactNative.StyleSheet.create({
    defaultCardStyle: {
      height: _LHCommonFunction.LHUiUtils.GetPx(80),
      marginTop: 0,
      width: width - _LHCommonFunction.LHUiUtils.GetPx(10) * 2,
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(10),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(10)
    },
    innerViewWrap: {
      height: '100%'
    },
    borderLine: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
      height: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      position: 'absolute',
      left: 0,
      right: 0,
      top: 0
    },
    itemWrap: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    icon: {
      width: _LHCommonFunction.LHUiUtils.GetPx(40),
      height: _LHCommonFunction.LHUiUtils.GetPx(40),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(20),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(13)
    },
    title: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
      color: '#000',
      letterSpacing: -0.14,
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    subTitle: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      color: '#999999',
      letterSpacing: -0.11,
      fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
    },
    textWrap: {
      flex: 1
    },
    rightIcon: {
      width: _LHCommonFunction.LHUiUtils.GetPx(24),
      height: _LHCommonFunction.LHUiUtils.GetPx(24)
    },
    rightIconWrap: {
      paddingRight: _LHCommonFunction.LHUiUtils.GetPx(18),
      height: '100%',
      justifyContent: 'center'
    }
  });

  var LHCardBase = function (_React$Component) {
    (0, _inherits2.default)(LHCardBase, _React$Component);

    function LHCardBase(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHCardBase);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHCardBase).call(this, props));
      _this.state = {
        cardHeight: 0
      };
      return _this;
    }

    (0, _createClass2.default)(LHCardBase, [{
      key: "renderItem",
      value: function renderItem(item, index, len) {
        var _this2 = this;

        var borderTop = index !== 0 ? _react.default.createElement(_reactNative.View, {
          style: styles.borderLine
        }) : null;
        var subTitle = typeof item.subTitle !== 'undefined' ? _react.default.createElement(_reactNative.Text, {
          numberOfLines: item.subTitleNumberOfLines || 1,
          style: [styles.subTitle, item.subTitleStyle],
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel((item.testID || '') + '_subTitle'),
          testID: (item.testID || '') + '_subTitle'
        }, item.subTitle) : null;
        var rightIcon = item.hideRightIcon || item.hasSwitch ? null : _react.default.createElement(_reactNative.Image, {
          resizeMode: "contain",
          style: [styles.rightIcon, item.rightIconStyle],
          source: item.rightIconSource || (item.rightIconType === 'close' ? _$$_REQUIRE(_dependencyMap[14]) : _$$_REQUIRE(_dependencyMap[15]))
        });
        var rightIconWrap = item.rightIconPress ? _react.default.createElement(_reactNative.TouchableHighlight, {
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel((item.testID || '') + 'RightIcon'),
          testID: (item.testID || '') + 'RightIcon',
          style: [styles.rightIconWrap, item.rightIconWrapStyle, {
            opacity: item.disabled ? 0.3 : 1
          }],
          underlayColor: "transparent",
          activeOpacity: 1,
          onPress: function onPress() {
            item.rightIconPress();
          }
        }, rightIcon) : item.hasSwitch ? null : _react.default.createElement(_reactNative.View, {
          style: [styles.rightIconWrap, item.rightIconWrapStyle, {
            opacity: item.disabled ? 0.3 : 1
          }]
        }, rightIcon);
        var rightSwitch = item.hasSwitch ? _react.default.createElement(_reactNative.TouchableOpacity, {
          style: {
            height: '100%',
            justifyContent: 'center',
            paddingRight: _LHCommonFunction.LHUiUtils.GetPx(20),
            marginLeft: _LHCommonFunction.LHUiUtils.GetPx(12),
            alignItems: 'flex-end'
          },
          activeOpacity: 1,
          onPress: function onPress() {}
        }, _react.default.createElement(_LHCommonUI.LHSwitch, {
          testID: (item.testID || '') + 'CardSwitch',
          style: {
            width: _LHCommonFunction.LHUiUtils.GetPx(44),
            height: _LHCommonFunction.LHUiUtils.GetPx(24)
          },
          disabled: item.switchDisabled || item.disabled || false,
          tintColor: item.switchTintColor || '#f0f0f0',
          onTintColor: item.switchColor || _LHCommonFunction.LHUiUtils.MiJiaBlue,
          onValueChange: function onValueChange(state) {
            if (typeof item.onValueChange === 'function') item.onValueChange(state);
          },
          value: item.switchValue,
          ref: function ref(switchBtn) {
            _this2.switchBtn = switchBtn;
          }
        })) : null;
        var icon = item.iconSource ? !item.hasNest ? _react.default.createElement(_reactNative.Image, (0, _extends2.default)({}, item.iconResizeMode || {
          resizeMode: 'contain'
        }, {
          fadeDuration: 0,
          style: [styles.icon, item.iconStyle, {
            opacity: item.disabled ? 0.3 : 1
          }],
          source: item.iconSource
        })) : _react.default.createElement(_reactNative.View, {
          style: [styles.icon, item.nestWrapperStyle, {
            alignItems: 'center',
            justifyContent: 'center',
            opacity: item.disabled ? 0.3 : 1
          }]
        }, _react.default.createElement(_reactNative.Image, (0, _extends2.default)({}, item.iconResizeMode || {
          resizeMode: 'contain'
        }, {
          fadeDuration: 0,
          style: [{
            width: _LHCommonFunction.LHUiUtils.GetPx(40),
            height: _LHCommonFunction.LHUiUtils.GetPx(40)
          }, item.iconStyle],
          source: item.iconSource
        }))) : null;

        var textWrap = _react.default.createElement(_reactNative.View, {
          style: [styles.textWrap, item.iconSource ? null : {
            marginLeft: _LHCommonFunction.LHUiUtils.GetPx(20)
          }, item.textWrapStyle, {
            opacity: item.disabled ? 0.3 : 1
          }],
          onLayout: function onLayout(e) {
            var _this2$props = _this2.props,
                autoHeight = _this2$props.autoHeight,
                paddingVertical = _this2$props.paddingVertical;
            console.log('触发重新布局');

            if (autoHeight) {
              _this2.setState({
                cardHeight: e.nativeEvent.layout.height + (paddingVertical || 0) * 2
              });
            }
          }
        }, _react.default.createElement(_reactNative.Text, {
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel((item.testID || '') + '_title'),
          testID: (item.testID || '') + '_title',
          numberOfLines: item.titleNumberOfLines || 1,
          style: [styles.title, item.titleStyle]
        }, item.title || ''), subTitle);

        var content = item.onPress ? _react.default.createElement(_reactNative.TouchableHighlight, {
          disabled: item.disabled || false,
          key: 'item_' + index,
          style: [styles.itemWrap, {
            height: 1 / len * 100 + '%',
            backgroundColor: item.disabled ? 'rgba(255, 255, 255, 0.3)' : '#fff'
          }],
          underlayColor: _LHCommonFunction.LHUiUtils.MiJiaCellSelBgColor,
          activeOpacity: 1,
          onPress: function onPress() {
            item.onPress();
          },
          onLongPress: function onLongPress() {
            if (typeof item.onLongPress === 'function') item.onLongPress();
          },
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(item.testID || ''),
          testID: item.testID || ''
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.itemWrap, {
            height: '100%',
            flex: 1
          }]
        }, borderTop, icon, textWrap, rightSwitch, rightIconWrap)) : _react.default.createElement(_reactNative.View, {
          key: 'item_' + index,
          style: [styles.itemWrap, {
            height: 1 / len * 100 + '%',
            backgroundColor: item.disabled ? 'rgba(255, 255, 255, 0.3)' : '#fff'
          }]
        }, borderTop, icon, textWrap, rightSwitch, rightIconWrap);
        return content;
      }
    }, {
      key: "renderInnerView",
      value: function renderInnerView() {
        var _this3 = this;

        var data = this.props.data;
        return _react.default.createElement(_reactNative.View, {
          style: [styles.innerViewWrap, {
            overflow: 'hidden',
            borderRadius: _LHCommonFunction.LHUiUtils.GetPx(10)
          }]
        }, data.map(function (item, index) {
          return _this3.renderItem(item, index, data.length);
        }));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            visible = _this$props.visible,
            cardStyle = _this$props.cardStyle,
            autoHeight = _this$props.autoHeight;
        var cardHeight = this.state.cardHeight;
        return _react.default.createElement(_Card.default, {
          key: cardHeight,
          innerView: this.renderInnerView(),
          visible: visible,
          cardStyle: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.flatten(styles.defaultCardStyle), cardStyle || {}, autoHeight ? {
            height: cardHeight
          } : {}),
          showShadow: true
        });
      }
    }]);
    return LHCardBase;
  }(_react.default.Component);

  LHCardBase.initialState = {};
  LHCardBase.defaultProps = {
    visible: true,
    data: []
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHCardBase);

  exports.default = _default;
},10586,[14305,14314,14344,14320,14323,14371,14377,14386,10297,10033,10377,10004,10178,10308,10589,10592]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "4778514381f3cab26a34b331cae11d17",
    "name": "default_card_close",
    "type": "png"
  });
},10589,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Modules/Mijia-CommonUI-Modules/Resources",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "26511023623e35f5ec0b789864d45dad",
    "name": "homepage_card_enter",
    "type": "png"
  });
},10592,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _Card = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[12]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var initWidth = _LHCommonFunction.LHUiUtils.GetPx(46);

  var progressWidth = width - _LHCommonFunction.LHUiUtils.GetPx(20) - _LHCommonFunction.LHUiUtils.GetPx(40);

  var titleHeight = _LHCommonFunction.LHUiUtils.GetPx(53, 360, 320);

  var styles = _reactNative.StyleSheet.create({
    defaultCardStyle: {
      height: _LHCommonFunction.LHUiUtils.GetPx(119),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(10),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(10),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(8),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(10),
      marginTop: 0,
      width: width - _LHCommonFunction.LHUiUtils.GetPx(10) * 2
    },
    lightCard: {
      height: _LHCommonFunction.LHUiUtils.GetPx(119),
      backgroundColor: '#fff',
      borderRadius: 10
    },
    cardTitle: {
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(19.1),
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(16.2),
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(14),
      color: '#333333',
      textAlignVertical: 'bottom',
      paddingVertical: 0
    },
    cardTitleLine: {
      color: 'rgba(0,0,0,0.3)',
      height: _LHCommonFunction.LHUiUtils.GetPx(14),
      width: _LHCommonFunction.LHUiUtils.GetPx(0.5),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(5.9),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(6.5)
    },
    cardSubTitle: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      color: '#666666',
      textAlignVertical: 'bottom',
      paddingVertical: 0
    },
    progressGreyBg: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(17.8),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(20),
      height: _LHCommonFunction.LHUiUtils.GetPx(46),
      backgroundColor: '#EBF2F7',
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(23),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(20),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(20),
      justifyContent: 'center'
    },
    progressImgMin: {
      position: 'absolute',
      left: _LHCommonFunction.LHUiUtils.GetPx(13),
      width: _LHCommonFunction.LHUiUtils.GetPx(20),
      height: _LHCommonFunction.LHUiUtils.GetPx(20)
    },
    progressImgPickerBg: {
      backgroundColor: '#00BEFF',
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(23),
      width: progressWidth,
      height: _LHCommonFunction.LHUiUtils.GetPx(46),
      justifyContent: 'center',
      alignItems: 'center'
    },
    progressImgPicker: {
      position: 'absolute',
      right: _LHCommonFunction.LHUiUtils.GetPx(5),
      width: _LHCommonFunction.LHUiUtils.GetPx(36),
      height: _LHCommonFunction.LHUiUtils.GetPx(36),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(18),
      backgroundColor: '#fff'
    },
    progressImgMax: {
      position: 'absolute',
      right: _LHCommonFunction.LHUiUtils.GetPx(13),
      width: _LHCommonFunction.LHUiUtils.GetPx(20),
      height: _LHCommonFunction.LHUiUtils.GetPx(20),
      zIndex: -1
    }
  });

  var LHProgressCard = function (_React$Component) {
    (0, _inherits2.default)(LHProgressCard, _React$Component);

    function LHProgressCard(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHProgressCard);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHProgressCard).call(this, props));

      _this.setProgressValue = function (value) {
        var _this$state = _this.state,
            progressValue = _this$state.progressValue,
            minValue = _this$state.minValue,
            maxValue = _this$state.maxValue;
        var showValue = value < minValue ? Number(minValue) : value > Number(maxValue) ? Number(maxValue) : value;
        progressValue.setValue(showValue);

        _this.setState({
          progressValue: progressValue
        });
      };

      _this.setScroll = function (bool) {
        var enabledScroll = _this.props.enabledScroll;

        if (typeof enabledScroll === 'function') {
          enabledScroll(bool);
        }
      };

      _this.changeProgress = function (currentX, isRelease) {
        var changeProgressValue = _this.props.changeProgressValue;
        var _this$state2 = _this.state,
            progressValue = _this$state2.progressValue,
            minValue = _this$state2.minValue,
            maxValue = _this$state2.maxValue;
        var progressX = minValue + (currentX - initWidth) / ((progressWidth - initWidth) / (Number(maxValue) - Number(minValue)));

        if (progressX <= Number(minValue)) {
          progressX = Number(minValue);
        }

        if (progressX >= Number(maxValue)) {
          progressX = Number(maxValue);
        }

        var value = progressX;
        progressValue.setValue(value);

        _this.setState({
          progressValue: progressValue
        });

        if (isRelease && typeof changeProgressValue === 'function') {
          var moveX = Math.ceil(progressX);
          changeProgressValue(moveX, function (res, cacheValue) {
            if (res) {
              _this.setProgressValue(cacheValue);
            }
          });
        }
      };

      _this.state = {
        progressValue: new _reactNative.Animated.Value(props.minValue),
        minValue: props.minValue,
        maxValue: props.maxValue
      };
      return _this;
    }

    (0, _createClass2.default)(LHProgressCard, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this.brightnessPanResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
            return true;
          },
          onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {
            return true;
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
            return true;
          },
          onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {
            return true;
          },
          onPanResponderGrant: function onPanResponderGrant() {
            _this2.setScroll(false);
          },
          onPanResponderMove: function onPanResponderMove(evt, gestureState) {
            var x0 = gestureState.x0,
                dx = gestureState.dx;
            var mLocationX = x0 - 33 + dx;

            _this2.changeProgress(mLocationX, false);
          },
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderEnd: function onPanResponderEnd(evt, gestureState) {
            _this2.setScroll(true);

            var x0 = gestureState.x0,
                dx = gestureState.dx;
            var mLocationX = x0 - 33 + dx;

            _this2.changeProgress(mLocationX, true);
          },
          onPanResponderTerminate: function onPanResponderTerminate() {},
          onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            value = _this$props.value,
            minValue = _this$props.minValue,
            maxValue = _this$props.maxValue;
        this.setState({
          minValue: minValue,
          maxValue: maxValue
        });
        this.setProgressValue(value);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this$props2 = this.props,
            value = _this$props2.value,
            minValue = _this$props2.minValue,
            maxValue = _this$props2.maxValue;
        var progressValue = this.state.progressValue;
        var _value = progressValue._value;
        var newValue = _value;

        if (minValue !== nextProps.minValue) {
          newValue = newValue < nextProps.minValue ? nextProps.minValue : newValue;
          this.setState({
            minValue: nextProps.minValue
          });
        }

        if (maxValue !== nextProps.maxValue) {
          newValue = newValue > nextProps.maxValue ? nextProps.maxValue : newValue;
          this.setState({
            maxValue: nextProps.maxValue
          });
        }

        if (value !== nextProps.value) {
          newValue = nextProps.value;

          if (newValue < nextProps.minValue) {
            newValue = nextProps.minValue;
          }

          if (newValue > nextProps.maxValue) {
            newValue = nextProps.maxValue;
          }
        }

        progressValue.setValue(newValue);
        this.setState({
          progressValue: progressValue
        });
      }
    }, {
      key: "animateStart",
      value: function animateStart(value) {
        var progressValue = this.state.progressValue;

        _reactNative.Animated.timing(progressValue, {
          toValue: value,
          duration: 0,
          easing: _reactNative.Easing.linear
        }).start(function () {});
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state3 = this.state,
            progressValue = _this$state3.progressValue,
            minValue = _this$state3.minValue,
            maxValue = _this$state3.maxValue;
        var _value = progressValue._value;
        var _this$props3 = this.props,
            progressTitle = _this$props3.progressTitle,
            subTitleUnit = _this$props3.subTitleUnit,
            titleStyle = _this$props3.titleStyle,
            subTitleStyle = _this$props3.subTitleStyle,
            subTitleUnitStyle = _this$props3.subTitleUnitStyle,
            progressEnable = _this$props3.progressEnable,
            enableBgColor = _this$props3.enableBgColor,
            enableProgressColor = _this$props3.enableProgressColor,
            disableBgColor = _this$props3.disableBgColor,
            disableProgressColor = _this$props3.disableProgressColor,
            showImg = _this$props3.showImg,
            minImgOnSource = _this$props3.minImgOnSource,
            minImgOffSource = _this$props3.minImgOffSource,
            maxImgOnSource = _this$props3.maxImgOnSource,
            maxImgOffSource = _this$props3.maxImgOffSource,
            minStyle = _this$props3.minStyle,
            maxStyle = _this$props3.maxStyle,
            cardStyle = _this$props3.cardStyle,
            testID = _this$props3.testID;
        var minProgress = initWidth / progressWidth * 100 + '%';
        var progress = progressEnable ? _react.default.createElement(_reactNative.View, (0, _extends2.default)({
          style: [styles.progressGreyBg, {
            backgroundColor: enableBgColor || '#EBF2F7'
          }]
        }, this.brightnessPanResponder.panHandlers, {
          pointerEvents: "box-only",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID),
          testID: testID
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.progressImgPickerBg, {
            width: progressValue.interpolate({
              inputRange: [Number(minValue), Number(maxValue)],
              outputRange: [minProgress, '100%']
            }),
            backgroundColor: enableProgressColor || '#00BEFF'
          }]
        }, _react.default.createElement(_reactNative.View, {
          style: styles.progressImgPicker
        })), showImg ? _react.default.createElement(_reactNative.Image, {
          style: [styles.progressImgMin, minStyle || {}],
          source: minImgOnSource
        }) : _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.progressImgMin, minStyle || {}]
        }, minValue || ''), showImg ? _react.default.createElement(_reactNative.Image, {
          style: [styles.progressImgMax, maxStyle || {}],
          source: maxImgOnSource
        }) : _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.progressImgMax, maxStyle || {}]
        }, maxValue || '')) : _react.default.createElement(_reactNative.View, {
          style: [styles.progressGreyBg, {
            backgroundColor: disableBgColor || 'rgba(223,226,227,0.3)'
          }]
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.progressImgPickerBg, {
            width: progressValue.interpolate({
              inputRange: [Number(minValue), Number(maxValue)],
              outputRange: [minProgress, '100%']
            }),
            backgroundColor: disableProgressColor || 'rgba(176,182,184,0.3)'
          }]
        }, _react.default.createElement(_reactNative.View, {
          style: styles.progressImgPicker
        })), showImg ? _react.default.createElement(_reactNative.Image, {
          style: [styles.progressImgMin, minStyle || {}],
          source: minImgOffSource
        }) : _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.progressImgMin, minStyle || {}]
        }, minValue || ''), showImg ? _react.default.createElement(_reactNative.Image, {
          style: [styles.progressImgMax, maxStyle || {}],
          source: maxImgOffSource
        }) : _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.progressImgMax, maxStyle || {}]
        }, maxValue || ''));
        var titleElement = progressTitle ? _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1,
            height: titleHeight,
            flexDirection: 'row',
            paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(19),
            paddingRight: _LHCommonFunction.LHUiUtils.GetPx(19),
            alignItems: 'center'
          }
        }, _react.default.createElement(_LHCommonUI.LHText, {
          numberOfLines: 1,
          style: [{
            color: '#333',
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(14),
            lineHeight: _LHCommonFunction.LHUiUtils.GetPx(19),
            letterSpacing: 0,
            maxWidth: '70%'
          }, titleStyle]
        }, progressTitle), _react.default.createElement(_reactNative.View, {
          style: [{
            width: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
            height: _LHCommonFunction.LHUiUtils.GetPx(14),
            marginHorizontal: _LHCommonFunction.LHUiUtils.GetPx(6),
            backgroundColor: 'rgba(0,0,0,0.3)'
          }]
        }), _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.cardSubTitle, subTitleStyle || {}],
          includeFontPadding: false
        }, Math.ceil(_value)), _react.default.createElement(_LHCommonUI.LHText, {
          style: [styles.cardSubTitle, subTitleUnitStyle || {}],
          includeFontPadding: false
        }, subTitleUnit || '')) : null;

        var renderInnerView = function renderInnerView() {
          return _react.default.createElement(_reactNative.View, {
            style: [styles.lightCard, {
              backgroundColor: progressEnable ? '#fff' : 'rgba(255, 255, 255, 0.3)'
            }]
          }, _react.default.createElement(_reactNative.View, {
            style: {
              opacity: progressEnable ? 1 : 0.3,
              flex: 1,
              flexDirection: 'row'
            }
          }, titleElement), progress);
        };

        return _react.default.createElement(_Card.default, {
          innerView: renderInnerView(),
          visible: true,
          cardStyle: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.flatten(styles.defaultCardStyle), cardStyle || {}),
          showShadow: true
        });
      }
    }]);
    return LHProgressCard;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHProgressCard);

  exports.default = _default;
},10595,[14305,14314,14344,14320,14323,14371,14377,14386,10297,10033,10377,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _ui = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var totalMin = new Array(60).toString().split(',').map(function (item, index) {
    if (index < 10) {
      return '0' + String(index);
    }

    return String(index);
  });
  var totalHour = new Array(24).toString().split(',').map(function (item, index) {
    if (index < 10) {
      return '0' + String(index);
    }

    return String(index);
  });

  var LHDoubleStringSpinner = function (_React$Component) {
    (0, _inherits2.default)(LHDoubleStringSpinner, _React$Component);

    function LHDoubleStringSpinner() {
      (0, _classCallCheck2.default)(this, LHDoubleStringSpinner);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDoubleStringSpinner).apply(this, arguments));
    }

    (0, _createClass2.default)(LHDoubleStringSpinner, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            height = _this$props.height,
            textColor = _this$props.textColor,
            selectTextColor = _this$props.selectTextColor,
            fontSize = _this$props.fontSize,
            selectFontSize = _this$props.selectFontSize,
            rowHeight = _this$props.rowHeight,
            houtUnit = _this$props.houtUnit,
            minUnit = _this$props.minUnit,
            unitTextColor = _this$props.unitTextColor,
            backgroundColor = _this$props.backgroundColor,
            onHourChanged = _this$props.onHourChanged,
            onMinChanged = _this$props.onMinChanged,
            defaultHourValue = _this$props.defaultHourValue,
            defaultMinValue = _this$props.defaultMinValue;
        var defaultHour = ('0' + defaultHourValue).slice(-2);
        var defaultMin = ('0' + defaultMinValue).slice(-2);
        return _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row',
            height: height
          }
        }, _react.default.createElement(_ui.StringSpinner, {
          style: {
            flex: 1,
            height: height,
            backgroundColor: backgroundColor
          },
          dataSource: totalHour,
          defaultValue: defaultHour,
          pickerInnerStyle: {
            textColor: textColor,
            selectTextColor: selectTextColor,
            fontSize: fontSize,
            selectFontSize: selectFontSize,
            rowHeight: rowHeight,
            unit: houtUnit,
            unitTextColor: unitTextColor
          },
          onValueChanged: function onValueChanged(data) {
            onHourChanged(data);
          }
        }), _react.default.createElement(_ui.StringSpinner, {
          style: {
            height: height,
            flex: 1,
            backgroundColor: backgroundColor
          },
          dataSource: totalMin,
          defaultValue: defaultMin,
          pickerInnerStyle: {
            textColor: textColor,
            selectTextColor: selectTextColor,
            fontSize: fontSize,
            selectFontSize: selectFontSize,
            rowHeight: rowHeight,
            unit: minUnit,
            unitTextColor: unitTextColor
          },
          onValueChanged: function onValueChanged(data) {
            onMinChanged(data);
          }
        }));
      }
    }]);
    return LHDoubleStringSpinner;
  }(_react.default.Component);

  LHDoubleStringSpinner.defaultProps = {
    height: _LHCommonFunction.LHUiUtils.GetPx(264),
    textColor: '#B2B2B2',
    selectTextColor: '#00BEFF',
    fontSize: 21,
    selectFontSize: 28,
    rowHeight: _LHCommonFunction.LHUiUtils.GetPx(70),
    houtUnit: _LHCommonFunction.LHCommonLocalizableString.common_date_hour,
    minUnit: _LHCommonFunction.LHCommonLocalizableString.common_date_minute,
    defaultHourValue: '0',
    defaultMinValue: '0',
    unitTextColor: '#00BEFF',
    backgroundColor: '#ffffff',
    onMinChanged: function onMinChanged() {},
    onHourChanged: function onHourChanged() {}
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHDoubleStringSpinner);

  exports.default = _default;
},10598,[14305,14320,14323,14371,14377,14386,10297,10033,10230,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getStore;

  var _redux = _$$_REQUIRE(_dependencyMap[1]);

  var _reduxPromise = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _Reducers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function getStore() {
    return (0, _redux.createStore)((0, _Reducers.default)(), undefined, (0, _redux.applyMiddleware)(_reduxPromise.default));
  }
},10601,[14305,10214,10604,10613]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = promiseMiddleware;

  var _isPromise = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _fluxStandardAction = _$$_REQUIRE(_dependencyMap[1]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function promiseMiddleware(_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function (action) {
        if (!(0, _fluxStandardAction.isFSA)(action)) {
          return (0, _isPromise.default)(action) ? action.then(dispatch) : next(action);
        }

        return (0, _isPromise.default)(action.payload) ? action.payload.then(function (result) {
          return dispatch(_objectSpread({}, action, {
            payload: result
          }));
        }).catch(function (error) {
          dispatch(_objectSpread({}, action, {
            payload: error,
            error: true
          }));
          return Promise.reject(error);
        }) : next(action);
      };
    };
  }
},10604,[10607,10610]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = isPromise;

  function isPromise(obj) {
    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
  }
},10607,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isFSA = isFSA;
  exports.isError = isError;

  var _lodash = _$$_REQUIRE(_dependencyMap[0]);

  function isFSA(action) {
    return (0, _lodash.isPlainObject)(action) && (0, _lodash.isString)(action.type) && Object.keys(action).every(isValidKey);
  }

  function isError(action) {
    return isFSA(action) && action.error === true;
  }

  function isValidKey(key) {
    return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;
  }
},10610,[11503]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getReducers;

  var _redux = _$$_REQUIRE(_dependencyMap[1]);

  var _GetHubProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _GetHubSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _GuardSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  function getReducers() {
    return (0, _redux.combineReducers)({
      GetHubPropsReducers: _GetHubProps.default,
      GetHubSettingsReducers: _GetHubSettings.default,
      GetGuardSettingsReducers: _GuardSettings.default
    });
  }
},10613,[14305,10214,10616,10727,10733]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reduxActions = _$$_REQUIRE(_dependencyMap[3]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[4]);

  var _ActionTypes = _$$_REQUIRE(_dependencyMap[5]);

  var _handleActions;

  var _default = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_HUB_STATUS, {
    next: function next(state, action) {
      return (0, _extends2.default)({}, state, {
        hubPropsData: action.payload
      });
    },
    throw: function _throw(state) {
      return state;
    }
  }), (0, _defineProperty2.default)(_handleActions, _ActionTypes.ADD_ALARM_PUSH, {
    next: function next(state, action) {
      return (0, _extends2.default)({}, state, {
        alarmArray: action.payload
      });
    },
    throw: function _throw(state) {
      return state;
    }
  }), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SUB_DEVICE_LIST, {
    next: function next(state, action) {
      return (0, _extends2.default)({}, state, {
        subDeviceList: action.payload
      });
    }
  }), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_CORRIDOR_LIGHT, {
    next: function next(state, action) {
      var oldHubPropsData = _LHCommonFunction.CommonMethod.DeepClone(state.hubPropsData, {});

      oldHubPropsData.corridor_light = action.payload;
      return (0, _extends2.default)({}, _LHCommonFunction.CommonMethod.DeepClone(state, {}), {
        hubPropsData: oldHubPropsData
      });
    }
  }), _handleActions), {
    hubPropsData: {
      arming: '',
      rgb: 0,
      night_light_rgb: 0,
      arm_wait_time: 0,
      corridor_light: 'off'
    },
    alarmArray: [],
    subDeviceList: []
  });

  exports.default = _default;
},10616,[14305,14317,14344,10619,10004,10724]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  var _combineActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  exports.combineActions = _combineActions.default;

  var _createAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  exports.createAction = _createAction.default;

  var _createActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  exports.createActions = _createActions.default;

  var _createCurriedAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  exports.createCurriedAction = _createCurriedAction.default;

  var _handleAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  exports.handleAction = _handleAction.default;

  var _handleActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  exports.handleActions = _handleActions.default;

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
},10619,[10622,10643,10652,10700,10706,10712]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = combineActions;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isFunction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _isSymbol = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _isEmpty = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _toString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _isString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _constants = _$$_REQUIRE(_dependencyMap[6]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isValidActionType(type) {
    return (0, _isString.default)(type) || (0, _isFunction.default)(type) || (0, _isSymbol.default)(type);
  }

  function isValidActionTypes(types) {
    if ((0, _isEmpty.default)(types)) {
      return false;
    }

    return types.every(isValidActionType);
  }

  function combineActions() {
    for (var _len = arguments.length, actionsTypes = new Array(_len), _key = 0; _key < _len; _key++) {
      actionsTypes[_key] = arguments[_key];
    }

    (0, _invariant.default)(isValidActionTypes(actionsTypes), 'Expected action types to be strings, symbols, or action creators');
    var combinedActionType = actionsTypes.map(_toString.default).join(_constants.ACTION_TYPE_DELIMITER);
    return {
      toString: function toString() {
        return combinedActionType;
      }
    };
  }
},10622,[13495,10625,10628,10631,10634,10637,10640]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return typeof value === 'function';
  };

  exports.default = _default;
},10625,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return typeof value === 'symbol' || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Symbol]';
  };

  exports.default = _default;
},10628,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return value.length === 0;
  };

  exports.default = _default;
},10631,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return value.toString();
  };

  exports.default = _default;
},10634,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return typeof value === 'string';
  };

  exports.default = _default;
},10637,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.ACTION_TYPE_DELIMITER = exports.DEFAULT_NAMESPACE = undefined;
  var DEFAULT_NAMESPACE = '/';
  exports.DEFAULT_NAMESPACE = DEFAULT_NAMESPACE;
  var ACTION_TYPE_DELIMITER = '||';
  exports.ACTION_TYPE_DELIMITER = ACTION_TYPE_DELIMITER;
},10640,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = createAction;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isFunction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _identity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _isNull = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function createAction(type, payloadCreator, metaCreator) {
    if (payloadCreator === undefined) {
      payloadCreator = _identity.default;
    }

    (0, _invariant.default)((0, _isFunction.default)(payloadCreator) || (0, _isNull.default)(payloadCreator), 'Expected payloadCreator to be a function, undefined or null');
    var finalPayloadCreator = (0, _isNull.default)(payloadCreator) || payloadCreator === _identity.default ? _identity.default : function (head) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return head instanceof Error ? head : payloadCreator.apply(undefined, [head].concat(args));
    };
    var hasMeta = (0, _isFunction.default)(metaCreator);
    var typeString = type.toString();

    var actionCreator = function actionCreator() {
      var payload = finalPayloadCreator.apply(undefined, arguments);
      var action = {
        type: type
      };

      if (payload instanceof Error) {
        action.error = true;
      }

      if (payload !== undefined) {
        action.payload = payload;
      }

      if (hasMeta) {
        action.meta = metaCreator.apply(undefined, arguments);
      }

      return action;
    };

    actionCreator.toString = function () {
      return typeString;
    };

    return actionCreator;
  }
},10643,[13495,10625,10646,10649]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return value;
  };

  exports.default = _default;
},10646,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return value === null;
  };

  exports.default = _default;
},10649,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = createActions;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _isFunction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _identity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _isArray = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _isString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _isNil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getLastElement = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _camelCase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _arrayToObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _flattenActionMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _unflattenActionCreators = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _createAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _constants = _$$_REQUIRE(_dependencyMap[13]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function createActions(actionMap) {
    for (var _len = arguments.length, identityActions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      identityActions[_key - 1] = arguments[_key];
    }

    var options = (0, _isPlainObject.default)((0, _getLastElement.default)(identityActions)) ? identityActions.pop() : {};
    (0, _invariant.default)(identityActions.every(_isString.default) && ((0, _isString.default)(actionMap) || (0, _isPlainObject.default)(actionMap)), 'Expected optional object followed by string action types');

    if ((0, _isString.default)(actionMap)) {
      return actionCreatorsFromIdentityActions([actionMap].concat(identityActions), options);
    }

    return _objectSpread({}, actionCreatorsFromActionMap(actionMap, options), actionCreatorsFromIdentityActions(identityActions, options));
  }

  function actionCreatorsFromActionMap(actionMap, options) {
    var flatActionMap = (0, _flattenActionMap.default)(actionMap, options);
    var flatActionCreators = actionMapToActionCreators(flatActionMap);
    return (0, _unflattenActionCreators.default)(flatActionCreators, options);
  }

  function actionMapToActionCreators(actionMap, _temp) {
    var _ref = _temp === undefined ? {} : _temp,
        prefix = _ref.prefix,
        _ref$namespace = _ref.namespace,
        namespace = _ref$namespace === undefined ? _constants.DEFAULT_NAMESPACE : _ref$namespace;

    function isValidActionMapValue(actionMapValue) {
      if ((0, _isFunction.default)(actionMapValue) || (0, _isNil.default)(actionMapValue)) {
        return true;
      }

      if ((0, _isArray.default)(actionMapValue)) {
        var _actionMapValue$ = actionMapValue[0],
            payload = _actionMapValue$ === undefined ? _identity.default : _actionMapValue$,
            meta = actionMapValue[1];
        return (0, _isFunction.default)(payload) && (0, _isFunction.default)(meta);
      }

      return false;
    }

    return (0, _arrayToObject.default)(Object.keys(actionMap), function (partialActionCreators, type) {
      var _objectSpread2;

      var actionMapValue = actionMap[type];
      (0, _invariant.default)(isValidActionMapValue(actionMapValue), 'Expected function, undefined, null, or array with payload and meta ' + ("functions for " + type));
      var prefixedType = prefix ? "" + prefix + namespace + type : type;
      var actionCreator = (0, _isArray.default)(actionMapValue) ? _createAction.default.apply(undefined, [prefixedType].concat(actionMapValue)) : (0, _createAction.default)(prefixedType, actionMapValue);
      return _objectSpread({}, partialActionCreators, (_objectSpread2 = {}, _objectSpread2[type] = actionCreator, _objectSpread2));
    });
  }

  function actionCreatorsFromIdentityActions(identityActions, options) {
    var actionMap = (0, _arrayToObject.default)(identityActions, function (partialActionMap, type) {
      var _objectSpread3;

      return _objectSpread({}, partialActionMap, (_objectSpread3 = {}, _objectSpread3[type] = _identity.default, _objectSpread3));
    });
    var actionCreators = actionMapToActionCreators(actionMap, options);
    return (0, _arrayToObject.default)(Object.keys(actionCreators), function (partialActionCreators, type) {
      var _objectSpread4;

      return _objectSpread({}, partialActionCreators, (_objectSpread4 = {}, _objectSpread4[(0, _camelCase.default)(type)] = actionCreators[type], _objectSpread4));
    });
  }
},10652,[13495,10655,10625,10646,10658,10637,10661,10664,10667,10679,10682,10697,10643,10640]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    if (typeof value !== 'object' || value === null) return false;
    var proto = value;

    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(value) === proto;
  };

  exports.default = _default;
},10655,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return Array.isArray(value);
  };

  exports.default = _default;
},10658,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return value === null || value === undefined;
  };

  exports.default = _default;
},10661,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(array) {
    return array[array.length - 1];
  };

  exports.default = _default;
},10664,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _toCamelCase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var namespacer = '/';

  var _default = function _default(type) {
    return type.indexOf(namespacer) === -1 ? (0, _toCamelCase.default)(type) : type.split(namespacer).map(_toCamelCase.default).join(namespacer);
  };

  exports.default = _default;
},10667,[10670]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var space = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = toCamelCase;

  function toCamelCase(string) {
    return space(string).replace(/\s(\w)/g, function (matches, letter) {
      return letter.toUpperCase();
    });
  }
},10670,[10673]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var clean = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = toSpaceCase;

  function toSpaceCase(string) {
    return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
      return match ? ' ' + match : '';
    }).trim();
  }
},10673,[10676]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = toNoCase;
  var hasSpace = /\s/;
  var hasSeparator = /(_|-|\.|:)/;
  var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/;

  function toNoCase(string) {
    if (hasSpace.test(string)) return string.toLowerCase();
    if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase();
    if (hasCamel.test(string)) return uncamelize(string).toLowerCase();
    return string.toLowerCase();
  }

  var separatorSplitter = /[\W_]+(.|$)/g;

  function unseparate(string) {
    return string.replace(separatorSplitter, function (m, next) {
      return next ? ' ' + next : '';
    });
  }

  var camelSplitter = /(.)([A-Z]+)/g;

  function uncamelize(string) {
    return string.replace(camelSplitter, function (m, previous, uppers) {
      return previous + ' ' + uppers.toLowerCase().split('').join(' ');
    });
  }
},10676,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(array, callback) {
    return array.reduce(function (partialObject, element) {
      return callback(partialObject, element);
    }, {});
  };

  exports.default = _default;
},10679,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _isPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _flattenWhenNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _default = (0, _flattenWhenNode.default)(_isPlainObject.default);

  exports.default = _default;
},10682,[10655,10685]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _constants = _$$_REQUIRE(_dependencyMap[0]);

  var _ownKeys = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _get = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _default = function _default(predicate) {
    return function flatten(map, _temp, partialFlatMap, partialFlatActionType) {
      var _ref = _temp === undefined ? {} : _temp,
          _ref$namespace = _ref.namespace,
          namespace = _ref$namespace === undefined ? _constants.DEFAULT_NAMESPACE : _ref$namespace,
          prefix = _ref.prefix;

      if (partialFlatMap === undefined) {
        partialFlatMap = {};
      }

      if (partialFlatActionType === undefined) {
        partialFlatActionType = '';
      }

      function connectNamespace(type) {
        var _ref2;

        if (!partialFlatActionType) return type;
        var types = type.toString().split(_constants.ACTION_TYPE_DELIMITER);
        var partials = partialFlatActionType.split(_constants.ACTION_TYPE_DELIMITER);
        return (_ref2 = []).concat.apply(_ref2, partials.map(function (p) {
          return types.map(function (t) {
            return "" + p + namespace + t;
          });
        })).join(_constants.ACTION_TYPE_DELIMITER);
      }

      function connectPrefix(type) {
        if (partialFlatActionType || !prefix || prefix && new RegExp("^" + prefix + namespace).test(type)) {
          return type;
        }

        return "" + prefix + namespace + type;
      }

      (0, _ownKeys.default)(map).forEach(function (type) {
        var nextNamespace = connectPrefix(connectNamespace(type));
        var mapValue = (0, _get.default)(type, map);

        if (predicate(mapValue)) {
          flatten(mapValue, {
            namespace: namespace,
            prefix: prefix
          }, partialFlatMap, nextNamespace);
        } else {
          partialFlatMap[nextNamespace] = mapValue;
        }
      });
      return partialFlatMap;
    };
  };

  exports.default = _default;
},10685,[10640,10688,10694]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = ownKeys;

  var _isMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function ownKeys(object) {
    if ((0, _isMap.default)(object)) {
      return Array.from(object.keys());
    }

    if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
      return Reflect.ownKeys(object);
    }

    var keys = Object.getOwnPropertyNames(object);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      keys = keys.concat(Object.getOwnPropertySymbols(object));
    }

    return keys;
  }
},10688,[10691]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return typeof Map !== 'undefined' && value instanceof Map;
  };

  exports.default = _default;
},10691,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = get;

  var _isMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function get(key, x) {
    return (0, _isMap.default)(x) ? x.get(key) : x[key];
  }
},10694,[10691]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = unflattenActionCreators;

  var _constants = _$$_REQUIRE(_dependencyMap[0]);

  var _isEmpty = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _camelCase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function unflattenActionCreators(flatActionCreators, _temp) {
    var _ref = _temp === undefined ? {} : _temp,
        _ref$namespace = _ref.namespace,
        namespace = _ref$namespace === undefined ? _constants.DEFAULT_NAMESPACE : _ref$namespace,
        prefix = _ref.prefix;

    function unflatten(flatActionType, partialNestedActionCreators, partialFlatActionTypePath) {
      var nextNamespace = (0, _camelCase.default)(partialFlatActionTypePath.shift());

      if ((0, _isEmpty.default)(partialFlatActionTypePath)) {
        partialNestedActionCreators[nextNamespace] = flatActionCreators[flatActionType];
      } else {
        if (!partialNestedActionCreators[nextNamespace]) {
          partialNestedActionCreators[nextNamespace] = {};
        }

        unflatten(flatActionType, partialNestedActionCreators[nextNamespace], partialFlatActionTypePath);
      }
    }

    var nestedActionCreators = {};
    Object.getOwnPropertyNames(flatActionCreators).forEach(function (type) {
      var unprefixedType = prefix ? type.replace("" + prefix + namespace, '') : type;
      return unflatten(type, nestedActionCreators, unprefixedType.split(namespace));
    });
    return nestedActionCreators;
  }
},10697,[10640,10631,10667]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _justCurryIt = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _createAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _default = function _default(type, payloadCreator) {
    return (0, _justCurryIt.default)((0, _createAction.default)(type, payloadCreator), payloadCreator.length);
  };

  exports.default = _default;
},10700,[10703,10643]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = curry;

  function curry(fn, arity) {
    return function curried() {
      if (arity == null) {
        arity = fn.length;
      }

      var args = [].slice.call(arguments);

      if (args.length >= arity) {
        return fn.apply(this, args);
      } else {
        return function () {
          return curried.apply(this, args.concat([].slice.call(arguments)));
        };
      }
    };
  }
},10703,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = handleAction;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isFunction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _isPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _identity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _isNil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _isUndefined = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _toString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _constants = _$$_REQUIRE(_dependencyMap[7]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function handleAction(type, reducer, defaultState) {
    if (reducer === undefined) {
      reducer = _identity.default;
    }

    var types = (0, _toString.default)(type).split(_constants.ACTION_TYPE_DELIMITER);
    (0, _invariant.default)(!(0, _isUndefined.default)(defaultState), "defaultState for reducer handling " + types.join(', ') + " should be defined");
    (0, _invariant.default)((0, _isFunction.default)(reducer) || (0, _isPlainObject.default)(reducer), 'Expected reducer to be a function or object with next and throw reducers');

    var _ref = (0, _isFunction.default)(reducer) ? [reducer, reducer] : [reducer.next, reducer.throw].map(function (aReducer) {
      return (0, _isNil.default)(aReducer) ? _identity.default : aReducer;
    }),
        nextReducer = _ref[0],
        throwReducer = _ref[1];

    return function (state, action) {
      if (state === undefined) {
        state = defaultState;
      }

      var actionType = action.type;

      if (!actionType || types.indexOf((0, _toString.default)(actionType)) === -1) {
        return state;
      }

      return (action.error === true ? throwReducer : nextReducer)(state, action);
    };
  }
},10706,[13495,10625,10655,10646,10661,10709,10634,10640]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _default = function _default(value) {
    return value === undefined;
  };

  exports.default = _default;
},10709,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = handleActions;

  var _reduceReducers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _isPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _isMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ownKeys = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _flattenReducerMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _handleAction = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _get = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function handleActions(handlers, defaultState, options) {
    if (options === undefined) {
      options = {};
    }

    (0, _invariant.default)((0, _isPlainObject.default)(handlers) || (0, _isMap.default)(handlers), 'Expected handlers to be a plain object.');
    var flattenedReducerMap = (0, _flattenReducerMap.default)(handlers, options);
    var reducers = (0, _ownKeys.default)(flattenedReducerMap).map(function (type) {
      return (0, _handleAction.default)(type, (0, _get.default)(type, flattenedReducerMap), defaultState);
    });

    var reducer = _reduceReducers.default.apply(undefined, reducers.concat([defaultState]));

    return function (state, action) {
      if (state === undefined) {
        state = defaultState;
      }

      return reducer(state, action);
    };
  }
},10712,[10715,13495,10655,10691,10688,10718,10706,10694]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var initialState = typeof args[args.length - 1] !== 'function' && args.pop();
    var reducers = args;

    if (typeof initialState === 'undefined') {
      throw new TypeError('The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.');
    }

    return function (prevState, value) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var prevStateIsUndefined = typeof prevState === 'undefined';
      var valueIsUndefined = typeof value === 'undefined';

      if (prevStateIsUndefined && valueIsUndefined && initialState) {
        return initialState;
      }

      return reducers.reduce(function (newState, reducer) {
        return reducer.apply(undefined, [newState, value].concat(args));
      }, prevStateIsUndefined && !valueIsUndefined && initialState ? initialState : prevState);
    };
  };

  module.exports = exports['default'];
},10715,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = undefined;

  var _isPlainObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isMap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _hasGeneratorInterface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _flattenWhenNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _default = (0, _flattenWhenNode.default)(function (node) {
    return ((0, _isPlainObject.default)(node) || (0, _isMap.default)(node)) && !(0, _hasGeneratorInterface.default)(node);
  });

  exports.default = _default;
},10718,[10655,10691,10721,10685]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports.default = hasGeneratorInterface;

  var _ownKeys = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function hasGeneratorInterface(handler) {
    var keys = (0, _ownKeys.default)(handler);
    var hasOnlyInterfaceNames = keys.every(function (ownKey) {
      return ownKey === 'next' || ownKey === 'throw';
    });
    return keys.length && keys.length <= 2 && hasOnlyInterfaceNames;
  }
},10721,[10688]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GET_GATEWAY_LANGUAGE_CACHE = exports.GET_MISTAKEN_DELETE_CACHE = exports.GET_DOORBELL_TONE_CACHE = exports.GET_HUB_SETTING_CACHE = exports.SET_CORRIDOR_LIGHT = exports.GET_ARM_RING_CACHE = exports.SET_ARM_RING = exports.GET_ARM_RING = exports.SET_ARM_LIGHT_TIME_LEN = exports.SET_ARM_SOUND_TIME_LEN = exports.SET_ARM_VOLUME = exports.SET_ARM_WAIT_TIME = exports.GET_ARM_PROP_CACHE = exports.GET_ARM_PROP = exports.SET_GATEWAY_LANGUAGE = exports.GET_GATEWAY_LANGUAGE = exports.SET_MISTAKEN_DELETE = exports.GET_MISTAKEN_DELETE = exports.SET_DOORBELL_PUSH = exports.GET_DOORBELL_PUSH = exports.SET_BOORBELL_TONE = exports.SET_ARMING_VOLUME = exports.SET_GATEWAY_VOLUME = exports.SET_DOORBELL_VOLUME = exports.GET_DOORBELL_TONE = exports.GET_HUB_SETTING = exports.SUB_DEVICE_LIST = exports.ADD_ALARM_PUSH = exports.GET_HUB_STATUS = undefined;
  var GET_HUB_STATUS = 'GET_HUB_STATUS';
  exports.GET_HUB_STATUS = GET_HUB_STATUS;
  var ADD_ALARM_PUSH = 'ADD_ALARM_PUSH';
  exports.ADD_ALARM_PUSH = ADD_ALARM_PUSH;
  var SUB_DEVICE_LIST = 'SUB_DEVICE_LIST';
  exports.SUB_DEVICE_LIST = SUB_DEVICE_LIST;
  var GET_HUB_SETTING = 'GET_HUB_SETTING';
  exports.GET_HUB_SETTING = GET_HUB_SETTING;
  var GET_DOORBELL_TONE = 'GET_DOORBELL_TONE';
  exports.GET_DOORBELL_TONE = GET_DOORBELL_TONE;
  var SET_BOORBELL_TONE = 'SET_BOORBELL_TONE';
  exports.SET_BOORBELL_TONE = SET_BOORBELL_TONE;
  var SET_DOORBELL_VOLUME = 'SET_DOORBELL_VOLUME';
  exports.SET_DOORBELL_VOLUME = SET_DOORBELL_VOLUME;
  var SET_GATEWAY_VOLUME = 'SET_GATEWAY_VOLUME';
  exports.SET_GATEWAY_VOLUME = SET_GATEWAY_VOLUME;
  var SET_ARMING_VOLUME = 'SET_ARMING_VOLUME';
  exports.SET_ARMING_VOLUME = SET_ARMING_VOLUME;
  var GET_DOORBELL_PUSH = 'GET_DOORBELL_PUSH';
  exports.GET_DOORBELL_PUSH = GET_DOORBELL_PUSH;
  var SET_DOORBELL_PUSH = 'SET_DOORBELL_PUSH';
  exports.SET_DOORBELL_PUSH = SET_DOORBELL_PUSH;
  var GET_MISTAKEN_DELETE = 'GET_MISTAKEN_DELETE';
  exports.GET_MISTAKEN_DELETE = GET_MISTAKEN_DELETE;
  var SET_MISTAKEN_DELETE = 'SET_MISTAKEN_DELETE';
  exports.SET_MISTAKEN_DELETE = SET_MISTAKEN_DELETE;
  var GET_GATEWAY_LANGUAGE = 'GET_GATEWAY_LANGUAGE';
  exports.GET_GATEWAY_LANGUAGE = GET_GATEWAY_LANGUAGE;
  var SET_GATEWAY_LANGUAGE = 'SET_GATEWAY_LANGUAGE';
  exports.SET_GATEWAY_LANGUAGE = SET_GATEWAY_LANGUAGE;
  var SET_CORRIDOR_LIGHT = 'SET_CORRIDOR_LIGHT';
  exports.SET_CORRIDOR_LIGHT = SET_CORRIDOR_LIGHT;
  var GET_HUB_SETTING_CACHE = 'GET_HUB_SETTING_CACHE';
  exports.GET_HUB_SETTING_CACHE = GET_HUB_SETTING_CACHE;
  var GET_DOORBELL_TONE_CACHE = 'GET_DOORBELL_TONE_CACHE';
  exports.GET_DOORBELL_TONE_CACHE = GET_DOORBELL_TONE_CACHE;
  var GET_MISTAKEN_DELETE_CACHE = 'GET_MISTAKEN_DELETE_CACHE';
  exports.GET_MISTAKEN_DELETE_CACHE = GET_MISTAKEN_DELETE_CACHE;
  var GET_GATEWAY_LANGUAGE_CACHE = 'GET_GATEWAY_LANGUAGE_CACHE';
  exports.GET_GATEWAY_LANGUAGE_CACHE = GET_GATEWAY_LANGUAGE_CACHE;
  var GET_ARM_PROP = 'GET_ARM_PROP';
  exports.GET_ARM_PROP = GET_ARM_PROP;
  var GET_ARM_PROP_CACHE = 'GET_ARM_PROP_CACHE';
  exports.GET_ARM_PROP_CACHE = GET_ARM_PROP_CACHE;
  var SET_ARM_WAIT_TIME = 'SET_ARM_WAIT_TIME';
  exports.SET_ARM_WAIT_TIME = SET_ARM_WAIT_TIME;
  var SET_ARM_VOLUME = 'SET_ARM_VOLUME';
  exports.SET_ARM_VOLUME = SET_ARM_VOLUME;
  var SET_ARM_SOUND_TIME_LEN = 'SET_ARM_SOUND_TIME_LEN';
  exports.SET_ARM_SOUND_TIME_LEN = SET_ARM_SOUND_TIME_LEN;
  var SET_ARM_LIGHT_TIME_LEN = 'SET_ARM_LIGHT_TIME_LEN';
  exports.SET_ARM_LIGHT_TIME_LEN = SET_ARM_LIGHT_TIME_LEN;
  var GET_ARM_RING = 'GET_ARM_RING';
  exports.GET_ARM_RING = GET_ARM_RING;
  var SET_ARM_RING = 'SET_ARM_RING';
  exports.SET_ARM_RING = SET_ARM_RING;
  var GET_ARM_RING_CACHE = 'GET_ARM_RING_CACHE';
  exports.GET_ARM_RING_CACHE = GET_ARM_RING_CACHE;
},10724,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reduxActions = _$$_REQUIRE(_dependencyMap[4]);

  var _ActionTypes = _$$_REQUIRE(_dependencyMap[5]);

  var _LHDeviceProfile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _handleActions;

  var defaultSetting = {
    gateway_lang: _LHDeviceProfile.default.getDefaultLanguage(),
    used_for_public: true,
    gateway_volume: 50,
    alarming_volume: 100,
    doorbell_volume: 50,
    doorbell_push: 'off',
    doorBellTone: '10',
    doorbellToneList: []
  };
  var updateSettingData = {
    next: function next(state, action) {
      var hubSettingData = state.hubSettingData;
      return (0, _extends2.default)({}, state, {
        hubSettingData: (0, _extends2.default)({}, hubSettingData, action.payload)
      });
    }
  };
  var updateSettingCacheData = {
    next: function next(state, action) {
      if (!action.payload) {
        return (0, _extends2.default)({}, state);
      } else {
        return updateSettingData.next(state, action);
      }
    }
  };

  var _default = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_HUB_SETTING, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_DOORBELL_TONE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_DOORBELL_VOLUME, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_BOORBELL_TONE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_GATEWAY_VOLUME, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_ARMING_VOLUME, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_DOORBELL_PUSH, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_MISTAKEN_DELETE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_MISTAKEN_DELETE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_GATEWAY_LANGUAGE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_GATEWAY_LANGUAGE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_HUB_SETTING_CACHE, updateSettingCacheData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_DOORBELL_TONE_CACHE, updateSettingCacheData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_MISTAKEN_DELETE_CACHE, updateSettingCacheData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_GATEWAY_LANGUAGE_CACHE, updateSettingCacheData), _handleActions), {
    hubSettingData: (0, _objectSpread2.default)({}, defaultSetting)
  });

  exports.default = _default;
},10727,[14305,14314,14317,14344,10619,10724,10730]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var kDeviceModelGateWayV3 = 'lumi.gateway.v3';
  var kDeviceModelGateWayMiEuZeroOne = 'lumi.gateway.mieu01';
  var kDeviceModelGateWayMiHkZeroOne = 'lumi.gateway.mihk01';
  var kDeviceModelGateWayMiTwZeroOne = 'lumi.gateway.mitw01';
  var kDeviceModelGateWayMiUkZeroOne = 'lumi.gateway.lmuk01';
  var kDeviceModelGateWayHomeKitCnZeroOne = 'lumi.gateway.aqhm01';
  var kDeviceModelGateWayHomeKitUsZeroOne = 'lumi.gateway.aqhm02';

  var LHDeviceProfile = function (_React$Component) {
    (0, _inherits2.default)(LHDeviceProfile, _React$Component);

    function LHDeviceProfile() {
      (0, _classCallCheck2.default)(this, LHDeviceProfile);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDeviceProfile).apply(this, arguments));
    }

    (0, _createClass2.default)(LHDeviceProfile, null, [{
      key: "isMijiaHubOverseaDevice",
      value: function isMijiaHubOverseaDevice() {
        var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _miot.Device.model;

        if (model === kDeviceModelGateWayMiEuZeroOne || model === kDeviceModelGateWayMiHkZeroOne || model === kDeviceModelGateWayMiTwZeroOne || model === kDeviceModelGateWayMiUkZeroOne) {
          return true;
        }

        return false;
      }
    }, {
      key: "isOverseasHubWithModel",
      value: function isOverseasHubWithModel() {
        var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _miot.Device.model;

        if (LHDeviceProfile.isMijiaHubOverseaDevice(model) || model === kDeviceModelGateWayHomeKitUsZeroOne) {
          return true;
        }

        return false;
      }
    }, {
      key: "isSupportLanguageConfig",
      value: function isSupportLanguageConfig() {
        var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _miot.Device.model;

        if (model === kDeviceModelGateWayMiEuZeroOne || model === kDeviceModelGateWayMiHkZeroOne || model === kDeviceModelGateWayMiTwZeroOne || model === kDeviceModelGateWayMiUkZeroOne || model === kDeviceModelGateWayHomeKitCnZeroOne || model === kDeviceModelGateWayHomeKitUsZeroOne) {
          return true;
        }

        return false;
      }
    }, {
      key: "getSupportLanguage",
      value: function getSupportLanguage() {
        var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _miot.Device.model;
        return [{
          key: 'cn',
          value: ['cn', 'ch'],
          title: '中文'
        }, {
          key: 'hk',
          title: '中文（粤语）'
        }, {
          key: 'us',
          title: 'English'
        }, {
          key: 'esp',
          title: 'Español'
        }, {
          key: 'rus',
          title: 'Pусский'
        }];
      }
    }, {
      key: "getCurrentLanguageName",
      value: function getCurrentLanguageName(lang) {
        var models = this.getLanguageModels(lang);
        var name = '';
        models.some(function (item) {
          var isCurrent = item.isCurrent,
              title = item.title;
          if (isCurrent) name = title;
          return isCurrent;
        });
        return name;
      }
    }, {
      key: "getLanguageModels",
      value: function getLanguageModels(activeLang) {
        var langList = LHDeviceProfile.getSupportLanguage();
        return langList.map(function (item) {
          var isCurrent = Array.isArray(item.value) && !!item.value.find(function (a) {
            return activeLang === a;
          }) || activeLang === item.key;
          return (0, _extends2.default)({}, item, {
            isCurrent: isCurrent
          });
        });
      }
    }, {
      key: "getDefaultLanguage",
      value: function getDefaultLanguage() {
        var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _miot.Device.model;

        if (model === kDeviceModelGateWayMiHkZeroOne) {
          return 'hk';
        }

        if (model === kDeviceModelGateWayMiEuZeroOne || model === kDeviceModelGateWayMiUkZeroOne || model === kDeviceModelGateWayHomeKitUsZeroOne) {
          return 'us';
        }

        return 'cn';
      }
    }, {
      key: "isSupportPreventMistakenDelete",
      value: function isSupportPreventMistakenDelete() {
        var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _miot.Device.model;
        return model === kDeviceModelGateWayV3;
      }
    }, {
      key: "getHubSettings",
      value: function getHubSettings() {
        var settingPropsArray = ['doorbell_volume', 'gateway_volume', 'alarming_volume', 'doorbell_push'];

        if (LHDeviceProfile.isSupportLanguageConfig()) {
          settingPropsArray.push('gateway_lang');
        }

        var propsData = {};
        return _LHCommonFunction.LHMiServer.SendRPCPayload('get_prop', settingPropsArray).then(function (res) {
          if (res.result.length === settingPropsArray.length) {
            for (var i = 0; i < res.result.length; i += 1) {
              propsData[settingPropsArray[i]] = res.result[i];
            }

            return propsData;
          } else {
            throw new Error('Invalid response length of getting settings');
          }
        });
      }
    }]);
    return LHDeviceProfile;
  }(_react.default.Component);

  var _default = LHDeviceProfile;
  exports.default = _default;
},10730,[14305,14344,14320,14323,14371,14377,14386,10297,10004,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reduxActions = _$$_REQUIRE(_dependencyMap[3]);

  var _ActionTypes = _$$_REQUIRE(_dependencyMap[4]);

  var _handleActions;

  var defaultSetting = {
    armWaitTime: 0,
    armVolume: 100,
    armSoundTimeLen: 30,
    armLightTimeLen: 0,
    armRingIndex: 0,
    armRingList: []
  };
  var updateSettingData = {
    next: function next(state, action) {
      return (0, _extends2.default)({}, state, action.payload);
    },
    throw: function _throw(state) {
      return state;
    }
  };

  var _default = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_ARM_PROP, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_ARM_PROP_CACHE, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_ARM_WAIT_TIME, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_ARM_VOLUME, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_ARM_SOUND_TIME_LEN, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_ARM_LIGHT_TIME_LEN, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_ARM_RING, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.SET_ARM_RING, updateSettingData), (0, _defineProperty2.default)(_handleActions, _ActionTypes.GET_ARM_RING_CACHE, updateSettingData), _handleActions), defaultSetting);

  exports.default = _default;
},10733,[14305,14317,14344,10619,10724]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[11]);

  var _redux = _$$_REQUIRE(_dependencyMap[12]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[13]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[14]);

  var _reactNativeScrollableTabView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _CustomTabBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _LHGuardPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _LHColouredLightPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _GetHubProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _LHGatewayLogHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _LHColorUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var msgSubscription = null;
  var subscriptionListener;
  var showGuideModal = {
    showGuard: true,
    showLight: true
  };
  var guideModalKey = 'showGuideModal_' + _miot.Service.account.ID;

  var isShared = _LHCommonFunction.LHDeviceAuthorityUtils.isShared();

  var isOnline = _miot.Device.isOnline;
  var DeviceInfo = {
    deviceHeight: 0
  };
  var pageStatus = {
    isCurrPage: true
  };
  var expireTime = 8640000000;
  var mInstance;

  var LHMainPage = function (_React$Component) {
    (0, _inherits2.default)(LHMainPage, _React$Component);

    function LHMainPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHMainPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHMainPage).call(this, props));

      _this.removeCustomListener = function () {
        if (_this.authorizationCancelListener) _this.authorizationCancelListener.remove();
        if (_this.deviceNameChangedListener) _this.deviceNameChangedListener.remove();
        if (msgSubscription) msgSubscription.remove();
        if (subscriptionListener) subscriptionListener.remove();
        if (_this.didBlurSubscription) _this.didBlurSubscription.remove();
        if (_this.didFocusSuscription) _this.didFocusSuscription.remove();
      };

      _this.loadHubProps = function () {
        var GetHubProps = _this.props.GetHubProps;
        GetHubProps().then(function () {
          var GetHubPropsReducers = _this.props.GetHubPropsReducers;

          _this.setState({
            armingStatus: GetHubPropsReducers.hubPropsData.arming,
            lightRgb: GetHubPropsReducers.hubPropsData.night_light_rgb,
            corridorLightValue: GetHubPropsReducers.hubPropsData.corridor_light,
            rgb: GetHubPropsReducers.hubPropsData.rgb
          });

          _LHCacheUtils.default.saveMainPageCache({
            guardStatus: GetHubPropsReducers.hubPropsData.arming,
            lightRgb: GetHubPropsReducers.hubPropsData.rgb,
            rgbValue: GetHubPropsReducers.hubPropsData.night_light_rgb,
            corridorLightValue: GetHubPropsReducers.hubPropsData.corridor_light
          });
        }, function () {
          _LHCacheUtils.default.getMainPageCache(function (res) {
            _this.setState({
              armingStatus: res.guardStatus,
              lightRgb: res.rgbValue,
              corridorLightValue: res.corridorLightValue,
              nightlightDeviceStatu: res.nightlightDeviceStatu,
              rgb: res.lightRgb
            });
          });
        });
      };

      _this.fetchLatestLog = function () {
        var GetSubDeviceList = _this.props.GetSubDeviceList;
        GetSubDeviceList().then(function () {
          _this.setState({
            latestLog: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
          });

          _LHCommonFunction.LHLogUtils.GetLatestDeviceLog().then(function (res) {
            var value = res.value,
                time = res.time;
            var logValue = JSON.parse(value);

            if (logValue && logValue.length > 0) {
              _this.showLogInfo(JSON.parse(logValue[0]), time);
            } else {
              _this.loadCacheLog();
            }
          }).catch(function () {
            _this.loadCacheLog();
          });
        }, function () {
          _this.loadCacheLog();
        });
      };

      _this.loadCacheLog = function () {
        _LHCacheUtils.default.getMainPageCache(function (res) {
          _this.setState({
            latestLog: res.cacheLog
          });
        });
      };

      _this.showLogInfo = function (value, time) {
        var GetHubPropsReducers = _this.props.GetHubPropsReducers;

        var logString = _LHGatewayLogHandler.default.lumiGatewayAlarmLog(value, GetHubPropsReducers.subDeviceList);

        var LogInfo = logString.length ? _LHCommonFunction.LHDateUtils.GetHomeLogTime(time) + ' ' + logString : undefined;

        _this.setState({
          latestLog: LogInfo
        });

        _LHCacheUtils.default.saveMainPageCache({
          cacheLog: LogInfo
        });
      };

      _this.showAlarmInfo = function (item) {
        var _this$props = _this.props,
            GetHubPropsReducers = _this$props.GetHubPropsReducers,
            AddAlarmPush = _this$props.AddAlarmPush;
        var alarmArray = GetHubPropsReducers.alarmArray;

        var title = _LHGatewayLogHandler.default.localizedEvent(item.key);

        var detail = _LHCommonFunction.LHDateUtils.GetHomeLogTime(item.time) + ' ' + _LHGatewayLogHandler.default.getDeviceName(item.value[0], GetHubPropsReducers.subDeviceList);

        var alarmInfo = (0, _extends2.default)({}, {
          title: title,
          detail: detail
        });
        alarmArray.push(alarmInfo);

        _this.setState({
          showAlarm: true,
          alarmDetail: alarmInfo
        });

        AddAlarmPush(alarmArray);
      };

      _this.checkModal = function () {
        if (!_miot.Device.isOnline || isShared) {
          _this.initMainPage();

          return;
        }

        _this.initMainPage();
      };

      _this.buildSensorSetIFTTT = function () {
        _LHCommonFunction.LHSensorSetIFTTTManager.buildSensorSetIFTTT(function () {}, function () {});
      };

      _this.checkGuideStorage = function () {
        _LHCommonFunction.LHMiServer.GetHostStorage(guideModalKey).then(function (res) {
          if (!pageStatus.isCurrPage) {
            _this.initMainPage();

            return;
          }

          (0, _extends2.default)(showGuideModal, res || {
            showGuard: false,
            showLight: false
          });

          _this.initMainPage();
        }).catch(function () {
          (0, _extends2.default)(showGuideModal, {
            showGuard: false,
            showLight: false
          });

          _this.initMainPage();
        });
      };

      _this.initMainPage = function () {
        var navigation = _this.props.navigation;

        _this.addDeviceNameChangedListener();

        _this.loadHubProps();

        _this.startSubscribe();

        _this.fetchLatestLog();

        _this.didFocusSuscription = navigation.addListener('didFocus', function () {
          _this.loadHubProps();

          _this.fetchLatestLog();
        });
      };

      _this.startSubscribe = function () {
        _miot.Device.getDeviceWifi().subscribeMessages('prop.rgb', 'prop.night_light_rgb', 'prop.device_log', 'prop.arming', 'event.arming_magnet_open', 'event.arming_motion_motion', 'event.arming_switch_click', 'event.arming_cube_alert', 'event.arming_vibration_vibrate').then(function (subcription) {
          msgSubscription = subcription;
        });

        subscriptionListener = _miot.DeviceEvent.deviceReceivedMessages.addListener(function (device, messages, originData) {
          var navigation = _this.props.navigation;
          var currTab = _this.state.currTab;

          for (var i = 0; i < originData.length; i += 1) {
            var dataItem = originData[i];

            switch (dataItem.key) {
              case 'prop.arming':
                _this.setState({
                  armingStatus: dataItem.value[0]
                });

                navigation.setParams({
                  bgColor: currTab === 0 && dataItem.value[0] === 'off' ? '#F2F2F2' : '#F5F9FC'
                });
                break;

              case 'prop.device_log':
                _this.showLogInfo(JSON.parse(dataItem.value[0]), dataItem.time);

                break;

              case 'prop.night_light_rgb':
                _this.setState({
                  lightRgb: dataItem.value[0]
                });

                break;

              case 'prop.rgb':
                _this.setState({
                  rgb: dataItem.value[0]
                });

                break;

              default:
                _this.showAlarmInfo(dataItem);

                break;
            }
          }
        });
      };

      _this.changeAlarm = function () {
        _this.setState({
          showAlarm: false,
          alarmDetail: {}
        });
      };

      _this.changeTabPage = function (number) {
        _this.storageGuideKey(number === 1 ? {
          showGuard: true
        } : {
          showLight: true
        });

        _this.scrollView.goToPage(number);
      };

      _this.storageGuideKey = function (guideKeyObj) {
        var gudideStatus = (0, _extends2.default)(showGuideModal, guideKeyObj);

        _LHCommonFunction.LHMiServer.SetHostStorage(guideModalKey, gudideStatus, {
          expire: expireTime
        });
      };

      _this.changeBgColor = function (status) {
        var navigation = _this.props.navigation;

        _this.setState({
          armingStatus: status
        });

        navigation.setParams({
          bgColor: status === 'off' ? '#F2F2F2' : '#F5F9FC'
        });
      };

      _this.changeTabListener = function (obj) {
        var navigation = _this.props.navigation;
        var armingStatus = _this.state.armingStatus;

        if (obj.i === 1) {
          navigation.setParams({
            bgColor: '#F5F9FC'
          });
        } else {
          navigation.setParams({
            bgColor: armingStatus === 'off' ? '#F2F2F2' : '#F5F9FC'
          });
        }

        _this.setState({
          currTab: obj.i
        });
      };

      mInstance = (0, _assertThisInitialized2.default)(_this);
      _this.state = {
        armingStatus: 'off',
        lightRgb: _LHColorUtils.default.colorRGB2Hex('rgb(255,255,255)', 50),
        rgb: 0,
        showAlarm: false,
        latestLog: _LHCommonFunction.LHCommonLocalizableString.common_log_no_logs,
        corridorLightValue: 'off',
        nightlightDeviceStatu: 0,
        alarmDetail: {},
        currTab: 0
      };
      return _this;
    }

    (0, _createClass2.default)(LHMainPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        _LHCommonFunction.LHDeviceUtils.GetPhoneScreenHeight(function (heightStr) {
          DeviceInfo.deviceHeight = heightStr;
        });

        this.checkAuthorization();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var navigation = this.props.navigation;
        this.didBlurSubscription = navigation.addListener('didBlur', function () {
          if (!showGuideModal.showGuard) {
            (0, _extends2.default)(showGuideModal, {
              showGuard: true,
              showLight: true
            });
          }

          pageStatus.isCurrPage = false;
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.removeCustomListener();
      }
    }, {
      key: "checkAuthorization",
      value: function checkAuthorization() {
        var _this2 = this;

        this.authorizationCancelListener = _LHCommonFunction.LHAuthorizationUtils.Authorization({
          licenseTitle: _LHCommonFunction.LHCommonLocalizableString.common_setting_user_agreement,
          policyResource: _Resources.default.PolicyLicense,
          policyTitle: _LHCommonFunction.LHCommonLocalizableString.common_setting_privacy_policy,
          authorizationSucc: function authorizationSucc() {
            if (!isOnline) {
              return;
            }

            _this2.checkModal();

            _this2.buildSensorSetIFTTT();
          }
        });
      }
    }, {
      key: "addDeviceNameChangedListener",
      value: function addDeviceNameChangedListener() {
        var _this3 = this;

        this.deviceNameChangedListener = _miot.DeviceEvent.deviceNameChanged.addListener(function (event) {
          var navigation = _this3.props.navigation;
          navigation.setParams({
            deviceName: event.name
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var _this$props2 = this.props,
            navigation = _this$props2.navigation,
            GetHubPropsReducers = _this$props2.GetHubPropsReducers,
            AddAlarmPush = _this$props2.AddAlarmPush,
            SetCorridorLight = _this$props2.SetCorridorLight;
        var _this$state = this.state,
            showAlarm = _this$state.showAlarm,
            alarmDetail = _this$state.alarmDetail,
            armingStatus = _this$state.armingStatus,
            lightRgb = _this$state.lightRgb,
            latestLog = _this$state.latestLog,
            corridorLightValue = _this$state.corridorLightValue,
            nightlightDeviceStatu = _this$state.nightlightDeviceStatu,
            rgb = _this$state.rgb,
            currTab = _this$state.currTab;
        return _react.default.createElement(_reactNative.View, {
          testID: "mainPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('mainPage'),
          style: {
            flex: 1,
            backgroundColor: armingStatus === 'off' && currTab === 0 ? '#F2F2F2' : '#F5F9FC'
          }
        }, _react.default.createElement(_reactNativeScrollableTabView.default, {
          initialPage: 0,
          ref: function ref(e) {
            _this4.scrollView = e;
          },
          style: {
            height: _LHCommonFunction.LHUiUtils.GetPx(45)
          },
          locked: true,
          onChangeTab: this.changeTabListener,
          renderTabBar: function renderTabBar() {
            return _react.default.createElement(_CustomTabBar.default, {
              activeColor: "#1B9BEB",
              inactiveColor: "#999999"
            });
          }
        }, _react.default.createElement(_LHGuardPage.default, {
          ref: function ref(e) {
            _this4.guardPage = e;
          },
          testID: "guardPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('guardPage'),
          showAlarm: showAlarm,
          subLog: latestLog,
          GetHubPropsReducers: GetHubPropsReducers,
          AddAlarmPush: AddAlarmPush,
          changeAlarm: this.changeAlarm,
          changeTabPage: this.changeTabPage,
          alarmDetail: alarmDetail,
          showGuard: showGuideModal.showGuard,
          navigation: navigation,
          guardStatus: armingStatus,
          changeGuardStatus: this.changeBgColor,
          deviceHeight: DeviceInfo.deviceHeight,
          tabLabel: _LHLocalizableString.default.mi_linuxHub_home_tab_guard
        }), _react.default.createElement(_LHColouredLightPage.default, {
          ref: function ref(e) {
            _this4.lightPage = e;
          },
          testID: "colouredLightPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('colouredLightPage'),
          navigation: navigation,
          lightStatus: lightRgb,
          lightRgb: rgb,
          GetHubPropsReducers: GetHubPropsReducers,
          SetCorridorLight: SetCorridorLight,
          showLight: showGuideModal.showLight,
          changeTabPage: this.changeTabPage,
          corridorLightValue: corridorLightValue,
          nightlightDeviceStatu: nightlightDeviceStatu,
          deviceHeight: DeviceInfo.deviceHeight,
          tabLabel: _LHLocalizableString.default.mi_linuxHub_home_tab_coloured_light
        })));
      }
    }]);
    return LHMainPage;
  }(_react.default.Component);

  LHMainPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var deviceName = navigation.getParam('deviceName');
    var bgColor = navigation.getParam('bgColor');
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: deviceName || _miot.Device.name,
        style: [_LHCommonStyle.default.navigatorWithoutBorderBotoom, {
          backgroundColor: bgColor || '#F5F9FC'
        }],
        onPressLeft: function onPressLeft() {
          mInstance.removeCustomListener();

          _miot.Package.exit();
        },
        rightButtons: [{
          type: 'deafultMoreBtn',
          press: function press() {
            navigation.navigate('LHSettingPage');
          }
        }]
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubPropsReducers: state.GetHubPropsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubProps.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHMainPage));

  exports.default = _default;
},10736,[14305,14344,14320,14323,14371,14377,14374,14386,10297,10033,10074,10184,10214,10004,10178,10739,10757,11183,11234,11237,11240,11261,11279,11282,11252,11255]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var React = _$$_REQUIRE(_dependencyMap[2]);

  var Component = React.Component;

  var _ReactNative = ReactNative = _$$_REQUIRE(_dependencyMap[3]),
      ViewPropTypes = _ReactNative.ViewPropTypes;

  var createReactClass = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var _ReactNative2 = ReactNative,
      Dimensions = _ReactNative2.Dimensions,
      View = _ReactNative2.View,
      Animated = _ReactNative2.Animated,
      ScrollView = _ReactNative2.ScrollView,
      Platform = _ReactNative2.Platform,
      StyleSheet = _ReactNative2.StyleSheet,
      ViewPagerAndroid = _ReactNative2.ViewPagerAndroid,
      InteractionManager = _ReactNative2.InteractionManager;

  var TimerMixin = _$$_REQUIRE(_dependencyMap[6]);

  var SceneComponent = _$$_REQUIRE(_dependencyMap[7]);

  var DefaultTabBar = _$$_REQUIRE(_dependencyMap[8]);

  var ScrollableTabBar = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedViewPagerAndroid = Animated.createAnimatedComponent(ViewPagerAndroid);
  var ScrollableTabView = createReactClass({
    displayName: "ScrollableTabView",
    mixins: [TimerMixin],
    statics: {
      DefaultTabBar: DefaultTabBar,
      ScrollableTabBar: ScrollableTabBar
    },
    scrollOnMountCalled: false,
    propTypes: {
      tabBarPosition: PropTypes.oneOf(['top', 'bottom', 'overlayTop', 'overlayBottom']),
      initialPage: PropTypes.number,
      page: PropTypes.number,
      onChangeTab: PropTypes.func,
      onScroll: PropTypes.func,
      renderTabBar: PropTypes.any,
      style: ViewPropTypes.style,
      contentProps: PropTypes.object,
      scrollWithoutAnimation: PropTypes.bool,
      locked: PropTypes.bool,
      prerenderingSiblingsNumber: PropTypes.number
    },
    getDefaultProps: function getDefaultProps() {
      return {
        tabBarPosition: 'top',
        initialPage: 0,
        page: -1,
        onChangeTab: function onChangeTab() {},
        onScroll: function onScroll() {},
        contentProps: {},
        scrollWithoutAnimation: false,
        locked: false,
        prerenderingSiblingsNumber: 0
      };
    },
    getInitialState: function getInitialState() {
      var _this = this;

      var containerWidth = Dimensions.get('window').width;
      var scrollValue;
      var scrollXIOS;
      var positionAndroid;
      var offsetAndroid;
      {
        positionAndroid = new Animated.Value(this.props.initialPage);
        offsetAndroid = new Animated.Value(0);
        scrollValue = Animated.add(positionAndroid, offsetAndroid);

        var _callListeners = this._polyfillAnimatedValue(scrollValue);

        var positionAndroidValue = this.props.initialPage;
        var offsetAndroidValue = 0;
        positionAndroid.addListener(function (_ref2) {
          var value = _ref2.value;
          positionAndroidValue = value;

          _callListeners(positionAndroidValue + offsetAndroidValue);
        });
        offsetAndroid.addListener(function (_ref3) {
          var value = _ref3.value;
          offsetAndroidValue = value;

          _callListeners(positionAndroidValue + offsetAndroidValue);
        });
      }
      return {
        currentPage: this.props.initialPage,
        scrollValue: scrollValue,
        scrollXIOS: scrollXIOS,
        positionAndroid: positionAndroid,
        offsetAndroid: offsetAndroid,
        containerWidth: containerWidth,
        sceneKeys: this.newSceneKeys({
          currentPage: this.props.initialPage
        })
      };
    },
    componentWillReceiveProps: function componentWillReceiveProps(props) {
      if (props.children !== this.props.children) {
        this.updateSceneKeys({
          page: this.state.currentPage,
          children: props.children
        });
      }

      if (props.page >= 0 && props.page !== this.state.currentPage) {
        this.goToPage(props.page);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      {
        this.state.positionAndroid.removeAllListeners();
        this.state.offsetAndroid.removeAllListeners();
      }
    },
    goToPage: function goToPage(pageNumber) {
      {
        if (this.scrollView) {
          if (this.props.scrollWithoutAnimation) {
            this.scrollView.getNode().setPageWithoutAnimation(pageNumber);
          } else {
            this.scrollView.getNode().setPage(pageNumber);
          }
        }
      }
      var currentPage = this.state.currentPage;
      this.updateSceneKeys({
        page: pageNumber,
        callback: this._onChangeTab.bind(this, currentPage, pageNumber)
      });
    },
    renderTabBar: function renderTabBar(props) {
      if (this.props.renderTabBar === false) {
        return null;
      } else if (this.props.renderTabBar) {
        return React.cloneElement(this.props.renderTabBar(props), props);
      } else {
        return React.createElement(DefaultTabBar, props);
      }
    },
    updateSceneKeys: function updateSceneKeys(_ref4) {
      var page = _ref4.page,
          _ref4$children = _ref4.children,
          children = _ref4$children === undefined ? this.props.children : _ref4$children,
          _ref4$callback = _ref4.callback,
          callback = _ref4$callback === undefined ? function () {} : _ref4$callback;
      var newKeys = this.newSceneKeys({
        previousKeys: this.state.sceneKeys,
        currentPage: page,
        children: children
      });
      this.setState({
        currentPage: page,
        sceneKeys: newKeys
      }, callback);
    },
    newSceneKeys: function newSceneKeys(_ref5) {
      var _this2 = this;

      var _ref5$previousKeys = _ref5.previousKeys,
          previousKeys = _ref5$previousKeys === undefined ? [] : _ref5$previousKeys,
          _ref5$currentPage = _ref5.currentPage,
          currentPage = _ref5$currentPage === undefined ? 0 : _ref5$currentPage,
          _ref5$children = _ref5.children,
          children = _ref5$children === undefined ? this.props.children : _ref5$children;
      var newKeys = [];

      this._children(children).forEach(function (child, idx) {
        var key = _this2._makeSceneKey(child, idx);

        if (_this2._keyExists(previousKeys, key) || _this2._shouldRenderSceneKey(idx, currentPage)) {
          newKeys.push(key);
        }
      });

      return newKeys;
    },
    _polyfillAnimatedValue: function _polyfillAnimatedValue(animatedValue) {
      var listeners = new Set();

      var addListener = function addListener(listener) {
        listeners.add(listener);
      };

      var removeListener = function removeListener(listener) {
        listeners.delete(listener);
      };

      var removeAllListeners = function removeAllListeners() {
        listeners.clear();
      };

      animatedValue.addListener = addListener;
      animatedValue.removeListener = removeListener;
      animatedValue.removeAllListeners = removeAllListeners;
      return function (value) {
        return listeners.forEach(function (listener) {
          return listener({
            value: value
          });
        });
      };
    },
    _shouldRenderSceneKey: function _shouldRenderSceneKey(idx, currentPageKey) {
      var numOfSibling = this.props.prerenderingSiblingsNumber;
      return idx < currentPageKey + numOfSibling + 1 && idx > currentPageKey - numOfSibling - 1;
    },
    _keyExists: function _keyExists(sceneKeys, key) {
      return sceneKeys.find(function (sceneKey) {
        return key === sceneKey;
      });
    },
    _makeSceneKey: function _makeSceneKey(child, idx) {
      return child.props.tabLabel + '_' + idx;
    },
    renderScrollableContent: function renderScrollableContent() {
      var _this3 = this;

      {
        var _scenes = this._composeScenes();

        return React.createElement(AnimatedViewPagerAndroid, _extends({
          key: this._children().length,
          style: styles.scrollableContentAndroid,
          initialPage: this.props.initialPage,
          onPageSelected: this._updateSelectedPage,
          keyboardDismissMode: "on-drag",
          scrollEnabled: !this.props.locked,
          onPageScroll: Animated.event([{
            nativeEvent: {
              position: this.state.positionAndroid,
              offset: this.state.offsetAndroid
            }
          }], {
            useNativeDriver: true,
            listener: this._onScroll
          }),
          ref: function ref(scrollView) {
            _this3.scrollView = scrollView;
          }
        }, this.props.contentProps), _scenes);
      }
    },
    _composeScenes: function _composeScenes() {
      var _this4 = this;

      return this._children().map(function (child, idx) {
        var key = _this4._makeSceneKey(child, idx);

        return React.createElement(SceneComponent, {
          key: child.key,
          shouldUpdated: _this4._shouldRenderSceneKey(idx, _this4.state.currentPage),
          style: {
            width: _this4.state.containerWidth
          }
        }, _this4._keyExists(_this4.state.sceneKeys, key) ? child : React.createElement(View, {
          tabLabel: child.props.tabLabel
        }));
      });
    },
    _onMomentumScrollBeginAndEnd: function _onMomentumScrollBeginAndEnd(e) {
      var offsetX = e.nativeEvent.contentOffset.x;
      var page = Math.round(offsetX / this.state.containerWidth);

      if (this.state.currentPage !== page) {
        this._updateSelectedPage(page);
      }
    },
    _updateSelectedPage: function _updateSelectedPage(nextPage) {
      var localNextPage = nextPage;

      if (typeof localNextPage === 'object') {
        localNextPage = nextPage.nativeEvent.position;
      }

      var currentPage = this.state.currentPage;
      this.updateSceneKeys({
        page: localNextPage,
        callback: this._onChangeTab.bind(this, currentPage, localNextPage)
      });
    },
    _onChangeTab: function _onChangeTab(prevPage, currentPage) {
      this.props.onChangeTab({
        i: currentPage,
        ref: this._children()[currentPage],
        from: prevPage
      });
    },
    _onScroll: function _onScroll(e) {
      {
        var _e$nativeEvent = e.nativeEvent,
            position = _e$nativeEvent.position,
            offset = _e$nativeEvent.offset;
        this.props.onScroll(position + offset);
      }
    },
    _handleLayout: function _handleLayout(e) {
      var _this5 = this;

      var width = e.nativeEvent.layout.width;

      if (!width || width <= 0 || Math.round(width) === Math.round(this.state.containerWidth)) {
        return;
      }

      {
        this.setState({
          containerWidth: width
        });
      }
      this.requestAnimationFrame(function () {
        _this5.goToPage(_this5.state.currentPage);
      });
    },
    _children: function _children() {
      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;
      return React.Children.map(children, function (child) {
        return child;
      });
    },
    render: function render() {
      var overlayTabs = this.props.tabBarPosition === 'overlayTop' || this.props.tabBarPosition === 'overlayBottom';
      var tabBarProps = {
        goToPage: this.goToPage,
        tabs: this._children().map(function (child) {
          return child.props.tabLabel;
        }),
        activeTab: this.state.currentPage,
        scrollValue: this.state.scrollValue,
        containerWidth: this.state.containerWidth
      };

      if (this.props.tabBarBackgroundColor) {
        tabBarProps.backgroundColor = this.props.tabBarBackgroundColor;
      }

      if (this.props.tabBarActiveTextColor) {
        tabBarProps.activeTextColor = this.props.tabBarActiveTextColor;
      }

      if (this.props.tabBarInactiveTextColor) {
        tabBarProps.inactiveTextColor = this.props.tabBarInactiveTextColor;
      }

      if (this.props.tabBarTextStyle) {
        tabBarProps.textStyle = this.props.tabBarTextStyle;
      }

      if (this.props.tabBarUnderlineStyle) {
        tabBarProps.underlineStyle = this.props.tabBarUnderlineStyle;
      }

      if (overlayTabs) {
        tabBarProps.style = _defineProperty({
          position: 'absolute',
          left: 0,
          right: 0
        }, this.props.tabBarPosition === 'overlayTop' ? 'top' : 'bottom', 0);
      }

      return React.createElement(View, {
        style: [styles.container, this.props.style],
        onLayout: this._handleLayout
      }, this.props.tabBarPosition === 'top' && this.renderTabBar(tabBarProps), this.renderScrollableContent(), (this.props.tabBarPosition === 'bottom' || overlayTabs) && this.renderTabBar(tabBarProps));
    }
  });
  module.exports = ScrollableTabView;
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    scrollableContentAndroid: {
      flex: 1
    }
  });
},10739,[14317,14344,10297,10033,10456,10318,10513,10742,10748,10754]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[2]);

  var Component = React.Component;
  var View = ReactNative.View,
      StyleSheet = ReactNative.StyleSheet;

  var StaticContainer = _$$_REQUIRE(_dependencyMap[3]);

  var SceneComponent = function SceneComponent(Props) {
    var shouldUpdated = Props.shouldUpdated,
        props = _objectWithoutProperties(Props, ["shouldUpdated"]);

    return React.createElement(View, props, React.createElement(StaticContainer, {
      shouldUpdate: shouldUpdated
    }, props.children));
  };

  module.exports = SceneComponent;
},10742,[14407,10297,10033,10745]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StaticContainer = function (_React$Component) {
    "use strict";

    _inherits(StaticContainer, _React$Component);

    function StaticContainer() {
      _classCallCheck(this, StaticContainer);

      return _possibleConstructorReturn(this, _getPrototypeOf(StaticContainer).apply(this, arguments));
    }

    _createClass(StaticContainer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return !!nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        var child = this.props.children;

        if (child === null || child === false) {
          return null;
        }

        return React.Children.only(child);
      }
    }]);

    return StaticContainer;
  }(React.Component);

  module.exports = StaticContainer;
},10745,[14320,14323,14371,14377,14386,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var React = _$$_REQUIRE(_dependencyMap[0]);

  var _ReactNative = ReactNative = _$$_REQUIRE(_dependencyMap[1]),
      ViewPropTypes = _ReactNative.ViewPropTypes;

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[3]);

  var _ReactNative2 = ReactNative,
      StyleSheet = _ReactNative2.StyleSheet,
      Text = _ReactNative2.Text,
      View = _ReactNative2.View,
      Animated = _ReactNative2.Animated;

  var Button = _$$_REQUIRE(_dependencyMap[4]);

  var DefaultTabBar = createReactClass({
    displayName: "DefaultTabBar",
    propTypes: {
      goToPage: PropTypes.func,
      activeTab: PropTypes.number,
      tabs: PropTypes.array,
      backgroundColor: PropTypes.string,
      activeTextColor: PropTypes.string,
      inactiveTextColor: PropTypes.string,
      textStyle: Text.propTypes.style,
      tabStyle: ViewPropTypes.style,
      renderTab: PropTypes.func,
      underlineStyle: ViewPropTypes.style
    },
    getDefaultProps: function getDefaultProps() {
      return {
        activeTextColor: 'navy',
        inactiveTextColor: 'black',
        backgroundColor: null
      };
    },
    renderTabOption: function renderTabOption(name, page) {},
    renderTab: function renderTab(name, page, isTabActive, onPressHandler) {
      var _this$props = this.props,
          activeTextColor = _this$props.activeTextColor,
          inactiveTextColor = _this$props.inactiveTextColor,
          textStyle = _this$props.textStyle;
      var textColor = isTabActive ? activeTextColor : inactiveTextColor;
      var fontWeight = isTabActive ? 'bold' : 'normal';
      return React.createElement(Button, {
        style: {
          flex: 1
        },
        key: name,
        accessible: true,
        accessibilityLabel: name,
        accessibilityTraits: "button",
        onPress: function onPress() {
          return onPressHandler(page);
        }
      }, React.createElement(View, {
        style: [styles.tab, this.props.tabStyle]
      }, React.createElement(Text, {
        style: [{
          color: textColor,
          fontWeight: fontWeight
        }, textStyle]
      }, name)));
    },
    render: function render() {
      var _this = this;

      var containerWidth = this.props.containerWidth;
      var numberOfTabs = this.props.tabs.length;
      var tabUnderlineStyle = {
        position: 'absolute',
        width: containerWidth / numberOfTabs,
        height: 4,
        backgroundColor: 'navy',
        bottom: 0
      };
      var translateX = this.props.scrollValue.interpolate({
        inputRange: [0, 1],
        outputRange: [0, containerWidth / numberOfTabs]
      });
      return React.createElement(View, {
        style: [styles.tabs, {
          backgroundColor: this.props.backgroundColor
        }, this.props.style]
      }, this.props.tabs.map(function (name, page) {
        var isTabActive = _this.props.activeTab === page;
        var renderTab = _this.props.renderTab || _this.renderTab;
        return renderTab(name, page, isTabActive, _this.props.goToPage);
      }), React.createElement(Animated.View, {
        style: [tabUnderlineStyle, {
          transform: [{
            translateX: translateX
          }]
        }, this.props.underlineStyle]
      }));
    }
  });
  var styles = StyleSheet.create({
    tab: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      paddingBottom: 10
    },
    tabs: {
      height: 50,
      flexDirection: 'row',
      justifyContent: 'space-around',
      borderWidth: 1,
      borderTopWidth: 0,
      borderLeftWidth: 0,
      borderRightWidth: 0,
      borderColor: '#ccc'
    }
  });
  module.exports = DefaultTabBar;
},10748,[10297,10033,10318,10456,10751]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[2]);

  var TouchableNativeFeedback = ReactNative.TouchableNativeFeedback,
      View = ReactNative.View;

  var Button = function Button(props) {
    return React.createElement(TouchableNativeFeedback, _extends({
      delayPressIn: 0,
      background: TouchableNativeFeedback.SelectableBackground()
    }, props), props.children);
  };

  module.exports = Button;
},10751,[14344,10297,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var React = _$$_REQUIRE(_dependencyMap[0]);

  var _ReactNative = ReactNative = _$$_REQUIRE(_dependencyMap[1]),
      ViewPropTypes = _ReactNative.ViewPropTypes;

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[3]);

  var _ReactNative2 = ReactNative,
      View = _ReactNative2.View,
      Animated = _ReactNative2.Animated,
      StyleSheet = _ReactNative2.StyleSheet,
      ScrollView = _ReactNative2.ScrollView,
      Text = _ReactNative2.Text,
      Platform = _ReactNative2.Platform,
      Dimensions = _ReactNative2.Dimensions;

  var Button = _$$_REQUIRE(_dependencyMap[4]);

  var WINDOW_WIDTH = Dimensions.get('window').width;
  var ScrollableTabBar = createReactClass({
    displayName: "ScrollableTabBar",
    propTypes: {
      goToPage: PropTypes.func,
      activeTab: PropTypes.number,
      tabs: PropTypes.array,
      backgroundColor: PropTypes.string,
      activeTextColor: PropTypes.string,
      inactiveTextColor: PropTypes.string,
      scrollOffset: PropTypes.number,
      style: ViewPropTypes.style,
      tabStyle: ViewPropTypes.style,
      tabsContainerStyle: ViewPropTypes.style,
      textStyle: Text.propTypes.style,
      renderTab: PropTypes.func,
      underlineStyle: ViewPropTypes.style,
      onScroll: PropTypes.func
    },
    getDefaultProps: function getDefaultProps() {
      return {
        scrollOffset: 52,
        activeTextColor: 'navy',
        inactiveTextColor: 'black',
        backgroundColor: null,
        style: {},
        tabStyle: {},
        tabsContainerStyle: {},
        underlineStyle: {}
      };
    },
    getInitialState: function getInitialState() {
      this._tabsMeasurements = [];
      return {
        _leftTabUnderline: new Animated.Value(0),
        _widthTabUnderline: new Animated.Value(0),
        _containerWidth: null
      };
    },
    componentDidMount: function componentDidMount() {
      this.props.scrollValue.addListener(this.updateView);
    },
    updateView: function updateView(offset) {
      var position = Math.floor(offset.value);
      var pageOffset = offset.value % 1;
      var tabCount = this.props.tabs.length;
      var lastTabPosition = tabCount - 1;

      if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {
        return;
      }

      if (this.necessarilyMeasurementsCompleted(position, position === lastTabPosition)) {
        this.updateTabPanel(position, pageOffset);
        this.updateTabUnderline(position, pageOffset, tabCount);
      }
    },
    necessarilyMeasurementsCompleted: function necessarilyMeasurementsCompleted(position, isLastTab) {
      return this._tabsMeasurements[position] && (isLastTab || this._tabsMeasurements[position + 1]) && this._tabContainerMeasurements && this._containerMeasurements;
    },
    updateTabPanel: function updateTabPanel(position, pageOffset) {
      var containerWidth = this._containerMeasurements.width;
      var tabWidth = this._tabsMeasurements[position].width;
      var nextTabMeasurements = this._tabsMeasurements[position + 1];
      var nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;
      var tabOffset = this._tabsMeasurements[position].left;
      var absolutePageOffset = pageOffset * tabWidth;
      var newScrollX = tabOffset + absolutePageOffset;
      newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;
      newScrollX = newScrollX >= 0 ? newScrollX : 0;
      {
        this._scrollView.scrollTo({
          x: newScrollX,
          y: 0,
          animated: false
        });
      }
    },
    updateTabUnderline: function updateTabUnderline(position, pageOffset, tabCount) {
      var lineLeft = this._tabsMeasurements[position].left;
      var lineRight = this._tabsMeasurements[position].right;

      if (position < tabCount - 1) {
        var nextTabLeft = this._tabsMeasurements[position + 1].left;
        var nextTabRight = this._tabsMeasurements[position + 1].right;
        var newLineLeft = pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;
        var newLineRight = pageOffset * nextTabRight + (1 - pageOffset) * lineRight;

        this.state._leftTabUnderline.setValue(newLineLeft);

        this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);
      } else {
        this.state._leftTabUnderline.setValue(lineLeft);

        this.state._widthTabUnderline.setValue(lineRight - lineLeft);
      }
    },
    renderTab: function renderTab(name, page, isTabActive, onPressHandler, onLayoutHandler) {
      var _this$props = this.props,
          activeTextColor = _this$props.activeTextColor,
          inactiveTextColor = _this$props.inactiveTextColor,
          textStyle = _this$props.textStyle;
      var textColor = isTabActive ? activeTextColor : inactiveTextColor;
      var fontWeight = isTabActive ? 'bold' : 'normal';
      return React.createElement(Button, {
        key: name + "_" + page,
        accessible: true,
        accessibilityLabel: name,
        accessibilityTraits: "button",
        onPress: function onPress() {
          return onPressHandler(page);
        },
        onLayout: onLayoutHandler
      }, React.createElement(View, {
        style: [styles.tab, this.props.tabStyle]
      }, React.createElement(Text, {
        style: [{
          color: textColor,
          fontWeight: fontWeight
        }, textStyle]
      }, name)));
    },
    measureTab: function measureTab(page, event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          x = _event$nativeEvent$la.x,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      this._tabsMeasurements[page] = {
        left: x,
        right: x + width,
        width: width,
        height: height
      };
      this.updateView({
        value: this.props.scrollValue.__getValue()
      });
    },
    render: function render() {
      var _this = this;

      var tabUnderlineStyle = {
        position: 'absolute',
        height: 4,
        backgroundColor: 'navy',
        bottom: 0
      };
      var dynamicTabUnderline = {
        left: this.state._leftTabUnderline,
        width: this.state._widthTabUnderline
      };
      return React.createElement(View, {
        style: [styles.container, {
          backgroundColor: this.props.backgroundColor
        }, this.props.style],
        onLayout: this.onContainerLayout
      }, React.createElement(ScrollView, {
        ref: function ref(scrollView) {
          _this._scrollView = scrollView;
        },
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        showsVerticalScrollIndicator: false,
        directionalLockEnabled: true,
        bounces: false,
        scrollsToTop: false
      }, React.createElement(View, {
        style: [styles.tabs, {
          width: this.state._containerWidth
        }, this.props.tabsContainerStyle],
        ref: 'tabContainer',
        onLayout: this.onTabContainerLayout
      }, this.props.tabs.map(function (name, page) {
        var isTabActive = _this.props.activeTab === page;
        var renderTab = _this.props.renderTab || _this.renderTab;
        return renderTab(name, page, isTabActive, _this.props.goToPage, _this.measureTab.bind(_this, page));
      }), React.createElement(Animated.View, {
        style: [tabUnderlineStyle, dynamicTabUnderline, this.props.underlineStyle]
      }))));
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (JSON.stringify(this.props.tabs) !== JSON.stringify(nextProps.tabs) && this.state._containerWidth) {
        this.setState({
          _containerWidth: null
        });
      }
    },
    onTabContainerLayout: function onTabContainerLayout(e) {
      this._tabContainerMeasurements = e.nativeEvent.layout;
      var width = this._tabContainerMeasurements.width;

      if (width < WINDOW_WIDTH) {
        width = WINDOW_WIDTH;
      }

      this.setState({
        _containerWidth: width
      });
      this.updateView({
        value: this.props.scrollValue.__getValue()
      });
    },
    onContainerLayout: function onContainerLayout(e) {
      this._containerMeasurements = e.nativeEvent.layout;
      this.updateView({
        value: this.props.scrollValue.__getValue()
      });
    }
  });
  module.exports = ScrollableTabBar;
  var styles = StyleSheet.create({
    tab: {
      height: 49,
      alignItems: 'center',
      justifyContent: 'center',
      paddingLeft: 20,
      paddingRight: 20
    },
    container: {
      height: 50,
      borderWidth: 1,
      borderTopWidth: 0,
      borderLeftWidth: 0,
      borderRightWidth: 0,
      borderColor: '#ccc'
    },
    tabs: {
      flexDirection: 'row',
      justifyContent: 'space-around'
    }
  });
},10754,[10297,10033,10318,10456,10751]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _policyLicenseUrl = _$$_REQUIRE(_dependencyMap[2]);

  var Resources = function Resources() {
    (0, _classCallCheck2.default)(this, Resources);
  };

  exports.default = Resources;
  Resources.MainPage = {
    homePageBack: _$$_REQUIRE(_dependencyMap[3]),
    homePageMore: _$$_REQUIRE(_dependencyMap[4]),
    homepageLog: _$$_REQUIRE(_dependencyMap[5]),
    homePageClose: _$$_REQUIRE(_dependencyMap[6]),
    homepageRoundOff: _$$_REQUIRE(_dependencyMap[7]),
    homepageRoundBottomBg: _$$_REQUIRE(_dependencyMap[8]),
    homepageRoundBottom: _$$_REQUIRE(_dependencyMap[9]),
    homepageRoundCenter: _$$_REQUIRE(_dependencyMap[10]),
    homepageAlarm: _$$_REQUIRE(_dependencyMap[11]),
    homepageDevice: _$$_REQUIRE(_dependencyMap[12]),
    homepageTimingLight: _$$_REQUIRE(_dependencyMap[13]),
    homepageAbnormal: _$$_REQUIRE(_dependencyMap[14]),
    homepageReactionLight: _$$_REQUIRE(_dependencyMap[15]),
    homepageColorPan: _$$_REQUIRE(_dependencyMap[16]),
    homepageLightPicker: _$$_REQUIRE(_dependencyMap[17]),
    homepageLightOn: _$$_REQUIRE(_dependencyMap[18]),
    homepageLightOff: _$$_REQUIRE(_dependencyMap[19]),
    homepageOnMin: _$$_REQUIRE(_dependencyMap[20]),
    homepageOnMax: _$$_REQUIRE(_dependencyMap[21]),
    homepageOffMin: _$$_REQUIRE(_dependencyMap[22]),
    homepageOffMax: _$$_REQUIRE(_dependencyMap[23]),
    homepageBrightnessPicker: _$$_REQUIRE(_dependencyMap[24]),
    homepageSwitchBtnNo: _$$_REQUIRE(_dependencyMap[25]),
    homepageSwitchBtnOn: _$$_REQUIRE(_dependencyMap[26])
  };
  Resources.TimeLight = {
    timeLightAdd: _$$_REQUIRE(_dependencyMap[27]),
    lumi_close: _$$_REQUIRE(_dependencyMap[28]),
    lumi_confirm: _$$_REQUIRE(_dependencyMap[29]),
    lumiLightColor: _$$_REQUIRE(_dependencyMap[30]),
    placeholder_timing: _$$_REQUIRE(_dependencyMap[31]),
    lumiLightColorOff: _$$_REQUIRE(_dependencyMap[32]),
    lumirings: _$$_REQUIRE(_dependencyMap[33])
  };
  Resources.PolicyLicense = _policyLicenseUrl.PolicyLicenseUrl;
  Resources.GuardSetting = {
    ifImage: _$$_REQUIRE(_dependencyMap[34]),
    thenImage: _$$_REQUIRE(_dependencyMap[35]),
    selectIcon: _$$_REQUIRE(_dependencyMap[36])
  };
},10757,[14305,14320,10760,11081,11084,11087,11090,11093,11096,11099,11102,11105,11108,11111,11114,11117,11120,11123,11126,11129,11132,11135,11138,11141,11144,11147,11150,11153,11156,11159,11162,11165,11168,11171,11174,11177,11180]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PolicyLicenseUrl = undefined;
  var PolicyLicenseUrl = {
    "licenseUrl_de": _$$_REQUIRE(_dependencyMap[0]),
    "licenseUrl_en": _$$_REQUIRE(_dependencyMap[1]),
    "licenseUrl_es": _$$_REQUIRE(_dependencyMap[2]),
    "licenseUrl_eu_en": _$$_REQUIRE(_dependencyMap[3]),
    "licenseUrl_fr": _$$_REQUIRE(_dependencyMap[4]),
    "licenseUrl_hk": _$$_REQUIRE(_dependencyMap[5]),
    "licenseUrl_it": _$$_REQUIRE(_dependencyMap[6]),
    "licenseUrl_ko": _$$_REQUIRE(_dependencyMap[7]),
    "licenseUrl_ko_en": _$$_REQUIRE(_dependencyMap[8]),
    "licenseUrl_lmuk01_ar": _$$_REQUIRE(_dependencyMap[9]),
    "licenseUrl_lmuk01_en": _$$_REQUIRE(_dependencyMap[10]),
    "licenseUrl_lmuk01_eu_en": _$$_REQUIRE(_dependencyMap[11]),
    "licenseUrl_lmuk01_ms": _$$_REQUIRE(_dependencyMap[12]),
    "licenseUrl_mi_hk": _$$_REQUIRE(_dependencyMap[13]),
    "licenseUrl_mi_hk_en": _$$_REQUIRE(_dependencyMap[14]),
    "licenseUrl_mi_tw": _$$_REQUIRE(_dependencyMap[15]),
    "licenseUrl_mi_tw_en": _$$_REQUIRE(_dependencyMap[16]),
    "licenseUrl_mieu01_ar": _$$_REQUIRE(_dependencyMap[17]),
    "licenseUrl_mieu01_belg": _$$_REQUIRE(_dependencyMap[18]),
    "licenseUrl_mieu01_ch": _$$_REQUIRE(_dependencyMap[19]),
    "licenseUrl_mieu01_cz": _$$_REQUIRE(_dependencyMap[20]),
    "licenseUrl_mieu01_de": _$$_REQUIRE(_dependencyMap[21]),
    "licenseUrl_mieu01_el": _$$_REQUIRE(_dependencyMap[22]),
    "licenseUrl_mieu01_en": _$$_REQUIRE(_dependencyMap[23]),
    "licenseUrl_mieu01_es": _$$_REQUIRE(_dependencyMap[24]),
    "licenseUrl_mieu01_es_la": _$$_REQUIRE(_dependencyMap[25]),
    "licenseUrl_mieu01_eu_en": _$$_REQUIRE(_dependencyMap[26]),
    "licenseUrl_mieu01_fr": _$$_REQUIRE(_dependencyMap[27]),
    "licenseUrl_mieu01_gr": _$$_REQUIRE(_dependencyMap[28]),
    "licenseUrl_mieu01_id": _$$_REQUIRE(_dependencyMap[29]),
    "licenseUrl_mieu01_it": _$$_REQUIRE(_dependencyMap[30]),
    "licenseUrl_mieu01_lu": _$$_REQUIRE(_dependencyMap[31]),
    "licenseUrl_mieu01_ms": _$$_REQUIRE(_dependencyMap[32]),
    "licenseUrl_mieu01_nl": _$$_REQUIRE(_dependencyMap[33]),
    "licenseUrl_mieu01_pl": _$$_REQUIRE(_dependencyMap[34]),
    "licenseUrl_mieu01_pt": _$$_REQUIRE(_dependencyMap[35]),
    "licenseUrl_mieu01_pt_br": _$$_REQUIRE(_dependencyMap[36]),
    "licenseUrl_mieu01_ro": _$$_REQUIRE(_dependencyMap[37]),
    "licenseUrl_mieu01_ru": _$$_REQUIRE(_dependencyMap[38]),
    "licenseUrl_mieu01_sg": _$$_REQUIRE(_dependencyMap[39]),
    "licenseUrl_mieu01_sk": _$$_REQUIRE(_dependencyMap[40]),
    "licenseUrl_mieu01_th": _$$_REQUIRE(_dependencyMap[41]),
    "licenseUrl_mieu01_uk": _$$_REQUIRE(_dependencyMap[42]),
    "licenseUrl_mieu01_us_en": _$$_REQUIRE(_dependencyMap[43]),
    "licenseUrl_mieu01_vi": _$$_REQUIRE(_dependencyMap[44]),
    "licenseUrl_mieu01_zh": _$$_REQUIRE(_dependencyMap[45]),
    "licenseUrl_pl": _$$_REQUIRE(_dependencyMap[46]),
    "licenseUrl_ru": _$$_REQUIRE(_dependencyMap[47]),
    "licenseUrl_sg": _$$_REQUIRE(_dependencyMap[48]),
    "licenseUrl_sg_en": _$$_REQUIRE(_dependencyMap[49]),
    "licenseUrl_tw": _$$_REQUIRE(_dependencyMap[50]),
    "licenseUrl_us_en": _$$_REQUIRE(_dependencyMap[51]),
    "licenseUrl_zh": _$$_REQUIRE(_dependencyMap[52]),
    "policyUrl_de": _$$_REQUIRE(_dependencyMap[53]),
    "policyUrl_en": _$$_REQUIRE(_dependencyMap[54]),
    "policyUrl_es": _$$_REQUIRE(_dependencyMap[55]),
    "policyUrl_eu_en": _$$_REQUIRE(_dependencyMap[56]),
    "policyUrl_fr": _$$_REQUIRE(_dependencyMap[57]),
    "policyUrl_hk": _$$_REQUIRE(_dependencyMap[58]),
    "policyUrl_it": _$$_REQUIRE(_dependencyMap[59]),
    "policyUrl_ko": _$$_REQUIRE(_dependencyMap[60]),
    "policyUrl_ko_en": _$$_REQUIRE(_dependencyMap[61]),
    "policyUrl_lmuk01_ar": _$$_REQUIRE(_dependencyMap[62]),
    "policyUrl_lmuk01_en": _$$_REQUIRE(_dependencyMap[63]),
    "policyUrl_lmuk01_eu_en": _$$_REQUIRE(_dependencyMap[64]),
    "policyUrl_lmuk01_ms": _$$_REQUIRE(_dependencyMap[65]),
    "policyUrl_mi_hk": _$$_REQUIRE(_dependencyMap[66]),
    "policyUrl_mi_hk_en": _$$_REQUIRE(_dependencyMap[67]),
    "policyUrl_mi_tw": _$$_REQUIRE(_dependencyMap[68]),
    "policyUrl_mi_tw_en": _$$_REQUIRE(_dependencyMap[69]),
    "policyUrl_mieu01_ar": _$$_REQUIRE(_dependencyMap[70]),
    "policyUrl_mieu01_belg": _$$_REQUIRE(_dependencyMap[71]),
    "policyUrl_mieu01_ch": _$$_REQUIRE(_dependencyMap[72]),
    "policyUrl_mieu01_cz": _$$_REQUIRE(_dependencyMap[73]),
    "policyUrl_mieu01_de": _$$_REQUIRE(_dependencyMap[74]),
    "policyUrl_mieu01_el": _$$_REQUIRE(_dependencyMap[75]),
    "policyUrl_mieu01_en": _$$_REQUIRE(_dependencyMap[76]),
    "policyUrl_mieu01_es": _$$_REQUIRE(_dependencyMap[77]),
    "policyUrl_mieu01_es_la": _$$_REQUIRE(_dependencyMap[78]),
    "policyUrl_mieu01_eu_en": _$$_REQUIRE(_dependencyMap[79]),
    "policyUrl_mieu01_fr": _$$_REQUIRE(_dependencyMap[80]),
    "policyUrl_mieu01_gr": _$$_REQUIRE(_dependencyMap[81]),
    "policyUrl_mieu01_id": _$$_REQUIRE(_dependencyMap[82]),
    "policyUrl_mieu01_it": _$$_REQUIRE(_dependencyMap[83]),
    "policyUrl_mieu01_lu": _$$_REQUIRE(_dependencyMap[84]),
    "policyUrl_mieu01_ms": _$$_REQUIRE(_dependencyMap[85]),
    "policyUrl_mieu01_nl": _$$_REQUIRE(_dependencyMap[86]),
    "policyUrl_mieu01_pl": _$$_REQUIRE(_dependencyMap[87]),
    "policyUrl_mieu01_pt": _$$_REQUIRE(_dependencyMap[88]),
    "policyUrl_mieu01_pt_br": _$$_REQUIRE(_dependencyMap[89]),
    "policyUrl_mieu01_ro": _$$_REQUIRE(_dependencyMap[90]),
    "policyUrl_mieu01_ru": _$$_REQUIRE(_dependencyMap[91]),
    "policyUrl_mieu01_sg": _$$_REQUIRE(_dependencyMap[92]),
    "policyUrl_mieu01_sk": _$$_REQUIRE(_dependencyMap[93]),
    "policyUrl_mieu01_th": _$$_REQUIRE(_dependencyMap[94]),
    "policyUrl_mieu01_uk": _$$_REQUIRE(_dependencyMap[95]),
    "policyUrl_mieu01_us_en": _$$_REQUIRE(_dependencyMap[96]),
    "policyUrl_mieu01_vi": _$$_REQUIRE(_dependencyMap[97]),
    "policyUrl_mieu01_zh": _$$_REQUIRE(_dependencyMap[98]),
    "policyUrl_pl": _$$_REQUIRE(_dependencyMap[99]),
    "policyUrl_ru": _$$_REQUIRE(_dependencyMap[100]),
    "policyUrl_sg": _$$_REQUIRE(_dependencyMap[101]),
    "policyUrl_sg_en": _$$_REQUIRE(_dependencyMap[102]),
    "policyUrl_tw": _$$_REQUIRE(_dependencyMap[103]),
    "policyUrl_us_en": _$$_REQUIRE(_dependencyMap[104]),
    "policyUrl_zh": _$$_REQUIRE(_dependencyMap[105])
  };
  exports.PolicyLicenseUrl = PolicyLicenseUrl;
},10760,[10763,10766,10769,10772,10775,10778,10781,10784,10787,10790,10793,10796,10799,10802,10805,10808,10811,10814,10817,10820,10823,10826,10829,10832,10835,10838,10841,10844,10847,10850,10853,10856,10859,10862,10865,10868,10871,10874,10877,10880,10883,10886,10889,10892,10895,10898,10901,10904,10907,10910,10913,10916,10919,10922,10925,10928,10931,10934,10937,10940,10943,10946,10949,10952,10955,10958,10961,10964,10967,10970,10973,10976,10979,10982,10985,10988,10991,10994,10997,11000,11003,11006,11009,11012,11015,11018,11021,11024,11027,11030,11033,11036,11039,11042,11045,11048,11051,11054,11057,11060,11063,11066,11069,11072,11075,11078]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "6b629752a4f6ab10011e75f25bd4bfdd",
    "name": "agreement_de",
    "type": "html"
  });
},10763,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "c31b1d89ff3e0261d7e7fef9b9806126",
    "name": "agreement_en",
    "type": "html"
  });
},10766,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "e701f0e186d7dc52a11dcf265f290798",
    "name": "agreement_es",
    "type": "html"
  });
},10769,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "0af17712c52e11ff08ae1f620cd34b0c",
    "name": "agreement_eu_en",
    "type": "html"
  });
},10772,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "3136cc7354bee6bd55d7eacb197dbd86",
    "name": "agreement_fr",
    "type": "html"
  });
},10775,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "73e2c799932b3837ec2b9a2ad6e339d6",
    "name": "agreement_hk",
    "type": "html"
  });
},10778,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1aa448c36c16f12f4667444cef4725a5",
    "name": "agreement_it",
    "type": "html"
  });
},10781,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "c3e9bc6a59875be7b35240f4e05e588c",
    "name": "agreement_ko",
    "type": "html"
  });
},10784,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "6e0bc394e731ad84be715dc674bc94cf",
    "name": "agreement_ko_en",
    "type": "html"
  });
},10787,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "6043626ce6dca511e65251d8a359936d",
    "name": "agreement_lmuk01_ar",
    "type": "html"
  });
},10790,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "70352657bfd2ba0d294408cb2122c72c",
    "name": "agreement_lmuk01_en",
    "type": "html"
  });
},10793,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "74d873d3def1d5116c91af1a2ddb349a",
    "name": "agreement_lmuk01_eu_en",
    "type": "html"
  });
},10796,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "2605112dc810b83a7675d88628c69d64",
    "name": "agreement_lmuk01_ms",
    "type": "html"
  });
},10799,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "e2fcc022dc2bdf680dc66cd975059180",
    "name": "agreement_mi_hk",
    "type": "html"
  });
},10802,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "452ce795f7597dc123db143a86410dfe",
    "name": "agreement_mi_hk_en",
    "type": "html"
  });
},10805,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "6f375b387c365a0598055e42c21723fe",
    "name": "agreement_mi_tw",
    "type": "html"
  });
},10808,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "bf294b23d23f5de90b1a2b84f03c1e1f",
    "name": "agreement_mi_tw_en",
    "type": "html"
  });
},10811,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "54a870bf588e846bb9d58ab2c7d2c152",
    "name": "agreement_mieu01_ar",
    "type": "html"
  });
},10814,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "e282bbfbb9dfa92404a8e9ce37c1427f",
    "name": "agreement_mieu01_belg",
    "type": "html"
  });
},10817,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "fec3f6bc3d664a57b3372172a7c0f813",
    "name": "agreement_mieu01_ch",
    "type": "html"
  });
},10820,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "b4c1770ea67722f465955e479d579b2e",
    "name": "agreement_mieu01_cz",
    "type": "html"
  });
},10823,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "8e9906d8a1eaad9584c009f5aa34d72d",
    "name": "agreement_mieu01_de",
    "type": "html"
  });
},10826,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5c57ed2b843010a9ffc71b51d8f854c8",
    "name": "agreement_mieu01_el",
    "type": "html"
  });
},10829,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "8cdc519caf6f2bc24557e72812921d1f",
    "name": "agreement_mieu01_en",
    "type": "html"
  });
},10832,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5638f9015a3188b96436f099f5ed97b6",
    "name": "agreement_mieu01_es",
    "type": "html"
  });
},10835,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "e6d7ca9a393bbab44a46ed7904c19cf8",
    "name": "agreement_mieu01_es_la",
    "type": "html"
  });
},10838,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5bcb20857c1f36c6acfb6cbb94e929c1",
    "name": "agreement_mieu01_eu_en",
    "type": "html"
  });
},10841,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "192af53036130aa4fa4730614d9eca67",
    "name": "agreement_mieu01_fr",
    "type": "html"
  });
},10844,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "13b96a92b5e6007d1e7181faccf135f1",
    "name": "agreement_mieu01_gr",
    "type": "html"
  });
},10847,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5ca15f4c58523c332f6aab32672ac3f2",
    "name": "agreement_mieu01_id",
    "type": "html"
  });
},10850,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "506697feb179c207217581bc494aaf5c",
    "name": "agreement_mieu01_it",
    "type": "html"
  });
},10853,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "81a68ab3d34a6998587c2473d81c8e4c",
    "name": "agreement_mieu01_lu",
    "type": "html"
  });
},10856,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5bd232c90e98a98c9a8c2e9f63d1f42e",
    "name": "agreement_mieu01_ms",
    "type": "html"
  });
},10859,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "d99fcb9f07f009c09cc1bd1f74b6471e",
    "name": "agreement_mieu01_nl",
    "type": "html"
  });
},10862,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "8f3f49749c5985b0aefece188ad777bf",
    "name": "agreement_mieu01_pl",
    "type": "html"
  });
},10865,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "9bff54c2dbb94e391456c4f194501366",
    "name": "agreement_mieu01_pt",
    "type": "html"
  });
},10868,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5476eadaad43790ce45b6e97eb2d1e27",
    "name": "agreement_mieu01_pt_br",
    "type": "html"
  });
},10871,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "0b5c7de94bdd27a877d382d81c43bc3c",
    "name": "agreement_mieu01_ro",
    "type": "html"
  });
},10874,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1e4d6fba38d503c40519fe4c7d116a00",
    "name": "agreement_mieu01_ru",
    "type": "html"
  });
},10877,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1952325dcbc522fc16bc4ac0d8da661f",
    "name": "agreement_mieu01_sg",
    "type": "html"
  });
},10880,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "3296c5a26d4a0b605030036c18b59ba9",
    "name": "agreement_mieu01_sk",
    "type": "html"
  });
},10883,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "d6ee09d34ace19770962bbb8ce3427b4",
    "name": "agreement_mieu01_th",
    "type": "html"
  });
},10886,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1264aecd5a4f6502eb41ffd33cfe69f3",
    "name": "agreement_mieu01_uk",
    "type": "html"
  });
},10889,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5547dce89ace5a18908ae5547ccfd9dd",
    "name": "agreement_mieu01_us_en",
    "type": "html"
  });
},10892,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "e1845fab8ad22a5c0a09d09847e9d2da",
    "name": "agreement_mieu01_vi",
    "type": "html"
  });
},10895,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5c2745d054b8f486cf5d2f5ef5e19467",
    "name": "agreement_mieu01_zh",
    "type": "html"
  });
},10898,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "0d7b14ef34602257984d140614fb607a",
    "name": "agreement_pl",
    "type": "html"
  });
},10901,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "28a7689bcd918f1cf5c919b290f555e9",
    "name": "agreement_ru",
    "type": "html"
  });
},10904,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "7165bce844c270093b788c1479c190d3",
    "name": "agreement_sg",
    "type": "html"
  });
},10907,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "ac27f9f5ba98c6819e52ae0320df172b",
    "name": "agreement_sg_en",
    "type": "html"
  });
},10910,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "b9182835cd8a18c775f893ddeeac401e",
    "name": "agreement_tw",
    "type": "html"
  });
},10913,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "c31b1d89ff3e0261d7e7fef9b9806126",
    "name": "agreement_us_en",
    "type": "html"
  });
},10916,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "0c9281202dcd7560a5b4d44639078a41",
    "name": "agreement_zh",
    "type": "html"
  });
},10919,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "80404c303eab0a27ec05725e6b91b434",
    "name": "policy_de",
    "type": "html"
  });
},10922,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "71fd8bf2e27a8c7a38e28019d5630e57",
    "name": "policy_en",
    "type": "html"
  });
},10925,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "107e595760198dc40f77b3f8522672d0",
    "name": "policy_es",
    "type": "html"
  });
},10928,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "a0d8ac72935142cfd7f471e2bcefb598",
    "name": "policy_eu_en",
    "type": "html"
  });
},10931,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "dfa47c1690e7e1ba261fe1c009b4828f",
    "name": "policy_fr",
    "type": "html"
  });
},10934,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1d73e1a036ffda8c3bb13df4f46f2a05",
    "name": "policy_hk",
    "type": "html"
  });
},10937,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "f615fc46687e3305adf71e54309c9060",
    "name": "policy_it",
    "type": "html"
  });
},10940,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5c053ff36ee0f31e999915b7f0cbd3bf",
    "name": "policy_ko",
    "type": "html"
  });
},10943,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1281d00cc34d77cdf5463c2c02cbf4fa",
    "name": "policy_ko_en",
    "type": "html"
  });
},10946,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "844796737f461430dc582471794b1c24",
    "name": "policy_lmuk01_ar",
    "type": "html"
  });
},10949,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "ab34ca0a8cde92992ec158039f6e3ed0",
    "name": "policy_lmuk01_en",
    "type": "html"
  });
},10952,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1550c3a76044d6fd6a1f4593d7eeaa64",
    "name": "policy_lmuk01_eu_en",
    "type": "html"
  });
},10955,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "50efc52e50e43036b0d105a0451e7334",
    "name": "policy_lmuk01_ms",
    "type": "html"
  });
},10958,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "a5b617df3299c8395f9c37b4170ed4c4",
    "name": "policy_mi_hk",
    "type": "html"
  });
},10961,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "694ce05f6b875c6fa647a72bb67180b4",
    "name": "policy_mi_hk_en",
    "type": "html"
  });
},10964,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "12333a135f1ecc3146e9e15f4e6f9db7",
    "name": "policy_mi_tw",
    "type": "html"
  });
},10967,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "e882fe25d35a4037b09192c0abc93188",
    "name": "policy_mi_tw_en",
    "type": "html"
  });
},10970,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "98cd01eccfbec84fe2a69464fcc0d501",
    "name": "policy_mieu01_ar",
    "type": "html"
  });
},10973,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "8d237da259ad063f98a45f87a17075eb",
    "name": "policy_mieu01_belg",
    "type": "html"
  });
},10976,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "7480221cd74979d79ca4417b4994821c",
    "name": "policy_mieu01_ch",
    "type": "html"
  });
},10979,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "839c067b9a196d33b4561785cadef8cc",
    "name": "policy_mieu01_cz",
    "type": "html"
  });
},10982,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "8eac8405a918accb7c58e0c1cd1bef4b",
    "name": "policy_mieu01_de",
    "type": "html"
  });
},10985,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "7649dd204530a5397fceaffab216253b",
    "name": "policy_mieu01_el",
    "type": "html"
  });
},10988,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "acc48d05e4d035cbf39c056fe35d161f",
    "name": "policy_mieu01_en",
    "type": "html"
  });
},10991,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactIs = _$$_REQUIRE(_dependencyMap[0]);

  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;

  function getStatics(component) {
    if (ReactIs.isMemo(component)) {
      return MEMO_STATICS;
    }

    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }

  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }

      return targetComponent;
    }

    return targetComponent;
  }

  module.exports = hoistNonReactStatics;
},10993,[10199]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "0a3c2b45c1f18abb32719734a9aa5b6d",
    "name": "policy_mieu01_es",
    "type": "html"
  });
},10994,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "1d5899e7f8af3adb8e2a0fa2e54ceee3",
    "name": "policy_mieu01_es_la",
    "type": "html"
  });
},10997,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "acc48d05e4d035cbf39c056fe35d161f",
    "name": "policy_mieu01_eu_en",
    "type": "html"
  });
},11000,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "a72fe4c233cc0c405af012b2b58e82b8",
    "name": "policy_mieu01_fr",
    "type": "html"
  });
},11003,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "cbb7da3d717c829baf74de60ae24cd7b",
    "name": "policy_mieu01_gr",
    "type": "html"
  });
},11006,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "4998dbcf2fc62a65b553c3b0d3e928d9",
    "name": "policy_mieu01_id",
    "type": "html"
  });
},11009,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "60f57c717403f875bbce41a19caa1a66",
    "name": "policy_mieu01_it",
    "type": "html"
  });
},11012,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "0d05ea12e97a499b81cabb8d0e88c402",
    "name": "policy_mieu01_lu",
    "type": "html"
  });
},11015,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "6c0a4100208d918d57211f8dbae4cb7a",
    "name": "policy_mieu01_ms",
    "type": "html"
  });
},11018,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "c40fcecf675e6e87dd3ad98c4d4c1f2c",
    "name": "policy_mieu01_nl",
    "type": "html"
  });
},11021,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "5d87b2e3e5ce89393d2b866a13246ea2",
    "name": "policy_mieu01_pl",
    "type": "html"
  });
},11024,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "78eaa079a4c88546d007656ff45f8bb4",
    "name": "policy_mieu01_pt",
    "type": "html"
  });
},11027,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "88111721d7a36486be3f873a87a286ac",
    "name": "policy_mieu01_pt_br",
    "type": "html"
  });
},11030,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "47b0aa95d8f37a973661fe8d7d574576",
    "name": "policy_mieu01_ro",
    "type": "html"
  });
},11033,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "bc13865aa8f82089d47f08c24f7c76ba",
    "name": "policy_mieu01_ru",
    "type": "html"
  });
},11036,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "91332c215c1e5bcabae67aa2ce4e0be3",
    "name": "policy_mieu01_sg",
    "type": "html"
  });
},11039,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "a57cbfa80d5c7ff607b35eb101fe8407",
    "name": "policy_mieu01_sk",
    "type": "html"
  });
},11042,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "dc99ebfcb04c6ad2a3e490f8c27804ce",
    "name": "policy_mieu01_th",
    "type": "html"
  });
},11045,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "601fb9700b20655003efa9f88e9665a1",
    "name": "policy_mieu01_uk",
    "type": "html"
  });
},11048,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "715625c1733f3cfe9fe2676303abd317",
    "name": "policy_mieu01_us_en",
    "type": "html"
  });
},11051,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "eaa3a8ac09d53d5ea4a597afb3e0da63",
    "name": "policy_mieu01_vi",
    "type": "html"
  });
},11054,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "b49ea67a488bad8592bff6753433a53e",
    "name": "policy_mieu01_zh",
    "type": "html"
  });
},11057,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "4159343fa2e4d8fbc5acba9bded2f346",
    "name": "policy_pl",
    "type": "html"
  });
},11060,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "c81dda0c088719aafb649fa7ca18a381",
    "name": "policy_ru",
    "type": "html"
  });
},11063,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "71fd8bf2e27a8c7a38e28019d5630e57",
    "name": "policy_sg",
    "type": "html"
  });
},11066,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "71fd8bf2e27a8c7a38e28019d5630e57",
    "name": "policy_sg_en",
    "type": "html"
  });
},11069,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "b9a80c894a47e63e4f1312f254f29713",
    "name": "policy_tw",
    "type": "html"
  });
},11072,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "71fd8bf2e27a8c7a38e28019d5630e57",
    "name": "policy_us_en",
    "type": "html"
  });
},11075,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/html",
    "scales": [1],
    "hash": "c682cfd1f73588c0b45c1c475f53ed5a",
    "name": "policy_zh",
    "type": "html"
  });
},11078,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "6fdfb6cf7038adf1a4eb7094d4f5841b",
    "name": "mi_linuxHub_main_back",
    "type": "png"
  });
},11081,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f6224c3e94746228b122d22d2f5c83ea",
    "name": "mi_linuxHub_main_more",
    "type": "png"
  });
},11084,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "3942ef3b87d3f77944930eda1007ba4f",
    "name": "homepag_icon_log",
    "type": "png"
  });
},11087,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "d528e198860af2a309811067ac065637",
    "name": "mi_linuxHub_icon_close",
    "type": "png"
  });
},11090,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 780,
    "height": 780,
    "scales": [1],
    "hash": "cc1034fe45f609f5244c001aad843db3",
    "name": "homepage_hub_off",
    "type": "png"
  });
},11093,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 780,
    "height": 780,
    "scales": [1],
    "hash": "4763f83e9b09b0f401c6514b00432b27",
    "name": "homepage_hub_on_3",
    "type": "png"
  });
},11096,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 780,
    "height": 780,
    "scales": [1],
    "hash": "d7db51742846247172d17926825a7718",
    "name": "homepage_hub_on_2",
    "type": "png"
  });
},11099,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 780,
    "height": 780,
    "scales": [1],
    "hash": "d1df1d33d71f9bc0e1627f2e9e73caa3",
    "name": "homepage_hub_on_1",
    "type": "png"
  });
},11102,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "c575c4e999c09052a58f612c50bd9bd2",
    "name": "homepag_icon_alarm",
    "type": "png"
  });
},11105,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "220ec1cc4c2655d5e7d5d737350be232",
    "name": "homepag_icon_devices",
    "type": "png"
  });
},11108,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "12e203758d730050833d2839028f2f9a",
    "name": "homepag_icon_timer",
    "type": "png"
  });
},11111,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 102,
    "height": 90,
    "scales": [1],
    "hash": "ea13a3f553c388345653c5fab1fb84f2",
    "name": "homepage_icon_abnormal",
    "type": "png"
  });
},11114,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "f078fa32d6cf0881b94ec28747183885",
    "name": "homepag_icon_reaction",
    "type": "png"
  });
},11117,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 720,
    "height": 720,
    "scales": [1],
    "hash": "781fd50636cba4fe8fbe30c91e8ef9c2",
    "name": "homepage_hub_light_colorwheel",
    "type": "png"
  });
},11120,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 378,
    "height": 378,
    "scales": [1],
    "hash": "c35faebba9a96995893130a604697f14",
    "name": "homepage_light_picker",
    "type": "png"
  });
},11123,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 228,
    "height": 228,
    "scales": [1],
    "hash": "75c4ce5e890a780252792e11c33c6cd7",
    "name": "homepage_light_on",
    "type": "png"
  });
},11126,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 228,
    "height": 228,
    "scales": [1],
    "hash": "0af672557488a29efc6200e75c0065d8",
    "name": "homepage_light_off",
    "type": "png"
  });
},11129,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 60,
    "height": 60,
    "scales": [1],
    "hash": "b4278d14cb8ec16bd43c489f2d2ab5dd",
    "name": "homepage_on_min",
    "type": "png"
  });
},11132,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 60,
    "height": 60,
    "scales": [1],
    "hash": "ae488bb861ab73d0722250eeaddc00fe",
    "name": "homepage_on_max",
    "type": "png"
  });
},11135,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 60,
    "height": 63,
    "scales": [1],
    "hash": "496577b41dda6ae8da0c6e4b8e0a16b1",
    "name": "homepage_off_min",
    "type": "png"
  });
},11138,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 60,
    "height": 60,
    "scales": [1],
    "hash": "74e999cb7cd544f7a4b97752169630a9",
    "name": "homepage_off_max",
    "type": "png"
  });
},11141,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 108,
    "height": 108,
    "scales": [1],
    "hash": "095f2d6f81a3e01beab49d50d6e0278c",
    "name": "homepage_brightness_picker",
    "type": "png"
  });
},11144,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 102,
    "height": 57,
    "scales": [1],
    "hash": "97481dd13f2f16d3979244a5d039a4c4",
    "name": "switch_botton_no",
    "type": "png"
  });
},11147,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 132,
    "height": 72,
    "scales": [1],
    "hash": "65b78afdffb1aaf316d99bb09a403c8f",
    "name": "switch_botton_on",
    "type": "png"
  });
},11150,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 198,
    "height": 198,
    "scales": [1],
    "hash": "082e558c002853df53db2da3e0777b37",
    "name": "add_blue",
    "type": "png"
  });
},11153,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "ff79b74a7b284b15dc7aeb051e6e3c13",
    "name": "lumi_close",
    "type": "png"
  });
},11156,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 120,
    "height": 120,
    "scales": [1],
    "hash": "0f13c7ef095b1d54a30a8f2f6d517735",
    "name": "lumi_confirm",
    "type": "png"
  });
},11159,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 108,
    "height": 108,
    "scales": [1],
    "hash": "c4984e14cbdeed9187e08bf9969c9eb9",
    "name": "light_color",
    "type": "png"
  });
},11162,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 414,
    "height": 414,
    "scales": [1],
    "hash": "6517d2ee0815ffb54783b5ebd71ae76a",
    "name": "placeholder_timing",
    "type": "png"
  });
},11165,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 108,
    "height": 108,
    "scales": [1],
    "hash": "1771e3c4faea97f705c1cc7e31861747",
    "name": "color_off",
    "type": "png"
  });
},11168,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/MainPage",
    "width": 126,
    "height": 126,
    "scales": [1],
    "hash": "06d49faf56cb8601807cf51a69842740",
    "name": "rings",
    "type": "jpg"
  });
},11171,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/GuardSetting",
    "width": 54,
    "height": 54,
    "scales": [1],
    "hash": "800d2a59c436314c1d3f05e52869868a",
    "name": "lumi_gateway_ifttt_if_icon",
    "type": "png"
  });
},11174,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/GuardSetting",
    "width": 54,
    "height": 54,
    "scales": [1],
    "hash": "e0d219176a4ffd7b5af7810674f6c763",
    "name": "lumi_gateway_ifttt_then_icon",
    "type": "png"
  });
},11177,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/com.lumi.linuxHub/Resources/GuardSetting",
    "width": 6,
    "height": 10,
    "scales": [2],
    "hash": "6977dd2b9416c2003c9c0ca5f48c25d1",
    "name": "select_icon",
    "type": "png"
  });
},11180,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var _de = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _en = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _es = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _fr = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _id = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _it = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _ja = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _ko = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _nl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _pl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ru = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _th = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _tr = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _zhHans = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _zhHantHK = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _zhHant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var LHLocalizableString = new _LHCommonFunction.LHLocalizedStrings({
    de: _de.default,
    en: _en.default,
    es: _es.default,
    fr: _fr.default,
    id: _id.default,
    it: _it.default,
    ja: _ja.default,
    ko: _ko.default,
    nl: _nl.default,
    pl: _pl.default,
    ru: _ru.default,
    th: _th.default,
    tr: _tr.default,
    zh: _zhHans.default,
    zh_hk: _zhHantHK.default,
    zh_tw: _zhHant.default
  });
  exports.default = LHLocalizableString;
},11183,[14305,10004,11186,11189,11192,11195,11198,11201,11204,11207,11210,11213,11216,11219,11222,11225,11228,11231]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var de = {
    "mi_linuxHub_guard_arming_log": "Alarmprotokoll",
    "mi_linuxHub_waring_guard_open": "Schutz aktiviert. Tippen um es zu deaktivieren",
    "mi_linuxHub_waring_guard_close": "Schutz deaktiviert. Tippen um es zu aktivieren",
    "mi_linuxHub_main_light_intensity": "Helligkeit",
    "mi_linuxHub_main_timing_light": "Timer der Farblampe",
    "mi_linuxHub_home_coloured_light_close": "Tippen Sie hier, um es zu deaktivieren",
    "mi_linuxHub_home_coloured_light_open": "Tippen Sie hier, um ihn zu deaktivieren",
    "mi_linuxHub_setting_nightlight": "Induktions-Nachtlicht",
    "mi_linuxHub_setting_volume_setting": "Lautstärke-Einstellungen",
    "mi_linuxHub_setting_alarmclock": "Wecker",
    "mi_linuxHub_setting_doorbell": "Türklingel",
    "mi_linuxHub_setting_volume_doorbell": "Lautstärke der Türklingel",
    "mi_linuxHub_setting_volume_tip": "Lautstärke-Aufforderung",
    "mi_linuxHub_setting_volume_alarm": "Alarmlautstärke",
    "mi_linuxHub_setting_nightlight_switch_comment": "Das Nachtlicht schaltet sich bei Dunkelheit automatisch ein",
    "mi_linuxHub_setting_nightlight_holdtime": "Verzögerungszeit für das Ausschalten des Lichts, nachdem die Personen das Gebäude verlassen haben",
    "mi_linuxHub_setting_push": "Telefonische Benachrichtigung",
    "mi_linuxHub_setting_doorbell_tone1": "Ton der Türklingel",
    "mi_linuxHub_setting_doorbell_tone2": "Türklopfgeräusch",
    "mi_linuxHub_setting_doorbell_tone3": "Lustiger Ton",
    "mi_linuxHub_setting_doorbell_tone4": "Wecker-Ton",
    "mi_linuxHub_setting_doorbell_tone5": "Ich wünsche Ihnen viel Glück und viel Erfolg. Alles läuft zuverlässig und reibungslos",
    "mi_linuxHub_setting_doorbell_tone6": "Macht das Leben einfacher und Sie erhalten mehr als Sie je erwartet haben",
    "mi_linuxHub_setting_doorbell_tone7": "Öffnen Sie die Tür und übernehmen Sie das rote Paket",
    "mi_linuxHub_setting_doorbell_tone8": "Musikalischer Kracher",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Die Steuerung ist nicht möglich, da keine Auslösevorrichtung mit der Steuerzentrale gekoppelt ist. Bitte fragen Sie den Besitzer der Steuerzentrale, ob er zuerst ein Auslösegerät hinzufügen möchte.",
    "mi_linuxHub_guard_go_buy": "Kaufen",
    "mi_linuxHub_guard_sub_device_no_config": "Einstellen des Alarmauslösegeräts",
    "mi_linuxHub_guard_share_sub_device_no_config": "Bitten Sie den Besitzer der Steuerzentrale, ein Alarmauslösegerät einzustellen.",
    "mi_linuxHub_guard_go_config": "Zu den Einstellungen",
    "mi_linuxHub_guard_can_not_open": "Kann nicht aktiviert werden",
    "mi_linuxHub_guard_save_fail": "Speichern fehlgeschlagen, bitte versuchen Sie es später erneut.",
    "mi_linuxHub_scene_launch": "Wenn eine Bedingung erfüllt ist",
    "mi_linuxHub_scene_action": "Dann",
    "mi_linuxHub_nightlight_open": "Nachtlicht einschalten",
    "mi_linuxHub_nightlight_motion": "Bewegung erkannt",
    "mi_linuxHub_guard_trigger_alarm_device": "Warnauslösegerät",
    "mi_linuxHub_guard_guardian_countdown": "Schutzes Aktivierung Countdown",
    "mi_linuxHub_arming_ring": "Alarm-Klingelton",
    "mi_linuxHub_arming_always_ringing": "Durchgehendes Klingeln",
    "mi_linuxHub_arming_mute": "Stumm",
    "mi_linuxHub_arming_always_flashing": "Immer klingeln",
    "mi_linuxHub_arming_not_flashing": "Kein Blinzeln",
    "mi_linuxHub_second": "Sekunden",
    "mi_linuxHub_arming_holdtime_0": "Jetzt in Kraft treten",
    "mi_linuxHub_arming_tone_name1": "Polizeiauto Ton 1",
    "mi_linuxHub_arming_tone_name2": "Polizeiauto Ton 2",
    "mi_linuxHub_arming_tone_name3": "Sicherheitsstörgeräusch",
    "mi_linuxHub_arming_tone_name4": "Raketen-Countdown",
    "mi_linuxHub_arming_tone_name5": "Geisterschrei",
    "mi_linuxHub_arming_tone_name6": "Gewehrschuss",
    "mi_linuxHub_arming_tone_name7": "Kampfgeräusch",
    "mi_linuxHub_arming_tone_name8": "Einbruchalarm",
    "mi_linuxHub_arming_tone_name9": "Bellen",
    "mi_linuxHub_lazy_clock_list": "Weckerliste",
    "mi_linuxHub_lazy_clock_close_way": "Wecker im Aus-Zustand",
    "mi_linuxHub_numbers": " Stck.",
    "mi_linuxHub_lazy_clock_gateway_choose": "Einmaliges Drücken (erforderlich)",
    "mi_linuxHub_magnet_open": "Ein",
    "mi_linuxHub_switch_click_once": "Klicken",
    "mi_linuxHub_lazy_clock_close": "Wecker deaktivieren",
    "mi_linuxHub_lazy_clock_list_empty": "Kein Wecker hinzugefügt",
    "mi_linuxHub_bell_no_sub_device_tip": "Es gibt keine Geräte, die mit dieser Steuerzentrale gekoppelt sind, die zum Auslösen der Türklingel verwendet werden können, wie z.B. Bewegungssensor, Fenster- und Türsensor oder drahtloser Schalter.",
    "mi_linuxHub_clock_tone1": "Mi Mix",
    "mi_linuxHub_clock_tone2": "Enthusiastisch",
    "mi_linuxHub_clock_tone3": "Klassische Gitarre",
    "mi_linuxHub_clock_tone4": "Ice World Piano",
    "mi_linuxHub_clock_tone5": "Freizeit",
    "mi_linuxHub_clock_tone6": "Kindheit",
    "mi_linuxHub_clock_tone7": "Morning Streamlet",
    "mi_linuxHub_clock_tone8": "Musik-Box",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "Alarmton",
    "mi_linuxHub_play_specific_tone": "Wiedergabe des angegebenen Klingeltons",
    "mi_linuxHub_offline": "Offline",
    "mi_linuxHub_guard_guide_tip": "Schutzeinstellungen sind hier.",
    "mi_linuxHub_guard_guide_next": "Weiter",
    "mi_linuxHub_light_guide_tip": "Zeitgesteuerte Farblampe und automatische Nachtlicht-Einstellungen sind hier",
    "mi_linuxHub_ring_the_bell": "Klingeln an der Türklingel",
    "mi_linuxHub_alarm": "Alarm",
    "mi_linuxHub_send_phone_msg": "Benachrichtigungen an Telefon senden",
    "mi_linuxHub_go_back_title": "Beenden",
    "mi_linuxHub_go_back_content": "Änderungen verwerfen und jetzt beenden?",
    "mi_linuxHub_nightlight_commont": "Wenn sich das {value} in einer dunklen Umgebung befindet",
    "mi_linuxHub_nightlight_no_device": "Es gibt keinen Bewegungsmelder, der mit der Steuerzentrale gekoppelt ist, mit der das Nachtlicht ausgelöst werden kann.",
    "mi_linuxHub_nightlight_no_opendevice": "Konfigurieren Sie mindestens einen Bewegungssensor, um das Nachtlicht auszulösen.",
    "mi_linuxHub_linkage_alarm_footer_text": "Wenn die Alarm-Link-Funktion der Steuerzentrale aktiviert ist und eine Steuerzentrale ausgelöst wird, werden der Alarmklingelton und das Blinklicht aller Steuerzentralen ausgelöst.",
    "mi_linuxHub_lazy_clock_delete": "Ausgewählten Timer löschen?",
    "mi_linuxHub_guard_no_sub_device_tip": "Es gibt keine Geräte, die mit dieser Steuerzentrale gekoppelt sind, die zum Auslösen des Alarms verwendet werden können, wie z.B. Bewegungssensor, Fenster- und Türsensor oder drahtloser Schalter.",
    "mi_linuxHub_setting_language": "Benachrichtigungssprache",
    "mi_linuxHub_setting_protect_delete": "Löschschutz",
    "mi_linuxHub_setting_protect_delete_tip": "Dieses Gerät kann nur über die App gelöscht werden.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Klingelton",
    "mi_linuxHub_setting_volume": "Lautstärke",
    "mi_linuxHub_setting_nightlight_tomorrow": "Am nächsten tag",
    "mi_linuxHub_setting_nightlight_allday": "Den ganzen Tag",
    "mi_linuxHub_setting_alarm_motion_detail": "Alarmierung bei vorbeigehenden Personen",
    "mi_linuxHub_setting_alarm_magnet_detail": "Alarm bei geöffneter Tür/Fenster",
    "mi_linuxHub_setting_alarm_switch_detail": "Benachrichtigung, wenn jemand die Taste drückt",
    "mi_linuxHub_setting_alarm_cube_detail": "Morning Stream Llet",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Der Alarm wird ausgegeben, wenn der Vibrationssensor nach einer Stillstandszeit von 2 Minuten ausgelöst wird",
    "mi_linuxHub_arming_log_magnet_open": "Auslösealarm aktivieren",
    "mi_linuxHub_arming_log_motion_motion": "Alarmierung bei vorbeigehenden Personen an",
    "mi_linuxHub_arming_log_switch_click": "Durch Drücken der Taste wird ein Alarm ausgelöst",
    "mi_linuxHub_arming_log_cube_alert": "Magic Cube Auslösealarm",
    "mi_linuxHub_arming_log_vibration_alarm": "Durch Vibration ausgelöster Alarm",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Auslöseralarm bei geöffneter Tür und geöffnetem Fenster",
    "mi_linuxHub_arming_log_camera_detect_motion": "Bewegungsalarm erkannt",
    "mi_linuxHub_arming_volume_length": "Alarmdauer",
    "mi_linuxHub_timer": "Planen",
    "mi_linuxHub_custom": "Angepasst",
    "mi_linuxHub_system_ring": "Systemklingelton",
    "mi_linuxHub_add": "Hinzufügen",
    "mi_linuxHub_timersetting_repeat": "Wiederholen",
    "mi_linuxHub_timersetting_repeat_once": "Einmal ausführen",
    "mi_linuxHub_timersetting_repeat_today": "Heute",
    "mi_linuxHub_timersetting_repeat_tomorrow": "Morgen",
    "mi_linuxHub_timersetting_repeat_everyday": "Jeden tag",
    "mi_linuxHub_timersetting_repeat_workday": "Mo. bis Fr.",
    "mi_linuxHub_timersetting_repeat_weekend": "Wochenende",
    "mi_linuxHub_tone_volume": "Klingeltonlautstärke",
    "mi_linuxHub_linkage_alarm": "Verknüpfungsalarm",
    "mi_linuxHub_linkage_alarm_hint_detail": "Verknüpfung und Benachrichtigung mit anderen Hubs, Erhöhung der Sicherheitsstufe",
    "mi_linuxHub_nightlight_smart_light": "Jemand ging vorbei, das Nachtlicht wurde beleuchtet",
    "mi_linuxHub_nightlight_delay_close_min": "Schalten Sie das Nachtlicht in {value} Minuten aus",
    "mi_linuxHub_setting_nightlight_on": "Ein",
    "mi_linuxHub_device_offline": "Gerät ist offline",
    "mi_linuxHub_timer_light_list_empty": "Kein Timer hinzugefügt",
    "mi_linuxHub_date_mon": "Mo",
    "mi_linuxHub_date_tues": "Di",
    "mi_linuxHub_date_wed": "Mi",
    "mi_linuxHub_date_thur": "Do",
    "mi_linuxHub_date_fri": "Fr",
    "mi_linuxHub_date_sat": "Sa",
    "mi_linuxHub_date_sun": "So",
    "mi_linuxHub_arming_light_length": "Lichtblinkdauer",
    "mi_linuxHub_linkage_alarm_dis": "Verknüpfungsalarm abgebrochen",
    "mi_linuxHub_home_tab_guard": "Schutz",
    "mi_linuxHub_home_tab_coloured_light": "Farbiges Licht",
    "mi_linuxHub_guardSetting": "Schutzeinstellungen",
    "mi_linuxHub_nightlight_timer": "Induktionszeit",
    "mi_linuxHub_main_sub_device": "Untergerät",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Alarmtöne & Lichteinstellungen",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Verbindung mit anderen Hubs für Sammelalarme",
    "mi_linuxHub_guard_guard_timer": "Wächter Timing",
    "mi_linuxHub_waring_guard_opening": "Wächter bereit zu öffnen",
    "mi_linuxHub_timer_light_timer_light_period": "Zeitraum",
    "mi_linuxHub_timer_light_timer_on": "Zeitlich festgelegt am",
    "mi_linuxHub_timer_light_timer_off": "Ausgeschaltet",
    "mi_linuxHub_timer_light_timer_on_no_set": "Startzeit nicht eingestellt",
    "mi_linuxHub_timer_light_timer_off_no_set": "Schließzeit nicht eingestellt",
    "mi_linuxHub_timer_light_timer_time_after": "Startzeit nach der Endzeit",
    "mi_linuxHub_linkage_alarm_number_ten": "Kann nur bis zu 10 Gateway-Alarme auswählen",
    "mi_linuxHub_sure_delete": "Möchten Sie das ausgewählte Element wirklich löschen?",
    "mi_linuxHub_add_lzayclock": "Fügen Sie einen Alarm hinzu",
    "mi_linuxHub_repeat_timer_title": "Option wiederholen",
    "mi_linuxHub_repeat_self_timer_title": "Benutzerdefinierte Wiederholung",
    "mi_linuxHub_lazy_clock_name": "Wecker",
    "mi_linuxHub_nightlight_motion_limit": "Kann nur bis zu 9 Sensoren für den menschlichen Körper auswählen",
    "mi_linuxHub_must_choose": "Erforderlich",
    "mi_linuxHub_timer_light_name": "Farblicht-Timer"
  };
  exports.default = de;
},11186,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var en = {
    "mi_linuxHub_guard_arming_log": "Alert log",
    "mi_linuxHub_waring_guard_open": "Guarding enabled. Tap to disable it",
    "mi_linuxHub_waring_guard_close": "Guarding disabled. Tap to enable it",
    "mi_linuxHub_main_light_intensity": "Brightness",
    "mi_linuxHub_main_timing_light": "Timer colored lamp",
    "mi_linuxHub_home_coloured_light_close": "Tap to disable it",
    "mi_linuxHub_home_coloured_light_open": "Tap to enable it",
    "mi_linuxHub_setting_nightlight": "Induction night light",
    "mi_linuxHub_setting_volume_setting": "Volume settings",
    "mi_linuxHub_setting_alarmclock": "Alarm clock",
    "mi_linuxHub_setting_doorbell": "Doorbell",
    "mi_linuxHub_setting_volume_doorbell": "Doorbell volume",
    "mi_linuxHub_setting_volume_tip": "Prompt volume",
    "mi_linuxHub_setting_volume_alarm": "Alert volume",
    "mi_linuxHub_setting_nightlight_switch_comment": "The night light automatically turns on in a dark place",
    "mi_linuxHub_setting_nightlight_holdtime": "Delay time of turning off the light after people leave",
    "mi_linuxHub_setting_push": "Phone notification",
    "mi_linuxHub_setting_doorbell_tone1": "Doorbell tone",
    "mi_linuxHub_setting_doorbell_tone2": "Door knocking sound",
    "mi_linuxHub_setting_doorbell_tone3": "Funny tone",
    "mi_linuxHub_setting_doorbell_tone4": "Alarm clock tone",
    "mi_linuxHub_setting_doorbell_tone5": "Wish you good fortune and every success. Everything goes well and smoothly",
    "mi_linuxHub_setting_doorbell_tone6": "May prosperity be with you and may you always get more than you wish for",
    "mi_linuxHub_setting_doorbell_tone7": "Open the door and receive the red packet",
    "mi_linuxHub_setting_doorbell_tone8": "Musical firecracker",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Unable to control, since there is no trigger device paired with the control hub. Please ask the owner of the control hub to add a trigger device first.",
    "mi_linuxHub_guard_go_buy": "Purchase",
    "mi_linuxHub_guard_sub_device_no_config": "Set the alert trigger device",
    "mi_linuxHub_guard_share_sub_device_no_config": "Ask the owner of the control hub to set an alert trigger device.",
    "mi_linuxHub_guard_go_config": "Go to settings",
    "mi_linuxHub_guard_can_not_open": "Unable to enable",
    "mi_linuxHub_guard_save_fail": "Could not save, please try again.",
    "mi_linuxHub_scene_launch": "If any condition is met",
    "mi_linuxHub_scene_action": "Then",
    "mi_linuxHub_nightlight_open": "Turn on the night light",
    "mi_linuxHub_nightlight_motion": "Motion detected",
    "mi_linuxHub_guard_trigger_alarm_device": "Alert trigger device",
    "mi_linuxHub_guard_guardian_countdown": "Guard activation countdown",
    "mi_linuxHub_arming_ring": "Alert ringtone",
    "mi_linuxHub_arming_always_ringing": "Ring continuously",
    "mi_linuxHub_arming_mute": "Mute",
    "mi_linuxHub_arming_always_flashing": "Always ring",
    "mi_linuxHub_arming_not_flashing": "No blink",
    "mi_linuxHub_second": "Second",
    "mi_linuxHub_arming_holdtime_0": "Take effect now",
    "mi_linuxHub_arming_tone_name1": "Police car tone 1",
    "mi_linuxHub_arming_tone_name2": "Police car tone 2",
    "mi_linuxHub_arming_tone_name3": "Safety incident sound",
    "mi_linuxHub_arming_tone_name4": "Missile countdown",
    "mi_linuxHub_arming_tone_name5": "Ghost cry",
    "mi_linuxHub_arming_tone_name6": "Gunshot",
    "mi_linuxHub_arming_tone_name7": "Battle sound",
    "mi_linuxHub_arming_tone_name8": "Air raid alarm",
    "mi_linuxHub_arming_tone_name9": "Barking",
    "mi_linuxHub_lazy_clock_list": "Alarm clock list",
    "mi_linuxHub_lazy_clock_close_way": "Alarm clock off mode",
    "mi_linuxHub_numbers": "pcs",
    "mi_linuxHub_lazy_clock_gateway_choose": "Single press (required)",
    "mi_linuxHub_magnet_open": "On",
    "mi_linuxHub_switch_click_once": "Click",
    "mi_linuxHub_lazy_clock_close": "Disable alarm clock",
    "mi_linuxHub_lazy_clock_list_empty": "No alarm clock added",
    "mi_linuxHub_bell_no_sub_device_tip": "There are no devices paired with this control hub that can be used to trigger the doorbell, such as a motion sensor, window and door sensor, or wireless switch.",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "Guitar Classic",
    "mi_linuxHub_clock_tone4": "Ice World Piano",
    "mi_linuxHub_clock_tone5": "Leisure Time",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "Morning Stream Llet",
    "mi_linuxHub_clock_tone8": "Music Box",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "Alert tone",
    "mi_linuxHub_play_specific_tone": "Play the specified ringtone",
    "mi_linuxHub_offline": "Offline",
    "mi_linuxHub_guard_guide_tip": "Guard settings are here.",
    "mi_linuxHub_guard_guide_next": "Next",
    "mi_linuxHub_light_guide_tip": "Timer colored lamp and Induction night light settings are here.",
    "mi_linuxHub_ring_the_bell": "Ring doorbell",
    "mi_linuxHub_alarm": "Alert",
    "mi_linuxHub_send_phone_msg": "Send notifications to phone",
    "mi_linuxHub_go_back_title": "Exit",
    "mi_linuxHub_go_back_content": "Discard changes, and exit now?",
    "mi_linuxHub_nightlight_commont": "When the {value} is in a dark environment",
    "mi_linuxHub_nightlight_no_device": "There is no motion sensor paired with the control hub that can be used to trigger the night light.",
    "mi_linuxHub_nightlight_no_opendevice": "Configure at least one motion sensor to trigger the night light.",
    "mi_linuxHub_linkage_alarm_footer_text": "When the control hub's alert link function is enabled, and a control hubs is triggered, the alert ringtone and blinking light of all control hubs will be triggered.",
    "mi_linuxHub_lazy_clock_delete": "Delete the selected timer?",
    "mi_linuxHub_guard_no_sub_device_tip": "There are no devices paired with this control hub that can be used to trigger the alert, such as a motion sensor, window and door sensor, or wireless switch.",
    "mi_linuxHub_setting_language": "Notification language",
    "mi_linuxHub_setting_protect_delete": "Deletion protection",
    "mi_linuxHub_setting_protect_delete_tip": "This device can only be deleted via the app.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Ringtone",
    "mi_linuxHub_setting_volume": "Volume",
    "mi_linuxHub_setting_nightlight_tomorrow": "Tomorrow",
    "mi_linuxHub_setting_nightlight_allday": "All Day",
    "mi_linuxHub_setting_alarm_motion_detail": "Alarm on someone passing by",
    "mi_linuxHub_setting_alarm_magnet_detail": "Door/window open alarm",
    "mi_linuxHub_setting_alarm_switch_detail": "Alarm on someone pressing button",
    "mi_linuxHub_setting_alarm_cube_detail": "Alarm is sent when the magic cube is triggered after keeping motionless for 1 minute",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Alarm is sent when the movement sticker is triggered after keeping motionless for 2 minute",
    "mi_linuxHub_arming_log_magnet_open": "Enabling triggers alarm",
    "mi_linuxHub_arming_log_motion_motion": "Alerts when someone passes by",
    "mi_linuxHub_arming_log_switch_click": "Pressing button triggers alarm",
    "mi_linuxHub_arming_log_cube_alert": "Magic cube triggering alarm",
    "mi_linuxHub_arming_log_vibration_alarm": "Vibration triggers alarm",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Door and window open trigger alert",
    "mi_linuxHub_arming_log_camera_detect_motion": "Trigger the alarm when motion is detected",
    "mi_linuxHub_arming_volume_length": "Alert duration",
    "mi_linuxHub_timer": "Schedule",
    "mi_linuxHub_custom": "Custom",
    "mi_linuxHub_system_ring": "System Ringtone",
    "mi_linuxHub_add": "Add",
    "mi_linuxHub_timersetting_repeat": "Repeat",
    "mi_linuxHub_timersetting_repeat_once": "Execute once",
    "mi_linuxHub_timersetting_repeat_today": "Today",
    "mi_linuxHub_timersetting_repeat_tomorrow": "Tomorrow",
    "mi_linuxHub_timersetting_repeat_everyday": "Everyday",
    "mi_linuxHub_timersetting_repeat_workday": "Mon to Fri",
    "mi_linuxHub_timersetting_repeat_weekend": "Weekend",
    "mi_linuxHub_tone_volume": "Ringtone volume",
    "mi_linuxHub_linkage_alarm": "Linkage alarm",
    "mi_linuxHub_linkage_alarm_hint_detail": "Linkage and alert with other Hub, enhance security level",
    "mi_linuxHub_nightlight_smart_light": "The night light turns on when people pass by",
    "mi_linuxHub_nightlight_delay_close_min": "Turn off the night light in {value} min",
    "mi_linuxHub_setting_nightlight_on": "On",
    "mi_linuxHub_device_offline": "Device is offline",
    "mi_linuxHub_timer_light_list_empty": "No timer added",
    "mi_linuxHub_date_mon": "Mon",
    "mi_linuxHub_date_tues": "Tue",
    "mi_linuxHub_date_wed": "Wed",
    "mi_linuxHub_date_thur": "Thu",
    "mi_linuxHub_date_fri": "Fri",
    "mi_linuxHub_date_sat": "Sat",
    "mi_linuxHub_date_sun": "Sun",
    "mi_linuxHub_arming_light_length": "Light blinking duration",
    "mi_linuxHub_linkage_alarm_dis": "Linkage alarm canceled",
    "mi_linuxHub_home_tab_guard": "Guard",
    "mi_linuxHub_home_tab_coloured_light": "Colored light",
    "mi_linuxHub_guardSetting": "Guard settings",
    "mi_linuxHub_nightlight_timer": "Effective Period",
    "mi_linuxHub_main_sub_device": "Child device",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Alert tones & light settings",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Link with other hubs for collective alerts",
    "mi_linuxHub_guard_guard_timer": "Guard Timer",
    "mi_linuxHub_waring_guard_opening": "Guard to be enabled",
    "mi_linuxHub_timer_light_timer_light_period": "Set timed period",
    "mi_linuxHub_timer_light_timer_on": "Timed starting",
    "mi_linuxHub_timer_light_timer_off": "Timed ending",
    "mi_linuxHub_timer_light_timer_on_no_set": "Start Time is not set",
    "mi_linuxHub_timer_light_timer_off_no_set": "End Time is not set",
    "mi_linuxHub_timer_light_timer_time_after": "The start time is after the end time",
    "mi_linuxHub_linkage_alarm_number_ten": "Only 10 Hubs at most can be set to give off alarm",
    "mi_linuxHub_sure_delete": "Delete the selected choice?",
    "mi_linuxHub_add_lzayclock": "Add alarm clock",
    "mi_linuxHub_repeat_timer_title": "Repetition",
    "mi_linuxHub_repeat_self_timer_title": "Customize Repetition",
    "mi_linuxHub_lazy_clock_name": "Alarm Clock Timer",
    "mi_linuxHub_nightlight_motion_limit": "At most 9 Motion Sensors can be chosed",
    "mi_linuxHub_must_choose": "Required",
    "mi_linuxHub_timer_light_name": "Color lights timer"
  };
  exports.default = en;
},11189,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var es = {
    "mi_linuxHub_guard_arming_log": " Registro de alarma",
    "mi_linuxHub_waring_guard_open": "Protección activada Pulse para desactivarla",
    "mi_linuxHub_waring_guard_close": "Protección desactivada Pulse para activarla",
    "mi_linuxHub_main_light_intensity": "Brillo",
    "mi_linuxHub_main_timing_light": "Temporizador de la lámpara de color",
    "mi_linuxHub_home_coloured_light_close": "Toque para desactivarla",
    "mi_linuxHub_home_coloured_light_open": "Toque para activarla",
    "mi_linuxHub_setting_nightlight": "Luz de inducción nocturna",
    "mi_linuxHub_setting_volume_setting": "Ajustes de volumen",
    "mi_linuxHub_setting_alarmclock": "Despertador apacible",
    "mi_linuxHub_setting_doorbell": "Timbre",
    "mi_linuxHub_setting_volume_doorbell": "Volumen del timbre",
    "mi_linuxHub_setting_volume_tip": "Volumen de la notificación",
    "mi_linuxHub_setting_volume_alarm": "Volumen de la alarma",
    "mi_linuxHub_setting_nightlight_switch_comment": "La luz nocturna se enciende automáticamente en espacios oscuros",
    "mi_linuxHub_setting_nightlight_holdtime": "Tiempo de retardo para apagar la luz después de que la persona se haya ido",
    "mi_linuxHub_setting_push": "Notificación telefónica",
    "mi_linuxHub_setting_doorbell_tone1": "Tono del timbre",
    "mi_linuxHub_setting_doorbell_tone2": "Sonido de llamar a la puerta",
    "mi_linuxHub_setting_doorbell_tone3": "Tono gracioso",
    "mi_linuxHub_setting_doorbell_tone4": "Tono de despertador",
    "mi_linuxHub_setting_doorbell_tone5": "Le deseo buena suerte y que tenga mucho éxito. Todo va bien y sin problemas",
    "mi_linuxHub_setting_doorbell_tone6": "Que la prosperidad esté de su lado y que siempre obtenga más de lo que desea",
    "mi_linuxHub_setting_doorbell_tone7": "Abra la puerta y reciba el paquete rojo",
    "mi_linuxHub_setting_doorbell_tone8": "Petardo musical",
    "mi_linuxHub_guard_share_no_sub_device_tip": "No se puede controlar, ya que no hay un dispositivo de activación emparejado con el centro de control. Solicite al propietario del centro de control que primero agregue un dispositivo de activación.",
    "mi_linuxHub_guard_go_buy": "Adquirir",
    "mi_linuxHub_guard_sub_device_no_config": "Establecer el dispositivo de activación de alarma",
    "mi_linuxHub_guard_share_sub_device_no_config": "Solicite al propietario del centro de control que establezca un dispositivo de activación de alarmas.",
    "mi_linuxHub_guard_go_config": "Vaya a Configuración",
    "mi_linuxHub_guard_can_not_open": "No se puede activar",
    "mi_linuxHub_guard_save_fail": "No se ha podido guardar, inténtelo de nuevo más tarde.",
    "mi_linuxHub_scene_launch": "Si se cumple alguna condición",
    "mi_linuxHub_scene_action": "Entonces",
    "mi_linuxHub_nightlight_open": "Encender la luz de nocturna",
    "mi_linuxHub_nightlight_motion": "Alguien se mueve",
    "mi_linuxHub_guard_trigger_alarm_device": "Dispositivo de activación de alarma",
    "mi_linuxHub_guard_guardian_countdown": "Cuenta atrás activación de guardia",
    "mi_linuxHub_arming_ring": "Tono de alarma",
    "mi_linuxHub_arming_always_ringing": "Constante",
    "mi_linuxHub_arming_mute": "Silencio",
    "mi_linuxHub_arming_always_flashing": "Sonar siempre",
    "mi_linuxHub_arming_not_flashing": "Sin parpadeo",
    "mi_linuxHub_second": "Segundo",
    "mi_linuxHub_arming_holdtime_0": "Tener efecto ahora",
    "mi_linuxHub_arming_tone_name1": "Coche de policía 1",
    "mi_linuxHub_arming_tone_name2": "Coche de policía 2",
    "mi_linuxHub_arming_tone_name3": "Sonido de incidente de seguridad",
    "mi_linuxHub_arming_tone_name4": "Cuenta atrás de misil",
    "mi_linuxHub_arming_tone_name5": "Grito de fantasma",
    "mi_linuxHub_arming_tone_name6": "Rifle francotirador",
    "mi_linuxHub_arming_tone_name7": "Sonido de batalla",
    "mi_linuxHub_arming_tone_name8": "Alarma de ataque aéreo",
    "mi_linuxHub_arming_tone_name9": "Ladrido",
    "mi_linuxHub_lazy_clock_list": "Lista del despertador",
    "mi_linuxHub_lazy_clock_close_way": "Modo despertador desactivado",
    "mi_linuxHub_numbers": "Unidades",
    "mi_linuxHub_lazy_clock_gateway_choose": "Presión simple (requerida)",
    "mi_linuxHub_magnet_open": "Encendido",
    "mi_linuxHub_switch_click_once": "Clic",
    "mi_linuxHub_lazy_clock_close": "Despertador apacible",
    "mi_linuxHub_lazy_clock_list_empty": "Sin despertador agregado",
    "mi_linuxHub_bell_no_sub_device_tip": "No hay dispositivos vinculados con este centro de control que se puedan usar para activar el timbre, como un sensor de movimiento, de ventana y de puerta, o un interruptor inalámbrico.",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Entusiasta",
    "mi_linuxHub_clock_tone3": "Guitarra clásica",
    "mi_linuxHub_clock_tone4": "Piano mundo de hielo",
    "mi_linuxHub_clock_tone5": "Tiempo libre",
    "mi_linuxHub_clock_tone6": "Infancia",
    "mi_linuxHub_clock_tone7": "Corriente mañanera",
    "mi_linuxHub_clock_tone8": "Caja de música",
    "mi_linuxHub_clock_tone9": "Naranja",
    "mi_linuxHub_clock_tone10": "Pensador",
    "mi_linuxHub_alarm_music": "Tono de alerta",
    "mi_linuxHub_play_specific_tone": "Suena el tono de llamada especificado",
    "mi_linuxHub_offline": "Sin conexión",
    "mi_linuxHub_guard_guide_tip": "La configuración de guardia está aquí.",
    "mi_linuxHub_guard_guide_next": "Siguiente",
    "mi_linuxHub_light_guide_tip": "La lámpara de color temporizada y la configuración automática de la luz nocturna están aquí.",
    "mi_linuxHub_ring_the_bell": "Timbre de la puerta",
    "mi_linuxHub_alarm": "Alerta",
    "mi_linuxHub_send_phone_msg": "Envía notificaciones al teléfono",
    "mi_linuxHub_go_back_title": "Salir",
    "mi_linuxHub_go_back_content": "¿Descartar los cambios y salir ahora?",
    "mi_linuxHub_nightlight_commont": "Cuando el {value} está en un ambiente oscuro",
    "mi_linuxHub_nightlight_no_device": "No hay un sensor de movimiento vinculado con el centro de control, que pueda ser usado para activar la luz nocturna.",
    "mi_linuxHub_nightlight_no_opendevice": "Configure al menos un sensor de movimiento para activar la luz nocturna.",
    "mi_linuxHub_linkage_alarm_footer_text": "Cuando la función de enlace de alarma del centro de control está activada y se gatilla un centro de control, se activará el tono de llamada de alarma y la luz intermitente de todos los centros de control.",
    "mi_linuxHub_lazy_clock_delete": "¿Quiere eliminar el temporizador seleccionado?",
    "mi_linuxHub_guard_no_sub_device_tip": "No hay dispositivos vinculados con este centro de control que se puedan usar para activar la alarma, como un sensor de movimiento, de ventana y de puerta, o un interruptor inalámbrico.",
    "mi_linuxHub_setting_language": "Idioma de notificación",
    "mi_linuxHub_setting_protect_delete": "Protección contra eliminación",
    "mi_linuxHub_setting_protect_delete_tip": "Este dispositivo solo se puede eliminar a través de la aplicación.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Tono de llamada",
    "mi_linuxHub_setting_volume": "Volumen",
    "mi_linuxHub_setting_nightlight_tomorrow": "Al dia siguiente",
    "mi_linuxHub_setting_nightlight_allday": "Todo el dia",
    "mi_linuxHub_setting_alarm_motion_detail": "Hacer sonar la alarma cuando alguien pase",
    "mi_linuxHub_setting_alarm_magnet_detail": "Alarma de puerta o ventana abierta",
    "mi_linuxHub_setting_alarm_switch_detail": "Hacer sonar la alarma cuando alguien pulse el botón",
    "mi_linuxHub_setting_alarm_cube_detail": "La alarma se envía cuando el Magic Cube se activa después de estar inmóvil durante 1 minuto",
    "mi_linuxHub_setting_alarm_vibrate_detail": "La alarma se envía cuando la pegatina de movimiento se activa después de estar inmóvil durante 2 minutos",
    "mi_linuxHub_arming_log_magnet_open": "Habilitando los activadores de la alarma",
    "mi_linuxHub_arming_log_motion_motion": "Activar la alarma cuando alguien pase",
    "mi_linuxHub_arming_log_switch_click": "Pulsar el botón activa la alarma",
    "mi_linuxHub_arming_log_cube_alert": "El Magic Cube activa la alarma",
    "mi_linuxHub_arming_log_vibration_alarm": "Alarma activada por vibración",
    "mi_linuxHub_arming_log_vibration_alarm_open": "El sensor de puertas y ventanas activa la alerta",
    "mi_linuxHub_arming_log_camera_detect_motion": "Movimiento activado alarma detectada",
    "mi_linuxHub_arming_volume_length": "Duración de la alerta",
    "mi_linuxHub_timer": "Programar",
    "mi_linuxHub_custom": "Personalizado",
    "mi_linuxHub_system_ring": "Tono de llamada del sistema",
    "mi_linuxHub_add": "Agregar",
    "mi_linuxHub_timersetting_repeat": "Repetir",
    "mi_linuxHub_timersetting_repeat_once": "Ejecutar una vez",
    "mi_linuxHub_timersetting_repeat_today": "Hoy",
    "mi_linuxHub_timersetting_repeat_tomorrow": "Mañana",
    "mi_linuxHub_timersetting_repeat_everyday": "Todos los dias",
    "mi_linuxHub_timersetting_repeat_workday": "De lunes a viernes",
    "mi_linuxHub_timersetting_repeat_weekend": "Fines de semana",
    "mi_linuxHub_tone_volume": "Volumen del tono",
    "mi_linuxHub_linkage_alarm": "Vinculación de la alarma",
    "mi_linuxHub_linkage_alarm_hint_detail": "Vincular con otras centralitas para enviar una alarma, lo que mejora el nivel de seguridad",
    "mi_linuxHub_nightlight_smart_light": "Alguien pasó, la luz de la noche estaba iluminada.",
    "mi_linuxHub_nightlight_delay_close_min": "Apaga la luz nocturna en {value} min",
    "mi_linuxHub_setting_nightlight_on": "Encendido",
    "mi_linuxHub_device_offline": "El dispositivo no tiene conexión",
    "mi_linuxHub_timer_light_list_empty": "Ningún temporizador añadido",
    "mi_linuxHub_date_mon": "Lun.",
    "mi_linuxHub_date_tues": "Mar.",
    "mi_linuxHub_date_wed": "Mié.",
    "mi_linuxHub_date_thur": "Jue.",
    "mi_linuxHub_date_fri": "Vie.",
    "mi_linuxHub_date_sat": "Sáb.",
    "mi_linuxHub_date_sun": "Dom.",
    "mi_linuxHub_arming_light_length": "Duración del parpadeo de la luz",
    "mi_linuxHub_linkage_alarm_dis": "Vinculación de la alarma cancelada",
    "mi_linuxHub_home_tab_guard": "Guardia",
    "mi_linuxHub_home_tab_coloured_light": "Luz con color",
    "mi_linuxHub_guardSetting": "Configuración de guardia",
    "mi_linuxHub_nightlight_timer": "Período de inducción",
    "mi_linuxHub_main_sub_device": "Dispositivo secundario",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Tonos de alerta y ajustes de luz",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Enlace con otros controladores para alertas colectivas",
    "mi_linuxHub_guard_guard_timer": "Temporizador guardián",
    "mi_linuxHub_waring_guard_opening": "Guardian listo para abrir",
    "mi_linuxHub_timer_light_timer_light_period": "Periodo de tiempo",
    "mi_linuxHub_timer_light_timer_on": "Cronometrado en",
    "mi_linuxHub_timer_light_timer_off": "Temporizado",
    "mi_linuxHub_timer_light_timer_on_no_set": "Hora de inicio no establecida",
    "mi_linuxHub_timer_light_timer_off_no_set": "Hora de cierre no establecida",
    "mi_linuxHub_timer_light_timer_time_after": "Hora de inicio después de la hora de finalización",
    "mi_linuxHub_linkage_alarm_number_ten": "Solo puede seleccionar hasta 10 alarmas de puerta de enlace",
    "mi_linuxHub_sure_delete": "¿Estás seguro de que deseas eliminar el elemento seleccionado?",
    "mi_linuxHub_add_lzayclock": "Agregar una alarma",
    "mi_linuxHub_repeat_timer_title": "Repetir opción",
    "mi_linuxHub_repeat_self_timer_title": "Repetición personalizada",
    "mi_linuxHub_lazy_clock_name": "Reloj despertador",
    "mi_linuxHub_nightlight_motion_limit": "Solo puede seleccionar hasta 9 sensores del cuerpo humano",
    "mi_linuxHub_must_choose": "Requerido",
    "mi_linuxHub_timer_light_name": "Temporizador de luces de color"
  };
  exports.default = es;
},11192,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var fr = {
    "mi_linuxHub_guard_arming_log": "Journal d’alertes",
    "mi_linuxHub_waring_guard_open": "Surveillance désactivée Tapoter pour l’activer",
    "mi_linuxHub_waring_guard_close": "Surveillance désactivée Tapoter pour l’activer",
    "mi_linuxHub_main_light_intensity": "Luminosité",
    "mi_linuxHub_main_timing_light": "Lampe colorée avec minuteur",
    "mi_linuxHub_home_coloured_light_close": "Appuyez pour le masquer",
    "mi_linuxHub_home_coloured_light_open": "Appuyez pour l’activer",
    "mi_linuxHub_setting_nightlight": "Éclairage nocturne inductif",
    "mi_linuxHub_setting_volume_setting": "Paramètres du volume",
    "mi_linuxHub_setting_alarmclock": "Réveil",
    "mi_linuxHub_setting_doorbell": "Sonnette",
    "mi_linuxHub_setting_volume_doorbell": "Volume de la sonnette",
    "mi_linuxHub_setting_volume_tip": "Commande du volume",
    "mi_linuxHub_setting_volume_alarm": "Volume de l’alerte",
    "mi_linuxHub_setting_nightlight_switch_comment": "La lumière nocturne s’allume automatiquement dans un lieu sombre",
    "mi_linuxHub_setting_nightlight_holdtime": "Délai de mise hors tension des éclairages après le départ des personnes",
    "mi_linuxHub_setting_push": "Notification par téléphone",
    "mi_linuxHub_setting_doorbell_tone1": "Bruit de la sonnette",
    "mi_linuxHub_setting_doorbell_tone2": "Bruit de coups à la porte",
    "mi_linuxHub_setting_doorbell_tone3": "Ton amusant",
    "mi_linuxHub_setting_doorbell_tone4": "Son du réveil",
    "mi_linuxHub_setting_doorbell_tone5": "Nous vous souhaitons le meilleur. Tout va bien se passer, il n’y a pas plus simple.",
    "mi_linuxHub_setting_doorbell_tone6": "Que la prospérité soit avec vous et que vos vœux soient exaucés.",
    "mi_linuxHub_setting_doorbell_tone7": "Ouvrez la porte et réceptionnez le paquet rouge",
    "mi_linuxHub_setting_doorbell_tone8": "Feu d’artifice musical",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Impossible de contrôler, puisqu’il n’y a aucun dispositif de déclenchement apparié avec le centre de commande. Veuillez demander au propriétaire du centre de commande d’ajouter d’abord un dispositif de déclenchement.",
    "mi_linuxHub_guard_go_buy": "Achat",
    "mi_linuxHub_guard_sub_device_no_config": "Réglez le dispositif déclencheur d’alerte",
    "mi_linuxHub_guard_share_sub_device_no_config": "Demandez au propriétaire du centre de commande de régler un dispositif de déclenchement d’alerte.",
    "mi_linuxHub_guard_go_config": "Accéder aux paramètres",
    "mi_linuxHub_guard_can_not_open": "Impossible d’activer",
    "mi_linuxHub_guard_save_fail": "Enregistrement impossible, veuillez réessayer.",
    "mi_linuxHub_scene_launch": "Au cas où une quelconque condition est satisfaite",
    "mi_linuxHub_scene_action": "Alors",
    "mi_linuxHub_nightlight_open": "Allumer la veilleuse",
    "mi_linuxHub_nightlight_motion": "Mouvement détecté",
    "mi_linuxHub_guard_trigger_alarm_device": "Dispositif de déclenchement d’alerte",
    "mi_linuxHub_guard_guardian_countdown": "Compte à rebours de l’activation de la surveillance",
    "mi_linuxHub_arming_ring": "Son de l’alerte",
    "mi_linuxHub_arming_always_ringing": "Sonne en continu",
    "mi_linuxHub_arming_mute": "Muet",
    "mi_linuxHub_arming_always_flashing": "Toujours sonner",
    "mi_linuxHub_arming_not_flashing": "Pas de clignotement",
    "mi_linuxHub_second": "S",
    "mi_linuxHub_arming_holdtime_0": "Prend effet maintenant",
    "mi_linuxHub_arming_tone_name1": "Son de voiture de police 1",
    "mi_linuxHub_arming_tone_name2": "Son de voiture de police 2",
    "mi_linuxHub_arming_tone_name3": "Alerte d’incident de sécurité",
    "mi_linuxHub_arming_tone_name4": "Compte à rebours des missiles",
    "mi_linuxHub_arming_tone_name5": "Pleurs de fantôme",
    "mi_linuxHub_arming_tone_name6": "Tir d’arme à feu",
    "mi_linuxHub_arming_tone_name7": "Bruit de bataille",
    "mi_linuxHub_arming_tone_name8": "Alarme raid aérien",
    "mi_linuxHub_arming_tone_name9": "Aboiement",
    "mi_linuxHub_lazy_clock_list": "Liste de réveil",
    "mi_linuxHub_lazy_clock_close_way": "Réveil désactivé",
    "mi_linuxHub_numbers": "Pcs",
    "mi_linuxHub_lazy_clock_gateway_choose": "Pression unique (nécessaire)",
    "mi_linuxHub_magnet_open": "Allumés",
    "mi_linuxHub_switch_click_once": "Cliquer",
    "mi_linuxHub_lazy_clock_close": "Désactiver le réveil",
    "mi_linuxHub_lazy_clock_list_empty": "Aucun réveil ajouté",
    "mi_linuxHub_bell_no_sub_device_tip": "Il n’y a aucun dispositif apparié avec ce centre de commande qui puisse être utilisé pour déclencher la sonnette, telle qu’un détecteur de mouvement, un détecteur de fenêtre et de porte ou un commutateur sans fil.",
    "mi_linuxHub_clock_tone1": "Mi Mix",
    "mi_linuxHub_clock_tone2": "Enthusiastic",
    "mi_linuxHub_clock_tone3": "Guitar Classic",
    "mi_linuxHub_clock_tone4": "Ice World Piano",
    "mi_linuxHub_clock_tone5": "Leisure Time",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "Morning Stream Llet",
    "mi_linuxHub_clock_tone8": "Music Box",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "Sonnerie d’alerte",
    "mi_linuxHub_play_specific_tone": "Jouer une sonnerie spécifique",
    "mi_linuxHub_offline": "Hors ligne",
    "mi_linuxHub_guard_guide_tip": "Les paramètres de surveillance sont ici.",
    "mi_linuxHub_guard_guide_next": "Suivant",
    "mi_linuxHub_light_guide_tip": "Les paramètres de la lampe de couleur chronométrée et de la veilleuse automatique sont ici.",
    "mi_linuxHub_ring_the_bell": "Sonner la sonnette",
    "mi_linuxHub_alarm": "Alerte",
    "mi_linuxHub_send_phone_msg": "Envoyer des notifications au téléphone",
    "mi_linuxHub_go_back_title": "Quitter",
    "mi_linuxHub_go_back_content": "Renoncer aux changements et quitter maintenant ?",
    "mi_linuxHub_nightlight_commont": "Lorsque {value} se trouve dans un environnement sombre",
    "mi_linuxHub_nightlight_no_device": "Il n’y a pas de détecteur de mouvement apparié avec le centre de commande qui puisse être utilisé pour déclencher la veilleuse.",
    "mi_linuxHub_nightlight_no_opendevice": "Configurez au moins un détecteur de mouvement pour déclencher la veilleuse.",
    "mi_linuxHub_linkage_alarm_footer_text": "Lorsque la fonction de liaison du centre de commande est activée et qu’un centre de commande est déclenché, la sonnerie de l’alerte et le clignotement lumineux de tous les centres de commande seront déclenchés.",
    "mi_linuxHub_lazy_clock_delete": "Supprimer le chronomètre sélectionné ?",
    "mi_linuxHub_guard_no_sub_device_tip": "Il n’y a pas de dispositifs appariés avec ce centre de commande qui puissent être utilisés pour déclencher une alerte, telle qu’un détecteur de mouvement, un détecteur de fenêtre et de porte ou un commutateur sans fil.",
    "mi_linuxHub_setting_language": "Langue de notification",
    "mi_linuxHub_setting_protect_delete": "Protection de suppression",
    "mi_linuxHub_setting_protect_delete_tip": "Cet appareil ne peut être supprimé que via une application",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Sonnerie",
    "mi_linuxHub_setting_volume": "Volume",
    "mi_linuxHub_setting_nightlight_tomorrow": "Jour suivant",
    "mi_linuxHub_setting_nightlight_allday": "Toute la journée",
    "mi_linuxHub_setting_alarm_motion_detail": "Alerter lorsque quelqu’un passe à proximité",
    "mi_linuxHub_setting_alarm_magnet_detail": "Alerte d’ouverture de porte ou de fenêtre",
    "mi_linuxHub_setting_alarm_switch_detail": "Alerter lorsque quelqu’un appuie sur le bouton",
    "mi_linuxHub_setting_alarm_cube_detail": "Morning Stream Llet",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Une alerte est envoyée lorsque le capteur de vibrations est déclenché après être resté immobile pendant 2 minutes.",
    "mi_linuxHub_arming_log_magnet_open": "Activer cela déclenche l’alerte",
    "mi_linuxHub_arming_log_motion_motion": "Alerte lorsque quelqu’un passe à proximité",
    "mi_linuxHub_arming_log_switch_click": "Appuyer sur le bouton déclenche une alerte",
    "mi_linuxHub_arming_log_cube_alert": "Alerte de déclenchement pour le cube magique",
    "mi_linuxHub_arming_log_vibration_alarm": "Alarme déclenchée par vibration",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Une porte ou une fenêtre ouverte déclenche l’alerte",
    "mi_linuxHub_arming_log_camera_detect_motion": "Alarme déclenchée par le mouvement détectée",
    "mi_linuxHub_arming_volume_length": "Durée de l'alerte",
    "mi_linuxHub_timer": "Programmer",
    "mi_linuxHub_custom": "Personnalisée",
    "mi_linuxHub_system_ring": "Sonnerie système",
    "mi_linuxHub_add": "Ajouter",
    "mi_linuxHub_timersetting_repeat": "Répéter",
    "mi_linuxHub_timersetting_repeat_once": "Exécuter une fois",
    "mi_linuxHub_timersetting_repeat_today": "Aujourd’hui",
    "mi_linuxHub_timersetting_repeat_tomorrow": "Demain",
    "mi_linuxHub_timersetting_repeat_everyday": "Tous les jours",
    "mi_linuxHub_timersetting_repeat_workday": "Du lundi au vendredi",
    "mi_linuxHub_timersetting_repeat_weekend": "Week-end",
    "mi_linuxHub_tone_volume": "Volume de la sonnerie",
    "mi_linuxHub_linkage_alarm": "Alerte de couplage",
    "mi_linuxHub_linkage_alarm_hint_detail": "Liens et alertes avec d'autres Hub, améliorer le niveau de sécurité",
    "mi_linuxHub_nightlight_smart_light": "Quelqu'un est passé, la veilleuse était allumée",
    "mi_linuxHub_nightlight_delay_close_min": "Éteindre la veilleuse dans {value} min",
    "mi_linuxHub_setting_nightlight_on": "Allumé",
    "mi_linuxHub_device_offline": "L’appareil est hors ligne",
    "mi_linuxHub_timer_light_list_empty": "Aucun minuteur ajouté",
    "mi_linuxHub_date_mon": "Lun",
    "mi_linuxHub_date_tues": "Mar",
    "mi_linuxHub_date_wed": "Mer",
    "mi_linuxHub_date_thur": "Jeu",
    "mi_linuxHub_date_fri": "Ven",
    "mi_linuxHub_date_sat": "Sam",
    "mi_linuxHub_date_sun": "Dim",
    "mi_linuxHub_arming_light_length": "Durée de clignotement de la lampe",
    "mi_linuxHub_linkage_alarm_dis": "Alerte de couplage annulée",
    "mi_linuxHub_home_tab_guard": "Surveillance",
    "mi_linuxHub_home_tab_coloured_light": "Lumière colorée",
    "mi_linuxHub_guardSetting": "Paramètres de surveillance",
    "mi_linuxHub_nightlight_timer": "Période d'induction",
    "mi_linuxHub_main_sub_device": "Dispositif pour enfant",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Paramètres de la lampe & des tonalités d'alerte",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Liaison avec d'autres assistants pour une alerte collective",
    "mi_linuxHub_guard_guard_timer": "Calendrier gardien",
    "mi_linuxHub_waring_guard_opening": "Guardian prêt à ouvrir",
    "mi_linuxHub_timer_light_timer_light_period": "Période",
    "mi_linuxHub_timer_light_timer_on": "Chronométré le",
    "mi_linuxHub_timer_light_timer_off": "Chronométré",
    "mi_linuxHub_timer_light_timer_on_no_set": "Heure de début non définie",
    "mi_linuxHub_timer_light_timer_off_no_set": "Heure de fermeture non fixée",
    "mi_linuxHub_timer_light_timer_time_after": "Heure de début après l'heure de fin",
    "mi_linuxHub_linkage_alarm_number_ten": "Impossible de sélectionner jusqu'à 10 alarmes de passerelle",
    "mi_linuxHub_sure_delete": "Êtes-vous sûr de vouloir supprimer l'élément sélectionné?",
    "mi_linuxHub_add_lzayclock": "Ajouter une alarme",
    "mi_linuxHub_repeat_timer_title": "Répéter l'option",
    "mi_linuxHub_repeat_self_timer_title": "Répétition personnalisée",
    "mi_linuxHub_lazy_clock_name": "Réveil",
    "mi_linuxHub_nightlight_motion_limit": "Ne peut sélectionner que 9 capteurs du corps humain",
    "mi_linuxHub_must_choose": "Requis",
    "mi_linuxHub_timer_light_name": "Minuterie d\'éclairage couleur"
  };
  exports.default = fr;
},11195,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var id = {
    "mi_linuxHub_guard_arming_log": "Log peringatan",
    "mi_linuxHub_waring_guard_open": "Penjagaan diaktifkan Ketuk untuk menonaktifkan",
    "mi_linuxHub_waring_guard_close": "Penjagaan dinonaktifkan Ketuk untuk mengaktifkan",
    "mi_linuxHub_main_light_intensity": "Kecerahan",
    "mi_linuxHub_main_timing_light": "Lampu berwarna dengan timer",
    "mi_linuxHub_home_coloured_light_close": "Ketuk untuk menonaktifkan",
    "mi_linuxHub_home_coloured_light_open": "Ketuk untuk mengaktifkan",
    "mi_linuxHub_setting_nightlight": "Lampu malam otomatis",
    "mi_linuxHub_setting_volume_setting": "Pengaturan volume",
    "mi_linuxHub_setting_alarmclock": "Tunda",
    "mi_linuxHub_setting_doorbell": "Bel pintu",
    "mi_linuxHub_setting_volume_doorbell": "Volume bel pintu",
    "mi_linuxHub_setting_volume_tip": "Volume prompt",
    "mi_linuxHub_setting_volume_alarm": "Volume peringatan",
    "mi_linuxHub_setting_nightlight_switch_comment": "Lampu malam menyala otomatis di tempat gelap",
    "mi_linuxHub_setting_nightlight_holdtime": "Tunda waktu mematikan lampu setelah orang pergi",
    "mi_linuxHub_setting_push": "Notifikasi ponsel",
    "mi_linuxHub_setting_doorbell_tone1": "Dering bel pintu",
    "mi_linuxHub_setting_doorbell_tone2": "Suara ketukan pintu",
    "mi_linuxHub_setting_doorbell_tone3": "Nada lucu",
    "mi_linuxHub_setting_doorbell_tone4": "Nada jam alarm",
    "mi_linuxHub_setting_doorbell_tone5": "Semoga Anda mendapatkan keberuntungan dan kesuksesan. Semua berjalan baik dan lancar",
    "mi_linuxHub_setting_doorbell_tone6": "Semoga rezeki Anda berlimpah dan selalu mendapatkan lebih dari yang diharapkan",
    "mi_linuxHub_setting_doorbell_tone7": "Buka pintu dan terima paket merah",
    "mi_linuxHub_setting_doorbell_tone8": "Kembang api musikal",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Tidak dapat mengendalikan karena tidak ada perangkat pemicu dipasangkan dengan hub kontrol. Harap minta pemilik hub kontrol untuk menambahkan perangkat pemicu terlebih dahulu.",
    "mi_linuxHub_guard_go_buy": "Beli",
    "mi_linuxHub_guard_sub_device_no_config": "Atur perangkat pemicu peringatan",
    "mi_linuxHub_guard_share_sub_device_no_config": "Minta pemilik hub kontrol untuk mengatur perangkat pemicu peringatan.",
    "mi_linuxHub_guard_go_config": "Buka pengaturan",
    "mi_linuxHub_guard_can_not_open": "Tidak dapat mengaktifkan",
    "mi_linuxHub_guard_save_fail": "Tidak dapat menyimpan, silakan coba lagi",
    "mi_linuxHub_scene_launch": "Jika kondisi apa pun terpenuhi",
    "mi_linuxHub_scene_action": "Kemudian",
    "mi_linuxHub_nightlight_open": "Nyalakan lampu malam",
    "mi_linuxHub_nightlight_motion": "Seseorang bergerak",
    "mi_linuxHub_guard_trigger_alarm_device": "Perangkat pemicu peringatan",
    "mi_linuxHub_guard_guardian_countdown": "Hitung mundur untuk mengaktifkan penjagaan",
    "mi_linuxHub_arming_ring": "Nada dering peringatan hub",
    "mi_linuxHub_arming_always_ringing": "Terus-menerus",
    "mi_linuxHub_arming_mute": "Senyap",
    "mi_linuxHub_arming_always_flashing": "Selalu berkedip",
    "mi_linuxHub_arming_not_flashing": "Tidak ada kedipan",
    "mi_linuxHub_second": "detik",
    "mi_linuxHub_arming_holdtime_0": "Berlaku sekarang",
    "mi_linuxHub_arming_tone_name1": "Nada mobil polisi 1",
    "mi_linuxHub_arming_tone_name2": "Nada mobil polisi 2",
    "mi_linuxHub_arming_tone_name3": "Suara insiden keselamatan",
    "mi_linuxHub_arming_tone_name4": "Hitung mundur misil",
    "mi_linuxHub_arming_tone_name5": "Tangisan hantu",
    "mi_linuxHub_arming_tone_name6": "Senapan sniper",
    "mi_linuxHub_arming_tone_name7": "Suara pertempuran",
    "mi_linuxHub_arming_tone_name8": "Alarm serangan udara",
    "mi_linuxHub_arming_tone_name9": "Gonggongan",
    "mi_linuxHub_lazy_clock_list": "Daftar jam alarm",
    "mi_linuxHub_lazy_clock_close_way": "Mode mati jam alarm",
    "mi_linuxHub_numbers": "item",
    "mi_linuxHub_lazy_clock_gateway_choose": "Satu kali tekan (diharuskan)",
    "mi_linuxHub_magnet_open": "Nyalakan",
    "mi_linuxHub_switch_click_once": "Klik",
    "mi_linuxHub_lazy_clock_close": "Nonaktifkan jam alarm",
    "mi_linuxHub_lazy_clock_list_empty": "Tidak ada jam alarm ditambahkan",
    "mi_linuxHub_bell_no_sub_device_tip": "Tidak ada perangkat terpasang dengan hub kontrol yang dapat digunakan untuk memicu bel pintu, seperti misalnya sensor gerak, sensor jendela dan pintu, atau tombol nirkabel.",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "Nada peringatan",
    "mi_linuxHub_play_specific_tone": "Putar nada dering yang ditentukan",
    "mi_linuxHub_offline": "Offline",
    "mi_linuxHub_guard_guide_tip": "Pengaturan peringatan di sini",
    "mi_linuxHub_guard_guide_next": "Selanjutnya",
    "mi_linuxHub_light_guide_tip": "Lampu berwarna sesuai waktu dan pengaturan lampu malam otomatis di sini.",
    "mi_linuxHub_ring_the_bell": "Deringkan bel pintu",
    "mi_linuxHub_alarm": "Peringatan",
    "mi_linuxHub_send_phone_msg": "Kirim notifikasi ke ponsel",
    "mi_linuxHub_go_back_title": "Keluar",
    "mi_linuxHub_go_back_content": "Buang perubahan, lalu keluar sekarang?",
    "mi_linuxHub_nightlight_commont": "Saat {value} adalah lingkungan gelap",
    "mi_linuxHub_nightlight_no_device": "Tidak ada sensor gerak terpasang dengan hub kontrol yang dapat digunakan untuk memicu lampu malam.",
    "mi_linuxHub_nightlight_no_opendevice": "Konfigurasikan paling tidak satu sensor gerak untuk memicu lampu malam.",
    "mi_linuxHub_linkage_alarm_footer_text": "Saat fungsi tautan peringatan hub kontrol diaktifkan, dan hub kontrol dipicu, nada dering peringatan dan lampu berkedip dari semua hub kontrol akan dipicu.",
    "mi_linuxHub_lazy_clock_delete": "Hapus timer yang dipilih?",
    "mi_linuxHub_guard_no_sub_device_tip": "Tidak ada perangkat terpasang dengan hub kontrol ini yang dapat digunakan untuk memicu peringatan, seperti sensor gerak, sensor jendela dan pintu, atau tombol nirkabel.",
    "mi_linuxHub_setting_language": "Bahasa notifikasi",
    "mi_linuxHub_setting_protect_delete": "Penghapusan perlindungan",
    "mi_linuxHub_setting_protect_delete_tip": "Perangkat ini hanya dapat dihapus melalui aplikasi.",
    "mi_linuxHub_minute": "menit",
    "mi_linuxHub_setting_bell": "Nada dering",
    "mi_linuxHub_setting_volume": "Volume",
    "mi_linuxHub_setting_nightlight_tomorrow": "Hari berikutnya",
    "mi_linuxHub_setting_nightlight_allday": "Sepanjang hari",
    "mi_linuxHub_setting_alarm_motion_detail": "Peringatkan saat seseorang lewat",
    "mi_linuxHub_setting_alarm_magnet_detail": "Peringatan pintu/jendela terbuka",
    "mi_linuxHub_setting_alarm_switch_detail": "Peringatan saat seseorang menekan tombol",
    "mi_linuxHub_setting_alarm_cube_detail": "Alarm terkirim saat kubus dipicu setelah tetap tidak bergerak selama 1 menit",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Alarm terkirim saat stiker gerakan dipicu setelah tetap tidak bergerak selama 2 menit",
    "mi_linuxHub_arming_log_magnet_open": "Pintu dan jendela terbuka memicu peringatan",
    "mi_linuxHub_arming_log_motion_motion": "Memperingatkan saat seseorang lewat",
    "mi_linuxHub_arming_log_switch_click": "Menekan tombol akan memicu peringatan",
    "mi_linuxHub_arming_log_cube_alert": "Kubus ajaib memicu peringatan",
    "mi_linuxHub_arming_log_vibration_alarm": "Getaran memicu alarm",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Pintu dan jendela terbuka memicu peringatan",
    "mi_linuxHub_arming_log_camera_detect_motion": "Alarm yang dipicu gerakan terdeteksi",
    "mi_linuxHub_arming_volume_length": "Durasi peringatan",
    "mi_linuxHub_timer": "Jadwal",
    "mi_linuxHub_custom": "Kustom",
    "mi_linuxHub_system_ring": "Nada dering sistem",
    "mi_linuxHub_add": "Tambah",
    "mi_linuxHub_timersetting_repeat": "Ulangi",
    "mi_linuxHub_timersetting_repeat_once": "Jalankan sekali",
    "mi_linuxHub_timersetting_repeat_today": "Hari ini",
    "mi_linuxHub_timersetting_repeat_tomorrow": "Besok",
    "mi_linuxHub_timersetting_repeat_everyday": "Setiap hari",
    "mi_linuxHub_timersetting_repeat_workday": "Senin sampai Jumat",
    "mi_linuxHub_timersetting_repeat_weekend": "Akhir pekan",
    "mi_linuxHub_tone_volume": "Volume nada dering",
    "mi_linuxHub_linkage_alarm": "Alarm terkait",
    "mi_linuxHub_linkage_alarm_hint_detail": "Keterkaitan dan peringatan dengan Hub lain, tingkatkan level keamanan",
    "mi_linuxHub_nightlight_smart_light": "Seseorang lewat, lampu malam menyala",
    "mi_linuxHub_nightlight_delay_close_min": "Matikan lampu malam dalam {value} menit",
    "mi_linuxHub_setting_nightlight_on": "Aktifkan",
    "mi_linuxHub_device_offline": "Perangkat offline",
    "mi_linuxHub_timer_light_list_empty": "Belum ada waktu yang ditambahkan",
    "mi_linuxHub_date_mon": "Senin",
    "mi_linuxHub_date_tues": "Selasa",
    "mi_linuxHub_date_wed": "Rabu",
    "mi_linuxHub_date_thur": "Kamis",
    "mi_linuxHub_date_fri": "Jumat",
    "mi_linuxHub_date_sat": "Sabtu",
    "mi_linuxHub_date_sun": "Akhir pekan",
    "mi_linuxHub_arming_light_length": "Durasi berkedip lampu",
    "mi_linuxHub_linkage_alarm_dis": "Alarm terkait dibatalkan",
    "mi_linuxHub_home_tab_guard": "Penjaga",
    "mi_linuxHub_home_tab_coloured_light": "Lampu berwarna",
    "mi_linuxHub_guardSetting": "Pengaturan penjaga",
    "mi_linuxHub_nightlight_timer": "Periode induksi",
    "mi_linuxHub_main_sub_device": "Perangkat turunan",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Pengaturan nada peringatan & lampu",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Tautkan dengan hub lain untuk peringatan kumpulan",
    "mi_linuxHub_guard_guard_timer": "Waktu pelindung",
    "mi_linuxHub_waring_guard_opening": "Wali siap dibuka",
    "mi_linuxHub_timer_light_timer_light_period": "Periode waktu",
    "mi_linuxHub_timer_light_timer_on": "Tepat waktu",
    "mi_linuxHub_timer_light_timer_off": "Batas waktu",
    "mi_linuxHub_timer_light_timer_on_no_set": "Waktu mulai tidak diatur",
    "mi_linuxHub_timer_light_timer_off_no_set": "Waktu penutupan tidak diatur",
    "mi_linuxHub_timer_light_timer_time_after": "Mulai waktu setelah waktu akhir",
    "mi_linuxHub_linkage_alarm_number_ten": "Hanya dapat memilih hingga 10 alarm gateway",
    "mi_linuxHub_sure_delete": "Anda yakin ingin menghapus item yang dipilih?",
    "mi_linuxHub_add_lzayclock": "Tambahkan alarm",
    "mi_linuxHub_repeat_timer_title": "Opsi ulangi",
    "mi_linuxHub_repeat_self_timer_title": "Ulangi khusus",
    "mi_linuxHub_lazy_clock_name": "Jam alarm",
    "mi_linuxHub_nightlight_motion_limit": "Hanya dapat memilih hingga 9 sensor tubuh manusia",
    "mi_linuxHub_must_choose": "Wajib",
    "mi_linuxHub_timer_light_name": "Timer lampu berwarna"
  };
  exports.default = id;
},11198,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var it = {
    "mi_linuxHub_guard_arming_log": "Registro allarmi",
    "mi_linuxHub_waring_guard_open": "Protezione abilitata. Toccare per disabilitarla",
    "mi_linuxHub_waring_guard_close": "Protezione disabilitata. Toccare per abilitarla",
    "mi_linuxHub_main_light_intensity": "Luminosità",
    "mi_linuxHub_main_timing_light": "Lampada colorata con timer",
    "mi_linuxHub_home_coloured_light_close": "Toccare per disattivarlo",
    "mi_linuxHub_home_coloured_light_open": "Toccare per attivarlo",
    "mi_linuxHub_setting_nightlight": "Luce notturna a induzione",
    "mi_linuxHub_setting_volume_setting": "Impostazioni volume",
    "mi_linuxHub_setting_alarmclock": "Sveglia",
    "mi_linuxHub_setting_doorbell": "Campanello",
    "mi_linuxHub_setting_volume_doorbell": "Volume del campanello",
    "mi_linuxHub_setting_volume_tip": "Prompt volume",
    "mi_linuxHub_setting_volume_alarm": "Volume allarme",
    "mi_linuxHub_setting_nightlight_switch_comment": "Quando è buio, la luce notturna si accende automaticamente",
    "mi_linuxHub_setting_nightlight_holdtime": "Ritardo di spegnimento delle luci dopo che le persone sono uscite",
    "mi_linuxHub_setting_push": "Notifica telefonica",
    "mi_linuxHub_setting_doorbell_tone1": "Suono del campanello",
    "mi_linuxHub_setting_doorbell_tone2": "Suono del bussare alla porta",
    "mi_linuxHub_setting_doorbell_tone3": "Suono divertente",
    "mi_linuxHub_setting_doorbell_tone4": "Suono sveglia",
    "mi_linuxHub_setting_doorbell_tone5": "Ti auguriamo buona fortuna e che tutto vada per il meglio!",
    "mi_linuxHub_setting_doorbell_tone6": "Ti auguriamo tutto il meglio!",
    "mi_linuxHub_setting_doorbell_tone7": "Apri la porta e ricevi il pacchetto rosso",
    "mi_linuxHub_setting_doorbell_tone8": "Petardo musicale",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Impossibile controllare, poiché non esiste alcun dispositivo di attivazione associato all'hub di controllo. Chiedere al proprietario dell'hub di controllo di aggiungere prima un dispositivo di attivazione.",
    "mi_linuxHub_guard_go_buy": "Acquista",
    "mi_linuxHub_guard_sub_device_no_config": "Impostare il dispositivo di attivazione dell'avviso",
    "mi_linuxHub_guard_share_sub_device_no_config": "Chiedere al proprietario dell'hub di controllo di impostare un dispositivo di attivazione di avviso.",
    "mi_linuxHub_guard_go_config": "Vai alle Impostazioni",
    "mi_linuxHub_guard_can_not_open": "Impossibile abilitare",
    "mi_linuxHub_guard_save_fail": "Impossibile salvare, riprovare più tardi.",
    "mi_linuxHub_scene_launch": "Quando una qualsiasi condizione viene soddisfatta",
    "mi_linuxHub_scene_action": "Allora",
    "mi_linuxHub_nightlight_open": "Accendi le luci notturne",
    "mi_linuxHub_nightlight_motion": "Movimento rilevato",
    "mi_linuxHub_guard_trigger_alarm_device": "Avviso dispositivo di attivazione",
    "mi_linuxHub_guard_guardian_countdown": "Conto alla rovescia per l'attivazione del protezione",
    "mi_linuxHub_arming_ring": "Suoneria allarme",
    "mi_linuxHub_arming_always_ringing": "Suona continuamente",
    "mi_linuxHub_arming_mute": "Muto",
    "mi_linuxHub_arming_always_flashing": "Suonare sempre",
    "mi_linuxHub_arming_not_flashing": "Nessun battito di ciglia",
    "mi_linuxHub_second": "Secondo",
    "mi_linuxHub_arming_holdtime_0": "Effettivo da subito",
    "mi_linuxHub_arming_tone_name1": "Suono auto della polizia 1",
    "mi_linuxHub_arming_tone_name2": "Suono auto della polizia 2",
    "mi_linuxHub_arming_tone_name3": "Suono incidente di sicurezza",
    "mi_linuxHub_arming_tone_name4": "Conto alla rovescia missile",
    "mi_linuxHub_arming_tone_name5": "Urlo del fantasma",
    "mi_linuxHub_arming_tone_name6": "Sparo",
    "mi_linuxHub_arming_tone_name7": "Suono di battaglia",
    "mi_linuxHub_arming_tone_name8": "Allarme raid aereo",
    "mi_linuxHub_arming_tone_name9": "Latrati",
    "mi_linuxHub_lazy_clock_list": "Elenco delle sveglie",
    "mi_linuxHub_lazy_clock_close_way": "Modalità off sveglia",
    "mi_linuxHub_numbers": "Pz",
    "mi_linuxHub_lazy_clock_gateway_choose": "Pressione singola (necessaria)",
    "mi_linuxHub_magnet_open": "On",
    "mi_linuxHub_switch_click_once": "Clic",
    "mi_linuxHub_lazy_clock_close": "Disabilitare la sveglia",
    "mi_linuxHub_lazy_clock_list_empty": "Nessuna sveglia aggiunta",
    "mi_linuxHub_bell_no_sub_device_tip": "Non ci sono dispositivi associati a questo hub di controllo che possono essere utilizzati per attivare il campanello, come un sensore di movimento, un sensore di porte e finestre o un interruttore wireless.",
    "mi_linuxHub_clock_tone1": "Mi Mix",
    "mi_linuxHub_clock_tone2": "Entusiasta",
    "mi_linuxHub_clock_tone3": "Chitarra classica",
    "mi_linuxHub_clock_tone4": "Piano mondiale ghiaccio",
    "mi_linuxHub_clock_tone5": "Tempo libero",
    "mi_linuxHub_clock_tone6": "Infanzia",
    "mi_linuxHub_clock_tone7": "Streamlet mattina",
    "mi_linuxHub_clock_tone8": "Casella musicale",
    "mi_linuxHub_clock_tone9": "Arancione",
    "mi_linuxHub_clock_tone10": "Pensatore",
    "mi_linuxHub_alarm_music": "Suono di allarme",
    "mi_linuxHub_play_specific_tone": "Riprodurre la suoneria specificata",
    "mi_linuxHub_offline": "Offline",
    "mi_linuxHub_guard_guide_tip": "Le impostazioni di protezione sono qui.",
    "mi_linuxHub_guard_guide_next": "Avanti",
    "mi_linuxHub_light_guide_tip": "La lampada a colori temporizzata e le impostazioni automatiche della luce notturna sono qui.",
    "mi_linuxHub_ring_the_bell": "Anello campanello",
    "mi_linuxHub_alarm": "Avviso",
    "mi_linuxHub_send_phone_msg": "Invia notifiche a dispositivo",
    "mi_linuxHub_go_back_title": "Uscita",
    "mi_linuxHub_go_back_content": "Ignorare le modifiche e uscire ora?",
    "mi_linuxHub_nightlight_commont": "Quando {value} si trova in un ambiente buio",
    "mi_linuxHub_nightlight_no_device": "Non esiste un sensore di movimento associato all'hub di controllo che può essere utilizzato per attivare la luce notturna.",
    "mi_linuxHub_nightlight_no_opendevice": "Configurare almeno un sensore di movimento per attivare la luce notturna.",
    "mi_linuxHub_linkage_alarm_footer_text": "Quando la funzione di collegamento di avviso dell'hub di controllo è abilitata e viene attivato un hub di controllo, verranno attivate la suoneria di avviso e la luce lampeggiante di tutti gli hub di controllo.",
    "mi_linuxHub_lazy_clock_delete": "Eliminare il timer selezionato?",
    "mi_linuxHub_guard_no_sub_device_tip": "Non esistono dispositivi associati a questo hub di controllo che possono essere utilizzati per attivare l'avviso, come un sensore di movimento, un sensore di porte e finestre o un interruttore wireless.",
    "mi_linuxHub_setting_language": "Lingua di notifica",
    "mi_linuxHub_setting_protect_delete": "Protezione dalla cancellazione",
    "mi_linuxHub_setting_protect_delete_tip": "Questo dispositivo può essere eliminato solo tramite l'app.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Suoneria",
    "mi_linuxHub_setting_volume": "Volume  ",
    "mi_linuxHub_setting_nightlight_tomorrow": "Il giorno dopo",
    "mi_linuxHub_setting_nightlight_allday": "Tutto il giorno",
    "mi_linuxHub_setting_alarm_motion_detail": "Avvisa se passa qualcuno",
    "mi_linuxHub_setting_alarm_magnet_detail": "Allarme porta/finestra aperta",
    "mi_linuxHub_setting_alarm_switch_detail": "Avvisa se qualcuno preme il pulsante",
    "mi_linuxHub_setting_alarm_cube_detail": "Allarme quando il cube viene avviato dopo essere rimasto immobile per 1 minuto",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Quando il sensore di vibrazione viene attivato dopo 2 minuti di inattività, viene inviato un avviso",
    "mi_linuxHub_arming_log_magnet_open": "Abilitazione dispositivi di attivazione allarme",
    "mi_linuxHub_arming_log_motion_motion": "Avvisa quando passa qualcuno",
    "mi_linuxHub_arming_log_switch_click": "Premendo il pulsante si attiva l’allarme",
    "mi_linuxHub_arming_log_cube_alert": "Avviso attivazione Magic cube",
    "mi_linuxHub_arming_log_vibration_alarm": "Allarme attivato da vibrazioni",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Dispositivo di attivazione allarme porta e finestra aperta",
    "mi_linuxHub_arming_log_camera_detect_motion": "Rilevato allarme attivato da movimento",
    "mi_linuxHub_arming_volume_length": "Durata avviso",
    "mi_linuxHub_timer": "Pianifica",
    "mi_linuxHub_custom": "Personalizza",
    "mi_linuxHub_system_ring": "Suoneria di sistema",
    "mi_linuxHub_add": "aggiungere",
    "mi_linuxHub_timersetting_repeat": "ripetizione",
    "mi_linuxHub_timersetting_repeat_once": "Eseguire una volta",
    "mi_linuxHub_timersetting_repeat_today": "Oggi",
    "mi_linuxHub_timersetting_repeat_tomorrow": "domani",
    "mi_linuxHub_timersetting_repeat_everyday": "Tutti i giorni",
    "mi_linuxHub_timersetting_repeat_workday": "Lun/ven",
    "mi_linuxHub_timersetting_repeat_weekend": "Fine settimana",
    "mi_linuxHub_tone_volume": "Volume suoneria",
    "mi_linuxHub_linkage_alarm": "Avviso di collegamento",
    "mi_linuxHub_linkage_alarm_hint_detail": "Collegamento e allarme con altri Hub, migliorare il livello di sicurezza",
    "mi_linuxHub_nightlight_smart_light": "Qualcuno è passato, la luce notturna è stata illuminata",
    "mi_linuxHub_nightlight_delay_close_min": "Spegnere la luce notturna in {value} min",
    "mi_linuxHub_setting_nightlight_on": "On",
    "mi_linuxHub_device_offline": "Dispositivo offline",
    "mi_linuxHub_timer_light_list_empty": "Nessun timer aggiunto",
    "mi_linuxHub_date_mon": "Lun",
    "mi_linuxHub_date_tues": "Mar",
    "mi_linuxHub_date_wed": "Mer",
    "mi_linuxHub_date_thur": "Gio",
    "mi_linuxHub_date_fri": "Ven",
    "mi_linuxHub_date_sat": "Sab",
    "mi_linuxHub_date_sun": "Dom",
    "mi_linuxHub_arming_light_length": "Durata lampeggiamento luce",
    "mi_linuxHub_linkage_alarm_dis": "Avviso di collegamento annullato",
    "mi_linuxHub_home_tab_guard": "Protezione",
    "mi_linuxHub_home_tab_coloured_light": "Luce colorata",
    "mi_linuxHub_guardSetting": "Impostazioni di protezione",
    "mi_linuxHub_nightlight_timer": "Periodo di induzione",
    "mi_linuxHub_main_sub_device": "Dispositivo di protezione bambini",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Toni di avviso e impostazioni della luce",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Collegamento con altri mozzi per avvisi collettivi",
    "mi_linuxHub_guard_guard_timer": "Tempistica del protezione",
    "mi_linuxHub_waring_guard_opening": "Guardian pronto ad aprire",
    "mi_linuxHub_timer_light_timer_light_period": "Periodo di tempo",
    "mi_linuxHub_timer_light_timer_on": "A tempo",
    "mi_linuxHub_timer_light_timer_off": "Scaduto",
    "mi_linuxHub_timer_light_timer_on_no_set": "Ora di inizio non impostata",
    "mi_linuxHub_timer_light_timer_off_no_set": "Tempo di chiusura non impostato",
    "mi_linuxHub_timer_light_timer_time_after": "Ora di inizio dopo l'ora di fine",
    "mi_linuxHub_linkage_alarm_number_ten": "È possibile selezionare solo fino a 10 allarmi gateway",
    "mi_linuxHub_sure_delete": "Sei sicuro di voler eliminare l'elemento selezionato?",
    "mi_linuxHub_add_lzayclock": "Aggiungi un allarme",
    "mi_linuxHub_repeat_timer_title": "Ripeti opzione",
    "mi_linuxHub_repeat_self_timer_title": "Ripetizione personalizzata",
    "mi_linuxHub_lazy_clock_name": "Sveglia",
    "mi_linuxHub_nightlight_motion_limit": "Può selezionare solo fino a 9 sensori del corpo umano",
    "mi_linuxHub_must_choose": "richiesto",
    "mi_linuxHub_timer_light_name": "Timer luci a colori"
  };
  exports.default = it;
},11201,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ja = {
    "mi_linuxHub_guard_arming_log": "アラームログ",
    "mi_linuxHub_waring_guard_open": "保護機能をオンしています。オフをクリックします",
    "mi_linuxHub_waring_guard_close": "保護機能をオフしました。オンをクリックします",
    "mi_linuxHub_main_light_intensity": "ライトの明るさ",
    "mi_linuxHub_main_timing_light": "定時ランプ",
    "mi_linuxHub_home_coloured_light_close": "オフをクリックします",
    "mi_linuxHub_home_coloured_light_open": "オンをクリックします",
    "mi_linuxHub_setting_nightlight": "感応ナイトライト",
    "mi_linuxHub_setting_volume_setting": "音量の設定",
    "mi_linuxHub_setting_alarmclock": "怠け者用目覚まし時計",
    "mi_linuxHub_setting_doorbell": "チャイム",
    "mi_linuxHub_setting_volume_doorbell": "チャイムの音量",
    "mi_linuxHub_setting_volume_tip": "提示の音量",
    "mi_linuxHub_setting_volume_alarm": "アラーム音の音量",
    "mi_linuxHub_setting_nightlight_switch_comment": "ゲートウェイが所在する環境が暗い時、自動的にナイトライトを点灯します",
    "mi_linuxHub_setting_nightlight_holdtime": "人がここを出た後しばらくしてから消灯します",
    "mi_linuxHub_setting_push": "スマホに通知します",
    "mi_linuxHub_setting_doorbell_tone1": "チャイムが鳴る音",
    "mi_linuxHub_setting_doorbell_tone2": "ノックの音",
    "mi_linuxHub_setting_doorbell_tone3": "面白い音",
    "mi_linuxHub_setting_doorbell_tone4": "目覚まし時計の音",
    "mi_linuxHub_setting_doorbell_tone5": "メデタイ！縁起よくて万事順調",
    "mi_linuxHub_setting_doorbell_tone6": "今年もよき年でありますよう",
    "mi_linuxHub_setting_doorbell_tone7": "速くドアを開けてお年玉を受け取ってください",
    "mi_linuxHub_setting_doorbell_tone8": "ミュージック",
    "mi_linuxHub_guard_share_no_sub_device_tip": "今の場合はコントロールできません。当該ゲートウェイではアラームトリガとするデバイスがないため、先に追加すると共有者にお伝えください",
    "mi_linuxHub_guard_go_buy": "購入へ",
    "mi_linuxHub_guard_sub_device_no_config": "アラームトリガ設備を設置しに行きます",
    "mi_linuxHub_guard_share_sub_device_no_config": "ゲートウェイの共有者にアラームトリガを設置するとお伝えください",
    "mi_linuxHub_guard_go_config": "設置へ",
    "mi_linuxHub_guard_can_not_open": "オンできません",
    "mi_linuxHub_guard_save_fail": "保存失敗、リトライしてください",
    "mi_linuxHub_scene_launch": "いずれの条件に該当する場合",
    "mi_linuxHub_scene_action": "執行します",
    "mi_linuxHub_nightlight_open": "ナイトライトをオンします",
    "mi_linuxHub_nightlight_motion": "人が移動しています",
    "mi_linuxHub_guard_trigger_alarm_device": "アラームトリガ",
    "mi_linuxHub_guard_guardian_countdown": "保護をオンするカウントダウン",
    "mi_linuxHub_arming_ring": "ゲートウェイのアラーム音",
    "mi_linuxHub_arming_always_ringing": "ずっと鳴ります",
    "mi_linuxHub_arming_mute": "ミュート",
    "mi_linuxHub_arming_always_flashing": "ずっと点滅します",
    "mi_linuxHub_arming_not_flashing": "点滅しません",
    "mi_linuxHub_second": "秒",
    "mi_linuxHub_arming_holdtime_0": "直ちに発行します",
    "mi_linuxHub_arming_tone_name1": "パトカーの音 1",
    "mi_linuxHub_arming_tone_name2": "パトカーの音 2",
    "mi_linuxHub_arming_tone_name3": "安全事故の音",
    "mi_linuxHub_arming_tone_name4": "ミサイルのカウントダウン",
    "mi_linuxHub_arming_tone_name5": "鬼の鳴き声",
    "mi_linuxHub_arming_tone_name6": "狙撃銃",
    "mi_linuxHub_arming_tone_name7": "激戦の音",
    "mi_linuxHub_arming_tone_name8": "空襲音",
    "mi_linuxHub_arming_tone_name9": "犬の鳴き声",
    "mi_linuxHub_lazy_clock_list": "目覚まし時計リスト",
    "mi_linuxHub_lazy_clock_close_way": "目覚まし時計をオフする方式",
    "mi_linuxHub_numbers": "個",
    "mi_linuxHub_lazy_clock_gateway_choose": "ボタンを一回押します（必ず選択）",
    "mi_linuxHub_magnet_open": "開放",
    "mi_linuxHub_switch_click_once": "クリック",
    "mi_linuxHub_lazy_clock_close": "目覚まし時計をオフします",
    "mi_linuxHub_lazy_clock_list_empty": "目覚まし時計を追加しません",
    "mi_linuxHub_bell_no_sub_device_tip": "当該ゲートウェイではチャイムを鳴らすトリガ設備がありません。例えばドアと窓のセンサー、モーションセンサー、ワイヤレススイッチなど",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "警戒音",
    "mi_linuxHub_play_specific_tone": "指定された音を放送します",
    "mi_linuxHub_offline": " オンラインしました",
    "mi_linuxHub_guard_guide_tip": "警戒の設定がここに移動しました",
    "mi_linuxHub_guard_guide_next": "次へ",
    "mi_linuxHub_light_guide_tip": "提示色付きランプと感応ナイトライトがここに移動しました",
    "mi_linuxHub_ring_the_bell": "チャイムが鳴ります",
    "mi_linuxHub_alarm": "アラーム",
    "mi_linuxHub_send_phone_msg": "スマフォにメッセージを送信",
    "mi_linuxHub_go_back_title": "編集を終了します",
    "mi_linuxHub_go_back_content": "終了した後修正した内容が紛失しますが、終了しますか？",
    "mi_linuxHub_nightlight_commont": "{value}所在する環境が暗い場合",
    "mi_linuxHub_nightlight_no_device": "当該ゲートウェイではナイトライトをオンするモーションセンサーがありません",
    "mi_linuxHub_nightlight_no_opendevice": "ナイトライトをオンするトリガ設備として少なくとも一つのモーションセンサーを設置してください",
    "mi_linuxHub_linkage_alarm_footer_text": "連動アラーム機能をオンしたゲートウェイの中で、いずれのゲートウェイがアラームすると、そのほかのゲートウェイも連動してアラームして、アラームの音がなり、また点灯します",
    "mi_linuxHub_lazy_clock_delete": "選択した定時を削除しますか？",
    "mi_linuxHub_guard_no_sub_device_tip": "当該ゲートウェイではアラームトリガとするデバイスがありません。例えばモーションセンサー、ドアと窓センサー及びワイヤレススイッチなど",
    "mi_linuxHub_setting_language": "プロンプト言語",
    "mi_linuxHub_setting_protect_delete": "削除防止",
    "mi_linuxHub_setting_protect_delete_tip": "APPでのみこのデバイスを削除可能です",
    "mi_linuxHub_minute": "分",
    "mi_linuxHub_setting_bell": "着信",
    "mi_linuxHub_setting_volume": "ボリューム",
    "mi_linuxHub_setting_nightlight_tomorrow": "翌日",
    "mi_linuxHub_setting_nightlight_allday": "一日中",
    "mi_linuxHub_setting_alarm_motion_detail": "人が通るとアラームします",
    "mi_linuxHub_setting_alarm_magnet_detail": "ドアまたは窓が開けられたためアラームします",
    "mi_linuxHub_setting_alarm_switch_detail": "人がボタンを押したためアラームします",
    "mi_linuxHub_setting_alarm_cube_detail": "マジックキューブが1分間停止してから触られたため、アラームします",
    "mi_linuxHub_setting_alarm_vibrate_detail": "動き感応ラベルが2分間停止してから触られたため、アラームします",
    "mi_linuxHub_arming_log_magnet_open": "ドアまたは窓が開けられたためアラームします",
    "mi_linuxHub_arming_log_motion_motion": "人が通るとアラームをトリガします",
    "mi_linuxHub_arming_log_switch_click": "ボタンが押されるとアラームをトリガします",
    "mi_linuxHub_arming_log_cube_alert": "マジックキューブが触られたためアラームします",
    "mi_linuxHub_arming_log_vibration_alarm": "振動トリガーアラーム",
    "mi_linuxHub_arming_log_vibration_alarm_open": "ドアまたは窓が開けられたためアラームします",
    "mi_linuxHub_arming_log_camera_detect_motion": "モーショントリガーアラームが検出されました",
    "mi_linuxHub_arming_volume_length": "アラームサウンドの長さ",
    "mi_linuxHub_timer": "タイマー",
    "mi_linuxHub_custom": "カスタム",
    "mi_linuxHub_system_ring": "システムの着信音",
    "mi_linuxHub_add": "追加する",
    "mi_linuxHub_timersetting_repeat": "繰り返す",
    "mi_linuxHub_timersetting_repeat_once": "一度実行する",
    "mi_linuxHub_timersetting_repeat_today": "本日",
    "mi_linuxHub_timersetting_repeat_tomorrow": "明日",
    "mi_linuxHub_timersetting_repeat_everyday": "毎日",
    "mi_linuxHub_timersetting_repeat_workday": "月曜日から金曜日",
    "mi_linuxHub_timersetting_repeat_weekend": "週末",
    "mi_linuxHub_tone_volume": "着信音の音量",
    "mi_linuxHub_linkage_alarm": "連動アラーム",
    "mi_linuxHub_linkage_alarm_hint_detail": "そのほかのゲートウェイと連動してアラームし、安全レベルをアップします",
    "mi_linuxHub_nightlight_smart_light": "誰かが通り過ぎ、夜の光が照らされた",
    "mi_linuxHub_nightlight_delay_close_min": "{value}分間後ナイトライトをオフします",
    "mi_linuxHub_setting_nightlight_on": "オン",
    "mi_linuxHub_device_offline": "機器がオフライン状態です",
    "mi_linuxHub_timer_light_list_empty": "タイミングはまだ追加されていません",
    "mi_linuxHub_date_mon": "月曜日",
    "mi_linuxHub_date_tues": "火曜日",
    "mi_linuxHub_date_wed": "水曜日",
    "mi_linuxHub_date_thur": "木曜日",
    "mi_linuxHub_date_fri": "金曜日",
    "mi_linuxHub_date_sat": "土曜日",
    "mi_linuxHub_date_sun": "週末",
    "mi_linuxHub_arming_light_length": "フラッシュ光量",
    "mi_linuxHub_linkage_alarm_dis": "連動アラームをキャンセルします",
    "mi_linuxHub_home_tab_guard": "デーモン",
    "mi_linuxHub_home_tab_coloured_light": "イルミネーション",
    "mi_linuxHub_guardSetting": "デーモン設定",
    "mi_linuxHub_nightlight_timer": "導入期間",
    "mi_linuxHub_main_sub_device": "サブデバイス",
    "mi_linuxHub_guard_alarm_sound_light_settings": "音響光学アラーム設定",
    "mi_linuxHub_guard_link_other_gateway_alarms": "他のハブアラームをリンクする",
    "mi_linuxHub_guard_guard_timer": "ガーディアンタイミング",
    "mi_linuxHub_waring_guard_opening": "ガーディアンを開く準備ができました",
    "mi_linuxHub_timer_light_timer_light_period": "期間",
    "mi_linuxHub_timer_light_timer_on": "タイミング",
    "mi_linuxHub_timer_light_timer_off": "時間切れ",
    "mi_linuxHub_timer_light_timer_on_no_set": "開始時間が設定されていません",
    "mi_linuxHub_timer_light_timer_off_no_set": "閉店時間が設定されていません",
    "mi_linuxHub_timer_light_timer_time_after": "終了時間後の開始時間",
    "mi_linuxHub_linkage_alarm_number_ten": "最大10個のゲートウェイアラームのみを選択できます",
    "mi_linuxHub_sure_delete": "選択したアイテムを削除してもよろしいですか？",
    "mi_linuxHub_add_lzayclock": "アラームを追加する",
    "mi_linuxHub_repeat_timer_title": "繰り返しオプション",
    "mi_linuxHub_repeat_self_timer_title": "カスタムリピート",
    "mi_linuxHub_lazy_clock_name": "目覚まし時計",
    "mi_linuxHub_nightlight_motion_limit": "最大9個の人体センサーのみを選択できます",
    "mi_linuxHub_must_choose": "必須",
    "mi_linuxHub_timer_light_name": "ランプの警戒タイマー"
  };
  exports.default = ja;
},11204,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ko = {
    "mi_linuxHub_guard_arming_log": "알림 로그",
    "mi_linuxHub_waring_guard_open": "가드가 비활성화되어 있습니다, 클릭하여 활성화합니 다",
    "mi_linuxHub_waring_guard_close": "가드가 비활성화되어 있습니다, 클릭하여 활성화합니 다",
    "mi_linuxHub_main_light_intensity": "조명 밝기",
    "mi_linuxHub_main_timing_light": "타이머 컬러 등",
    "mi_linuxHub_home_coloured_light_close": "끄려면 탭하세요",
    "mi_linuxHub_home_coloured_light_open": "켜려면 탭하세요",
    "mi_linuxHub_setting_nightlight": "자동 야간 조명",
    "mi_linuxHub_setting_volume_setting": "음량 설정",
    "mi_linuxHub_setting_alarmclock": "알람 시계",
    "mi_linuxHub_setting_doorbell": "초인종",
    "mi_linuxHub_setting_volume_doorbell": "초인종 음량",
    "mi_linuxHub_setting_volume_tip": "프롬트 음량",
    "mi_linuxHub_setting_volume_alarm": "알림 음량",
    "mi_linuxHub_setting_nightlight_switch_comment": "야간 조명은 어두운 장소에서 켜집니다",
    "mi_linuxHub_setting_nightlight_holdtime": "야간 조명 꺼지는 시간",
    "mi_linuxHub_setting_push": "휴대 전화 알림",
    "mi_linuxHub_setting_doorbell_tone1": "초인종 소리",
    "mi_linuxHub_setting_doorbell_tone2": "문 두드리는 소리",
    "mi_linuxHub_setting_doorbell_tone3": "재미있는 소리",
    "mi_linuxHub_setting_doorbell_tone4": "알람 시계 소리",
    "mi_linuxHub_setting_doorbell_tone5": "행운과 성공을 빕니다. 모든 일이 순조롭게 잘 진행될 겁니다",
    "mi_linuxHub_setting_doorbell_tone6": "번창이 함께 하시고 항상 원하시는 것보다 많은 것을 얻으시기 바랍니다",
    "mi_linuxHub_setting_doorbell_tone7": "문을 열고 빨간색 소포를 받으세요",
    "mi_linuxHub_setting_doorbell_tone8": "음악 폭죽",
    "mi_linuxHub_guard_share_no_sub_device_tip": "제어할 수 없습니다 이 게이트웨이에 알람 트리거 소스로 사용 가능한 장치가 없으므로 공유자에게 먼저 추가하도록 알려주십시오",
    "mi_linuxHub_guard_go_buy": "구매로 이동",
    "mi_linuxHub_guard_sub_device_no_config": "트리거 알람 장치를 구성하십시오",
    "mi_linuxHub_guard_share_sub_device_no_config": "이 게이트웨이 공유자에게 트리거 경보 장치를 구성하도록 제시하십시오",
    "mi_linuxHub_guard_go_config": "설정으로 이동",
    "mi_linuxHub_guard_can_not_open": "실행할 수 없습니다",
    "mi_linuxHub_guard_save_fail": "저장 실패,다시 시도하십시오",
    "mi_linuxHub_scene_launch": "그 중 하나가 만족되면",
    "mi_linuxHub_scene_action": "실행됩니다",
    "mi_linuxHub_nightlight_open": "야간 조명 켜기",
    "mi_linuxHub_nightlight_motion": "동작 감지됨",
    "mi_linuxHub_guard_trigger_alarm_device": "트리거 경보 장치",
    "mi_linuxHub_guard_guardian_countdown": "가드 카운트 다운",
    "mi_linuxHub_arming_ring": "알림 신호음",
    "mi_linuxHub_arming_always_ringing": "항상 울림",
    "mi_linuxHub_arming_mute": "묵음",
    "mi_linuxHub_arming_always_flashing": "항상 점멸",
    "mi_linuxHub_arming_not_flashing": "점멸 없음",
    "mi_linuxHub_second": "초",
    "mi_linuxHub_arming_holdtime_0": "지금 작동",
    "mi_linuxHub_arming_tone_name1": "경찰차 소리 1",
    "mi_linuxHub_arming_tone_name2": "경찰차 소리 2",
    "mi_linuxHub_arming_tone_name3": "안전 사고 사운드",
    "mi_linuxHub_arming_tone_name4": "미사일 카운트다운",
    "mi_linuxHub_arming_tone_name5": "유령 울음 소리",
    "mi_linuxHub_arming_tone_name6": "총 소리",
    "mi_linuxHub_arming_tone_name7": "전투 소리",
    "mi_linuxHub_arming_tone_name8": "공습 경보",
    "mi_linuxHub_arming_tone_name9": "짖는 소리",
    "mi_linuxHub_lazy_clock_list": "알람 리스트",
    "mi_linuxHub_lazy_clock_close_way": "알람 시계 끄기 모드",
    "mi_linuxHub_numbers": "개",
    "mi_linuxHub_lazy_clock_gateway_choose": "버튼을 1회 누릅니다 (필수 선택사항)",
    "mi_linuxHub_magnet_open": "켜짐",
    "mi_linuxHub_switch_click_once": "클릭",
    "mi_linuxHub_lazy_clock_close": "알람 끄기",
    "mi_linuxHub_lazy_clock_list_empty": "알람이 추가되지 않았습니다",
    "mi_linuxHub_bell_no_sub_device_tip": "게이트웨이에는 방범 센서, 인체감지 센서 및 무선 스위치 등과 같이 초인종을 트리거할 수 있는 장치가 없습니다. ",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "열정적",
    "mi_linuxHub_clock_tone3": "기타 클래식",
    "mi_linuxHub_clock_tone4": "아이스 월드 피아노",
    "mi_linuxHub_clock_tone5": "여가 시간",
    "mi_linuxHub_clock_tone6": "어린 시절",
    "mi_linuxHub_clock_tone7": "아침 개울물",
    "mi_linuxHub_clock_tone8": "뮤직박스",
    "mi_linuxHub_clock_tone9": "오렌지",
    "mi_linuxHub_clock_tone10": "생각하는 사람",
    "mi_linuxHub_alarm_music": "알림 소리",
    "mi_linuxHub_play_specific_tone": "지정된 벨소리 재생",
    "mi_linuxHub_offline": "오프라인",
    "mi_linuxHub_guard_guide_tip": "알림 설정이 여기로 이동되었습니다",
    "mi_linuxHub_guard_guide_next": "다음 단계",
    "mi_linuxHub_light_guide_tip": "정시 조명과 센서 야간 조명이 여기로 이동되었습니다",
    "mi_linuxHub_ring_the_bell": "벨 울림",
    "mi_linuxHub_alarm": "알람",
    "mi_linuxHub_send_phone_msg": "휴대 전화에 알림 보내기",
    "mi_linuxHub_go_back_title": "편집 종료",
    "mi_linuxHub_go_back_content": "종료 후 수정 사항이 분실됩니다, 종료하시겠습니까?",
    "mi_linuxHub_nightlight_commont": "{value}어두운 환경에 있을 때",
    "mi_linuxHub_nightlight_no_device": "이 게이트웨이에는 야간 조명으로 사용할 수 있는인체감지 센서 장치가 없습니다",
    "mi_linuxHub_nightlight_no_opendevice": "야간 조명을 점등하는 트리거 장치로 인체감지 센서를 하나 이상 구성하십시오",
    "mi_linuxHub_linkage_alarm_footer_text": "경보 기능이 연동된 게이트웨 중, 한 개 라도 경보가 울리면 다른 게이트 웨이에서도 경보가 울리고 라이트가 켜지는 기능 활성화",
    "mi_linuxHub_lazy_clock_delete": "선택한 시간 설정을 삭제 하시겠습니까?",
    "mi_linuxHub_guard_no_sub_device_tip": "이 게이트웨이에는 인체감지 센서, 방범 센서 및 무선 스위치와 같은 경보 트리거 소스로 사용할 수있는 장치가 없습니다",
    "mi_linuxHub_setting_language": "안내음 언어",
    "mi_linuxHub_setting_protect_delete": "실수로 인한 삭제 방지",
    "mi_linuxHub_setting_protect_delete_tip": "이 장치는 APP를 통해서만 삭제할 수 있습니다",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "벨소리",
    "mi_linuxHub_setting_volume": "음량 설정",
    "mi_linuxHub_setting_nightlight_tomorrow": "다음날",
    "mi_linuxHub_setting_nightlight_allday": "하루 종일",
    "mi_linuxHub_setting_alarm_motion_detail": "누가 지나가면 알립니다",
    "mi_linuxHub_setting_alarm_magnet_detail": "문/창문이 열리면 알림",
    "mi_linuxHub_setting_alarm_switch_detail": "한 번 누르기로 알림",
    "mi_linuxHub_setting_alarm_cube_detail": "1분간 동작이 없다가 큐브가 작동되면 알립니다",
    "mi_linuxHub_setting_alarm_vibrate_detail": "2분간 동작이 없다가 진동이 감지되면 알립니다",
    "mi_linuxHub_arming_log_magnet_open": "문/창문이 열리면 알람이 작동합니다",
    "mi_linuxHub_arming_log_motion_motion": "동작이 감지되면 알람 작동",
    "mi_linuxHub_arming_log_switch_click": "버튼을 누르면 알람 작동",
    "mi_linuxHub_arming_log_cube_alert": "큐브 이동 시 알람 작동",
    "mi_linuxHub_arming_log_vibration_alarm": "진동 트리거 경보",
    "mi_linuxHub_arming_log_vibration_alarm_open": "문과 창문이 열리면 알림이 작동합니다",
    "mi_linuxHub_arming_log_camera_detect_motion": "모션 트리거 알람 감지",
    "mi_linuxHub_arming_volume_length": "경보음 지속 시간",
    "mi_linuxHub_timer": "타이머",
    "mi_linuxHub_custom": "사용자 설정",
    "mi_linuxHub_system_ring": "시스템 벨소리",
    "mi_linuxHub_add": "추가",
    "mi_linuxHub_timersetting_repeat": "반복",
    "mi_linuxHub_timersetting_repeat_once": "한 번만 실행",
    "mi_linuxHub_timersetting_repeat_today": "오늘",
    "mi_linuxHub_timersetting_repeat_tomorrow": "내일",
    "mi_linuxHub_timersetting_repeat_everyday": "매일",
    "mi_linuxHub_timersetting_repeat_workday": "월-금",
    "mi_linuxHub_timersetting_repeat_weekend": "주말",
    "mi_linuxHub_tone_volume": "신호음 음량",
    "mi_linuxHub_linkage_alarm": "연결 알람",
    "mi_linuxHub_linkage_alarm_hint_detail": "다른 허브와의 연결 및 알림, 보안 수준 강화",
    "mi_linuxHub_nightlight_smart_light": "누군가 지나가고 야간 조명이 켜졌습니다",
    "mi_linuxHub_nightlight_delay_close_min": "{value}분 후 야간 조명 끄기",
    "mi_linuxHub_setting_nightlight_on": "켜기",
    "mi_linuxHub_device_offline": "장치가 오프라인 상태입니다",
    "mi_linuxHub_timer_light_list_empty": "추가된 타이머 없음",
    "mi_linuxHub_date_mon": "월",
    "mi_linuxHub_date_tues": "화",
    "mi_linuxHub_date_wed": "수",
    "mi_linuxHub_date_thur": "목",
    "mi_linuxHub_date_fri": "금",
    "mi_linuxHub_date_sat": "토",
    "mi_linuxHub_date_sun": "일",
    "mi_linuxHub_arming_light_length": "조명 점멸 시간",
    "mi_linuxHub_linkage_alarm_dis": "연결 알람 취소됨",
    "mi_linuxHub_home_tab_guard": "가드",
    "mi_linuxHub_home_tab_coloured_light": "랜턴",
    "mi_linuxHub_guardSetting": "가드 설정",
    "mi_linuxHub_nightlight_timer": "유도 기간",
    "mi_linuxHub_main_sub_device": "하위 장치",
    "mi_linuxHub_guard_alarm_sound_light_settings": "경보음 및 조명 설정",
    "mi_linuxHub_guard_link_other_gateway_alarms": "다른 게이트웨이 경보 연동",
    "mi_linuxHub_guard_guard_timer": "가디언 타이밍",
    "mi_linuxHub_waring_guard_opening": "가디언 오픈 준비",
    "mi_linuxHub_timer_light_timer_light_period": "기간",
    "mi_linuxHub_timer_light_timer_on": "정시에",
    "mi_linuxHub_timer_light_timer_off": "시간 초과",
    "mi_linuxHub_timer_light_timer_on_no_set": "시작 시간이 설정되지 않았습니다",
    "mi_linuxHub_timer_light_timer_off_no_set": "결산 시간이 설정되지 않았습니다",
    "mi_linuxHub_timer_light_timer_time_after": "종료 시간 이후 시작 시간",
    "mi_linuxHub_linkage_alarm_number_ten": "최대 10 개의 게이트웨이 경보 만 선택할 수 있습니다",
    "mi_linuxHub_sure_delete": "선택한 항목을 삭제 하시겠습니까?",
    "mi_linuxHub_add_lzayclock": "알람 추가",
    "mi_linuxHub_repeat_timer_title": "반복 옵션",
    "mi_linuxHub_repeat_self_timer_title": "맞춤 반복",
    "mi_linuxHub_lazy_clock_name": "알람 시계",
    "mi_linuxHub_nightlight_motion_limit": "최대 9 개의 인체 센서 만 선택할 수 있습니다",
    "mi_linuxHub_must_choose": "필수",
    "mi_linuxHub_timer_light_name": "컬러 등 타이머"
  };
  exports.default = ko;
},11207,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var nl = {
    "mi_linuxHub_guard_arming_log": "Alarmlogbestand",
    "mi_linuxHub_waring_guard_open": "Bewaking ingeschakeld Tik om het uit te schakelen",
    "mi_linuxHub_waring_guard_close": "Bewaking ingeschakeld Tik om het uit te schakelen",
    "mi_linuxHub_main_light_intensity": "Helderheid",
    "mi_linuxHub_main_timing_light": "Timer gekleurde lamp",
    "mi_linuxHub_home_coloured_light_close": "Tik om uit te schakelen",
    "mi_linuxHub_home_coloured_light_open": "Tik om in te schakelen",
    "mi_linuxHub_setting_nightlight": "Automatische nachtlamp",
    "mi_linuxHub_setting_volume_setting": "Volume-instellingen",
    "mi_linuxHub_setting_alarmclock": "Sluimeren",
    "mi_linuxHub_setting_doorbell": "Deurbel",
    "mi_linuxHub_setting_volume_doorbell": "Deurbelvolume",
    "mi_linuxHub_setting_volume_tip": "waarschuwingsvolume",
    "mi_linuxHub_setting_volume_alarm": "Alarmvolume",
    "mi_linuxHub_setting_nightlight_switch_comment": "De nachtlamp gaat automatisch aan op een donkere plek",
    "mi_linuxHub_setting_nightlight_holdtime": "Vertragingstijd voor het uitzetten van de lamp nadat mensen weggaan.",
    "mi_linuxHub_setting_push": "Telefoonbericht",
    "mi_linuxHub_setting_doorbell_tone1": "Deurbeltoon",
    "mi_linuxHub_setting_doorbell_tone2": "Deur kloppen geluid",
    "mi_linuxHub_setting_doorbell_tone3": "Gekke toon",
    "mi_linuxHub_setting_doorbell_tone4": "Alarmkloktoon",
    "mi_linuxHub_setting_doorbell_tone5": "Wens u veel geluk en veel succes. Alles gaat goed en soepel",
    "mi_linuxHub_setting_doorbell_tone6": "Moge de welvaart met u zijn en moge u altijd meer krijgen dan u wenst",
    "mi_linuxHub_setting_doorbell_tone7": "Open de deur en ontvang het rode pakketje",
    "mi_linuxHub_setting_doorbell_tone8": "Muzikaal vuurwerk",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Kan niet bediend worden omdat er geen activeringsapparaat gekoppeld is aan de Controlehub. Vraag de eigenaar van de Controlehub om eerst een activeringsapparaat toe te voegen.",
    "mi_linuxHub_guard_go_buy": "Kopen",
    "mi_linuxHub_guard_sub_device_no_config": "Stel het alarm-activeringsapparaat in",
    "mi_linuxHub_guard_share_sub_device_no_config": "Vraag de eigenaar van de Controlehub om een alarm-activeringsapparaat in te stellen.",
    "mi_linuxHub_guard_go_config": "Ga naar Instellingen",
    "mi_linuxHub_guard_can_not_open": "Kan niet ingeschakeld worden",
    "mi_linuxHub_guard_save_fail": "Kon niet opgeslagen worden, probeer het a.u.b. opnieuw.",
    "mi_linuxHub_scene_launch": "Als aan een van de voorwaarden is voldaan",
    "mi_linuxHub_scene_action": "Dan",
    "mi_linuxHub_nightlight_open": "Zet de nachtlamp aan",
    "mi_linuxHub_nightlight_motion": "Iemand bewoog",
    "mi_linuxHub_guard_trigger_alarm_device": "Alarm-activeringsapparaat",
    "mi_linuxHub_guard_guardian_countdown": "Aftellen om bewaking in te schakelen",
    "mi_linuxHub_arming_ring": "Hub alarmtoon",
    "mi_linuxHub_arming_always_ringing": "Continue",
    "mi_linuxHub_arming_mute": "Stil",
    "mi_linuxHub_arming_always_flashing": "Knippert altijd",
    "mi_linuxHub_arming_not_flashing": "Knippert niet",
    "mi_linuxHub_second": "seconden",
    "mi_linuxHub_arming_holdtime_0": "Gaat nu van kracht",
    "mi_linuxHub_arming_tone_name1": "Politieauto toon 1",
    "mi_linuxHub_arming_tone_name2": "Politieauto toon 2",
    "mi_linuxHub_arming_tone_name3": "Veiligheidsincident geluid",
    "mi_linuxHub_arming_tone_name4": "Raketten aftellen",
    "mi_linuxHub_arming_tone_name5": "Geest schreeuw",
    "mi_linuxHub_arming_tone_name6": "Scherpschuttersgeweer",
    "mi_linuxHub_arming_tone_name7": "Gevechtsgeluid",
    "mi_linuxHub_arming_tone_name8": "Luchtaanval alarm",
    "mi_linuxHub_arming_tone_name9": "Blaffen",
    "mi_linuxHub_lazy_clock_list": "Alarmkloklijst",
    "mi_linuxHub_lazy_clock_close_way": "Alarmklok uitmodus",
    "mi_linuxHub_numbers": "items",
    "mi_linuxHub_lazy_clock_gateway_choose": "Eenmaal indrukken (vereist)",
    "mi_linuxHub_magnet_open": "Inschakelen",
    "mi_linuxHub_switch_click_once": "Klikken",
    "mi_linuxHub_lazy_clock_close": "Alarmklok uitschakelen",
    "mi_linuxHub_lazy_clock_list_empty": "Geen alarmklok toegevoegd",
    "mi_linuxHub_bell_no_sub_device_tip": "Er zijn geen apparaten gekoppeld aan deze Controlehub die gebruikt kunnen worden om de deurbel te activeren, zoals een bewegingssensor, raam- en deursensor, of draadloze schakelaar.",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "Alarmtoon",
    "mi_linuxHub_play_specific_tone": "Speel de specifieke beltoon",
    "mi_linuxHub_offline": "Offline",
    "mi_linuxHub_guard_guide_tip": "Alarminstellingen bevinden zich hier.",
    "mi_linuxHub_guard_guide_next": "Volgende",
    "mi_linuxHub_light_guide_tip": "Instellingen voor getimede kleurlamp en automatische nachtlamp bevinden zich hier.",
    "mi_linuxHub_ring_the_bell": "Laat de deurbel horen",
    "mi_linuxHub_alarm": "Alarm",
    "mi_linuxHub_send_phone_msg": "Meldingen sturen naar de telefoon",
    "mi_linuxHub_go_back_title": "Afsluiten",
    "mi_linuxHub_go_back_content": "Wijzigingen annuleren, en nu afsluiten?",
    "mi_linuxHub_nightlight_commont": "Als de {value} zich in een donkere omgeving bevindt",
    "mi_linuxHub_nightlight_no_device": "Er is geen bewegingssensore gekoppeld aan de Controlehub die gebruikt kan worden om de nachtlamp te activeren.",
    "mi_linuxHub_nightlight_no_opendevice": "Configureer tenminste een bewegingssensor om de nachtlamp te activeren.",
    "mi_linuxHub_linkage_alarm_footer_text": "Als de alarm-linkfunctie van de Controlehub is ingeschakeld, en een Controlehub wordt geactiveerd, worden de alarmtoon en knipperlicht van alle Controlehub geactiveerd.",
    "mi_linuxHub_lazy_clock_delete": "De geselecteerde timer verwijderen?",
    "mi_linuxHub_guard_no_sub_device_tip": "Er zijn geen apparaten gekoppeld aan deze Controlehub die gebruikt kan worden om het alarm te activeren, zoals een bewegingssensor, raam- en deursensor, of draadloze schakelaar.",
    "mi_linuxHub_setting_language": "Notification language",
    "mi_linuxHub_setting_protect_delete": "Deletion protection",
    "mi_linuxHub_setting_protect_delete_tip": "This device can only be deleted via the app.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Ringtone",
    "mi_linuxHub_setting_volume": "Volume",
    "mi_linuxHub_setting_nightlight_tomorrow": "Volgende dag",
    "mi_linuxHub_setting_nightlight_allday": "De hele dag",
    "mi_linuxHub_setting_alarm_motion_detail": "Alarm als iemand voorbij komt",
    "mi_linuxHub_setting_alarm_magnet_detail": "Open deur/raam alarm",
    "mi_linuxHub_setting_alarm_switch_detail": "Alarm als iemand de knop indrukt",
    "mi_linuxHub_setting_alarm_cube_detail": "Alarm wordt verstuurd",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Alarm wordt verstuurd als de bewegingssticker geactiveerd wordt nadat deze 2 minuten niet in beweging is geweest.",
    "mi_linuxHub_arming_log_magnet_open": "Deur en raam open activeert alarm",
    "mi_linuxHub_arming_log_motion_motion": "Waarschuwt als iemand voorbij komt",
    "mi_linuxHub_arming_log_switch_click": "Het indrukken van de knop activeert het alarm",
    "mi_linuxHub_arming_log_cube_alert": "Magische kubus activeert het alarm",
    "mi_linuxHub_arming_log_vibration_alarm": "Trillingen geactiveerd alarm",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Deur en raam open activeert alarm",
    "mi_linuxHub_arming_log_camera_detect_motion": "Door beweging geactiveerd alarm gedetecteerd",
    "mi_linuxHub_arming_volume_length": "Alert duration",
    "mi_linuxHub_timer": "Schedule",
    "mi_linuxHub_custom": "Custom",
    "mi_linuxHub_system_ring": "Systeem beltoon",
    "mi_linuxHub_add": "toevoegen",
    "mi_linuxHub_timersetting_repeat": "herhaling",
    "mi_linuxHub_timersetting_repeat_once": "Eén keer uitvoeren",
    "mi_linuxHub_timersetting_repeat_today": "Vandaag",
    "mi_linuxHub_timersetting_repeat_tomorrow": "morgen",
    "mi_linuxHub_timersetting_repeat_everyday": "Elke dag",
    "mi_linuxHub_timersetting_repeat_workday": "Maandag tot vrijdag",
    "mi_linuxHub_timersetting_repeat_weekend": "Weekenden",
    "mi_linuxHub_tone_volume": "Beltoonvolume",
    "mi_linuxHub_linkage_alarm": "Koppeling alarm",
    "mi_linuxHub_linkage_alarm_hint_detail": "Koppeling en alarm met andere Hub, verbeteren het veiligheidsniveau",
    "mi_linuxHub_nightlight_smart_light": "Er passeerde iemand, het nachtlicht was verlicht",
    "mi_linuxHub_nightlight_delay_close_min": "Zet de nachtlamp uit in {value} min",
    "mi_linuxHub_setting_nightlight_on": "Inschakelen",
    "mi_linuxHub_device_offline": "Apparaat offline",
    "mi_linuxHub_timer_light_list_empty": "Nog geen timing toegevoegd",
    "mi_linuxHub_date_mon": "Maandag",
    "mi_linuxHub_date_tues": "Dinsdag",
    "mi_linuxHub_date_wed": "Woensdag",
    "mi_linuxHub_date_thur": "Donderdag",
    "mi_linuxHub_date_fri": "Vrijdag",
    "mi_linuxHub_date_sat": "Zaterdag",
    "mi_linuxHub_date_sun": "Weekenden",
    "mi_linuxHub_arming_light_length": "Light blinking duration",
    "mi_linuxHub_linkage_alarm_dis": "Koppeling alarm geannuleerd",
    "mi_linuxHub_home_tab_guard": "Guard",
    "mi_linuxHub_home_tab_coloured_light": "Colored light",
    "mi_linuxHub_guardSetting": "Guard settings",
    "mi_linuxHub_nightlight_timer": "Inductie periode",
    "mi_linuxHub_main_sub_device": "Child device",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Alert tones & light settings",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Link with other hubs for collective alerts",
    "mi_linuxHub_guard_guard_timer": "Voogd timing",
    "mi_linuxHub_waring_guard_opening": "Voogd klaar om te openen",
    "mi_linuxHub_timer_light_timer_light_period": "Tijdsperiode",
    "mi_linuxHub_timer_light_timer_on": "Getimed op",
    "mi_linuxHub_timer_light_timer_off": "Afgelopen",
    "mi_linuxHub_timer_light_timer_on_no_set": "Starttijd niet ingesteld",
    "mi_linuxHub_timer_light_timer_off_no_set": "Sluitingstijd niet ingesteld",
    "mi_linuxHub_timer_light_timer_time_after": "Starttijd na de eindtijd",
    "mi_linuxHub_linkage_alarm_number_ten": "Kan maximaal 10 gateway-alarmen selecteren",
    "mi_linuxHub_sure_delete": "Weet u zeker dat u het geselecteerde item wilt verwijderen?",
    "mi_linuxHub_add_lzayclock": "Voeg een alarm toe",
    "mi_linuxHub_repeat_timer_title": "Herhaal optie",
    "mi_linuxHub_repeat_self_timer_title": "Aangepaste herhaling",
    "mi_linuxHub_lazy_clock_name": "Wekker",
    "mi_linuxHub_nightlight_motion_limit": "Kan maximaal 9 menselijke lichaamssensoren selecteren",
    "mi_linuxHub_must_choose": "nodig",
    "mi_linuxHub_timer_light_name": "Kleurlampentimer"
  };
  exports.default = nl;
},11210,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var pl = {
    "mi_linuxHub_guard_arming_log": "Dziennik alarmów",
    "mi_linuxHub_waring_guard_open": "Osłona wyłączona Dotknij, aby ją włączyć",
    "mi_linuxHub_waring_guard_close": "Ochrona Wyłączona. Tapnij aby Włączona",
    "mi_linuxHub_main_light_intensity": "Jasność",
    "mi_linuxHub_main_timing_light": "Czasomierz kolorowej lampki",
    "mi_linuxHub_home_coloured_light_close": "Naciśnij, aby wyłączyć",
    "mi_linuxHub_home_coloured_light_open": "Naciśnij, aby włączyć",
    "mi_linuxHub_setting_nightlight": "Indukcyjne oświetlenie nocne",
    "mi_linuxHub_setting_volume_setting": "Ustawienia głośności",
    "mi_linuxHub_setting_alarmclock": "Budzik",
    "mi_linuxHub_setting_doorbell": "Dzwonek do drzwi",
    "mi_linuxHub_setting_volume_doorbell": "Głośność dzwonka do drzwi",
    "mi_linuxHub_setting_volume_tip": "Głośność komunikatu",
    "mi_linuxHub_setting_volume_alarm": "Głośność alarmu",
    "mi_linuxHub_setting_nightlight_switch_comment": "Oświetlenie nocne włącza się automatycznie w ciemnym miejscu",
    "mi_linuxHub_setting_nightlight_holdtime": "Czas opóźnienia wyłączenia światła po wyjściu osób",
    "mi_linuxHub_setting_push": "Powiadomienia telefonu",
    "mi_linuxHub_setting_doorbell_tone1": "Dźwięk dzwonka do drzwi",
    "mi_linuxHub_setting_doorbell_tone2": "Dźwięk pukania do drzwi",
    "mi_linuxHub_setting_doorbell_tone3": "Zabawny dźwięk",
    "mi_linuxHub_setting_doorbell_tone4": "Dźwięk budzika",
    "mi_linuxHub_setting_doorbell_tone5": "Życzymy powodzenia i sukcesów. Wszystko idzie dobrze i nie występują problemy",
    "mi_linuxHub_setting_doorbell_tone6": "Niech nie opuszcza Cię szczęście i bogactwo i obyś zawsze dostawał/-a więcej, niż sobie zażyczysz",
    "mi_linuxHub_setting_doorbell_tone7": "Otwórz drzwi i odbierz czerwoną paczkę",
    "mi_linuxHub_setting_doorbell_tone8": "Muzyczny fajerwerk",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Sterowanie jest niemożliwe, ponieważ żadne urządzenie wyzwalające nie zostało sparowane z centrum kontroli. Skontaktuj się z właścicielem centrum kontroli i poproś go o dodanie urządzenia wyzwalającego.",
    "mi_linuxHub_guard_go_buy": "Kup",
    "mi_linuxHub_guard_sub_device_no_config": "Ustaw urządzenie wyzwalające alarm",
    "mi_linuxHub_guard_share_sub_device_no_config": "Poproś właściciela centrum kontroli o ustawienie urządzenia wyzwalającego alarm.",
    "mi_linuxHub_guard_go_config": "Przejdź do ustawień",
    "mi_linuxHub_guard_can_not_open": "Nie można uruchomić",
    "mi_linuxHub_guard_save_fail": "Nie można zapisać, spróbuj ponownie później.",
    "mi_linuxHub_scene_launch": "Jeśli dowolny warunek jest spełniony",
    "mi_linuxHub_scene_action": "to",
    "mi_linuxHub_nightlight_open": "Włącz światło nocne",
    "mi_linuxHub_nightlight_motion": "Wykryto ruch",
    "mi_linuxHub_guard_trigger_alarm_device": "Urządzenie wyzwalające alarm",
    "mi_linuxHub_guard_guardian_countdown": "Odliczanie do aktywowania ochrony",
    "mi_linuxHub_arming_ring": "Dzwonek alarmu",
    "mi_linuxHub_arming_always_ringing": "Dzwonienie ciągłe",
    "mi_linuxHub_arming_mute": "Wycisz",
    "mi_linuxHub_arming_always_flashing": "Zawsze pierścień",
    "mi_linuxHub_arming_not_flashing": "Brak mrugnięcia",
    "mi_linuxHub_second": "Sek.",
    "mi_linuxHub_arming_holdtime_0": "Wprowadź w życie teraz",
    "mi_linuxHub_arming_tone_name1": "Dźwięk syreny policyjnej 1",
    "mi_linuxHub_arming_tone_name2": "Dźwięk syreny policyjnej 2",
    "mi_linuxHub_arming_tone_name3": "Dźwięk incydentu dot. zabezpieczeń",
    "mi_linuxHub_arming_tone_name4": "Odliczanie przed wystrzałem pocisku",
    "mi_linuxHub_arming_tone_name5": "Płacz ducha",
    "mi_linuxHub_arming_tone_name6": "Strzał z broni palnej",
    "mi_linuxHub_arming_tone_name7": "Odgłosy bitwy",
    "mi_linuxHub_arming_tone_name8": "Alarm przeciwlotniczy",
    "mi_linuxHub_arming_tone_name9": "Szczekanie",
    "mi_linuxHub_lazy_clock_list": "Lista budzika",
    "mi_linuxHub_lazy_clock_close_way": "Tryb wyłączenia budzika",
    "mi_linuxHub_numbers": " Szt.",
    "mi_linuxHub_lazy_clock_gateway_choose": "Pojedyncze naciśnięcie (wymagane)",
    "mi_linuxHub_magnet_open": "Wł.",
    "mi_linuxHub_switch_click_once": "Kliknij",
    "mi_linuxHub_lazy_clock_close": "Wyłącz budzik",
    "mi_linuxHub_lazy_clock_list_empty": "Brak dodanych budzików",
    "mi_linuxHub_bell_no_sub_device_tip": "Brak urządzeń sparowanych z tym centrum kontroli, które można by wykorzystać do wyzwolenia dzwonka przy drzwiach, np. czujnik ruchu, czujnik okien i drzwi czy bezprzewodowy wyłącznik.",
    "mi_linuxHub_clock_tone1": "Mi Mix",
    "mi_linuxHub_clock_tone2": "Entuzjastyczny",
    "mi_linuxHub_clock_tone3": "Klasyka gitarowa",
    "mi_linuxHub_clock_tone4": "Fortepian lodowy",
    "mi_linuxHub_clock_tone5": "Czas wolny",
    "mi_linuxHub_clock_tone6": "Dzieciństwo",
    "mi_linuxHub_clock_tone7": "Strumień poranny",
    "mi_linuxHub_clock_tone8": "Pozytywka",
    "mi_linuxHub_clock_tone9": "Pomarańczowy",
    "mi_linuxHub_clock_tone10": "Myśliciel",
    "mi_linuxHub_alarm_music": "Dźwięk alarmu",
    "mi_linuxHub_play_specific_tone": "Odtwórz konkretny dźwięk dzwonka",
    "mi_linuxHub_offline": "Offline",
    "mi_linuxHub_guard_guide_tip": "Ustawienia ochrony są tutaj.",
    "mi_linuxHub_guard_guide_next": "Dalej",
    "mi_linuxHub_light_guide_tip": "Ustawienia czasowej kolorowej lampy i światła nocnego znajdują się tutaj.",
    "mi_linuxHub_ring_the_bell": "Uruchom dzwonek przy drzwiach",
    "mi_linuxHub_alarm": "Alarm",
    "mi_linuxHub_send_phone_msg": "Wyślij powiadomienia do telefonu",
    "mi_linuxHub_go_back_title": "Wyjdź",
    "mi_linuxHub_go_back_content": "Zaniechać zmian i opuścić teraz?",
    "mi_linuxHub_nightlight_commont": "Gdy {value} znajduje się w ciemnym otoczeniu",
    "mi_linuxHub_nightlight_no_device": "Brak czujnika ruchu sparowanego z centrum kontroli, który można by wykorzystać do włączenia nocnego światła.",
    "mi_linuxHub_nightlight_no_opendevice": "Skonfiguruj co najmniej jeden czujnik ruchu, aby włączyć nocne światło.",
    "mi_linuxHub_linkage_alarm_footer_text": "Jeśli funkcja łączenia alarmu z centrum kontroli jest włączona, a centrum kontroli zostało wyzwolone, wyzwoli się również dźwięk dzwonka towarzyszący alarmowi i migające światła wszystkich centrów kontroli.",
    "mi_linuxHub_lazy_clock_delete": "Skasować wybrany czasomierz?",
    "mi_linuxHub_guard_no_sub_device_tip": "Brak urządzeń sparowanych z tym centrum kontroli, które można by wykorzystać do wyzwolenia alarmu, np. czujnik ruchu, czujnik okien i drzwi czy bezprzewodowy wyłącznik.",
    "mi_linuxHub_setting_language": "Język powiadomień",
    "mi_linuxHub_setting_protect_delete": "Ochrona przed usuwaniem",
    "mi_linuxHub_setting_protect_delete_tip": "To urządzenie można usunąć tylko za pomocą aplikacji.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Dzwonek",
    "mi_linuxHub_setting_volume": "Wielkość",
    "mi_linuxHub_setting_nightlight_tomorrow": "Następnego dnia",
    "mi_linuxHub_setting_nightlight_allday": "Cały dzień",
    "mi_linuxHub_setting_alarm_motion_detail": "Alarm spowodowany przez przechodzącą osobę",
    "mi_linuxHub_setting_alarm_magnet_detail": "Alarm otwarcia drzwi/okna",
    "mi_linuxHub_setting_alarm_switch_detail": "Alarm naciśnięcia przez kogoś przycisku",
    "mi_linuxHub_setting_alarm_cube_detail": "Morning Stream Llet",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Alarm jest wysyłany, gdy czujnik wibracji zostanie aktywowany po braku ruchu przez 2 minuty",
    "mi_linuxHub_arming_log_magnet_open": "Włączenie aktywacji alarmu",
    "mi_linuxHub_arming_log_motion_motion": "Alarmy spowodowane przez przechodzącą osobę",
    "mi_linuxHub_arming_log_switch_click": "Naciśnięcie przycisku aktywuje alarm",
    "mi_linuxHub_arming_log_cube_alert": "Alarm aktywowany przez Magic Cube",
    "mi_linuxHub_arming_log_vibration_alarm": "Alarm wywołany przez wibracje",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Otwarcie drzwi lub okna powoduje aktywację alarmu",
    "mi_linuxHub_arming_log_camera_detect_motion": "Wykryto alarm wywołany ruchem",
    "mi_linuxHub_arming_volume_length": "Czas trwania alarmu",
    "mi_linuxHub_timer": "Zaplanuj",
    "mi_linuxHub_custom": "Niestandardowe",
    "mi_linuxHub_system_ring": "Systemowy dzwonek",
    "mi_linuxHub_add": "Dodaj",
    "mi_linuxHub_timersetting_repeat": "Powtórz",
    "mi_linuxHub_timersetting_repeat_once": "Wykonaj raz",
    "mi_linuxHub_timersetting_repeat_today": "Dzisiaj",
    "mi_linuxHub_timersetting_repeat_tomorrow": "Jutro",
    "mi_linuxHub_timersetting_repeat_everyday": "Codziennie",
    "mi_linuxHub_timersetting_repeat_workday": "Od pon do pt",
    "mi_linuxHub_timersetting_repeat_weekend": "Weekend",
    "mi_linuxHub_tone_volume": "Głośność dzwonka",
    "mi_linuxHub_linkage_alarm": "Alarm powiązania",
    "mi_linuxHub_linkage_alarm_hint_detail": "Powiązania i alarm z innymi koncentratorami, zwiększenie poziomu ",
    "mi_linuxHub_nightlight_smart_light": "Ktoś przeszedł, nocne światło było oświetlone",
    "mi_linuxHub_nightlight_delay_close_min": "Wyłącz światło nocne za {value} minut/-y",
    "mi_linuxHub_setting_nightlight_on": "Wł.",
    "mi_linuxHub_device_offline": "Urządzenie jest w trybie offline",
    "mi_linuxHub_timer_light_list_empty": "Nie dodano czasomierza",
    "mi_linuxHub_date_mon": "Pon",
    "mi_linuxHub_date_tues": "Wto",
    "mi_linuxHub_date_wed": "Śr",
    "mi_linuxHub_date_thur": "Cz.",
    "mi_linuxHub_date_fri": "Pia",
    "mi_linuxHub_date_sat": "Sob",
    "mi_linuxHub_date_sun": "Nie",
    "mi_linuxHub_arming_light_length": "Czas migania światła",
    "mi_linuxHub_linkage_alarm_dis": "Alarm powiązania anulowany",
    "mi_linuxHub_home_tab_guard": "Ochrona",
    "mi_linuxHub_home_tab_coloured_light": "Światło kolorowe",
    "mi_linuxHub_guardSetting": "Ustawienia ochrony",
    "mi_linuxHub_nightlight_timer": "Okres indukcyjny",
    "mi_linuxHub_main_sub_device": "Urządzenie dziecięce",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Ustawienia oświetlenia i dźwięków alarmu",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Połącz z innymi urządzeniami dla wspólnego alarmu",
    "mi_linuxHub_guard_guard_timer": "Czas opiekuna",
    "mi_linuxHub_waring_guard_opening": "Strażnik gotowy do otwarcia",
    "mi_linuxHub_timer_light_timer_light_period": "Okres czasu",
    "mi_linuxHub_timer_light_timer_on": "Czas na",
    "mi_linuxHub_timer_light_timer_off": "Czas skończył się",
    "mi_linuxHub_timer_light_timer_on_no_set": "Nie ustawiono godziny rozpoczęcia",
    "mi_linuxHub_timer_light_timer_off_no_set": "Czas zamknięcia nie jest ustawiony",
    "mi_linuxHub_timer_light_timer_time_after": "Czas rozpoczęcia po godzinie zakończenia",
    "mi_linuxHub_linkage_alarm_number_ten": "Można wybrać maksymalnie 10 alarmów bramy",
    "mi_linuxHub_sure_delete": "Czy na pewno chcesz usunąć wybrany element?",
    "mi_linuxHub_add_lzayclock": "Dodaj alarm",
    "mi_linuxHub_repeat_timer_title": "Powtórz opcję",
    "mi_linuxHub_repeat_self_timer_title": "Niestandardowe powtórzenie",
    "mi_linuxHub_lazy_clock_name": "Budzik",
    "mi_linuxHub_nightlight_motion_limit": "Można wybrać maksymalnie 9 czujników ludzkiego ciała",
    "mi_linuxHub_must_choose": "Wymagane",
    "mi_linuxHub_timer_light_name": "Zegar światła kolorowego"
  };
  exports.default = pl;
},11213,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ru = {
    "mi_linuxHub_guard_arming_log": " Журнал звуковых сигналов",
    "mi_linuxHub_waring_guard_open": "Защита деактивирована Коснитесь для активации",
    "mi_linuxHub_waring_guard_close": "Охрана отключена. Нажмите, чтобы активировать",
    "mi_linuxHub_main_light_intensity": "Яркость",
    "mi_linuxHub_main_timing_light": "Цветной индикатор таймера",
    "mi_linuxHub_home_coloured_light_close": "Коснитесь, чтобы выключить",
    "mi_linuxHub_home_coloured_light_open": "Коснитесь, чтобы включить",
    "mi_linuxHub_setting_nightlight": "Индукционное ночное освещение",
    "mi_linuxHub_setting_volume_setting": "Настройки громкости",
    "mi_linuxHub_setting_alarmclock": "Будильник",
    "mi_linuxHub_setting_doorbell": "Дверной звонок",
    "mi_linuxHub_setting_volume_doorbell": "Громкость дверного звонка",
    "mi_linuxHub_setting_volume_tip": "Громкость подсказки",
    "mi_linuxHub_setting_volume_alarm": "Громкость звукового сигнала",
    "mi_linuxHub_setting_nightlight_switch_comment": "Ночное освещение автоматически включается в темном месте",
    "mi_linuxHub_setting_nightlight_holdtime": "Задержка при выключении света после ухода людей",
    "mi_linuxHub_setting_push": "Оповещение на смартфон",
    "mi_linuxHub_setting_doorbell_tone1": "Тональный сигнал дверного звонка",
    "mi_linuxHub_setting_doorbell_tone2": "Звук стука в дверь",
    "mi_linuxHub_setting_doorbell_tone3": "Веселый тональный сигнал",
    "mi_linuxHub_setting_doorbell_tone4": "Тональный сигнал будильника",
    "mi_linuxHub_setting_doorbell_tone5": "Желаю всего наилучшего. Все хорошо.",
    "mi_linuxHub_setting_doorbell_tone6": "Желаю всяческого процветания",
    "mi_linuxHub_setting_doorbell_tone7": "Откройте дверь и получите красный пакет",
    "mi_linuxHub_setting_doorbell_tone8": "Музыкальный фейерверк",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Управление невозможно, так как ни одно устройство срабатывания не сопряжено с контроллером для умного дома. Попросите владельца контроллера для умного дома сначала добавить устройство срабатывания.",
    "mi_linuxHub_guard_go_buy": "Купить",
    "mi_linuxHub_guard_sub_device_no_config": "Установите устройство срабатывания тревоги",
    "mi_linuxHub_guard_share_sub_device_no_config": "Попросите владельца контроллера для умного дома установить устройство срабатывания.",
    "mi_linuxHub_guard_go_config": "Перейти в настройки",
    "mi_linuxHub_guard_can_not_open": "Невозможно активировать",
    "mi_linuxHub_guard_save_fail": "Не удалось сохранить. Повторите попытку.",
    "mi_linuxHub_scene_launch": "Если выполняется любое условие",
    "mi_linuxHub_scene_action": "Тогда",
    "mi_linuxHub_nightlight_open": "Включить дежурное освещение",
    "mi_linuxHub_nightlight_motion": "Чье-то движение",
    "mi_linuxHub_guard_trigger_alarm_device": "Устройство срабатывания тревоги",
    "mi_linuxHub_guard_guardian_countdown": "Отсчет активации охраны",
    "mi_linuxHub_arming_ring": "Мелодия звукового сигнала",
    "mi_linuxHub_arming_always_ringing": "Непрерывно",
    "mi_linuxHub_arming_mute": "Выключить звук",
    "mi_linuxHub_arming_always_flashing": "Всегда звенеть",
    "mi_linuxHub_arming_not_flashing": "Не мигать",
    "mi_linuxHub_second": "c",
    "mi_linuxHub_arming_holdtime_0": "Применить сейчас",
    "mi_linuxHub_arming_tone_name1": "Тональный сигнал полицейского автомобиля 1",
    "mi_linuxHub_arming_tone_name2": "Тональный сигнал полицейского автомобиля 2",
    "mi_linuxHub_arming_tone_name3": "Звук при инциденте в области безопасности",
    "mi_linuxHub_arming_tone_name4": "Обратный отсчет",
    "mi_linuxHub_arming_tone_name5": "Крик привидения",
    "mi_linuxHub_arming_tone_name6": "Снайперская винтовка",
    "mi_linuxHub_arming_tone_name7": "Звук битвы",
    "mi_linuxHub_arming_tone_name8": "Воздушный налет",
    "mi_linuxHub_arming_tone_name9": "Лай",
    "mi_linuxHub_lazy_clock_list": "Список будильников",
    "mi_linuxHub_lazy_clock_close_way": "Режим выключения будильника",
    "mi_linuxHub_numbers": "шт.",
    "mi_linuxHub_lazy_clock_gateway_choose": "Одиночное нажатие (необходимо)",
    "mi_linuxHub_magnet_open": "Вкл.",
    "mi_linuxHub_switch_click_once": "Щелкните",
    "mi_linuxHub_lazy_clock_close": "Отключить будильник",
    "mi_linuxHub_lazy_clock_list_empty": "Будильники не добавлены",
    "mi_linuxHub_bell_no_sub_device_tip": "С этим контроллером для умного дома не сопряжено ни одно устройство, способное активировать дверной звонок (например, датчик движения, датчик открывания окон и дверей или беспроводной переключатель).",
    "mi_linuxHub_clock_tone1": "Микс Mi",
    "mi_linuxHub_clock_tone2": "Воодушевление",
    "mi_linuxHub_clock_tone3": "Классическая гитара",
    "mi_linuxHub_clock_tone4": "Ледяное пианино",
    "mi_linuxHub_clock_tone5": "Отдых",
    "mi_linuxHub_clock_tone6": "Детство",
    "mi_linuxHub_clock_tone7": "Ручеек",
    "mi_linuxHub_clock_tone8": "Шарманка",
    "mi_linuxHub_clock_tone9": "Апельсин",
    "mi_linuxHub_clock_tone10": "Раздумья",
    "mi_linuxHub_alarm_music": "Тональный сигнал оповещения",
    "mi_linuxHub_play_specific_tone": "Воспроизвести указанную мелодию",
    "mi_linuxHub_offline": "Не в сети",
    "mi_linuxHub_guard_guide_tip": "Настройки охраны находятся здесь.",
    "mi_linuxHub_guard_guide_next": "Далее",
    "mi_linuxHub_light_guide_tip": "Настройки синхронизированной цветной лампы и автоматического дежурного освещения находятся здесь.",
    "mi_linuxHub_ring_the_bell": "Дверной звонок",
    "mi_linuxHub_alarm": "Оповещение",
    "mi_linuxHub_send_phone_msg": "Отправка оповещения на смартфон",
    "mi_linuxHub_go_back_title": "Выйти",
    "mi_linuxHub_go_back_content": "Отменить изменения и выйти?",
    "mi_linuxHub_nightlight_commont": "Когда {value} в темноте",
    "mi_linuxHub_nightlight_no_device": "С контроллером для умного дома не сопряжен ни один датчик движения, способный активировать дежурное освещение.",
    "mi_linuxHub_nightlight_no_opendevice": "Настройте по крайней мере один датчик движения для активации дежурного освещения.",
    "mi_linuxHub_linkage_alarm_footer_text": "При срабатывании контроллера для умного дома с активированной функцией обмена тревожными сигналами, будут активированы звуковая сигнализация и мигающие индикаторы всех контроллеров для умного дома.",
    "mi_linuxHub_lazy_clock_delete": "Удалить выбранный таймер?",
    "mi_linuxHub_guard_no_sub_device_tip": "С этим контроллером для умного дома не сопряжено ни одно устройство, способное активировать тревогу (например, датчик движения, датчик открывания окон и дверей или беспроводной переключатель).",
    "mi_linuxHub_setting_language": "Язык уведомлений",
    "mi_linuxHub_setting_protect_delete": "Защита от удаления",
    "mi_linuxHub_setting_protect_delete_tip": "Это устройство можно удалить только при помощи приложения.",
    "mi_linuxHub_minute": "мин",
    "mi_linuxHub_setting_bell": "Рингтон",
    "mi_linuxHub_setting_volume": "Громкость",
    "mi_linuxHub_setting_nightlight_tomorrow": "Следующий день",
    "mi_linuxHub_setting_nightlight_allday": "Весь день",
    "mi_linuxHub_setting_alarm_motion_detail": "Звуковой сигнал при прохождении человека",
    "mi_linuxHub_setting_alarm_magnet_detail": "Звуковой сигнал при открытии окон и дверей",
    "mi_linuxHub_setting_alarm_switch_detail": "Звуковой сигнал при нажатии кнопки",
    "mi_linuxHub_setting_alarm_cube_detail": "Звуковой сигнал отправляется, если магический куб запускается после отсутствия движения в течение 1 минуты",
    "mi_linuxHub_setting_alarm_vibrate_detail": "Звуковой сигнал отправляется, если датчик движения активируется после отсутствия движения в течение 2 минут",
    "mi_linuxHub_arming_log_magnet_open": "При включении запускается звуковой сигнал",
    "mi_linuxHub_arming_log_motion_motion": "Запускать звуковой сигнал, когда кто-то проходит",
    "mi_linuxHub_arming_log_switch_click": "При нажатии кнопки запускается звуковой сигнал",
    "mi_linuxHub_arming_log_cube_alert": "Запуск звукового сигнала магическим кубом",
    "mi_linuxHub_arming_log_vibration_alarm": "Вибрация сработала сигнализация",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Датчик двери и окна активировал тревогу",
    "mi_linuxHub_arming_log_camera_detect_motion": "Обнаружена тревога при движении",
    "mi_linuxHub_arming_volume_length": "Продолжительность сигнала оповещения",
    "mi_linuxHub_timer": "Расписание",
    "mi_linuxHub_custom": "Другой",
    "mi_linuxHub_system_ring": "Системный звонок",
    "mi_linuxHub_add": "добавлять",
    "mi_linuxHub_timersetting_repeat": "повторение",
    "mi_linuxHub_timersetting_repeat_once": "Выполнить один раз",
    "mi_linuxHub_timersetting_repeat_today": "Сегодня",
    "mi_linuxHub_timersetting_repeat_tomorrow": "завтра",
    "mi_linuxHub_timersetting_repeat_everyday": "Каждый день",
    "mi_linuxHub_timersetting_repeat_workday": "С понедельника по пятницу",
    "mi_linuxHub_timersetting_repeat_weekend": "По будням",
    "mi_linuxHub_tone_volume": "Громкость мелодии",
    "mi_linuxHub_linkage_alarm": "Звуковой сигнал при соединении",
    "mi_linuxHub_linkage_alarm_hint_detail": "Соединение с другими шлюзами для отправки звукового сигнала и повышения безопасности",
    "mi_linuxHub_nightlight_smart_light": "Кто-то прошел, ночной свет был освещен",
    "mi_linuxHub_nightlight_delay_close_min": "Выключить дежурное освещение через {value} мин",
    "mi_linuxHub_setting_nightlight_on": "Вкл.",
    "mi_linuxHub_device_offline": "Устройство не в сети",
    "mi_linuxHub_timer_light_list_empty": "Таймер не добавлен",
    "mi_linuxHub_date_mon": "ПН",
    "mi_linuxHub_date_tues": "ВТ",
    "mi_linuxHub_date_wed": "СР",
    "mi_linuxHub_date_thur": "ЧТ",
    "mi_linuxHub_date_fri": "ПТ",
    "mi_linuxHub_date_sat": "СБ",
    "mi_linuxHub_date_sun": "ВС",
    "mi_linuxHub_arming_light_length": "Продолжительность мигания светового индикатора",
    "mi_linuxHub_linkage_alarm_dis": "Звуковой сигнал при соединении отменен",
    "mi_linuxHub_home_tab_guard": "Охрана",
    "mi_linuxHub_home_tab_coloured_light": "Цветной светильник",
    "mi_linuxHub_guardSetting": "Настройки охраны",
    "mi_linuxHub_nightlight_timer": "Индукционный период",
    "mi_linuxHub_main_sub_device": "Дочернее устройство",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Настройки звуковых сигналов и световых индикаторов оповещения",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Присоединить другие контроллеры для совместных сигналов оповещения",
    "mi_linuxHub_guard_guard_timer": "Время опекуна",
    "mi_linuxHub_waring_guard_opening": "Страж готов открыть",
    "mi_linuxHub_timer_light_timer_light_period": "Период времени",
    "mi_linuxHub_timer_light_timer_on": "Приурочен к",
    "mi_linuxHub_timer_light_timer_off": "Тайм-аут",
    "mi_linuxHub_timer_light_timer_on_no_set": "Время начала не установлено",
    "mi_linuxHub_timer_light_timer_off_no_set": "Время закрытия не установлено",
    "mi_linuxHub_timer_light_timer_time_after": "Время начала после времени окончания",
    "mi_linuxHub_linkage_alarm_number_ten": "Можно выбрать только до 10 сигналов шлюза",
    "mi_linuxHub_sure_delete": "Вы уверены, что хотите удалить выбранный элемент?",
    "mi_linuxHub_add_lzayclock": "Добавить будильник",
    "mi_linuxHub_repeat_timer_title": "Повторить вариант",
    "mi_linuxHub_repeat_self_timer_title": "Пользовательское повторение",
    "mi_linuxHub_lazy_clock_name": "Будильник",
    "mi_linuxHub_nightlight_motion_limit": "Можно выбрать только до 9 датчиков человеческого тела.",
    "mi_linuxHub_must_choose": "требуется",
    "mi_linuxHub_timer_light_name": "Таймер цветных ламп"
  };
  exports.default = ru;
},11216,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var th = {
    "mi_linuxHub_guard_arming_log": "รายการบันทึกการแจ้งเตือน",
    "mi_linuxHub_waring_guard_open": "เปิดใช้งานการปกป้องแล้ว แตะเพื่อปิดใช้งาน",
    "mi_linuxHub_waring_guard_close": "ปิดใช้งานการปกป้องแล้ว แตะเพื่อเปิดใช้งาน",
    "mi_linuxHub_main_light_intensity": "ความสว่าง",
    "mi_linuxHub_main_timing_light": "หลอดไฟสีของตัวตั้งเวลา",
    "mi_linuxHub_home_coloured_light_close": "แตะเพื่อปิดใช้งาน",
    "mi_linuxHub_home_coloured_light_open": "แตะเพื่อเปิดใช้งาน",
    "mi_linuxHub_setting_nightlight": "แสงกลางคืนอัตโนมัติ",
    "mi_linuxHub_setting_volume_setting": "การตั้งค่าระดับเสียง",
    "mi_linuxHub_setting_alarmclock": "ปลุกซ้ำ",
    "mi_linuxHub_setting_doorbell": "กริ่งประตู",
    "mi_linuxHub_setting_volume_doorbell": "ระดับเสียงของกริ่งประตู",
    "mi_linuxHub_setting_volume_tip": "ระดับเสียงของการแจ้งเตือน",
    "mi_linuxHub_setting_volume_alarm": "ระดับเสียงของการแจ้งเตือน",
    "mi_linuxHub_setting_nightlight_switch_comment": "เปิดแสงกลางคืนอัตโนมัติในที่มืด",
    "mi_linuxHub_setting_nightlight_holdtime": "เวลาหน่วงของการปิดแสงหลังจากที่คนอออกไป",
    "mi_linuxHub_setting_push": "การแจ้งเตือนของโทรศัพท์",
    "mi_linuxHub_setting_doorbell_tone1": "เสียงกริ่งประตู",
    "mi_linuxHub_setting_doorbell_tone2": "เสียงเคาะประตู",
    "mi_linuxHub_setting_doorbell_tone3": "เสียงตลกๆ",
    "mi_linuxHub_setting_doorbell_tone4": "เสียงนาฬิกาปลุก",
    "mi_linuxHub_setting_doorbell_tone5": "ขอให้คุณโชคดีและประสบความสำเร็จในทุกสิ่ง ทุกอย่างไปได้ดีและราบรื่น",
    "mi_linuxHub_setting_doorbell_tone6": "ขอให้คุณเจริญรุ่งเรืองและได้รับอะไรมากกว่าที่คุณปรารถนาอยู่เสมอ",
    "mi_linuxHub_setting_doorbell_tone7": "เปิดประตูและรับอั่งเปา",
    "mi_linuxHub_setting_doorbell_tone8": "เสียงพลุ",
    "mi_linuxHub_guard_share_no_sub_device_tip": "ไม่สามารถควบคุมเนื่องจากไม่มีอุปกรณ์สั่งงานซึงได้รับการจับคู่กับฮับควบคุม กรุณาสอบถามเจ้าของฮับควบคุมเพื่อเพิ่มอุปกรณ์สั่งงานก่อน",
    "mi_linuxHub_guard_go_buy": "ซื้อ",
    "mi_linuxHub_guard_sub_device_no_config": "ตั้งค่าอุปกรณ์สั่งงานการแจ้งเตือน",
    "mi_linuxHub_guard_share_sub_device_no_config": "สอบถามเจ้าของฮับควบคุมเพื่อตั้งค่าอุปกรณ์สั่งงานการแจ้งเตือน",
    "mi_linuxHub_guard_go_config": "ไปที่การตั้งค่า",
    "mi_linuxHub_guard_can_not_open": "ไม่สามารถเปิดใช้งานได้",
    "mi_linuxHub_guard_save_fail": "ไม่สามารถบันทึกได้ กรุณาลองใหม่อีกครั้ง",
    "mi_linuxHub_scene_launch": "หากตรงตามเงื่อนไขข้อใดข้อหนึ่ง",
    "mi_linuxHub_scene_action": "จากนั้น",
    "mi_linuxHub_nightlight_open": "เปิดแสงกลางคืน",
    "mi_linuxHub_nightlight_motion": "มีคนย้ายไปแล้ว",
    "mi_linuxHub_guard_trigger_alarm_device": "อุปกรณ์สั่งงานการแจ้งเตือน",
    "mi_linuxHub_guard_guardian_countdown": "นับถอยหลังเพื่อเปิดใช้งานการป้องกัน",
    "mi_linuxHub_arming_ring": "เสียงแจ้งเตือนของฮับ",
    "mi_linuxHub_arming_always_ringing": "ต่อเนื่อง",
    "mi_linuxHub_arming_mute": "ปิดเสียง",
    "mi_linuxHub_arming_always_flashing": "กะพริบเสมอ",
    "mi_linuxHub_arming_not_flashing": "ไม่กะพริบ",
    "mi_linuxHub_second": "วินาที",
    "mi_linuxHub_arming_holdtime_0": "ทำให้เกิดผลตอนนี้เลย",
    "mi_linuxHub_arming_tone_name1": "เสียงรถตำรวจ 1",
    "mi_linuxHub_arming_tone_name2": "เสียงรถตำรวจ 2",
    "mi_linuxHub_arming_tone_name3": "เสียงอุบัติเหตุและความปลอดภัย",
    "mi_linuxHub_arming_tone_name4": "เสียงนับถอยหลังการปล่อยชีปนาวุธ",
    "mi_linuxHub_arming_tone_name5": "เสียงร้องของผี",
    "mi_linuxHub_arming_tone_name6": "เสียงปืนไรเฟิลของสไนเปอร์",
    "mi_linuxHub_arming_tone_name7": "เสียงการสู้รบ",
    "mi_linuxHub_arming_tone_name8": "เสียงเตือนการโจมตีทางอากาศ",
    "mi_linuxHub_arming_tone_name9": "เสียงเห่า",
    "mi_linuxHub_lazy_clock_list": "รายชื่อนาฬิกาปลุก",
    "mi_linuxHub_lazy_clock_close_way": "โหมดปิดนาฬิกาปลุก",
    "mi_linuxHub_numbers": "รายการ",
    "mi_linuxHub_lazy_clock_gateway_choose": "กดหนึ่งครั้ง (จำเป็นต้องทำ)",
    "mi_linuxHub_magnet_open": "เปิด",
    "mi_linuxHub_switch_click_once": "คลิก",
    "mi_linuxHub_lazy_clock_close": "ปิดใช้งานนาฬิกาปลุก",
    "mi_linuxHub_lazy_clock_list_empty": "ไม่มีการเพิ่มนาฬิกาปลุก",
    "mi_linuxHub_bell_no_sub_device_tip": "ไม่มีอุปกรณ์ซึ่งได้รับการจับคู่กับฮับควบคุมนี้ที่สามารถใช้ได้ในการสั่งงานกริ่งประตู เช่น เซ็นเซอร์ตรวจจับความเคลื่อนไหว เซ็นเซอร์หน้าต่างและประตูหรือสวิตช์ไร้สาย",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "เสียงแจ้งเตือน",
    "mi_linuxHub_play_specific_tone": "เล่นเสียงที่ระบุ",
    "mi_linuxHub_offline": "ออฟไลน์",
    "mi_linuxHub_guard_guide_tip": "การตั้งค่าการแจ้งตือนอยู่ตรงนี้",
    "mi_linuxHub_guard_guide_next": "ถัดไป",
    "mi_linuxHub_light_guide_tip": "การตั้งค่าหลอดไฟสีแบบตั้งเวลาและแสงกลางคืนอัตโนมัติอยู่ตรงนี้",
    "mi_linuxHub_ring_the_bell": "กดกริ่งประตู",
    "mi_linuxHub_alarm": "การแจ้งเตือน",
    "mi_linuxHub_send_phone_msg": "ส่งการแจ้งเตือนไปยังโทรศัพท์",
    "mi_linuxHub_go_back_title": "ออก",
    "mi_linuxHub_go_back_content": "ยกเลิกการเปลี่ยนแปลงและออกตอนนี้เลยหรือไม่?",
    "mi_linuxHub_nightlight_commont": "เมื่อ {value} อยู่ในที่มืด",
    "mi_linuxHub_nightlight_no_device": "ไม่มีเซ็นเซอร์ตรวจจับการเคลื่อนไหวซึ่งได้รับการจับคู่กับฮับควบคุมที่สามารถใช้ได้ในการสั่งงานแสงกลางคืน",
    "mi_linuxHub_nightlight_no_opendevice": "ปรับแต่งอย่างน้อยในส่วนของเซ็นเซอร์ตรวจจับความเคลื่อนไหวเพื่อสั่งงานแสงกลางคืน",
    "mi_linuxHub_linkage_alarm_footer_text": "เมื่อเปิดใช้งานฟังก์ชันการเชื่อมต่อการแจ้งเตือนของฮับควบคุมและฮับควบคุมได้รับการสั่งงาน เสียงแจ้งเตือนและไฟกะพริบของฮับควบคุมทั้งหมดจะทำงาน",
    "mi_linuxHub_lazy_clock_delete": "ต้องการลบตัวตั้งเวลาที่เลือกหรือไม่",
    "mi_linuxHub_guard_no_sub_device_tip": "ไม่มีอุปกรณ์ซึ่งได้รับการจับคู่กับฮับควบคุมนี้ที่สามารถใช้ได้ในการสั่งงานการแจ้งเตือน เช่น เซ็นเซอร์ตรวจจับความเคลื่อนไหว เซ็นเซอร์หน้าต่างและประตูหรือสวิตช์ไร้สาย",
    "mi_linuxHub_setting_language": "ภาษาที่ใช้ในการแจ้งเตือน",
    "mi_linuxHub_setting_protect_delete": "การป้องกันการลบ",
    "mi_linuxHub_setting_protect_delete_tip": "อุปกรณ์นี้สามารถลบได้ผ่านแอปเท่านั้น",
    "mi_linuxHub_minute": "น.",
    "mi_linuxHub_setting_bell": "ริงโทน",
    "mi_linuxHub_setting_volume": "ระดับเสียง",
    "mi_linuxHub_setting_nightlight_tomorrow": "วันถัดไป",
    "mi_linuxHub_setting_nightlight_allday": "ทั้งวัน",
    "mi_linuxHub_setting_alarm_motion_detail": "แจ้งเตือนเมื่อมีคนเดินผ่าน",
    "mi_linuxHub_setting_alarm_magnet_detail": "แจ้งเตือนเมื่อประตู/หน้าต่างเปิดอแจ้งเตือนเมื่อประตู/หน้าต่างเปิดอยู่",
    "mi_linuxHub_setting_alarm_switch_detail": "แจ้งเตือนเมื่อมีคนกดปุ่ม",
    "mi_linuxHub_setting_alarm_cube_detail": "ส่งการแจ้งเตือนเมื่อรีโมทได้รับการสั่งงานหลังจากที่ไม่มีการเคลื่อนไหวนาน 1 นาที",
    "mi_linuxHub_setting_alarm_vibrate_detail": "ส่งการแจ้งเตือนเมื่อสติกเกอร์การเคลื่อนไหวได้รับการสั่งงานหลังจากที่ไม่มีการเคลื่อนไหวนาน 2 นาที",
    "mi_linuxHub_arming_log_magnet_open": "ประตูและหน้าต่างที่เปิดอยู่จะทำให้เกิดการแจ้งเตือน",
    "mi_linuxHub_arming_log_motion_motion": "แจ้งเตือนเมื่อมีคนเดินผ่าน",
    "mi_linuxHub_arming_log_switch_click": "การกดปุ่มจะทำให้เกิดการแจ้งเตือน",
    "mi_linuxHub_arming_log_cube_alert": "รีโมทอเนกประสงค์ที่ทำให้เกิดการแจ้งเตือน",
    "mi_linuxHub_arming_log_vibration_alarm": "สัญญาณเตือนการสั่นสะเทือน",
    "mi_linuxHub_arming_log_vibration_alarm_open": "ประตูและหน้าต่างที่เปิดอยู่จะทำให้เกิดการแจ้งเตือน",
    "mi_linuxHub_arming_log_camera_detect_motion": "ตรวจพบการเคลื่อนไหวที่ถูกกระตุ้น",
    "mi_linuxHub_arming_volume_length": "ระยะเวลาของการแจ้งเตือน",
    "mi_linuxHub_timer": "กำหนดเวลา",
    "mi_linuxHub_custom": "กำหนดเอง",
    "mi_linuxHub_system_ring": "ระบบเสียงเรียกเข้า",
    "mi_linuxHub_add": "เพิ่ม",
    "mi_linuxHub_timersetting_repeat": "ทำซ้ำ",
    "mi_linuxHub_timersetting_repeat_once": "ดำเนินการครั้งเดียว",
    "mi_linuxHub_timersetting_repeat_today": "วันนี้",
    "mi_linuxHub_timersetting_repeat_tomorrow": "วันพรุ่งนี้",
    "mi_linuxHub_timersetting_repeat_everyday": "ทุกวัน",
    "mi_linuxHub_timersetting_repeat_workday": "จันทร์ถึงศุกร์",
    "mi_linuxHub_timersetting_repeat_weekend": "สุดสัปดาห์",
    "mi_linuxHub_tone_volume": "ระดับเสียงของริงโทน",
    "mi_linuxHub_linkage_alarm": "การแจ้งเตือนการเชื่อมต่อ",
    "mi_linuxHub_linkage_alarm_hint_detail": "การเชื่อมต่อและการแจ้งเตือนด้วยฮับอื่นเพื่อเพิ่มระดับความปลอดภัย",
    "mi_linuxHub_nightlight_smart_light": "มีคนผ่านไปแสงกลางคืนส่องสว่าง",
    "mi_linuxHub_nightlight_delay_close_min": "ปิดแสงกลางคืนใน {value} นาที",
    "mi_linuxHub_setting_nightlight_on": "เปิดใช้งาน",
    "mi_linuxHub_device_offline": "อุปกรณ์ออฟไลน์",
    "mi_linuxHub_timer_light_list_empty": "ยังไม่มีการเพิ่มเวลา",
    "mi_linuxHub_date_mon": "จันทร์",
    "mi_linuxHub_date_tues": "อังคาร",
    "mi_linuxHub_date_wed": "พุธ",
    "mi_linuxHub_date_thur": "พฤหัสฯ",
    "mi_linuxHub_date_fri": "ศุกร์",
    "mi_linuxHub_date_sat": "เสาร์",
    "mi_linuxHub_date_sun": "สุดสัปดาห์",
    "mi_linuxHub_arming_light_length": "ระยะเวลาการกะพริบของแสง",
    "mi_linuxHub_linkage_alarm_dis": "ยกเลิกการแจ้งเตือนการเชื่อมต่อแล้ว",
    "mi_linuxHub_home_tab_guard": "การปกป้อง",
    "mi_linuxHub_home_tab_coloured_light": "สีของแสง",
    "mi_linuxHub_guardSetting": "การตั้งค่าการปกป้อง",
    "mi_linuxHub_nightlight_timer": "ระยะเวลาการเหนี่ยวนำ",
    "mi_linuxHub_main_sub_device": "อุปกรณ์สำหรับเด็ก",
    "mi_linuxHub_guard_alarm_sound_light_settings": "เสียงแจ้งเตือนและการตั้งค่าแสง",
    "mi_linuxHub_guard_link_other_gateway_alarms": "เชื่อมต่อกับฮับอื่นๆ สำหรับการแจ้งเตือนแบบกลุ่ม",
    "mi_linuxHub_guard_guard_timer": "เวลาการ์เดียน",
    "mi_linuxHub_waring_guard_opening": "ผู้พิทักษ์พร้อมที่จะเปิด",
    "mi_linuxHub_timer_light_timer_light_period": "ระยะเวลา",
    "mi_linuxHub_timer_light_timer_on": "หมดเวลาแล้ว",
    "mi_linuxHub_timer_light_timer_off": "หมดเวลา",
    "mi_linuxHub_timer_light_timer_on_no_set": "ไม่ได้ตั้งเวลาเริ่มต้น",
    "mi_linuxHub_timer_light_timer_off_no_set": "ไม่ได้ตั้งเวลาปิด",
    "mi_linuxHub_timer_light_timer_time_after": "เวลาเริ่มหลังจากสิ้นสุดเวลา",
    "mi_linuxHub_linkage_alarm_number_ten": "เลือกสัญญาณเตือนเกตเวย์ได้สูงสุด 10 รายการเท่านั้น",
    "mi_linuxHub_sure_delete": "คุณแน่ใจหรือว่าต้องการลบรายการที่เลือก?",
    "mi_linuxHub_add_lzayclock": "เพิ่มการเตือน",
    "mi_linuxHub_repeat_timer_title": "ทำซ้ำตัวเลือก",
    "mi_linuxHub_repeat_self_timer_title": "ทำซ้ำที่กำหนดเอง",
    "mi_linuxHub_lazy_clock_name": "นาฬิกาปลุก",
    "mi_linuxHub_nightlight_motion_limit": "สามารถเลือกเซ็นเซอร์ร่างกายมนุษย์ได้สูงสุด 9 ตัวเท่านั้น",
    "mi_linuxHub_must_choose": "จำเป็นต้องใช้",
    "mi_linuxHub_timer_light_name": "ตัวตั้งเวลาของหลอดไฟสี"
  };
  exports.default = th;
},11219,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var tr = {
    "mi_linuxHub_guard_arming_log": "Uyarı kayıtları",
    "mi_linuxHub_waring_guard_open": "Koruyucu etkin\nDevre dışı bırakmak için dokunun",
    "mi_linuxHub_waring_guard_close": "Koruyucu devre dışı Etkinleştirmek için dokunun",
    "mi_linuxHub_main_light_intensity": "Parlaklık",
    "mi_linuxHub_main_timing_light": "Zamanlayıcılı renkli lamba",
    "mi_linuxHub_home_coloured_light_close": "Devre dışı bırakmak için dokun",
    "mi_linuxHub_home_coloured_light_open": "Etkinleştirmek için dokun",
    "mi_linuxHub_setting_nightlight": "Otomatik gece lambası",
    "mi_linuxHub_setting_volume_setting": "Ses ayarları",
    "mi_linuxHub_setting_alarmclock": "Uyku modu",
    "mi_linuxHub_setting_doorbell": "Kapı zili",
    "mi_linuxHub_setting_volume_doorbell": "Kapı zili düzeyi",
    "mi_linuxHub_setting_volume_tip": "Komut ses düzeyi",
    "mi_linuxHub_setting_volume_alarm": "Uyarı ses düzeyi",
    "mi_linuxHub_setting_nightlight_switch_comment": "Gece lambası karanlık ortamda otomatik olarak açılır",
    "mi_linuxHub_setting_nightlight_holdtime": "İnsanlar çıktıktan sonra lambanın kapanma süresini geciktir",
    "mi_linuxHub_setting_push": "Telefon bildirimi",
    "mi_linuxHub_setting_doorbell_tone1": "Kapı zili sesi",
    "mi_linuxHub_setting_doorbell_tone2": "Kapı tıklatma sesi",
    "mi_linuxHub_setting_doorbell_tone3": "Komik ses",
    "mi_linuxHub_setting_doorbell_tone4": "Çalar saat sesi",
    "mi_linuxHub_setting_doorbell_tone5": "Size bol şans ve başarılar dileriz. Her şey iyi ve sorunsuz gidiyor",
    "mi_linuxHub_setting_doorbell_tone6": "Kesenize bereket olsun ve her zaman istediğinizden daha fazlasını alın",
    "mi_linuxHub_setting_doorbell_tone7": "Kapıyı aç ve kırmızı paketi al",
    "mi_linuxHub_setting_doorbell_tone8": "Müzikal çatapat",
    "mi_linuxHub_guard_share_no_sub_device_tip": "Merkezi kontrol ünitesi ile eşleşmiş hiçbir tetikleyici cihaz olmadığı için kontrol edilemiyor. Lütfen merkezi kontrol ünitesi sahibinden tetikleyici bir cihaz eklemesini isteyin.",
    "mi_linuxHub_guard_go_buy": "Satın al",
    "mi_linuxHub_guard_sub_device_no_config": "Uyarı tetikleyici cihazı kur",
    "mi_linuxHub_guard_share_sub_device_no_config": "Merkezi kontrol ünitesi sahibinden tetikleyici bir cihaz eklemesini isteyin.",
    "mi_linuxHub_guard_go_config": "Ayarlara git",
    "mi_linuxHub_guard_can_not_open": "Etkinleştirilemedi",
    "mi_linuxHub_guard_save_fail": "Kaydedilemedi, lütfen tekrar deneyin.",
    "mi_linuxHub_scene_launch": "Herhangi bir koşul karşılanırsa",
    "mi_linuxHub_scene_action": "Ardından",
    "mi_linuxHub_nightlight_open": "Gece lambasını aç",
    "mi_linuxHub_nightlight_motion": "Birisi hareket etti",
    "mi_linuxHub_guard_trigger_alarm_device": "Uyarı tetikleyici cihaz",
    "mi_linuxHub_guard_guardian_countdown": "Korumayı etkinleştirmek için geri sayım",
    "mi_linuxHub_arming_ring": "Ünite uyarı zil sesi",
    "mi_linuxHub_arming_always_ringing": "Sürekli",
    "mi_linuxHub_arming_mute": "Sessiz",
    "mi_linuxHub_arming_always_flashing": "Sürekli yanar",
    "mi_linuxHub_arming_not_flashing": "Yanmaz",
    "mi_linuxHub_second": "saniye",
    "mi_linuxHub_arming_holdtime_0": "Şimdi etkinleştir",
    "mi_linuxHub_arming_tone_name1": "Polis arabası sesi 1",
    "mi_linuxHub_arming_tone_name2": "Polis arabası sesi 2",
    "mi_linuxHub_arming_tone_name3": "Güvenlik olayı sesi",
    "mi_linuxHub_arming_tone_name4": "Fırlatma geri sayım",
    "mi_linuxHub_arming_tone_name5": "Hayalet çığlığı",
    "mi_linuxHub_arming_tone_name6": "Keskin nişancı tüfeği",
    "mi_linuxHub_arming_tone_name7": "Savaş sesleri",
    "mi_linuxHub_arming_tone_name8": "Hava saldırısı alarmı",
    "mi_linuxHub_arming_tone_name9": "Köpek havlaması",
    "mi_linuxHub_lazy_clock_list": "Çalar saat listesi",
    "mi_linuxHub_lazy_clock_close_way": "Çalar saat kapalı modu",
    "mi_linuxHub_numbers": "öge",
    "mi_linuxHub_lazy_clock_gateway_choose": "Bir defa bas (zorunlu)",
    "mi_linuxHub_magnet_open": "Aç",
    "mi_linuxHub_switch_click_once": "Tıklayın",
    "mi_linuxHub_lazy_clock_close": "Çalar saati devre dışı bırak",
    "mi_linuxHub_lazy_clock_list_empty": "Hiçbir çalar saat eklenmedi",
    "mi_linuxHub_bell_no_sub_device_tip": "Merkezi kontrol ünitesi ile eşleşmiş ve hareket sensörü, pencere ve kapı sensörü ya da kablosuz anahtar gibi bir kapı zilini tetiklemek için kullanılabilecek hiçbir cihaz yok.",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "Uyarı zil sesi",
    "mi_linuxHub_play_specific_tone": "Belirlenen zil sesini çal",
    "mi_linuxHub_offline": "Çevrimdışı",
    "mi_linuxHub_guard_guide_tip": "Uyarı ayarları buradadır.",
    "mi_linuxHub_guard_guide_next": "İleri",
    "mi_linuxHub_light_guide_tip": "Ayarlı renkli lamba ve otomatik gece lambası ayarları buradadır.",
    "mi_linuxHub_ring_the_bell": "Kapı zilini çal",
    "mi_linuxHub_alarm": "Uyarı",
    "mi_linuxHub_send_phone_msg": "Telefona bildirim gönder",
    "mi_linuxHub_go_back_title": "Çıkış",
    "mi_linuxHub_go_back_content": "Değişiklikleri sil ve şimdi çık?",
    "mi_linuxHub_nightlight_commont": "{value} karanlık bir ortamdayken",
    "mi_linuxHub_nightlight_no_device": "Merkezi kontrol ünitesi ile eşleşmiş ve gece lambasını tetiklemek için kullanılabilecek hiçbir hareket sensörü yok.",
    "mi_linuxHub_nightlight_no_opendevice": "Gece lambasını tetiklemek için en az bir adet hareket sensörü ekleyin.",
    "mi_linuxHub_linkage_alarm_footer_text": "Merkezi kontrol ünitesi uyarı bağlantı işlevi etkinleştirildiğinde ve bir merkezi kontrol ünitesi tetiklendiğinde, tüm merkezi kontrol ünitelerinde uyarı zil sesi ve yanıp sönen ışıklar tetiklenir.",
    "mi_linuxHub_lazy_clock_delete": "Seçili zamanlayıcı silinsin mi?",
    "mi_linuxHub_guard_no_sub_device_tip": "Merkezi kontrol ünitesi ile eşleşmiş ve hareket sensörü, pencere ve kapı sensörü ya da kablosuz anahtar gibi bir uyarıyı tetiklemek için kullanılabilecek hiçbir cihaz yok.",
    "mi_linuxHub_setting_language": "Bildirim dili",
    "mi_linuxHub_setting_protect_delete": "Silme koruması",
    "mi_linuxHub_setting_protect_delete_tip": "Bu cihaz sadece uygulama üzerinden silinebilir.",
    "mi_linuxHub_minute": "min",
    "mi_linuxHub_setting_bell": "Zil sesi",
    "mi_linuxHub_setting_volume": "Ses düzeyi",
    "mi_linuxHub_setting_nightlight_tomorrow": "Ertesi gün",
    "mi_linuxHub_setting_nightlight_allday": "Bütün gün",
    "mi_linuxHub_setting_alarm_motion_detail": "Birisi geçerken uyarı ver",
    "mi_linuxHub_setting_alarm_magnet_detail": "Kapı/pencere açık uyarısı",
    "mi_linuxHub_setting_alarm_switch_detail": "Birisi butona bastığında uyarı verir",
    "mi_linuxHub_setting_alarm_cube_detail": "1 dakika boyunca hareketsiz kaldıktan sonra hareket ettirildiğinde küp alarm gönderir",
    "mi_linuxHub_setting_alarm_vibrate_detail": "2 dakika boyunca hareketsiz kaldıktan sonra hareket ettirildiğinde hareket yapıştırması alarm gönderir",
    "mi_linuxHub_arming_log_magnet_open": "Kapı ve pencere açma tetikleme uyarısı",
    "mi_linuxHub_arming_log_motion_motion": "Birisi geçtiği zaman uyarı verir",
    "mi_linuxHub_arming_log_switch_click": "Butona basmak uyarıyı tetikler",
    "mi_linuxHub_arming_log_cube_alert": "Sihirli küp tetikleme uyarısı",
    "mi_linuxHub_arming_log_vibration_alarm": "Titreşim tetiklemeli alarm",
    "mi_linuxHub_arming_log_vibration_alarm_open": "Kapı ve pencere açma tetikleme uyarısı",
    "mi_linuxHub_arming_log_camera_detect_motion": "Hareket tetiklemeli alarm algılandı",
    "mi_linuxHub_arming_volume_length": "Alarm süresi",
    "mi_linuxHub_timer": "Program",
    "mi_linuxHub_custom": "Özel",
    "mi_linuxHub_system_ring": "Sistem zil sesi",
    "mi_linuxHub_add": "eklemek",
    "mi_linuxHub_timersetting_repeat": "tekrar",
    "mi_linuxHub_timersetting_repeat_once": "Bir kere çalıştır",
    "mi_linuxHub_timersetting_repeat_today": "Bugün",
    "mi_linuxHub_timersetting_repeat_tomorrow": "yarın",
    "mi_linuxHub_timersetting_repeat_everyday": "Her gün",
    "mi_linuxHub_timersetting_repeat_workday": "Pzt - Cum",
    "mi_linuxHub_timersetting_repeat_weekend": "Haftasonu",
    "mi_linuxHub_tone_volume": "Zil sesi düzeyi",
    "mi_linuxHub_linkage_alarm": "Bağlantı alarmı",
    "mi_linuxHub_linkage_alarm_hint_detail": "Başka bir Ünite ile bağlantı ve uyarı, güvenlik düzeyinizi artırın",
    "mi_linuxHub_nightlight_smart_light": "Biri geçti, gece lambası aydınlatıldı.",
    "mi_linuxHub_nightlight_delay_close_min": "Gece lambasını {value} dk içinde kapat",
    "mi_linuxHub_setting_nightlight_on": "Etkinleştir",
    "mi_linuxHub_device_offline": "Cihaz çevrimdışı",
    "mi_linuxHub_timer_light_list_empty": "Henüz zamanlama eklenmedi",
    "mi_linuxHub_date_mon": "Pazartesi",
    "mi_linuxHub_date_tues": "Salı",
    "mi_linuxHub_date_wed": "Çarşamba",
    "mi_linuxHub_date_thur": "Perşembe",
    "mi_linuxHub_date_fri": "Cuma",
    "mi_linuxHub_date_sat": "Cumartesi",
    "mi_linuxHub_date_sun": "Haftasonu",
    "mi_linuxHub_arming_light_length": "Işık yanıp sönme süresi",
    "mi_linuxHub_linkage_alarm_dis": "Bağlantı alarmı iptal edildi",
    "mi_linuxHub_home_tab_guard": "Koruyucu",
    "mi_linuxHub_home_tab_coloured_light": "Renkli ışık",
    "mi_linuxHub_guardSetting": "Koruyucu ayarları",
    "mi_linuxHub_nightlight_timer": "İndüksiyon süresi",
    "mi_linuxHub_main_sub_device": "Çocuk cihazı",
    "mi_linuxHub_guard_alarm_sound_light_settings": "Alarm zil sesi ve ışık ayarları",
    "mi_linuxHub_guard_link_other_gateway_alarms": "Toplu uyarı için diğer hub’lar ile bağlantı kur",
    "mi_linuxHub_guard_guard_timer": "Koruyucu zamanlama",
    "mi_linuxHub_waring_guard_opening": "Guardian açmaya hazır",
    "mi_linuxHub_timer_light_timer_light_period": "Zaman dönemi",
    "mi_linuxHub_timer_light_timer_on": "Zaman aşımına uğradı",
    "mi_linuxHub_timer_light_timer_off": "Zaman aşımına uğradı",
    "mi_linuxHub_timer_light_timer_on_no_set": "Başlangıç zamanı ayarlanmadı",
    "mi_linuxHub_timer_light_timer_off_no_set": "Kapanış saati ayarlanmadı",
    "mi_linuxHub_timer_light_timer_time_after": "Bitiş zamanından sonra başlangıç zamanı",
    "mi_linuxHub_linkage_alarm_number_ten": "Yalnızca 10 ağ geçidi alarmı seçebilir",
    "mi_linuxHub_sure_delete": "Seçili öğeyi silmek istediğinize emin misiniz?",
    "mi_linuxHub_add_lzayclock": "Alarm ekle",
    "mi_linuxHub_repeat_timer_title": "Tekrarlama seçeneği",
    "mi_linuxHub_repeat_self_timer_title": "Özel tekrar",
    "mi_linuxHub_lazy_clock_name": "Çalar saat",
    "mi_linuxHub_nightlight_motion_limit": "Yalnızca 9 adede kadar insan vücudu sensörünü seçebilir",
    "mi_linuxHub_must_choose": "gereken",
    "mi_linuxHub_timer_light_name": "Renkli ışık zamanlayıcısı"
  };
  exports.default = tr;
},11222,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var zhHans = {
    "mi_linuxHub_guard_arming_log": "报警日志",
    "mi_linuxHub_waring_guard_open": "守护已开启，点击关闭",
    "mi_linuxHub_waring_guard_close": "守护已关闭，点击开启",
    "mi_linuxHub_main_light_intensity": "灯光亮度",
    "mi_linuxHub_main_timing_light": "定时彩灯",
    "mi_linuxHub_home_coloured_light_close": "点击关闭",
    "mi_linuxHub_home_coloured_light_open": "点击开启",
    "mi_linuxHub_setting_nightlight": "感应夜灯",
    "mi_linuxHub_setting_volume_setting": "音量设置",
    "mi_linuxHub_setting_alarmclock": "懒人闹钟",
    "mi_linuxHub_setting_doorbell": "门铃",
    "mi_linuxHub_setting_volume_doorbell": "门铃音量",
    "mi_linuxHub_setting_volume_tip": "提示音量",
    "mi_linuxHub_setting_volume_alarm": "报警音量",
    "mi_linuxHub_setting_nightlight_switch_comment": "网关所在的环境光线较暗时，自动为您点亮夜灯",
    "mi_linuxHub_setting_nightlight_holdtime": "人离开后延时关灯时间",
    "mi_linuxHub_setting_push": "手机通知",
    "mi_linuxHub_setting_doorbell_tone1": "门铃音",
    "mi_linuxHub_setting_doorbell_tone2": "敲门音",
    "mi_linuxHub_setting_doorbell_tone3": "搞笑音",
    "mi_linuxHub_setting_doorbell_tone4": "闹钟音",
    "mi_linuxHub_setting_doorbell_tone5": "大吉大利，万事亨通",
    "mi_linuxHub_setting_doorbell_tone6": "恭喜发财，年年有余",
    "mi_linuxHub_setting_doorbell_tone7": "快开门啊收红包啦",
    "mi_linuxHub_setting_doorbell_tone8": "音乐鞭炮",
    "mi_linuxHub_guard_share_no_sub_device_tip": "暂无法控制。因为该网关下暂无可作为报警触发源的设备，请转告分享者先行添加",
    "mi_linuxHub_guard_go_buy": "去购买",
    "mi_linuxHub_guard_sub_device_no_config": "请去配置触发报警设备",
    "mi_linuxHub_guard_share_sub_device_no_config": "请转告该网关的分享者去配置触发报警设备",
    "mi_linuxHub_guard_go_config": "去设置",
    "mi_linuxHub_guard_can_not_open": "无法开启",
    "mi_linuxHub_guard_save_fail": "保存失败，请重试",
    "mi_linuxHub_scene_launch": "如果任一满足时",
    "mi_linuxHub_scene_action": "就执行",
    "mi_linuxHub_nightlight_open": "开启夜灯",
    "mi_linuxHub_nightlight_motion": "有人移动",
    "mi_linuxHub_guard_trigger_alarm_device": "触发报警设备",
    "mi_linuxHub_guard_guardian_countdown": "守护开启倒计时",
    "mi_linuxHub_arming_ring": "网关报警铃音",
    "mi_linuxHub_arming_always_ringing": "一直响",
    "mi_linuxHub_arming_mute": "静音",
    "mi_linuxHub_arming_always_flashing": "一直闪",
    "mi_linuxHub_arming_not_flashing": "不闪烁",
    "mi_linuxHub_second": "秒",
    "mi_linuxHub_arming_holdtime_0": "立即生效",
    "mi_linuxHub_arming_tone_name1": "警车音1",
    "mi_linuxHub_arming_tone_name2": "警车音2",
    "mi_linuxHub_arming_tone_name3": "安全事故音",
    "mi_linuxHub_arming_tone_name4": "导弹倒计时",
    "mi_linuxHub_arming_tone_name5": "鬼叫声",
    "mi_linuxHub_arming_tone_name6": "狙击枪声",
    "mi_linuxHub_arming_tone_name7": "激战声",
    "mi_linuxHub_arming_tone_name8": "空袭警报",
    "mi_linuxHub_arming_tone_name9": "狗叫声",
    "mi_linuxHub_lazy_clock_list": "闹钟列表",
    "mi_linuxHub_lazy_clock_close_way": "关闭闹钟方式",
    "mi_linuxHub_numbers": "个",
    "mi_linuxHub_lazy_clock_gateway_choose": "按键按一下（必选）",
    "mi_linuxHub_magnet_open": "打开",
    "mi_linuxHub_switch_click_once": "单击",
    "mi_linuxHub_lazy_clock_close": "关闭闹钟",
    "mi_linuxHub_lazy_clock_list_empty": "未添加闹钟",
    "mi_linuxHub_bell_no_sub_device_tip": "该网关下暂无可作为触发门铃响的设备。如门窗传感器、人体传感器、无线开关等",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "警戒音",
    "mi_linuxHub_play_specific_tone": "播放指定铃声",
    "mi_linuxHub_offline": "已离线",
    "mi_linuxHub_guard_guide_tip": "警戒的设置移到这里了",
    "mi_linuxHub_guard_guide_next": "下一步",
    "mi_linuxHub_light_guide_tip": "定时彩灯和感应夜灯移到这里了",
    "mi_linuxHub_ring_the_bell": "响门铃",
    "mi_linuxHub_alarm": "报警",
    "mi_linuxHub_send_phone_msg": "向手机发送通知",
    "mi_linuxHub_go_back_title": "退出编辑",
    "mi_linuxHub_go_back_content": "退出后修改将丢失，退出？",
    "mi_linuxHub_nightlight_commont": "当{value}所在环境较暗时",
    "mi_linuxHub_nightlight_no_device": "该网关下暂无可作为开启夜灯的人体传感器设备",
    "mi_linuxHub_nightlight_no_opendevice": "请至少配置1个人体传感器作为开启夜灯的触发设备",
    "mi_linuxHub_linkage_alarm_footer_text": "开启联动报警功能的网关中，当任意一个网关报警，其他网关也会联动报警，发出报警铃音和灯光",
    "mi_linuxHub_lazy_clock_delete": "确认删除所选定时？",
    "mi_linuxHub_guard_no_sub_device_tip": "该网关下暂无可作为报警触发源的设备，如人体传感器、门窗传感器以及无线开关等",
    "mi_linuxHub_setting_language": "提示音语言",
    "mi_linuxHub_setting_protect_delete": "防止误删除",
    "mi_linuxHub_setting_protect_delete_tip": "只能通过APP删除本设备",
    "mi_linuxHub_minute": "分钟",
    "mi_linuxHub_setting_bell": "铃音",
    "mi_linuxHub_setting_volume": "音量",
    "mi_linuxHub_setting_nightlight_tomorrow": "次日",
    "mi_linuxHub_setting_nightlight_allday": "全天",
    "mi_linuxHub_setting_alarm_motion_detail": "有人经过报警",
    "mi_linuxHub_setting_alarm_magnet_detail": "门窗打开报警",
    "mi_linuxHub_setting_alarm_switch_detail": "有人按键报警",
    "mi_linuxHub_setting_alarm_cube_detail": "魔方静止1分钟后被触动，报警",
    "mi_linuxHub_setting_alarm_vibrate_detail": "动静贴静止2分钟后被触动，报警",
    "mi_linuxHub_arming_log_magnet_open": "门窗打开触发报警",
    "mi_linuxHub_arming_log_motion_motion": "有人经过触发报警",
    "mi_linuxHub_arming_log_switch_click": "按键触发报警",
    "mi_linuxHub_arming_log_cube_alert": "魔方被触动报警",
    "mi_linuxHub_arming_log_vibration_alarm": "振动触发报警",
    "mi_linuxHub_arming_log_vibration_alarm_open": "门窗打开触发报警",
    "mi_linuxHub_arming_log_camera_detect_motion": "侦测到移动触发报警",
    "mi_linuxHub_arming_volume_length": "报警音时长",
    "mi_linuxHub_timer": "定时",
    "mi_linuxHub_custom": "自定义",
    "mi_linuxHub_system_ring": "系统铃音",
    "mi_linuxHub_add": "添加",
    "mi_linuxHub_timersetting_repeat": "重复",
    "mi_linuxHub_timersetting_repeat_once": "执行一次",
    "mi_linuxHub_timersetting_repeat_today": "今天",
    "mi_linuxHub_timersetting_repeat_tomorrow": "明天",
    "mi_linuxHub_timersetting_repeat_everyday": "每天",
    "mi_linuxHub_timersetting_repeat_workday": "周一至周五",
    "mi_linuxHub_timersetting_repeat_weekend": "周末",
    "mi_linuxHub_tone_volume": "铃声音量",
    "mi_linuxHub_linkage_alarm": "联动报警",
    "mi_linuxHub_linkage_alarm_hint_detail": "联动其他网关一起报警，提升安全等级",
    "mi_linuxHub_nightlight_smart_light": "有人经过，感应夜灯亮",
    "mi_linuxHub_nightlight_delay_close_min": "{value}分钟后关闭夜灯",
    "mi_linuxHub_setting_nightlight_on": "开启",
    "mi_linuxHub_device_offline": "设备已离线",
    "mi_linuxHub_timer_light_list_empty": "还没有添加定时哦",
    "mi_linuxHub_date_mon": "周一",
    "mi_linuxHub_date_tues": "周二",
    "mi_linuxHub_date_wed": "周三",
    "mi_linuxHub_date_thur": "周四",
    "mi_linuxHub_date_fri": "周五",
    "mi_linuxHub_date_sat": "周六",
    "mi_linuxHub_date_sun": "周日",
    "mi_linuxHub_arming_light_length": "灯光闪烁时长",
    "mi_linuxHub_linkage_alarm_dis": "联动报警取消",
    "mi_linuxHub_home_tab_guard": "守护",
    "mi_linuxHub_home_tab_coloured_light": "彩灯",
    "mi_linuxHub_guardSetting": "守护设置",
    "mi_linuxHub_nightlight_timer": "感应时段",
    "mi_linuxHub_main_sub_device": "子设备",
    "mi_linuxHub_guard_alarm_sound_light_settings": "报警声光设置",
    "mi_linuxHub_guard_link_other_gateway_alarms": "联动其他网关报警",
    "mi_linuxHub_guard_guard_timer": "守护定时",
    "mi_linuxHub_waring_guard_opening": "守护准备开启",
    "mi_linuxHub_timer_light_timer_light_period": "时间段定时",
    "mi_linuxHub_timer_light_timer_on": "定时开启",
    "mi_linuxHub_timer_light_timer_off": "定时关闭",
    "mi_linuxHub_timer_light_timer_on_no_set": "开始时间未设置",
    "mi_linuxHub_timer_light_timer_off_no_set": "关闭时间未设置",
    "mi_linuxHub_timer_light_timer_time_after": "开始时间在结束时间之后",
    "mi_linuxHub_linkage_alarm_number_ten": "最多只能选择10个网关报警",
    "mi_linuxHub_sure_delete": "确认删除所选项吗？",
    "mi_linuxHub_add_lzayclock": "添加闹钟",
    "mi_linuxHub_repeat_timer_title": "重复选项",
    "mi_linuxHub_repeat_self_timer_title": "自定义重复",
    "mi_linuxHub_lazy_clock_name": "闹钟定时器",
    "mi_linuxHub_nightlight_motion_limit": "最多只能选择9个人体传感器",
    "mi_linuxHub_must_choose": "必选",
    "mi_linuxHub_timer_light_name": "彩灯定时器"
  };
  exports.default = zhHans;
},11225,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var zhHantHK = {
    "mi_linuxHub_guard_arming_log": "報警日誌",
    "mi_linuxHub_waring_guard_open": "守護已開啟，按一下關閉",
    "mi_linuxHub_waring_guard_close": "守護已關閉，按一下開啟",
    "mi_linuxHub_main_light_intensity": "燈光亮度",
    "mi_linuxHub_main_timing_light": "定時彩燈",
    "mi_linuxHub_home_coloured_light_close": "點選關閉",
    "mi_linuxHub_home_coloured_light_open": "點選開啓",
    "mi_linuxHub_setting_nightlight": "感應夜燈",
    "mi_linuxHub_setting_volume_setting": "音量設定",
    "mi_linuxHub_setting_alarmclock": "懶人鬧鐘",
    "mi_linuxHub_setting_doorbell": "門鈴",
    "mi_linuxHub_setting_volume_doorbell": "門鈴音量",
    "mi_linuxHub_setting_volume_tip": "提示音量",
    "mi_linuxHub_setting_volume_alarm": "報警音量",
    "mi_linuxHub_setting_nightlight_switch_comment": "網關所在的環境光線較暗時，自動為您點亮夜燈",
    "mi_linuxHub_setting_nightlight_holdtime": "人離開後延時關燈時間",
    "mi_linuxHub_setting_push": "手機通知",
    "mi_linuxHub_setting_doorbell_tone1": "門鈴聲",
    "mi_linuxHub_setting_doorbell_tone2": "敲門音",
    "mi_linuxHub_setting_doorbell_tone3": "搞笑音",
    "mi_linuxHub_setting_doorbell_tone4": "鬧鐘音",
    "mi_linuxHub_setting_doorbell_tone5": "大吉大利萬事亨通",
    "mi_linuxHub_setting_doorbell_tone6": "恭喜發財年年有餘",
    "mi_linuxHub_setting_doorbell_tone7": "快開門啊收紅包啦",
    "mi_linuxHub_setting_doorbell_tone8": "音樂鞭炮",
    "mi_linuxHub_guard_share_no_sub_device_tip": "暫無法控制。因為該閘道下暫無可作為報警觸發源的裝置，請轉告分享者先行新增",
    "mi_linuxHub_guard_go_buy": "去購買",
    "mi_linuxHub_guard_sub_device_no_config": "請去設定觸發報警裝置",
    "mi_linuxHub_guard_share_sub_device_no_config": "請轉告該閘道的分享者去設定觸發報警裝置",
    "mi_linuxHub_guard_go_config": "去設定",
    "mi_linuxHub_guard_can_not_open": "無法開啟",
    "mi_linuxHub_guard_save_fail": "儲存失敗，請重試",
    "mi_linuxHub_scene_launch": "如果任一滿足時",
    "mi_linuxHub_scene_action": "就執行",
    "mi_linuxHub_nightlight_open": "開啟夜燈",
    "mi_linuxHub_nightlight_motion": "檢測到運動",
    "mi_linuxHub_guard_trigger_alarm_device": "觸發報警裝置",
    "mi_linuxHub_guard_guardian_countdown": "守護開啟倒計時",
    "mi_linuxHub_arming_ring": "報警鈴音",
    "mi_linuxHub_arming_always_ringing": "一直響",
    "mi_linuxHub_arming_mute": "靜音",
    "mi_linuxHub_arming_always_flashing": "一直閃",
    "mi_linuxHub_arming_not_flashing": "不閃爍",
    "mi_linuxHub_second": "秒",
    "mi_linuxHub_arming_holdtime_0": "立即生效",
    "mi_linuxHub_arming_tone_name1": "警車音1",
    "mi_linuxHub_arming_tone_name2": "警車音2",
    "mi_linuxHub_arming_tone_name3": "安全事故音",
    "mi_linuxHub_arming_tone_name4": "導彈倒計時",
    "mi_linuxHub_arming_tone_name5": "鬼叫聲",
    "mi_linuxHub_arming_tone_name6": "狙擊槍",
    "mi_linuxHub_arming_tone_name7": "激戰聲",
    "mi_linuxHub_arming_tone_name8": "空襲警報",
    "mi_linuxHub_arming_tone_name9": "狗叫聲",
    "mi_linuxHub_lazy_clock_list": "鬧鐘清單",
    "mi_linuxHub_lazy_clock_close_way": "關閉鬧鐘方式",
    "mi_linuxHub_numbers": "個",
    "mi_linuxHub_lazy_clock_gateway_choose": "按鍵按一下（必選）",
    "mi_linuxHub_magnet_open": "打開",
    "mi_linuxHub_switch_click_once": "按一下",
    "mi_linuxHub_lazy_clock_close": "關閉鬧鐘",
    "mi_linuxHub_lazy_clock_list_empty": "未新增鬧鐘",
    "mi_linuxHub_bell_no_sub_device_tip": "該閘道下暫無可作為觸發門鈴響的裝置。如門窗感測器、人體感測器、無線開關等",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "警報鈴聲",
    "mi_linuxHub_play_specific_tone": "播放指定鈴聲",
    "mi_linuxHub_offline": "已離線",
    "mi_linuxHub_guard_guide_tip": "守護的設定移到這裡了",
    "mi_linuxHub_guard_guide_next": "下一步",
    "mi_linuxHub_light_guide_tip": "定時彩燈和感應夜燈移到這裡了",
    "mi_linuxHub_ring_the_bell": "響門鈴",
    "mi_linuxHub_alarm": "報警",
    "mi_linuxHub_send_phone_msg": "向手機傳送通知",
    "mi_linuxHub_go_back_title": "離開編輯",
    "mi_linuxHub_go_back_content": "離開後修改將丟失，離開?",
    "mi_linuxHub_nightlight_commont": "當{value}所在環境較暗時",
    "mi_linuxHub_nightlight_no_device": "該閘道下暫無可作為開啟夜燈的人體感測器裝置",
    "mi_linuxHub_nightlight_no_opendevice": "請至少設定 1 個人體感測器作為開啟夜燈的觸發裝置",
    "mi_linuxHub_linkage_alarm_footer_text": "開啟聯動報警功能的閘道中，當任意一個閘道報警，其他閘道也會聯動報警，發出報警鈴音和燈光",
    "mi_linuxHub_lazy_clock_delete": "確認刪除所選定時?",
    "mi_linuxHub_guard_no_sub_device_tip": "該閘道下暫無可作為報警觸發源的裝置，如人體感測器、門窗感測器以及無線開關等",
    "mi_linuxHub_setting_language": "提示音語言",
    "mi_linuxHub_setting_protect_delete": "防止誤刪除",
    "mi_linuxHub_setting_protect_delete_tip": "只能通過 APP 刪除本裝置",
    "mi_linuxHub_minute": "分鐘",
    "mi_linuxHub_setting_bell": "鈴音",
    "mi_linuxHub_setting_volume": "音量",
    "mi_linuxHub_setting_nightlight_tomorrow": "次日",
    "mi_linuxHub_setting_nightlight_allday": "全天",
    "mi_linuxHub_setting_alarm_motion_detail": "有人經過警報",
    "mi_linuxHub_setting_alarm_magnet_detail": "門窗打開警報",
    "mi_linuxHub_setting_alarm_switch_detail": "有人按鍵警報",
    "mi_linuxHub_setting_alarm_cube_detail": "魔方靜止1分鐘後被觸動，警報",
    "mi_linuxHub_setting_alarm_vibrate_detail": "動靜貼靜止2分鐘後被觸動，警報",
    "mi_linuxHub_arming_log_magnet_open": "門窗打開觸發警報",
    "mi_linuxHub_arming_log_motion_motion": "有人經過觸發警報",
    "mi_linuxHub_arming_log_switch_click": "按鍵觸發警報",
    "mi_linuxHub_arming_log_cube_alert": "魔方被觸動警報",
    "mi_linuxHub_arming_log_vibration_alarm": "振動觸發報警",
    "mi_linuxHub_arming_log_vibration_alarm_open": "門窗打開觸發報警",
    "mi_linuxHub_arming_log_camera_detect_motion": "偵測到移動觸發報警",
    "mi_linuxHub_arming_volume_length": "報警音時長",
    "mi_linuxHub_timer": "定時",
    "mi_linuxHub_custom": "自定義",
    "mi_linuxHub_system_ring": "系統鈴音",
    "mi_linuxHub_add": "添加",
    "mi_linuxHub_timersetting_repeat": "重複",
    "mi_linuxHub_timersetting_repeat_once": "執行一次",
    "mi_linuxHub_timersetting_repeat_today": "今天",
    "mi_linuxHub_timersetting_repeat_tomorrow": "明天",
    "mi_linuxHub_timersetting_repeat_everyday": "每天",
    "mi_linuxHub_timersetting_repeat_workday": "週一至週五",
    "mi_linuxHub_timersetting_repeat_weekend": "週末",
    "mi_linuxHub_tone_volume": "鈴聲音量",
    "mi_linuxHub_linkage_alarm": "聯動警報",
    "mi_linuxHub_linkage_alarm_hint_detail": "聯動其他網關一起報警，提升安全等級",
    "mi_linuxHub_nightlight_smart_light": "有人經過，感應夜燈亮",
    "mi_linuxHub_nightlight_delay_close_min": "{value}分鐘後關閉夜燈",
    "mi_linuxHub_setting_nightlight_on": "開啓",
    "mi_linuxHub_device_offline": "裝置已離線",
    "mi_linuxHub_timer_light_list_empty": "還沒有增加定時哦",
    "mi_linuxHub_date_mon": "週一",
    "mi_linuxHub_date_tues": "週二",
    "mi_linuxHub_date_wed": "週三",
    "mi_linuxHub_date_thur": "週四",
    "mi_linuxHub_date_fri": "週五",
    "mi_linuxHub_date_sat": "週六",
    "mi_linuxHub_date_sun": "週日",
    "mi_linuxHub_arming_light_length": "燈光閃爍時長",
    "mi_linuxHub_linkage_alarm_dis": "聯動警報取消",
    "mi_linuxHub_home_tab_guard": "守護",
    "mi_linuxHub_home_tab_coloured_light": "彩燈",
    "mi_linuxHub_guardSetting": "守護設定",
    "mi_linuxHub_nightlight_timer": "感應時段",
    "mi_linuxHub_main_sub_device": "子裝置",
    "mi_linuxHub_guard_alarm_sound_light_settings": "報警聲光設定",
    "mi_linuxHub_guard_link_other_gateway_alarms": "聯動其他網關報警",
    "mi_linuxHub_guard_guard_timer": "守護定時",
    "mi_linuxHub_waring_guard_opening": "守護準備開啟",
    "mi_linuxHub_timer_light_timer_light_period": "時間段定時",
    "mi_linuxHub_timer_light_timer_on": "定時開啟",
    "mi_linuxHub_timer_light_timer_off": "定時關閉",
    "mi_linuxHub_timer_light_timer_on_no_set": "開始時間未設置",
    "mi_linuxHub_timer_light_timer_off_no_set": "關閉時間未設置",
    "mi_linuxHub_timer_light_timer_time_after": "開始時間在結束時間之後",
    "mi_linuxHub_linkage_alarm_number_ten": "最多只能選擇10個網關報警",
    "mi_linuxHub_sure_delete": "確認刪除所選項嗎？",
    "mi_linuxHub_add_lzayclock": "添加鬧鐘",
    "mi_linuxHub_repeat_timer_title": "重複選項",
    "mi_linuxHub_repeat_self_timer_title": "自定義重複",
    "mi_linuxHub_lazy_clock_name": "鬧鐘定時器",
    "mi_linuxHub_nightlight_motion_limit": "最多只能選擇9個人體傳感器",
    "mi_linuxHub_must_choose": "必選",
    "mi_linuxHub_timer_light_name": "彩燈定時器"
  };
  exports.default = zhHantHK;
},11228,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var zhHant = {
    "mi_linuxHub_guard_arming_log": "報警日誌",
    "mi_linuxHub_waring_guard_open": "守護已開啟，按一下關閉",
    "mi_linuxHub_waring_guard_close": "守護已關閉，按一下開啟",
    "mi_linuxHub_main_light_intensity": "燈光亮度",
    "mi_linuxHub_main_timing_light": "定時彩燈",
    "mi_linuxHub_home_coloured_light_close": "點選關閉",
    "mi_linuxHub_home_coloured_light_open": "點選開啓",
    "mi_linuxHub_setting_nightlight": "感應夜燈",
    "mi_linuxHub_setting_volume_setting": "音量設定",
    "mi_linuxHub_setting_alarmclock": "懶人鬧鐘",
    "mi_linuxHub_setting_doorbell": "門鈴",
    "mi_linuxHub_setting_volume_doorbell": "門鈴音量",
    "mi_linuxHub_setting_volume_tip": "提示音量",
    "mi_linuxHub_setting_volume_alarm": "報警音量",
    "mi_linuxHub_setting_nightlight_switch_comment": "網關所在的環境光線較暗時，自動為您點亮夜燈",
    "mi_linuxHub_setting_nightlight_holdtime": "人離開後延時關燈時間",
    "mi_linuxHub_setting_push": "手機通知",
    "mi_linuxHub_setting_doorbell_tone1": "門鈴聲",
    "mi_linuxHub_setting_doorbell_tone2": "敲門音",
    "mi_linuxHub_setting_doorbell_tone3": "搞笑音",
    "mi_linuxHub_setting_doorbell_tone4": "鬧鐘音",
    "mi_linuxHub_setting_doorbell_tone5": "大吉大利萬事亨通",
    "mi_linuxHub_setting_doorbell_tone6": "恭喜發財年年有餘",
    "mi_linuxHub_setting_doorbell_tone7": "快開門啊收紅包啦",
    "mi_linuxHub_setting_doorbell_tone8": "音樂鞭炮",
    "mi_linuxHub_guard_share_no_sub_device_tip": "暫無法控制。因為該閘道下暫無可作為報警觸發源的裝置，請轉告分享者先行新增",
    "mi_linuxHub_guard_go_buy": "去購買",
    "mi_linuxHub_guard_sub_device_no_config": "請去設定觸發報警裝置",
    "mi_linuxHub_guard_share_sub_device_no_config": "請轉告該閘道的分享者去設定觸發報警裝置",
    "mi_linuxHub_guard_go_config": "去設定",
    "mi_linuxHub_guard_can_not_open": "無法開啟",
    "mi_linuxHub_guard_save_fail": "儲存失敗，請再試一次",
    "mi_linuxHub_scene_launch": "如果任一滿足時",
    "mi_linuxHub_scene_action": "就執行",
    "mi_linuxHub_nightlight_open": "開啟夜燈",
    "mi_linuxHub_nightlight_motion": "檢測到運動",
    "mi_linuxHub_guard_trigger_alarm_device": "觸發報警裝置",
    "mi_linuxHub_guard_guardian_countdown": "守護開啟倒計時",
    "mi_linuxHub_arming_ring": "報警鈴音",
    "mi_linuxHub_arming_always_ringing": "一直響",
    "mi_linuxHub_arming_mute": "靜音",
    "mi_linuxHub_arming_always_flashing": "一直閃",
    "mi_linuxHub_arming_not_flashing": "不閃爍",
    "mi_linuxHub_second": "秒",
    "mi_linuxHub_arming_holdtime_0": "立即生效",
    "mi_linuxHub_arming_tone_name1": "警車音1",
    "mi_linuxHub_arming_tone_name2": "警車音2",
    "mi_linuxHub_arming_tone_name3": "安全事故音",
    "mi_linuxHub_arming_tone_name4": "導彈倒計時",
    "mi_linuxHub_arming_tone_name5": "鬼叫聲",
    "mi_linuxHub_arming_tone_name6": "狙擊槍",
    "mi_linuxHub_arming_tone_name7": "激戰聲",
    "mi_linuxHub_arming_tone_name8": "空襲警報",
    "mi_linuxHub_arming_tone_name9": "狗叫聲",
    "mi_linuxHub_lazy_clock_list": "鬧鐘清單",
    "mi_linuxHub_lazy_clock_close_way": "關閉鬧鐘方式",
    "mi_linuxHub_numbers": "個",
    "mi_linuxHub_lazy_clock_gateway_choose": "按鍵按一下（必選）",
    "mi_linuxHub_magnet_open": "打開",
    "mi_linuxHub_switch_click_once": "按一下",
    "mi_linuxHub_lazy_clock_close": "關閉鬧鐘",
    "mi_linuxHub_lazy_clock_list_empty": "未新增鬧鐘",
    "mi_linuxHub_bell_no_sub_device_tip": "該閘道下暫無可作為觸發門鈴響的裝置。如門窗感應器、人體感應器、無線開關等",
    "mi_linuxHub_clock_tone1": "MiMix",
    "mi_linuxHub_clock_tone2": "Enthusuastic",
    "mi_linuxHub_clock_tone3": "GuitarClassic",
    "mi_linuxHub_clock_tone4": "IceWorldPiano",
    "mi_linuxHub_clock_tone5": "LeisureTime",
    "mi_linuxHub_clock_tone6": "Childhood",
    "mi_linuxHub_clock_tone7": "MorningStreamLlet",
    "mi_linuxHub_clock_tone8": "MusicBox",
    "mi_linuxHub_clock_tone9": "Orange",
    "mi_linuxHub_clock_tone10": "Thinker",
    "mi_linuxHub_alarm_music": "警報鈴聲",
    "mi_linuxHub_play_specific_tone": "播放指定鈴聲",
    "mi_linuxHub_offline": "已離線",
    "mi_linuxHub_guard_guide_tip": "守護的設定移到這裡了",
    "mi_linuxHub_guard_guide_next": "下一步",
    "mi_linuxHub_light_guide_tip": "定時彩燈和感應夜燈移到這裡了",
    "mi_linuxHub_ring_the_bell": "響門鈴",
    "mi_linuxHub_alarm": "報警",
    "mi_linuxHub_send_phone_msg": "向手機傳送通知",
    "mi_linuxHub_go_back_title": "離開編輯",
    "mi_linuxHub_go_back_content": "離開後修改將丟失，離開?",
    "mi_linuxHub_nightlight_commont": "當{value}所在環境較暗時",
    "mi_linuxHub_nightlight_no_device": "該閘道下暫無可作為開啟夜燈的人體感應器裝置",
    "mi_linuxHub_nightlight_no_opendevice": "請至少設定 1 個人體感應器作為開啟夜燈的觸發裝置",
    "mi_linuxHub_linkage_alarm_footer_text": "開啟聯動報警功能的閘道中，當任意一個閘道報警，其他閘道也會聯動報警，發出報警鈴音和燈光",
    "mi_linuxHub_lazy_clock_delete": "確認刪除所選定時?",
    "mi_linuxHub_guard_no_sub_device_tip": "該閘道下暫無可作為報警觸發源的裝置，如人體感測器、門窗感測器以及無線開關等",
    "mi_linuxHub_setting_language": "提示音語言",
    "mi_linuxHub_setting_protect_delete": "防止誤刪除",
    "mi_linuxHub_setting_protect_delete_tip": "只能透過 APP 刪除本裝置",
    "mi_linuxHub_minute": "分鐘",
    "mi_linuxHub_setting_bell": "鈴音",
    "mi_linuxHub_setting_volume": "音量",
    "mi_linuxHub_setting_nightlight_tomorrow": "次日",
    "mi_linuxHub_setting_nightlight_allday": "全天",
    "mi_linuxHub_setting_alarm_motion_detail": "有人經過警報",
    "mi_linuxHub_setting_alarm_magnet_detail": "門窗打開警報",
    "mi_linuxHub_setting_alarm_switch_detail": "有人按鍵警報",
    "mi_linuxHub_setting_alarm_cube_detail": "魔方靜止1分鐘後被觸動，警報",
    "mi_linuxHub_setting_alarm_vibrate_detail": "動靜貼靜止2分鐘後被觸動，警報",
    "mi_linuxHub_arming_log_magnet_open": "門窗打開觸發警報",
    "mi_linuxHub_arming_log_motion_motion": "有人經過觸發警報",
    "mi_linuxHub_arming_log_switch_click": "按鍵觸發警報",
    "mi_linuxHub_arming_log_cube_alert": "魔方被觸動警報",
    "mi_linuxHub_arming_log_vibration_alarm": "振動觸發報警",
    "mi_linuxHub_arming_log_vibration_alarm_open": "門窗打開觸發報警",
    "mi_linuxHub_arming_log_camera_detect_motion": "偵測到移動觸發報警",
    "mi_linuxHub_arming_volume_length": "報警音時長",
    "mi_linuxHub_timer": "定時",
    "mi_linuxHub_custom": "自定義",
    "mi_linuxHub_system_ring": "系統鈴音",
    "mi_linuxHub_add": "添加",
    "mi_linuxHub_timersetting_repeat": "重複",
    "mi_linuxHub_timersetting_repeat_once": "執行一次",
    "mi_linuxHub_timersetting_repeat_today": "今天",
    "mi_linuxHub_timersetting_repeat_tomorrow": "明天",
    "mi_linuxHub_timersetting_repeat_everyday": "每天",
    "mi_linuxHub_timersetting_repeat_workday": "週一至週五",
    "mi_linuxHub_timersetting_repeat_weekend": "週末",
    "mi_linuxHub_tone_volume": "鈴聲音量",
    "mi_linuxHub_linkage_alarm": "連動警報",
    "mi_linuxHub_linkage_alarm_hint_detail": "連動其他網關一起報警，提升安全等級",
    "mi_linuxHub_nightlight_smart_light": "有人經過，感應夜燈亮",
    "mi_linuxHub_nightlight_delay_close_min": "{value}分鐘後關閉夜燈",
    "mi_linuxHub_setting_nightlight_on": "開啓",
    "mi_linuxHub_device_offline": "裝置已離線",
    "mi_linuxHub_timer_light_list_empty": "還沒有增加定時哦",
    "mi_linuxHub_date_mon": "週一",
    "mi_linuxHub_date_tues": "週二",
    "mi_linuxHub_date_wed": "週三",
    "mi_linuxHub_date_thur": "週四",
    "mi_linuxHub_date_fri": "週五",
    "mi_linuxHub_date_sat": "週六",
    "mi_linuxHub_date_sun": "週日",
    "mi_linuxHub_arming_light_length": "燈光閃爍時長",
    "mi_linuxHub_linkage_alarm_dis": "連動警報取消",
    "mi_linuxHub_home_tab_guard": "守護",
    "mi_linuxHub_home_tab_coloured_light": "彩燈",
    "mi_linuxHub_guardSetting": "守護設定",
    "mi_linuxHub_nightlight_timer": "感應時段",
    "mi_linuxHub_main_sub_device": "子裝置",
    "mi_linuxHub_guard_alarm_sound_light_settings": "報警聲光設定",
    "mi_linuxHub_guard_link_other_gateway_alarms": "聯動其他網關報警",
    "mi_linuxHub_guard_guard_timer": "守護定時",
    "mi_linuxHub_waring_guard_opening": "守護準備開啟",
    "mi_linuxHub_timer_light_timer_light_period": "時間段定時",
    "mi_linuxHub_timer_light_timer_on": "定時開啟",
    "mi_linuxHub_timer_light_timer_off": "定時關閉",
    "mi_linuxHub_timer_light_timer_on_no_set": "開始時間未設置",
    "mi_linuxHub_timer_light_timer_off_no_set": "關閉時間未設置",
    "mi_linuxHub_timer_light_timer_time_after": "開始時間在結束時間之後",
    "mi_linuxHub_linkage_alarm_number_ten": "最多只能選擇10個網關報警",
    "mi_linuxHub_sure_delete": "確認刪除所選項嗎？",
    "mi_linuxHub_add_lzayclock": "添加鬧鐘",
    "mi_linuxHub_repeat_timer_title": "重複選項",
    "mi_linuxHub_repeat_self_timer_title": "自定義重複",
    "mi_linuxHub_lazy_clock_name": "鬧鐘定時器",
    "mi_linuxHub_nightlight_motion_limit": "最多只能選擇9個人體傳感器",
    "mi_linuxHub_must_choose": "必選",
    "mi_linuxHub_timer_light_name": "彩燈定時器"
  };
  exports.default = zhHant;
},11231,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var LHCommonStyles = _reactNative.StyleSheet.create({
    navigatorWithBorderBotoom: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
    },
    navigatorWithoutBorderBotoom: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaPageBgColor
    },
    pageGrayStyle: {
      flex: 1,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    pageWhiteStyle: {
      flex: 1,
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
    },
    deleteComponent: {
      backgroundColor: '#F43F31',
      width: '100%',
      height: '100%',
      justifyContent: 'center',
      alignItems: 'center'
    },
    swipeoutImage: {
      width: _LHCommonFunction.LHUiUtils.GetPx(25),
      height: _LHCommonFunction.LHUiUtils.GetPx(25)
    },
    swipeoutText: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(12),
      color: '#ffffff'
    }
  });

  exports.default = LHCommonStyles;
},11234,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var styles = _reactNative.StyleSheet.create({
    tab1: {
      height: _LHCommonFunction.LHUiUtils.GetPx(45),
      flex: 1,
      alignItems: 'flex-end',
      justifyContent: 'center',
      paddingRight: _LHCommonFunction.LHUiUtils.GetPx(18)
    },
    tab2: {
      height: _LHCommonFunction.LHUiUtils.GetPx(45),
      alignItems: 'flex-start',
      justifyContent: 'center',
      flex: 1,
      paddingLeft: _LHCommonFunction.LHUiUtils.GetPx(18)
    },
    tabs: {
      flexDirection: 'row',
      height: _LHCommonFunction.LHUiUtils.GetPx(45),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(50),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(50),
      borderWidth: 0
    }
  });

  var CustomTabBar = function (_Component) {
    (0, _inherits2.default)(CustomTabBar, _Component);

    function CustomTabBar(props) {
      var _this;

      (0, _classCallCheck2.default)(this, CustomTabBar);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CustomTabBar).call(this, props));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(CustomTabBar, [{
      key: "renderTab",
      value: function renderTab(name, page, isTabActive, onPressHandler) {
        var _this$props = this.props,
            activeColor = _this$props.activeColor,
            inactiveColor = _this$props.inactiveColor;
        var textColor = isTabActive ? activeColor : inactiveColor;
        var testID = 'TabBar_' + page;
        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          testID: testID,
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel(testID),
          key: page,
          activeOpacity: 1,
          onPress: function onPress() {
            onPressHandler(page);
          }
        }, _react.default.createElement(_reactNative.View, {
          style: page === 0 ? styles.tab1 : styles.tab2
        }, _react.default.createElement(_LHCommonUI.LHText, {
          style: [{
            color: textColor,
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(14.6),
            lineHeight: _LHCommonFunction.LHUiUtils.GetPx(19)
          }]
        }, name)));
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            backgroundColor = _this$props2.backgroundColor,
            style = _this$props2.style,
            tabs = _this$props2.tabs,
            goToPage = _this$props2.goToPage,
            activeTab = _this$props2.activeTab;
        return _react.default.createElement(_reactNative.View, {
          style: [styles.tabs, {
            backgroundColor: backgroundColor
          }, style]
        }, tabs.map(function (name, page) {
          var isTabActive = activeTab === page;
          return _this2.renderTab(name, page, isTabActive, goToPage);
        }));
      }
    }]);
    return CustomTabBar;
  }(_react.Component);

  exports.default = CustomTabBar;
},11237,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHGuardPageStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHMainDialogUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHGuardManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var isShared = _LHCommonFunction.LHDeviceAuthorityUtils.isShared();

  var LHGuardPage = function (_React$Component) {
    (0, _inherits2.default)(LHGuardPage, _React$Component);

    function LHGuardPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHGuardPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHGuardPage).call(this, props));

      _this.judgeArming = function (operation) {
        _miot.Device.getSubDevices().then(function (devices) {
          if (!devices) {
            _this.guardSettingOperate([]);

            return;
          }

          var noSubDeviceTip = isShared ? _LHLocalizableString.default.mi_linuxHub_guard_share_no_sub_device_tip : _LHLocalizableString.default.mi_linuxHub_guard_no_sub_device_tip;

          if (operation === 'on' && devices.length === 0) {
            _LHMainDialogUtil.default.showMessageDialog(noSubDeviceTip, _LHLocalizableString.default.mi_linuxHub_guard_go_buy, function () {
              _LHCommonFunction.LHMiServer.OpenYouPinShop('人体门窗开关传感器');
            }, true, isShared);
          }

          if (operation === 'on' && devices.length > 0) {
            _LHCommonFunction.LHIFTTTManager.isLinuxGatewayCanControlAlarm(_miot.Device.deviceID, function (res, guardList) {
              if (res) {
                _this.operateArming(operation);
              } else {
                _this.guardSettingOperate(guardList);
              }
            }, function () {
              _this.guardSettingOperate([]);
            });
          }

          if (operation === 'off') {
            _this.operateArming(operation);
          }
        }).catch(function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.guardSettingOperate = function (guardList) {
        var navigation = _this.props.navigation;
        var noConfigTip = isShared ? _LHLocalizableString.default.mi_linuxHub_guard_share_sub_device_no_config : _LHLocalizableString.default.mi_linuxHub_guard_sub_device_no_config;

        _LHMainDialogUtil.default.showMessageDialog(noConfigTip, _LHLocalizableString.default.mi_linuxHub_guard_go_config, function () {
          navigation.navigate('LHGatewayIFTTTPage', {
            pageType: _LHCommonFunction.LHGuardTypeMode.getNormalGuardType(),
            deviceList: guardList,
            isMainPage: true
          });
        }, false, isShared);
      };

      _this.operateArming = function (operate) {
        var changeGuardStatus = _this.props.changeGuardStatus;

        _LHGuardManager.default.OperateGuardArming(operate, function () {
          _this.setState({
            status: operate
          });

          if (typeof changeGuardStatus === 'function') changeGuardStatus(operate);

          _this.startAnimate(operate);
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.hideAlarmCard = function () {
        var _this$props = _this.props,
            GetHubPropsReducers = _this$props.GetHubPropsReducers,
            AddAlarmPush = _this$props.AddAlarmPush,
            changeAlarm = _this$props.changeAlarm;
        var alarmArrys = GetHubPropsReducers.alarmArray;
        alarmArrys.splice(alarmArrys.length - 1, 1);
        AddAlarmPush(alarmArrys);

        if (alarmArrys.length === 0) {
          if (typeof changeAlarm === 'function') changeAlarm();

          _this.setState({
            alarmVisible: false
          });
        } else {
          _this.setState({
            alarmContent: alarmArrys[alarmArrys.length - 1]
          });
        }

        _LHCommonFunction.LHMiServer.SendRPCRequest('dis_alarm', [0], {}, function (res) {
          console.log('LHGuardPage hideAlarmCard success', res);
        }, function (err) {
          console.log('LHGuardPage hideAlarmCard fail', err);
        });
      };

      _this.checkSubDevice = function () {
        var navigation = _this.props.navigation;

        _LHCommonFunction.LHIFTTTManager.isLinuxGatewayCanGotoGuardSettingPage(function (res) {
          if (res) {
            navigation.navigate('LHGuardSettingPage');
          } else {
            _LHMainDialogUtil.default.showMessageDialog(_LHLocalizableString.default.mi_linuxHub_guard_no_sub_device_tip, _LHLocalizableString.default.mi_linuxHub_guard_go_buy, function () {
              _LHCommonFunction.LHMiServer.OpenYouPinShop('人体门窗开关传感器');
            }, true);
          }
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.jumpPage = function () {
        var changeTabPage = _this.props.changeTabPage;

        if (typeof changeTabPage === 'function') {
          _this.setState({
            showModal: false
          });

          changeTabPage(1);

          _this.mView.scrollTo({
            x: 0,
            y: 0,
            animated: true
          });
        }
      };

      _this.changeGuideModal = function (status) {
        _this.setState({
          showModal: status
        });
      };

      _this.state = {
        rotateAnimate: new _reactNative.Animated.Value(0),
        status: 'off',
        alarmVisible: false,
        alarmContent: {},
        subLogInfo: _LHCommonFunction.LHCommonLocalizableString.common_log_loading,
        showModal: !props.showGuard
      };
      return _this;
    }

    (0, _createClass2.default)(LHGuardPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var guardStatus = this.props.guardStatus;
        this.startAnimate(guardStatus);
        this.guardSettingSubscription = _reactNative.DeviceEventEmitter.addListener('GuardAramingStatus', function (data) {
          _this2.operateArming(data);
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this$props2 = this.props,
            guardStatus = _this$props2.guardStatus,
            showAlarm = _this$props2.showAlarm,
            alarmDetail = _this$props2.alarmDetail,
            subLog = _this$props2.subLog,
            showGuard = _this$props2.showGuard;

        if (showGuard !== nextProps.showGuard) {
          this.setState({
            showModal: !nextProps.showGuard
          });
        }

        if (showAlarm !== nextProps.showAlarm || alarmDetail.detail !== nextProps.alarmDetail.detail) {
          this.setState({
            alarmVisible: nextProps.showAlarm,
            alarmContent: nextProps.alarmDetail
          });
        }

        if (subLog !== nextProps.subLog) {
          this.setState({
            subLogInfo: nextProps.subLog
          });
        }

        if (guardStatus !== nextProps.guardStatus) {
          var armingStatus = nextProps.guardStatus;
          this.setState({
            status: armingStatus
          });

          _LHCacheUtils.default.saveMainPageCache({
            guardStatus: armingStatus
          });

          if (armingStatus) {
            this.startAnimate(armingStatus);
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (!this.guardSettingSubscription) {
          this.guardSettingSubscription.remove();
        }
      }
    }, {
      key: "startAnimate",
      value: function startAnimate(status) {
        console.log('startAnimate', status);

        if (status !== 'off') {
          this.rotateAnimateStart();
        }
      }
    }, {
      key: "rotateAnimateStart",
      value: function rotateAnimateStart() {
        var _this3 = this;

        var rotateAnimate = this.state.rotateAnimate;
        var _value = rotateAnimate._value;
        var value = _value === 1 ? 0 : _value;
        rotateAnimate.setValue(value);
        var time = 5000 * (1 - value);

        _reactNative.Animated.timing(rotateAnimate, {
          toValue: 1,
          duration: time,
          easing: _reactNative.Easing.linear
        }).start(function (e) {
          if (e.finished) _this3.rotateAnimateStart();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var _this$state = this.state,
            status = _this$state.status,
            rotateAnimate = _this$state.rotateAnimate,
            alarmVisible = _this$state.alarmVisible,
            alarmContent = _this$state.alarmContent,
            subLogInfo = _this$state.subLogInfo,
            showModal = _this$state.showModal;
        var _this$props3 = this.props,
            alarmDetail = _this$props3.alarmDetail,
            deviceHeight = _this$props3.deviceHeight;

        var showHeight = _LHCommonFunction.LHDeviceUtils.statusBarHeight + _LHCommonFunction.LHUiUtils.TitleBarHeight + _LHCommonFunction.LHUiUtils.GetPx(656) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight;

        var bigScreen = deviceHeight > showHeight;
        var content;

        if (status === 'off') {
          content = _react.default.createElement(_reactNative.View, {
            style: [_LHGuardPageStyle.default.alignItemsCenter, {
              paddingBottom: alarmVisible ? _LHCommonFunction.LHUiUtils.GetPx(45) : _LHCommonFunction.LHUiUtils.GetPx(44)
            }]
          }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
            onPress: function onPress() {
              _this4.judgeArming('on');
            }
          }, _react.default.createElement(_reactNative.View, {
            style: _LHGuardPageStyle.default.guardImgWrap
          }, _react.default.createElement(_reactNative.Image, {
            style: _LHGuardPageStyle.default.guardImgBg,
            source: _Resources.default.MainPage.homepageRoundOff
          }))), _react.default.createElement(_reactNative.View, {
            style: _LHGuardPageStyle.default.guardTips
          }, _react.default.createElement(_LHCommonUI.LHText, {
            style: _LHGuardPageStyle.default.tips
          }, _LHLocalizableString.default.mi_linuxHub_waring_guard_close)));
        } else {
          content = _react.default.createElement(_reactNative.View, {
            style: [_LHGuardPageStyle.default.alignItemsCenter, {
              paddingBottom: alarmVisible ? _LHCommonFunction.LHUiUtils.GetPx(45) : _LHCommonFunction.LHUiUtils.GetPx(44)
            }]
          }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
            onPress: function onPress() {
              _this4.judgeArming('off');
            }
          }, _react.default.createElement(_reactNative.View, {
            style: _LHGuardPageStyle.default.guardImgWrap
          }, _react.default.createElement(_reactNative.Image, {
            resizeMode: "contain",
            style: [_LHGuardPageStyle.default.guardInnerImg],
            source: _Resources.default.MainPage.homepageRoundCenter
          }), _react.default.createElement(_reactNative.Image, {
            resizeMode: "contain",
            style: _LHGuardPageStyle.default.guardImgBg,
            source: _Resources.default.MainPage.homepageRoundBottomBg
          }), _react.default.createElement(_reactNative.Animated.Image, {
            resizeMode: "contain",
            style: [_LHGuardPageStyle.default.guardImgAnimate, {
              transform: [{
                rotateZ: rotateAnimate.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['0deg', '360deg']
                })
              }]
            }],
            source: _Resources.default.MainPage.homepageRoundBottom
          }))), _react.default.createElement(_reactNative.View, {
            style: _LHGuardPageStyle.default.guardTips
          }, _react.default.createElement(_LHCommonUI.LHText, {
            style: _LHGuardPageStyle.default.tips
          }, status === 'oning' ? _LHLocalizableString.default.mi_linuxHub_waring_guard_opening : _LHLocalizableString.default.mi_linuxHub_waring_guard_open)));
        }

        var navigation = this.props.navigation;
        navigation.setParams({
          bgColor: status === 'off' ? '#F2F2F2' : '#F5F9FC'
        });
        return _react.default.createElement(_reactNative.View, {
          testID: "guardPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('guardPage'),
          style: [_LHGuardPageStyle.default.pageBgStyle]
        }, _react.default.createElement(_reactNative.ScrollView, {
          ref: function ref(e) {
            if (e !== null) {
              _this4.mView = e;

              if (showModal && !bigScreen) {
                setTimeout(function () {
                  _this4.mView.scrollToEnd({
                    animated: false
                  });
                });
              }
            }
          },
          automaticallyAdjustContentInsets: false,
          showsVerticalScrollIndicator: false,
          alwaysBounceVertical: false,
          bounces: false,
          contentContainerStyle: {
            flexGrow: 1,
            justifyContent: 'space-between'
          }
        }, _react.default.createElement(_reactNative.View, {
          style: _LHGuardPageStyle.default.guardImg
        }, content), _react.default.createElement(_reactNative.View, {
          style: _LHGuardPageStyle.default.bottomWrap
        }, _react.default.createElement(_LHCommonUI.LHCardBase, {
          data: [{
            title: alarmContent.title || alarmDetail.title || '',
            titleNumberOfLines: 10,
            subTitle: alarmContent.detail || alarmDetail.detail || '',
            rightIconSource: _Resources.default.MainPage.homePageClose,
            rightIconStyle: _LHGuardPageStyle.default.closeIcon,
            iconSource: _Resources.default.MainPage.homepageAbnormal,
            iconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(35),
              height: _LHCommonFunction.LHUiUtils.GetPx(30)
            },
            rightIconPress: function rightIconPress() {
              _this4.hideAlarmCard();
            }
          }],
          autoHeight: true,
          paddingVertical: _LHCommonFunction.LHUiUtils.GetPx(15),
          visible: alarmVisible,
          cardStyle: {
            marginBottom: alarmVisible ? _LHCommonFunction.LHUiUtils.GetPx(10) : 0
          }
        }), _react.default.createElement(_LHCommonUI.LHCardBase, {
          data: isShared ? [{
            title: _LHLocalizableString.default.mi_linuxHub_guard_arming_log,
            subTitle: subLogInfo,
            testID: 'alarmLog',
            iconSource: _Resources.default.MainPage.homepageLog,
            iconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(40),
              height: _LHCommonFunction.LHUiUtils.GetPx(40)
            },
            onPress: function onPress() {
              navigation.navigate('LHLogPage');
            }
          }] : [{
            title: _LHLocalizableString.default.mi_linuxHub_guardSetting,
            iconSource: _Resources.default.MainPage.homepageAlarm,
            testID: 'guardSetting',
            iconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(40),
              height: _LHCommonFunction.LHUiUtils.GetPx(40)
            },
            onPress: function onPress() {
              _this4.checkSubDevice();
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_guard_arming_log,
            subTitle: subLogInfo,
            testID: 'alarmLog',
            iconSource: _Resources.default.MainPage.homepageLog,
            iconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(40),
              height: _LHCommonFunction.LHUiUtils.GetPx(40)
            },
            onPress: function onPress() {
              navigation.navigate('LHLogPage');
            }
          }],
          cardStyle: {
            height: isShared ? _LHCommonFunction.LHUiUtils.GetPx(80) : _LHCommonFunction.LHUiUtils.GetPx(160)
          }
        }), _react.default.createElement(_LHCommonUI.LHCardBase, {
          data: [{
            testID: 'subDevice',
            title: _LHLocalizableString.default.mi_linuxHub_main_sub_device,
            iconSource: _Resources.default.MainPage.homepageDevice,
            iconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(40),
              height: _LHCommonFunction.LHUiUtils.GetPx(40)
            },
            onPress: function onPress() {
              navigation.navigate('LHSubDevicesListPage');
            }
          }],
          cardStyle: {
            height: _LHCommonFunction.LHUiUtils.GetPx(80),
            marginTop: _LHCommonFunction.LHUiUtils.GetPx(10),
            marginBottom: _LHCommonFunction.LHUiUtils.GetPx(10)
          }
        }))));
      }
    }]);
    return LHGuardPage;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHGuardPage);

  exports.default = _default;
},11240,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10074,10757,11183,11243,11246,11252,11258]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var styles = _reactNative.StyleSheet.create({
    pageBgStyle: {
      flex: 1
    },
    guardImg: {
      flex: 1
    },
    alignItemsCenter: {
      paddingTop: _LHCommonFunction.LHUiUtils.GetPx(17),
      paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(45),
      alignItems: 'center'
    },
    closeIcon: {
      width: _LHCommonFunction.LHUiUtils.GetPx(17),
      height: _LHCommonFunction.LHUiUtils.GetPx(17)
    },
    guardImgWrap: {
      width: _LHCommonFunction.LHUiUtils.GetPx(260),
      height: _LHCommonFunction.LHUiUtils.GetPx(260),
      alignItems: 'center'
    },
    guardImgBg: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: _LHCommonFunction.LHUiUtils.GetPx(260),
      height: _LHCommonFunction.LHUiUtils.GetPx(260),
      resizeMode: 'contain'
    },
    guardImgAnimate: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: _LHCommonFunction.LHUiUtils.GetPx(260),
      height: _LHCommonFunction.LHUiUtils.GetPx(260),
      resizeMode: 'contain'
    },
    guardInnerImg: {
      resizeMode: 'contain',
      width: _LHCommonFunction.LHUiUtils.GetPx(260),
      height: _LHCommonFunction.LHUiUtils.GetPx(260),
      zIndex: 999
    },
    guardTips: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(11),
      height: _LHCommonFunction.LHUiUtils.GetPx(19),
      width: '100%'
    },
    tips: {
      textAlign: 'center',
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(14),
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(19),
      color: '#999999'
    },
    bottomWrap: {
      marginBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
    }
  });

  exports.default = styles;
},11243,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var LHMainDialogUtil = function LHMainDialogUtil() {
    (0, _classCallCheck2.default)(this, LHMainDialogUtil);
  };

  exports.default = LHMainDialogUtil;

  LHMainDialogUtil.showMessageDialog = function (msg, submit, submitFuc, noSub, isShared) {
    _LHCommonFunction.LHMiServer.isOverSea(function (res) {
      _LHCommonFunction.LHDialogUtils.MessageDialogShow(res && noSub || isShared ? {
        title: _LHLocalizableString.default.mi_linuxHub_guard_can_not_open,
        message: msg,
        confirm: _LHCommonFunction.LHCommonLocalizableString.common_tips_iknow,
        confirmStyle: {
          color: _PluginConfig.default.HubMainColor
        }
      } : {
        title: _LHLocalizableString.default.mi_linuxHub_guard_can_not_open,
        message: msg,
        confirm: submit,
        cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
        onConfirm: submitFuc,
        confirmStyle: {
          color: _PluginConfig.default.HubMainColor
        }
      });
    });
  };
},11246,[14305,14320,10004,11249,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var PluginConfig = function PluginConfig() {
    (0, _classCallCheck2.default)(this, PluginConfig);
  };

  exports.default = PluginConfig;
  PluginConfig.PluginVersion = '1.0.64';
  PluginConfig.TimeLightColorPink = '#F55B7A';
  PluginConfig.TimeLightColorPurple = '#8464FC';
  PluginConfig.TimeLightColorBlue = '#6277ED';
  PluginConfig.TimeLightColorGreen = '#40C496';
  PluginConfig.TimeLightColorKhaki = '#FCBA00';
  PluginConfig.HubMainColor = '#00BEFF';
  PluginConfig.sliderThumbStyle = (0, _objectSpread2.default)({
    width: _LHCommonFunction.LHUiUtils.GetPx(24),
    height: _LHCommonFunction.LHUiUtils.GetPx(24),
    borderWidth: 0.5,
    borderColor: 'rgba(0,0,0,0.15)'
  }, _reactNative.Platform.select({
    ios: {
      shadowColor: '#000000',
      shadowOffset: {
        x: 0,
        y: 3
      },
      shadowOpacity: 0.1
    },
    android: {
      elevation: 1
    }
  }));
  PluginConfig.TimeLightRepeatName = ['执行一次', '每天', '自定义'];
  PluginConfig.TimeLightRepeatWeekName = ['周一', '周二', '周三', '周四', '周五', '周六', '周日'];
  PluginConfig.TimeLightIdentify = 'lumi_gateway_single_rgb_timer';
  PluginConfig.TimeLightName = _LHLocalizableString.default.mi_linuxHub_timer_light_name;
  PluginConfig.EVERYDAY = [0, 1, 2, 3, 4, 5, 6];
  PluginConfig.WORKDAY = [1, 2, 3, 4, 5];
  PluginConfig.WEEKDAY = [0, 6];
  PluginConfig.FILTER_WORKDAY = 'cn_workday';
  PluginConfig.FILTER_FREEDAY = 'cn_freeday';
  PluginConfig.TimeLightColorName = [PluginConfig.TimeLightColorKhaki, PluginConfig.TimeLightColorPink, PluginConfig.TimeLightColorPurple, PluginConfig.TimeLightColorBlue, PluginConfig.TimeLightColorGreen];
  PluginConfig.GatewayPlayMusicActionMiEu = 1152;
  PluginConfig.GatewayPlayMusicActionMiHk = 1451;
  PluginConfig.GatewayPlayMusicActionMiTw = 1398;
  PluginConfig.GatewayPlayMusicActionMiUk = 1800;
  PluginConfig.GatewayPlayMusicActionHomeKitCn = 1904;
  PluginConfig.GatewayPlayMusicActionHomeKitUs = 2113;
  PluginConfig.MusicCacheKey = 'MusicCache_' + _miot.Device.deviceID + '_';
},11249,[14305,14314,14320,10074,10033,10004,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _miot = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHColorUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var expireTime = 8640000000;
  var MainCache = _miot.Device.deviceID + '_main_page_' + _miot.Service.account.ID;

  var LHCacheUtils = function (_React$Component) {
    (0, _inherits2.default)(LHCacheUtils, _React$Component);

    function LHCacheUtils() {
      (0, _classCallCheck2.default)(this, LHCacheUtils);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHCacheUtils).apply(this, arguments));
    }

    return LHCacheUtils;
  }(_react.default.Component);

  exports.default = LHCacheUtils;
  LHCacheUtils.defaultCache = {
    guardStatus: 'off',
    lightRgb: 0,
    rgbValue: _LHColorUtils.default.colorRGB2Hex('rgb(255,255,255)', 50),
    corridorLightValue: 'off',
    cacheLog: _LHCommonFunction.LHCommonLocalizableString.common_log_no_logs
  };

  LHCacheUtils.saveMainPageCache = function (config) {
    _LHCommonFunction.LHMiServer.SetHostStorage(MainCache, (0, _extends2.default)(LHCacheUtils.defaultCache, config), {
      expire: expireTime
    });
  };

  LHCacheUtils.getMainPageCache = function (onSuccess) {
    _LHCommonFunction.LHMiServer.GetHostStorage(MainCache).then(function (res) {
      if (typeof onSuccess === 'function') onSuccess(res || LHCacheUtils.defaultCache);
    }).catch(function () {
      if (typeof onSuccess === 'function') onSuccess(LHCacheUtils.defaultCache);
    });
  };
},11252,[14305,14344,14320,14371,14377,14386,10297,10074,10004,11255]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var LHColorUtils = function () {
    function LHColorUtils() {
      (0, _classCallCheck2.default)(this, LHColorUtils);
    }

    (0, _createClass2.default)(LHColorUtils, null, [{
      key: "colorRGB2Hex",
      value: function colorRGB2Hex(color, light) {
        if (!color) return 'ffffff';
        var colorRgb = color.match(/[0-9]+/g);
        var r = parseInt(colorRgb[0]);
        var g = parseInt(colorRgb[1]);
        var b = parseInt(colorRgb[2]);
        var hex = (16777216 + (r << 16) + (g << 8) + b).toString(16).slice(1);
        console.log('LHColorUtils colorRGB2Hex', parseInt(hex, 16), hex);
        return (light << 24) + parseInt(hex, 16);
      }
    }, {
      key: "rgbArray",
      value: function rgbArray(color) {
        if (!color) return [];
        var rgb = [];
        var colorRgb = color.match(/[0-9]+/g);
        rgb.push(Number(colorRgb[0]));
        rgb.push(Number(colorRgb[1]));
        rgb.push(Number(colorRgb[2]));
        return rgb;
      }
    }, {
      key: "convertColor",
      value: function convertColor(color) {
        if (color < 0) return {
          rgb: 'rgb(255,255,255)',
          a: 1
        };
        var r = color >> 16 & 0xff;
        var g = color >> 8 & 0xff;
        var b = color & 0xff;
        var a = color >> 24;
        return {
          rgb: 'rgb(' + r + ',' + g + ',' + b + ')',
          a: a
        };
      }
    }]);
    return LHColorUtils;
  }();

  exports.default = LHColorUtils;
},11255,[14305,14320,14323]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var LHGuardManager = function LHGuardManager() {
    (0, _classCallCheck2.default)(this, LHGuardManager);
  };

  exports.default = LHGuardManager;

  LHGuardManager.OperateGuardArming = function (operate, onSuccess, onFail) {
    _LHCommonFunction.LHMiServer.SendRPCRequest('set_arming', [operate], {}, function (res) {
      if (res.result && res.result.includes('ok')) {
        if (typeof onSuccess === 'function') onSuccess();

        _LHCacheUtils.default.saveMainPageCache({
          guardStatus: operate
        });

        return;
      }

      if (typeof onFail === 'function') onFail();
    }, function () {
      if (typeof onFail === 'function') onFail();
    });
  };
},11258,[14305,14320,10004,11252]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHColouredLightPageStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHColorUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHColorWheelView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHNightLightSceneManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHMainDialogUtil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var isShared = _LHCommonFunction.LHDeviceAuthorityUtils.isShared();

  var LHColouredLightPage = function (_React$Component) {
    (0, _inherits2.default)(LHColouredLightPage, _React$Component);

    function LHColouredLightPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHColouredLightPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHColouredLightPage).call(this, props));

      _this.switchCorridorLight = function (value) {
        console.log(_LHNightLightSceneManager.default.fetchNightLightDeviceData);
        var navigation = _this.props.navigation;

        _LHNightLightSceneManager.default.fetchNightLightDeviceData(_miot.Device, function (res) {
          if (res === -1) {
            _this.forceUpdate();

            _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
          } else if (res === 0) {
            _this.forceUpdate();

            _LHMainDialogUtil.default.showMessageDialog(_LHLocalizableString.default.mi_linuxHub_nightlight_no_device, _LHLocalizableString.default.mi_linuxHub_guard_go_buy, function () {
              _LHCommonFunction.LHMiServer.OpenYouPinShop('人体门窗开关传感器');
            }, true);
          } else if (res === 1) {
            _this.forceUpdate();

            _LHMainDialogUtil.default.showMessageDialog(_LHLocalizableString.default.mi_linuxHub_nightlight_no_opendevice, _LHLocalizableString.default.mi_linuxHub_guard_go_config, function () {
              navigation.navigate('LHNightLightDevicePage', {
                updateNightLightSwitch: function updateNightLightSwitch() {
                  var GetHubPropsReducers = _this.props.GetHubPropsReducers;

                  _this.setState({
                    corridorLightValue: GetHubPropsReducers.hubPropsData.corridor_light
                  });

                  _this.fetchSceneData();
                }
              });
            }, false);
          } else {
            var corridorLight = value ? 'on' : 'off';

            _this.setState({
              corridorLightValue: corridorLight
            });

            console.log(corridorLight);

            _this.setCorridorLight(corridorLight);
          }
        });
      };

      _this.onPressCorridorLight = function () {
        var navigation = _this.props.navigation;

        _LHNightLightSceneManager.default.fetchMotionSubDevice(function (motionSubDevices) {
          if (motionSubDevices === null || motionSubDevices.length === 0) {
            _LHMainDialogUtil.default.showMessageDialog(_LHLocalizableString.default.mi_linuxHub_nightlight_no_device, _LHLocalizableString.default.mi_linuxHub_guard_go_buy, function () {
              _LHCommonFunction.LHMiServer.OpenYouPinShop('人体门窗开关传感器');
            }, true);
          } else {
            navigation.navigate('LHNightLightDevicePage', {
              updateNightLightSwitch: function updateNightLightSwitch() {
                var GetHubPropsReducers = _this.props.GetHubPropsReducers;

                _this.setState({
                  corridorLightValue: GetHubPropsReducers.hubPropsData.corridor_light
                });

                _this.fetchSceneData();
              }
            });
          }
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.operateAgb = function () {
        var _this$state = _this.state,
            rgbValue = _this$state.rgbValue,
            rgbOn = _this$state.rgbOn;
        var value = 0;

        if (rgbOn) {
          value = 0;
        } else {
          var mRgbValue = _LHColorUtils.default.convertColor(rgbValue);

          value = mRgbValue.a < 3 ? _LHColorUtils.default.colorRGB2Hex(mRgbValue.rgb, 3) : rgbValue;
        }

        _LHCommonFunction.LHMiServer.SendRPCRequest('set_rgb', [value], {}, function (res) {
          if (res.result && res.result.includes('ok')) {
            _this.setState({
              rgbOn: value !== 0
            });

            _LHCacheUtils.default.saveMainPageCache({
              lightRgb: value
            });
          }
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.setLightValue = function (changeColor, changeBrightness, onFail) {
        var rgbValue = _this.state.rgbValue;

        var cacheRgbValue = _LHColorUtils.default.convertColor(rgbValue);

        var color = _LHColorUtils.default.colorRGB2Hex(changeColor || cacheRgbValue.rgb, changeBrightness || cacheRgbValue.a);

        _LHCommonFunction.LHMiServer.SendRPCRequest('set_night_light_rgb', [color], {}, function (res) {
          console.log('setLightValue success ', res);

          _this.setState({
            rgbValue: color
          });

          _LHCacheUtils.default.saveMainPageCache({
            rgbValue: color
          });
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);

          var cacheValue = changeColor ? cacheRgbValue.rgb : cacheRgbValue.a;
          if (typeof onFail === 'function') onFail(true, cacheValue);
        });
      };

      _this.setCorridorLight = function (value) {
        var SetCorridorLight = _this.props.SetCorridorLight;
        SetCorridorLight(value).then(function (res) {
          console.log('SetCorridorLight>>' + res);

          _LHCacheUtils.default.saveMainPageCache({
            corridorLightValue: value
          });
        }).catch(function () {
          _this.setState({
            corridorLightValue: value === 'off' ? 'on' : 'off'
          });

          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.changeBrightness = function (value, onFail) {
        _this.setLightValue(null, value, onFail);
      };

      _this.changeLightValue = function (changeValue) {
        var lightColor = _LHColorUtils.default.convertColor(changeValue);

        _this.setState({
          brightnessValue: lightColor.a,
          lightColor: lightColor.rgb,
          rgbValue: changeValue
        });
      };

      _this.enabledScroll = function (enabled) {
        _this.setState({
          canScroll: enabled
        });
      };

      _this.changeLightColor = function (color, onFail) {
        _this.setLightValue(color, null, onFail);
      };

      _this.fetchSceneData = function () {
        _LHNightLightSceneManager.default.fetchNightLightDeviceData(_miot.Device, function (res) {
          if (res === -1) {
            return;
          }

          _LHCacheUtils.default.saveMainPageCache({
            nightlightDeviceStatu: res
          });

          _this.setState({
            nightlightDeviceStatu: res
          });
        });
      };

      _this.jumpPage = function () {
        var changeTabPage = _this.props.changeTabPage;

        if (typeof changeTabPage === 'function') {
          _this.setState({
            showModal: false
          });

          changeTabPage(0);

          _this.mView.scrollTo({
            x: 0,
            y: 0,
            animated: true
          });
        }
      };

      _this.changeGuideModal = function (status) {
        _this.setState({
          showModal: status
        });
      };

      _this.state = {
        lightColor: 'rgb(255, 255, 255)',
        canScroll: true,
        rgbValue: _LHColorUtils.default.colorRGB2Hex('rgb(255,255,255)', 50),
        rgbOn: props.lightRgb === 0,
        brightnessValue: 50,
        corridorLightValue: props.corridorLightValue,
        nightlightDeviceStatu: props.nightlightDeviceStatu,
        showModal: !props.showLight
      };
      return _this;
    }

    (0, _createClass2.default)(LHColouredLightPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.fetchSceneData();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            lightRgb = _this$props.lightRgb,
            lightStatus = _this$props.lightStatus;
        this.setState({
          rgbOn: lightRgb !== 0
        });
        this.changeLightValue(lightStatus);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var _this$props2 = this.props,
            lightStatus = _this$props2.lightStatus,
            showLight = _this$props2.showLight,
            lightRgb = _this$props2.lightRgb;

        if (showLight !== nextProps.showLight) {
          this.setState({
            showModal: !nextProps.showLight
          });
        }

        if (lightRgb !== nextProps.lightRgb) {
          this.setState({
            rgbOn: nextProps.lightRgb !== 0
          });
        }

        if (lightStatus !== nextProps.lightStatus) {
          this.changeLightValue(nextProps.lightStatus);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$state2 = this.state,
            lightColor = _this$state2.lightColor,
            canScroll = _this$state2.canScroll,
            rgbOn = _this$state2.rgbOn,
            brightnessValue = _this$state2.brightnessValue,
            corridorLightValue = _this$state2.corridorLightValue,
            nightlightDeviceStatu = _this$state2.nightlightDeviceStatu,
            showModal = _this$state2.showModal;
        var deviceHeight = this.props.deviceHeight;

        var showHeight = _LHCommonFunction.LHDeviceUtils.statusBarHeight + _LHCommonFunction.LHUiUtils.TitleBarHeight + _LHCommonFunction.LHUiUtils.GetPx(706) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight;

        var showCard;

        if (isShared) {
          showCard = null;
        } else {
          showCard = _react.default.createElement(_reactNative.View, {
            style: {
              marginBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight + _LHCommonFunction.LHUiUtils.GetPx(10)
            }
          }, _react.default.createElement(_LHCommonUI.LHCardBase, {
            data: [{
              title: _LHLocalizableString.default.mi_linuxHub_main_timing_light,
              iconSource: _Resources.default.MainPage.homepageTimingLight,
              testID: 'timeLightList',
              iconStyle: {
                width: _LHCommonFunction.LHUiUtils.GetPx(40),
                height: _LHCommonFunction.LHUiUtils.GetPx(40)
              },
              onPress: function onPress() {
                var navigation = _this2.props.navigation;
                navigation.navigate('LHTimeLightListPage');
              }
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_setting_nightlight,
              iconSource: _Resources.default.MainPage.homepageReactionLight,
              iconStyle: {
                width: _LHCommonFunction.LHUiUtils.GetPx(40),
                height: _LHCommonFunction.LHUiUtils.GetPx(40)
              },
              hasSwitch: true,
              testID: 'nightLightDevice',
              switchColor: _PluginConfig.default.HubMainColor,
              switchValue: corridorLightValue === 'on' && nightlightDeviceStatu === 2,
              useControlledSwitch: true,
              onPress: function onPress() {
                _this2.onPressCorridorLight();
              },
              onValueChange: function onValueChange(value) {
                _this2.switchCorridorLight(value);
              }
            }],
            cardStyle: {
              height: _LHCommonFunction.LHUiUtils.GetPx(160)
            }
          }));
        }

        return _react.default.createElement(_reactNative.View, {
          testID: "colouredLightPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('colouredLightPage'),
          style: _LHColouredLightPageStyle.default.pageBgStyle
        }, _react.default.createElement(_reactNative.ScrollView, {
          ref: function ref(e) {
            if (e !== null) {
              _this2.mView = e;

              if (showModal && deviceHeight <= showHeight) {
                setTimeout(function () {
                  _this2.mView.scrollToEnd({
                    animated: false
                  });
                });
              }
            }
          },
          showsVerticalScrollIndicator: false,
          scrollEnabled: canScroll,
          bounces: false
        }, _react.default.createElement(_reactNative.View, {
          style: [_LHColouredLightPageStyle.default.colorPanBody]
        }, _react.default.createElement(_LHColorWheelView.default, {
          centerClick: this.operateAgb,
          chooseColor: lightColor,
          rgbOn: rgbOn,
          centerImg: rgbOn ? _Resources.default.MainPage.homepageLightOn : _Resources.default.MainPage.homepageLightOff,
          changeLightColor: this.changeLightColor,
          enabledScroll: this.enabledScroll
        }), _react.default.createElement(_reactNative.View, {
          style: _LHColouredLightPageStyle.default.lightTips
        }, _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHColouredLightPageStyle.default.tips
        }, rgbOn ? _LHLocalizableString.default.mi_linuxHub_home_coloured_light_close : _LHLocalizableString.default.mi_linuxHub_home_coloured_light_open))), _react.default.createElement(_LHCommonUI.LHProgressCard, {
          progressTitle: _LHLocalizableString.default.mi_linuxHub_main_light_intensity,
          subTitleUnit: "%",
          value: brightnessValue < 3 ? 3 : brightnessValue > 100 ? 100 : brightnessValue,
          changeProgressValue: this.changeBrightness,
          progressEnable: rgbOn,
          minValue: 3,
          maxValue: 100,
          showImg: true,
          enabledScroll: this.enabledScroll,
          minImgOnSource: _Resources.default.MainPage.homepageOnMin,
          minImgOffSource: _Resources.default.MainPage.homepageOffMin,
          maxImgOnSource: _Resources.default.MainPage.homepageOnMax,
          maxImgOffSource: _Resources.default.MainPage.homepageOffMax
        }), showCard));
      }
    }]);
    return LHColouredLightPage;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHColouredLightPage);

  exports.default = _default;
},11261,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10757,10074,11183,11264,11255,11267,11273,11246,11252,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var styles = _reactNative.StyleSheet.create({
    pageBgStyle: {
      flex: 1
    },
    colorPanBody: {
      flex: 1,
      alignItems: 'center',
      paddingTop: _LHCommonFunction.LHUiUtils.GetPx(27),
      paddingBottom: _LHCommonFunction.LHUiUtils.GetPx(45)
    },
    colorPan: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: _LHCommonFunction.LHUiUtils.GetPx(240),
      height: _LHCommonFunction.LHUiUtils.GetPx(240)
    },
    lightTips: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(21),
      height: _LHCommonFunction.LHUiUtils.GetPx(19)
    },
    tips: {
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(14),
      color: '#999999'
    },
    bottomWrap: {
      marginBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
    }
  });

  exports.default = styles;
},11264,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _pancolor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var styles = _reactNative.StyleSheet.create({
    colorPanParent: {
      width: _LHCommonFunction.LHUiUtils.GetPx(240),
      height: _LHCommonFunction.LHUiUtils.GetPx(240),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(120),
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    colorPanImg: {
      position: 'absolute',
      alignItems: 'center',
      justifyContent: 'center',
      width: _LHCommonFunction.LHUiUtils.GetPx(240),
      height: _LHCommonFunction.LHUiUtils.GetPx(240),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(120)
    },
    centerBody: {
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(63),
      justifyContent: 'center',
      alignItems: 'center'
    },
    lightPicker: {
      width: _LHCommonFunction.LHUiUtils.GetPx(126),
      height: _LHCommonFunction.LHUiUtils.GetPx(126)
    },
    light: {
      position: 'absolute',
      width: _LHCommonFunction.LHUiUtils.GetPx(76),
      height: _LHCommonFunction.LHUiUtils.GetPx(76),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(38)
    },
    colorPan: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: _LHCommonFunction.LHUiUtils.GetPx(240),
      height: _LHCommonFunction.LHUiUtils.GetPx(240)
    }
  });

  var colorWheel = _pancolor.default;

  var LHColorWheelView = function (_React$Component) {
    (0, _inherits2.default)(LHColorWheelView, _React$Component);

    function LHColorWheelView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHColorWheelView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHColorWheelView).call(this, props));

      _this.calculateClickOutside = function (clickX, clickY) {
        var centerX = _LHCommonFunction.LHUiUtils.GetPx(120);

        var centerY = _LHCommonFunction.LHUiUtils.GetPx(120);

        var distance = Math.sqrt(Math.pow(clickX - centerX, 2) + Math.pow(clickY - centerY, 2));
        return distance > _LHCommonFunction.LHUiUtils.GetPx(120);
      };

      _this.calculateColorAngle = function (chooseColor) {
        var colorRgb = chooseColor.match(/[0-9]+/g);
        var r = parseInt(colorRgb[0], 10);
        var g = parseInt(colorRgb[1], 10);
        var b = parseInt(colorRgb[2], 10);
        var index = 0;
        var firstItem = colorWheel[0];
        var diffValue = Math.abs(firstItem[0] - r) + Math.abs(firstItem[1] - g) + Math.abs(firstItem[2] - b);
        Object.keys(colorWheel).forEach(function (key) {
          var item = colorWheel[key];
          var itemDiff = Math.abs(item[0] - r) + Math.abs(item[1] - g) + Math.abs(item[2] - b);

          if (itemDiff < diffValue) {
            diffValue = itemDiff;
            index = key;
          }
        });

        _this.rotateAnimateStart(Number(index));
      };

      _this.setScroll = function (bool) {
        var enabledScroll = _this.props.enabledScroll;

        _this.setState({
          canClick: bool
        });

        if (typeof enabledScroll === 'function') {
          enabledScroll(bool);
        }
      };

      _this.getAngle = function (px, py, mx, my) {
        var x = Math.abs(px - mx);
        var y = Math.abs(py - my);
        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        var cos = y / z;
        var radina = Math.acos(cos);
        var angle = Math.floor(180 / (Math.PI / radina));

        if (mx > px && my > py) {
          angle = 180 - angle;
        }

        if (mx === px && my > py) {
          angle = 180;
        }

        if (mx > px && my === py) {
          angle = 90;
        }

        if (mx < px && my > py) {
          angle = 180 + angle;
        }

        if (mx < px && my === py) {
          angle = 270;
        }

        if (mx < px && my < py) {
          angle = 360 - angle;
        }

        return angle;
      };

      _this.changeLightColor = function (locationX, locationY, isRelease) {
        var changeLightColor = _this.props.changeLightColor;
        var currentX = locationX - _LHCommonFunction.LHUiUtils.GetPx(240) / 2;
        var currentY = locationY - _LHCommonFunction.LHUiUtils.GetPx(240) / 2;

        var radius = _this.getAngle(0, 0, currentX, currentY);

        _this.rotateAnimateStart(radius);

        var chooseColor;
        Object.keys(colorWheel).forEach(function (key) {
          var colorItem = colorWheel[key];

          if (Number(key) === Number(radius)) {
            chooseColor = 'rgb' + JSON.stringify(colorItem).replace('[', '(').replace(']', ')');
          }
        });

        if (isRelease) {
          changeLightColor(chooseColor, function (res, cacheColor) {
            if (res) {
              _this.calculateColorAngle(cacheColor);
            }
          });
        }
      };

      _this.rotateAnimateStart = function (radius) {
        var rotateAnimate = _this.state.rotateAnimate;
        var endValue = radius / 360;
        console.log('rotateAnimateStart', rotateAnimate, endValue);

        _reactNative.Animated.timing(rotateAnimate, {
          toValue: endValue,
          duration: 0,
          easing: _reactNative.Easing.linear
        }).start(function () {
          rotateAnimate.setValue(endValue);

          _this.setState({
            rotateAnimate: rotateAnimate
          });
        });
      };

      _this.state = {
        rotateAnimate: new _reactNative.Animated.Value(0),
        canClick: true
      };
      return _this;
    }

    (0, _createClass2.default)(LHColorWheelView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this.customPanResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
            return true;
          },
          onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {
            return true;
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
            return true;
          },
          onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {
            return true;
          },
          onPanResponderGrant: function onPanResponderGrant(evt) {
            if (_this2.calculateClickOutside(evt.nativeEvent.locationX, evt.nativeEvent.locationY)) return;

            _this2.setScroll(false);
          },
          onPanResponderMove: function onPanResponderMove(evt) {
            if (_this2.calculateClickOutside(evt.nativeEvent.locationX, evt.nativeEvent.locationY)) return;

            _this2.changeLightColor(evt.nativeEvent.locationX, evt.nativeEvent.locationY, false);
          },
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderRelease: function onPanResponderRelease(evt) {
            _this2.setScroll(true);

            if (_this2.calculateClickOutside(evt.nativeEvent.locationX, evt.nativeEvent.locationY)) return;

            _this2.changeLightColor(evt.nativeEvent.locationX, evt.nativeEvent.locationY, true);
          },
          onPanResponderTerminate: function onPanResponderTerminate() {},
          onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var chooseColor = this.props.chooseColor;
        this.calculateColorAngle(chooseColor);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var chooseColor = this.props.chooseColor;

        if (chooseColor !== nextProps.chooseColor) {
          this.calculateColorAngle(nextProps.chooseColor);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
            rotateAnimate = _this$state.rotateAnimate,
            canClick = _this$state.canClick;
        var _this$props = this.props,
            centerImg = _this$props.centerImg,
            centerClick = _this$props.centerClick,
            rgbOn = _this$props.rgbOn;
        var colorPan = rgbOn ? _react.default.createElement(_reactNative.View, (0, _extends2.default)({
          style: [styles.colorPanImg, {
            opacity: rgbOn ? 1 : 0.3
          }]
        }, this.customPanResponder.panHandlers), _react.default.createElement(_reactNative.Image, {
          style: styles.colorPan,
          source: _Resources.default.MainPage.homepageColorPan
        })) : _react.default.createElement(_reactNative.View, {
          style: [styles.colorPanImg, {
            opacity: rgbOn ? 1 : 0.3
          }]
        }, _react.default.createElement(_reactNative.Image, {
          style: styles.colorPan,
          source: _Resources.default.MainPage.homepageColorPan
        }));
        return _react.default.createElement(_reactNative.View, {
          style: styles.colorPanParent
        }, colorPan, _react.default.createElement(_reactNative.View, {
          style: styles.centerBody,
          pointerEvents: canClick ? 'box-none' : 'none'
        }, _react.default.createElement(_reactNative.Animated.Image, {
          style: [styles.lightPicker, {
            transform: [{
              rotateZ: rotateAnimate.interpolate({
                inputRange: [0, 1],
                outputRange: ['0deg', '360deg']
              })
            }]
          }],
          source: _Resources.default.MainPage.homepageLightPicker,
          pointerEvents: "none"
        }), _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress() {
            if (typeof centerClick === 'function') centerClick();
          }
        }, _react.default.createElement(_reactNative.Image, {
          style: styles.light,
          source: centerImg
        }))));
      }
    }]);
    return LHColorWheelView;
  }(_react.default.Component);

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHColorWheelView);

  exports.default = _default;
},11267,[14305,14344,14320,14323,14371,14377,14386,10297,10033,10004,10757,11270]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var panColor = {
    0: [20, 255, 103],
    1: [18, 255, 102],
    2: [13, 255, 98],
    3: [9, 255, 96],
    4: [5, 255, 93],
    5: [3, 255, 92],
    6: [0, 253, 92],
    7: [1, 252, 95],
    8: [1, 251, 96],
    9: [3, 248, 100],
    10: [4, 247, 102],
    11: [5, 245, 105],
    12: [5, 244, 106],
    13: [6, 243, 110],
    14: [7, 240, 113],
    15: [8, 240, 114],
    16: [9, 239, 118],
    17: [9, 237, 120],
    18: [11, 236, 122],
    19: [12, 235, 125],
    20: [12, 231, 128],
    21: [12, 231, 129],
    22: [14, 229, 134],
    23: [15, 228, 137],
    24: [15, 227, 138],
    25: [16, 224, 142],
    26: [17, 224, 143],
    27: [18, 222, 146],
    28: [18, 221, 148],
    29: [19, 219, 151],
    30: [20, 217, 155],
    31: [22, 216, 157],
    32: [22, 215, 159],
    33: [23, 212, 163],
    34: [24, 211, 165],
    35: [25, 209, 167],
    36: [26, 208, 171],
    37: [27, 207, 174],
    38: [28, 206, 176],
    39: [28, 203, 177],
    40: [29, 202, 181],
    41: [29, 201, 183],
    42: [31, 200, 186],
    43: [32, 198, 188],
    44: [32, 196, 192],
    45: [33, 195, 194],
    46: [33, 195, 196],
    47: [35, 192, 199],
    48: [36, 191, 202],
    49: [36, 188, 205],
    50: [37, 187, 207],
    51: [38, 185, 210],
    52: [39, 184, 212],
    53: [40, 183, 214],
    54: [40, 181, 218],
    55: [41, 180, 219],
    56: [42, 178, 223],
    57: [44, 177, 224],
    58: [44, 175, 229],
    59: [44, 174, 231],
    60: [46, 171, 235],
    61: [47, 171, 235],
    62: [48, 168, 239],
    63: [49, 167, 239],
    64: [53, 163, 239],
    65: [56, 161, 239],
    66: [60, 158, 239],
    67: [61, 156, 239],
    68: [65, 154, 239],
    69: [70, 149, 239],
    70: [71, 148, 239],
    71: [77, 145, 239],
    72: [80, 142, 239],
    73: [82, 140, 239],
    74: [85, 137, 239],
    75: [90, 134, 239],
    76: [91, 133, 239],
    77: [95, 129, 238],
    78: [98, 126, 238],
    79: [100, 125, 238],
    80: [105, 121, 238],
    81: [108, 119, 238],
    82: [111, 116, 238],
    83: [113, 114, 238],
    84: [118, 111, 238],
    85: [122, 108, 238],
    86: [125, 105, 238],
    87: [127, 103, 238],
    88: [130, 101, 238],
    89: [134, 97, 238],
    90: [138, 94, 238],
    91: [140, 93, 238],
    92: [144, 89, 237],
    93: [146, 87, 237],
    94: [150, 85, 237],
    95: [153, 82, 237],
    96: [156, 79, 237],
    97: [160, 75, 237],
    98: [161, 75, 237],
    99: [166, 71, 237],
    100: [169, 69, 237],
    101: [173, 65, 237],
    102: [174, 64, 237],
    103: [179, 61, 237],
    104: [182, 57, 237],
    105: [184, 55, 237],
    106: [188, 53, 237],
    107: [192, 50, 237],
    108: [194, 48, 237],
    109: [197, 46, 237],
    110: [203, 42, 236],
    111: [204, 41, 236],
    112: [208, 36, 236],
    113: [212, 33, 236],
    114: [214, 32, 236],
    115: [219, 28, 236],
    116: [220, 27, 236],
    117: [224, 24, 236],
    118: [226, 22, 236],
    119: [231, 19, 236],
    120: [235, 16, 236],
    121: [238, 13, 236],
    122: [240, 11, 236],
    123: [245, 8, 236],
    124: [247, 6, 236],
    125: [251, 3, 236],
    126: [253, 0, 236],
    127: [255, 0, 231],
    128: [255, 0, 228],
    129: [255, 0, 223],
    130: [255, 0, 218],
    131: [255, 0, 215],
    132: [255, 0, 210],
    133: [255, 0, 206],
    134: [255, 0, 198],
    135: [255, 0, 195],
    136: [255, 0, 193],
    137: [255, 0, 185],
    138: [255, 0, 181],
    139: [255, 0, 176],
    140: [255, 0, 173],
    141: [255, 0, 167],
    142: [255, 0, 162],
    143: [255, 0, 159],
    144: [255, 0, 154],
    145: [255, 0, 150],
    146: [255, 0, 144],
    147: [255, 0, 141],
    148: [255, 0, 134],
    149: [255, 0, 131],
    150: [255, 0, 127],
    151: [255, 0, 122],
    152: [255, 0, 115],
    153: [255, 0, 112],
    154: [255, 0, 107],
    155: [255, 0, 103],
    156: [255, 0, 97],
    157: [255, 0, 94],
    158: [255, 0, 88],
    159: [255, 0, 81],
    160: [255, 0, 80],
    161: [255, 0, 73],
    162: [255, 0, 69],
    163: [255, 0, 65],
    164: [255, 0, 61],
    165: [255, 0, 55],
    166: [255, 0, 52],
    167: [255, 0, 46],
    168: [255, 0, 40],
    169: [255, 0, 38],
    170: [255, 0, 32],
    171: [255, 0, 28],
    172: [255, 0, 21],
    173: [255, 0, 19],
    174: [255, 0, 14],
    175: [255, 0, 8],
    176: [255, 0, 5],
    177: [255, 1, 1],
    178: [255, 2, 0],
    179: [255, 7, 0],
    180: [255, 9, 0],
    181: [255, 13, 0],
    182: [255, 18, 0],
    183: [255, 21, 0],
    184: [255, 25, 0],
    185: [255, 28, 0],
    186: [255, 32, 0],
    187: [255, 38, 0],
    188: [255, 40, 0],
    189: [255, 44, 0],
    190: [255, 47, 0],
    191: [255, 51, 0],
    192: [255, 53, 0],
    193: [255, 58, 0],
    194: [255, 63, 0],
    195: [255, 65, 0],
    196: [255, 70, 0],
    197: [255, 73, 0],
    198: [255, 76, 0],
    199: [255, 80, 0],
    200: [255, 84, 0],
    201: [255, 85, 0],
    202: [255, 92, 0],
    203: [255, 97, 0],
    204: [255, 98, 0],
    205: [255, 102, 0],
    206: [255, 107, 0],
    207: [255, 110, 0],
    208: [255, 113, 0],
    209: [255, 118, 0],
    210: [255, 120, 0],
    211: [255, 126, 0],
    212: [255, 128, 0],
    213: [255, 134, 0],
    214: [255, 135, 0],
    215: [255, 141, 0],
    216: [255, 143, 0],
    217: [255, 148, 0],
    218: [255, 150, 0],
    219: [255, 153, 0],
    220: [255, 158, 0],
    221: [255, 161, 0],
    222: [255, 165, 0],
    223: [255, 168, 0],
    224: [255, 173, 0],
    225: [255, 176, 0],
    226: [255, 178, 0],
    227: [255, 184, 0],
    228: [255, 187, 0],
    229: [255, 192, 0],
    230: [255, 194, 0],
    231: [255, 199, 0],
    232: [255, 201, 0],
    233: [255, 204, 0],
    234: [255, 208, 0],
    235: [255, 212, 0],
    236: [255, 216, 0],
    237: [255, 218, 0],
    238: [255, 224, 0],
    239: [255, 226, 0],
    240: [255, 229, 0],
    241: [255, 231, 3],
    242: [255, 232, 8],
    243: [255, 232, 10],
    244: [255, 233, 15],
    245: [255, 233, 18],
    246: [255, 234, 23],
    247: [255, 234, 25],
    248: [255, 234, 30],
    249: [255, 235, 36],
    250: [255, 235, 38],
    251: [255, 235, 43],
    252: [255, 236, 47],
    253: [255, 236, 50],
    254: [255, 236, 54],
    255: [255, 237, 59],
    256: [255, 237, 61],
    257: [255, 238, 66],
    258: [255, 238, 71],
    259: [255, 238, 73],
    260: [255, 239, 78],
    261: [255, 239, 81],
    262: [255, 239, 87],
    263: [255, 240, 89],
    264: [255, 240, 94],
    265: [255, 241, 99],
    266: [255, 241, 102],
    267: [255, 241, 106],
    268: [255, 241, 109],
    269: [255, 242, 114],
    270: [255, 242, 116],
    271: [255, 242, 121],
    272: [255, 243, 126],
    273: [255, 244, 129],
    274: [255, 243, 133],
    275: [255, 244, 136],
    276: [255, 244, 141],
    277: [255, 245, 146],
    278: [255, 245, 148],
    279: [255, 246, 154],
    280: [255, 246, 157],
    281: [255, 246, 162],
    282: [255, 246, 164],
    283: [255, 247, 169],
    284: [255, 247, 174],
    285: [255, 248, 176],
    286: [255, 248, 180],
    287: [255, 248, 185],
    288: [255, 249, 188],
    289: [255, 249, 192],
    290: [255, 249, 197],
    291: [255, 249, 199],
    292: [255, 250, 204],
    293: [255, 251, 209],
    294: [255, 251, 212],
    295: [255, 251, 217],
    296: [255, 251, 220],
    297: [255, 251, 225],
    298: [255, 252, 227],
    299: [255, 253, 232],
    300: [255, 253, 235],
    301: [255, 253, 241],
    302: [255, 253, 243],
    303: [255, 254, 249],
    304: [255, 254, 251],
    305: [251, 255, 251],
    306: [249, 255, 251],
    307: [244, 255, 247],
    308: [241, 255, 245],
    309: [237, 255, 244],
    310: [232, 255, 240],
    311: [229, 255, 239],
    312: [225, 255, 235],
    313: [221, 255, 232],
    314: [214, 255, 228],
    315: [211, 255, 227],
    316: [209, 255, 225],
    317: [202, 255, 220],
    318: [198, 255, 218],
    319: [194, 255, 215],
    320: [191, 255, 213],
    321: [185, 255, 210],
    322: [182, 255, 208],
    323: [179, 255, 206],
    324: [174, 255, 203],
    325: [170, 255, 199],
    326: [165, 255, 196],
    327: [162, 255, 195],
    328: [156, 255, 191],
    329: [154, 255, 189],
    330: [148, 255, 186],
    331: [145, 255, 183],
    332: [139, 255, 180],
    333: [136, 255, 178],
    334: [131, 255, 175],
    335: [129, 255, 172],
    336: [123, 255, 169],
    337: [121, 255, 167],
    338: [115, 255, 164],
    339: [109, 255, 161],
    340: [107, 255, 160],
    341: [101, 255, 155],
    342: [98, 255, 153],
    343: [93, 255, 151],
    344: [90, 255, 147],
    345: [84, 255, 144],
    346: [82, 255, 142],
    347: [77, 255, 139],
    348: [72, 255, 136],
    349: [70, 255, 135],
    350: [64, 255, 131],
    351: [60, 255, 129],
    352: [54, 255, 125],
    353: [53, 255, 124],
    354: [48, 255, 120],
    355: [42, 255, 117],
    356: [38, 255, 114],
    357: [35, 255, 113],
    358: [31, 255, 110],
    359: [25, 255, 106]
  };
  exports.default = panColor;
},11270,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _Service = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var _LHDebugConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHIFTTTConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var nightLightIdentify = _LHIFTTTConfig.default.NightLightIdentify;
  var sceneIDList = [];

  var LHNightLightSceneManager = function () {
    function LHNightLightSceneManager() {
      (0, _classCallCheck2.default)(this, LHNightLightSceneManager);
    }

    (0, _createClass2.default)(LHNightLightSceneManager, null, [{
      key: "fetchSubDeviceListAndSysSceneData",
      value: function fetchSubDeviceListAndSysSceneData(did, onSuccess, onFail) {
        new Promise(function (resolve, reject) {
          return _LHCommonFunction.LHMiServer.LoadSceneList(did, 22, {
            identify: nightLightIdentify
          }, function (scenesList) {
            resolve(scenesList);
          }, function (err) {
            reject(err);
          });
        }).then(function (res) {
          onSuccess(res);
        }).catch(function (err) {
          onFail(err);
        });
      }
    }, {
      key: "fetchMotionSubDevice",
      value: function fetchMotionSubDevice(onSuccess, onFail) {
        _LHCommonFunction.LHMiServer.GetSubDevices(function (devices) {
          var motionSubDevices = [];

          if (devices && devices.length > 0) {
            devices.forEach(function (subDevice) {
              if (subDevice.model === 'lumi.sensor_motion.aq2' || subDevice.model === 'lumi.sensor_motion.v1' || subDevice.model === 'lumi.sensor_motion.v2') {
                motionSubDevices.push(subDevice);
              }
            });
          }

          onSuccess(motionSubDevices);
        }, function (res) {
          onFail(res);
        });
      }
    }, {
      key: "fetchSceneData",
      value: function fetchSceneData(gwDevice, onSuccess, onFail) {
        var timeSpan = _LHCommonFunction.LHTimeSpanUtils.DEFAULT_TIME_SPAN();

        var subDeviceSceneMap = new Map();
        LHNightLightSceneManager.fetchMotionSubDevice(function (motionSubDevices) {
          if (motionSubDevices.length === 0) {
            onSuccess(subDeviceSceneMap, timeSpan);
          } else {
            motionSubDevices.forEach(function (subDevice) {
              subDeviceSceneMap.set(subDevice.deviceID, {
                subDeviceName: subDevice ? subDevice.name : '',
                subDeviceModel: subDevice ? subDevice.model : '',
                switchEnable: false,
                isOnline: subDevice.isOnline
              });
            });
          }

          LHNightLightSceneManager.fetchSubDeviceListAndSysSceneData(gwDevice.deviceID, function (res) {
            if (res.length === 0) {
              sceneIDList = [];
              onSuccess(subDeviceSceneMap, timeSpan);
            } else {
              sceneIDList = [];
              res.forEach(function (sceneData) {
                var sceneID = sceneData.sceneID;
                sceneIDList.push(sceneID);
              });
              var scene = res[0];
              var authorizedDeviceIDs = scene.authorizedDeviceIDs,
                  setting = scene.setting;
              var enable = setting.enable;
              motionSubDevices.forEach(function (subMotionDevice) {
                if (authorizedDeviceIDs.indexOf(subMotionDevice.deviceID) > -1 && enable === '1') {
                  subDeviceSceneMap.set(subMotionDevice.deviceID, {
                    subDeviceName: subMotionDevice ? subMotionDevice.name : '',
                    subDeviceModel: subMotionDevice ? subMotionDevice.model : '',
                    switchEnable: true,
                    isOnline: subMotionDevice ? subMotionDevice.isOnline : true
                  });
                }
              });

              if (setting && setting.launch && setting.launch.attr && setting.launch.attr[0] && setting.launch.attr[0].timespan) {
                console.log(setting.launch.attr[0].timespan);
                timeSpan = _LHCommonFunction.LHTimeSpanUtils.getLocalTimespan(setting.launch.attr[0].timespan, true);
                console.log(timeSpan);
              }

              onSuccess(subDeviceSceneMap, timeSpan);
            }
          }, function () {
            var errorResult = [subDeviceSceneMap, timeSpan, -12345];
            onFail(errorResult);
          });
        }, function (res) {
          onFail(res);
        });
      }
    }, {
      key: "fetchNightLightDeviceData",
      value: function fetchNightLightDeviceData(gwDevice, result) {
        LHNightLightSceneManager.fetchSceneData(gwDevice, function (subDeviceSceneMap) {
          var nightlightDeviceHas;

          if (subDeviceSceneMap.size === 0) {
            nightlightDeviceHas = 0;
          } else {
            nightlightDeviceHas = 1;
            subDeviceSceneMap.forEach(function (value) {
              var switchEnable = value.switchEnable;

              if (switchEnable) {
                nightlightDeviceHas = 2;
              }
            });
          }

          result(nightlightDeviceHas);
        }, function () {
          result(-1);
        });
      }
    }, {
      key: "getMotionSceneModel",
      value: function getMotionSceneModel(subDeviceID, subDeviceName, subDeviceModel, time) {
        var timeSpan = time === undefined ? _LHCommonFunction.LHTimeSpanUtils.DEFAULT_TIME_SPAN() : time;
        return {
          default_value: 0,
          device_name: subDeviceName,
          did: subDeviceID,
          extra: '[1,1030,1,0,[0,1],0,0]',
          key: 'event.' + subDeviceModel + '.motion',
          name: '有人移动',
          sc_id: 23,
          src: 'device',
          timespan: timeSpan,
          tr_id: 108
        };
      }
    }, {
      key: "getSetting",
      value: function getSetting(gwDevice) {
        return {
          action_list: [{
            keyName: '开夜灯',
            model: gwDevice.model,
            name: gwDevice.name,
            payload: {
              command: gwDevice.model + '.toggle_smart_light',
              did: gwDevice.deviceID,
              extra: '[1,19,7,111,[48,3],0,0]',
              total_length: 0,
              type: 0,
              value: 'on'
            },
            sa_id: '0',
            type: 0
          }],
          enable: 1,
          enable_push: 0,
          launch: {
            attr: [],
            express: 1
          }
        };
      }
    }, {
      key: "saveSceneData",
      value: function saveSceneData(gwDevice, subDeviceMap, timeSpan, onSuccess, onFail) {
        var timeSlot = _LHCommonFunction.LHTimeSpanUtils.getEast8Timespan(timeSpan, true);

        var authorizedDeviceIDs = [];
        authorizedDeviceIDs.length = 0;
        authorizedDeviceIDs.push(gwDevice.deviceID);
        var sceneSetting = LHNightLightSceneManager.getSetting(gwDevice);
        sceneSetting.launch.attr.length = 0;
        subDeviceMap.forEach(function (value, key) {
          var subDeviceID = key;
          var subDeviceName = value.subDeviceName,
              subDeviceModel = value.subDeviceModel,
              switchEnable = value.switchEnable;

          if (switchEnable) {
            sceneSetting.launch.attr.push(LHNightLightSceneManager.getMotionSceneModel(subDeviceID, subDeviceName, subDeviceModel, timeSlot));
            authorizedDeviceIDs.push(subDeviceID);
          }
        });

        var scene = _Service.default.scene.createScene(_miot.Device.deviceID, 22, {
          identify: nightLightIdentify,
          name: _LHLocalizableString.default.mi_linuxHub_nightlight_smart_light,
          setting: sceneSetting
        });

        scene.authorizedDeviceIDs = authorizedDeviceIDs;
        var fns = [];

        if (sceneIDList && sceneIDList.length > 0) {
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _LHCommonFunction.LHIFTTTManager.deleteScenes(sceneIDList.map(function (value) {
                return String(value);
              }), function (res) {
                return resolve({
                  delScenes: res
                });
              }, function (error) {
                return reject(error);
              });
            });
          });
        }

        fns.push(function () {
          return new Promise(function (resolve, reject) {
            _LHDebugConfig.default.consoleScene(scene);

            scene.save().then(function (res) {
              return resolve(res);
            }).catch(function (err) {
              console.log(err);
              return reject(err);
            });
          });
        });
        Promise.all(fns.map(function (fn) {
          return fn();
        })).then(function (res) {
          onSuccess(res);
        }).catch(function (err) {
          onFail(err);
        });
      }
    }]);
    return LHNightLightSceneManager;
  }();

  exports.default = LHNightLightSceneManager;
},11273,[14305,14320,14323,10062,10074,10004,10172,11183,11276]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var LHIFTTTConfig = function LHIFTTTConfig() {
    (0, _classCallCheck2.default)(this, LHIFTTTConfig);
  };

  exports.default = LHIFTTTConfig;
  LHIFTTTConfig.LazyClockTimerIdentify = 'lumi_gateway_clock_timer';
  LHIFTTTConfig.NightLightIdentify = 'lm_scene_toggle_smart_light';
  LHIFTTTConfig.LinkageAlarmIdentify = 'lm_linkage_alarm';
  LHIFTTTConfig.LinkageDisAlarmIdentify = 'lm_linkage_dis_alarm';
  LHIFTTTConfig.LinkageDisAllAlarmIdentify = 'lm_linkage_dis_all_alarm';
  LHIFTTTConfig.SysIFTTTTypeIFThen = 22;
  LHIFTTTConfig.LinkageAlarmGatewayList = [_LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubAqHM01(), _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubAqHM02(), _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubLmUK01(), _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubMiEU01(), _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubMiHK01(), _LHCommonFunction.LHDeviceModel.DeviceModelAqaraHubMiTW01(), _LHCommonFunction.LHDeviceModel.DeviceModelGatewayV1(), _LHCommonFunction.LHDeviceModel.DeviceModelGatewayV2(), _LHCommonFunction.LHDeviceModel.DeviceModelGatewayV3(), _LHCommonFunction.LHDeviceModel.DeviceAcpartnerV1(), _LHCommonFunction.LHDeviceModel.DeviceAcpartnerV2(), _LHCommonFunction.LHDeviceModel.DeviceAcpartnerV3(), _LHCommonFunction.LHDeviceModel.DeviceCameraAq1(), _LHCommonFunction.LHDeviceModel.DeviceCameraGwAq1()];
  LHIFTTTConfig.NightLightMotionDevice = [_LHCommonFunction.LHDeviceModel.DeviceModelSensorMotionV2(), _LHCommonFunction.LHDeviceModel.DeviceModelSensorMotionAq2()];
  LHIFTTTConfig.LazyLockCacheKey = _LHCommonFunction.CommonMethod.CreatCacheKey('lazyLockTimeList');
  LHIFTTTConfig.LinkageAlarmCacheKey = _LHCommonFunction.CommonMethod.CreatCacheKey('LinkageAlarmCacheKey');
  LHIFTTTConfig.LinkageAlarmIDCacheKey = _LHCommonFunction.CommonMethod.CreatCacheKey('LinkageAlarmIDCacheKey');
},11276,[14305,14320,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reduxActions = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var _miot = _$$_REQUIRE(_dependencyMap[2]);

  var _ActionTypes = _$$_REQUIRE(_dependencyMap[3]);

  var propsArray = ['arming', 'rgb', 'night_light_rgb', 'arm_wait_time', 'corridor_light'];
  var GetHubProps = (0, _reduxActions.createAction)(_ActionTypes.GET_HUB_STATUS, function () {
    return new Promise(function (resolve, reject) {
      var propsData = {
        arming: '',
        rgb: 0,
        night_light_rgb: 0,
        arm_wait_time: 0,
        corridor_light: 'off'
      };

      _LHCommonFunction.LHMiServer.SendRPCRequest('get_prop', propsArray, {}, function (res) {
        if (res.result && res.result.length > 0) {
          for (var i = 0; i < res.result.length; i += 1) {
            propsData[propsArray[i]] = res.result[i];
          }

          resolve(propsData);
        } else {
          resolve({
            arming: '',
            rgb: 0,
            night_light_rgb: 0,
            arm_wait_time: 0,
            corridor_light: 'off'
          });
        }
      }, function (err) {
        reject(err.message || '');
      });
    });
  });
  var AddAlarmPush = (0, _reduxActions.createAction)(_ActionTypes.ADD_ALARM_PUSH, function (alarmArray) {
    return alarmArray;
  });
  var GetSubDeviceList = (0, _reduxActions.createAction)(_ActionTypes.SUB_DEVICE_LIST, function () {
    return new Promise(function (resolve) {
      _miot.Device.getSubDevices().then(function (devices) {
        console.log('GetSubDeviceList', devices);

        if (devices && devices.length > 0) {
          resolve(devices);
        } else {
          resolve([]);
        }
      }).catch(function () {
        resolve([]);
      });
    });
  });
  var SetCorridorLight = (0, _reduxActions.createAction)(_ActionTypes.SET_CORRIDOR_LIGHT, function (value) {
    return new Promise(function (resolve, reject) {
      _LHCommonFunction.LHMiServer.SendRPCPayload('set_corridor_light', [value]).then(function (res) {
        console.log('set_corridor_light' + res);
        resolve(value);
      }).catch(function (error) {
        reject(error || '');
      });
    });
  });
  var GetHubPropsActions = {
    GetHubProps: GetHubProps,
    AddAlarmPush: AddAlarmPush,
    GetSubDeviceList: GetSubDeviceList,
    SetCorridorLight: SetCorridorLight
  };
  var _default = GetHubPropsActions;
  exports.default = _default;
},11279,[10619,10004,10074,10724]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var Araming_Event_Magnet_Open = 'arming_magnet_open';
  var Araming_Event_Motion_Motion = 'arming_motion_motion';
  var Araming_Event_Switch_Click = 'arming_switch_click';
  var Araming_Event_Cube_Alert = 'arming_cube_alert';
  var Araming_Event_Vibration_Vibrate = 'arming_vibration_vibrate';
  var Araming_Event_Vibration_Open = 'arming_vibration_open';
  var kLUMI_EVENT_ALarm_mdtrigger = 'arming_camera_md';

  var LHGatewayLogHandler = function (_React$Component) {
    (0, _inherits2.default)(LHGatewayLogHandler, _React$Component);

    function LHGatewayLogHandler() {
      (0, _classCallCheck2.default)(this, LHGatewayLogHandler);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHGatewayLogHandler).apply(this, arguments));
    }

    (0, _createClass2.default)(LHGatewayLogHandler, null, [{
      key: "getDeviceName",
      value: function getDeviceName(did, subDeviceList) {
        if (!subDeviceList) {
          return '';
        }

        for (var i = 0; i < subDeviceList.length; i += 1) {
          var subDeviceItem = subDeviceList[i];

          if (subDeviceItem.deviceID === did) {
            return subDeviceItem.name;
          }
        }

        return '';
      }
    }, {
      key: "localizedEvent",
      value: function localizedEvent(eventKey) {
        if (eventKey === "event.arming_magnet_open") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_magnet_open;
        } else if (eventKey === "event.arming_motion_motion") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_motion_motion;
        } else if (eventKey === "event.arming_switch_click") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_switch_click;
        } else if (eventKey === "event.arming_cube_alert") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_cube_alert;
        } else if (eventKey === "event.arming_vibration_vibrate") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_vibration_alarm;
        } else if (eventKey === "event.arming_vibration_open") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_vibration_alarm_open;
        } else if (eventKey === "event.arming_camera_md") {
          return _LHLocalizableString.default.mi_linuxHub_arming_log_camera_detect_motion;
        }

        return '';
      }
    }, {
      key: "lumiGatewayAlarmLog",
      value: function lumiGatewayAlarmLog(log, subDeviceList) {
        var _log = (0, _slicedToArray2.default)(log, 2),
            _log$ = (0, _slicedToArray2.default)(_log[1], 2),
            key = _log$[0],
            value = _log$[1];

        var alarmDeviceName = '';

        if (value && value.length >= 2 && Array.isArray(subDeviceList) && subDeviceList.length > 0) {
          var did = value[0];
          var name = LHGatewayLogHandler.getDeviceName(did, subDeviceList);
          alarmDeviceName = name ? name + ' ' : '';
        }

        return alarmDeviceName + LHGatewayLogHandler.localizedEvent(key);
      }
    }]);
    return LHGatewayLogHandler;
  }(_react.default.Component);

  exports.default = LHGatewayLogHandler;
},11282,[14305,14347,14320,14323,14371,14377,14386,10297,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[8]);

  var _redux = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[12]);

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _GetHubSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHDeviceProfile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var isShared = _LHCommonFunction.LHDeviceAuthorityUtils.isShared();

  var LHSettingPage = function (_React$Component) {
    (0, _inherits2.default)(LHSettingPage, _React$Component);

    function LHSettingPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHSettingPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSettingPage).call(this, props, context));
      _this.doorBellDeviceList = null;
      return _this;
    }

    (0, _createClass2.default)(LHSettingPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        if (isShared) {
          return;
        }

        var _this$props = this.props,
            GetMistakenDelete = _this$props.GetMistakenDelete,
            GetGatewayLanguage = _this$props.GetGatewayLanguage,
            GetMistakenDeleteCache = _this$props.GetMistakenDeleteCache,
            GetGatewayLanguageCache = _this$props.GetGatewayLanguageCache;
        this.getBellIFTTTDeviceList().catch(function (err) {
          console.log('getBellIFTTTDeviceList error', err);
        });

        if (_LHDeviceProfile.default.isSupportLanguageConfig()) {
          GetGatewayLanguageCache().catch(function (err) {
            console.log('GetGatewayLanguageCache error', err);
          });

          if (_miot.Device.isOnline) {
            GetGatewayLanguage().catch(function (err) {
              console.log('GetGatewayLanguage error', err);
            });
          }
        }

        if (_LHDeviceProfile.default.isSupportPreventMistakenDelete()) {
          GetMistakenDeleteCache().catch(function (err) {
            console.log('GetMistakenDeleteCache error', err);
          });

          if (_miot.Device.isOnline) {
            GetMistakenDelete().catch(function (err) {
              console.log('GetMistakenDelete error', err);
            });
          }
        }

        var GetHubSettingsReducers = this.props.GetHubSettingsReducers;
        var used_for_public = GetHubSettingsReducers.hubSettingData.used_for_public;
        this.setState({
          isProtectDelete: used_for_public
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        var GetHubSettingsReducers = newProps.GetHubSettingsReducers;
        var used_for_public = GetHubSettingsReducers.hubSettingData.used_for_public;
        this.setState({
          isProtectDelete: used_for_public
        });
      }
    }, {
      key: "getBellIFTTTDeviceList",
      value: function getBellIFTTTDeviceList() {
        var _this2 = this;

        var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var toastIfFail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return new Promise(function (resolve, reject) {
          if (loading) _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
            title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
          });

          _LHCommonFunction.LHIFTTTManager.getLinuxGatewayIFTTTDeviceList(_miot.Device.deviceID, _LHCommonFunction.LHGuardTypeMode.getDoorbellType(), function (data) {
            if (loading) _LHCommonFunction.LHDialogUtils.LoadingDialogHide();
            _this2.doorBellDeviceList = data;
            resolve(data);
          }, function (err) {
            if (loading) _LHCommonFunction.LHDialogUtils.LoadingDialogHide();
            if (toastIfFail) _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
            reject(err);
          });
        });
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this3 = this;

        var pluginItem = function pluginItem() {
          return _LHCommonFunction.LHSettingItem.getSettingItem('plugIn', {
            rightDescription: _PluginConfig.default.PluginVersion
          });
        };

        if (isShared) {
          return [pluginItem()];
        }

        var isProtectDelete = this.state.isProtectDelete;
        var _this$props2 = this.props,
            SetMistakenDelete = _this$props2.SetMistakenDelete,
            GetHubSettingsReducers = _this$props2.GetHubSettingsReducers;
        var gateway_lang = GetHubSettingsReducers.hubSettingData.gateway_lang;

        var currentLang = _LHDeviceProfile.default.getCurrentLanguageName(gateway_lang);

        var getLangItemIfSupport = function getLangItemIfSupport() {
          var item = {
            title: _LHLocalizableString.default.mi_linuxHub_setting_language,
            rightDescription: currentLang,
            testID: 'gatewayLanguage',
            press: function press() {
              var navigation = _this3.props.navigation;
              navigation.navigate('LHGatewayLanguage');
            }
          };
          return _LHDeviceProfile.default.isSupportLanguageConfig() ? item : null;
        };

        var getMistakenDeleteItemIfSupport = function getMistakenDeleteItemIfSupport() {
          var item = {
            title: _LHLocalizableString.default.mi_linuxHub_setting_protect_delete,
            description: _LHLocalizableString.default.mi_linuxHub_setting_protect_delete_tip,
            hideRightArrow: true,
            hasSwitch: true,
            switchValue: isProtectDelete,
            onSwitchChange: function onSwitchChange(value) {
              _this3.setState({
                isProtectDelete: value
              });

              SetMistakenDelete(value).catch(function () {
                _this3.setState({
                  isProtectDelete: isProtectDelete
                });
              });
            }
          };
          return _LHDeviceProfile.default.isSupportPreventMistakenDelete() ? item : null;
        };

        var items = [{
          title: _LHLocalizableString.default.mi_linuxHub_setting_volume_setting,
          testID: 'volumePage',
          press: function press() {
            var navigation = _this3.props.navigation;
            navigation.navigate('LHVolumePage');
          }
        }, getLangItemIfSupport(), getMistakenDeleteItemIfSupport(), {
          title: _LHLocalizableString.default.mi_linuxHub_setting_alarmclock,
          testID: 'lazyAlarmClock',
          press: function press() {
            var navigation = _this3.props.navigation;
            navigation.navigate('LHLazyAlarmClockPage');
          }
        }, {
          title: _LHLocalizableString.default.mi_linuxHub_setting_doorbell,
          testID: 'gatewayIFTTT',
          press: function press() {
            var goNextPage = function goNextPage(deviceList) {
              var navigation = _this3.props.navigation;
              navigation.navigate('LHGatewayIFTTTPage', {
                pageType: _LHCommonFunction.LHGuardTypeMode.getDoorbellType(),
                deviceList: deviceList,
                callBack: function callBack(newData) {
                  _this3.doorBellDeviceList = newData;
                }
              });
            };

            if (_this3.doorBellDeviceList === null) {
              _this3.getBellIFTTTDeviceList(true, true).then(function (data) {
                if (Array.isArray(data) && data.length) {
                  goNextPage(data);
                } else {
                  _this3.alertDoorbellEmptyToBuy();
                }
              }).catch(function () {
                _this3.alertDoorbellEmptyToBuy();
              });
            } else if (Array.isArray(_this3.doorBellDeviceList) && _this3.doorBellDeviceList.length) {
              goNextPage(_this3.doorBellDeviceList);
            } else {
              _this3.alertDoorbellEmptyToBuy();
            }
          }
        }, pluginItem()];
        return items.filter(function (item) {
          return item !== null && typeof item !== 'undefined';
        });
      }
    }, {
      key: "alertDoorbellEmptyToBuy",
      value: function alertDoorbellEmptyToBuy() {
        var config = {
          title: _LHLocalizableString.default.mi_linuxHub_guard_can_not_open,
          confirm: _LHLocalizableString.default.mi_linuxHub_guard_go_buy,
          cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
          message: _LHLocalizableString.default.mi_linuxHub_bell_no_sub_device_tip,
          onConfirm: function onConfirm() {
            _LHCommonFunction.LHMiServer.OpenYouPinShop('人体门窗开关传感器');
          }
        };
        var configOverSea = {
          title: _LHLocalizableString.default.mi_linuxHub_guard_can_not_open,
          confirm: _LHCommonFunction.LHCommonLocalizableString.common_tips_iknow,
          message: _LHLocalizableString.default.mi_linuxHub_bell_no_sub_device_tip
        };

        _LHCommonFunction.LHMiServer.isOverSea(function (res) {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow(res ? configOverSea : config);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        var navigation = this.props.navigation;
        return _react.default.createElement(_reactNative.View, {
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHSetting, {
          navigation: navigation,
          PolicyLicenseUrl: _Resources.default.PolicyLicense,
          settingItems: pageData,
          showShare: true,
          hideGatewayShare: false,
          showIftt: true,
          showFirmwareUpgrate: true,
          showIsHomeKitDevice: true,
          needFirmwareUpgrateDot: true
        }));
      }
    }]);
    return LHSettingPage;
  }(_react.default.Component);

  LHSettingPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHCommonFunction.LHCommonLocalizableString['common_setting_title'],
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  LHSettingPage.openPrivacyLicense = function () {
    var policyLicenseUrl = _LHCommonFunction.LHPolicyLicenseUtils.GexPolicyLicenseUrl(_Resources.default.PolicyLicense);

    _miot.Host.ui.privacyAndProtocolReview(_LHCommonFunction.LHCommonLocalizableString['common_setting_user_agreement'], policyLicenseUrl.licenseUrl, _LHCommonFunction.LHCommonLocalizableString['common_setting_privacy_policy'], policyLicenseUrl.policyUrl);
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubSettingsReducers: state.GetHubSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHSettingPage));

  exports.default = _default;
},11285,[14305,14320,14323,14371,14377,14386,10297,10033,10184,10214,10074,10004,10178,11249,10757,11234,11183,11288,10730]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reduxActions = _$$_REQUIRE(_dependencyMap[1]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _LHDeviceProfile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHSettingCache = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _ActionTypes = _$$_REQUIRE(_dependencyMap[6]);

  var GetHubSettingCache = (0, _reduxActions.createAction)(_ActionTypes.GET_HUB_SETTING_CACHE, function () {
    return _LHSettingCache.default.restore(_ActionTypes.GET_HUB_SETTING_CACHE);
  });
  var GetHubSetting = (0, _reduxActions.createAction)(_ActionTypes.GET_HUB_SETTING, function () {
    return _LHDeviceProfile.default.getHubSettings().then(function (res) {
      return {
        doorbell_volume: res.doorbell_volume,
        gateway_volume: res.gateway_volume,
        alarming_volume: res.alarming_volume,
        doorbell_push: res.doorbell_push
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_HUB_SETTING_CACHE, res);

      return res;
    });
  });
  var SetHubBellVolume = (0, _reduxActions.createAction)(_ActionTypes.SET_DOORBELL_VOLUME, function (value) {
    return _LHDoorBellHandler.default.setDoorbellVolume(value).then(function () {
      return {
        doorbell_volume: value
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_HUB_SETTING_CACHE, res);

      return res;
    });
  });
  var SetGatewayVolume = (0, _reduxActions.createAction)(_ActionTypes.SET_GATEWAY_VOLUME, function (value) {
    var volume = Math.min(Math.max(parseInt(value, 10), 0), 100);
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_gateway_volume', [volume]).then(function () {
      return {
        gateway_volume: value
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_HUB_SETTING_CACHE, res);

      return res;
    });
  });
  var SetArmingVolume = (0, _reduxActions.createAction)(_ActionTypes.SET_ARMING_VOLUME, function (value) {
    var volume = Math.min(Math.max(parseInt(value, 10), 0), 100);
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_alarming_volume', [volume]).then(function () {
      return {
        alarming_volume: value
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_HUB_SETTING_CACHE, res);

      return res;
    });
  });
  var SetDoorbellPush = (0, _reduxActions.createAction)(_ActionTypes.SET_DOORBELL_PUSH, function (value) {
    return _LHDoorBellHandler.default.setDoorbellPush(value).then(function () {
      return {
        doorbell_push: value
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_HUB_SETTING_CACHE, res);

      return res;
    });
  });
  var GetHubBellToneCache = (0, _reduxActions.createAction)(_ActionTypes.GET_DOORBELL_TONE_CACHE, function () {
    return _LHSettingCache.default.restore(_ActionTypes.GET_DOORBELL_TONE_CACHE);
  });
  var GetHubBellTone = (0, _reduxActions.createAction)(_ActionTypes.GET_DOORBELL_TONE, function () {
    return _LHDoorBellHandler.default.fetchDoorBellMusicList().then(function (res) {
      var bellList = res.bellList,
          defaultTone = res.defaultTone;
      return {
        doorBellTone: defaultTone,
        doorbellToneList: bellList
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_DOORBELL_TONE_CACHE, res);

      return res;
    });
  });
  var SetDoorbellTone = (0, _reduxActions.createAction)(_ActionTypes.SET_BOORBELL_TONE, function (value) {
    return _LHDoorBellHandler.default.setDefaultMusic(value).then(function () {
      return {
        doorBellTone: value
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_DOORBELL_TONE_CACHE, res);

      return res;
    });
  });
  var GetMistakenDeleteCache = (0, _reduxActions.createAction)(_ActionTypes.GET_MISTAKEN_DELETE_CACHE, function () {
    return _LHSettingCache.default.restore(_ActionTypes.GET_MISTAKEN_DELETE_CACHE);
  });
  var GetMistakenDelete = (0, _reduxActions.createAction)(_ActionTypes.GET_MISTAKEN_DELETE, function () {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('get_device_prop', ['lumi.0', 'used_for_public']).then(function (res) {
      if (res.result.length) {
        return {
          used_for_public: res.result[0] === 1
        };
      } else {
        throw new Error('Invalid response length of getting settings');
      }
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_MISTAKEN_DELETE_CACHE, res);

      return res;
    });
  });
  var SetMistakenDelete = (0, _reduxActions.createAction)(_ActionTypes.SET_MISTAKEN_DELETE, function (value) {
    var param = Boolean(value);
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_device_prop', {
      sid: 'lumi.0',
      used_for_public: param ? 1 : 0
    }).then(function () {
      return {
        used_for_public: param
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_MISTAKEN_DELETE_CACHE, res);

      return res;
    });
  });
  var GetGatewayLanguageCache = (0, _reduxActions.createAction)(_ActionTypes.GET_GATEWAY_LANGUAGE_CACHE, function () {
    return _LHSettingCache.default.restore(_ActionTypes.GET_GATEWAY_LANGUAGE_CACHE);
  });
  var GetGatewayLanguage = (0, _reduxActions.createAction)(_ActionTypes.GET_GATEWAY_LANGUAGE, function () {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('get_device_prop', ['lumi.0', 'gateway_lang']).then(function (res) {
      if (res.result.length) {
        return {
          gateway_lang: res.result[0]
        };
      } else {
        throw new Error('Invalid response length of getting settings gateway_lang');
      }
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_GATEWAY_LANGUAGE_CACHE, res);

      return res;
    });
  });
  var SetGatewayLanguage = (0, _reduxActions.createAction)(_ActionTypes.SET_GATEWAY_LANGUAGE, function (value) {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_device_prop', {
      sid: 'lumi.0',
      gateway_lang: value
    }).then(function () {
      return {
        gateway_lang: value
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_GATEWAY_LANGUAGE_CACHE, res);

      return res;
    });
  });
  var GetHubSettingsActions = {
    GetHubSetting: GetHubSetting,
    GetHubBellTone: GetHubBellTone,
    SetHubBellVolume: SetHubBellVolume,
    SetGatewayVolume: SetGatewayVolume,
    SetArmingVolume: SetArmingVolume,
    SetDoorbellTone: SetDoorbellTone,
    SetDoorbellPush: SetDoorbellPush,
    GetMistakenDelete: GetMistakenDelete,
    SetMistakenDelete: SetMistakenDelete,
    GetGatewayLanguage: GetGatewayLanguage,
    SetGatewayLanguage: SetGatewayLanguage,
    GetHubSettingCache: GetHubSettingCache,
    GetHubBellToneCache: GetHubBellToneCache,
    GetMistakenDeleteCache: GetMistakenDeleteCache,
    GetGatewayLanguageCache: GetGatewayLanguageCache
  };
  var _default = GetHubSettingsActions;
  exports.default = _default;
},11288,[14305,10619,10004,11291,10730,11294,10724]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[7]);

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var GroupTypeDoorbell = 1;
  var GroupTypeClockBell = 2;

  var LHDoorBellHandler = function (_React$Component) {
    (0, _inherits2.default)(LHDoorBellHandler, _React$Component);

    function LHDoorBellHandler() {
      (0, _classCallCheck2.default)(this, LHDoorBellHandler);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDoorBellHandler).apply(this, arguments));
    }

    (0, _createClass2.default)(LHDoorBellHandler, null, [{
      key: "getDoorBellMusicName",
      value: function getDoorBellMusicName(index) {
        var intIndex = parseInt(index, 10) % 10;

        if (intIndex < 8 && intIndex >= 0) {
          return _LHLocalizableString.default['mi_linuxHub_setting_doorbell_tone' + (intIndex + 1)];
        }

        return _LHLocalizableString.default.mi_linuxHub_setting_doorbell_tone1 + intIndex;
      }
    }, {
      key: "playDoorbellMusic",
      value: function playDoorbellMusic(index) {
        var volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
        return _LHCommonFunction.LHMiServer.SendRPCPayload('play_music_new', [index, volume]);
      }
    }, {
      key: "getDoorbellVolume",
      value: function getDoorbellVolume() {
        return _LHCommonFunction.LHMiServer.SendRPCPayload('get_doorbell_volume');
      }
    }, {
      key: "setDoorbellVolume",
      value: function setDoorbellVolume(value) {
        var volume = Math.min(Math.max(parseInt(value, 10), 0), 100);
        return _LHCommonFunction.LHMiServer.SendRPCPayload('set_doorbell_volume', [volume]);
      }
    }, {
      key: "getDoorbellPush",
      value: function getDoorbellPush() {
        return _LHCommonFunction.LHMiServer.SendRPCPayload('get_doorbell_push');
      }
    }, {
      key: "setDoorbellPush",
      value: function setDoorbellPush() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var push = '';

        if (typeof value === 'boolean') {
          push = value ? 'on' : 'off';
        } else {
          push = value;
        }

        return _LHCommonFunction.LHMiServer.SendRPCPayload('set_doorbell_push', [push]);
      }
    }, {
      key: "setDefaultMusic",
      value: function setDefaultMusic(index) {
        return _LHCommonFunction.LHMiServer.SendRPCPayload('set_default_music', [GroupTypeDoorbell, '' + index]);
      }
    }, {
      key: "fetchDoorBellMusicList",
      value: function fetchDoorBellMusicList() {
        return _LHCommonFunction.LHMiServer.SendRPCPayload('get_music_info', [GroupTypeDoorbell]).then(function (res) {
          var result = res.result;
          var list = result.list,
              defaultTone = result.default;

          if (Array.isArray(list)) {
            return {
              bellList: list,
              defaultTone: defaultTone
            };
          } else {
            throw new Error('invalid response of doorbell music_list');
          }
        });
      }
    }, {
      key: "fetchLazyClockMusicList",
      value: function fetchLazyClockMusicList() {
        return _LHCommonFunction.LHMiServer.SendRPCPayload('get_music_info', [GroupTypeClockBell]).then(function (res) {
          var result = res.result;
          var list = result.list,
              defaultTone = result.default;

          if (Array.isArray(list)) {
            return {
              clockRingList: list,
              defaultTone: defaultTone
            };
          } else {
            throw new Error('invalid response of doorbell music_list');
          }
        });
      }
    }, {
      key: "setSoundPlaying",
      value: function setSoundPlaying() {
        var toPlay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var value = toPlay ? 'on' : 'off';
        return _LHCommonFunction.LHMiServer.SendRPCPayload('set_sound_playing', [value]);
      }
    }]);
    return LHDoorBellHandler;
  }(_react.default.Component);

  var _default = LHDoorBellHandler;
  exports.default = _default;
},11291,[14305,14320,14323,14371,14377,14386,10297,10004,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _miot = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var LHSettingCache = function (_React$Component) {
    (0, _inherits2.default)(LHSettingCache, _React$Component);

    function LHSettingCache() {
      (0, _classCallCheck2.default)(this, LHSettingCache);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHSettingCache).apply(this, arguments));
    }

    (0, _createClass2.default)(LHSettingCache, null, [{
      key: "saveForce",
      value: function saveForce(key, value) {
        console.log('save cache ' + key + ':' + JSON.stringify(value));
        return _LHCommonFunction.LHMiServer.SetHostStorage(key + _miot.Service.account.ID + _miot.Device.deviceID, value);
      }
    }, {
      key: "save",
      value: function save(key, value) {
        if (typeof value === 'object' && value) {
          return LHSettingCache.restore(key).then(function (cache) {
            var newCahce = (0, _extends2.default)({}, cache, value);
            return LHSettingCache.saveForce(key, newCahce);
          }).catch(function () {
            return LHSettingCache.saveForce(key, value);
          });
        }

        return LHSettingCache.saveForce(key, value);
      }
    }, {
      key: "restore",
      value: function restore(key) {
        return _LHCommonFunction.LHMiServer.GetHostStorage(key + _miot.Service.account.ID + _miot.Device.deviceID).then(function (value) {
          console.log('restore cache ' + key + ':' + JSON.stringify(value));

          if (typeof value === 'object' && !value || typeof value === 'undefined') {
            throw new Error('restore null for key: ' + key);
          }

          return value;
        });
      }
    }]);
    return LHSettingCache;
  }(_react.default.Component);

  var _default = LHSettingCache;
  exports.default = _default;
},11294,[14305,14344,14320,14323,14371,14377,14386,10297,10074,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[9]);

  var _redux = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[12]);

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _GetHubSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var LHVolumePage = function (_React$Component) {
    (0, _inherits2.default)(LHVolumePage, _React$Component);

    function LHVolumePage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHVolumePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHVolumePage).call(this, props));
      _this.state = {
        gatewayVolume: -1,
        alarmingVolume: -1,
        doorbellVolume: -1
      };
      return _this;
    }

    (0, _createClass2.default)(LHVolumePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this$props = this.props,
            GetHubSetting = _this$props.GetHubSetting,
            GetHubSettingCache = _this$props.GetHubSettingCache;
        GetHubSettingCache().catch();
        GetHubSetting().catch();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _LHDoorBellHandler.default.setSoundPlaying(false).catch();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var _this$props2 = this.props,
            SetHubBellVolume = _this$props2.SetHubBellVolume,
            SetGatewayVolume = _this$props2.SetGatewayVolume,
            SetArmingVolume = _this$props2.SetArmingVolume;
        var GetHubSettingsReducers = this.props.GetHubSettingsReducers;
        var _this$state = this.state,
            gatewayVolume = _this$state.gatewayVolume,
            alarmingVolume = _this$state.alarmingVolume,
            doorbellVolume = _this$state.doorbellVolume;
        var _GetHubSettingsReduce = GetHubSettingsReducers.hubSettingData,
            gateway_volume = _GetHubSettingsReduce.gateway_volume,
            alarming_volume = _GetHubSettingsReduce.alarming_volume,
            doorbell_volume = _GetHubSettingsReduce.doorbell_volume;
        var sliderCommonStyle = {
          showSliderView: true,
          sliderStyle: {
            thumbTintColor: _PluginConfig.default.HubMainColor,
            minimumTrackTintColor: _PluginConfig.default.HubMainColor
          },
          valueStyle: {
            color: _PluginConfig.default.HubMainColor
          }
        };
        var data = {
          data: [(0, _objectSpread2.default)({}, sliderCommonStyle, {
            hideTopSeparatorLine: true,
            title: _LHLocalizableString.default.mi_linuxHub_setting_volume_alarm,
            sliderProps: {
              minimumValue: 1,
              value: parseInt(alarmingVolume >= 0 ? alarmingVolume : alarming_volume, 10)
            },
            onSlidingComplete: function onSlidingComplete(value) {
              _this2.setState({
                alarmingVolume: value
              });

              SetArmingVolume(value).then(function () {}).catch(function () {
                _this2.setState({
                  alarmingVolume: -1
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          }), (0, _objectSpread2.default)({}, sliderCommonStyle, {
            title: _LHLocalizableString.default.mi_linuxHub_setting_volume_doorbell,
            sliderProps: {
              minimumValue: 1,
              value: parseInt(doorbellVolume >= 0 ? doorbellVolume : doorbell_volume, 10)
            },
            onSlidingComplete: function onSlidingComplete(value) {
              _this2.setState({
                doorbellVolume: value
              });

              SetHubBellVolume(value).then(function () {}).catch(function () {
                _this2.setState({
                  doorbellVolume: -1
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          }), (0, _objectSpread2.default)({}, sliderCommonStyle, {
            title: _LHLocalizableString.default.mi_linuxHub_setting_volume_tip,
            sliderProps: {
              minimumValue: 1,
              value: parseInt(gatewayVolume >= 0 ? gatewayVolume : gateway_volume, 10)
            },
            onSlidingComplete: function onSlidingComplete(value) {
              _this2.setState({
                gatewayVolume: value
              });

              SetGatewayVolume(value).then(function () {}).catch(function () {
                _this2.setState({
                  gatewayVolume: -1
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          })]
        };
        return [data];
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "volumePage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('volumePage'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: data
        }));
      }
    }]);
    return LHVolumePage;
  }(_react.default.Component);

  LHVolumePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_volume_setting,
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubSettingsReducers: state.GetHubSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHVolumePage));

  exports.default = _default;
},11297,[14305,14314,14320,14323,14371,14377,14386,10297,10033,10184,10214,10004,10178,11291,11234,11288,11183,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[8]);

  var _redux = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _GetHubSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var LHDoorBellPage = function (_React$Component) {
    (0, _inherits2.default)(LHDoorBellPage, _React$Component);

    function LHDoorBellPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHDoorBellPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDoorBellPage).call(this, props));
      _this.state = {
        valume: -1,
        isPush: null
      };
      return _this;
    }

    (0, _createClass2.default)(LHDoorBellPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var navigation = this.props.navigation;
        var isOnTop = navigation.isFocused();
        if (!isOnTop) return;
        var _this$props = this.props,
            GetHubSetting = _this$props.GetHubSetting,
            GetHubBellTone = _this$props.GetHubBellTone,
            GetHubSettingCache = _this$props.GetHubSettingCache,
            GetHubBellToneCache = _this$props.GetHubBellToneCache;
        GetHubSettingCache();
        GetHubSetting();
        GetHubBellToneCache();
        GetHubBellTone();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _LHDoorBellHandler.default.setSoundPlaying(false);
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var _this$state = this.state,
            valume = _this$state.valume,
            isPush = _this$state.isPush;
        var _this$props2 = this.props,
            SetHubBellVolume = _this$props2.SetHubBellVolume,
            GetHubSettingsReducers = _this$props2.GetHubSettingsReducers,
            SetDoorbellPush = _this$props2.SetDoorbellPush;
        var _GetHubSettingsReduce = GetHubSettingsReducers.hubSettingData,
            doorBellTone = _GetHubSettingsReduce.doorBellTone,
            doorbellToneList = _GetHubSettingsReduce.doorbellToneList,
            doorbell_volume = _GetHubSettingsReduce.doorbell_volume,
            doorbell_push = _GetHubSettingsReduce.doorbell_push;
        var currentBellName = '';

        if (Array.isArray(doorbellToneList) && doorbellToneList.some(function (item) {
          return doorBellTone === item.mid;
        })) {
          currentBellName = _LHDoorBellHandler.default.getDoorBellMusicName(doorBellTone);
        }

        var data = {
          data: [{
            testID: 'doorbellTone',
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('doorbellTone'),
            hideTopSeparatorLine: true,
            hasRightArrow: true,
            title: _LHLocalizableString.default.mi_linuxHub_setting_bell,
            rightDescription: currentBellName,
            press: function press() {
              var navigation = _this2.props.navigation;
              navigation.navigate('LHDoorBellTonePage');
            }
          }, {
            showSliderView: true,
            title: _LHLocalizableString.default.mi_linuxHub_setting_volume_doorbell,
            titleStyle: {
              fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
            },
            sliderProps: {
              minimumValue: 1,
              value: parseInt(valume >= 0 ? valume : doorbell_volume, 10)
            },
            sliderStyle: {
              thumbTintColor: _PluginConfig.default.HubMainColor,
              minimumTrackTintColor: _PluginConfig.default.HubMainColor,
              thumbStyle: _PluginConfig.default.sliderThumbStyle
            },
            valueStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            showWithPercent: false,
            onSlidingComplete: function onSlidingComplete(value) {
              _this2.setState({
                valume: value
              });

              SetHubBellVolume(value).then(function () {}).catch(function () {
                _this2.setState({
                  valume: -1
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_setting_push,
            hasSwitch: true,
            hideRightArrow: true,
            switchColor: _PluginConfig.default.HubMainColor,
            switchValue: isPush === null ? doorbell_push === 'on' : isPush,
            onSwitchChange: function onSwitchChange(value) {
              _this2.setState({
                isPush: value
              });

              SetDoorbellPush(value ? 'on' : 'off').then(function () {}).catch(function () {
                _this2.setState({
                  isPush: null
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          }]
        };
        return [data];
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "doorbellPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('doorbellPage'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: data
        }));
      }
    }]);
    return LHDoorBellPage;
  }(_react.default.Component);

  LHDoorBellPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_doorbell,
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubSettingsReducers: state.GetHubSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHDoorBellPage));

  exports.default = _default;
},11300,[14305,14320,14323,14371,14377,14386,10297,10033,10184,10214,10178,10004,11234,11183,11291,11288,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[10]);

  var _redux = _$$_REQUIRE(_dependencyMap[11]);

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _GetHubSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var LHDoorBellTonePage = function (_React$Component) {
    (0, _inherits2.default)(LHDoorBellTonePage, _React$Component);

    function LHDoorBellTonePage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHDoorBellTonePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDoorBellTonePage).call(this, props));
      _this.state = {
        currentMid: null
      };
      return _this;
    }

    (0, _createClass2.default)(LHDoorBellTonePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var navigation = this.props.navigation;
        var isOnTop = navigation.isFocused();
        if (!isOnTop) return;
        var _this$props = this.props,
            GetHubSetting = _this$props.GetHubSetting,
            GetHubBellTone = _this$props.GetHubBellTone,
            GetHubSettingCache = _this$props.GetHubSettingCache,
            GetHubBellToneCache = _this$props.GetHubBellToneCache;
        GetHubSettingCache();
        GetHubSetting();
        GetHubBellToneCache();
        GetHubBellTone();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _LHDoorBellHandler.default.setSoundPlaying(false).catch();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var _this$props2 = this.props,
            GetHubSettingsReducers = _this$props2.GetHubSettingsReducers,
            SetDoorbellTone = _this$props2.SetDoorbellTone;
        var _GetHubSettingsReduce = GetHubSettingsReducers.hubSettingData,
            doorbellToneList = _GetHubSettingsReduce.doorbellToneList,
            doorBellTone = _GetHubSettingsReduce.doorBellTone,
            doorbell_volume = _GetHubSettingsReduce.doorbell_volume;
        var currentMid = this.state.currentMid;
        var musicList = doorbellToneList;
        var content = musicList.map(function (item) {
          var mid = item.mid;
          var active = currentMid === null ? doorBellTone === mid : currentMid === mid;
          return {
            title: _LHDoorBellHandler.default.getDoorBellMusicName(mid),
            active: active,
            bottomSeparatorLine: true,
            hideTopSeparatorLine: true,
            hideRightArrow: true,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            titleStyle: active ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            press: function press() {
              _this2.setState({
                currentMid: mid
              });

              SetDoorbellTone(mid).then(function () {
                _LHDoorBellHandler.default.playDoorbellMusic(mid, doorbell_volume);
              }).catch(function () {
                _this2.setState({
                  currentMid: null
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          };
        });
        var data = [];

        if (Array.isArray(content) && content.length) {
          data = [{
            data: content
          }];
        }

        return data;
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "doorbellTone",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('doorbellTone'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData,
          ListEmptyComponent: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, {
            style: _LHCommonUI.LHCommonStyles.emptyImg,
            source: _LHCommonUI.LHCommonIcon.common.emptyImage.normal
          }))
        }));
      }
    }]);
    return LHDoorBellTonePage;
  }(_react.default.Component);

  LHDoorBellTonePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_bell,
        style: [_LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubSettingsReducers: state.GetHubSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHDoorBellTonePage));

  exports.default = _default;
},11303,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10184,10214,11291,11183,11288,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _LHToastUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var originDelayTime;
  var Instance;

  var LHNightLightDelayPage = function (_React$Component) {
    (0, _inherits2.default)(LHNightLightDelayPage, _React$Component);

    function LHNightLightDelayPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHNightLightDelayPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHNightLightDelayPage).call(this, props));
      Instance = (0, _assertThisInitialized2.default)(_this);
      var navigation = _this.props.navigation;
      var corridorOnTime = navigation.state.params.corridorOnTime;
      _this.state = {
        corridorOnTimeValue: corridorOnTime ? corridorOnTime / 60 : 1
      };
      originDelayTime = corridorOnTime ? corridorOnTime / 60 : 1;
      return _this;
    }

    (0, _createClass2.default)(LHNightLightDelayPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.backHandler = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
          if (Instance) {
            Instance.goBack();
          }

          return true;
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.backHandler.remove();
      }
    }, {
      key: "goBack",
      value: function goBack() {
        var navigation = this.props.navigation;
        var corridorOnTimeValue = this.state.corridorOnTimeValue;

        if (corridorOnTimeValue === originDelayTime) {
          navigation.goBack();
        } else {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
            message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
            messageStyle: {
              textAlign: 'center'
            },
            confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            confirmStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            onConfirm: function onConfirm() {
              navigation.goBack();
            }
          });
        }
      }
    }, {
      key: "saveData",
      value: function saveData() {
        var navigation = this.props.navigation;
        var corridorOnTimeValue = this.state.corridorOnTimeValue;

        _LHCommonFunction.LHMiServer.SendRPCPayload('set_corridor_on_time', [corridorOnTimeValue * 60]).then(function () {
          _reactNative.DeviceEventEmitter.emit('NightLightDelayTime', corridorOnTimeValue * 60);

          navigation.goBack();
        }).catch(function () {
          _LHToastUtils.default.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var corridorOnTimeValue = this.state.corridorOnTimeValue;
        var items = [{
          data: [{
            title: '1' + _LHLocalizableString.default.mi_linuxHub_minute,
            active: corridorOnTimeValue === 1,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            titleStyle: corridorOnTimeValue === 1 ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            hideTopSeparatorLine: true,
            hideRightArrow: true,
            press: function press() {
              _this2.setState({
                corridorOnTimeValue: 1
              });
            }
          }, {
            title: '2' + _LHLocalizableString.default.mi_linuxHub_minute,
            active: corridorOnTimeValue === 2,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            hideRightArrow: true,
            titleStyle: corridorOnTimeValue === 2 ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            press: function press() {
              _this2.setState({
                corridorOnTimeValue: 2
              });
            }
          }, {
            title: '5' + _LHLocalizableString.default.mi_linuxHub_minute,
            active: corridorOnTimeValue === 5,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            titleStyle: corridorOnTimeValue === 5 ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            hideRightArrow: true,
            press: function press() {
              _this2.setState({
                corridorOnTimeValue: 5
              });
            }
          }, {
            title: '10' + _LHLocalizableString.default.mi_linuxHub_minute,
            active: corridorOnTimeValue === 10,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            titleStyle: corridorOnTimeValue === 10 ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            hideRightArrow: true,
            press: function press() {
              _this2.setState({
                corridorOnTimeValue: 10
              });
            }
          }]
        }];
        return _react.default.createElement(_reactNative.View, {
          testID: "nightLightDelayPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('nightLightDelayPage'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: items
        }));
      }
    }]);
    return LHNightLightDelayPage;
  }(_react.default.Component);

  exports.default = LHNightLightDelayPage;

  LHNightLightDelayPage.navigationOptions = function () {
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_nightlight_holdtime,
        style: {
          backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
          borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
          borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
        },
        leftButtons: [{
          source: _LHCommonUI.LHCommonIcon.common.navigation_close,
          press: function press() {
            if (Instance) {
              Instance.goBack();
            }
          }
        }],
        rightButtons: [{
          source: _LHCommonUI.LHCommonIcon.common.navigation_confirm,
          press: function press() {
            if (Instance) {
              Instance.saveData();
            }
          }
        }]
      }))
    };
  };
},11306,[14305,14320,14323,14371,14377,14374,14386,10297,10033,10178,10004,10139,11249,11183,11234]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[12]);

  var _redux = _$$_REQUIRE(_dependencyMap[13]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _GetHubProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _LHNightLightSceneManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _LHGatewayIFTTTStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var Instance = null;
  var originTimeSpan;
  var originSceneMap;
  var saving = false;

  var LHNightLightDevicePage = function (_React$Component) {
    (0, _inherits2.default)(LHNightLightDevicePage, _React$Component);
    (0, _createClass2.default)(LHNightLightDevicePage, null, [{
      key: "compareMaps",
      value: function compareMaps(map1, map2) {
        if (map1 === undefined || map2 === undefined) {
          return true;
        }

        var testVal;

        if (map1.size !== map2.size) {
          return false;
        }

        var result = true;
        map1.forEach(function (value, key) {
          testVal = map2.get(key);
          var switchEnable = value.switchEnable;
          var _testVal = testVal,
              enable = _testVal.switchEnable;

          if (enable !== switchEnable) {
            result = false;
          }
        });
        return result;
      }
    }]);

    function LHNightLightDevicePage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHNightLightDevicePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHNightLightDevicePage).call(this, props));

      _this.willFocus = function () {
        _this.backHandler = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
          if (Instance) {
            Instance.goBack();
          }

          return true;
        });
      };

      _this.componentWillUnmount = function () {
        if (_this.deEmitter) {
          _this.deEmitter.remove();
        }

        if (_this.backHandler) {
          _this.backHandler.remove();
        }
      };

      _this.getPageData = function () {
        var sectionTriggle = _this.getTriggleData();

        var sectionAction = _this.getActionData();

        return [{
          sectionHeader: function sectionHeader() {
            return _this.getSectionHeaderView(_LHLocalizableString.default.mi_linuxHub_scene_launch, _Resources.default.GuardSetting.ifImage);
          },
          data: sectionTriggle
        }, {
          sectionHeader: function sectionHeader() {
            return _this.getSectionHeaderView(_LHLocalizableString.default.mi_linuxHub_scene_action, _Resources.default.GuardSetting.thenImage);
          },
          data: sectionAction
        }];
      };

      _this.getTriggleData = function () {
        var _this$state = _this.state,
            sceneMap = _this$state.sceneMap,
            timespan = _this$state.timespan;
        var pageDeviceMap = new Map(sceneMap);
        var data = [];
        pageDeviceMap.forEach(function (value, key) {
          var deviceID = key;
          var subDeviceName = value.subDeviceName,
              subDeviceModel = value.subDeviceModel,
              switchEnable = value.switchEnable,
              isOnline = value.isOnline;
          data.push({
            title: _LHLocalizableString.default.mi_linuxHub_nightlight_motion,
            hasCheckBox: true,
            description: subDeviceName + (isOnline ? '' : '(' + _LHLocalizableString.default.mi_linuxHub_offline + ')'),
            hideRightArrow: true,
            checkBoxActive: switchEnable,
            press: function press() {
              if (_this.getMotionNumbers() > 8 && !switchEnable) {
                _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_nightlight_motion_limit);

                return;
              }

              pageDeviceMap.set(deviceID, {
                subDeviceName: subDeviceName,
                subDeviceModel: subDeviceModel,
                switchEnable: !switchEnable,
                isOnline: isOnline
              });

              var titleDisable = _this.canDone(pageDeviceMap, timespan);

              _this.setState({
                sceneMap: pageDeviceMap,
                titleDisable: titleDisable
              });
            }
          });
        });
        return data;
      };

      _this.getActionData = function () {
        var corridorOnTime = _this.state.corridorOnTime;
        var navigation = _this.props.navigation;
        var data = [];
        data.push({
          title: _LHLocalizableString.default.mi_linuxHub_nightlight_open,
          description: _miot.Device.name,
          hideRightArrow: true
        }, {
          testID: 'nightLightDelayPage',
          title: _LHLocalizableString.default.mi_linuxHub_nightlight_delay_close_min.replace('{value}', String(corridorOnTime / 60)),
          description: _miot.Device.name,
          press: function press() {
            if (_this.backHandler) {
              _this.backHandler.remove();
            }

            navigation.navigate('LHNightLightDelayPage', {
              corridorOnTime: corridorOnTime
            });
          }
        });
        return data;
      };

      _this.getMotionNumbers = function () {
        var sceneMap = _this.state.sceneMap;
        var checkMotionNumbers = 0;
        sceneMap.forEach(function (value) {
          var switchEnable = value.switchEnable;

          if (switchEnable) {
            checkMotionNumbers += 1;
          }
        });
        return checkMotionNumbers;
      };

      _this.getCorridorLight = function () {
        _LHCommonFunction.LHMiServer.SendRPCPayload('get_prop', ['corridor_on_time']).then(function (res) {
          _this.setState({
            corridorOnTime: res.result[0]
          });
        });
      };

      _this.fetchSceneData = function () {
        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
        });

        _LHNightLightSceneManager.default.fetchSceneData(_miot.Device, function (subDeviceSceneMap, result) {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          var timerArray = _LHCommonFunction.LHTimeSpanUtils.gettimerArrayStr(result);

          var tomorrow = timerArray[2] === true ? _LHLocalizableString.default.mi_linuxHub_setting_nightlight_tomorrow : '';
          var str = timerArray[0] + '-' + tomorrow + timerArray[1];

          if (timerArray[0] === timerArray[1]) {
            str = _LHLocalizableString.default.mi_linuxHub_setting_nightlight_allday;
          }

          originTimeSpan = result;
          originSceneMap = new Map();
          subDeviceSceneMap.forEach(function (value, key) {
            originSceneMap.set(key, value);
          });

          var titleDisable = _this.canDone(subDeviceSceneMap, result);

          _this.setState({
            timespan: result,
            sceneMap: subDeviceSceneMap,
            timerStr: str,
            titleDisable: titleDisable
          });
        }, function (res) {
          if (res instanceof Array && res[2] && res[2] === -12345) {
            var timerArray = _LHCommonFunction.LHTimeSpanUtils.gettimerArrayStr(res[1]);

            var tomorrow = timerArray[2] === true ? _LHLocalizableString.default.mi_linuxHub_setting_nightlight_tomorrow : '';
            var str = timerArray[0] + '-' + tomorrow + timerArray[1];

            _this.setState({
              sceneMap: res[0],
              timespan: res[1],
              timerStr: str
            });
          }

          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
        });
      };

      _this.goBack = function () {
        var navigation = _this.props.navigation;
        var _this$state2 = _this.state,
            sceneMap = _this$state2.sceneMap,
            timespan = _this$state2.timespan;

        if (_this.loveAsFirstSight(sceneMap, timespan)) {
          if (_this.backHandler) {
            _this.backHandler.remove();
          }

          navigation.goBack();
        } else {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
            message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
            messageStyle: {
              textAlign: 'center'
            },
            confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            confirmStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            onConfirm: function onConfirm() {
              if (_this.backHandler) {
                _this.backHandler.remove();
              }

              navigation.goBack();
            }
          });
        }
      };

      _this.loveAsFirstSight = function (sceneMap, timespan) {
        if (originTimeSpan === undefined || originSceneMap === undefined) {
          return true;
        }

        if (!LHNightLightDevicePage.compareMaps(originSceneMap, sceneMap) || JSON.stringify(timespan) !== JSON.stringify(originTimeSpan)) {
          return false;
        }

        return true;
      };

      _this.canDone = function (sceneMap, timespan) {
        var hasEnable = false;
        sceneMap.forEach(function (value) {
          var switchEnable = value.switchEnable;

          if (switchEnable) {
            hasEnable = true;
          }
        });

        if (!hasEnable) {
          return true;
        }

        return _this.loveAsFirstSight(sceneMap, timespan);
      };

      _this.saveSceneData = function () {
        if (saving) {
          return;
        }

        saving = true;
        var _this$state3 = _this.state,
            sceneMap = _this$state3.sceneMap,
            timespan = _this$state3.timespan;
        var _this$props = _this.props,
            navigation = _this$props.navigation,
            SetCorridorLight = _this$props.SetCorridorLight,
            GetHubPropsReducers = _this$props.GetHubPropsReducers;
        var corridorLight = GetHubPropsReducers.hubPropsData.corridor_light;

        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
        });

        _LHNightLightSceneManager.default.saveSceneData(_miot.Device, sceneMap, timespan, function () {
          if (corridorLight === 'off') {
            SetCorridorLight('on').then(function () {
              _LHCacheUtils.default.saveMainPageCache({
                corridorLightValue: 'on'
              });

              _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

              var updateNightLightSwitch = navigation.state.params.updateNightLightSwitch;
              updateNightLightSwitch();
              navigation.goBack();
              saving = false;
            }).catch(function () {
              _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

              _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);

              saving = false;
            });
          } else {
            _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

            var updateNightLightSwitch = navigation.state.params.updateNightLightSwitch;
            updateNightLightSwitch();
            navigation.goBack();
            saving = false;
          }
        }, function () {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);

          saving = false;
        });
      };

      _this.getSectionHeaderView = function (title, imageSource) {
        return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: {
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
            alignSelf: 'flex-end'
          }
        }), _react.default.createElement(_reactNative.View, {
          style: _LHGatewayIFTTTStyle.default.sectionHeaderViewStyle
        }, _react.default.createElement(_reactNative.Image, {
          style: _LHGatewayIFTTTStyle.default.sectionHeaderImageStyle,
          source: imageSource
        }), _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHGatewayIFTTTStyle.default.sectionHeaderTextStyle
        }, title)));
      };

      _this.state = {
        timespan: _LHCommonFunction.LHTimeSpanUtils.DEFAULT_TIME_SPAN(),
        sceneMap: new Map(),
        timerStr: '',
        corridorOnTime: 60,
        titleDisable: true
      };
      Instance = (0, _assertThisInitialized2.default)(_this);

      _this.getPageData();

      return _this;
    }

    (0, _createClass2.default)(LHNightLightDevicePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var navigation = this.props.navigation;
        this.deEmitter = _reactNative.DeviceEventEmitter.addListener('NightLightTimer', function (result) {
          var timerArray = _LHCommonFunction.LHTimeSpanUtils.gettimerArrayStr(result);

          var tomorrow = timerArray[2] === true ? _LHLocalizableString.default.mi_linuxHub_setting_nightlight_tomorrow : '';
          var str = timerArray[0] + '-' + tomorrow + timerArray[1];

          if (timerArray[0] === timerArray[1]) {
            str = _LHLocalizableString.default.mi_linuxHub_setting_nightlight_allday;
          }

          var sceneMap = _this2.state.sceneMap;

          var titleDisable = _this2.canDone(sceneMap, result);

          _this2.setState({
            timespan: result,
            timerStr: str,
            titleDisable: titleDisable
          });
        });
        this.deEmitter = _reactNative.DeviceEventEmitter.addListener('NightLightDelayTime', function (delaytime) {
          _this2.setState({
            corridorOnTime: delaytime
          });
        });
        navigation.addListener('willFocus', function () {
          _this2.willFocus();
        });
        setTimeout(function () {
          _this2.fetchSceneData();

          _this2.getCorridorLight();
        }, 400);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var pageData = this.getPageData();
        var navigation = this.props.navigation;
        var _this$state4 = this.state,
            timerStr = _this$state4.timerStr,
            timespan = _this$state4.timespan,
            titleDisable = _this$state4.titleDisable;
        return _react.default.createElement(_reactNative.View, {
          testID: "nightLightDevice",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('nightLightDevice'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
          title: _LHLocalizableString.default.mi_linuxHub_setting_nightlight,
          style: {
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
            borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
            borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
          },
          leftButtons: [{
            type: 'deafultCloseBtn',
            press: function press() {
              if (Instance) {
                Instance.goBack();
              }
            }
          }],
          rightButtons: [{
            type: 'deafultCompleteBtn',
            disable: titleDisable,
            press: function press() {
              if (!titleDisable && Instance) {
                Instance.saveSceneData();
              }
            }
          }]
        }), _react.default.createElement(_reactNative.View, {
          style: {
            marginTop: _LHCommonFunction.LHUiUtils.GetPx(20),
            marginBottom: _LHCommonFunction.LHUiUtils.GetPx(20),
            marginLeft: _LHCommonFunction.LHUiUtils.GetPx(24),
            marginRight: _LHCommonFunction.LHUiUtils.GetPx(24),
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
          }
        }, _react.default.createElement(_LHCommonUI.LHText, {
          style: {
            fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
            textAlign: 'center',
            lineHeight: _LHCommonFunction.LHUiUtils.GetPx(20),
            color: _LHCommonFunction.LHUiUtils.MiJiaTitleColor
          }
        }, _LHLocalizableString.default.mi_linuxHub_nightlight_commont.replace('{value}', _miot.Device.name))), _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }), _react.default.createElement(_LHCommonUI.LHStandardCell, {
          testID: "nightLightTimerPage",
          rowContainerStyle: {
            height: _LHCommonFunction.LHUiUtils.GetPx(64),
            marginBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
          },
          textContainer: {
            alignSelf: 'center'
          },
          title: _LHLocalizableString.default.mi_linuxHub_nightlight_timer,
          rightDescription: timerStr,
          hasRightArrow: true,
          topSeparatorLine: true,
          separatorMarginLeft: 0,
          press: function press() {
            if (_this3.backHandler) {
              _this3.backHandler.remove();
            }

            navigation.navigate('LHNightLightTimerPage', timespan);
          }
        }));
      }
    }]);
    return LHNightLightDevicePage;
  }(_react.default.Component);

  LHNightLightDevicePage.navigationOptions = function () {
    return {
      header: null
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubPropsReducers: state.GetHubPropsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubProps.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHNightLightDevicePage));

  exports.default = _default;
},11309,[14305,14320,14371,14377,14374,14323,14386,10297,10033,10178,10004,10074,10184,10214,10757,11249,11183,11234,11279,11273,11312,11252]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var LHGatewayIFTTTStyle = _reactNative.StyleSheet.create({
    sectionHeaderViewStyle: {
      width: '100%',
      height: _LHCommonFunction.LHUiUtils.GetPx(39),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center'
    },
    sectionHeaderImageStyle: {
      width: _LHCommonFunction.LHUiUtils.GetPx(18),
      height: _LHCommonFunction.LHUiUtils.GetPx(18),
      position: 'absolute',
      left: _LHCommonFunction.LHUiUtils.GetPx(12)
    },
    sectionHeaderTextStyle: {
      fontSize: 13,
      textAlign: 'left',
      position: 'absolute',
      color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor,
      left: _LHCommonFunction.LHUiUtils.GetPx(35)
    }
  });

  exports.default = LHGatewayIFTTTStyle;
},11312,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _miot = _$$_REQUIRE(_dependencyMap[7]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[11]);

  var _redux = _$$_REQUIRE(_dependencyMap[12]);

  var _GuardSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHTextUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHLinkageAlarmManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHIFTTTConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var LHGuardSettingPage = function (_React$Component) {
    (0, _inherits2.default)(LHGuardSettingPage, _React$Component);

    function LHGuardSettingPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHGuardSettingPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHGuardSettingPage).call(this, props, context));
      _this.alarmTriggleDeviceList = [];
      _this.linkageAlarmGatewayList = [];
      return _this;
    }

    (0, _createClass2.default)(LHGuardSettingPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.getArmProperty();
        this.getAlarmTriggleData();
        this.getLinkageAlarmData();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (_LHCacheUtils.default.defaultCache.guardStatus === 'on') {
          _LHCommonFunction.LHIFTTTManager.getLinuxGatewayIFTTTDeviceList(_miot.Device.deviceID, _LHCommonFunction.LHGuardTypeMode.getNormalGuardType(), function (data) {
            var shouldCloseGuard = true;

            for (var i = 0, len = data.length; i < len; i += 1) {
              var device = data[i];

              if (device.isAddedInLinuxGateway) {
                shouldCloseGuard = false;
                break;
              }
            }

            if (shouldCloseGuard) {
              _reactNative.DeviceEventEmitter.emit('GuardAramingStatus', 'off');
            }
          });
        }
      }
    }, {
      key: "getArmProperty",
      value: function getArmProperty() {
        var _this$props = this.props,
            GetArmProp = _this$props.GetArmProp,
            GetArmPropCache = _this$props.GetArmPropCache;
        GetArmPropCache();
        GetArmProp();
      }
    }, {
      key: "getAlarmTriggleData",
      value: function getAlarmTriggleData() {
        var _this2 = this;

        _LHCommonFunction.LHIFTTTManager.getLinuxGatewayIFTTTDeviceList(_miot.Device.deviceID, _LHCommonFunction.LHGuardTypeMode.getNormalGuardType(), function (data) {
          _this2.alarmTriggleDeviceList = data;

          _this2.forceUpdate();
        });
      }
    }, {
      key: "getLinkageAlarmData",
      value: function getLinkageAlarmData() {
        var _this3 = this;

        _LHCommonFunction.LHMiServer.GetHostStorage(_LHIFTTTConfig.default.LinkageAlarmCacheKey).then(function (res) {
          console.log(res);

          if (res) {
            _this3.linkageAlarmGatewayList = JSON.parse(res);

            _this3.forceUpdate();
          }
        }).catch(function (suberr) {
          console.log(suberr);

          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
        });

        _LHLinkageAlarmManager.default.getLinkageAlarmGatewayList(function (data) {
          _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LinkageAlarmCacheKey, JSON.stringify(data));

          _this3.linkageAlarmGatewayList = data;

          _this3.forceUpdate();
        });
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this4 = this;

        var _this$props2 = this.props,
            GetGuardSettingsReducers = _this$props2.GetGuardSettingsReducers,
            navigation = _this$props2.navigation;
        var armWaitTime = GetGuardSettingsReducers.armWaitTime;
        var addedCount = 0;

        for (var i = 0, len = this.alarmTriggleDeviceList.length; i < len; i += 1) {
          if (this.alarmTriggleDeviceList[i].isAddedInLinuxGateway === true) {
            addedCount += 1;
          }
        }

        var alarmTriggleString = addedCount === 0 ? _LHLocalizableString.default.mi_linuxHub_guard_go_config : addedCount + _LHLocalizableString.default.mi_linuxHub_numbers;
        var linkageAlarmData = [];

        if (this.linkageAlarmGatewayList.length > 1) {
          linkageAlarmData.push({
            title: _LHLocalizableString.default.mi_linuxHub_linkage_alarm,
            testID: 'linkageAlarm',
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('linkageAlarm'),
            description: _LHLocalizableString.default.mi_linuxHub_linkage_alarm_hint_detail,
            press: function press() {
              navigation.navigate('LHLinkageAlarmPage');
            }
          });
        }

        return [{
          title: '',
          data: [{
            title: _LHLocalizableString.default.mi_linuxHub_guard_trigger_alarm_device,
            rightDescription: alarmTriggleString,
            testID: 'gatewayIFTTT',
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('gatewayIFTTT'),
            hideTopSeparatorLine: true,
            press: function press() {
              navigation.navigate('LHGatewayIFTTTPage', {
                pageType: _LHCommonFunction.LHGuardTypeMode.getNormalGuardType(),
                deviceList: _this4.alarmTriggleDeviceList,
                callBack: function callBack(newDeviceList) {
                  _this4.alarmTriggleDeviceList = newDeviceList;

                  _this4.forceUpdate();
                }
              });
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_timer,
            press: function press() {
              _miot.Host.ui.openTimerSettingPageWithOptions({
                timerTitle: _LHLocalizableString.default.mi_linuxHub_guard_guard_timer,
                displayName: _LHLocalizableString.default.mi_linuxHub_guard_guard_timer,
                onMethod: 'set_arming',
                onParam: 'on',
                offMethod: 'set_arming',
                offParam: 'off',
                identify: 'lumi_gateway_arming_timer'
              });
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_guard_guardian_countdown,
            rightDescription: _LHTextUtils.default.armWaitTimeText(armWaitTime),
            testID: 'delayEffective',
            press: function press() {
              navigation.navigate('LHDelayEffectivePage');
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_guard_alarm_sound_light_settings,
            testID: 'alarmSetting',
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('alarmSetting'),
            press: function press() {
              navigation.navigate('LHAlarmSettingPage');
            }
          }]
        }, {
          title: '',
          data: linkageAlarmData
        }];
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "guardSetting",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('guardSetting'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }));
      }
    }]);
    return LHGuardSettingPage;
  }(_react.default.Component);

  LHGuardSettingPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_guardSetting,
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetGuardSettingsReducers: state.GetGuardSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GuardSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHGuardSettingPage));

  exports.default = _default;
},11315,[14305,14320,14323,14371,14377,14386,10297,10074,10033,10004,10178,10184,10214,11318,11321,11183,11324,11276,11252]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reduxActions = _$$_REQUIRE(_dependencyMap[1]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var _LHSettingCache = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ActionTypes = _$$_REQUIRE(_dependencyMap[4]);

  var GetArmProp = (0, _reduxActions.createAction)(_ActionTypes.GET_ARM_PROP, function () {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('get_device_prop', ['lumi.0', 'arm_wait_time', 'alarming_volume', 'alarm_time_len', 'en_alarm_light']).then(function (res) {
      return {
        armWaitTime: res.result[0],
        armVolume: res.result[1],
        armSoundTimeLen: res.result[2],
        armLightTimeLen: res.result[3]
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_ARM_PROP_CACHE, res);

      return res;
    });
  });
  var GetArmPropCache = (0, _reduxActions.createAction)(_ActionTypes.GET_ARM_PROP_CACHE, function () {
    return _LHSettingCache.default.restore(_ActionTypes.GET_ARM_PROP_CACHE) || {};
  });
  var SetArmWaitTime = (0, _reduxActions.createAction)(_ActionTypes.SET_ARM_WAIT_TIME, function (second) {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_arm_wait_time', [second]).then(function () {
      var prop = {
        armWaitTime: second
      };

      _LHSettingCache.default.save(_ActionTypes.GET_ARM_PROP_CACHE, prop);

      return prop;
    });
  });
  var SetArmVolume = (0, _reduxActions.createAction)(_ActionTypes.SET_ARM_VOLUME, function (value) {
    var volume = Math.min(Math.max(parseInt(value, 10), 0), 100);
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_alarming_volume', [volume]).then(function () {
      var prop = {
        armVolume: value
      };

      _LHSettingCache.default.save(_ActionTypes.GET_ARM_PROP_CACHE, prop);

      return prop;
    });
  });
  var SetArmSoundTimeLen = (0, _reduxActions.createAction)(_ActionTypes.SET_ARM_SOUND_TIME_LEN, function (value) {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_device_prop', {
      alarm_time_len: value
    }).then(function () {
      var prop = {
        armSoundTimeLen: value
      };

      _LHSettingCache.default.save(_ActionTypes.GET_ARM_PROP_CACHE, prop);

      return prop;
    });
  });
  var SetArmLightTimeLen = (0, _reduxActions.createAction)(_ActionTypes.SET_ARM_LIGHT_TIME_LEN, function (value) {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_device_prop', {
      en_alarm_light: value
    }).then(function () {
      var prop = {
        armLightTimeLen: value
      };

      _LHSettingCache.default.save(_ActionTypes.GET_ARM_PROP_CACHE, prop);

      return prop;
    });
  });
  var GetArmRing = (0, _reduxActions.createAction)(_ActionTypes.GET_ARM_RING, function () {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('get_music_info', [0]).then(function (res) {
      return {
        armRingIndex: res.result.default,
        armRingList: res.result.list
      };
    }).then(function (res) {
      _LHSettingCache.default.save(_ActionTypes.GET_ARM_RING_CACHE, res);

      return res;
    });
  });
  var GetArmRingCache = (0, _reduxActions.createAction)(_ActionTypes.GET_ARM_RING_CACHE, function () {
    return _LHSettingCache.default.restore(_ActionTypes.GET_ARM_RING_CACHE) || {};
  });
  var SetArmRing = (0, _reduxActions.createAction)(_ActionTypes.SET_ARM_RING, function (index) {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('set_default_music', [0, index]).then(function () {
      var prop = {
        armRingIndex: index
      };

      _LHSettingCache.default.save(_ActionTypes.GET_ARM_RING_CACHE, prop);

      return prop;
    });
  });
  var GetGuardSettingsActions = {
    GetArmProp: GetArmProp,
    GetArmPropCache: GetArmPropCache,
    SetArmWaitTime: SetArmWaitTime,
    SetArmVolume: SetArmVolume,
    SetArmSoundTimeLen: SetArmSoundTimeLen,
    SetArmLightTimeLen: SetArmLightTimeLen,
    GetArmRing: GetArmRing,
    SetArmRing: SetArmRing,
    GetArmRingCache: GetArmRingCache
  };
  var _default = GetGuardSettingsActions;
  exports.default = _default;
},11318,[14305,10619,10004,11294,10724]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[2]);

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var LHTextUtils = function LHTextUtils() {
    (0, _classCallCheck2.default)(this, LHTextUtils);
  };

  exports.default = LHTextUtils;

  LHTextUtils.armWaitTimeText = function (second) {
    if (second > 0) {
      return "" + second + _LHCommonFunction.LHCommonLocalizableString.common_date_second;
    } else {
      return _LHLocalizableString.default.mi_linuxHub_arming_holdtime_0;
    }
  };

  LHTextUtils.armSoundTimeLengthText = function (second) {
    if (second === 4000000) {
      return _LHLocalizableString.default.mi_linuxHub_arming_always_ringing;
    } else if (second === 600) {
      return "10" + _LHCommonFunction.LHCommonLocalizableString.common_date_minute;
    } else if (second === 60) {
      return "1" + _LHCommonFunction.LHCommonLocalizableString.common_date_minute;
    } else if (second === 0) {
      return _LHLocalizableString.default.mi_linuxHub_arming_mute;
    }

    return "" + second + _LHCommonFunction.LHCommonLocalizableString.common_date_second;
  };

  LHTextUtils.armLightTimeLengthText = function (second) {
    if (second === 1) {
      return _LHLocalizableString.default.mi_linuxHub_arming_always_flashing;
    } else if (second === 600) {
      return "10" + _LHCommonFunction.LHCommonLocalizableString.common_date_minute;
    } else if (second === 60) {
      return "1" + _LHCommonFunction.LHCommonLocalizableString.common_date_minute;
    } else if (second === 0) {
      return _LHLocalizableString.default.mi_linuxHub_arming_not_flashing;
    }

    return "" + second + _LHCommonFunction.LHCommonLocalizableString.common_date_second;
  };

  LHTextUtils.armSoundName = function (group, index) {
    if (group === 0) {
      if (index === 0) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name1;
      } else if (index === 1) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name2;
      } else if (index === 2) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name3;
      } else if (index === 3) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name4;
      } else if (index === 4) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name5;
      } else if (index === 5) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name6;
      } else if (index === 6) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name7;
      } else if (index === 7) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name8;
      } else if (index === 8) {
        return _LHLocalizableString.default.mi_linuxHub_arming_tone_name9;
      }
    } else if (group === 2) {
      if (index === 20) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone1;
      } else if (index === 21) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone2;
      } else if (index === 22) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone3;
      } else if (index === 23) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone4;
      } else if (index === 24) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone5;
      } else if (index === 25) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone6;
      } else if (index === 26) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone7;
      } else if (index === 27) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone8;
      } else if (index === 28) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone9;
      } else if (index === 29) {
        return _LHLocalizableString.default.mi_linuxHub_clock_tone10;
      }
    }

    return null;
  };

  LHTextUtils.indexOfSecond = function (type, second) {
    if (second === 4000000 && type === 1) {
      return 0;
    } else if (second === 1 && type === 2) {
      return 0;
    } else if (second === 600) {
      return 1;
    } else if (second === 60) {
      return 2;
    } else if (second === 30) {
      return 3;
    } else if (second === 0) {
      return 4;
    }

    return 5;
  };

  LHTextUtils.secondOfindex = function (type, index) {
    if (index === 0 && type === 1) {
      return 4000000;
    } else if (index === 0 && type === 2) {
      return 1;
    } else if (index === 1) {
      return 600;
    } else if (index === 2) {
      return 60;
    } else if (index === 3) {
      return 30;
    } else if (index === 4) {
      return 0;
    }

    return -1;
  };
},11321,[14305,14320,10004,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _Service = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var _Host = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LHIFTTTConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var PromiseKeyGatewayList = 'gatewayList';
  var PromiseKeyLinkageList = 'linkageList';

  var LHLinkageAlarmManager = function () {
    function LHLinkageAlarmManager() {
      (0, _classCallCheck2.default)(this, LHLinkageAlarmManager);
    }

    (0, _createClass2.default)(LHLinkageAlarmManager, null, [{
      key: "getLinkageAlarmGatewayList",
      value: function getLinkageAlarmGatewayList(onSuccess, onFail) {
        var linkageAlarmGatewayList = _LHIFTTTConfig.default.LinkageAlarmGatewayList;
        var fns = [];

        var _loop = function _loop(i, len) {
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _LHCommonFunction.LHMiServer.GetGateWayListWithModel(linkageAlarmGatewayList[i], function (config) {
                return resolve(config);
              }, function (err) {
                return reject(err);
              });
            });
          });
        };

        for (var i = 0, len = linkageAlarmGatewayList.length; i < len; i += 1) {
          _loop(i, len);
        }

        Promise.all(fns.map(function (fn) {
          return fn();
        })).then(function (res) {
          var devicesList = [];

          for (var i = 0, len = res.length; i < len; i += 1) {
            Array.prototype.push.apply(devicesList, res[i] ? res[i].sort(function (a, b) {
              return a.did - b.did;
            }) : res[i]);
          }

          var index = _LHCommonFunction.CommonMethod.Find(devicesList, 'did', _miot.Device.deviceID);

          var sortDevicesList = [devicesList[index]].concat(devicesList.filter(function (item) {
            var isShared = false;

            if (_Host.default.isAndroid) {
              isShared = item && item.permitLevel && (item.permitLevel & 0x04) !== 0;
            } else {
              isShared = item && item.shareFlag;
            }

            return item.did !== _miot.Device.deviceID && !isShared;
          }));

          if (typeof onSuccess === 'function') {
            onSuccess(sortDevicesList);
          }
        }).catch(function (err) {
          onFail(err);
        });
      }
    }, {
      key: "getSupportLinkageAlarmGatewayList",
      value: function getSupportLinkageAlarmGatewayList(onSuccess, onFail) {
        var linkageAlarmGatewayList = _LHIFTTTConfig.default.LinkageAlarmGatewayList;
        var fns = [];

        var _loop2 = function _loop2(i, len) {
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _LHCommonFunction.LHMiServer.GetGateWayListWithModel(linkageAlarmGatewayList[i], function (config) {
                return resolve({
                  key: PromiseKeyGatewayList,
                  list: config
                });
              }, function (err) {
                return reject(err);
              });
            });
          });
        };

        for (var i = 0, len = linkageAlarmGatewayList.length; i < len; i += 1) {
          _loop2(i, len);
        }

        fns.push(function () {
          return new Promise(function (resolve, reject) {
            _LHCommonFunction.LHMiServer.LoadSceneList('', _LHIFTTTConfig.default.SysIFTTTTypeIFThen, {}, function (array) {
              var linkageDeviceIDList = [];
              var sceneIDList = [];

              if (array && array.length > 0) {
                array.forEach(function (scene) {
                  var setting = scene.setting,
                      identify = scene.identify,
                      sceneID = scene.sceneID;

                  if (identify === _LHIFTTTConfig.default.LinkageAlarmIdentify) {
                    console.log(scene);
                    var actionList = setting.action_list;
                    actionList.forEach(function (res) {
                      var payload = res.payload;
                      var did = payload.did;
                      linkageDeviceIDList.push(did);
                    });
                    sceneIDList.push(sceneID);
                  } else if (identify === _LHIFTTTConfig.default.LinkageDisAlarmIdentify || identify === _LHIFTTTConfig.default.LinkageDisAllAlarmIdentify) {
                    console.log(scene);
                    sceneIDList.push(sceneID);
                  }
                });
              }

              return resolve({
                key: PromiseKeyLinkageList,
                list: linkageDeviceIDList,
                linkageSceneList: sceneIDList
              });
            }, function (error) {
              return reject(error);
            });
          });
        });
        Promise.all(fns.map(function (fn) {
          return fn();
        })).then(function (res) {
          var devicesList = [];
          var linkageList = [];
          var sceneIDList = [];

          for (var i = 0, len = res.length; i < len; i += 1) {
            var singleList = res[i];

            if (singleList.key === PromiseKeyGatewayList) {
              Array.prototype.push.apply(devicesList, singleList.list ? singleList.list.sort(function (a, b) {
                return a.did - b.did;
              }) : singleList.list);
            } else if (singleList.key === PromiseKeyLinkageList) {
              Array.prototype.push.apply(linkageList, singleList.list);
              Array.prototype.push.apply(sceneIDList, singleList.linkageSceneList);
            }
          }

          var index = _LHCommonFunction.CommonMethod.Find(devicesList, 'did', _miot.Device.deviceID);

          var sortDevicesList = [devicesList[index]].concat(devicesList.filter(function (item) {
            var isShared = false;

            if (_Host.default.isAndroid) {
              isShared = item && item.permitLevel && (item.permitLevel & 0x04) !== 0;
            } else {
              isShared = item && item.shareFlag;
            }

            return item.did !== _miot.Device.deviceID && !isShared;
          }));
          var sortLinkageList = linkageList.filter(function (item) {
            var itemIndex = _LHCommonFunction.CommonMethod.Find(sortDevicesList, 'did', item);

            return itemIndex > -1;
          });

          if (typeof onSuccess === 'function') {
            onSuccess({
              devicesList: sortDevicesList,
              linkageIDList: sortLinkageList,
              sceneIDList: sceneIDList
            });
          }
        }).catch(function (err) {
          onFail(err);
        });
      }
    }, {
      key: "createLinkageAlarm",
      value: function createLinkageAlarm(linkageDeviceList, sceneIDList, onSuccess, onFail) {
        var _this = this;

        var fns = [];

        if (sceneIDList && sceneIDList.length > 0) {
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _LHCommonFunction.LHIFTTTManager.deleteScenes(sceneIDList.map(function (value) {
                return String(value);
              }), function (res) {
                return resolve({
                  delScenes: res
                });
              }, function (error) {
                return reject(error);
              });
            });
          });
        }

        if (linkageDeviceList && linkageDeviceList.length > 1) {
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _this.createSetLinkageAlarm(linkageDeviceList, function (res) {
                var linkageAlarmJson = {};
                linkageAlarmJson[_LHIFTTTConfig.default.LinkageAlarmIdentify] = res;
                return resolve(linkageAlarmJson);
              }, function (error) {
                return reject(error);
              });
            });
          });
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _this.createSetLinkageAlarmDis(linkageDeviceList, function (res) {
                var linkageAlarmDisJson = {};
                linkageAlarmDisJson[_LHIFTTTConfig.default.LinkageDisAlarmIdentify] = res;
                return resolve(linkageAlarmDisJson);
              }, function (error) {
                return reject(error);
              });
            });
          });
          fns.push(function () {
            return new Promise(function (resolve, reject) {
              _this.createSetLinkageAlarmDisAll(linkageDeviceList, function (res) {
                var linkageAlarmDisAllJson = {};
                linkageAlarmDisAllJson[_LHIFTTTConfig.default.LinkageDisAllAlarmIdentify] = res;
                return resolve(linkageAlarmDisAllJson);
              }, function (error) {
                return reject(error);
              });
            });
          });
        }

        Promise.all(fns.map(function (fn) {
          return fn();
        })).then(function (res) {
          onSuccess(res);
        }).catch(function (err) {
          onFail(err);
        });
      }
    }, {
      key: "createSetLinkageAlarm",
      value: function createSetLinkageAlarm(linkageDeviceList, onSuccess, onFail) {
        var _this2 = this;

        var actionList = [];
        var attrs = [];
        linkageDeviceList.forEach(function (linkageDevice) {
          actionList.push(_this2.getLinkageAlarmAction(linkageDevice));
          attrs.push(_this2.getLinkageAlarmLaunchAttr(linkageDevice));
        });
        var setting = {
          enable: '1',
          enable_push: '1',
          launch: {
            attr: attrs,
            express: 1
          },
          action_list: actionList
        };
        this.createScene(linkageDeviceList, _LHIFTTTConfig.default.LinkageAlarmIdentify, _LHLocalizableString.default.mi_linuxHub_linkage_alarm, setting, onSuccess, onFail);
      }
    }, {
      key: "createSetLinkageAlarmDis",
      value: function createSetLinkageAlarmDis(linkageDeviceList, onSuccess, onFail) {
        var _this3 = this;

        var actionList = [];
        var attrs = [];
        linkageDeviceList.forEach(function (linkageDevice) {
          actionList.push(_this3.getLinkageDisAlarmAction(linkageDevice));
          attrs.push(_this3.getLinkageDisAlarmLaunchAttr(linkageDevice));
        });
        var setting = {
          enable: '1',
          enable_push: '1',
          launch: {
            attr: attrs,
            express: 1
          },
          action_list: actionList
        };
        this.createScene(linkageDeviceList, _LHIFTTTConfig.default.LinkageDisAlarmIdentify, _LHLocalizableString.default.mi_linuxHub_linkage_alarm_dis, setting, onSuccess, onFail);
      }
    }, {
      key: "createSetLinkageAlarmDisAll",
      value: function createSetLinkageAlarmDisAll(linkageDeviceList, onSuccess, onFail) {
        var _this4 = this;

        var actionList = [];
        var attrs = [];
        linkageDeviceList.forEach(function (linkageDevice) {
          actionList.push(_this4.getLinkageDisAllAlarmAction(linkageDevice));
          attrs.push(_this4.getLinkageDisAllAlarmLaunchAttr(linkageDevice));
        });
        var setting = {
          enable: '1',
          enable_push: '1',
          launch: {
            attr: attrs,
            express: 1
          },
          action_list: actionList
        };
        this.createScene(linkageDeviceList, _LHIFTTTConfig.default.LinkageDisAllAlarmIdentify, _LHLocalizableString.default.mi_linuxHub_linkage_alarm_dis, setting, onSuccess, onFail);
      }
    }, {
      key: "getLinkageAlarmAction",
      value: function getLinkageAlarmAction(device) {
        return {
          keyName: _LHLocalizableString.default.mi_linuxHub_linkage_alarm,
          model: device.model,
          name: device.name,
          payload: {
            command: device.model + '.linkage_alarm',
            did: device.deviceID ? device.deviceID : device.did,
            extra: '[1,19,9,85,[40,10000],0,0]',
            value: 10000
          }
        };
      }
    }, {
      key: "getLinkageAlarmLaunchAttr",
      value: function getLinkageAlarmLaunchAttr(device) {
        return {
          device_name: device.name,
          did: device.deviceID ? device.deviceID : device.did,
          extra: '[1,19,1,111,[0,1],2,0]',
          key: 'event.' + device.model + '.arming',
          name: _LHLocalizableString.default.mi_linuxHub_linkage_alarm,
          src: 'device'
        };
      }
    }, {
      key: "getLinkageDisAlarmAction",
      value: function getLinkageDisAlarmAction(device) {
        return {
          keyName: _LHLocalizableString.default.mi_linuxHub_linkage_alarm_dis,
          model: device.model,
          name: device.name,
          payload: {
            command: device.model + '.dis_alarm',
            did: device.deviceID ? device.deviceID : device.did,
            extra: '[1,19,9,111,[40,0],0,0]'
          }
        };
      }
    }, {
      key: "getLinkageDisAlarmLaunchAttr",
      value: function getLinkageDisAlarmLaunchAttr(device) {
        return {
          device_name: device.name,
          did: device.deviceID ? device.deviceID : device.did,
          extra: '[1,19,9,111,[0,0],0,0]',
          key: 'event.' + device.model + '.alarm',
          name: _LHLocalizableString.default.mi_linuxHub_linkage_alarm_dis,
          src: 'device',
          value: 'off'
        };
      }
    }, {
      key: "getLinkageDisAllAlarmAction",
      value: function getLinkageDisAllAlarmAction(device) {
        return {
          keyName: _LHLocalizableString.default.mi_linuxHub_linkage_alarm_dis,
          model: device.model,
          name: device.name,
          payload: {
            command: device.model + '.dis_alarm',
            did: device.deviceID ? device.deviceID : device.did,
            extra: '[1,19,9,111,[40,0],0,0]',
            value: 1
          }
        };
      }
    }, {
      key: "getLinkageDisAllAlarmLaunchAttr",
      value: function getLinkageDisAllAlarmLaunchAttr(device) {
        return {
          device_name: device.name,
          did: device.deviceID ? device.deviceID : device.did,
          extra: '[1,19,9,111,[0,0],0,0]',
          key: 'event.' + device.model + '.alarm',
          name: _LHLocalizableString.default.mi_linuxHub_linkage_alarm_dis,
          src: 'device',
          value: 'all_off'
        };
      }
    }, {
      key: "createScene",
      value: function createScene(linkageDeviceList, identify, name, setting, onSuccess, onFail) {
        var scene = _Service.default.scene.createScene(_miot.Device.deviceID, _LHIFTTTConfig.default.SysIFTTTTypeIFThen, {
          identify: identify,
          name: name,
          setting: setting
        });

        var linkageDeviceIDList = [];
        linkageDeviceList.forEach(function (device) {
          linkageDeviceIDList.push(device.deviceID ? device.deviceID : device.did);
        });
        scene.authorizedDeviceIDs = linkageDeviceIDList;
        scene.save().then(function (saveRes) {
          onSuccess(saveRes);
        }).catch(function (error) {
          onFail(error);
        });
      }
    }]);
    return LHLinkageAlarmManager;
  }();

  exports.default = LHLinkageAlarmManager;
},11324,[14305,14320,14323,10074,10062,10004,10035,11276,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _LHTimeSpanUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _MHDatePicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var Instance = null;
  var originTimespan;

  var LHNightLightTimerPage = function (_React$Component) {
    (0, _inherits2.default)(LHNightLightTimerPage, _React$Component);

    function LHNightLightTimerPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHNightLightTimerPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHNightLightTimerPage).call(this, props));
      Instance = (0, _assertThisInitialized2.default)(_this);
      _this.state = {
        showPicker: false,
        startRawArray: ['0', '0'],
        endRawArray: ['0', '0'],
        startRawString: '00:00',
        endRawString: '00:00',
        isStartTimer: true,
        title: ''
      };
      return _this;
    }

    (0, _createClass2.default)(LHNightLightTimerPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.backHandler = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
          if (Instance) {
            Instance.goBack();
          }

          return true;
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var navigation = this.props.navigation;
        var timeSpan = navigation.state.params;
        originTimespan = timeSpan;
        var from = timeSpan.from,
            to = timeSpan.to;

        var timerArray = _LHTimeSpanUtils.default.gettimerArrayStr(timeSpan);

        var endtimeStr = timerArray[2] === true ? _LHLocalizableString.default.mi_linuxHub_setting_nightlight_tomorrow + timerArray[1] : timerArray[1];
        this.setState({
          startRawArray: [from.hour, from.min],
          startRawString: timerArray[0],
          endRawArray: [to.hour, to.min],
          endRawString: endtimeStr
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.backHandler.remove();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var _this$state = this.state,
            startRawString = _this$state.startRawString,
            endRawString = _this$state.endRawString;
        var endRaw = endRawString;

        if (startRawString > endRawString) {
          if (!endRawString.startsWith(_LHLocalizableString.default.mi_linuxHub_setting_nightlight_tomorrow)) {
            endRaw = _LHLocalizableString.default.mi_linuxHub_setting_nightlight_tomorrow + endRawString;
          }
        }

        var data = [];
        data.push({
          testID: 'on_timer',
          title: _LHCommonFunction.LHCommonLocalizableString.timersetting_on,
          description: startRawString,
          hideTopSeparatorLine: true,
          press: function press() {
            _this2.setState({
              isStartTimer: true,
              showPicker: true,
              title: _LHCommonFunction.LHCommonLocalizableString.timersetting_on
            });
          }
        }, {
          testID: 'off_timer',
          title: _LHCommonFunction.LHCommonLocalizableString.timersetting_off,
          description: endRaw,
          press: function press() {
            _this2.setState({
              isStartTimer: false,
              showPicker: true,
              title: _LHCommonFunction.LHCommonLocalizableString.timersetting_off
            });
          }
        });
        return [{
          data: data
        }];
      }
    }, {
      key: "refreshData",
      value: function refreshData(data) {
        var rawArray = data.rawArray,
            rawString = data.rawString;
        var isStartTimer = this.state.isStartTimer;

        if (isStartTimer) {
          this.setState({
            startRawArray: rawArray,
            startRawString: rawString
          });
        } else {
          this.setState({
            endRawArray: rawArray,
            endRawString: rawString
          });
        }
      }
    }, {
      key: "goBack",
      value: function goBack() {
        var navigation = this.props.navigation;
        var _this$state2 = this.state,
            startRawArray = _this$state2.startRawArray,
            endRawArray = _this$state2.endRawArray;

        var timespan = _LHTimeSpanUtils.default.getTimeSpan(startRawArray, endRawArray);

        var _originTimespan = originTimespan,
            from = _originTimespan.from,
            to = _originTimespan.to,
            wday = _originTimespan.wday;
        var originFrom = timespan.from,
            originTo = timespan.to,
            originWday = timespan.wday;

        if (JSON.stringify(from) === JSON.stringify(originFrom) && JSON.stringify(to) === JSON.stringify(originTo) && JSON.stringify(wday) === JSON.stringify(originWday)) {
          navigation.goBack();
        } else {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
            message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
            messageStyle: {
              textAlign: 'center'
            },
            confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            confirmStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            onConfirm: function onConfirm() {
              navigation.goBack();
            }
          });
        }
      }
    }, {
      key: "saveData",
      value: function saveData() {
        var _this$state3 = this.state,
            startRawArray = _this$state3.startRawArray,
            endRawArray = _this$state3.endRawArray;

        _reactNative.DeviceEventEmitter.emit('NightLightTimer', _LHTimeSpanUtils.default.getTimeSpan(startRawArray, endRawArray));
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$state4 = this.state,
            showPicker = _this$state4.showPicker,
            startRawArray = _this$state4.startRawArray,
            endRawArray = _this$state4.endRawArray,
            isStartTimer = _this$state4.isStartTimer,
            title = _this$state4.title;
        var showRawArray = isStartTimer ? startRawArray : endRawArray;
        return _react.default.createElement(_reactNative.View, {
          testID: "nightLightTimerPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('nightLightTimerPage'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: this.getPageData()
        }), _react.default.createElement(_MHDatePicker.default, {
          visible: showPicker || false,
          title: title,
          current: showRawArray,
          type: _LHCommonUI.LHDatePicker.TYPE.TIME24,
          onSelect: function onSelect(res) {
            return _this3.refreshData(res);
          },
          onDismiss: function onDismiss() {
            _this3.setState({
              showPicker: false
            });
          }
        }));
      }
    }]);
    return LHNightLightTimerPage;
  }(_react.default.Component);

  exports.default = LHNightLightTimerPage;

  LHNightLightTimerPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_timer,
        style: {
          backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
          borderBottomWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
          borderBottomColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
        },
        leftButtons: [{
          source: _LHCommonUI.LHCommonIcon.common.navigation_close,
          press: function press() {
            if (Instance) {
              Instance.goBack();
            }
          }
        }],
        rightButtons: [{
          source: _LHCommonUI.LHCommonIcon.common.navigation_confirm,
          press: function press() {
            if (Instance) {
              Instance.saveData();
            }

            navigation.goBack();
          }
        }]
      }))
    };
  };
},11327,[14305,14320,14323,14371,14377,14374,14386,10297,10033,10178,10004,10157,10716,11249,11183,11234]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[10]);

  var _redux = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _GetHubSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHDeviceProfile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var LHGatewayLanguage = function (_React$Component) {
    (0, _inherits2.default)(LHGatewayLanguage, _React$Component);

    function LHGatewayLanguage(params) {
      var _this;

      (0, _classCallCheck2.default)(this, LHGatewayLanguage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHGatewayLanguage).call(this, params));
      _this.state = {
        langCopy: null
      };
      return _this;
    }

    (0, _createClass2.default)(LHGatewayLanguage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this$props = this.props,
            GetGatewayLanguage = _this$props.GetGatewayLanguage,
            GetGatewayLanguageCache = _this$props.GetGatewayLanguageCache;
        GetGatewayLanguageCache();
        GetGatewayLanguage();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var SetGatewayLanguage = this.props.SetGatewayLanguage;
        var GetHubSettingsReducers = this.props.GetHubSettingsReducers;
        var gateway_lang = GetHubSettingsReducers.hubSettingData.gateway_lang;
        var langCopy = this.state.langCopy;

        var langList = _LHDeviceProfile.default.getLanguageModels(langCopy || gateway_lang);

        var content = langList.map(function (item) {
          var key = item.key,
              isCurrent = item.isCurrent,
              title = item.title;
          var active = isCurrent;
          return {
            title: title,
            active: active,
            bottomSeparatorLine: true,
            hideTopSeparatorLine: true,
            hideRightArrow: true,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            titleStyle: active ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            press: function press() {
              _this2.setState({
                langCopy: key
              });

              SetGatewayLanguage(key).catch(function () {
                _this2.setState({
                  langCopy: null
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          };
        });
        var data = [{
          data: content
        }];
        return data;
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "gatewayLanguage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('gatewayLanguage'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }));
      }
    }]);
    return LHGatewayLanguage;
  }(_react.default.Component);

  LHGatewayLanguage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_language,
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubSettingsReducers: state.GetHubSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHGatewayLanguage));

  exports.default = _default;
},11330,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10184,10214,11234,11183,11288,10730,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[10]);

  var _redux = _$$_REQUIRE(_dependencyMap[11]);

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHGatewayLogHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _GetHubProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var LHLogPage = function (_React$Component) {
    (0, _inherits2.default)(LHLogPage, _React$Component);

    function LHLogPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHLogPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLogPage).call(this, props, context));
      _this.state = {};
      return _this;
    }

    (0, _createClass2.default)(LHLogPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "getLogContent",
      value: function getLogContent(data) {
        var value = data.value && JSON.parse(data.value)[0];
        var GetHubPropsReducers = this.props.GetHubPropsReducers;
        return {
          context: _LHGatewayLogHandler.default.lumiGatewayAlarmLog(JSON.parse(value), GetHubPropsReducers ? GetHubPropsReducers.subDeviceList : null),
          logType: 'normal'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react.default.createElement(_reactNative.View, {
          testID: "alarmLog",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('alarmLog'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardLog, {
          loadCache: true,
          extraParam: {
            key: 'device_log',
            type: 'prop',
            limit: 20
          },
          dataMap: function dataMap(data) {
            return _this2.getLogContent(data);
          }
        }));
      }
    }]);
    return LHLogPage;
  }(_react.default.Component);

  LHLogPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_guard_arming_log,
        style: _LHCommonStyle.default.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetHubPropsReducers: state.GetHubPropsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GetHubProps.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHLogPage));

  exports.default = _default;
},11333,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10184,10214,11234,11183,11282,11279]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[11]);

  var _redux = _$$_REQUIRE(_dependencyMap[12]);

  var _GuardSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHTextUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var times = [0, 5, 15, 30, 60];
  var that;

  var LHDelayEffectivePage = function (_React$Component) {
    (0, _inherits2.default)(LHDelayEffectivePage, _React$Component);

    function LHDelayEffectivePage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHDelayEffectivePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHDelayEffectivePage).call(this, props));

      _this.saveArmWaitTime = function () {
        var waitTime = _this.state.waitTime;
        var _this$props = _this.props,
            navigation = _this$props.navigation,
            SetArmWaitTime = _this$props.SetArmWaitTime;

        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
        });

        SetArmWaitTime(waitTime).then(function () {
          setTimeout(function () {
            _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

            navigation.goBack();
          }, 500);
        }).catch(function () {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_guard_save_fail);
        });
      };

      that = (0, _assertThisInitialized2.default)(_this);
      _this.state = {
        waitTime: -1,
        visible: false
      };
      return _this;
    }

    (0, _createClass2.default)(LHDelayEffectivePage, [{
      key: "getPageItem",
      value: function getPageItem(time) {
        var _this2 = this;

        var waitTime = this.state.waitTime;
        var _this$props2 = this.props,
            navigation = _this$props2.navigation,
            GetGuardSettingsReducers = _this$props2.GetGuardSettingsReducers;
        var armWaitTime = GetGuardSettingsReducers.armWaitTime;

        var title = _LHTextUtils.default.armWaitTimeText(time);

        var active = (waitTime < 0 ? armWaitTime : waitTime) === time;
        return {
          title: title,
          hideRightArrow: true,
          titleStyle: {
            color: active ? _PluginConfig.default.HubMainColor : _LHCommonFunction.LHUiUtils.MiJiaTitleColor
          },
          activeTitleStyle: {
            color: _PluginConfig.default.HubMainColor
          },
          activeIconStyle: {
            tintColor: _PluginConfig.default.HubMainColor
          },
          hideTopSeparatorLine: time === 0,
          active: active,
          press: function press() {
            if (!active) {
              _this2.setState({
                waitTime: time
              }, function () {
                navigation.setParams({
                  isModify: _this2.isModify()
                });
              });
            }
          }
        };
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this3 = this;

        var data = [];
        times.forEach(function (element) {
          data.push(_this3.getPageItem(element));
        });
        return [{
          data: data
        }];
      }
    }, {
      key: "saveOrGoBack",
      value: function saveOrGoBack(isSave) {
        if (this.isModify()) {
          if (isSave) {
            this.saveArmWaitTime();
          } else {
            this.setState({
              visible: true
            });
          }
        } else if (!isSave) {
          var navigation = this.props.navigation;
          navigation.goBack();
        }
      }
    }, {
      key: "isModify",
      value: function isModify() {
        var waitTime = this.state.waitTime;
        var GetGuardSettingsReducers = this.props.GetGuardSettingsReducers;
        var armWaitTime = GetGuardSettingsReducers.armWaitTime;
        return armWaitTime !== waitTime && waitTime >= 0;
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var visible = this.state.visible;
        var navigation = this.props.navigation;
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "delayEffective",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('delayEffective'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHMessageDialog, {
          visible: visible,
          title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
          message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
          messageStyle: {
            alignSelf: 'center'
          },
          buttons: [{
            text: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            callback: function callback() {
              _this4.setState({
                visible: false
              });
            },
            style: {
              color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor
            }
          }, {
            text: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            callback: function callback() {
              _this4.setState({
                visible: false
              });

              navigation.goBack();
            },
            style: {
              color: _PluginConfig.default.HubMainColor
            }
          }]
        }), _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }));
      }
    }]);
    return LHDelayEffectivePage;
  }(_react.default.Component);

  LHDelayEffectivePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var state = navigation.state;
    var params = state.params === undefined ? {} : state.params;
    var isModify = params.isModify === undefined ? false : params.isModify;
    var leftButton = {
      type: 'deafultCloseBtn',
      press: function press() {
        that.saveOrGoBack(false);
      }
    };
    var rightButton = {
      type: 'deafultCompleteBtn',
      disable: !isModify,
      press: function press() {
        that.saveOrGoBack(true);
      }
    };
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_guard_guardian_countdown,
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        leftButtons: [leftButton],
        rightButtons: [rightButton]
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetGuardSettingsReducers: state.GetGuardSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GuardSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHDelayEffectivePage));

  exports.default = _default;
},11336,[14305,14320,14323,14371,14377,14374,14386,10297,10033,10004,10178,10184,10214,11318,11321,11183,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _reactRedux = _$$_REQUIRE(_dependencyMap[11]);

  var _redux = _$$_REQUIRE(_dependencyMap[12]);

  var _GuardSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHTextUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var LHAlarmTonePage = function (_Component) {
    (0, _inherits2.default)(LHAlarmTonePage, _Component);

    function LHAlarmTonePage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHAlarmTonePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHAlarmTonePage).call(this, props));
      _this.state = {
        lastSelectedIndex: -1
      };
      return _this;
    }

    (0, _createClass2.default)(LHAlarmTonePage, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _LHDoorBellHandler.default.setSoundPlaying(false);
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var lastSelectedIndex = this.state.lastSelectedIndex;
        var _this$props = this.props,
            GetGuardSettingsReducers = _this$props.GetGuardSettingsReducers,
            SetArmRing = _this$props.SetArmRing;
        var armRingIndex = GetGuardSettingsReducers.armRingIndex,
            armRingList = GetGuardSettingsReducers.armRingList,
            armVolume = GetGuardSettingsReducers.armVolume;
        var data = [];
        var selectedIndex = lastSelectedIndex >= 0 ? lastSelectedIndex : parseInt(armRingIndex, 10);

        if (armRingList && armRingList.length) {
          armRingList.forEach(function (element) {
            var index = element.index;
            data.push({
              title: _LHTextUtils.default.armSoundName(0, index),
              hideRightArrow: true,
              titleStyle: {
                color: selectedIndex === index ? _PluginConfig.default.HubMainColor : _LHCommonFunction.LHUiUtils.MiJiaTitleColor
              },
              activeIconStyle: {
                tintColor: _PluginConfig.default.HubMainColor
              },
              active: selectedIndex === index,
              hideTopSeparatorLine: index === 0,
              press: function press() {
                _this2.setState({
                  lastSelectedIndex: index
                });

                SetArmRing(index).then(function () {
                  _this2.setState({
                    lastSelectedIndex: -1
                  });

                  _LHDoorBellHandler.default.playDoorbellMusic(index, armVolume);
                }).catch(function () {
                  _this2.setState({
                    lastSelectedIndex: -1
                  });

                  _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_setting_failed);
                });
              }
            });
          });
        }

        return [{
          data: data
        }];
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "alarmTone",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('alarmTone'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }));
      }
    }]);
    return LHAlarmTonePage;
  }(_react.Component);

  LHAlarmTonePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_arming_ring,
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetGuardSettingsReducers: state.GetGuardSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GuardSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHAlarmTonePage));

  exports.default = _default;
},11339,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10184,10214,11318,11321,11183,11291,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHGatewayIFTTTStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCacheUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var LHGatewayIFTTTPage = function (_React$Component) {
    (0, _inherits2.default)(LHGatewayIFTTTPage, _React$Component);

    function LHGatewayIFTTTPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHGatewayIFTTTPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHGatewayIFTTTPage).call(this, props, context));

      _this.checkSubDeviceStatus = function () {
        var navigation = _this.props.navigation;
        var isMainPage = navigation.getParam('isMainPage');

        _LHCommonFunction.LHIFTTTManager.getLinuxGatewayIFTTTDeviceList(_miot.Device.deviceID, _LHCommonFunction.LHGuardTypeMode.getNormalGuardType(), function (data) {
          var shouldCloseGuard = true;

          for (var i = 0, len = data.length; i < len; i += 1) {
            var device = data[i];

            if (device.isAddedInLinuxGateway) {
              shouldCloseGuard = false;
              break;
            }
          }

          if (isMainPage && !shouldCloseGuard) {
            _reactNative.DeviceEventEmitter.emit('GuardAramingStatus', 'on');
          }

          if (_LHCacheUtils.default.defaultCache.guardStatus === 'on' && shouldCloseGuard) {
            _reactNative.DeviceEventEmitter.emit('GuardAramingStatus', 'off');
          }
        });
      };

      var _navigation = _this.props.navigation;

      var oldDeviceList = _navigation.getParam('deviceList');

      if (oldDeviceList === null || oldDeviceList === undefined) {
        oldDeviceList = [];
      }

      _this.isControling = false;
      _this.state = {
        devicesList: oldDeviceList
      };
      return _this;
    }

    (0, _createClass2.default)(LHGatewayIFTTTPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        var devicesList = this.state.devicesList;

        if (devicesList.length === 0) {
          setTimeout(function () {
            _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
              title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
            });

            _this2.getIFTTTData();
          }, 400);
        } else {
          this.getIFTTTData();
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var navigation = this.props.navigation;
        var pageType = navigation.getParam('pageType');

        if (pageType === _LHCommonFunction.LHGuardTypeMode.getNormalGuardType()) {
          this.checkSubDeviceStatus();
        }
      }
    }, {
      key: "getIFTTTData",
      value: function getIFTTTData() {
        var _this3 = this;

        var navigation = this.props.navigation;
        var pageType = navigation.getParam('pageType');
        var callBack = navigation.getParam('callBack');

        _LHCommonFunction.LHIFTTTManager.getLinuxGatewayIFTTTDeviceList(_miot.Device.deviceID, pageType, function (data) {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          _this3.setState({
            devicesList: data
          });

          _this3.isControling = false;
          console.log('LHGatewayIFTTTPage getIFTTTData', data);
          if (typeof callBack === 'function') callBack(data);
        });
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(title, image) {
        return {
          title: title,
          titleNumberOfLines: 1,
          iconSource: image,
          leftIconStyle: {
            width: _LHCommonFunction.LHUiUtils.GetPx(18),
            height: _LHCommonFunction.LHUiUtils.GetPx(18)
          },
          marginLeft: _LHCommonFunction.LHUiUtils.GetPx(12),
          hideRightArrow: true,
          hideTopSeparatorLine: false,
          rowContainerStyle: {
            height: _LHCommonFunction.LHUiUtils.GetPx(39)
          },
          textContainer: {
            alignSelf: 'center'
          }
        };
      }
    }, {
      key: "getSectionHeaderView",
      value: function getSectionHeaderView(title, imageSource) {
        var showtopLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var topLine = showtopLine ? _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: [{
            alignSelf: 'flex-end'
          }]
        }) : null;
        return _react.default.createElement(_reactNative.View, null, topLine, _react.default.createElement(_reactNative.View, {
          style: _LHGatewayIFTTTStyle.default.sectionHeaderViewStyle
        }, _react.default.createElement(_reactNative.Image, {
          style: _LHGatewayIFTTTStyle.default.sectionHeaderImageStyle,
          source: imageSource,
          resizeMode: "contain"
        }), _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHGatewayIFTTTStyle.default.sectionHeaderTextStyle
        }, title)));
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this4 = this;

        var sectionTriggle = this.getTriggleData();
        var sectionAction = this.getActionData();
        return [{
          sectionHeader: function sectionHeader() {
            return _this4.getSectionHeaderView(_LHLocalizableString.default.mi_linuxHub_scene_launch, _Resources.default.GuardSetting.ifImage);
          },
          data: sectionTriggle
        }, {
          sectionHeader: function sectionHeader() {
            return _this4.getSectionHeaderView(_LHLocalizableString.default.mi_linuxHub_scene_action, _Resources.default.GuardSetting.thenImage, true);
          },
          data: sectionAction
        }];
      }
    }, {
      key: "getTriggleData",
      value: function getTriggleData() {
        var _this5 = this;

        var devicesList = this.state.devicesList;
        var navigation = this.props.navigation;
        var pageType = navigation.getParam('pageType');
        var data = [];
        var callBack = navigation.getParam('callBack');

        if (pageType === _LHCommonFunction.LHGuardTypeMode.getCloseAlarmClockType()) {
          data.push({
            title: _miot.Device.name,
            description: _LHLocalizableString.default.mi_linuxHub_lazy_clock_gateway_choose,
            hideRightArrow: true,
            hideTopSeparatorLine: false,
            hasSwitch: true,
            switchColor: _PluginConfig.default.HubMainColor,
            switchValue: true,
            rowContainerStyle: {
              minHeight: _LHCommonFunction.LHUiUtils.GetPx(60)
            },
            switchDisabled: true,
            textContainer: {
              alignSelf: 'center'
            }
          });
        }

        var _loop = function _loop(i, len) {
          var device = devicesList[i];
          data.push({
            title: device.title,
            description: device.subTitle,
            hideRightArrow: true,
            hideTopSeparatorLine: false,
            hasSwitch: true,
            switchColor: _PluginConfig.default.HubMainColor,
            switchValue: device.isAddedInLinuxGateway,
            useControlledSwitch: true,
            rowContainerStyle: {
              minHeight: _LHCommonFunction.LHUiUtils.GetPx(60)
            },
            textContainer: {
              alignSelf: 'center'
            },
            onSwitchChange: function onSwitchChange() {
              if (_this5.isControling === true) {
                return;
              }

              var newDevicesList = _this5.state.devicesList;
              var device = newDevicesList[i];

              if (device.isAddedInLinuxGateway === true) {
                if (!_miot.Device.isOnline) {
                  _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_device_offline);

                  return;
                }

                if (_this5.isControling === true) {
                  return;
                }

                _this5.isControling = true;
                device.isAddedInLinuxGateway = false;

                _this5.forceUpdate();

                _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
                  title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
                });

                _LHCommonFunction.LHIFTTTManager.getReadyToDeleteSceneIDList(pageType, device.did, function (sceneIDList) {
                  if (sceneIDList.length === 0) {
                    console.log('没有数据要删除');

                    _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                    _this5.isControling = false;
                    if (typeof callBack === 'function') callBack(newDevicesList);
                    return;
                  }

                  console.log('准备开始删除');

                  _LHCommonFunction.LHIFTTTManager.deleteScenes(sceneIDList, function (res) {
                    console.log('删除成功：' + res);

                    _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                    _this5.isControling = false;
                    if (typeof callBack === 'function') callBack(newDevicesList);
                  }, function (err) {
                    console.log('删除失败：' + err.message);
                    device.isAddedInLinuxGateway = true;

                    _this5.forceUpdate();

                    _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                    _this5.isControling = false;

                    _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
                  });
                }, function (getSceneIdListErr) {
                  console.log('获取自动化列表失败：' + getSceneIdListErr.message);
                  device.isAddedInLinuxGateway = true;

                  _this5.forceUpdate();

                  _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                  _this5.isControling = false;

                  _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
                });
              } else {
                if (!device.isOnline || !_miot.Device.isOnline) {
                  setTimeout(function () {
                    _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_device_offline);
                  }, 50);
                  return;
                }

                if (_this5.isControling === true) {
                  return;
                }

                _this5.isControling = true;
                device.isAddedInLinuxGateway = true;

                _this5.forceUpdate();

                console.log('准备开始创建');

                _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
                  title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
                });

                _LHCommonFunction.LHIFTTTManager.saveSceneRecord(_miot.Device.deviceID, device, pageType, function (res) {
                  console.log('创建成功' + res);

                  _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                  _this5.getIFTTTData();

                  _this5.isControling = false;
                }, function (err) {
                  console.log('创建失败：' + err.message);

                  if (err.message.indexOf('13') !== -1) {
                    _this5.getIFTTTData();
                  }

                  device.isAddedInLinuxGateway = false;

                  _this5.forceUpdate();

                  _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

                  _this5.isControling = false;

                  _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
                });
              }
            }
          });
        };

        for (var i = 0, len = devicesList.length; i < len; i += 1) {
          _loop(i, len);
        }

        return data;
      }
    }, {
      key: "getActionData",
      value: function getActionData() {
        var navigation = this.props.navigation;
        var pageType = navigation.getParam('pageType');

        if (pageType === _LHCommonFunction.LHGuardTypeMode.getNormalGuardType()) {
          return [{
            title: _LHLocalizableString.default.mi_linuxHub_alarm,
            description: _miot.Device.name + '（' + _LHLocalizableString.default.mi_linuxHub_must_choose + '）',
            hideRightArrow: true,
            hideTopSeparatorLine: false,
            rowContainerStyle: {
              minHeight: _LHCommonFunction.LHUiUtils.GetPx(60)
            },
            textContainer: {
              alignSelf: 'center'
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_send_phone_msg,
            hideRightArrow: true,
            hideTopSeparatorLine: false,
            rowContainerStyle: {
              minHeight: _LHCommonFunction.LHUiUtils.GetPx(50)
            },
            textContainer: {
              alignSelf: 'center'
            }
          }];
        } else if (pageType === _LHCommonFunction.LHGuardTypeMode.getDoorbellType()) {
          return [{
            testID: 'doorbellPage',
            accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('doorbellPage'),
            title: _LHLocalizableString.default.mi_linuxHub_ring_the_bell,
            description: _miot.Device.name,
            hideRightArrow: false,
            hideTopSeparatorLine: false,
            rowContainerStyle: {
              minHeight: _LHCommonFunction.LHUiUtils.GetPx(60)
            },
            textContainer: {
              alignSelf: 'center'
            },
            press: function press() {
              navigation.navigate('LHDoorBellPage');
            }
          }];
        } else if (pageType === _LHCommonFunction.LHGuardTypeMode.getCloseAlarmClockType()) {
          return [{
            title: _LHLocalizableString.default.mi_linuxHub_lazy_clock_close,
            description: _miot.Device.name,
            hideRightArrow: true,
            hideTopSeparatorLine: false,
            rowContainerStyle: {
              minHeight: _LHCommonFunction.LHUiUtils.GetPx(60)
            },
            textContainer: {
              alignSelf: 'center'
            }
          }];
        } else {
          return [];
        }
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "gatewayIFTTT",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('gatewayIFTTT'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData,
          contentContainerStyle: {
            paddingBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
          },
          ListEmptyComponent: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, {
            style: _LHCommonUI.LHCommonStyles.emptyImg,
            source: _LHCommonUI.LHCommonIcon.common.emptyImage.normal
          }))
        }));
      }
    }]);
    return LHGatewayIFTTTPage;
  }(_react.default.Component);

  LHGatewayIFTTTPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var title = '';
    var pageType = navigation.getParam('pageType');

    if (pageType === _LHCommonFunction.LHGuardTypeMode.getNormalGuardType()) {
      title = _LHLocalizableString.default.mi_linuxHub_guard_trigger_alarm_device;
    } else if (pageType === _LHCommonFunction.LHGuardTypeMode.getDoorbellType()) {
      title = _LHLocalizableString.default.mi_linuxHub_setting_doorbell;
    } else if (pageType === _LHCommonFunction.LHGuardTypeMode.getCloseAlarmClockType()) {
      title = _LHLocalizableString.default.mi_linuxHub_lazy_clock_close_way;
    }

    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: title,
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHGatewayIFTTTPage);

  exports.default = _default;
},11342,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,10074,10757,11312,11183,11249,11252]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var LHLazyAlarmClockPage = function (_React$Component) {
    (0, _inherits2.default)(LHLazyAlarmClockPage, _React$Component);

    function LHLazyAlarmClockPage(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHLazyAlarmClockPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLazyAlarmClockPage).call(this, props, context));
      _this.closeClockDeviceList = [];
      return _this;
    }

    (0, _createClass2.default)(LHLazyAlarmClockPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.getCloseClockDeviceList();
      }
    }, {
      key: "getCloseClockDeviceList",
      value: function getCloseClockDeviceList() {
        var _this2 = this;

        _LHCommonFunction.LHIFTTTManager.getLinuxGatewayIFTTTDeviceList(_miot.Device.deviceID, _LHCommonFunction.LHGuardTypeMode.getCloseAlarmClockType(), function (data) {
          _this2.closeClockDeviceList = data;

          _this2.forceUpdate();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var navigation = this.props.navigation;
        var addedCount = 0;

        for (var i = 0, len = this.closeClockDeviceList.length; i < len; i += 1) {
          if (this.closeClockDeviceList[i].isAddedInLinuxGateway === true) {
            addedCount += 1;
          }
        }

        var closeClockMethodItemTitle = addedCount === 0 ? _LHLocalizableString.default.mi_linuxHub_guard_go_config : addedCount + _LHLocalizableString.default.mi_linuxHub_numbers;
        var items = [{
          data: [{
            title: _LHLocalizableString.default.mi_linuxHub_lazy_clock_list,
            testID: 'lazyClockTimerList',
            press: function press() {
              navigation.navigate('LHLazyClockTimerListPage');
            }
          }, {
            testID: 'closeClockWay',
            title: _LHLocalizableString.default.mi_linuxHub_lazy_clock_close_way,
            rightDescription: closeClockMethodItemTitle,
            press: function press() {
              navigation.navigate('LHGatewayIFTTTPage', {
                pageType: _LHCommonFunction.LHGuardTypeMode.getCloseAlarmClockType(),
                deviceList: _this3.closeClockDeviceList,
                callBack: function callBack(newDeviceList) {
                  _this3.closeClockDeviceList = newDeviceList;

                  _this3.forceUpdate();
                }
              });
            }
          }]
        }];
        return _react.default.createElement(_reactNative.View, {
          testID: "lazyAlarmClock",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('lazyAlarmClock'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardListSwipeout, {
          data: items
        }));
      }
    }]);
    return LHLazyAlarmClockPage;
  }(_react.default.Component);

  exports.default = LHLazyAlarmClockPage;

  LHLazyAlarmClockPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_alarmclock,
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };
},11345,[14305,14320,14323,14371,14377,14386,10297,10033,10178,10004,10074,11183,11234]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHTimerIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHIFTTTConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHTimeLightListPageStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _LHJsonUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var LHLazyClockTimerListPage = function (_React$Component) {
    (0, _inherits2.default)(LHLazyClockTimerListPage, _React$Component);

    function LHLazyClockTimerListPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHLazyClockTimerListPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLazyClockTimerListPage).call(this, props));

      _this.getPageData = function () {
        var sceneList = _this.state.sceneList;
        var data = [];

        if (sceneList.length === 0) {
          return data;
        }

        var deleteComponent = _react.default.createElement(_reactNative.View, {
          style: _LHCommonStyle.default.deleteComponent
        }, _react.default.createElement(_reactNative.Image, {
          style: _LHCommonStyle.default.swipeoutImage,
          source: _LHCommonUI.LHCommonIcon.common.delete.white
        }), _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHCommonStyle.default.swipeoutText
        }, _LHCommonFunction.LHCommonLocalizableString.common_button_delete));

        sceneList.forEach(function (scene) {
          var setting = scene.setting;

          if (!setting) {
            return;
          }

          var fromTime = setting.on_time,
              toTime = setting.off_time,
              fromEnable = setting.enable_timer_on,
              toEnable = setting.enable_timer_off,
              onFilter = setting.on_filter;

          if (!fromTime) {
            return;
          }

          var result = _LHCommonFunction.LHTimeSpanUtils.getSceneTimerSpan(fromTime, toTime, fromEnable, toEnable);

          var timeSpan = result.timeSpan,
              fromDate = result.fromDate;

          var timeTitle = _LHCommonFunction.LHTimeSpanUtils.gettimerArrayStr(timeSpan)[0];

          var subTitle;

          if (timeSpan.wday.length === 0) {
            timeTitle = _LHTimerIFTTTManager.default.timerPrefixString(fromDate.getDate(), fromDate.getMonth()) + timeTitle;
            subTitle = _LHTimerIFTTTManager.default.getPeriodStr(timeSpan, onFilter) + ' | ' + _LHCommonFunction.LHDateUtils.DateFormat(_LHCommonFunction.LHDateUtils.GetDateFormatter(true), fromDate.getTime() / 1000) + ' ' + _LHLocalizableString.default.mi_linuxHub_setting_nightlight_on;
          } else {
            subTitle = _LHTimerIFTTTManager.default.getPeriodStr(timeSpan, onFilter);
          }

          data.push({
            title: timeTitle,
            description: subTitle,
            hasSwitch: true,
            hideTopSeparatorLine: scene.sceneID === sceneList[0].sceneID,
            hideRightArrow: true,
            switchValue: scene.enable === '1',
            switchColor: _PluginConfig.default.HubMainColor,
            useControlledSwitch: true,
            swipeoutClose: true,
            onSwitchChange: function onSwitchChange(switchEnable) {
              scene.enable = switchEnable ? '1' : '0';

              _this.forceUpdate();

              _LHTimerIFTTTManager.default.enableTimerScene(switchEnable, scene, function (res) {
                var index = sceneList.indexOf(res);

                if (index > -1) {
                  sceneList[index] = res;
                }

                _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LazyLockCacheKey, JSON.stringify(_LHJsonUtils.default.parseJson(sceneList)));

                _this.forceUpdate();
              }, function () {
                setTimeout(function () {
                  scene.enable = switchEnable ? '0' : '1';

                  _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LazyLockCacheKey, JSON.stringify(_LHJsonUtils.default.parseJson(sceneList)));

                  _this.forceUpdate();
                }, 300);

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            },
            swipeoutBtns: [{
              component: deleteComponent,
              press: function press() {
                _LHCommonFunction.LHDialogUtils.MessageDialogShow({
                  message: _LHLocalizableString.default.mi_linuxHub_lazy_clock_delete,
                  messageStyle: {
                    textAlign: 'center'
                  },
                  confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
                  cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
                  confirmStyle: {
                    color: _PluginConfig.default.HubMainColor
                  },
                  onConfirm: function onConfirm() {
                    _this.removeLazyTimer(scene);
                  }
                });
              }
            }],
            press: function press() {
              var navigation = _this.props.navigation;
              var isMustModify = false;

              if (timeSpan.wday.length === 0) {
                if (_LHCommonFunction.LHDateUtils.isBefore(fromDate)) {
                  isMustModify = true;
                }
              }

              navigation.navigate('LHLazyClockTimerAddPage', {
                scene: scene,
                isAdd: false,
                isMustModify: isMustModify,
                update: function update() {
                  _this.loadTimerScenes();
                }
              });
            },
            longPress: function longPress() {
              _LHCommonFunction.LHDialogUtils.MessageDialogShow({
                message: _LHLocalizableString.default.mi_linuxHub_sure_delete,
                messageStyle: {
                  textAlign: 'center'
                },
                confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
                cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
                confirmStyle: {
                  color: _PluginConfig.default.HubMainColor
                },
                onConfirm: function onConfirm() {
                  _this.removeLazyTimer(scene);
                }
              });
            }
          });
        });
        return [{
          data: data
        }];
      };

      _this.removeLazyTimer = function (scene) {
        var sceneList = _this.state.sceneList;

        _LHTimerIFTTTManager.default.removeTimerScene(scene, function () {
          var deleteIndex = -1;

          for (var index = 0; index < sceneList.length; index += 1) {
            if (sceneList[index].sceneID === scene.sceneID) {
              deleteIndex = index;
            }
          }

          sceneList.splice(deleteIndex, 1);

          _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LazyLockCacheKey, JSON.stringify(_LHJsonUtils.default.parseJson(sceneList)));

          _this.setState({
            sceneList: sceneList
          });
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      };

      _this.state = {
        sceneList: []
      };
      return _this;
    }

    (0, _createClass2.default)(LHLazyClockTimerListPage, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.loadTimerScenes();
      }
    }, {
      key: "loadTimerScenes",
      value: function loadTimerScenes() {
        var _this2 = this;

        _LHCommonFunction.LHMiServer.GetHostStorage(_LHIFTTTConfig.default.LazyLockCacheKey).then(function (res) {
          if (res) {
            var sceneArr = JSON.parse(res);

            for (var i = 0; i < sceneArr.length; i += 1) {
              sceneArr[i] = (0, _extends2.default)(sceneArr[i], {
                enable: sceneArr[i].setting.enable_timer
              });
            }

            _this2.setState({
              sceneList: sceneArr
            });
          }
        });

        _LHCommonFunction.LHMiServer.LoadSceneList(_miot.Device.deviceID, _miot.SceneType.Timer, {
          identify: _LHIFTTTConfig.default.LazyClockTimerIdentify
        }, function (sceneArr) {
          if (sceneArr || sceneArr.length > 0) {
            _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LazyLockCacheKey, JSON.stringify(_LHJsonUtils.default.parseJson(sceneArr)));

            for (var i = 0; i < sceneArr.length; i += 1) {
              sceneArr[i] = (0, _extends2.default)(sceneArr[i], {
                enable: sceneArr[i].setting.enable_timer
              });
            }

            _this2.setState({
              sceneList: sceneArr
            });
          }
        }, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var navigation = this.props.navigation;
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "lazyClockTimerList",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('lazyClockTimerList'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardListSwipeout, {
          data: pageData,
          ListEmptyComponent: _react.default.createElement(_LHCommonUI.LHStandardEmpty, {
            emptyIconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(138),
              height: _LHCommonFunction.LHUiUtils.GetPx(138),
              marginTop: _LHCommonFunction.LHUiUtils.GetPx(146)
            },
            emptyPageStyle: {
              backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
            },
            emptyTextStyle: {
              marginTop: _LHCommonFunction.LHUiUtils.GetPx(-3)
            },
            emptyIcon: _Resources.default.TimeLight.placeholder_timing,
            text: _LHLocalizableString.default.mi_linuxHub_lazy_clock_list_empty
          }),
          ListFooterComponent: _react.default.createElement(_reactNative.View, {
            style: {
              height: pageData.length !== 0 ? _LHCommonFunction.LHUiUtils.GetPx(108) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight : 0,
              backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
            }
          })
        }), _react.default.createElement(_reactNative.View, {
          style: {
            marginTop: _LHCommonFunction.LHUiUtils.GetPx(0)
          }
        }, _react.default.createElement(_reactNative.TouchableOpacity, {
          testID: "addLazyAlarm",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('addLazyAlarm'),
          style: _LHTimeLightListPageStyle.default.addButtom,
          onPress: function onPress() {
            navigation.navigate('LHLazyClockTimerAddPage', {
              scene: _LHTimerIFTTTManager.default.buildLazyClockTimerScene(),
              isAdd: true,
              isMustModify: false,
              update: function update() {
                _this3.loadTimerScenes();
              }
            });
          }
        }, _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, {
          style: {
            width: _LHCommonFunction.LHUiUtils.GetPx(66),
            height: _LHCommonFunction.LHUiUtils.GetPx(66)
          },
          source: _Resources.default.TimeLight.timeLightAdd
        })))));
      }
    }]);
    return LHLazyClockTimerListPage;
  }(_react.default.Component);

  exports.default = LHLazyClockTimerListPage;

  LHLazyClockTimerListPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_alarmclock,
        style: [_LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };
},11348,[14305,14344,14320,14323,14371,14377,14386,10297,10033,10178,10004,10074,10757,11249,11183,11351,11276,11354,11234,11357]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _Service = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[5]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[6]);

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _LHIFTTTConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var LHNightLightSceneManager = function () {
    function LHNightLightSceneManager() {
      (0, _classCallCheck2.default)(this, LHNightLightSceneManager);
    }

    (0, _createClass2.default)(LHNightLightSceneManager, null, [{
      key: "enableTimerScene",
      value: function enableTimerScene(enable, timerScene, onSuccess, onFail) {
        var identify = timerScene.identify,
            name = timerScene.name,
            setting = timerScene.setting;
        var onTime = setting.on_time,
            offTime = setting.off_time,
            fromEnable = setting.enable_timer_on,
            toEnable = setting.enable_timer_off;

        var localTimer = _LHCommonFunction.LHTimeSpanUtils.getSceneTimerSpan(onTime, offTime, fromEnable, toEnable);

        var timeSpan = localTimer.timeSpan,
            fromDate = localTimer.fromDate,
            toDate = localTimer.toDate;

        var _LHTimeSpanUtils$getT = _LHCommonFunction.LHTimeSpanUtils.getTimeSlotToCloud(timeSpan, fromEnable, toEnable),
            fromTime = _LHTimeSpanUtils$getT.fromTime,
            toTime = _LHTimeSpanUtils$getT.toTime;

        if (!timeSpan.wday || timeSpan.wday.length === 0) {
          if (!enable) {
            if (fromEnable === '1' && toEnable === '1') {
              if (_LHCommonFunction.LHDateUtils.isBefore(fromDate) && _LHCommonFunction.LHDateUtils.isBefore(toDate)) {
                fromTime = onTime;
              }
            } else if (fromEnable === '0' && toEnable === '1' && _LHCommonFunction.LHDateUtils.isBefore(toDate)) {
              toTime = offTime;
            } else if (fromEnable === '1' && toEnable === '0' && _LHCommonFunction.LHDateUtils.isBefore(fromDate)) {
              fromTime = onTime;
            }
          }
        }

        var scene = _Service.default.scene.createTimerScene(_miot.Device.deviceID, {
          identify: identify,
          name: name,
          setting: setting
        });

        scene = timerScene;

        if (typeof scene.save !== 'undefined') {
          scene.save({
            setting: {
              enable_timer: enable ? '1' : '0',
              enable_timer_off: timerScene.setting.enable_timer_off,
              enable_timer_on: timerScene.setting.enable_timer_on,
              off_method: timerScene.setting.off_method,
              off_param: timerScene.setting.off_param,
              on_method: timerScene.setting.on_method,
              on_param: timerScene.setting.on_param,
              on_time: String(fromTime),
              off_time: String(toTime),
              on_filter: timerScene.setting.on_filter,
              timer_type: timerScene.setting.timer_type
            }
          }).then(function (saveRes) {
            onSuccess(saveRes);
          }).catch(function (error) {
            onFail(error);
          });
        } else {
          onFail('');
        }
      }
    }, {
      key: "editClockTimerScene",
      value: function editClockTimerScene(timerScene, onParams, fromTime, toTime, onSuccess, onFail) {
        var identify = timerScene.identify,
            name = timerScene.name,
            setting = timerScene.setting;

        var scene = _Service.default.scene.createTimerScene(_miot.Device.deviceID, {
          identify: identify,
          name: name,
          setting: setting
        });

        if (timerScene.sceneID && timerScene.sceneID !== 0) {
          scene = timerScene;
        }

        if (typeof scene.save !== 'undefined') {
          scene.save({
            setting: {
              enable_timer: timerScene.setting.enable_timer,
              enable_timer_off: timerScene.setting.enable_timer_off,
              enable_timer_on: timerScene.setting.enable_timer_on,
              off_method: timerScene.setting.off_method,
              off_param: timerScene.setting.off_param,
              on_method: timerScene.setting.on_method,
              on_param: onParams,
              on_time: String(fromTime),
              off_time: String(toTime),
              on_filter: timerScene.setting.on_filter,
              timer_type: timerScene.setting.timer_type
            }
          }).then(function (saveRes) {
            onSuccess(saveRes);
          }).catch(function (error) {
            onFail(error);
          });
        } else {
          onFail('');
        }
      }
    }, {
      key: "editTimerScene",
      value: function editTimerScene(timerScene, onSuccess, onFail) {
        var identify = timerScene.identify,
            name = timerScene.name,
            setting = timerScene.setting;

        var scene = _Service.default.scene.createTimerScene(_miot.Device.deviceID, {
          identify: identify,
          name: name,
          setting: setting
        });

        if (timerScene.sceneID && timerScene.sceneID !== 0) {
          scene = timerScene;
        }

        if (typeof scene.save !== 'undefined') {
          scene.save().then(function (saveRes) {
            onSuccess(saveRes);
          }).catch(function (error) {
            onFail(error);
          });
        } else {
          onFail('');
        }
      }
    }, {
      key: "removeTimerScene",
      value: function removeTimerScene(timerScene, onSuccess, onFail) {
        var identify = timerScene.identify,
            name = timerScene.name,
            setting = timerScene.setting;

        var scene = _Service.default.scene.createTimerScene(_miot.Device.deviceID, {
          identify: identify,
          name: name,
          setting: setting
        });

        scene = timerScene;

        if (typeof scene.remove !== 'undefined') {
          scene.remove().then(function (saveRes) {
            onSuccess(saveRes);
          }).catch(function (error) {
            onFail(error);
          });
        } else {
          onFail('');
        }
      }
    }, {
      key: "buildLazyClockTimer",
      value: function buildLazyClockTimer() {
        var setting = {
          enable_push: '1',
          enable_timer: '1',
          enable_timer_off: '0',
          enable_timer_on: '1',
          off_method: '',
          off_param: '',
          off_time: '0 0 * * 0,1,2,3,4,5,6',
          on_method: 'play_alarm_clock',
          on_param: ['on', '20', 50],
          on_time: '0 0 * * 0,1,2,3,4,5,6'
        };
        return setting;
      }
    }, {
      key: "buildLazyClockTimerScene",
      value: function buildLazyClockTimerScene() {
        var lazyScene = _Service.default.scene.createTimerScene(_miot.Device.deviceID, {
          identify: _LHIFTTTConfig.default.LazyClockTimerIdentify,
          name: _LHLocalizableString.default.mi_linuxHub_lazy_clock_name,
          setting: this.buildLazyClockTimer()
        });

        return lazyScene;
      }
    }, {
      key: "getChoiceDialogData",
      value: function getChoiceDialogData(choiceDialogVisible, timespan, filter) {
        var choiceArray = this.getChoiceArray(choiceDialogVisible, timespan.wday, filter);

        if (choiceDialogVisible === 1) {
          return {
            title: _LHLocalizableString.default.mi_linuxHub_repeat_timer_title,
            type: _Dialog.ChoiceDialog.TYPE.SINGLE,
            selectedIndexArray: choiceArray,
            options: [{
              title: _LHCommonFunction.LHCommonLocalizableString.common_repeat_once
            }, {
              title: _LHCommonFunction.LHCommonLocalizableString.common_repeat_everyday
            }, {
              title: _LHCommonFunction.LHCommonLocalizableString.common_date_selfdefine
            }]
          };
        } else {
          return {
            title: _LHLocalizableString.default.mi_linuxHub_repeat_self_timer_title,
            type: _Dialog.ChoiceDialog.TYPE.MULTIPLE,
            selectedIndexArray: choiceArray,
            options: [{
              title: _LHLocalizableString.default.mi_linuxHub_date_mon
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_date_tues
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_date_wed
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_date_thur
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_date_fri
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_date_sat
            }, {
              title: _LHLocalizableString.default.mi_linuxHub_date_sun
            }]
          };
        }
      }
    }, {
      key: "getRepeatFromPosition",
      value: function getRepeatFromPosition(position) {
        var filter;
        var wday = [];

        switch (position) {
          case 0:
            wday = [];
            break;

          case 1:
            wday = _PluginConfig.default.EVERYDAY;
            break;

          default:
        }

        return {
          wday: wday,
          filter: filter
        };
      }
    }, {
      key: "getChoiceArray",
      value: function getChoiceArray(choiceDialogVisible, wday, filter) {
        console.log('getChoiceArray', choiceDialogVisible);

        if (choiceDialogVisible === 1) {
          if (wday === undefined || wday.length === 0) {
            return [0];
          } else if (this.arrayEquals(wday, _PluginConfig.default.EVERYDAY)) {
            return [1];
          } else {
            return [2];
          }
        } else {
          var wdayList = wday.map(function (value) {
            return value === 0 ? 6 : value - 1;
          });
          return wdayList;
        }
      }
    }, {
      key: "getPeriodStr",
      value: function getPeriodStr(timespan, filter) {
        if (filter) {
          return '';
        }

        var wday = timespan.wday;
        var days = [_LHLocalizableString.default.mi_linuxHub_date_sun, _LHLocalizableString.default.mi_linuxHub_date_mon, _LHLocalizableString.default.mi_linuxHub_date_tues, _LHLocalizableString.default.mi_linuxHub_date_wed, _LHLocalizableString.default.mi_linuxHub_date_thur, _LHLocalizableString.default.mi_linuxHub_date_fri, _LHLocalizableString.default.mi_linuxHub_date_sat];

        if (wday === undefined || wday.length === 0) {
          return _LHCommonFunction.LHCommonLocalizableString.common_repeat_once;
        } else if (this.arrayEquals(wday, _PluginConfig.default.EVERYDAY)) {
          return _LHCommonFunction.LHCommonLocalizableString.common_repeat_everyday;
        } else {
          var wdays = wday.map(function (value) {
            return days[value];
          });
          return wdays.join(' ');
        }
      }
    }, {
      key: "arrayEquals",
      value: function arrayEquals(array1, array2) {
        return JSON.stringify(array1.sort()) === JSON.stringify(array2.sort());
      }
    }, {
      key: "todayComponents",
      value: function todayComponents() {
        return new Date();
      }
    }, {
      key: "tomorrowComonents",
      value: function tomorrowComonents() {
        return new Date(new Date().getTime() + 86400000);
      }
    }, {
      key: "yesterdayComonents",
      value: function yesterdayComonents() {
        return new Date(new Date().getTime() - 86400000);
      }
    }, {
      key: "timerPrefixString",
      value: function timerPrefixString(date, month) {
        var title = '';
        console.log(LHNightLightSceneManager.todayComponents().getDate());
        console.log(LHNightLightSceneManager.todayComponents().getMonth());

        if (LHNightLightSceneManager.todayComponents().getDate() === date && LHNightLightSceneManager.todayComponents().getMonth() === month) {
          title = '';
        }

        if (LHNightLightSceneManager.tomorrowComonents().getDate() === date && LHNightLightSceneManager.tomorrowComonents().getMonth() === month) {
          title = _LHCommonFunction.LHCommonLocalizableString.common_repeat_tomorrow;
        }

        if (LHNightLightSceneManager.yesterdayComonents().getDate() === date && LHNightLightSceneManager.yesterdayComonents().getMonth() === month) {
          title = _LHCommonFunction.LHCommonLocalizableString.common_log_yesterday;
        }

        return title;
      }
    }, {
      key: "isTimePassed",
      value: function isTimePassed(year, month, date, hour, minute, second) {
        var currentDate = new Date();
        var targetDate = new Date();
        targetDate.setFullYear(year);
        targetDate.setMonth(month);
        targetDate.setDate(date);
        targetDate.setHours(hour);
        targetDate.setMinutes(minute);
        targetDate.setSeconds(second);
        return currentDate.getTime() > targetDate;
      }
    }, {
      key: "isTimePassedByTime",
      value: function isTimePassedByTime(time) {
        var currentDate = new Date();
        var targetDate = new Date(time);
        return currentDate.getTime() > targetDate.getTime();
      }
    }, {
      key: "getYear",
      value: function getYear() {
        return new Date().getYear();
      }
    }, {
      key: "isOnTimePass",
      value: function isOnTimePass(onYear, onMonth, onDate, onHour, onMinute, onSecond) {
        var year = onYear;
        var month = onMonth;
        var date = onDate;
        var hour = onHour;
        var minute = onMinute;
        var second = onSecond;

        if (year <= 1900 || year >= 3000) {
          year = LHNightLightSceneManager.getYear();
        }

        if (second < -1 || second >= 60) {
          second = 0;
        }

        return LHNightLightSceneManager.isTimePassed(year, month, date, hour, minute, second);
      }
    }, {
      key: "isOffTimePass",
      value: function isOffTimePass(offYear, offMonth, offDate, offHour, offMinute, offSecond) {
        var year = offYear;
        var month = offMonth;
        var date = offDate;
        var hour = offHour;
        var minute = offMinute;
        var second = offSecond;

        if (year <= 1900 || year >= 3000) {
          year = LHNightLightSceneManager.getYear();
        }

        if (second < -1 || second >= 60) {
          second = 0;
        }

        return LHNightLightSceneManager.isTimePassed(year, month, date, hour, minute, second);
      }
    }, {
      key: "isMomentOfTodayPassed",
      value: function isMomentOfTodayPassed(hour, minute) {
        var todayDate = new Date();

        if (hour < todayDate.getHours() || hour === todayDate.getHours() && minute <= todayDate.getMinutes()) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "isTimeSetToTomorrow",
      value: function isTimeSetToTomorrow(onHour, onMinute) {
        return LHNightLightSceneManager.isMomentOfTodayPassed(onHour, onMinute);
      }
    }, {
      key: "equalsAsTimespan",
      value: function equalsAsTimespan(originTimespan, timespan) {
        console.log('equalsAsTimespan', originTimespan);

        if (originTimespan === undefined && timespan === undefined) {
          return true;
        } else if (originTimespan === undefined && timespan !== undefined) {
          return false;
        } else if (originTimespan !== undefined && timespan === undefined) {
          return false;
        } else {
          var from = originTimespan.from,
              to = originTimespan.to,
              wday = originTimespan.wday;
          var originFrom = timespan.from,
              originTo = timespan.to,
              originWday = timespan.wday;

          if (wday) {
            wday.sort(function (a, b) {
              return a - b;
            });
          }

          if (originWday) {
            originWday.sort(function (a, b) {
              return a - b;
            });
          }

          console.log(originTimespan);

          if (JSON.stringify(from) === JSON.stringify(originFrom) && JSON.stringify(to) === JSON.stringify(originTo) && JSON.stringify(wday) === JSON.stringify(originWday)) {
            return true;
          }

          return false;
        }
      }
    }]);
    return LHNightLightSceneManager;
  }();

  exports.default = LHNightLightSceneManager;
},11351,[14305,14320,14323,10062,10074,10004,10755,11249,11183,11276]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var LHNightLightListPageStyle = _reactNative.StyleSheet.create({
    addButtom: {
      position: 'absolute',
      width: _LHCommonFunction.LHUiUtils.GetPx(66),
      height: _LHCommonFunction.LHUiUtils.GetPx(66),
      right: _LHCommonFunction.LHUiUtils.GetPx(20),
      bottom: _LHCommonFunction.LHUiUtils.GetPx(20) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
    }
  });

  exports.default = LHNightLightListPageStyle;
},11354,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var LHJsonUtils = function () {
    function LHJsonUtils() {
      (0, _classCallCheck2.default)(this, LHJsonUtils);
    }

    (0, _createClass2.default)(LHJsonUtils, null, [{
      key: "equalArray",
      value: function equalArray(a, b) {
        if (a && b && a instanceof Array && b instanceof Array) {
          if (a.length !== b.length) {
            return false;
          } else {
            a.sort();
            b.sort();

            for (var i = 0; i < a.length; i += 1) {
              if (a[i] !== b[i]) {
                return false;
              }
            }

            return true;
          }
        }

        return a === b;
      }
    }, {
      key: "parseJson",
      value: function parseJson(sceneArr) {
        var data = [];

        if (sceneArr && sceneArr.length > 0) {
          sceneArr.forEach(function (scene) {
            var authorizedDeviceIDs = scene.authorizedDeviceIDs,
                createTime = scene.createTime,
                deviceID = scene.deviceID,
                identify = scene.identify,
                isArtificial = scene.isArtificial,
                isAutomatic = scene.isAutomatic,
                isNew = scene.isNew,
                isTimer = scene.isTimer,
                name = scene.name,
                sceneID = scene.sceneID,
                setting = scene.setting,
                status = scene.status,
                type = scene.type;
            var json = {
              authorizedDeviceIDs: authorizedDeviceIDs,
              createTime: createTime,
              deviceID: deviceID,
              identify: identify,
              isArtificial: isArtificial,
              isAutomatic: isAutomatic,
              isNew: isNew,
              isTimer: isTimer,
              name: name,
              sceneID: sceneID,
              setting: setting,
              status: status,
              type: type
            };
            data.push(json);
          });
        }

        return data;
      }
    }]);
    return LHJsonUtils;
  }();

  exports.default = LHJsonUtils;
},11357,[14305,14320,14323]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHNumberModalPicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactRedux = _$$_REQUIRE(_dependencyMap[11]);

  var _redux = _$$_REQUIRE(_dependencyMap[12]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[13]);

  var _GuardSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHTextUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var LHAlarmSettingPage = function (_React$Component) {
    (0, _inherits2.default)(LHAlarmSettingPage, _React$Component);

    function LHAlarmSettingPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHAlarmSettingPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHAlarmSettingPage).call(this, props));

      _this.pickerSelected = function (data) {
        var pickerVisible = _this.state.pickerVisible;

        _this.setTimeLength(pickerVisible, data.newValue);
      };

      _this.dialogSelected = function (index) {
        var dialogVisible = _this.state.dialogVisible;

        var second = _LHTextUtils.default.secondOfindex(dialogVisible, index);

        if (second < 0) {
          _this.setState({
            pickerVisible: dialogVisible
          });

          return;
        }

        _this.setTimeLength(dialogVisible, second);
      };

      _this.state = {
        valume: -1,
        soundTime: -1,
        lightTime: -1,
        dialogVisible: 0,
        pickerVisible: 0
      };
      return _this;
    }

    (0, _createClass2.default)(LHAlarmSettingPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this$props = this.props,
            GetArmRing = _this$props.GetArmRing,
            GetArmRingCache = _this$props.GetArmRingCache;
        GetArmRingCache();
        GetArmRing();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _LHDoorBellHandler.default.setSoundPlaying(false).catch();
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this2 = this;

        var _this$state = this.state,
            valume = _this$state.valume,
            soundTime = _this$state.soundTime,
            lightTime = _this$state.lightTime;
        var _this$props2 = this.props,
            GetGuardSettingsReducers = _this$props2.GetGuardSettingsReducers,
            SetArmVolume = _this$props2.SetArmVolume,
            navigation = _this$props2.navigation;
        var armVolume = GetGuardSettingsReducers.armVolume,
            armSoundTimeLen = GetGuardSettingsReducers.armSoundTimeLen,
            armLightTimeLen = GetGuardSettingsReducers.armLightTimeLen,
            armRingIndex = GetGuardSettingsReducers.armRingIndex;
        return [{
          data: [{
            title: _LHLocalizableString.default.mi_linuxHub_arming_ring,
            hideTopSeparatorLine: true,
            testID: 'alarmTone',
            rightDescription: _LHTextUtils.default.armSoundName(0, parseInt(armRingIndex, 10)),
            press: function press() {
              navigation.navigate('LHAlarmTonePage');
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_setting_volume_alarm,
            titleStyle: {
              fontFamily: _LHCommonFunction.LHUiUtils.DefaultFontFamily
            },
            showSliderView: true,
            sliderStyle: {
              thumbTintColor: _PluginConfig.default.HubMainColor,
              minimumTrackTintColor: _PluginConfig.default.HubMainColor,
              thumbStyle: _PluginConfig.default.sliderThumbStyle
            },
            valueStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            sliderProps: {
              minimumValue: 1,
              value: parseInt(valume >= 0 ? valume : armVolume, 10)
            },
            minimumTrackTintColor: _PluginConfig.default.HubMainColor,
            thumbTintColor: _PluginConfig.default.HubMainColor,
            onSlidingComplete: function onSlidingComplete(value) {
              _this2.setState({
                valume: value
              });

              SetArmVolume(value).catch(function () {
                _this2.setState({
                  valume: -1
                });

                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
              });
            }
          }, {
            testID: 'alarmVolumeLength',
            title: _LHLocalizableString.default.mi_linuxHub_arming_volume_length,
            rightDescription: _LHTextUtils.default.armSoundTimeLengthText(soundTime >= 0 ? soundTime : armSoundTimeLen),
            press: function press() {
              _this2.setState({
                dialogVisible: 1
              });
            }
          }, {
            testID: 'alarmLightLength',
            title: _LHLocalizableString.default.mi_linuxHub_arming_light_length,
            rightDescription: _LHTextUtils.default.armLightTimeLengthText(lightTime >= 0 ? lightTime : armLightTimeLen),
            press: function press() {
              _this2.setState({
                dialogVisible: 2
              });
            }
          }]
        }];
      }
    }, {
      key: "getDialogData",
      value: function getDialogData() {
        var GetGuardSettingsReducers = this.props.GetGuardSettingsReducers;
        var armSoundTimeLen = GetGuardSettingsReducers.armSoundTimeLen,
            armLightTimeLen = GetGuardSettingsReducers.armLightTimeLen;
        var dialogVisible = this.state.dialogVisible;
        var title = _LHLocalizableString.default.mi_linuxHub_arming_volume_length;
        var firstItemTitle = _LHLocalizableString.default.mi_linuxHub_arming_always_ringing;
        var lastItemTitle = _LHLocalizableString.default.mi_linuxHub_arming_mute;

        var selectedIndex = _LHTextUtils.default.indexOfSecond(1, armSoundTimeLen);

        var subtitle = selectedIndex === 5 ? "" + armSoundTimeLen + _LHCommonFunction.LHCommonLocalizableString.common_date_second : 0;

        if (dialogVisible === 2) {
          title = _LHLocalizableString.default.mi_linuxHub_arming_light_length;
          firstItemTitle = _LHLocalizableString.default.mi_linuxHub_arming_always_flashing;
          lastItemTitle = _LHLocalizableString.default.mi_linuxHub_arming_not_flashing;
          selectedIndex = _LHTextUtils.default.indexOfSecond(2, armLightTimeLen);
          subtitle = selectedIndex === 5 ? "" + armLightTimeLen + _LHCommonFunction.LHCommonLocalizableString.common_date_second : 0;
        }

        return {
          title: title,
          options: [{
            title: firstItemTitle
          }, {
            title: "10" + _LHCommonFunction.LHCommonLocalizableString.common_date_minute
          }, {
            title: "1" + _LHCommonFunction.LHCommonLocalizableString.common_date_minute
          }, {
            title: "30" + _LHCommonFunction.LHCommonLocalizableString.common_date_second
          }, {
            title: lastItemTitle
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_custom,
            subtitle: subtitle
          }],
          selectedIndexArray: [selectedIndex]
        };
      }
    }, {
      key: "getPickerData",
      value: function getPickerData() {
        var pickerVisible = this.state.pickerVisible;
        var GetGuardSettingsReducers = this.props.GetGuardSettingsReducers;
        var armSoundTimeLen = GetGuardSettingsReducers.armSoundTimeLen,
            armLightTimeLen = GetGuardSettingsReducers.armLightTimeLen;
        var title = _LHLocalizableString.default.mi_linuxHub_arming_volume_length;
        var minValue = 1;
        var defaultValue = armSoundTimeLen;

        if (pickerVisible === 2) {
          title = _LHLocalizableString.default.mi_linuxHub_arming_light_length;
          minValue = 5;
          defaultValue = armLightTimeLen;
        }

        return {
          title: title,
          minValue: minValue,
          defaultValue: defaultValue
        };
      }
    }, {
      key: "setTimeLength",
      value: function setTimeLength(visible, value) {
        var _this3 = this;

        var _this$props3 = this.props,
            GetGuardSettingsReducers = _this$props3.GetGuardSettingsReducers,
            SetArmSoundTimeLen = _this$props3.SetArmSoundTimeLen,
            SetArmLightTimeLen = _this$props3.SetArmLightTimeLen;
        var armSoundTimeLen = GetGuardSettingsReducers.armSoundTimeLen,
            armLightTimeLen = GetGuardSettingsReducers.armLightTimeLen;

        if (visible === 1) {
          this.setState({
            soundTime: value
          });
          SetArmSoundTimeLen(value).catch(function () {
            _this3.setState({
              soundTime: armSoundTimeLen
            });

            _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
          });
        } else if (visible === 2) {
          this.setState({
            lightTime: value
          });
          SetArmLightTimeLen(value).catch(function () {
            _this3.setState({
              lightTime: armLightTimeLen
            });

            _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var _this$state2 = this.state,
            dialogVisible = _this$state2.dialogVisible,
            pickerVisible = _this$state2.pickerVisible;
        var pageData = this.getPageData();
        var dialogData = this.getDialogData();
        var pickerData = this.getPickerData();
        return _react.default.createElement(_reactNative.View, {
          testID: "alarmSetting",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('alarmSetting'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          data: pageData
        }), _react.default.createElement(_Dialog.ChoiceDialog, {
          color: "#00BEFF",
          icon: _Resources.default.GuardSetting.selectIcon,
          visible: dialogVisible > 0,
          title: dialogData.title,
          options: dialogData.options,
          selectedIndexArray: dialogData.selectedIndexArray,
          onDismiss: function onDismiss() {
            _this4.setState({
              dialogVisible: 0
            });
          },
          onSelect: function onSelect(result) {
            _this4.dialogSelected(result[0]);
          }
        }), _react.default.createElement(_LHNumberModalPicker.default, {
          title: pickerData.title,
          show: pickerVisible > 0,
          maxValue: 59,
          minValue: pickerData.minValue,
          defaultValue: pickerData.defaultValue,
          unit: _LHCommonFunction.LHCommonLocalizableString.common_date_second,
          pickerInnerStyle: {
            selectTextColor: '#333333',
            unitTextColor: '#333333',
            selectBgColor: '#f3f3f3',
            lineColor: 'rgba(255, 255, 255, 0.15)'
          },
          cancelStyle: {
            color: _LHCommonFunction.LHUiUtils.MiJiaSubTitleColor
          },
          okTextStyle: {
            color: _PluginConfig.default.HubMainColor
          },
          onClose: function onClose() {
            _this4.setState({
              pickerVisible: 0
            });
          },
          onSelected: this.pickerSelected
        }));
      }
    }]);
    return LHAlarmSettingPage;
  }(_react.default.Component);

  LHAlarmSettingPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_guard_alarm_sound_light_settings,
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };

  var _default = (0, _reactRedux.connect)(function (state) {
    return {
      GetGuardSettingsReducers: state.GetGuardSettingsReducers
    };
  }, function (dispatch) {
    return (0, _redux.bindActionCreators)(_GuardSettings.default, dispatch);
  })((0, _LHCommonFunction.LHPureRenderDecorator)(LHAlarmSettingPage));

  exports.default = _default;
},11360,[14305,14320,14323,14371,14377,14386,10297,10033,10004,10178,11363,10184,10214,10755,11318,11321,11183,11291,10757,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _ui = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;

  var styles = _reactNative.StyleSheet.create({
    backgroundMask: {
      position: 'absolute',
      backgroundColor: 'rgba(0,0,0,0.5)',
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    },
    modal: {
      flex: 1
    },
    modalMask: {
      flex: 1
    },
    modalContent: {
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite,
      overflow: 'hidden',
      width: width - 20,
      marginLeft: 10,
      borderRadius: 20,
      marginBottom: 10 + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
    },
    row: {
      flexDirection: 'row'
    },
    title: {
      color: '#000',
      fontSize: 14,
      lineHeight: 19,
      textAlign: 'center',
      paddingTop: 17,
      paddingBottom: 16,
      fontWeight: 'bold'
    },
    Btn: {
      flex: 1,
      paddingTop: 14.5,
      paddingBottom: 16,
      fontSize: 14,
      lineHeight: 19,
      color: 'rgba(0,0,0,0.7)',
      textAlign: 'center'
    },
    confirm: {
      color: _LHCommonFunction.LHUiUtils.MiJiaBlue
    },
    borderLeft: {
      borderLeftWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      borderColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
    },
    borderTop: {
      borderTopWidth: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth,
      borderColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor
    }
  });

  var LHNumberModalPicker = function (_React$Component) {
    (0, _inherits2.default)(LHNumberModalPicker, _React$Component);

    function LHNumberModalPicker(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, LHNumberModalPicker);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHNumberModalPicker).call(this, props, context));
      var _this$props = _this.props,
          show = _this$props.show,
          defaultValue = _this$props.defaultValue,
          autoCloseWhenSelected = _this$props.autoCloseWhenSelected,
          animated = _this$props.animated,
          maskClickClose = _this$props.maskClickClose,
          onRequestClose = _this$props.onRequestClose,
          onSelected = _this$props.onSelected,
          onClose = _this$props.onClose,
          title = _this$props.title,
          minValue = _this$props.minValue,
          maxValue = _this$props.maxValue;
      var value = defaultValue;

      if (defaultValue < minValue || defaultValue > maxValue) {
        value = minValue;
      }

      _this.state = {
        value: {
          newValue: value
        },
        show: show,
        autoCloseWhenSelected: autoCloseWhenSelected,
        animated: animated,
        maskClickClose: maskClickClose,
        onRequestClose: onRequestClose,
        onSelected: onSelected,
        onClose: onClose,
        title: title || '',
        slideValue: new _reactNative.Animated.Value(0),
        hideValue: new _reactNative.Animated.Value(0)
      };
      return _this;
    }

    (0, _createClass2.default)(LHNumberModalPicker, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {}
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(data) {
        var show = this.state.show;

        if (typeof data.show !== 'undefined') {
          if (show && !data.show) {
            this.close();
          } else {
            this.setState({
              show: data.show
            });
          }
        }

        this.setState({
          title: data.title
        });
        if (!show && data.show) this.showModalAnimate();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {}
    }, {
      key: "onSelected",
      value: function onSelected() {
        var _this$state = this.state,
            autoCloseWhenSelected = _this$state.autoCloseWhenSelected,
            onSelected = _this$state.onSelected,
            value = _this$state.value;
        if (autoCloseWhenSelected) this.close();
        onSelected(value);
      }
    }, {
      key: "calcel",
      value: function calcel() {
        var onRequestClose = this.state.onRequestClose;
        onRequestClose(this);
      }
    }, {
      key: "closeWithoutAnimate",
      value: function closeWithoutAnimate() {
        var onClose = this.state.onClose;
        this.setState({
          show: false
        });
        onClose();
      }
    }, {
      key: "close",
      value: function close() {
        var animated = this.state.animated;

        if (animated) {
          this.hideModalAnimate();
        } else {
          this.closeWithoutAnimate();
          this.isHiding = false;
        }
      }
    }, {
      key: "maskClick",
      value: function maskClick() {
        var maskClickClose = this.state.maskClickClose;
        if (this.isHiding) return;
        this.isHiding = true;
        if (maskClickClose) this.close();
      }
    }, {
      key: "hideModalAnimate",
      value: function hideModalAnimate() {
        var _this2 = this;

        var _this$state2 = this.state,
            slideValue = _this$state2.slideValue,
            hideValue = _this$state2.hideValue;
        slideValue.setValue(1);
        hideValue.setValue(0);

        _reactNative.Animated.parallel([_reactNative.Animated.timing(slideValue, {
          toValue: 0,
          duration: 500,
          easing: _reactNative.Easing.bezier(0.445, 0.05, 0.55, 0.95)
        }).start(), _reactNative.Animated.timing(hideValue, {
          toValue: 0,
          duration: 320,
          easing: _reactNative.Easing.bezier(0.42, 0, 0.58, 1)
        }).start(function (e) {
          if (e.finished) {
            _this2.closeWithoutAnimate();

            _this2.isHiding = false;
          }
        })]);
      }
    }, {
      key: "showModalAnimate",
      value: function showModalAnimate() {
        var slideValue = this.state.slideValue;
        slideValue.setValue(0);

        _reactNative.Animated.timing(slideValue, {
          toValue: 1,
          duration: 500,
          easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99)
        }).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$state3 = this.state,
            show = _this$state3.show,
            title = _this$state3.title,
            slideValue = _this$state3.slideValue;
        var _this$props2 = this.props,
            unit = _this$props2.unit,
            minValue = _this$props2.minValue,
            maxValue = _this$props2.maxValue,
            defaultValue = _this$props2.defaultValue,
            onChange = _this$props2.onChange,
            step = _this$props2.step,
            okTextStyle = _this$props2.okTextStyle,
            cancelStyle = _this$props2.cancelStyle,
            pickerInnerStyle = _this$props2.pickerInnerStyle;
        return _react.default.createElement(_reactNative.Modal, {
          animationType: "fade",
          transparent: true,
          visible: show,
          onRequestClose: function onRequestClose() {
            _this3.close();
          },
          onShow: function onShow() {}
        }, _react.default.createElement(_reactNative.View, {
          testID: "LHNumberModalPicker",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('LHNumberModalPicker'),
          style: styles.backgroundMask
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.modal, {
            transform: [{
              translateY: slideValue.interpolate({
                inputRange: [0, 1],
                outputRange: [height, 0]
              })
            }]
          }]
        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: function onPress() {
            _this3.maskClick();
          },
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('mask'),
          testID: "mask"
        }, _react.default.createElement(_reactNative.View, {
          style: styles.modalMask
        })), _react.default.createElement(_reactNative.View, {
          style: [styles.modalContent]
        }, _react.default.createElement(_LHCommonUI.LHText, {
          numberOfLines: 1,
          style: styles.title
        }, title), _react.default.createElement(_reactNative.View, {
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('stringSpinnerWrap'),
          testID: "stringSpinnerWrap",
          style: styles.borderTop
        }, _react.default.createElement(_ui.NumberSpinner, {
          style: {
            width: '100%',
            height: 209
          },
          visible: show,
          maxValue: maxValue,
          minValue: minValue,
          defaultValue: defaultValue,
          unit: unit,
          interval: step || 1,
          pickerInnerStyle: pickerInnerStyle,
          onNumberChanged: function onNumberChanged(data) {
            _this3.setState({
              value: data
            });

            if (typeof onChange === 'function') onChange(data);
          }
        })), _react.default.createElement(_reactNative.View, {
          style: [styles.row, styles.borderTop]
        }, _react.default.createElement(_reactNative.Text, {
          suppressHighlighting: true,
          style: [styles.Btn, styles.cancel, cancelStyle || {}],
          onPress: function onPress() {
            _this3.calcel();
          },
          testID: "calcel",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('calcel')
        }, _LHCommonFunction.LHCommonLocalizableString.common_cancel), _react.default.createElement(_reactNative.View, {
          style: styles.borderLeft
        }), _react.default.createElement(_reactNative.Text, {
          suppressHighlighting: true,
          style: [styles.Btn, styles.confirm, okTextStyle || {}],
          onPress: function onPress() {
            _this3.onSelected();
          },
          testID: "ok",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('ok')
        }, _LHCommonFunction.LHCommonLocalizableString.common_ok))))));
      }
    }]);
    return LHNumberModalPicker;
  }(_react.default.Component);

  LHNumberModalPicker.defaultProps = {
    show: false,
    defaultValue: '',
    animated: true,
    maskClickClose: true,
    autoCloseWhenSelected: true,
    onRequestClose: function onRequestClose(modal) {
      modal.close();
    },
    onSelected: function onSelected() {},
    onClose: function onClose() {}
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHNumberModalPicker);

  exports.default = _default;
},11363,[14305,14320,14323,14371,14377,14386,10297,10033,10230,10004,10178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _LHSubDeviceListStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var _ActionSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHTimeLightListPageStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHTimerIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _LHJsonUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var TimeLightPage = function (_React$Component) {
    (0, _inherits2.default)(TimeLightPage, _React$Component);

    function TimeLightPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, TimeLightPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TimeLightPage).call(this, props));
      console.log('constructor');
      _this.state = {
        timeList: [],
        isShow: false
      };
      return _this;
    }

    (0, _createClass2.default)(TimeLightPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        console.log('componentWillMount');
        this.requestListData();
      }
    }, {
      key: "getTime",
      value: function getTime(setting, time) {
        console.log(this);

        if (time.timeSpan === undefined || time.timeSpan.wday === undefined) {
          return {
            time: '',
            description: '',
            color: 'white'
          };
        }

        var isTimerOnEnable = setting.enable_timer_on === '1';
        var isTimerOffEnable = setting.enable_timer_off === '1';
        var isShowbBothTime = isTimerOnEnable && isTimerOffEnable;
        var isOnce = time.timeSpan.wday.length === 0;
        var type = isShowbBothTime ? '' : isTimerOnEnable ? _LHCommonFunction.LHCommonLocalizableString.common_open : _LHCommonFunction.LHCommonLocalizableString.common_close;

        var showTime = _LHCommonFunction.LHTimeSpanUtils.gettimerArrayStr(time.timeSpan);

        var startTimeTimerPrefixString = isOnce ? _LHTimerIFTTTManager.default.timerPrefixString(time.fromDate.getDate(), time.fromDate.getMonth()) : '';
        var endTimeTimerPrefixString = isOnce ? _LHTimerIFTTTManager.default.timerPrefixString(time.toDate.getDate(), time.toDate.getMonth()) : '';
        var onceOpenDesctiptionOpen = isOnce ? ' | ' + _LHCommonFunction.LHDateUtils.DateFormat(_LHCommonFunction.LHDateUtils.GetDateFormatter(true), time.fromDate.getTime() / 1000) + ' ' + _LHCommonFunction.LHCommonLocalizableString.common_open : '';
        var onceOpenDesctiptionClose = isOnce ? ' | ' + _LHCommonFunction.LHDateUtils.DateFormat(_LHCommonFunction.LHDateUtils.GetDateFormatter(true), time.toDate.getTime() / 1000) + ' ' + _LHCommonFunction.LHCommonLocalizableString.common_close : '';
        var startTime = isTimerOnEnable ? startTimeTimerPrefixString + showTime[0] : '';
        var endTime = isTimerOffEnable ? endTimeTimerPrefixString + showTime[1] : '';
        var description = _LHTimerIFTTTManager.default.getPeriodStr(time.timeSpan, setting.on_filter) + (!isTimerOnEnable && isTimerOffEnable ? onceOpenDesctiptionClose : onceOpenDesctiptionOpen);
        var result = {
          time: startTime + (isShowbBothTime ? '-' : '') + endTime + type,
          description: description,
          color: parseInt(setting.on_param).toString(16)
        };
        return result;
      }
    }, {
      key: "getData",
      value: function getData() {
        var _this2 = this;

        var navigation = this.props.navigation;
        var iconStyle = {
          height: _LHCommonFunction.LHUiUtils.GetPx(36),
          width: _LHCommonFunction.LHUiUtils.GetPx(36),
          borderRadius: _LHCommonFunction.LHUiUtils.GetPx(18)
        };

        var deleteComponent = _react.default.createElement(_reactNative.View, {
          style: _LHSubDeviceListStyle.default.deleteComponent
        }, _react.default.createElement(_reactNative.Image, {
          style: _LHSubDeviceListStyle.default.swipeoutImage,
          source: _LHCommonUI.LHCommonIcon.common.delete.white
        }), _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHSubDeviceListStyle.default.swipeoutText
        }, _LHCommonFunction.LHCommonLocalizableString.common_button_delete));

        var timeList = this.state.timeList;
        var datas = [];

        if (timeList.length === 0) {
          return datas;
        }

        timeList.forEach(function (timeItem) {
          if (timeItem.setting) {
            var time = _LHCommonFunction.LHTimeSpanUtils.getSceneTimerSpan(timeItem.setting.on_time, timeItem.setting.off_time, timeItem.setting.enable_timer_on, timeItem.setting.enable_timer_off);

            var result = _this2.getTime(timeItem.setting, time);

            var iconConfig = timeItem.setting.enable_timer_on === '0' && timeItem.setting.enable_timer_off === '1' ? {} : {
              tintColor: '#' + result.color.substring(2, result.color.length)
            };
            var dataItem = {
              title: result.time,
              useControlledSwitch: true,
              titleNumberOfLines: 1,
              description: result.description,
              descriptionStyle: {
                fontSize: _LHCommonFunction.LHUiUtils.GetPx(12)
              },
              descriptionNumberOfLines: 1,
              switchValue: timeItem.enable === '1',
              iconSource: timeItem.setting.enable_timer_on === '0' && timeItem.setting.enable_timer_off === '1' ? _Resources.default.TimeLight.lumiLightColorOff : _Resources.default.TimeLight.lumiLightColor,
              leftIconStyle: iconStyle,
              iconSourceStyle: iconConfig,
              switchColor: _PluginConfig.default.HubMainColor,
              hideRightArrow: true,
              hasSwitch: true,
              swipeoutClose: true,
              useControlledSwitch: true,
              onSwitchChange: function onSwitchChange(res1) {
                timeItem.enable = res1 ? '1' : '0';

                _this2.forceUpdate();

                _LHTimerIFTTTManager.default.enableTimerScene(res1, timeItem, function () {
                  _this2.changeCacheData(timeList);
                }, function (err) {
                  timeItem.enable = res1 ? '0' : '1';

                  _this2.forceUpdate();

                  _this2.showErrorToast();

                  console.log(err);
                });
              },
              swipeoutBtns: [{
                component: deleteComponent,
                press: function press() {
                  _LHCommonFunction.LHDialogUtils.MessageDialogShow({
                    messageStyle: {
                      textAlign: 'center'
                    },
                    message: _LHLocalizableString.default.mi_linuxHub_lazy_clock_delete,
                    confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
                    confirmStyle: {
                      color: _PluginConfig.default.HubMainColor
                    },
                    cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
                    onConfirm: function onConfirm() {
                      _LHTimerIFTTTManager.default.removeTimerScene(timeItem, function (res) {
                        console.log(res);
                        var index = timeList.indexOf(timeItem);

                        if (index > -1) {
                          timeList.splice(index, 1);
                        }

                        _this2.changeCacheData(timeList);

                        _this2.forceUpdate();
                      }, function (err) {
                        _this2.showErrorToast();

                        console.log(err);
                      });
                    }
                  });
                }
              }],
              press: function press() {
                var timePass = time.timeSpan.wday.length === 0 && _this2.istimePass(timeItem, time);

                navigation.navigate('LHTimeLightEditPage', {
                  timeItem: timeItem,
                  isCreate: false,
                  timePass: timePass,
                  update: function update() {
                    _this2.requestListData();
                  }
                });
              },
              longPress: function longPress() {
                _LHCommonFunction.LHDialogUtils.MessageDialogShow({
                  messageStyle: {
                    textAlign: 'center'
                  },
                  message: _LHLocalizableString.default.mi_linuxHub_lazy_clock_delete,
                  confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
                  confirmStyle: {
                    color: _PluginConfig.default.HubMainColor
                  },
                  cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
                  onConfirm: function onConfirm() {
                    _LHTimerIFTTTManager.default.removeTimerScene(timeItem, function (res) {
                      console.log(res);
                      var index = timeList.indexOf(timeItem);

                      if (index > -1) {
                        timeList.splice(index, 1);
                      }

                      _this2.changeCacheData(timeList);

                      _this2.forceUpdate();
                    }, function (err) {
                      _this2.showErrorToast();

                      console.log(err);
                    });
                  }
                });
              }
            };
            datas.push(dataItem);
          }
        });
        return [{
          data: datas
        }];
      }
    }, {
      key: "requestListData",
      value: function requestListData() {
        var _this3 = this;

        var key = _LHCommonFunction.CommonMethod.CreatCacheKey('timerlightlist');

        _LHCommonFunction.LHMiServer.GetHostStorage(key).then(function (res) {
          console.log('old' + res);

          if (res) {
            var list = JSON.parse(res);

            for (var i = 0; i < list.length; i += 1) {
              list[i] = (0, _extends2.default)(list[i], {
                enable: list[i].setting.enable_timer
              });
            }

            _this3.setState({
              timeList: list
            });
          }

          _this3.loadNewList(key);
        }).catch(function (suberr) {
          console.log(suberr);

          _this3.showErrorToast();

          _this3.loadNewList(key);
        });
      }
    }, {
      key: "loadNewList",
      value: function loadNewList(key) {
        var _this4 = this;

        _LHCommonFunction.LHMiServer.LoadSceneList(_miot.Device.deviceID, _miot.SceneType.Timer, {
          identify: _PluginConfig.default.TimeLightIdentify
        }, function (res) {
          if (res || res.length > 0) {
            var data = JSON.stringify(_LHJsonUtils.default.parseJson(res));

            _LHCommonFunction.LHMiServer.SetHostStorage(key, data);

            for (var i = 0; i < res.length; i += 1) {
              res[i] = (0, _extends2.default)(res[i], {
                enable: res[i].setting.enable_timer
              });
            }

            console.log('new ' + data);

            _this4.setState({
              timeList: res
            });
          }
        }, function () {
          _this4.showErrorToast();
        });
      }
    }, {
      key: "changeCacheData",
      value: function changeCacheData(timeList) {
        var key = _LHCommonFunction.CommonMethod.CreatCacheKey('timerlightlist');

        var data = JSON.stringify(_LHJsonUtils.default.parseJson(timeList));
        console.log('change ' + data);

        _LHCommonFunction.LHMiServer.SetHostStorage(key, data);
      }
    }, {
      key: "showErrorToast",
      value: function showErrorToast() {
        _LHCommonFunction.LHToastUtils.showLongToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);
      }
    }, {
      key: "istimePass",
      value: function istimePass(timeItem, time) {
        console.log(this);

        if (timeItem.setting.enable_timer_on === '1' && timeItem.setting.enable_timer_off === '1') {
          return _LHTimerIFTTTManager.default.isTimePassedByTime(time.toDate.getTime());
        } else if (timeItem.setting.enable_timer_on === '1' && timeItem.setting.enable_timer_off === '0') {
          return _LHTimerIFTTTManager.default.isTimePassedByTime(time.fromDate.getTime());
        } else if (timeItem.setting.enable_timer_on === '0' && timeItem.setting.enable_timer_off === '1') {
          return _LHTimerIFTTTManager.default.isTimePassedByTime(time.toDate.getTime());
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var navigation = this.props.navigation;
        var isShow = this.state.isShow;

        var actionSheetView = _react.default.createElement(_ActionSheet.default, {
          visible: isShow,
          options: [{
            title: _LHLocalizableString.default.mi_linuxHub_timer_light_timer_light_period,
            onPress: function onPress() {
              var defaultItem = {
                sceneID: 0,
                identify: _PluginConfig.default.TimeLightIdentify,
                name: _PluginConfig.default.TimeLightName,
                setting: {
                  enable_timer: '1',
                  enable_timer_off: '1',
                  enable_timer_on: '1',
                  off_method: 'toggle_light',
                  off_param: 'off',
                  on_method: 'set_night_light_rgb',
                  on_param: '737982976',
                  on_time: '59 9 30 12 *',
                  off_time: '59 9 30 12 *',
                  on_filter: ''
                }
              };
              defaultItem.setting.enable_timer_off = '1';
              defaultItem.setting.enable_timer_on = '1';
              defaultItem.setting.on_time = '0 0 * * 0,1,2,3,4,5,6';
              defaultItem.setting.off_time = '0 0 * * 0,1,2,3,4,5,6';

              _this5.setState({
                isShow: false
              });

              navigation.navigate('LHTimeLightEditPage', {
                timeItem: defaultItem,
                isCreate: true,
                update: function update() {
                  _this5.requestListData();
                }
              });
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_timer_light_timer_on,
            onPress: function onPress() {
              var defaultItem = {
                sceneID: 0,
                identify: _PluginConfig.default.TimeLightIdentify,
                name: _PluginConfig.default.TimeLightName,
                setting: {
                  enable_timer: '1',
                  enable_timer_off: '1',
                  enable_timer_on: '1',
                  off_method: 'toggle_light',
                  off_param: 'off',
                  on_method: 'set_night_light_rgb',
                  on_param: '737982976',
                  on_time: '59 9 30 12 *',
                  off_time: '59 9 30 12 *',
                  on_filter: ''
                }
              };
              defaultItem.setting.enable_timer_off = '0';
              defaultItem.setting.enable_timer_on = '1';
              defaultItem.setting.on_time = '0 0 * * 0,1,2,3,4,5,6';
              defaultItem.setting.off_time = '0 0 * * 0,1,2,3,4,5,6';

              _this5.setState({
                isShow: false
              });

              navigation.navigate('LHTimeLightEditPage', {
                timeItem: defaultItem,
                isCreate: true,
                update: function update() {
                  _this5.requestListData();
                }
              });
            }
          }, {
            title: _LHLocalizableString.default.mi_linuxHub_timer_light_timer_off,
            onPress: function onPress() {
              var defaultItem = {
                sceneID: 0,
                identify: _PluginConfig.default.TimeLightIdentify,
                name: _PluginConfig.default.TimeLightName,
                setting: {
                  enable_timer: '1',
                  enable_timer_off: '1',
                  enable_timer_on: '1',
                  off_method: 'toggle_light',
                  off_param: 'off',
                  on_method: 'set_night_light_rgb',
                  on_param: '737982976',
                  on_time: '59 9 30 12 *',
                  off_time: '59 9 30 12 *',
                  on_filter: ''
                }
              };
              defaultItem.setting.enable_timer_off = '1';
              defaultItem.setting.enable_timer_on = '0';
              defaultItem.setting.on_time = '0 0 * * 0,1,2,3,4,5,6';
              defaultItem.setting.off_time = '0 0 * * 0,1,2,3,4,5,6';

              _this5.setState({
                isShow: false
              });

              navigation.navigate('LHTimeLightEditPage', {
                timeItem: defaultItem,
                isCreate: true,
                update: function update() {
                  _this5.requestListData();
                }
              });
            }
          }],
          buttons: [{
            text: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            style: {
              color: '#666666',
              fontSize: _LHCommonFunction.LHUiUtils.GetPx(14)
            },
            callback: function callback() {
              _this5.setState({
                isShow: false
              });
            }
          }],
          onDismiss: function onDismiss() {
            _this5.setState({
              isShow: false
            });
          }
        });

        return _react.default.createElement(_reactNative.View, {
          testID: "timeLightList",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('timeLightList'),
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardListSwipeout, {
          data: this.getData(),
          ListFooterComponent: _react.default.createElement(_reactNative.View, {
            style: {
              height: this.getData().length !== 0 ? _LHCommonFunction.LHUiUtils.GetPx(108) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight : 0
            }
          }),
          ListEmptyComponent: _react.default.createElement(_LHCommonUI.LHStandardEmpty, {
            emptyIconStyle: {
              width: _LHCommonFunction.LHUiUtils.GetPx(138),
              height: _LHCommonFunction.LHUiUtils.GetPx(138),
              marginTop: _LHCommonFunction.LHUiUtils.GetPx(146)
            },
            emptyPageStyle: {
              backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
            },
            emptyTextStyle: {
              marginTop: _LHCommonFunction.LHUiUtils.GetPx(-3)
            },
            emptyIcon: _Resources.default.TimeLight.placeholder_timing,
            text: _LHLocalizableString.default.mi_linuxHub_timer_light_list_empty
          })
        }), actionSheetView, _react.default.createElement(_reactNative.View, {
          style: _LHTimeLightListPageStyle.default.addButtom
        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          testID: "addBtn",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('addBtn'),
          onPress: function onPress() {
            _this5.setState({
              isShow: true
            });
          }
        }, _react.default.createElement(_reactNative.Image, {
          style: {
            width: _LHCommonFunction.LHUiUtils.GetPx(66),
            height: _LHCommonFunction.LHUiUtils.GetPx(66)
          },
          source: _Resources.default.TimeLight.timeLightAdd
        }))));
      }
    }]);
    return TimeLightPage;
  }(_react.default.Component);

  exports.default = TimeLightPage;

  TimeLightPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_main_timing_light,
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        },
        backBtnIcon: "black"
      }))
    };
  };
},11366,[14305,14344,14320,14323,14371,14377,14386,10297,10033,10178,10004,10298,10074,10728,10757,11249,11234,11354,11351,11183,11357]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _MHDatePicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _ChoiceDialog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHTimeLightEditPageStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHTimerIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var colorArr = _PluginConfig.default.TimeLightColorName;
  var Instance = null;

  var LHTimeLightEditPage = function (_React$Component) {
    (0, _inherits2.default)(LHTimeLightEditPage, _React$Component);

    function LHTimeLightEditPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHTimeLightEditPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHTimeLightEditPage).call(this, props));
      Instance = (0, _assertThisInitialized2.default)(_this);
      var navigation = _this.props.navigation;
      var _navigation$state$par = navigation.state.params,
          timeItem = _navigation$state$par.timeItem,
          isCreate = _navigation$state$par.isCreate;
      _this.isCreatingTimer = false;
      _this.isStartTimeSeted = !isCreate;
      _this.isEndTimeSeted = !isCreate;
      _this.time = _LHCommonFunction.LHTimeSpanUtils.getSceneTimerSpan(timeItem.setting.on_time, timeItem.setting.off_time, timeItem.setting.enable_timer_on, timeItem.setting.enable_timer_off, !isCreate);
      _this.state = {
        selectColor: timeItem.setting.on_param,
        isShowStartDialog: false,
        isShowEndDialog: false,
        isShowRepeatDialog: false,
        isShowRepeatCustomDialog: false,
        startTime: _LHCommonFunction.LHCommonLocalizableString.timersetting_empty,
        endTime: _LHCommonFunction.LHCommonLocalizableString.timersetting_empty
      };

      _this.getTitleFromType();

      return _this;
    }

    (0, _createClass2.default)(LHTimeLightEditPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var navigation = this.props.navigation;
        var timeItem = navigation.state.params.timeItem;

        if (timeItem === undefined) {
          return;
        }

        this.setLightValue(timeItem.setting.on_param);
        this.showTime();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.closeLight();
      }
    }, {
      key: "getRepeatPosition",
      value: function getRepeatPosition() {
        var dateArr = this.time.timeSpan.wday;

        if (dateArr.length === 0) {
          return 0;
        }

        if (dateArr.length === 7) {
          for (var i = 0; i < 7; i += 1) {
            if (dateArr.indexOf(i) === -1) {
              return 2;
            }
          }

          return 1;
        }

        return 2;
      }
    }, {
      key: "getTitleFromType",
      value: function getTitleFromType() {
        var navigation = this.props.navigation;
        var timeItem = navigation.state.params.timeItem;

        if (timeItem === undefined) {
          return;
        }

        if (timeItem.setting.enable_timer_on === '0' && timeItem.setting.enable_timer_off === '1') {
          navigation.setParams({
            title: _LHLocalizableString.default.mi_linuxHub_timer_light_timer_off
          });
        } else {
          navigation.setParams({
            title: _LHLocalizableString.default.mi_linuxHub_timer_light_timer_on
          });
        }
      }
    }, {
      key: "setRepeatFromPosition",
      value: function setRepeatFromPosition(position) {
        switch (position) {
          case 0:
            this.time.timeSpan.wday = [];
            break;

          case 1:
            this.time.timeSpan.wday = [0, 1, 2, 3, 4, 5, 6];
            break;

          default:
        }
      }
    }, {
      key: "setLightValue",
      value: function setLightValue(color) {
        var navigation = this.props.navigation;
        var timeItem = navigation.state.params.timeItem;

        if (timeItem.setting.enable_timer_on === '0' && timeItem.setting.enable_timer_off === '1') {
          return;
        }

        _LHCommonFunction.LHMiServer.SendRPCRequest('set_night_light_rgb', [color], {}, function () {}, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      }
    }, {
      key: "closeLight",
      value: function closeLight() {
        var navigation = this.props.navigation;

        _LHCommonFunction.LHMiServer.SendRPCRequest('set_rgb', [0], {}, function () {}, function () {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);
        });
      }
    }, {
      key: "showStartTimePickDialog",
      value: function showStartTimePickDialog() {
        var _this2 = this;

        var isShowStartDialog = this.state.isShowStartDialog;
        return _react.default.createElement(_MHDatePicker.default, {
          visible: isShowStartDialog,
          confirmColor: _PluginConfig.default.HubMainColor,
          title: _LHCommonFunction.LHCommonLocalizableString.timersetting_on,
          current: [this.time.timeSpan.from.hour, this.time.timeSpan.from.min],
          type: _MHDatePicker.default.TYPE.TIME24,
          onSelect: function onSelect(res) {
            _this2.time.timeSpan.from.hour = Number(res.rawArray[0]);
            _this2.time.timeSpan.from.min = Number(res.rawArray[1]);
            _this2.isStartTimeSeted = true;

            _this2.showTime();
          },
          onDismiss: function onDismiss() {
            _this2.setState({
              isShowStartDialog: false
            });
          }
        });
      }
    }, {
      key: "showEndTimePickDialog",
      value: function showEndTimePickDialog() {
        var _this3 = this;

        var isShowEndDialog = this.state.isShowEndDialog;
        return _react.default.createElement(_MHDatePicker.default, {
          visible: isShowEndDialog,
          confirmColor: _PluginConfig.default.HubMainColor,
          title: _LHCommonFunction.LHCommonLocalizableString.timersetting_off,
          current: [this.time.timeSpan.to.hour, this.time.timeSpan.to.min],
          type: _MHDatePicker.default.TYPE.TIME24,
          onSelect: function onSelect(res) {
            _this3.time.timeSpan.to.hour = Number(res.rawArray[0]);
            _this3.time.timeSpan.to.min = Number(res.rawArray[1]);
            _this3.isEndTimeSeted = true;

            _this3.showTime();
          },
          onDismiss: function onDismiss() {
            _this3.setState({
              isShowEndDialog: false
            });
          }
        });
      }
    }, {
      key: "showRepeatDialog",
      value: function showRepeatDialog() {
        var _this4 = this;

        var choiceDialogData = _LHTimerIFTTTManager.default.getChoiceDialogData(1, this.time.timeSpan, null);

        var isShowRepeatDialog = this.state.isShowRepeatDialog;
        return _react.default.createElement(_ChoiceDialog.default, {
          visible: isShowRepeatDialog,
          title: choiceDialogData.title,
          type: choiceDialogData.type,
          options: choiceDialogData.options,
          selectedIndexArray: choiceDialogData.selectedIndexArray,
          icon: _Resources.default.GuardSetting.selectIcon,
          color: _PluginConfig.default.HubMainColor,
          onDismiss: function onDismiss() {
            _this4.setState({
              isShowRepeatDialog: false
            });
          },
          onSelect: function onSelect(result) {
            if (result[0] === 2) {
              _this4.setState({
                isShowRepeatCustomDialog: true
              });
            } else {
              _this4.setRepeatFromPosition(result[0]);
            }

            _this4.setState({
              isShowRepeatDialog: false
            });

            _this4.showTime();
          }
        });
      }
    }, {
      key: "showRepeatCustomDialog",
      value: function showRepeatCustomDialog() {
        var _this5 = this;

        var choiceDialogData = _LHTimerIFTTTManager.default.getChoiceDialogData(2, this.time.timeSpan, null);

        var isShowRepeatCustomDialog = this.state.isShowRepeatCustomDialog;
        return _react.default.createElement(_ChoiceDialog.default, {
          visible: isShowRepeatCustomDialog,
          title: choiceDialogData.title,
          type: choiceDialogData.type,
          options: choiceDialogData.options,
          color: _PluginConfig.default.HubMainColor,
          selectedIndexArray: choiceDialogData.selectedIndexArray,
          onDismiss: function onDismiss() {
            _this5.setState({
              isShowRepeatCustomDialog: false
            });
          },
          buttons: [{
            style: {
              fontSize: _LHCommonFunction.LHUiUtils.GetPx(14)
            },
            text: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            callback: function callback(result) {
              console.log('选中的选项', result);

              _this5.setState({
                isShowRepeatCustomDialog: false
              });
            }
          }, {
            text: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            style: {
              color: _PluginConfig.default.HubMainColor,
              fontSize: _LHCommonFunction.LHUiUtils.GetPx(14)
            },
            callback: function callback(result) {
              console.log('选中的选项', result);
              var res = [];

              for (var i = 0; i < result.length; i += 1) {
                if (result[i] === 6) {
                  res.push(0);
                } else {
                  res.push(result[i] + 1);
                }
              }

              _this5.time.timeSpan.wday = res;

              _this5.setState({
                isShowRepeatCustomDialog: false
              });

              _this5.showTime();
            }
          }]
        });
      }
    }, {
      key: "save",
      value: function save() {
        var _this6 = this;

        var navigation = this.props.navigation;
        var timeItem = navigation.state.params.timeItem;
        var selectColor = this.state.selectColor;
        var commitTime = this.time;

        if (this.isCreatingTimer) {
          return;
        }

        if (timeItem.setting.enable_timer_on === '1' && this.isStartTimeSeted && timeItem.setting.enable_timer_off === '1' && this.isEndTimeSeted) {
          if (commitTime.timeSpan.wday.length === 0) {
            var isStartTimeTomorrow = _LHTimerIFTTTManager.default.isTimeSetToTomorrow(commitTime.timeSpan.from.hour, commitTime.timeSpan.from.to);

            var isEndTimeTomorrow = _LHTimerIFTTTManager.default.isTimeSetToTomorrow(commitTime.timeSpan.to.hour, commitTime.timeSpan.to.min);

            if (isStartTimeTomorrow) {
              if (commitTime.timeSpan.to.hour * 60 + commitTime.timeSpan.to.min <= commitTime.timeSpan.from.hour * 60 + commitTime.timeSpan.from.min) {
                _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_timer_light_timer_time_after, {});

                return;
              }
            }

            if (!isStartTimeTomorrow && !isEndTimeTomorrow) {
              if (commitTime.timeSpan.to.hour * 60 + commitTime.timeSpan.to.min <= commitTime.timeSpan.from.hour * 60 + commitTime.timeSpan.from.min) {
                _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_timer_light_timer_time_after, {});

                return;
              }
            }
          } else if (commitTime.timeSpan.to.hour * 60 + commitTime.timeSpan.to.min <= commitTime.timeSpan.from.hour * 60 + commitTime.timeSpan.from.min) {
            _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_timer_light_timer_time_after, {});

            return;
          }
        }

        var time = _LHCommonFunction.LHTimeSpanUtils.getTimeSlotToCloud(commitTime.timeSpan, timeItem.setting.enable_timer_on === '1' && this.isStartTimeSeted, timeItem.setting.enable_timer_off === '1' && this.isEndTimeSeted);

        timeItem.setting = {
          enable_push: '1',
          on_time: time.fromTime,
          off_time: time.toTime,
          off_method: 'toggle_light',
          off_param: 'off',
          on_method: 'set_night_light_rgb',
          on_param: selectColor,
          enable_timer_on: timeItem.setting.enable_timer_on === '1' ? this.isStartTimeSeted ? '1' : '0' : '0',
          enable_timer_off: timeItem.setting.enable_timer_off === '1' ? this.isEndTimeSeted ? '1' : '0' : '0',
          enable_timer: timeItem.setting.enable_timer
        };

        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading_with_dot
        });

        this.isCreatingTimer = true;

        _LHTimerIFTTTManager.default.editTimerScene(timeItem, function (res) {
          console.log(res);
          _this6.isCreatingTimer = false;

          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          var update = navigation.state.params.update;
          update();
          navigation.goBack();
        }, function (err) {
          _this6.isCreatingTimer = false;

          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          console.log(err);
        });
      }
    }, {
      key: "checkWeekArray",
      value: function checkWeekArray(wday, mwday) {
        var navigation = this.props.navigation;

        if (wday.length !== mwday.length) {
          return false;
        } else {
          for (var i = 0; i < wday.length; i += 1) {
            if (mwday.indexOf(wday[i]) === -1) {
              return false;
            }
          }

          return true;
        }
      }
    }, {
      key: "back",
      value: function back() {
        var navigation = this.props.navigation;
        var selectColor = this.state.selectColor;
        var _navigation$state$par2 = navigation.state.params,
            timeItem = _navigation$state$par2.timeItem,
            timePass = _navigation$state$par2.timePass;

        if (!timePass && this.isSameData() && selectColor === timeItem.setting.on_param) {
          navigation.goBack();
        } else {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            messageStyle: {
              textAlign: 'center'
            },
            title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
            message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
            confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            onConfirm: function onConfirm() {
              navigation.goBack();
            }
          });
        }
      }
    }, {
      key: "isSameData",
      value: function isSameData() {
        var navigation = this.props.navigation;
        var _navigation$state$par3 = navigation.state.params,
            timeItem = _navigation$state$par3.timeItem,
            isCreate = _navigation$state$par3.isCreate;

        var time = _LHCommonFunction.LHTimeSpanUtils.getSceneTimerSpan(timeItem.setting.on_time, timeItem.setting.off_time, timeItem.setting.enable_timer_on, timeItem.setting.enable_timer_off, !isCreate);

        if (timeItem.setting.enable_timer_on === '1' && this.isStartTimeSeted || timeItem.setting.enable_timer_off === '1' && this.isEndTimeSeted) {
          if (isCreate) {
            return false;
          }
        }

        var result = time.timeSpan.to.min === this.time.timeSpan.to.min && time.timeSpan.to.hour === this.time.timeSpan.to.hour && time.timeSpan.from.min === this.time.timeSpan.from.min && time.timeSpan.from.hour === this.time.timeSpan.from.hour && this.checkWeekArray(time.timeSpan.wday, this.time.timeSpan.wday);
        console.log(result);
        return result;
      }
    }, {
      key: "showTime",
      value: function showTime() {
        var navigation = this.props.navigation;
        var selectColor = this.state.selectColor;
        var timeItem = navigation.state.params.timeItem;
        var isOnce = this.time.timeSpan.wday.length === 0;

        var showTime = _LHCommonFunction.LHTimeSpanUtils.gettimerArrayStr(this.time.timeSpan);

        var startTime = timeItem.setting.enable_timer_on === '1' ? showTime[0] : '';
        var endTime = timeItem.setting.enable_timer_off === '1' ? showTime[1] : '';

        var isStartTimeTomorrow = _LHTimerIFTTTManager.default.isTimeSetToTomorrow(this.time.timeSpan.from.hour, this.time.timeSpan.from.min);

        var isEndTimeTomorrow = _LHTimerIFTTTManager.default.isTimeSetToTomorrow(this.time.timeSpan.to.hour, this.time.timeSpan.to.min);

        var startTimeTimerPrefixString = isOnce ? isStartTimeTomorrow ? _LHCommonFunction.LHCommonLocalizableString.common_repeat_tomorrow : '' : '';
        var endTimeTimerPrefixString = isOnce ? isEndTimeTomorrow ? _LHCommonFunction.LHCommonLocalizableString.common_repeat_tomorrow : '' : '';

        if (timeItem.setting.enable_timer_on === '1') {
          endTimeTimerPrefixString = isOnce ? isEndTimeTomorrow ? _LHCommonFunction.LHCommonLocalizableString.common_repeat_tomorrow : isStartTimeTomorrow ? _LHCommonFunction.LHCommonLocalizableString.common_repeat_tomorrow : '' : '';
        }

        this.setState({
          startTime: this.isStartTimeSeted ? startTimeTimerPrefixString + startTime : _LHCommonFunction.LHCommonLocalizableString.timersetting_empty,
          endTime: this.isEndTimeSeted ? endTimeTimerPrefixString + endTime : _LHCommonFunction.LHCommonLocalizableString.timersetting_empty
        });

        if (selectColor === timeItem.setting.on_param && this.isSameData()) {
          navigation.setParams({
            disable: true
          });
        } else if (!this.isStartTimeSeted && !this.isEndTimeSeted) {
          navigation.setParams({
            disable: true
          });
        } else {
          navigation.setParams({
            disable: false
          });
        }
      }
    }, {
      key: "renderSubColorView",
      value: function renderSubColorView(item, index) {
        var _this7 = this;

        var selectColor = this.state.selectColor;
        var navigation = this.props.navigation;
        var timeItem = navigation.state.params.timeItem;
        var color = parseInt(selectColor).toString(16);
        color = '#' + color.substring(2, color.length).toUpperCase();

        var ringsView = _react.default.createElement(_reactNative.Image, {
          style: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            height: _LHCommonFunction.LHUiUtils.GetPx(42),
            width: _LHCommonFunction.LHUiUtils.GetPx(42)
          },
          source: _Resources.default.TimeLight.lumirings
        });

        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          key: index,
          onPress: function onPress() {
            if (color !== item) {
              var result = '2b' + item.substring(1, item.length);
              var data = parseInt(result, 16).toString();

              _this7.setLightValue(data);

              if (data === timeItem.setting.on_param && _this7.isSameData()) {
                navigation.setParams({
                  disable: true
                });
              } else if (!_this7.isStartTimeSeted && !_this7.isEndTimeSeted) {
                navigation.setParams({
                  disable: true
                });
              } else {
                navigation.setParams({
                  disable: false
                });
              }

              console.log(data);

              _this7.setState({
                selectColor: data
              });
            }
          }
        }, _react.default.createElement(_reactNative.View, {
          style: [_LHTimeLightEditPageStyle.default.colorBorder]
        }, color === item ? ringsView : null, _react.default.createElement(_reactNative.View, {
          style: [_LHTimeLightEditPageStyle.default.color, {
            backgroundColor: item
          }]
        }, _react.default.createElement(_reactNative.View, {
          style: [_LHTimeLightEditPageStyle.default.color, {
            backgroundColor: color === item ? 'rgba(0,0,0,0.2)' : 'rgba(0,0,0,0)'
          }]
        }))));
      }
    }, {
      key: "render",
      value: function render() {
        var _this8 = this;

        var navigation = this.props.navigation;
        var timeItem = navigation.state.params.timeItem;
        var _this$state = this.state,
            startTime = _this$state.startTime,
            endTime = _this$state.endTime;

        var repeatView = _react.default.createElement(_LHCommonUI.LHStandardCell, {
          testID: "repeatCell",
          title: _LHLocalizableString.default.mi_linuxHub_timersetting_repeat,
          titleNumberOfLines: 1,
          description: _LHTimerIFTTTManager.default.getPeriodStr(this.time.timeSpan, null),
          descriptionNumberOfLines: 1,
          hasRightArrow: true,
          bottomSeparatorLine: true,
          bottomSeparatorStyle: {
            marginLeft: timeItem.setting.enable_timer_off === '1' && timeItem.setting.enable_timer_on === '0' ? 0 : _LHCommonFunction.LHUiUtils.GetPx(24)
          },
          press: function press() {
            _this8.setState({
              isShowRepeatDialog: true
            });
          }
        });

        var startTimeView = timeItem.setting.enable_timer_on === '1' ? _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHStandardCell, {
          testID: "startTime",
          title: _LHCommonFunction.LHCommonLocalizableString.common_start,
          titleNumberOfLines: 1,
          description: startTime,
          descriptionNumberOfLines: 1,
          hasRightArrow: true,
          bottomSeparatorLine: true,
          press: function press() {
            _this8.setState({
              isShowStartDialog: true
            });
          }
        })) : null;
        var endTimeView = timeItem.setting.enable_timer_off === '1' ? _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHStandardCell, {
          testID: "endTime",
          title: _LHCommonFunction.LHCommonLocalizableString.common_end,
          titleNumberOfLines: 1,
          description: endTime,
          descriptionNumberOfLines: 1,
          hasRightArrow: true,
          bottomSeparatorLine: true,
          press: function press() {
            _this8.setState({
              isShowEndDialog: true
            });
          }
        })) : null;
        var colorList = timeItem.setting.enable_timer_off === '1' && timeItem.setting.enable_timer_on === '0' ? null : _react.default.createElement(_reactNative.View, {
          style: _LHTimeLightEditPageStyle.default.colorContainer
        }, _react.default.createElement(_LHCommonUI.LHText, {
          style: _LHTimeLightEditPageStyle.default.colorfont
        }, _LHCommonFunction.LHCommonLocalizableString.common_color), _react.default.createElement(_reactNative.View, {
          style: _LHTimeLightEditPageStyle.default.colorList
        }, colorArr.map(function (item, index) {
          return _this8.renderSubColorView(item, index);
        })), _react.default.createElement(_reactNative.View, {
          style: [{
            marginHorizontal: 0,
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
            height: _LHCommonFunction.LHUiUtils.MiJiaBorderWidth
          }]
        }));
        return _react.default.createElement(_reactNative.View, {
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaWhite
          }
        }, startTimeView, endTimeView, repeatView, colorList), this.showStartTimePickDialog(), this.showEndTimePickDialog(), this.showRepeatDialog(), this.showRepeatCustomDialog());
      }
    }]);
    return LHTimeLightEditPage;
  }(_react.default.Component);

  exports.default = LHTimeLightEditPage;

  LHTimeLightEditPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var editTitle = navigation.getParam('title');
    var disable = navigation.getParam('disable');
    var timePass = navigation.getParam('timePass');
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: editTitle || '',
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        rightButtons: [{
          disable: timePass ? false : disable === undefined ? true : disable,
          type: 'deafultCompleteBtn',
          press: function press() {
            if (timePass || !disable) {
              Instance.save();
            }
          }
        }],
        leftButtons: [{
          type: 'deafultCloseBtn',
          press: function press() {
            Instance.back();
          }
        }]
      }))
    };
  };
},11369,[14305,14320,14323,14371,14377,14374,14386,10297,10033,10178,10004,11249,10757,10716,10734,11234,11372,11351,11183]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[1]);

  var LHNightLightEidtPageStyle = _reactNative.StyleSheet.create({
    colorContainer: {
      width: '100%',
      backgroundColor: 'white'
    },
    colorfont: {
      color: 'black',
      fontSize: _LHCommonFunction.LHUiUtils.GetPx(15),
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(10.5),
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(23)
    },
    colorList: {
      height: _LHCommonFunction.LHUiUtils.GetPx(40),
      width: '100%',
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(16.5),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(18.5),
      paddingHorizontal: _LHCommonFunction.LHUiUtils.GetPx(22),
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    colorBorder: {
      height: _LHCommonFunction.LHUiUtils.GetPx(42),
      width: _LHCommonFunction.LHUiUtils.GetPx(42),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(21),
      borderColor: '#B2B2B2',
      backgroundColor: 'white',
      justifyContent: 'center',
      alignItems: 'center'
    },
    color: {
      width: _LHCommonFunction.LHUiUtils.GetPx(36),
      height: _LHCommonFunction.LHUiUtils.GetPx(36),
      borderRadius: _LHCommonFunction.LHUiUtils.GetPx(18)
    }
  });

  exports.default = LHNightLightEidtPageStyle;
},11372,[10033,10004]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[11]);

  var _Dialog = _$$_REQUIRE(_dependencyMap[12]);

  var _Resources = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHTextUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _LHTimerIFTTTManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var Instance = null;
  var lazyScene = null;
  var originTimespan;
  var originOnparam;
  var fromAdd = false;
  var saving = false;

  var LHLazyClockTimerAddPage = function (_React$Component) {
    (0, _inherits2.default)(LHLazyClockTimerAddPage, _React$Component);

    function LHLazyClockTimerAddPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHLazyClockTimerAddPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLazyClockTimerAddPage).call(this, props));

      _this.willFocus = function () {
        _this.backHandler = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
          if (Instance) {
            Instance.goBack();
          }

          return true;
        });
      };

      _this.componentWillUnmount = function () {
        _this.deEmitter.remove();

        if (_this.backHandler) {
          _this.backHandler.remove();
        }

        _LHDoorBellHandler.default.setSoundPlaying(false);
      };

      _this.getPageData = function () {
        var data = [];
        var navigation = _this.props.navigation;
        var _this$state = _this.state,
            lazyClockRingIndex = _this$state.lazyClockRingIndex,
            lazyClockVolumn = _this$state.lazyClockVolumn,
            timespan = _this$state.timespan,
            onFilter = _this$state.onFilter;
        data.push({
          testID: 'addClockRepeatItem',
          title: _LHLocalizableString.default.mi_linuxHub_timersetting_repeat,
          rightDescription: _LHTimerIFTTTManager.default.getPeriodStr(timespan, onFilter),
          press: function press() {
            _this.setState({
              choiceDialogVisible: 1
            });
          }
        }, {
          testID: 'addClockRingItem',
          title: _LHLocalizableString.default.mi_linuxHub_setting_bell,
          rightDescription: _LHTextUtils.default.armSoundName(2, lazyClockRingIndex),
          press: function press() {
            if (_this.backHandler) {
              _this.backHandler.remove();
            }

            navigation.navigate('LHLazyClockRingPage', {
              lazyClockRingIndex: lazyClockRingIndex,
              lazyClockVolumn: lazyClockVolumn
            });
          }
        }, {
          title: _LHLocalizableString.default.mi_linuxHub_setting_volume,
          showSliderView: true,
          sliderProps: {
            minimumValue: 1,
            value: parseInt(lazyClockVolumn, 10)
          },
          sliderStyle: {
            thumbTintColor: _PluginConfig.default.HubMainColor,
            minimumTrackTintColor: _PluginConfig.default.HubMainColor,
            thumbStyle: _PluginConfig.default.sliderThumbStyle
          },
          valueStyle: {
            color: _PluginConfig.default.HubMainColor
          },
          onSlidingComplete: function onSlidingComplete(value) {
            var titleDisable = _this.equalsAsFirstSight(lazyClockRingIndex, value, timespan);

            _this.setState({
              lazyClockVolumn: value,
              titleDisable: titleDisable
            });

            var clockRingIndex = _this.state.lazyClockRingIndex;

            _LHDoorBellHandler.default.playDoorbellMusic(clockRingIndex, value);
          }
        });
        return [{
          data: data
        }];
      };

      _this.saveSceneData = function () {
        if (lazyScene === null) {
          return;
        }

        if (saving) {
          return;
        }

        saving = true;
        var navigation = _this.props.navigation;
        var _this$state2 = _this.state,
            lazyClockRingIndex = _this$state2.lazyClockRingIndex,
            lazyClockVolumn = _this$state2.lazyClockVolumn,
            timespan = _this$state2.timespan;
        var _lazyScene = lazyScene,
            setting = _lazyScene.setting;
        var fromEnable = setting.enable_timer_on,
            toEnable = setting.enable_timer_off;
        var onParam = [];
        onParam.push('on');
        onParam.push(String(lazyClockRingIndex));
        onParam.push(lazyClockVolumn);

        var timeSlot = _LHCommonFunction.LHTimeSpanUtils.getTimeSlotToCloud(timespan, fromEnable === '1', toEnable === '1');

        var fromTime = timeSlot.fromTime,
            toTime = timeSlot.toTime;

        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
        });

        _LHTimerIFTTTManager.default.editClockTimerScene(lazyScene, onParam, fromTime, toTime, function () {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          var update = navigation.state.params.update;
          update();
          navigation.goBack();
          saving = false;
        }, function () {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);

          saving = false;
        });
      };

      _this.goBack = function () {
        var navigation = _this.props.navigation;
        var _this$state3 = _this.state,
            lazyClockRingIndex = _this$state3.lazyClockRingIndex,
            lazyClockVolumn = _this$state3.lazyClockVolumn,
            timespan = _this$state3.timespan;

        if (originOnparam === undefined && fromAdd && lazyClockRingIndex === 20 && lazyClockVolumn === 50 && _LHTimerIFTTTManager.default.equalsAsTimespan(_LHCommonFunction.LHTimeSpanUtils.DEFAULT_TIME_SPAN(), timespan)) {
          navigation.goBack();
          return;
        }

        if (_this.equalsAsFirstSight(lazyClockRingIndex, lazyClockVolumn, timespan)) {
          navigation.goBack();
        } else {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
            message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
            messageStyle: {
              textAlign: 'center'
            },
            confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            confirmStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            onConfirm: function onConfirm() {
              navigation.goBack();
            }
          });
        }
      };

      _this.equalsAsFirstSight = function (lazyClockRingIndex, lazyClockVolumn, timespan) {
        if (originOnparam === undefined || originTimespan === undefined || lazyScene === null) {
          return false;
        }

        var navigation = _this.props.navigation;
        var isMustModify = navigation.state.params.isMustModify;

        if (isMustModify) {
          return false;
        }

        var onParam = [];
        onParam.push('on');
        onParam.push(String(lazyClockRingIndex));
        onParam.push(lazyClockVolumn);

        if (JSON.stringify(originOnparam) === JSON.stringify(onParam) && _LHTimerIFTTTManager.default.equalsAsTimespan(originTimespan, timespan)) {
          return true;
        }

        return false;
      };

      _this.dialogSelected = function (data) {
        var _this$state4 = _this.state,
            lazyClockRingIndex = _this$state4.lazyClockRingIndex,
            lazyClockVolumn = _this$state4.lazyClockVolumn,
            timespan = _this$state4.timespan;

        if (data[0] === 2) {
          _this.setState({
            choiceDialogVisible: 2
          });
        } else {
          var repeat = _LHTimerIFTTTManager.default.getRepeatFromPosition(data[0]);

          var wday = repeat.wday,
              filter = repeat.filter;
          timespan.wday = wday;

          var titleDisable = _this.equalsAsFirstSight(lazyClockRingIndex, lazyClockVolumn, timespan);

          _this.setState({
            onFilter: filter,
            titleDisable: titleDisable
          });
        }
      };

      Instance = (0, _assertThisInitialized2.default)(_this);
      var _navigation = _this.props.navigation;
      var _navigation$state$par = _navigation.state.params,
          scene = _navigation$state$par.scene,
          isAdd = _navigation$state$par.isAdd,
          _isMustModify = _navigation$state$par.isMustModify;
      lazyScene = (0, _extends2.default)(scene, {});

      if (isAdd) {
        fromAdd = true;
        _this.state = {
          timespan: _LHCommonFunction.LHTimeSpanUtils.DEFAULT_TIME_SPAN(),
          lazyClockRingIndex: 20,
          lazyClockVolumn: 50,
          choiceDialogVisible: 0,
          titleDisable: false,
          onFilter: _onFilter
        };
        originTimespan = undefined;
        originOnparam = undefined;
        return (0, _possibleConstructorReturn2.default)(_this);
      }

      var _setting = scene.setting;
      var _fromTime = _setting.on_time,
          _toTime = _setting.off_time,
          _fromEnable = _setting.enable_timer_on,
          _toEnable = _setting.enable_timer_off,
          _onParam = _setting.on_param,
          _onFilter = _setting.on_filter;

      var result = _LHCommonFunction.LHTimeSpanUtils.getSceneTimerSpan(_fromTime, _toTime, _fromEnable, _toEnable);

      var timeSpan = result.timeSpan;
      _this.state = {
        timespan: timeSpan,
        lazyClockRingIndex: parseInt(_onParam[1], 10),
        lazyClockVolumn: _onParam[2],
        choiceDialogVisible: 0,
        titleDisable: !_isMustModify,
        onFilter: _onFilter
      };
      originTimespan = JSON.parse(JSON.stringify(timeSpan));
      originOnparam = JSON.parse(JSON.stringify(_onParam));
      return _this;
    }

    (0, _createClass2.default)(LHLazyClockTimerAddPage, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.deEmitter = _reactNative.DeviceEventEmitter.addListener('LazyClockRingIndex', function (result) {
          var _this2$state = _this2.state,
              lazyClockVolumn = _this2$state.lazyClockVolumn,
              timespan = _this2$state.timespan;

          var titleDisable = _this2.equalsAsFirstSight(result, lazyClockVolumn, timespan);

          _this2.setState({
            lazyClockRingIndex: result,
            titleDisable: titleDisable
          });
        });
        var navigation = this.props.navigation;
        navigation.addListener('willFocus', function () {
          _this2.willFocus();
        });
      }
    }, {
      key: "updateMinValue",
      value: function updateMinValue(data) {
        var newValue = data.newValue;
        var _this$state5 = this.state,
            lazyClockRingIndex = _this$state5.lazyClockRingIndex,
            lazyClockVolumn = _this$state5.lazyClockVolumn,
            timespan = _this$state5.timespan;
        timespan.from.min = Number(newValue);
        var titleDisable = this.equalsAsFirstSight(lazyClockRingIndex, lazyClockVolumn, timespan);
        this.setState({
          titleDisable: titleDisable
        });
      }
    }, {
      key: "updateHourValue",
      value: function updateHourValue(data) {
        var newValue = data.newValue;
        var _this$state6 = this.state,
            lazyClockRingIndex = _this$state6.lazyClockRingIndex,
            lazyClockVolumn = _this$state6.lazyClockVolumn,
            timespan = _this$state6.timespan;
        timespan.from.hour = Number(newValue);
        var titleDisable = this.equalsAsFirstSight(lazyClockRingIndex, lazyClockVolumn, timespan);
        this.setState({
          titleDisable: titleDisable
        });
      }
    }, {
      key: "renderChoiceDialog",
      value: function renderChoiceDialog(visible, choiceDialogData) {
        var _this3 = this;

        var _this$state7 = this.state,
            choiceDialogVisible = _this$state7.choiceDialogVisible,
            timespan = _this$state7.timespan,
            lazyClockRingIndex = _this$state7.lazyClockRingIndex,
            lazyClockVolumn = _this$state7.lazyClockVolumn;
        return _react.default.createElement(_Dialog.ChoiceDialog, {
          visible: choiceDialogVisible === visible,
          title: choiceDialogData.title,
          type: choiceDialogData.type,
          options: choiceDialogData.options,
          color: _PluginConfig.default.HubMainColor,
          icon: _Resources.default.GuardSetting.selectIcon,
          selectedIndexArray: choiceDialogData.selectedIndexArray,
          onDismiss: function onDismiss() {
            _this3.setState({
              choiceDialogVisible: 0
            });
          },
          onSelect: this.dialogSelected,
          buttons: [{
            text: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            callback: function callback() {
              _this3.setState({
                choiceDialogVisible: 0
              });
            }
          }, {
            text: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            style: {
              color: _PluginConfig.default.HubMainColor
            },
            callback: function callback(result) {
              var wday = result.map(function (value) {
                return value === 6 ? 0 : value + 1;
              });
              timespan.wday = wday;

              var titleDisable = _this3.equalsAsFirstSight(lazyClockRingIndex, lazyClockVolumn, timespan);

              _this3.setState({
                choiceDialogVisible: 0,
                titleDisable: titleDisable
              });
            }
          }]
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var _this$state8 = this.state,
            timespan = _this$state8.timespan,
            choiceDialogVisible = _this$state8.choiceDialogVisible,
            onFilter = _this$state8.onFilter,
            titleDisable = _this$state8.titleDisable;
        var defaultHourValue = timespan.from.hour;
        var defaultMinValue = timespan.from.min;
        var pageData = this.getPageData();

        var choiceDialogData = _LHTimerIFTTTManager.default.getChoiceDialogData(choiceDialogVisible, timespan, onFilter);

        return _react.default.createElement(_reactNative.View, {
          testID: "lazyClockTimerList",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('lazyClockTimerList'),
          style: {
            flex: 1,
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
          }
        }, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
          title: _LHLocalizableString.default.mi_linuxHub_add_lzayclock,
          style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
          leftButtons: [{
            type: 'deafultCloseBtn',
            press: function press() {
              if (Instance) {
                Instance.goBack();
              }
            }
          }],
          rightButtons: [{
            type: 'deafultCompleteBtn',
            disable: titleDisable,
            press: function press() {
              if (!titleDisable && Instance) {
                Instance.saveSceneData();
              }
            }
          }]
        }), _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_LHCommonUI.LHDoubleStringSpinner, {
          defaultMinValue: defaultMinValue,
          defaultHourValue: defaultHourValue,
          onHourChanged: function onHourChanged(data) {
            _this4.updateHourValue(data);
          },
          onMinChanged: function onMinChanged(data) {
            _this4.updateMinValue(data);
          }
        }), _react.default.createElement(_LHCommonUI.LHSeparator, {
          style: {
            backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaLineColor,
            alignSelf: 'flex-end'
          }
        }), _react.default.createElement(_LHCommonUI.LHStandardList, {
          style: {
            marginTop: _LHCommonFunction.LHUiUtils.GetPx(10)
          },
          data: pageData
        })), this.renderChoiceDialog(1, choiceDialogData), this.renderChoiceDialog(2, choiceDialogData));
      }
    }]);
    return LHLazyClockTimerAddPage;
  }(_react.default.Component);

  exports.default = LHLazyClockTimerAddPage;

  LHLazyClockTimerAddPage.navigationOptions = function () {
    return {
      header: null
    };
  };
},11375,[14305,14344,14320,14323,14371,14377,14374,14386,10297,10033,10178,10004,10755,10757,11183,11234,11321,11291,11351,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[10]);

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHLinkageAlarmManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHIFTTTConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _LHJsonUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var commonStyles = _reactNative.StyleSheet.create({
    footerViewStyle: {
      marginTop: _LHCommonFunction.LHUiUtils.GetPx(10),
      marginBottom: _LHCommonFunction.LHUiUtils.GetPx(24) + _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight,
      marginLeft: _LHCommonFunction.LHUiUtils.GetPx(24),
      marginRight: _LHCommonFunction.LHUiUtils.GetPx(24),
      backgroundColor: _LHCommonFunction.LHUiUtils.MiJiaBackgroundGray
    },
    footerViewTextStyle: {
      fontSize: 12,
      textAlign: 'left',
      lineHeight: _LHCommonFunction.LHUiUtils.GetPx(16),
      color: _LHCommonFunction.LHUiUtils.MiJiaDescriptionColor
    }
  });

  var fetchLinkageIDList = [];
  var Instance = null;
  var saving = false;

  var LHLinkageAlarmPage = function (_React$Component) {
    (0, _inherits2.default)(LHLinkageAlarmPage, _React$Component);

    function LHLinkageAlarmPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHLinkageAlarmPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLinkageAlarmPage).call(this, props));

      _this.saveSceneData = function () {
        var _this$state = _this.state,
            devicesList = _this$state.devicesList,
            linkageDeviceIDList = _this$state.linkageDeviceIDList,
            sceneIDList = _this$state.sceneIDList,
            titleDisable = _this$state.titleDisable;
        var navigation = _this.props.navigation;
        var linkageDeviceList = [];
        devicesList.forEach(function (device) {
          if (linkageDeviceIDList.includes(device.did)) {
            linkageDeviceList.push(device);
          }
        });

        if (linkageDeviceIDList.length === 1 || titleDisable) {
          return;
        }

        if (saving) {
          return;
        }

        saving = true;

        _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
        });

        _LHLinkageAlarmManager.default.createLinkageAlarm(linkageDeviceList, sceneIDList, function (res) {
          console.log(res);

          _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LinkageAlarmIDCacheKey, JSON.stringify(linkageDeviceIDList));

          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          navigation.goBack();
          saving = false;
        }, function (error) {
          _LHCommonFunction.LHDialogUtils.LoadingDialogHide();

          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);

          console.warn(error);
          saving = false;
        });
      };

      _this.goBack = function () {
        var navigation = _this.props.navigation;
        var linkageDeviceIDList = _this.state.linkageDeviceIDList;

        if (_LHJsonUtils.default.equalArray(linkageDeviceIDList, fetchLinkageIDList)) {
          navigation.goBack();
        } else {
          _LHCommonFunction.LHDialogUtils.MessageDialogShow({
            title: _LHLocalizableString.default.mi_linuxHub_go_back_title,
            message: _LHLocalizableString.default.mi_linuxHub_go_back_content,
            messageStyle: {
              textAlign: 'center'
            },
            confirm: _LHCommonFunction.LHCommonLocalizableString.common_ok,
            cancel: _LHCommonFunction.LHCommonLocalizableString.common_cancel,
            confirmStyle: {
              color: _PluginConfig.default.HubMainColor
            },
            onConfirm: function onConfirm() {
              navigation.goBack();
            }
          });
        }
      };

      Instance = (0, _assertThisInitialized2.default)(_this);
      _this.state = {
        devicesList: [],
        linkageDeviceIDList: [],
        sceneIDList: [],
        titleDisable: true
      };
      return _this;
    }

    (0, _createClass2.default)(LHLinkageAlarmPage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.backHandler = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {
          if (Instance) {
            Instance.goBack();
          }

          return true;
        });
        this.getSupportLinkageAlarmGatewayList();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.backHandler.remove();
      }
    }, {
      key: "getSupportLinkageAlarmGatewayList",
      value: function getSupportLinkageAlarmGatewayList() {
        var _this2 = this;

        _LHCommonFunction.LHMiServer.GetHostStorage(_LHIFTTTConfig.default.LinkageAlarmCacheKey).then(function (res) {
          console.log('LinkageAlarmCacheKey', res);

          if (res) {
            _this2.setState({
              devicesList: JSON.parse(res)
            });
          }
        }).catch(function (error) {
          console.log(error);
        });

        _LHCommonFunction.LHMiServer.GetHostStorage(_LHIFTTTConfig.default.LinkageAlarmIDCacheKey).then(function (res) {
          console.log('LinkageAlarmIDCacheKey', res);

          if (res) {
            fetchLinkageIDList = res;

            _this2.setState({
              linkageDeviceIDList: JSON.parse(res)
            });
          }
        }).catch(function (error) {
          console.log(error);
        });

        _LHLinkageAlarmManager.default.getSupportLinkageAlarmGatewayList(function (res) {
          console.log('summer getSupportLinkageAlarmGatewayList', res);
          var devicesList = res.devicesList,
              linkageIDList = res.linkageIDList,
              sceneIDList = res.sceneIDList;

          _LHCommonFunction.LHMiServer.SetHostStorage(_LHIFTTTConfig.default.LinkageAlarmIDCacheKey, JSON.stringify(linkageIDList));

          fetchLinkageIDList = linkageIDList;

          _this2.setState({
            devicesList: devicesList,
            linkageDeviceIDList: linkageIDList,
            sceneIDList: sceneIDList
          });
        }, function (err) {
          _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_tips_request_failed);

          console.warn(err);
        });
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this3 = this;

        var _this$state2 = this.state,
            devicesList = _this$state2.devicesList,
            linkageDeviceIDList = _this$state2.linkageDeviceIDList;
        var linkageIDList = JSON.parse(JSON.stringify(linkageDeviceIDList));
        var data = [];
        devicesList.forEach(function (device) {
          var switchEnable = linkageIDList.includes(device.did);
          data.push({
            title: device.name,
            titleNumberOfLines: 2,
            description: device.isOnline ? '' : _LHLocalizableString.default.mi_linuxHub_offline,
            hideRightArrow: true,
            hideTopSeparatorLine: false,
            hasCheckBox: true,
            checkBoxActive: switchEnable,
            rowContainerStyle: {
              height: _LHCommonFunction.LHUiUtils.GetPx(60)
            },
            textContainer: {
              alignSelf: 'center'
            },
            press: function press() {
              if (linkageIDList.length > 9 && !switchEnable) {
                _LHCommonFunction.LHToastUtils.showShortToast(_LHLocalizableString.default.mi_linuxHub_linkage_alarm_number_ten);

                return;
              }

              var enable = !switchEnable;

              if (enable) {
                if (!linkageIDList.includes(device.did)) {
                  linkageIDList.push(device.did);
                }
              } else {
                var index = linkageIDList.indexOf(device.did);

                if (index > -1) {
                  linkageIDList.splice(index, 1);
                }
              }

              var titleDisable = linkageIDList.length === 1 || _LHJsonUtils.default.equalArray(linkageIDList, fetchLinkageIDList);

              _this3.setState({
                devicesList: devicesList,
                linkageDeviceIDList: linkageIDList,
                titleDisable: titleDisable
              });

              _this3.forceUpdate();
            }
          });
        });
        return [{
          title: '',
          data: data
        }];
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        var titleDisable = this.state.titleDisable;
        return _react.default.createElement(_reactNative.View, {
          testID: "linkageAlarm",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('linkageAlarm'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
          title: _LHLocalizableString.default.mi_linuxHub_linkage_alarm,
          style: [_LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom],
          leftButtons: [{
            type: 'deafultCloseBtn',
            press: function press() {
              if (Instance) {
                Instance.goBack();
              }
            }
          }],
          rightButtons: [{
            type: 'deafultCompleteBtn',
            disable: titleDisable,
            press: function press() {
              if (Instance) {
                Instance.saveSceneData();
              }
            }
          }]
        }), _react.default.createElement(_LHCommonUI.LHStandardListSwipeout, {
          data: pageData,
          ListEmptyComponent: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Image, {
            style: _LHCommonUI.LHCommonStyles.emptyImg,
            source: _LHCommonUI.LHCommonIcon.common.emptyImage.normal
          })),
          ListFooterComponent: _react.default.createElement(_reactNative.View, {
            style: commonStyles.footerViewStyle
          }, _react.default.createElement(_LHCommonUI.LHText, {
            style: commonStyles.footerViewTextStyle
          }, _LHLocalizableString.default.mi_linuxHub_linkage_alarm_footer_text))
        }));
      }
    }]);
    return LHLinkageAlarmPage;
  }(_react.default.Component);

  LHLinkageAlarmPage.navigationOptions = function () {
    return {
      header: null
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHLinkageAlarmPage);

  exports.default = _default;
},11378,[14305,14320,14323,14371,14377,14374,14386,10297,10033,10004,10178,11249,11324,11183,11276,11357]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[9]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHDoorBellHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _LHTextUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var originDefaultTone;

  var LHLazyClockRingPage = function (_Component) {
    (0, _inherits2.default)(LHLazyClockRingPage, _Component);

    function LHLazyClockRingPage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHLazyClockRingPage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHLazyClockRingPage).call(this, props));
      _this.state = {
        clockRingList: [],
        defaultTone: 20,
        toneVolumn: 20
      };
      var navigation = _this.props.navigation;

      if (navigation.state.params !== undefined) {
        var _navigation$state$par = navigation.state.params,
            lazyClockRingIndex = _navigation$state$par.lazyClockRingIndex,
            lazyClockVolumn = _navigation$state$par.lazyClockVolumn;
        _this.state = {
          defaultTone: lazyClockRingIndex,
          toneVolumn: lazyClockVolumn
        };
      }

      return _this;
    }

    (0, _createClass2.default)(LHLazyClockRingPage, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        _LHCommonFunction.LHMiServer.GetHostStorage('LazyClockMusicList').then(function (res) {
          _this2.buildState(res);
        });

        _LHDoorBellHandler.default.fetchLazyClockMusicList().then(function (res) {
          _LHCommonFunction.LHMiServer.SetHostStorage('LazyClockMusicList', res);

          _this2.buildState(res);
        }).catch(function () {});
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _LHDoorBellHandler.default.setSoundPlaying(false);
      }
    }, {
      key: "getPageData",
      value: function getPageData() {
        var _this3 = this;

        var data = [];
        var _this$state = this.state,
            clockRingList = _this$state.clockRingList,
            defaultTone = _this$state.defaultTone,
            toneVolumn = _this$state.toneVolumn;

        if (!Array.isArray(clockRingList) || clockRingList.length === 0) {
          return [{
            data: data
          }];
        }

        clockRingList.forEach(function (element) {
          var index = element.index;
          data.push({
            title: _LHTextUtils.default.armSoundName(2, index),
            hideRightArrow: true,
            active: defaultTone === index,
            activeIconStyle: {
              tintColor: _PluginConfig.default.HubMainColor
            },
            titleStyle: defaultTone === index ? {
              color: _PluginConfig.default.HubMainColor
            } : null,
            press: function press() {
              originDefaultTone = defaultTone;

              _LHDoorBellHandler.default.playDoorbellMusic(index, toneVolumn).then(function () {}).catch(function () {
                _LHCommonFunction.LHToastUtils.showShortToast(_LHCommonFunction.LHCommonLocalizableString.common_operation_fail);

                _this3.setState({
                  defaultTone: originDefaultTone
                });
              });

              _this3.setState({
                defaultTone: index
              });

              _reactNative.DeviceEventEmitter.emit('LazyClockRingIndex', index);
            }
          });
        });
        return [{
          data: data
        }];
      }
    }, {
      key: "buildState",
      value: function buildState(res) {
        if (res) {
          var clockRingList = res.clockRingList;
          this.setState({
            clockRingList: clockRingList
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var pageData = this.getPageData();
        return _react.default.createElement(_reactNative.View, {
          testID: "lazyClockRingPage",
          accessibilityLabel: _LHCommonFunction.LHAppiumUtils.GetAccessibilityLabel('lazyClockRingPage'),
          style: _LHCommonUI.LHCommonStyles.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardListSwipeout, {
          data: pageData
        }));
      }
    }]);
    return LHLazyClockRingPage;
  }(_react.Component);

  exports.default = LHLazyClockRingPage;

  LHLazyClockRingPage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_setting_bell,
        style: _LHCommonUI.LHCommonStyles.navigatorWithBorderBotoom,
        onPressLeft: function onPressLeft() {
          navigation.goBack();
        }
      }))
    };
  };
},11381,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10178,10004,11249,11183,11291,11321]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _miot = _$$_REQUIRE(_dependencyMap[12]);

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[13]);

  var _LHCommonUI = _$$_REQUIRE(_dependencyMap[14]);

  var _LHCommonStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LHMusicUtils = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[17]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var Instance;

  var DefaultIftVolume = function DefaultIftVolume() {
    return 50;
  };

  var LHCustomScenePage = function (_React$Component) {
    (0, _inherits2.default)(LHCustomScenePage, _React$Component);

    function LHCustomScenePage(props) {
      var _this;

      (0, _classCallCheck2.default)(this, LHCustomScenePage);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHCustomScenePage).call(this, props));
      Instance = (0, _assertThisInitialized2.default)(_this);
      var obj = _miot.Package.entryInfo.payload.value;
      var value;

      if (typeof obj === 'string' && obj !== '') {
        value = JSON.parse(obj);
      } else if (Array.isArray(obj)) {
        value = obj;
      }

      if (Array.isArray(value) && value.length > 1) {
        var _value = value,
            _value2 = (0, _slicedToArray2.default)(_value, 2),
            currentMid = _value2[0],
            volume = _value2[1];

        _this.state = {
          currentMid: currentMid,
          volume: volume
        };
        var _navigation = _this.props.navigation;

        _navigation.setParams({
          currentMid: currentMid
        });

        return (0, _possibleConstructorReturn2.default)(_this);
      }

      _this.state = {
        currentMid: undefined,
        volume: undefined
      };
      var navigation = _this.props.navigation;
      navigation.setParams({
        currentMid: undefined
      });
      return _this;
    }

    (0, _createClass2.default)(LHCustomScenePage, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.subscription = _miot.PackageEvent.packageWillExit.addListener(function () {
          _LHMusicUtils.default.setSoundPlaying(false).catch();
        });
        this.getMuaicList();
        var volume = this.state.volume;

        if (typeof volume === 'undefined') {
          this.setState({
            volume: DefaultIftVolume()
          });
          this.getGatewayVolume();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.subscription.remove();
      }
    }, {
      key: "onDone",
      value: function onDone() {
        var _this$state = this.state,
            currentMid = _this$state.currentMid,
            volume = _this$state.volume;
        var action = _miot.Package.entryInfo;
        action.payload = (0, _extends2.default)({}, action.payload, {
          value: JSON.stringify([currentMid, volume])
        });

        _LHMusicUtils.default.setSoundPlaying(false).catch();

        _miot.Package.exit(action);
      }
    }, {
      key: "onExit",
      value: function onExit() {
        _LHMusicUtils.default.setSoundPlaying(false).catch();

        _miot.Package.exit();
      }
    }, {
      key: "getGatewayVolume",
      value: function getGatewayVolume() {
        var _this2 = this;

        _LHMusicUtils.default.getGatewayVolume().then(function (res) {
          var gateway_volume = res.gateway_volume;

          _this2.setState({
            volume: gateway_volume
          });
        }).catch();
      }
    }, {
      key: "getMuaicList",
      value: function getMuaicList() {
        var _this3 = this;

        Promise.all([_LHMusicUtils.default.restoreMusicGroupWithType(_LHMusicUtils.MusicTypeAlarm), _LHMusicUtils.default.restoreMusicGroupWithType(_LHMusicUtils.MusicTypeClock), _LHMusicUtils.default.restoreMusicGroupWithType(_LHMusicUtils.MusicTypeBell)]).then(function (groups) {
          var _groups = (0, _slicedToArray2.default)(groups, 3),
              alarmList = _groups[0],
              clockList = _groups[1],
              bellList = _groups[2];

          if (!(_this3.isValidBellList(alarmList) || _this3.isValidBellList(clockList) || _this3.isValidBellList(bellList))) {
            throw new Error('no bell list cache');
          }

          _this3.setState({
            alarmList: alarmList,
            clockList: clockList,
            bellList: bellList
          });

          _this3.fetchMuaicList(false);
        }).catch(function () {
          _this3.fetchMuaicList(true);
        });
      }
    }, {
      key: "fetchMuaicList",
      value: function fetchMuaicList() {
        var _this4 = this;

        var showLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (showLoading) _LHCommonFunction.LHDialogUtils.LoadingDialogShow({
          title: _LHCommonFunction.LHCommonLocalizableString.common_log_loading
        });

        _LHMusicUtils.default.fetchAllMusicGroup().then(function (obj) {
          var alarmList = obj[_LHMusicUtils.default.ListKey(_LHMusicUtils.MusicTypeAlarm)],
              clockList = obj[_LHMusicUtils.default.ListKey(_LHMusicUtils.MusicTypeClock)],
              bellList = obj[_LHMusicUtils.default.ListKey(_LHMusicUtils.MusicTypeBell)];

          _LHMusicUtils.default.saveMusicGroupWithType(_LHMusicUtils.MusicTypeAlarm, alarmList);

          _LHMusicUtils.default.saveMusicGroupWithType(_LHMusicUtils.MusicTypeClock, clockList);

          _LHMusicUtils.default.saveMusicGroupWithType(_LHMusicUtils.MusicTypeBell, bellList);

          _this4.setState({
            alarmList: alarmList,
            clockList: clockList,
            bellList: bellList
          });

          if (showLoading) _LHCommonFunction.LHDialogUtils.LoadingDialogHide();
        }).catch(function () {
          if (showLoading) _LHCommonFunction.LHDialogUtils.LoadingDialogHide();
        });
      }
    }, {
      key: "isValidBellList",
      value: function isValidBellList(list) {
        return !!list && Array.isArray(list) && list.length !== 0;
      }
    }, {
      key: "configPageData",
      value: function configPageData() {
        var _this5 = this;

        var musicSectionWithType = function musicSectionWithType(type) {
          var _this5$state = _this5.state,
              alarmList = _this5$state.alarmList,
              clockList = _this5$state.clockList,
              bellList = _this5$state.bellList,
              currentMid = _this5$state.currentMid;
          var list;
          var sectionTitle;

          switch (type) {
            case _LHMusicUtils.MusicTypeAlarm:
              list = alarmList;
              sectionTitle = _LHLocalizableString.default.mi_linuxHub_alarm_music;
              break;

            case _LHMusicUtils.MusicTypeClock:
              list = clockList;
              sectionTitle = _LHLocalizableString.default.mi_linuxHub_setting_doorbell_tone4;
              break;

            case _LHMusicUtils.MusicTypeBell:
              list = bellList;
              sectionTitle = _LHLocalizableString.default.mi_linuxHub_setting_doorbell_tone1;
              break;

            default:
              break;
          }

          if (!_this5.isValidBellList(list)) return undefined;
          var cells = list.map(function (item) {
            var mid = item.mid;
            return {
              title: _LHMusicUtils.default.MusicName(type, item),
              active: currentMid === mid,
              hideRightArrow: true,
              activeIconStyle: {
                tintColor: _PluginConfig.default.HubMainColor
              },
              titleStyle: currentMid === mid ? {
                color: _PluginConfig.default.HubMainColor
              } : null,
              press: function press() {
                var volume = _this5.state.volume;

                _this5.setState({
                  currentMid: mid
                });

                var navigation = _this5.props.navigation;
                navigation.setParams({
                  currentMid: mid
                });

                _LHMusicUtils.default.playMusic(mid, volume).catch();
              }
            };
          });
          return {
            title: sectionTitle,
            data: cells
          };
        };

        return [musicSectionWithType(_LHMusicUtils.MusicTypeAlarm), musicSectionWithType(_LHMusicUtils.MusicTypeClock), musicSectionWithType(_LHMusicUtils.MusicTypeBell)].filter(function (item) {
          return typeof item === 'object';
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        var pageData = this.configPageData();
        var volume = this.state.volume;
        return _react.default.createElement(_reactNative.View, {
          style: _LHCommonStyle.default.pageGrayStyle
        }, _react.default.createElement(_LHCommonUI.LHStandardList, {
          style: {
            flex: 1
          },
          data: pageData
        }), _react.default.createElement(_reactNative.View, {
          style: {
            backgroundColor: '#fff',
            justifyContent: 'flex-end',
            paddingBottom: _LHCommonFunction.LHDeviceUtils.AppHomeIndicatorHeight
          }
        }, _react.default.createElement(_LHCommonUI.LHSeparator, null), _react.default.createElement(_LHCommonUI.LHStandardCell, {
          showSliderView: true,
          title: _LHLocalizableString.default.mi_linuxHub_tone_volume,
          sliderProps: {
            minimumValue: 1,
            value: volume
          },
          sliderStyle: {
            minimumTrackTintColor: _PluginConfig.default.HubMainColor,
            thumbTintColor: _PluginConfig.default.HubMainColor
          },
          valueStyle: {
            color: _PluginConfig.default.HubMainColor
          },
          onSlidingComplete: function onSlidingComplete(value) {
            var mid = _this6.state.currentMid;

            _this6.setState({
              volume: value
            });

            if (typeof mid !== 'undefined') {
              _LHMusicUtils.default.playMusic(mid, value).catch();
            }
          }
        })));
      }
    }]);
    return LHCustomScenePage;
  }(_react.default.Component);

  LHCustomScenePage.navigationOptions = function (_ref) {
    var navigation = _ref.navigation;
    var mid = navigation.getParam('currentMid');
    var disable = typeof mid === 'undefined' || mid === null;
    return {
      header: _react.default.createElement(_reactNative.View, null, _react.default.createElement(_LHCommonUI.LHTitleBarCustom, {
        title: _LHLocalizableString.default.mi_linuxHub_play_specific_tone,
        style: [_LHCommonStyle.default.navigatorWithBorderBotoom],
        rightButtons: [{
          type: 'deafultCompleteBtn',
          disable: disable,
          press: function press() {
            if (disable) return;
            if (Instance) Instance.onDone();
          }
        }],
        leftButtons: [{
          type: 'deafultCloseBtn',
          press: function press() {
            if (Instance) Instance.onExit();
          }
        }]
      }))
    };
  };

  var _default = (0, _LHCommonFunction.LHPureRenderDecorator)(LHCustomScenePage);

  exports.default = _default;
},11384,[14308,14305,14344,14347,14320,14323,14371,14377,14374,14386,10297,10033,10074,10004,10178,11234,11183,11387,11249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MusicTypeBell = exports.MusicTypeClock = exports.MusicTypeAlarm = exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _LHCommonFunction = _$$_REQUIRE(_dependencyMap[10]);

  var _LHLocalizableString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _PluginConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _LHDeviceProfile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _MusicGroupIndex;

  var MusicTypeAlarm = 'MusicTypeAlarm';
  exports.MusicTypeAlarm = MusicTypeAlarm;
  var MusicTypeClock = 'MusicTypeClock';
  exports.MusicTypeClock = MusicTypeClock;
  var MusicTypeBell = 'MusicTypeBell';
  exports.MusicTypeBell = MusicTypeBell;
  var MusicGroupIndex = (_MusicGroupIndex = {}, (0, _defineProperty2.default)(_MusicGroupIndex, MusicTypeAlarm, 0), (0, _defineProperty2.default)(_MusicGroupIndex, MusicTypeBell, 1), (0, _defineProperty2.default)(_MusicGroupIndex, MusicTypeClock, 2), _MusicGroupIndex);

  var LHMusicUtils = function (_React$Component) {
    (0, _inherits2.default)(LHMusicUtils, _React$Component);

    function LHMusicUtils() {
      (0, _classCallCheck2.default)(this, LHMusicUtils);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LHMusicUtils).apply(this, arguments));
    }

    (0, _createClass2.default)(LHMusicUtils, null, [{
      key: "ListKey",
      value: function ListKey(type) {
        return type + 'List';
      }
    }, {
      key: "DefaultKey",
      value: function DefaultKey(type) {
        return type + 'Default';
      }
    }, {
      key: "MusicName",
      value: function MusicName(type, music) {
        var index = music.index;
        var intIndex = parseInt(index, 10) % 10;

        switch (type) {
          case MusicTypeAlarm:
            if (intIndex < 9 && intIndex >= 0) {
              return _LHLocalizableString.default['mi_linuxHub_arming_tone_name' + (intIndex + 1)];
            }

            break;

          case MusicTypeBell:
            if (intIndex < 8 && intIndex >= 0) {
              return _LHLocalizableString.default['mi_linuxHub_setting_doorbell_tone' + (intIndex + 1)];
            }

            break;

          case MusicTypeClock:
            if (intIndex < 10 && intIndex >= 0) {
              return _LHLocalizableString.default['mi_linuxHub_clock_tone' + (intIndex + 1)];
            }

            break;

          default:
            break;
        }

        return _LHLocalizableString.default.mi_linuxHub_setting_bell + index;
      }
    }, {
      key: "fetchAllMusicGroup",
      value: function fetchAllMusicGroup() {
        return Promise.all([LHMusicUtils.fetcherWithType(MusicTypeAlarm), LHMusicUtils.fetcherWithType(MusicTypeClock), LHMusicUtils.fetcherWithType(MusicTypeBell)]).then(function (groups) {
          var _groups = (0, _slicedToArray2.default)(groups, 3),
              alarms = _groups[0],
              clocks = _groups[1],
              bells = _groups[2];

          return (0, _extends2.default)({}, alarms, clocks, bells);
        });
      }
    }, {
      key: "playMusic",
      value: function playMusic(mid) {
        var volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
        return _LHCommonFunction.LHMiServer.SendRPCPayload('play_music_new', [mid, volume]);
      }
    }, {
      key: "setSoundPlaying",
      value: function setSoundPlaying() {
        var toPlay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var value = toPlay ? 'on' : 'off';
        return _LHCommonFunction.LHMiServer.SendRPCPayload('set_sound_playing', [value]);
      }
    }, {
      key: "getGatewayVolume",
      value: function getGatewayVolume() {
        return _LHDeviceProfile.default.getHubSettings().then(function (res) {
          return {
            gateway_volume: res.gateway_volume
          };
        });
      }
    }, {
      key: "saveMusicGroupWithType",
      value: function saveMusicGroupWithType(type, value) {
        var key = _PluginConfig.default.MusicCacheKey + '_' + type;

        if (typeof value === 'object') {
          _LHCommonFunction.LHMiServer.SetHostStorage(key, value);
        } else {
          throw new Error('saveMusicGroupWithType value is not object');
        }
      }
    }, {
      key: "restoreMusicGroupWithType",
      value: function restoreMusicGroupWithType(type) {
        var key = _PluginConfig.default.MusicCacheKey + '_' + type;
        return _LHCommonFunction.LHMiServer.GetHostStorage(key).then(function (value) {
          console.log('restoreMusicGroupWithType cache ' + key + ':' + JSON.stringify(value));
          return value;
        });
      }
    }, {
      key: "saveMusicGroup",
      value: function saveMusicGroup(value) {
        var key = _PluginConfig.default.MusicCacheKey;

        if (typeof value === 'object') {
          _LHCommonFunction.LHMiServer.SetHostStorage(key, value);
        } else {
          console.warn('saveMusicGroup value is not object');
        }
      }
    }, {
      key: "restoreMusicGroup",
      value: function restoreMusicGroup() {
        var key = _PluginConfig.default.MusicCacheKey;
        return _LHCommonFunction.LHMiServer.GetHostStorage(key).then(function (value) {
          console.log('restoreMusicGroup cache ' + key + ':' + JSON.stringify(value));

          if (value === null || typeof value === 'undefined') {
            throw new Error('restore null for key: ' + key);
          }

          return value;
        });
      }
    }]);
    return LHMusicUtils;
  }(_react.default.Component);

  exports.default = LHMusicUtils;

  LHMusicUtils.fetcherWithType = function (type) {
    return _LHCommonFunction.LHMiServer.SendRPCPayload('get_music_info', [MusicGroupIndex[type]]).then(function (res) {
      var listKey = LHMusicUtils.ListKey(type);
      var defaultKey = LHMusicUtils.DefaultKey(type);
      var result = res.result;
      var list = result.list,
          defaultTone = result.default;

      if (Array.isArray(list)) {
        var _ref;

        return _ref = {}, (0, _defineProperty2.default)(_ref, listKey, list), (0, _defineProperty2.default)(_ref, defaultKey, defaultTone), _ref;
      } else {
        throw new Error('invalid response of doorbell music_list');
      }
    });
  };
},11387,[14305,14344,14347,14320,14323,14371,14377,14386,14317,10297,10004,11183,11249,10730]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  ;
  (function () {
    var undefined;
    var VERSION = '4.17.11';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = 4294967294,
        HALF_MAX_ARRAY_LENGTH = 2147483647;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsApos = "['\u2019]",
        rsAstral = "[\\ud800-\\udfff]",
        rsBreak = "[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]",
        rsCombo = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",
        rsDigits = '\\d+',
        rsDingbat = "[\\u2700-\\u27bf]",
        rsLower = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
        rsMisc = "[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])",
        rsNonAstral = "[^\\ud800-\\udfff]",
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
        rsZWJ = "\\u200d";
    var rsMiscLower = "(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",
        rsMiscUpper = "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",
        rsOptContrLower = "(?:['\u2019](?:d|ll|m|re|s|t|ve))?",
        rsOptContrUpper = "(?:['\u2019](?:D|LL|M|RE|S|T|VE))?",
        reOptMod = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",
        rsOptVar = "[\\ufe0e\\ufe0f]?",
        rsOptJoin = "(?:\\u200d(?:" + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = "[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?" + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + ["[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?", rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|" + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=" + [rsBreak, rsUpper, '$'].join('|') + ')', "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=" + [rsBreak, "[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])", '$'].join('|') + ')', "[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?", "[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?", rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      "\u0100": 'A',
      "\u0102": 'A',
      "\u0104": 'A',
      "\u0101": 'a',
      "\u0103": 'a',
      "\u0105": 'a',
      "\u0106": 'C',
      "\u0108": 'C',
      "\u010A": 'C',
      "\u010C": 'C',
      "\u0107": 'c',
      "\u0109": 'c',
      "\u010B": 'c',
      "\u010D": 'c',
      "\u010E": 'D',
      "\u0110": 'D',
      "\u010F": 'd',
      "\u0111": 'd',
      "\u0112": 'E',
      "\u0114": 'E',
      "\u0116": 'E',
      "\u0118": 'E',
      "\u011A": 'E',
      "\u0113": 'e',
      "\u0115": 'e',
      "\u0117": 'e',
      "\u0119": 'e',
      "\u011B": 'e',
      "\u011C": 'G',
      "\u011E": 'G',
      "\u0120": 'G',
      "\u0122": 'G',
      "\u011D": 'g',
      "\u011F": 'g',
      "\u0121": 'g',
      "\u0123": 'g',
      "\u0124": 'H',
      "\u0126": 'H',
      "\u0125": 'h',
      "\u0127": 'h',
      "\u0128": 'I',
      "\u012A": 'I',
      "\u012C": 'I',
      "\u012E": 'I',
      "\u0130": 'I',
      "\u0129": 'i',
      "\u012B": 'i',
      "\u012D": 'i',
      "\u012F": 'i',
      "\u0131": 'i',
      "\u0134": 'J',
      "\u0135": 'j',
      "\u0136": 'K',
      "\u0137": 'k',
      "\u0138": 'k',
      "\u0139": 'L',
      "\u013B": 'L',
      "\u013D": 'L',
      "\u013F": 'L',
      "\u0141": 'L',
      "\u013A": 'l',
      "\u013C": 'l',
      "\u013E": 'l',
      "\u0140": 'l',
      "\u0142": 'l',
      "\u0143": 'N',
      "\u0145": 'N',
      "\u0147": 'N',
      "\u014A": 'N',
      "\u0144": 'n',
      "\u0146": 'n',
      "\u0148": 'n',
      "\u014B": 'n',
      "\u014C": 'O',
      "\u014E": 'O',
      "\u0150": 'O',
      "\u014D": 'o',
      "\u014F": 'o',
      "\u0151": 'o',
      "\u0154": 'R',
      "\u0156": 'R',
      "\u0158": 'R',
      "\u0155": 'r',
      "\u0157": 'r',
      "\u0159": 'r',
      "\u015A": 'S',
      "\u015C": 'S',
      "\u015E": 'S',
      "\u0160": 'S',
      "\u015B": 's',
      "\u015D": 's',
      "\u015F": 's',
      "\u0161": 's',
      "\u0162": 'T',
      "\u0164": 'T',
      "\u0166": 'T',
      "\u0163": 't',
      "\u0165": 't',
      "\u0167": 't',
      "\u0168": 'U',
      "\u016A": 'U',
      "\u016C": 'U',
      "\u016E": 'U',
      "\u0170": 'U',
      "\u0172": 'U',
      "\u0169": 'u',
      "\u016B": 'u',
      "\u016D": 'u',
      "\u016F": 'u',
      "\u0171": 'u',
      "\u0173": 'u',
      "\u0174": 'W',
      "\u0175": 'w',
      "\u0176": 'Y',
      "\u0177": 'y',
      "\u0178": 'Y',
      "\u0179": 'Z',
      "\u017B": 'Z',
      "\u017D": 'Z',
      "\u017A": 'z',
      "\u017C": 'z',
      "\u017E": 'z',
      "\u0132": 'IJ',
      "\u0133": 'ij',
      "\u0152": 'Oe',
      "\u0153": 'oe',
      "\u0149": "'n",
      "\u017F": 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined,
          symIterator = Symbol ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : undefined,
          symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < 199) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
          return result;
        }

        if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, 3, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, 3);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function predicate(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == 424 && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & 24,
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= -4;
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= -97;
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & 24) {
          bitmask &= -25;
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == 33) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < 131;
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == 384 && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      function safeGet(object, key) {
        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = 3;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, 5);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, 5, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -9007199254740991 && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -(1 / 0)) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -9007199254740991, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, 7, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},11503,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},13495,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  module.exports = _interopRequireDefault;
},14305,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  module.exports = _interopRequireDefault;
},14305,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();

    _getRequireWildcardCache = function _getRequireWildcardCache() {
      return cache;
    };

    return cache;
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        "default": obj
      };
    }

    var cache = _getRequireWildcardCache();

    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }

    newObj["default"] = obj;

    if (cache) {
      cache.set(obj, newObj);
    }

    return newObj;
  }

  module.exports = _interopRequireWildcard;
},14308,[14311]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj["default"] = obj;
      return newObj;
    }
  }

  module.exports = _interopRequireWildcard;
},14308,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
},14311,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(Object(source));

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  module.exports = _objectSpread;
},14314,[14317]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty;
},14317,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck;
},14320,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  module.exports = _createClass;
},14323,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},14326,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warning = _$$_REQUIRE(_dependencyMap[0]);

  var warnedKeys = {};

  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }

    warning(false, message);
    warnedKeys[key] = true;
  }

  module.exports = warnOnce;
},14329,[14332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _$$_REQUIRE(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},14332,[14335]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},14335,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('AccessibilityInfo');

  exports.default = _default;
},14338,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

  var turboModuleProxy = global.__turboModuleProxy;

  function get(name) {
    if (!global.RN$Bridgeless) {
      var legacyModule = NativeModules[name];

      if (legacyModule != null) {
        return legacyModule;
      }
    }

    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      return module;
    }

    return null;
  }

  function getEnforcing(name) {
    var module = get(name);
    (0, _invariant.default)(module != null, "TurboModuleRegistry.getEnforcing(...): '" + name + "' could not be found. " + 'Verify that a module by this name is registered in the native binary.');
    return module;
  }
},14341,[14305,14326,10042]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
},14344,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
},14344,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }

  module.exports = _slicedToArray;
},14347,[14350,14353,14356]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles;
},14350,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(arr, i) {
    if (!((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit;
},14353,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  module.exports = _nonIterableRest;
},14356,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableSpread = _$$_REQUIRE(_dependencyMap[2]);

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  module.exports = _toConsumableArray;
},14359,[14362,14365,14368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  module.exports = _arrayWithoutHoles;
},14362,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  module.exports = _iterableToArray;
},14365,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  module.exports = _nonIterableSpread;
},14368,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  module.exports = _possibleConstructorReturn;
},14371,[14311,14374]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},14374,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},14374,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf;
},14377,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var superPropBase = _$$_REQUIRE(_dependencyMap[0]);

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  module.exports = _get;
},14380,[14383]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  module.exports = _superPropBase;
},14383,[14377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  module.exports = _inherits;
},14386,[14389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf;
},14389,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      console.warn('Attempting to get config for view manager: ' + viewManagerName);
      return null;
    },
    getConstants: function getConstants() {
      return {};
    },
    getConstantsForViewManager: function getConstantsForViewManager(viewManagerName) {},
    getDefaultEventTypes: function getDefaultEventTypes() {
      return [];
    },
    playTouchSound: function playTouchSound() {},
    lazilyLoadView: function lazilyLoadView(name) {},
    createView: function createView(reactTag, viewName, rootTag, props) {},
    updateView: function updateView(reactTag, viewName, props) {},
    focus: function focus(reactTag) {},
    blur: function blur(reactTag) {},
    findSubviewIn: function findSubviewIn(reactTag, point, callback) {},
    dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandID, commandArgs) {},
    measure: function measure(reactTag, callback) {},
    measureInWindow: function measureInWindow(reactTag, callback) {},
    viewIsDescendantOf: function viewIsDescendantOf(reactTag, ancestorReactTag, callback) {},
    measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {},
    measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {},
    setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {},
    clearJSResponder: function clearJSResponder() {},
    configureNextLayoutAnimation: function configureNextLayoutAnimation(config, callback, errorCallback) {},
    removeSubviewsFromContainerWithID: function removeSubviewsFromContainerWithID(containerID) {},
    replaceExistingNonRootView: function replaceExistingNonRootView(reactTag, newReactTag) {},
    setChildren: function setChildren(containerTag, reactTags) {},
    manageChildren: function manageChildren(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {},
    setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental(enabled) {},
    sendAccessibilityEvent: function sendAccessibilityEvent(reactTag, eventType) {},
    showPopupMenu: function showPopupMenu(reactTag, items, error, success) {},
    dismissPopupMenu: function dismissPopupMenu() {}
  };
},14392,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _NativeUIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var UIManagerProperties = _$$_REQUIRE(_dependencyMap[5]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[6]);

  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;

  function _getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }

    return NativeUIManagerConstants;
  }

  var UIManagerJS = (0, _objectSpread2.default)({}, _NativeUIManager.default, {
    getConstants: function getConstants() {
      return _getConstants();
    },
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {
        try {
          viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
          viewManagerConfigs[viewManagerName] = null;
        }
      }

      var config = viewManagerConfigs[viewManagerName];

      if (config) {
        return config;
      }

      if (!global.nativeCallSyncHook) {
        return config;
      }

      if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);

        triedLoadingConfig.add(viewManagerName);

        if (result.viewConfig) {
          _getConstants()[viewManagerName] = result.viewConfig;
          lazifyViewManagerConfig(viewManagerName);
        }
      }

      return viewManagerConfigs[viewManagerName];
    }
  });
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;

  function lazifyViewManagerConfig(viewName) {
    var viewConfig = _getConstants()[viewName];

    viewManagerConfigs[viewName] = viewConfig;

    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }

  if (_getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
        get: function get() {
          return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  if (!global.nativeCallSyncHook) {
    Object.keys(_getConstants()).forEach(function (viewManagerName) {
      if (!UIManagerProperties.includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];
        }

        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
          get: function get() {
            console.warn("Accessing view manager configs directly off UIManager via UIManager['" + viewManagerName + "'] " + ("is no longer supported. Use UIManager.getViewManagerConfig('" + viewManagerName + "') instead."));
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }

  module.exports = UIManagerJS;
},14395,[14305,14314,14398,10042,10066,14404,10084]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('UIManager');

  exports.default = _default;
},14398,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('PlatformConstants');

  exports.default = _default;
},14401,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dismissPopupMenu', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'playTouchSound', 'removeRootView', 'removeSubviewsFromContainerWithID', 'replaceExistingNonRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'showPopupMenu', 'updateView', 'viewIsDescendantOf', 'PopupMenu', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
},14404,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = _$$_REQUIRE(_dependencyMap[0]);

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  module.exports = _objectWithoutProperties;
},14407,[14410]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose;
},14410,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose;
},14410,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var NativeDeviceInfo = NativeModule;
  var _default = NativeDeviceInfo;
  exports.default = _default;
},14413,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedLayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTransformPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var ImageStylePropTypes = _objectSpread({}, DeprecatedLayoutPropTypes, DeprecatedShadowPropTypesIOS, DeprecatedTransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(['center', 'contain', 'cover', 'repeat', 'stretch']),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: DeprecatedColorPropType,
    borderColor: DeprecatedColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: DeprecatedColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},14416,[14314,14419,14425,14428,14431,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _$$_REQUIRE(_dependencyMap[0]);

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},14419,[14422]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var matchers = getMatchers();
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }

    if (t < 0.5) {
      return q;
    }

    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";

  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var cachedMatchers;

  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }

    return cachedMatchers;
  }

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},14422,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap', 'wrap-reverse']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},14425,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedShadowPropTypesIOS = {
    shadowColor: DeprecatedColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},14428,[14419,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[1]);

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The transformMatrix style property is deprecated. Use `transform: [{ matrix: ... }]` instead.");
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The decomposedMatrix style property is deprecated. Use `transform: [...]` instead.");
    }
  };

  var DeprecatedTransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = DeprecatedTransformPropTypes;
},14431,[10318,10366]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTextStylePropTypes = _objectSpread({}, DeprecatedViewStylePropTypes, {
    color: DeprecatedColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: DeprecatedColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: DeprecatedColorPropType,
    textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = DeprecatedTextStylePropTypes;
},14434,[14314,14419,14437,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedLayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTransformPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var DeprecatedViewStylePropTypes = _objectSpread({}, DeprecatedLayoutPropTypes, DeprecatedShadowPropTypesIOS, DeprecatedTransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: DeprecatedColorPropType,
    borderColor: DeprecatedColorPropType,
    borderTopColor: DeprecatedColorPropType,
    borderRightColor: DeprecatedColorPropType,
    borderBottomColor: DeprecatedColorPropType,
    borderLeftColor: DeprecatedColorPropType,
    borderStartColor: DeprecatedColorPropType,
    borderEndColor: DeprecatedColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = DeprecatedViewStylePropTypes;
},14437,[14314,14419,14425,14428,14431,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewViewConfigAndroid = _$$_REQUIRE(_dependencyMap[2]);

  var registerGeneratedViewConfig = _$$_REQUIRE(_dependencyMap[3]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[4]);

  var NativeViewComponent;
  var viewConfig;
  {
    NativeViewComponent = requireNativeComponent('RCTView');
  }
  var __INTERNAL_VIEW_CONFIG = viewConfig;
  exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
  var _default = NativeViewComponent;
  exports.default = _default;
},14440,[10066,10114,14581,14584,10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2]),
      React = _$$_REQUIRE(_dependencyMap[3]),
      Scheduler = _$$_REQUIRE(_dependencyMap[4]);

  function ReactError(error) {
    error.name = "Invariant Violation";
    return error;
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          if (!JSCompiler_inline_result) throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      if (eventPluginOrder) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (namesToPlugins[pluginName]) throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type."));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw ReactError(Error("Touch object is missing identifier."));
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  });
  var instanceCache = new Map(),
      instanceProps = new Map();

  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (getInstanceFromNode(target)) throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function flushDiscreteUpdatesImpl() {}

  var isInsideEventHandler = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) if (flushDiscreteUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
      }
    });
  }

  ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };

  getInstanceFromNode = getInstanceFromTag;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    var tag = inst.stateNode._nativeTag;
    undefined === tag && (tag = inst.stateNode.canonical._nativeTag);
    if (!tag) throw ReactError(Error("All native instances should have a tag."));
    return tag;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental");
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder");
  var MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    if (2 !== isFiberMountedImpl(fiber)) throw ReactError(Error("Unable to find node on an unmounted component."));
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = isFiberMountedImpl(fiber);
      if (3 === alternate) throw ReactError(Error("Unable to find node on an unmounted component."));
      return 1 === alternate ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw ReactError(Error("Unable to find node on an unmounted component."));
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
        }
      }
      if (a.alternate !== b) throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
    }

    if (3 !== a.tag) throw ReactError(Error("Unable to find node on an unmounted component."));
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      var relativeNode = undefined;
      "number" === typeof relativeToNativeNode ? relativeNode = relativeToNativeNode : relativeToNativeNode._nativeTag ? relativeNode = relativeToNativeNode._nativeTag : relativeToNativeNode.canonical && relativeToNativeNode.canonical._nativeTag && (relativeNode = relativeToNativeNode.canonical._nativeTag);
      null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }();

  function shim$1() {
    throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
  }

  var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      UPDATE_SIGNAL = {},
      nextReactTag = 3;

  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }

  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);

      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }

  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;

    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });

    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout,
      BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority,
      fakeCallbackNode = {},
      requestPaint = undefined !== Scheduler_requestPaint ? Scheduler_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = false,
      initialTimeMs = Scheduler_now(),
      now = 1e4 > initialTimeMs ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return 99;

      case Scheduler_UserBlockingPriority:
        return 98;

      case Scheduler_NormalPriority:
        return 97;

      case Scheduler_LowPriority:
        return 96;

      case Scheduler_IdlePriority:
        return 95;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return Scheduler_ImmediatePriority;

      case 98:
        return Scheduler_UserBlockingPriority;

      case 97:
        return Scheduler_NormalPriority;

      case 96:
        return Scheduler_LowPriority;

      case 95:
        return Scheduler_IdlePriority;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function runWithPriority(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    null !== immediateQueueCallbackNode && Scheduler_cancelCallback(immediateQueueCallbackNode);
    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }

  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (1073741823 === expirationTime) return 99;
    if (1 === expirationTime) return 95;
    currentTime = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - currentTime);
    return 0 >= currentTime ? 99 : 250 >= currentTime ? 98 : 5250 >= currentTime ? 97 : 95;
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        lazyComponent._status = 0;
        result = lazyComponent._ctor;
        result = result();
        result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        });

        switch (lazyComponent._status) {
          case 1:
            return lazyComponent._result;

          case 2:
            throw lazyComponent._result;
        }

        lazyComponent._result = result;
        throw result;
    }
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime, suspenseConfig) {
    return {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        if ("function" !== typeof _callback3) throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + _callback3));

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;

        if (element) {
          if (1 !== element.tag) throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
          inst = element.stateNode;
        }

        if (!inst) throw ReactError(Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue."));
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      if ("string" !== typeof returnFiber) throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
      if (!element._owner) throw ReactError(Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw ReactError(Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")."));
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw ReactError(Error("An iterable object provided no iterator."));

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);

              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, ReactError(Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var SubtreeSuspenseContextMask = 1,
      InvisibleParentSuspenseContext = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        if (null !== node.memoizedState) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var NoEffect$1 = 0,
      UnmountSnapshot = 2,
      UnmountMutation = 4,
      MountMutation = 8,
      UnmountLayout = 16,
      MountLayout = 32,
      MountPassive = 64,
      UnmountPassive = 128,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      renderExpirationTime$1 = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      nextCurrentHook = null,
      firstWorkInProgressHook = null,
      workInProgressHook = null,
      nextWorkInProgressHook = null,
      remainingExpirationTime = 0,
      componentUpdateQueue = null,
      sideEffectTag = 0,
      didScheduleRenderPhaseUpdate = false,
      renderPhaseUpdates = null,
      numberOfReRenders = 0;

  function throwInvalidHookError() {
    throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!is(nextDeps[i], prevDeps[i])) return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
    renderExpirationTime$1 = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    nextCurrentHook = null !== current ? current.memoizedState : null;
    ReactCurrentDispatcher$1.current = null === nextCurrentHook ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    workInProgress = Component(props, refOrContext);

    if (didScheduleRenderPhaseUpdate) {
      do {
        didScheduleRenderPhaseUpdate = false, numberOfReRenders += 1, nextCurrentHook = null !== current ? current.memoizedState : null, nextWorkInProgressHook = firstWorkInProgressHook, componentUpdateQueue = workInProgressHook = currentHook = null, ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdate, workInProgress = Component(props, refOrContext);
      } while (didScheduleRenderPhaseUpdate);

      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    current = currentlyRenderingFiber$1;
    current.memoizedState = firstWorkInProgressHook;
    current.expirationTime = remainingExpirationTime;
    current.updateQueue = componentUpdateQueue;
    current.effectTag |= sideEffectTag;
    current = null !== currentHook && null !== currentHook.next;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    if (current) throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
    return workInProgress;
  }

  function resetHooks() {
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    didScheduleRenderPhaseUpdate = false;
    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    null === workInProgressHook ? firstWorkInProgressHook = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook, nextCurrentHook = null !== currentHook ? currentHook.next : null;else {
      if (null === nextCurrentHook) throw ReactError(Error("Rendered more hooks than during the previous render."));
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        queue: currentHook.queue,
        baseUpdate: currentHook.baseUpdate,
        next: null
      };
      workInProgressHook = null === workInProgressHook ? firstWorkInProgressHook = newHook : workInProgressHook.next = newHook;
      nextCurrentHook = currentHook.next;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
    queue.lastRenderedReducer = reducer;

    if (0 < numberOfReRenders) {
      var _dispatch = queue.dispatch;

      if (null !== renderPhaseUpdates) {
        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (undefined !== firstRenderPhaseUpdate) {
          renderPhaseUpdates.delete(queue);
          var newState = hook.memoizedState;

          do {
            newState = reducer(newState, firstRenderPhaseUpdate.action), firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
          } while (null !== firstRenderPhaseUpdate);

          is(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          hook.baseUpdate === queue.last && (hook.baseState = newState);
          queue.lastRenderedState = newState;
          return [newState, _dispatch];
        }
      }

      return [hook.memoizedState, _dispatch];
    }

    _dispatch = queue.last;
    var baseUpdate = hook.baseUpdate;
    newState = hook.baseState;
    null !== baseUpdate ? (null !== _dispatch && (_dispatch.next = null), _dispatch = baseUpdate.next) : _dispatch = null !== _dispatch ? _dispatch.next : null;

    if (null !== _dispatch) {
      var newBaseUpdate = firstRenderPhaseUpdate = null,
          _update = _dispatch,
          didSkip = false;

      do {
        var updateExpirationTime = _update.expirationTime;
        updateExpirationTime < renderExpirationTime$1 ? (didSkip || (didSkip = true, newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState), updateExpirationTime > remainingExpirationTime && (remainingExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig), newState = _update.eagerReducer === reducer ? _update.eagerState : reducer(newState, _update.action));
        baseUpdate = _update;
        _update = _update.next;
      } while (null !== _update && _update !== _dispatch);

      didSkip || (newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState);
      is(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      hook.baseUpdate = newBaseUpdate;
      hook.baseState = firstRenderPhaseUpdate;
      queue.lastRenderedState = newState;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    null === componentUpdateQueue ? (componentUpdateQueue = {
      lastEffect: null
    }, componentUpdateQueue.lastEffect = tag.next = tag) : (create = componentUpdateQueue.lastEffect, null === create ? componentUpdateQueue.lastEffect = tag.next = tag : (destroy = create.next, create.next = tag, tag.next = destroy, componentUpdateQueue.lastEffect = tag));
    return tag;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, undefined, undefined === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(NoEffect$1, create, destroy, deps);
        return;
      }
    }

    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, destroy, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function mountDebugValue() {}

  function dispatchAction(fiber, queue, action) {
    if (!(25 > numberOfReRenders)) throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1) {
      if (didScheduleRenderPhaseUpdate = true, fiber = {
        expirationTime: renderExpirationTime$1,
        suspenseConfig: null,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === renderPhaseUpdates && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), undefined === action) renderPhaseUpdates.set(queue, fiber);else {
        for (queue = action; null !== queue.next;) {
          queue = queue.next;
        }

        queue.next = fiber;
      }
    } else {
      var currentTime = requestCurrentTime(),
          _suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);
      _suspenseConfig = {
        expirationTime: currentTime,
        suspenseConfig: _suspenseConfig,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var _last = queue.last;
      if (null === _last) _suspenseConfig.next = _suspenseConfig;else {
        var first = _last.next;
        null !== first && (_suspenseConfig.next = first);
        _last.next = _suspenseConfig;
      }
      queue.last = _suspenseConfig;
      if (0 === fiber.expirationTime && (null === alternate || 0 === alternate.expirationTime) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
            _eagerState = alternate(currentState, action);

        _suspenseConfig.eagerReducer = alternate;
        _suspenseConfig.eagerState = _eagerState;
        if (is(_eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleUpdateOnFiber(fiber, currentTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return mountEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = undefined !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function useState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return updateEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return updateEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: updateReducer,
    useRef: function useRef() {
      return updateWorkInProgressHook().memoizedState;
    },
    useState: function useState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 13:
        return false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current$$1, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref && (didReceiveUpdate = false, updateExpirationTime < renderExpirationTime) ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {};

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextState = null,
        nextDidTimeout = false,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & ForceSuspenseFallback) && (null === current$$1 || null !== current$$1.memoizedState));
    JSCompiler_temp ? (nextState = SUSPENDED_MARKER, nextDidTimeout = true, workInProgress.effectTag &= -65) : null !== current$$1 && null === current$$1.memoizedState || undefined === nextProps.fallback || true === nextProps.unstable_avoidThisFallback || (suspenseContext |= InvisibleParentSuspenseContext);
    suspenseContext &= SubtreeSuspenseContextMask;
    push(suspenseStackCursor, suspenseContext, workInProgress);
    if (null === current$$1) {
      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        current$$1 = createFiberFromFragment(null, mode, 0, null);
        current$$1.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, current$$1.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = current$$1, nextDidTimeout = nextDidTimeout.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextProps, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        current$$1.sibling = renderExpirationTime;
        mode = current$$1;
      } else mode = renderExpirationTime = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime);
    } else {
      if (null !== current$$1.memoizedState) {
        if (suspenseContext = current$$1.child, mode = suspenseContext.sibling, nextDidTimeout) {
          nextProps = nextProps.fallback;
          renderExpirationTime = createWorkInProgress(suspenseContext, suspenseContext.pendingProps, 0);
          renderExpirationTime.return = workInProgress;
          if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== suspenseContext.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
            nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
          }
          nextProps = createWorkInProgress(mode, nextProps, mode.expirationTime);
          nextProps.return = workInProgress;
          renderExpirationTime.sibling = nextProps;
          mode = renderExpirationTime;
          renderExpirationTime.childExpirationTime = 0;
          renderExpirationTime = nextProps;
        } else mode = renderExpirationTime = reconcileChildFibers(workInProgress, suspenseContext.child, nextProps.children, renderExpirationTime);
      } else if (suspenseContext = current$$1.child, nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        nextProps.child = suspenseContext;
        null !== suspenseContext && (suspenseContext.return = nextProps);
        if (0 === (workInProgress.mode & 2)) for (suspenseContext = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = suspenseContext; null !== suspenseContext;) {
          suspenseContext.return = nextProps, suspenseContext = suspenseContext.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        renderExpirationTime.effectTag |= 2;
        mode = nextProps;
        nextProps.childExpirationTime = 0;
      } else renderExpirationTime = mode = reconcileChildFibers(workInProgress, suspenseContext, nextProps.children, renderExpirationTime);
      workInProgress.stateNode = current$$1.stateNode;
    }
    workInProgress.memoizedState = nextState;
    workInProgress.child = mode;
    return renderExpirationTime;
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode);
  }

  function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current$$1, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.effectTag |= 64;else {
      if (null !== current$$1 && 0 !== (current$$1.effectTag & 64)) a: for (current$$1 = workInProgress.child; null !== current$$1;) {
        if (13 === current$$1.tag) {
          if (null !== current$$1.memoizedState) {
            current$$1.expirationTime < renderExpirationTime && (current$$1.expirationTime = renderExpirationTime);
            var alternate = current$$1.alternate;
            null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
            scheduleWorkOnParentPath(current$$1.return, renderExpirationTime);
          }
        } else if (null !== current$$1.child) {
          current$$1.child.return = current$$1;
          current$$1 = current$$1.child;
          continue;
        }

        if (current$$1 === workInProgress) break a;

        for (; null === current$$1.sibling;) {
          if (null === current$$1.return || current$$1.return === workInProgress) break a;
          current$$1 = current$$1.return;
        }

        current$$1.sibling.return = current$$1.return;
        current$$1 = current$$1.sibling;
      }
      nextProps &= SubtreeSuspenseContextMask;
    }
    push(suspenseStackCursor, nextProps, workInProgress);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          nextProps = renderExpirationTime.alternate, null !== nextProps && null === findFirstSuspended(nextProps) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderExpirationTime, tailMode);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          nextProps = revealOrder.alternate;

          if (null !== nextProps && null === findFirstSuspended(nextProps)) {
            workInProgress.child = revealOrder;
            break;
          }

          nextProps = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = nextProps;
        }

        initSuspenseListRenderState(workInProgress, true, renderExpirationTime, null, tailMode);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.dependencies = current$$1.dependencies);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current$$1 && workInProgress.child !== current$$1.child) throw ReactError(Error("Resuming work not yet implemented."));

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  appendAllChildren = function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function updateHostContainer() {};

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.effectTag |= 4);
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
        workInProgress.effectTag = effectTag & -2049 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 18:
        return null;

      case 19:
        return pop(suspenseStackCursor, workInProgress), null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));

  function logCapturedError(capturedError) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet$1 = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current$$1, instance) {
    try {
      instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current$$1, unmountError);
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitHookEffectList(unmountTag, mountTag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & unmountTag) !== NoEffect$1) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && destroy();
        }

        (effect.tag & mountTag) !== NoEffect$1 && (destroy = effect.create, effect.destroy = destroy());
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitUnmount(current$$1$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var firstEffect = updateQueue.next;
          runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var destroy = effect.destroy;

              if (undefined !== destroy) {
                var current$$1 = current$$1$jscomp$0;

                try {
                  destroy();
                } catch (error) {
                  captureCommitPhaseError(current$$1, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        renderPriorityLevel = current$$1$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$$1$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        unmountHostComponents(current$$1$jscomp$0, renderPriorityLevel);
    }
  }

  function detachFiber(current$$1) {
    var alternate = current$$1.alternate;
    current$$1.return = null;
    current$$1.child = null;
    current$$1.memoizedState = null;
    current$$1.updateQueue = null;
    current$$1.dependencies = null;
    current$$1.alternate = null;
    current$$1.firstEffect = null;
    current$$1.lastEffect = null;
    current$$1.pendingProps = null;
    current$$1.memoizedProps = null;
    null !== alternate && detachFiber(alternate);
  }

  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }

  function commitPlacement(finishedWork) {
    a: {
      for (var parent = finishedWork.return; null !== parent;) {
        if (isHostParent(parent)) {
          var parentFiber = parent;
          break a;
        }

        parent = parent.return;
      }

      throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
    }

    parent = parentFiber.stateNode;

    switch (parentFiber.tag) {
      case 5:
        var isContainer = false;
        break;

      case 3:
        parent = parent.containerInfo;
        isContainer = true;
        break;

      case 4:
        parent = parent.containerInfo;
        isContainer = true;
        break;

      default:
        throw ReactError(Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."));
    }

    parentFiber.effectTag & 16 && (parentFiber.effectTag &= -17);

    a: b: for (parentFiber = finishedWork;;) {
      for (; null === parentFiber.sibling;) {
        if (null === parentFiber.return || isHostParent(parentFiber.return)) {
          parentFiber = null;
          break a;
        }

        parentFiber = parentFiber.return;
      }

      parentFiber.sibling.return = parentFiber.return;

      for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag && 18 !== parentFiber.tag;) {
        if (parentFiber.effectTag & 2) continue b;
        if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child.return = parentFiber, parentFiber = parentFiber.child;
      }

      if (!(parentFiber.effectTag & 2)) {
        parentFiber = parentFiber.stateNode;
        break a;
      }
    }

    for (var node = finishedWork;;) {
      var isHost = 5 === node.tag || 6 === node.tag;

      if (isHost) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (parentFiber) {
          if (isContainer) {
            if ("number" === typeof parent) throw ReactError(Error("Container does not support insertBefore operation"));
          } else {
            isHost = parent;
            var beforeChild = parentFiber,
                children = isHost._children,
                index = children.indexOf(stateNode);
            0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [], [], ["number" === typeof stateNode ? stateNode : stateNode._nativeTag], [index], []));
          }
        } else isContainer ? ReactNativePrivateInterface.UIManager.setChildren(parent, ["number" === typeof stateNode ? stateNode : stateNode._nativeTag]) : (isHost = parent, children = "number" === typeof stateNode ? stateNode : stateNode._nativeTag, index = isHost._children, beforeChild = index.indexOf(stateNode), 0 <= beforeChild ? (index.splice(beforeChild, 1), index.push(stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [beforeChild], [index.length - 1], [], [], [])) : (index.push(stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [], [], [children], [index.length - 1], [])));
      } else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === finishedWork) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function unmountHostComponents(current$$1, renderPriorityLevel$jscomp$0) {
    for (var node = current$$1, currentParentIsValid = false, currentParent = undefined, currentParentIsContainer = undefined;;) {
      if (!currentParentIsValid) {
        currentParentIsValid = node.return;

        a: for (;;) {
          if (null === currentParentIsValid) throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
          currentParent = currentParentIsValid.stateNode;

          switch (currentParentIsValid.tag) {
            case 5:
              currentParentIsContainer = false;
              break a;

            case 3:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = true;
              break a;

            case 4:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = true;
              break a;
          }

          currentParentIsValid = currentParentIsValid.return;
        }

        currentParentIsValid = true;
      }

      if (5 === node.tag || 6 === node.tag) {
        a: for (var root = node, renderPriorityLevel = renderPriorityLevel$jscomp$0, node$jscomp$0 = root;;) {
          if (commitUnmount(node$jscomp$0, renderPriorityLevel), null !== node$jscomp$0.child && 4 !== node$jscomp$0.tag) node$jscomp$0.child.return = node$jscomp$0, node$jscomp$0 = node$jscomp$0.child;else {
            if (node$jscomp$0 === root) break;

            for (; null === node$jscomp$0.sibling;) {
              if (null === node$jscomp$0.return || node$jscomp$0.return === root) break a;
              node$jscomp$0 = node$jscomp$0.return;
            }

            node$jscomp$0.sibling.return = node$jscomp$0.return;
            node$jscomp$0 = node$jscomp$0.sibling;
          }
        }

        currentParentIsContainer ? (root = currentParent, recursivelyUncacheFiberNode(node.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(root, [], [], [], [], [0])) : (root = currentParent, node$jscomp$0 = node.stateNode, recursivelyUncacheFiberNode(node$jscomp$0), renderPriorityLevel = root._children, node$jscomp$0 = renderPriorityLevel.indexOf(node$jscomp$0), renderPriorityLevel.splice(node$jscomp$0, 1), ReactNativePrivateInterface.UIManager.manageChildren(root._nativeTag, [], [], [], [], [node$jscomp$0]));
      } else if (4 === node.tag) {
        if (null !== node.child) {
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true;
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (commitUnmount(node, renderPriorityLevel$jscomp$0), null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === current$$1) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === current$$1) return;
        node = node.return;
        4 === node.tag && (currentParentIsValid = false);
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        break;

      case 1:
        break;

      case 5:
        var instance = finishedWork.stateNode;

        if (null != instance) {
          var newProps = finishedWork.memoizedProps;
          current$$1 = null !== current$$1 ? current$$1.memoizedProps : newProps;
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          null !== updatePayload && (finishedWork = instance.viewConfig, instanceProps.set(instance._nativeTag, newProps), newProps = diffProperties(null, current$$1, newProps, finishedWork.validAttributes), null != newProps && ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, finishedWork.uiViewClassName, newProps));
        }

        break;

      case 6:
        if (null === finishedWork.stateNode) throw ReactError(Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."));
        ReactNativePrivateInterface.UIManager.updateView(finishedWork.stateNode, "RCTRawText", {
          text: finishedWork.memoizedProps
        });
        break;

      case 3:
        break;

      case 12:
        break;

      case 13:
        instance = finishedWork;
        null === finishedWork.memoizedState ? newProps = false : (newProps = true, instance = finishedWork.child, globalMostRecentFallbackTime = now());
        if (null !== instance) a: for (current$$1 = instance;;) {
          if (5 === current$$1.tag) {
            if (updatePayload = current$$1.stateNode, newProps) {
              var viewConfig = updatePayload.viewConfig;
              var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                style: {
                  display: "none"
                }
              }, viewConfig.validAttributes);
              ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            } else {
              updatePayload = current$$1.stateNode;
              updatePayload$jscomp$0 = current$$1.memoizedProps;
              viewConfig = updatePayload.viewConfig;

              var prevProps = _extends({}, updatePayload$jscomp$0, {
                style: [updatePayload$jscomp$0.style, {
                  display: "none"
                }]
              });

              updatePayload$jscomp$0 = diffProperties(null, prevProps, updatePayload$jscomp$0, viewConfig.validAttributes);
              ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            }
          } else {
            if (6 === current$$1.tag) throw Error("Not yet implemented.");

            if (13 === current$$1.tag && null !== current$$1.memoizedState) {
              updatePayload = current$$1.child.sibling;
              updatePayload.return = current$$1;
              current$$1 = updatePayload;
              continue;
            } else if (null !== current$$1.child) {
              current$$1.child.return = current$$1;
              current$$1 = current$$1.child;
              continue;
            }
          }
          if (current$$1 === instance) break a;

          for (; null === current$$1.sibling;) {
            if (null === current$$1.return || current$$1.return === instance) break a;
            current$$1 = current$$1.return;
          }

          current$$1.sibling.return = current$$1.return;
          current$$1 = current$$1.sibling;
        }
        attachSuspenseRetryListeners(finishedWork);
        break;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        break;

      case 17:
        break;

      case 20:
        break;

      default:
        throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet$1());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootErrored = 1,
      RootSuspended = 2,
      RootSuspendedWithDelay = 3,
      RootCompleted = 4,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootHasPendingPing = false,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      pendingPassiveEffectsExpirationTime = 0,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTime() {
    return (executionContext & 48) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 1;
        break;

      default:
        throw ReactError(Error("Expected a valid priority level"));
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime && --currentTime;
    return currentTime;
  }

  function scheduleUpdateOnFiber(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      fiber.pingTime = 0;
      var priorityLevel = getCurrentPriorityLevel();
      if (1073741823 === expirationTime) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & 48) === NoContext) for (var callback = renderRoot(fiber, 1073741823, true); null !== callback;) {
          callback = callback(true);
        } else scheduleCallbackForRoot(fiber, 99, 1073741823), executionContext === NoContext && flushSyncCallbackQueue();
      } else scheduleCallbackForRoot(fiber, priorityLevel, expirationTime);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (undefined === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime), fiber = root.lastPendingTime, 0 === fiber || expirationTime < fiber) && (root.lastPendingTime = expirationTime);
    return root;
  }

  function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
    if (root.callbackExpirationTime < expirationTime) {
      var existingCallbackNode = root.callbackNode;
      null !== existingCallbackNode && existingCallbackNode !== fakeCallbackNode && Scheduler_cancelCallback(existingCallbackNode);
      root.callbackExpirationTime = expirationTime;
      1073741823 === expirationTime ? root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime))) : (existingCallbackNode = null, 1 !== expirationTime && (existingCallbackNode = {
        timeout: 10 * (1073741821 - expirationTime) - now()
      }), root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), existingCallbackNode));
    }
  }

  function runRootCallback(root, callback, isSync) {
    var prevCallbackNode = root.callbackNode,
        continuation = null;

    try {
      return continuation = callback(isSync), null !== continuation ? runRootCallback.bind(null, root, continuation) : null;
    } finally {
      null === continuation && prevCallbackNode === root.callbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0);
    }
  }

  function resolveLocksOnRoot(root, expirationTime) {
    var firstBatch = root.firstBatch;
    return null !== firstBatch && firstBatch._defer && firstBatch._expirationTime >= expirationTime ? (scheduleCallback(97, function () {
      firstBatch._onComplete();

      return null;
    }), true) : false;
  }

  function flushPendingDiscreteUpdates() {
    if (null !== rootsWithPendingDiscreteUpdates) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
      });
      flushSyncCallbackQueue();
    }
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          var childContextTypes = interruptedWork.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork);
          break;

        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer(interruptedWork);
          break;

        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null, expirationTime);
    renderExpirationTime = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootHasPendingPing = false;
  }

  function renderRoot(root$jscomp$0, expirationTime, isSync) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    if (root$jscomp$0.firstPendingTime < expirationTime) return null;
    if (isSync && root$jscomp$0.finishedExpirationTime === expirationTime) return commitRoot.bind(null, root$jscomp$0);
    flushPassiveEffects();
    if (root$jscomp$0 !== workInProgressRoot || expirationTime !== renderExpirationTime) prepareFreshStack(root$jscomp$0, expirationTime);else if (workInProgressRootExitStatus === RootSuspendedWithDelay) if (workInProgressRootHasPendingPing) prepareFreshStack(root$jscomp$0, expirationTime);else {
      var lastPendingTime = root$jscomp$0.lastPendingTime;
      if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
    }

    if (null !== workInProgress) {
      lastPendingTime = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = ReactCurrentDispatcher.current;
      null === prevDispatcher && (prevDispatcher = ContextOnlyDispatcher);
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;

      if (isSync) {
        if (1073741823 !== expirationTime) {
          var currentTime = requestCurrentTime();
          if (currentTime < expirationTime) return executionContext = lastPendingTime, resetContextDependencies(), ReactCurrentDispatcher.current = prevDispatcher, renderRoot.bind(null, root$jscomp$0, currentTime);
        }
      } else currentEventTime = 0;

      do {
        try {
          if (isSync) for (; null !== workInProgress;) {
            workInProgress = performUnitOfWork(workInProgress);
          } else for (; null !== workInProgress && !Scheduler_shouldYield();) {
            workInProgress = performUnitOfWork(workInProgress);
          }
          break;
        } catch (thrownValue) {
          resetContextDependencies();
          resetHooks();
          currentTime = workInProgress;
          if (null === currentTime || null === currentTime.return) throw prepareFreshStack(root$jscomp$0, expirationTime), executionContext = lastPendingTime, thrownValue;

          a: {
            var root = root$jscomp$0,
                returnFiber = currentTime.return,
                sourceFiber = currentTime,
                value = thrownValue,
                renderExpirationTime$jscomp$0 = renderExpirationTime;
            sourceFiber.effectTag |= 1024;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;

            if (null !== value && "object" === typeof value && "function" === typeof value.then) {
              var thenable = value,
                  hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext);
              value = returnFiber;

              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === value.tag) null !== value.memoizedState ? JSCompiler_temp = false : (JSCompiler_temp = value.memoizedProps, JSCompiler_temp = undefined === JSCompiler_temp.fallback ? false : true !== JSCompiler_temp.unstable_avoidThisFallback ? true : hasInvisibleParentBoundary ? false : true);

                if (JSCompiler_temp) {
                  returnFiber = value.updateQueue;
                  null === returnFiber ? (returnFiber = new Set(), returnFiber.add(thenable), value.updateQueue = returnFiber) : returnFiber.add(thenable);

                  if (0 === (value.mode & 2)) {
                    value.effectTag |= 64;
                    sourceFiber.effectTag &= -1957;
                    1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (renderExpirationTime$jscomp$0 = createUpdate(1073741823, null), renderExpirationTime$jscomp$0.tag = 2, enqueueUpdate(sourceFiber, renderExpirationTime$jscomp$0)));
                    sourceFiber.expirationTime = 1073741823;
                    break a;
                  }

                  sourceFiber = root;
                  root = renderExpirationTime$jscomp$0;
                  hasInvisibleParentBoundary = sourceFiber.pingCache;
                  null === hasInvisibleParentBoundary ? (hasInvisibleParentBoundary = sourceFiber.pingCache = new PossiblyWeakMap(), returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)) : (returnFiber = hasInvisibleParentBoundary.get(thenable), undefined === returnFiber && (returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)));
                  returnFiber.has(root) || (returnFiber.add(root), sourceFiber = pingSuspendedRoot.bind(null, sourceFiber, thenable, root), thenable.then(sourceFiber, sourceFiber));
                  value.effectTag |= 2048;
                  value.expirationTime = renderExpirationTime$jscomp$0;
                  break a;
                }

                value = value.return;
              } while (null !== value);

              value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }

            workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
            value = createCapturedValue(value, sourceFiber);
            sourceFiber = returnFiber;

            do {
              switch (sourceFiber.tag) {
                case 3:
                  sourceFiber.effectTag |= 2048;
                  sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                  renderExpirationTime$jscomp$0 = createRootErrorUpdate(sourceFiber, value, renderExpirationTime$jscomp$0);
                  enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                  break a;

                case 1:
                  if (thenable = value, root = sourceFiber.type, returnFiber = sourceFiber.stateNode, 0 === (sourceFiber.effectTag & 64) && ("function" === typeof root.getDerivedStateFromError || null !== returnFiber && "function" === typeof returnFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(returnFiber)))) {
                    sourceFiber.effectTag |= 2048;
                    sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                    renderExpirationTime$jscomp$0 = createClassErrorUpdate(sourceFiber, thenable, renderExpirationTime$jscomp$0);
                    enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                    break a;
                  }

              }

              sourceFiber = sourceFiber.return;
            } while (null !== sourceFiber);
          }

          workInProgress = completeUnitOfWork(currentTime);
        }
      } while (1);

      executionContext = lastPendingTime;
      resetContextDependencies();
      ReactCurrentDispatcher.current = prevDispatcher;
      if (null !== workInProgress) return renderRoot.bind(null, root$jscomp$0, expirationTime);
    }

    root$jscomp$0.finishedWork = root$jscomp$0.current.alternate;
    root$jscomp$0.finishedExpirationTime = expirationTime;
    if (resolveLocksOnRoot(root$jscomp$0, expirationTime)) return null;
    workInProgressRoot = null;

    switch (workInProgressRootExitStatus) {
      case RootIncomplete:
        throw ReactError(Error("Should have a work-in-progress."));

      case RootErrored:
        return lastPendingTime = root$jscomp$0.lastPendingTime, lastPendingTime < expirationTime ? renderRoot.bind(null, root$jscomp$0, lastPendingTime) : isSync ? commitRoot.bind(null, root$jscomp$0) : (prepareFreshStack(root$jscomp$0, expirationTime), scheduleSyncCallback(renderRoot.bind(null, root$jscomp$0, expirationTime)), null);

      case RootSuspended:
        if (1073741823 === workInProgressRootLatestProcessedExpirationTime && !isSync && (isSync = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < isSync)) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          lastPendingTime = root$jscomp$0.lastPendingTime;
          if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
          root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync);
          return null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootSuspendedWithDelay:
        if (!isSync) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          isSync = root$jscomp$0.lastPendingTime;
          if (isSync < expirationTime) return renderRoot.bind(null, root$jscomp$0, isSync);
          1073741823 !== workInProgressRootLatestSuspenseTimeout ? isSync = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? isSync = 0 : (isSync = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, lastPendingTime = now(), expirationTime = 10 * (1073741821 - expirationTime) - lastPendingTime, isSync = lastPendingTime - isSync, 0 > isSync && (isSync = 0), isSync = (120 > isSync ? 120 : 480 > isSync ? 480 : 1080 > isSync ? 1080 : 1920 > isSync ? 1920 : 3e3 > isSync ? 3e3 : 4320 > isSync ? 4320 : 1960 * ceil(isSync / 1960)) - isSync, expirationTime < isSync && (isSync = expirationTime));
          if (10 < isSync) return root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync), null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootCompleted:
        return !isSync && 1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig && (lastPendingTime = workInProgressRootLatestProcessedExpirationTime, prevDispatcher = workInProgressRootCanSuspendUsingConfig, expirationTime = prevDispatcher.busyMinDurationMs | 0, 0 >= expirationTime ? expirationTime = 0 : (isSync = prevDispatcher.busyDelayMs | 0, lastPendingTime = now() - (10 * (1073741821 - lastPendingTime) - (prevDispatcher.timeoutMs | 0 || 5e3)), expirationTime = lastPendingTime <= isSync ? 0 : isSync + expirationTime - lastPendingTime), 10 < expirationTime) ? (root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), expirationTime), null) : commitRoot.bind(null, root$jscomp$0);

      default:
        throw ReactError(Error("Unknown root exit status."));
    }
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 1 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 1 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$$1(unitOfWork.alternate, unitOfWork, renderExpirationTime);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current$$1 = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 1024)) {
        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime$jscomp$0 = renderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              newProps = current$$1.stateNode;
              newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime$jscomp$0 = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime$jscomp$0), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                current = requiredContext(contextStackCursor$1.current);
                var type$jscomp$0 = type;
                var _instance6 = newProps;
                var rootContainerInstance = renderExpirationTime$jscomp$0,
                    internalInstanceHandle = current$$1,
                    tag = allocateTag();
                type$jscomp$0 = getViewConfigForType(type$jscomp$0);
                var updatePayload = diffProperties(null, emptyObject, _instance6, type$jscomp$0.validAttributes);
                ReactNativePrivateInterface.UIManager.createView(tag, type$jscomp$0.uiViewClassName, rootContainerInstance, updatePayload);
                rootContainerInstance = new ReactNativeFiberHostComponent(tag, type$jscomp$0);
                instanceCache.set(tag, internalInstanceHandle);
                instanceProps.set(tag, _instance6);
                _instance6 = rootContainerInstance;
                appendAllChildren(_instance6, current$$1, false, false);
                finalizeInitialChildren(_instance6, type, newProps, renderExpirationTime$jscomp$0, current) && (current$$1.effectTag |= 4);
                current$$1.stateNode = _instance6;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else if (null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
              break;

            case 6:
              if (current && null != current$$1.stateNode) updateHostText$1(current, current$$1, current.memoizedProps, newProps);else {
                if ("string" !== typeof newProps && null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                type = requiredContext(rootInstanceStackCursor.current);
                renderExpirationTime$jscomp$0 = requiredContext(contextStackCursor$1.current);
                current = current$$1;
                if (!renderExpirationTime$jscomp$0.isInAParentText) throw ReactError(Error("Text strings must be rendered within a <Text> component."));
                renderExpirationTime$jscomp$0 = allocateTag();
                ReactNativePrivateInterface.UIManager.createView(renderExpirationTime$jscomp$0, "RCTRawText", type, {
                  text: newProps
                });
                instanceCache.set(renderExpirationTime$jscomp$0, current$$1);
                current.stateNode = renderExpirationTime$jscomp$0;
              }
              break;

            case 11:
              break;

            case 13:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime$jscomp$0;
                break a;
              }

              newProps = null !== newProps;
              renderExpirationTime$jscomp$0 = false;
              null !== current && (type = current.memoizedState, renderExpirationTime$jscomp$0 = null !== type, newProps || null === type || (type = current.child.sibling, null !== type && (_instance6 = current$$1.firstEffect, null !== _instance6 ? (current$$1.firstEffect = type, type.nextEffect = _instance6) : (current$$1.firstEffect = current$$1.lastEffect = type, type.nextEffect = null), type.effectTag = 8)));
              if (newProps && !renderExpirationTime$jscomp$0 && 0 !== (current$$1.mode & 2)) if (null === current && true !== current$$1.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
              if (newProps || renderExpirationTime$jscomp$0) current$$1.effectTag |= 4;
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 18:
              break;

            case 19:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;
              if (null === newProps) break;
              type = 0 !== (current$$1.effectTag & 64);
              _instance6 = newProps.rendering;
              if (null === _instance6) {
                if (type) cutOffTailIfNeeded(newProps, false);else {
                  if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = current$$1.child; null !== current;) {
                    _instance6 = findFirstSuspended(current);

                    if (null !== _instance6) {
                      current$$1.effectTag |= 64;
                      cutOffTailIfNeeded(newProps, false);
                      newProps = _instance6.updateQueue;
                      null !== newProps && (current$$1.updateQueue = newProps, current$$1.effectTag |= 4);
                      current$$1.firstEffect = current$$1.lastEffect = null;
                      newProps = renderExpirationTime$jscomp$0;

                      for (current = current$$1.child; null !== current;) {
                        renderExpirationTime$jscomp$0 = current, type = newProps, renderExpirationTime$jscomp$0.effectTag &= 2, renderExpirationTime$jscomp$0.nextEffect = null, renderExpirationTime$jscomp$0.firstEffect = null, renderExpirationTime$jscomp$0.lastEffect = null, _instance6 = renderExpirationTime$jscomp$0.alternate, null === _instance6 ? (renderExpirationTime$jscomp$0.childExpirationTime = 0, renderExpirationTime$jscomp$0.expirationTime = type, renderExpirationTime$jscomp$0.child = null, renderExpirationTime$jscomp$0.memoizedProps = null, renderExpirationTime$jscomp$0.memoizedState = null, renderExpirationTime$jscomp$0.updateQueue = null, renderExpirationTime$jscomp$0.dependencies = null) : (renderExpirationTime$jscomp$0.childExpirationTime = _instance6.childExpirationTime, renderExpirationTime$jscomp$0.expirationTime = _instance6.expirationTime, renderExpirationTime$jscomp$0.child = _instance6.child, renderExpirationTime$jscomp$0.memoizedProps = _instance6.memoizedProps, renderExpirationTime$jscomp$0.memoizedState = _instance6.memoizedState, renderExpirationTime$jscomp$0.updateQueue = _instance6.updateQueue, type = _instance6.dependencies, renderExpirationTime$jscomp$0.dependencies = null === type ? null : {
                          expirationTime: type.expirationTime,
                          firstContext: type.firstContext,
                          responders: type.responders
                        }), current = current.sibling;
                      }

                      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, current$$1);
                      current$$1 = current$$1.child;
                      break a;
                    }

                    current = current.sibling;
                  }
                }
              } else {
                if (!type) if (current = findFirstSuspended(_instance6), null !== current) {
                  if (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode) {
                    current = current.updateQueue;
                    null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                    current$$1 = current$$1.lastEffect = newProps.lastEffect;
                    null !== current$$1 && (current$$1.nextEffect = null);
                    break;
                  }
                } else now() > newProps.tailExpiration && 1 < renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, false), current$$1.expirationTime = current$$1.childExpirationTime = renderExpirationTime$jscomp$0 - 1);
                newProps.isBackwards ? (_instance6.sibling = current$$1.child, current$$1.child = _instance6) : (current = newProps.last, null !== current ? current.sibling = _instance6 : current$$1.child = _instance6, newProps.last = _instance6);
              }

              if (null !== newProps.tail) {
                0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500);
                current = newProps.tail;
                newProps.rendering = current;
                newProps.tail = current.sibling;
                newProps.lastEffect = current$$1.lastEffect;
                current.sibling = null;
                newProps = suspenseStackCursor.current;
                newProps = type ? newProps & SubtreeSuspenseContextMask | ForceSuspenseFallback : newProps & SubtreeSuspenseContextMask;
                push(suspenseStackCursor, newProps, current$$1);
                current$$1 = current;
                break a;
              }

              break;

            case 20:
              break;

            default:
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
          }

          current$$1 = null;
        }

        newProps = workInProgress;

        if (1 === renderExpirationTime || 1 !== newProps.childExpirationTime) {
          current = 0;

          for (renderExpirationTime$jscomp$0 = newProps.child; null !== renderExpirationTime$jscomp$0;) {
            type = renderExpirationTime$jscomp$0.expirationTime, _instance6 = renderExpirationTime$jscomp$0.childExpirationTime, type > current && (current = type), _instance6 > current && (current = _instance6), renderExpirationTime$jscomp$0 = renderExpirationTime$jscomp$0.sibling;
          }

          newProps.childExpirationTime = current;
        }

        if (null !== current$$1) return current$$1;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 1024) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current$$1 = unwindWork(workInProgress, renderExpirationTime);
        if (null !== current$$1) return current$$1.effectTag &= 1023, current$$1;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 1024);
      }

      current$$1 = workInProgress.sibling;
      if (null !== current$$1) return current$$1;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    null !== rootWithPendingPassiveEffects && scheduleCallback(97, function () {
      flushPassiveEffects();
      return null;
    });
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    flushPassiveEffects();
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    var finishedWork = root.finishedWork,
        expirationTime = root.finishedExpirationTime;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    if (finishedWork === root.current) throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
    root.callbackNode = null;
    root.callbackExpirationTime = 0;
    var updateExpirationTimeBeforeCommit = finishedWork.expirationTime,
        childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
    updateExpirationTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
    root.firstPendingTime = updateExpirationTimeBeforeCommit;
    updateExpirationTimeBeforeCommit < root.lastPendingTime && (root.lastPendingTime = updateExpirationTimeBeforeCommit);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, updateExpirationTimeBeforeCommit = finishedWork.firstEffect) : updateExpirationTimeBeforeCommit = finishedWork : updateExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== updateExpirationTimeBeforeCommit) {
      childExpirationTimeBeforeCommit = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (; null !== nextEffect;) {
            if (0 !== (nextEffect.effectTag & 256)) {
              var current$$1 = nextEffect.alternate,
                  finishedWork$jscomp$0 = nextEffect;

              switch (finishedWork$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork$jscomp$0);
                  break;

                case 1:
                  if (finishedWork$jscomp$0.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork$jscomp$0.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(finishedWork$jscomp$0.elementType === finishedWork$jscomp$0.type ? prevProps : resolveDefaultProps(finishedWork$jscomp$0.type, prevProps), prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break;

                case 3:
                case 5:
                case 6:
                case 4:
                case 17:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (current$$1 = renderPriorityLevel; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current$$1$jscomp$0 = nextEffect.alternate;

              if (null !== current$$1$jscomp$0) {
                var currentRef = current$$1$jscomp$0.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                prevProps = nextEffect, unmountHostComponents(prevProps, current$$1), detachFiber(prevProps);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root.current = finishedWork;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = expirationTime; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;

            if (effectTag$jscomp$0 & 36) {
              var current$$1$jscomp$1 = nextEffect.alternate;
              current$$1$jscomp$0 = nextEffect;
              currentRef = effectTag;

              switch (current$$1$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountLayout, MountLayout, current$$1$jscomp$0);
                  break;

                case 1:
                  var instance$jscomp$0 = current$$1$jscomp$0.stateNode;
                  if (current$$1$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                    var prevProps$jscomp$0 = current$$1$jscomp$0.elementType === current$$1$jscomp$0.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1$jscomp$0.type, current$$1$jscomp$1.memoizedProps);
                    instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                  }
                  var updateQueue = current$$1$jscomp$0.updateQueue;
                  null !== updateQueue && commitUpdateQueue(current$$1$jscomp$0, updateQueue, instance$jscomp$0, currentRef);
                  break;

                case 3:
                  var _updateQueue = current$$1$jscomp$0.updateQueue;

                  if (null !== _updateQueue) {
                    current$$1 = null;
                    if (null !== current$$1$jscomp$0.child) switch (current$$1$jscomp$0.child.tag) {
                      case 5:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                        break;

                      case 1:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                    }
                    commitUpdateQueue(current$$1$jscomp$0, _updateQueue, current$$1, currentRef);
                  }

                  break;

                case 5:
                  break;

                case 6:
                  break;

                case 4:
                  break;

                case 12:
                  break;

                case 13:
                case 19:
                case 17:
                case 20:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            if (effectTag$jscomp$0 & 128) {
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance$jscomp$1 = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    var instanceToUse = instance$jscomp$1;
                    break;

                  default:
                    instanceToUse = instance$jscomp$1;
                }

                "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
              }
            }

            effectTag$jscomp$0 & 512 && (rootDoesHavePassiveEffects = true);
            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = childExpirationTimeBeforeCommit;
    } else root.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsExpirationTime = expirationTime, pendingPassiveEffectsRenderPriority = renderPriorityLevel;else for (nextEffect = updateExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel;
    }
    renderPriorityLevel = root.firstPendingTime;
    0 !== renderPriorityLevel ? (effectTag$jscomp$0 = requestCurrentTime(), effectTag$jscomp$0 = inferPriorityFromExpirationTime(effectTag$jscomp$0, renderPriorityLevel), scheduleCallbackForRoot(root, effectTag$jscomp$0, renderPriorityLevel)) : legacyErrorBoundariesThatAlreadyFailed = null;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    1073741823 === renderPriorityLevel ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function flushPassiveEffects() {
    if (null === rootWithPendingPassiveEffects) return false;
    var root = rootWithPendingPassiveEffects,
        expirationTime = pendingPassiveEffectsExpirationTime,
        renderPriorityLevel = pendingPassiveEffectsRenderPriority;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = 0;
    pendingPassiveEffectsRenderPriority = 90;
    return runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
  }

  function flushPassiveEffectsImpl(root) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Cannot flush passive effects while already rendering."));
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork), commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
        }
      } catch (error) {
        if (null === root) throw ReactError(Error("Should be working on an effect."));
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return true;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && scheduleCallbackForRoot(rootFiber, 99, 1073741823);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && scheduleCallbackForRoot(fiber, 99, 1073741823);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime) : workInProgressRootHasPendingPing = true : root.lastPendingTime < suspendedTime || (thenable = root.pingTime, 0 !== thenable && thenable < suspendedTime || (root.pingTime = suspendedTime, root.finishedExpirationTime === suspendedTime && (root.finishedExpirationTime = 0, root.finishedWork = null), thenable = requestCurrentTime(), thenable = inferPriorityFromExpirationTime(thenable, suspendedTime), scheduleCallbackForRoot(root, thenable, suspendedTime)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    retryCache = requestCurrentTime();
    thenable = computeExpirationForFiber(retryCache, boundaryFiber, null);
    retryCache = inferPriorityFromExpirationTime(retryCache, thenable);
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && scheduleCallbackForRoot(boundaryFiber, retryCache, thenable);
  }

  var beginWork$$1 = undefined;

  beginWork$$1 = function beginWork$$1(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current$$1) {
      if (current$$1.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              pushProvider(workInProgress, workInProgress.memoizedProps.value);
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current$$1.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              var renderState = workInProgress.memoizedState;
              null !== renderState && (renderState.rendering = null, renderState.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
    } else didReceiveUpdate = false;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        renderState = renderWithHooks(null, workInProgress, updateExpirationTime, current$$1, renderState, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof renderState && null !== renderState && "function" === typeof renderState.render && undefined === renderState.$$typeof) {
          workInProgress.tag = 1;
          resetHooks();

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== renderState.state && undefined !== renderState.state ? renderState.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          renderState.updater = classComponentUpdater;
          workInProgress.stateNode = renderState;
          renderState._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, renderState, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        renderState = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = readLazyComponentType(renderState);
        workInProgress.type = renderState;
        hasContext = workInProgress.tag = resolveLazyComponentTag(renderState);
        current$$1 = resolveDefaultProps(renderState, current$$1);

        switch (hasContext) {
          case 0:
            workInProgress = updateFunctionComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 1:
            workInProgress = updateClassComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 11:
            workInProgress = updateForwardRef(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 14:
            workInProgress = updateMemoComponent(null, workInProgress, renderState, resolveDefaultProps(renderState.type, current$$1), updateExpirationTime, renderExpirationTime);
            break;

          default:
            throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + renderState + ". Lazy element type must resolve to a class or function."));
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateClassComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === updateExpirationTime) throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        renderState = workInProgress.memoizedState;
        renderState = null !== renderState ? renderState.element : null;
        processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === renderState ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateForwardRef(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          renderState = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = renderState.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = is(oldValue, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === renderState.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldValue = workInProgress.child, null !== oldValue && (oldValue.return = workInProgress); null !== oldValue;) {
              var list = oldValue.dependencies;

              if (null !== list) {
                getDerivedStateFromProps = oldValue.child;

                for (var dependency = list.firstContext; null !== dependency;) {
                  if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                    1 === oldValue.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(oldValue, dependency));
                    oldValue.expirationTime < renderExpirationTime && (oldValue.expirationTime = renderExpirationTime);
                    dependency = oldValue.alternate;
                    null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                    scheduleWorkOnParentPath(oldValue.return, renderExpirationTime);
                    list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                    break;
                  }

                  dependency = dependency.next;
                }
              } else getDerivedStateFromProps = 10 === oldValue.tag ? oldValue.type === workInProgress.type ? null : oldValue.child : oldValue.child;

              if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = oldValue;else for (getDerivedStateFromProps = oldValue; null !== getDerivedStateFromProps;) {
                if (getDerivedStateFromProps === workInProgress) {
                  getDerivedStateFromProps = null;
                  break;
                }

                oldValue = getDerivedStateFromProps.sibling;

                if (null !== oldValue) {
                  oldValue.return = getDerivedStateFromProps.return;
                  getDerivedStateFromProps = oldValue;
                  break;
                }

                getDerivedStateFromProps = getDerivedStateFromProps.return;
              }
              oldValue = getDerivedStateFromProps;
            }
          }

          reconcileChildren(current$$1, workInProgress, renderState.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return renderState = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), renderState = readContext(renderState, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(renderState), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return renderState = workInProgress.type, hasContext = resolveDefaultProps(renderState, workInProgress.pendingProps), hasContext = resolveDefaultProps(renderState.type, hasContext), updateMemoComponent(current$$1, workInProgress, renderState, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
    }

    throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, undefined, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = this.firstBatch = null;
    this.pingTime = this.lastPendingTime = this.firstPendingTime = this.callbackExpirationTime = 0;
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (undefined === fiber) {
      if ("function" === typeof component.render) throw ReactError(Error("Unable to find node on an unmounted component."));
      throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    current$$1 = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (2 !== isFiberMountedImpl(parentComponent) || 1 !== parentComponent.tag) throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    suspenseConfig = createUpdate(current$$1, suspenseConfig);
    suspenseConfig.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (suspenseConfig.callback = container);
    enqueueUpdate(currentTime, suspenseConfig);
    scheduleUpdateOnFiber(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    throw ReactError(Error("getInspectorDataForViewTag() is not available in production"));
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    (executionContext & 49) === NoContext && (flushPendingDiscreteUpdates(), flushPassiveEffects());
  };

  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance && !maybeInstance.canonical) {
            var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
            maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
            null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance),
    findNodeHandle: findNodeHandle,
    dispatchCommand: function dispatchCommand(handle, command, args) {
      null != handle._nativeTag && ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
    },
    setNativeProps: function setNativeProps(handle, nativeProps) {
      null != handle._nativeTag && (nativeProps = diffProperties(null, emptyObject, nativeProps, handle.viewConfig.validAttributes), null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(handle._nativeTag, handle.viewConfig.uiViewClassName, nativeProps));
    },
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(containerTag, 0, false);
        var uninitializedFiber = createFiber(3, null, null, 0);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureInWindow: function measureInWindow(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance && !maybeInstance.canonical) {
              var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
              maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
              null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance),
      computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
        return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
      }
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    }));
  })({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.8.6",
    rendererPackageName: "react-native-renderer"
  });

  var ReactNativeRenderer$2 = {
    default: ReactNativeRenderer
  },
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3.default || ReactNativeRenderer$3;
},14443,[14344,14446,14566,10297,14575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  _$$_REQUIRE(_dependencyMap[0]);
},14446,[10120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  if (global.self === undefined) {
    global.self = global;
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }
},14449,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _$$_REQUIRE(_dependencyMap[0]);

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }
},14452,[10054]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[1]);

    ErrorUtils.setGlobalHandler(handleError);
  }
},14455,[10141,10051]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[1]);

  var isNativeFunction = _$$_REQUIRE(_dependencyMap[2]);

  var construct = _$$_REQUIRE(_dependencyMap[3]);

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  module.exports = _wrapNativeSuper;
},14458,[14377,14389,14461,14464]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  module.exports = _isNativeFunction;
},14461,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      module.exports = _construct = Reflect.construct;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  module.exports = _construct;
},14464,[14389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException: function reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException: function reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {
      NativeModule.updateExceptionMessage(message, stack, exceptionId);
    },
    dismissRedbox: function dismissRedbox() {
      if (NativeModule.dismissRedbox) {
        NativeModule.dismissRedbox();
      }
    },
    reportException: function reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }

      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = ExceptionsManager;
  exports.default = _default;
},14467,[14308,14341,10066]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('Promise', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
},14470,[14473,10159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[0]);

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},14473,[10084]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;

  Promise.prototype['finally'] = function (f) {
    return this.then(function (value) {
      return Promise.resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return Promise.resolve(f()).then(function () {
        throw err;
      });
    });
  };
},14476,[10168]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;
    return _$$_REQUIRE(_dependencyMap[1]);
  });
},14479,[14473,14482]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},14482,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var _require = _$$_REQUIRE(_dependencyMap[0]),
        polyfillGlobal = _require.polyfillGlobal;

    var defineLazyTimer = function defineLazyTimer(name) {
      polyfillGlobal(name, function () {
        return _$$_REQUIRE(_dependencyMap[1])[name];
      });
    };

    defineLazyTimer('setTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('setImmediate');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('clearInterval');
    defineLazyTimer('clearImmediate');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
  }
},14485,[14473,10063]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('Timing');

  exports.default = _default;
},14488,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var performance = _$$_REQUIRE(_dependencyMap[0]);

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},14491,[14494]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _$$_REQUIRE(_dependencyMap[0]);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},14494,[14497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},14497,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
  polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[2]);
  });
  polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[3]).fetch;
  });
  polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Headers;
  });
  polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Request;
  });
  polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[5]);
  });
  polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[6]);
  });
  polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[7]);
  });
  polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URL;
  });
  polyfillGlobal('URLSearchParams', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URLSearchParams;
  });
  polyfillGlobal('AbortController', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortController;
  });
  polyfillGlobal('AbortSignal', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortSignal;
  });
},14500,[14473,10177,10219,10222,10228,10210,10234,10237,10240,14521]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('BlobModule');

  exports.default = _default;
},14503,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var privateData = new WeakMap();
  var wrappers = new WeakMap();

  function pd(event) {
    var retv = privateData.get(event);

    if (retv === null) {
      throw new TypeError("'this' is expected an Event object, but got " + JSON.stringify(event));
    }

    return retv;
  }

  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }

      return;
    }

    if (!data.event.cancelable) {
      return;
    }

    data.canceled = true;

    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget: eventTarget,
      event: event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });
    var keys = Object.keys(event);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  Event.prototype = {
    get type() {
      return pd(this).event.type;
    },

    get target() {
      return pd(this).eventTarget;
    },

    get currentTarget() {
      return pd(this).currentTarget;
    },

    composedPath: function composedPath() {
      var currentTarget = pd(this).currentTarget;

      if (currentTarget == null) {
        return [];
      }

      return [currentTarget];
    },

    get NONE() {
      return 0;
    },

    get CAPTURING_PHASE() {
      return 1;
    },

    get AT_TARGET() {
      return 2;
    },

    get BUBBLING_PHASE() {
      return 3;
    },

    get eventPhase() {
      return pd(this).eventPhase;
    },

    stopPropagation: function stopPropagation() {
      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;

      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },

    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },

    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },

    preventDefault: function preventDefault() {
      setCancelFlag(pd(this));
    },

    get defaultPrevented() {
      return pd(this).canceled;
    },

    get composed() {
      return Boolean(pd(this).event.composed);
    },

    get timeStamp() {
      return pd(this).timeStamp;
    },

    get srcElement() {
      return pd(this).eventTarget;
    },

    get cancelBubble() {
      return pd(this).stopped;
    },

    set cancelBubble(value) {
      if (!value) {
        return;
      }

      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },

    get returnValue() {
      return !pd(this).canceled;
    },

    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },

    initEvent: function initEvent() {}
  };
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    wrappers.set(window.Event.prototype, Event);
  }

  function defineRedirectDescriptor(key) {
    return {
      get: function get() {
        return pd(this).event[key];
      },
      set: function set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineCallDescriptor(key) {
    return {
      value: function value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);

    if (keys.length === 0) {
      return BaseEvent;
    }

    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }

    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }

    return CustomEvent;
  }

  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }

    var wrapper = wrappers.get(proto);

    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }

    return wrapper;
  }

  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  var listenersMap = new WeakMap();
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  function isObject(x) {
    return x !== null && typeof x === "object";
  }

  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);

    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }

    return listeners;
  }

  function defineEventAttributeDescriptor(eventName) {
    return {
      get: function get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }

          node = node.next;
        }

        return null;
      },
      set: function set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null;
        }

        var listeners = getListeners(this);
        var prev = null;
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }

          node = node.next;
        }

        if (listener !== null) {
          var newNode = {
            listener: listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };

          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, "on" + eventName, defineEventAttributeDescriptor(eventName));
  }

  function defineCustomEventTarget(eventNames) {
    function CustomEventTarget() {
      EventTarget.call(this);
    }

    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }

    return CustomEventTarget;
  }

  function EventTarget() {
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }

    if (arguments.length > 0) {
      var types = new Array(arguments.length);

      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }

      return defineCustomEventTarget(types);
    }

    throw new TypeError("Cannot call a class as a function");
  }

  EventTarget.prototype = {
    addEventListener: function addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }

      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener: listener,
        listenerType: listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };
      var node = listeners.get(eventName);

      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      var prev = null;

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          return;
        }

        prev = node;
        node = node.next;
      }

      prev.next = newNode;
    },
    removeEventListener: function removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }

          return;
        }

        prev = node;
        node = node.next;
      }
    },
    dispatchEvent: function dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);

      if (node == null) {
        return true;
      }

      var wrappedEvent = wrapEvent(this, event);
      var prev = null;

      while (node != null) {
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        if (isStopped(wrappedEvent)) {
          break;
        }

        node = node.next;
      }

      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }

  exports.defineEventAttribute = defineEventAttribute;
  exports.EventTarget = EventTarget;
  exports.default = EventTarget;
  module.exports = EventTarget;
  module.exports.EventTarget = module.exports["default"] = EventTarget;
  module.exports.defineEventAttribute = defineEventAttribute;
},14506,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Networking');

  exports.default = _default;
},14509,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    exports.DOMException = self.DOMException;

    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };

      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }

    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.onabort = function () {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }

    fetch.polyfill = true;

    if (!self.fetch) {
      self.fetch = fetch;
      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;
    }

    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},14512,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('WebSocketModule');

  exports.default = _default;
},14515,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('FileReaderModule');

  exports.default = _default;
},14518,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var eventTargetShim = _$$_REQUIRE(_dependencyMap[5]);

  var AbortSignal = function (_eventTargetShim$Even) {
    _inherits(AbortSignal, _eventTargetShim$Even);

    function AbortSignal() {
      var _this;

      _classCallCheck(this, AbortSignal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AbortSignal).call(this));
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }

    _createClass(AbortSignal, [{
      key: "aborted",
      get: function get() {
        var aborted = abortedFlags.get(this);

        if (typeof aborted !== "boolean") {
          throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got " + (this === null ? "null" : typeof this));
        }

        return aborted;
      }
    }]);

    return AbortSignal;
  }(eventTargetShim.EventTarget);

  eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");

  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }

  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }

    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }

  var abortedFlags = new WeakMap();
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") === "symbol") {
    Object.defineProperty(AbortSignal.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
      configurable: true,
      value: "AbortSignal"
    });
  }

  var AbortController = function () {
    function AbortController() {
      _classCallCheck(this, AbortController);

      signals.set(this, createAbortSignal());
    }

    _createClass(AbortController, [{
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }, {
      key: "signal",
      get: function get() {
        return getSignal(this);
      }
    }]);

    return AbortController;
  }();

  var signals = new WeakMap();

  function getSignal(controller) {
    var signal = signals.get(controller);

    if (signal == null) {
      throw new TypeError("Expected 'this' to be an 'AbortController' object, but got " + (controller === null ? "null" : typeof controller));
    }

    return signal;
  }

  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") === "symbol") {
    Object.defineProperty(AbortController.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
      configurable: true,
      value: "AbortController"
    });
  }

  exports.AbortController = AbortController;
  exports.AbortSignal = AbortSignal;
  exports.default = AbortController;
  module.exports = AbortController;
  module.exports.AbortController = module.exports["default"] = AbortController;
  module.exports.AbortSignal = AbortSignal;
},14521,[14320,14323,14371,14377,14386,14506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.alert) {
    global.alert = function (text) {
      _$$_REQUIRE(_dependencyMap[0]).alert('Alert', '' + text);
    };
  }
},14524,[10243]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('DialogManagerAndroid');

  exports.default = _default;
},14527,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeDialogManagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function emptyCallback() {}

  module.exports = {
    alertWithArgs: function alertWithArgs(args, callback) {
      if (!_NativeDialogManagerAndroid.default) {
        return;
      }

      _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
  };
},14530,[14305,14527]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty;

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
},14533,[14473]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

    BatchedBridge.registerLazyCallableModule('Systrace', function () {
      return _$$_REQUIRE(_dependencyMap[1]);
    });
    BatchedBridge.registerLazyCallableModule('JSTimers', function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
    BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
      return _$$_REQUIRE(_dependencyMap[3]);
    });
    BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
      return _$$_REQUIRE(_dependencyMap[4]);
    });
    BatchedBridge.registerLazyCallableModule('RCTLog', function () {
      return _$$_REQUIRE(_dependencyMap[5]);
    });
    BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
      return _$$_REQUIRE(_dependencyMap[6]);
    });
    BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
      return _$$_REQUIRE(_dependencyMap[7]);
    });
    BatchedBridge.registerLazyCallableModule('GlobalPerformanceLogger', function () {
      return _$$_REQUIRE(_dependencyMap[8]);
    });
    BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
      return _$$_REQUIRE(_dependencyMap[9]);
    });
    {
      BatchedBridge.registerCallableModule('HMRClient', _$$_REQUIRE(_dependencyMap[10]));
    }
  }
},14536,[10045,10054,10063,14539,10261,10264,10087,10267,14548,10276,14557]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeHeapCapture = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      if (_NativeHeapCapture.default) {
        _NativeHeapCapture.default.captureComplete(path, error);
      }
    }
  };
  module.exports = HeapCapture;
},14539,[14305,14542]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('HeapCapture');

  exports.default = _default;
},14542,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('JSCSamplingProfiler');

  exports.default = _default;
},14545,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createPerformanceLogger = _$$_REQUIRE(_dependencyMap[0]);

  var GlobalPerformanceLogger = createPerformanceLogger();
  module.exports = GlobalPerformanceLogger;
},14548,[14551]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _$$_REQUIRE(_dependencyMap[0]);

  var infoLog = _$$_REQUIRE(_dependencyMap[1]);

  var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || _$$_REQUIRE(_dependencyMap[2]);

  var _cookies = {};
  var PRINT_TO_CONSOLE = false;

  function createPerformanceLogger() {
    var result = {
      _timespans: {},
      _extras: {},
      _points: {},
      addTimespan: function addTimespan(key, lengthInMs, description) {
        if (this._timespans[key]) {
          return;
        }

        this._timespans[key] = {
          description: description,
          totalTime: lengthInMs
        };
      },
      startTimespan: function startTimespan(key, description) {
        if (this._timespans[key]) {
          return;
        }

        this._timespans[key] = {
          description: description,
          startTime: performanceNow()
        };
        _cookies[key] = Systrace.beginAsyncEvent(key);
      },
      stopTimespan: function stopTimespan(key) {
        var timespan = this._timespans[key];

        if (!timespan || !timespan.startTime) {
          return;
        }

        if (timespan.endTime) {
          return;
        }

        timespan.endTime = performanceNow();
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        Systrace.endAsyncEvent(key, _cookies[key]);
        delete _cookies[key];
      },
      clear: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
      },
      clearCompleted: function clearCompleted() {
        for (var _key in this._timespans) {
          if (this._timespans[_key].totalTime) {
            delete this._timespans[_key];
          }
        }

        this._extras = {};
        this._points = {};
      },
      clearExceptTimespans: function clearExceptTimespans(keys) {
        this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {
          if (keys.indexOf(key) !== -1) {
            previous[key] = this._timespans[key];
          }

          return previous;
        }, {});
        this._extras = {};
        this._points = {};
      },
      currentTimestamp: function currentTimestamp() {
        return performanceNow();
      },
      getTimespans: function getTimespans() {
        return this._timespans;
      },
      hasTimespan: function hasTimespan(key) {
        return !!this._timespans[key];
      },
      logTimespans: function logTimespans() {},
      addTimespans: function addTimespans(newTimespans, labels) {
        for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
          var label = labels[ii / 2];
          this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
        }
      },
      setExtra: function setExtra(key, value) {
        if (this._extras[key]) {
          return;
        }

        this._extras[key] = value;
      },
      getExtras: function getExtras() {
        return this._extras;
      },
      removeExtra: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      },
      logExtras: function logExtras() {},
      markPoint: function markPoint(key, timestamp) {
        var _timestamp;

        if (this._points[key]) {
          return;
        }

        this._points[key] = (_timestamp = timestamp) != null ? _timestamp : performanceNow();
      },
      getPoints: function getPoints() {
        return this._points;
      },
      logPoints: function logPoints() {},
      logEverything: function logEverything() {
        this.logTimespans();
        this.logExtras();
        this.logPoints();
      }
    };
    return result;
  }

  module.exports = createPerformanceLogger;
},14551,[10054,10273,14491]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('JSDevSupport');

  exports.default = _default;
},14554,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HMRClientProdShim = {
    setup: function setup() {},
    enable: function enable() {
      console.error("Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?");
    },
    disable: function disable() {},
    registerBundle: function registerBundle() {},
    log: function log() {}
  };
  module.exports = HMRClientProdShim;
},14557,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  }

  global.__fetchSegment = __fetchSegment;

  function __getSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

    if (!SegmentFetcher.getSegment) {
      throw new Error('SegmentFetcher.getSegment must be defined');
    }

    SegmentFetcher.getSegment(segmentId, options, function (errorObject, path) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null, path);
    });
  }

  global.__getSegment = __getSegment;
},14560,[14563]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('SegmentFetcher');

  exports.default = _default;
},14563,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BatchedBridge() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },

    get ExceptionsManager() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },

    get RCTEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },

    get ReactNativeViewConfigRegistry() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },

    get TextInputState() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },

    get deepDiffer() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },

    get deepFreezeAndThrowOnMutationInDev() {
      return _$$_REQUIRE(_dependencyMap[8]);
    },

    get flattenStyle() {
      return _$$_REQUIRE(_dependencyMap[9]);
    },

    get ReactFiberErrorDialog() {
      return _$$_REQUIRE(_dependencyMap[10]);
    }

  };
},14566,[10045,10141,10066,10282,14569,10285,10279,10288,10057,10291,14572]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();

  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }

    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  exports.register = function (name, callback) {
    invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    viewConfigCallbacks.set(name, callback);
    return name;
  };

  exports.get = function (name) {
    var viewConfig;

    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);

      if (typeof callback !== 'function') {
        invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }

      viewConfigCallbacks.set(name, null);
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
    } else {
      viewConfig = viewConfigs.get(name);
    }

    invariant(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},14569,[14326]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

  function showErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;
    var errorToHandle;

    if (error instanceof Error) {
      errorToHandle = error;
    } else if (typeof error === 'string') {
      errorToHandle = new _ExceptionsManager.SyntheticError(error);
    } else {
      errorToHandle = new _ExceptionsManager.SyntheticError('Unspecified error');
    }

    try {
      errorToHandle.componentStack = componentStack;
    } catch (e) {}

    (0, _ExceptionsManager.handleException)(errorToHandle, false);
    return false;
  }

  module.exports = {
    showErrorDialog: showErrorDialog
  };
},14572,[10141]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},14575,[14578]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.15.0
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _d = undefined,
      e = undefined,
      g = undefined,
      m = undefined,
      n = undefined;
  exports.unstable_now = undefined;
  exports.unstable_forceFrameRate = undefined;

  if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var p = null,
        q = null,
        r = function r() {
      if (null !== p) try {
        var a = exports.unstable_now();
        p(true, a);
        p = null;
      } catch (b) {
        throw setTimeout(r, 0), b;
      }
    };

    exports.unstable_now = function () {
      return Date.now();
    };

    _d = function d(a) {
      null !== p ? setTimeout(_d, 0, a) : (p = a, setTimeout(r, 0));
    };

    e = function e(a, b) {
      q = setTimeout(a, b);
    };

    g = function g() {
      clearTimeout(q);
    };

    m = function m() {
      return false;
    };

    n = exports.unstable_forceFrameRate = function () {};
  } else {
    var t = window.performance,
        u = window.Date,
        v = window.setTimeout,
        w = window.clearTimeout,
        x = window.requestAnimationFrame,
        y = window.cancelAnimationFrame;
    "undefined" !== typeof console && ("function" !== typeof x && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof y && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));
    exports.unstable_now = "object" === typeof t && "function" === typeof t.now ? function () {
      return t.now();
    } : function () {
      return u.now();
    };
    var z = false,
        A = null,
        B = -1,
        C = -1,
        D = 33.33,
        E = -1,
        F = -1,
        G = 0,
        H = false;

    m = function m() {
      return exports.unstable_now() >= G;
    };

    n = function n() {};

    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : 0 < a ? (D = Math.floor(1E3 / a), H = true) : (D = 33.33, H = false);
    };

    var J = function J() {
      if (null !== A) {
        var a = exports.unstable_now(),
            b = 0 < G - a;

        try {
          A(b, a) || (A = null);
        } catch (c) {
          throw I.postMessage(null), c;
        }
      }
    },
        K = new MessageChannel(),
        I = K.port2;

    K.port1.onmessage = J;

    var L = function L(a) {
      if (null === A) F = E = -1, z = false;else {
        z = true;
        x(function (a) {
          w(B);
          L(a);
        });

        var b = function b() {
          G = exports.unstable_now() + D / 2;
          J();
          B = v(b, 3 * D);
        };

        B = v(b, 3 * D);

        if (-1 !== E && .1 < a - E) {
          var c = a - E;
          !H && -1 !== F && c < D && F < D && (D = c < F ? F : c, 8.33 > D && (D = 8.33));
          F = c;
        }

        E = a;
        G = a + D;
        I.postMessage(null);
      }
    };

    _d = function _d(a) {
      A = a;
      z || (z = true, x(function (a) {
        L(a);
      }));
    };

    e = function e(a, b) {
      C = v(function () {
        a(exports.unstable_now());
      }, b);
    };

    g = function g() {
      w(C);
      C = -1;
    };
  }

  var M = null,
      N = null,
      O = null,
      P = 3,
      Q = false,
      R = false,
      S = false;

  function T(a, b) {
    var c = a.next;
    if (c === a) M = null;else {
      a === M && (M = c);
      var f = a.previous;
      f.next = c;
      c.previous = f;
    }
    a.next = a.previous = null;
    c = a.callback;
    f = P;
    var l = O;
    P = a.priorityLevel;
    O = a;

    try {
      var h = a.expirationTime <= b;

      switch (P) {
        case 1:
          var k = c(h);
          break;

        case 2:
          k = c(h);
          break;

        case 3:
          k = c(h);
          break;

        case 4:
          k = c(h);
          break;

        case 5:
          k = c(h);
      }
    } catch (Z) {
      throw Z;
    } finally {
      P = f, O = l;
    }

    if ("function" === typeof k) if (b = a.expirationTime, a.callback = k, null === M) M = a.next = a.previous = a;else {
      k = null;
      h = M;

      do {
        if (b <= h.expirationTime) {
          k = h;
          break;
        }

        h = h.next;
      } while (h !== M);

      null === k ? k = M : k === M && (M = a);
      b = k.previous;
      b.next = k.previous = a;
      a.next = k;
      a.previous = b;
    }
  }

  function U(a) {
    if (null !== N && N.startTime <= a) {
      do {
        var b = N,
            c = b.next;
        if (b === c) N = null;else {
          N = c;
          var f = b.previous;
          f.next = c;
          c.previous = f;
        }
        b.next = b.previous = null;
        V(b, b.expirationTime);
      } while (null !== N && N.startTime <= a);
    }
  }

  function W(a) {
    S = false;
    U(a);
    R || (null !== M ? (R = true, _d(X)) : null !== N && e(W, N.startTime - a));
  }

  function X(a, b) {
    R = false;
    S && (S = false, g());
    U(b);
    Q = true;

    try {
      if (!a) for (; null !== M && M.expirationTime <= b;) {
        T(M, b), b = exports.unstable_now(), U(b);
      } else if (null !== M) {
        do {
          T(M, b), b = exports.unstable_now(), U(b);
        } while (null !== M && !m());
      }
      if (null !== M) return true;
      null !== N && e(W, N.startTime - b);
      return false;
    } finally {
      Q = false;
    }
  }

  function Y(a) {
    switch (a) {
      case 1:
        return -1;

      case 2:
        return 250;

      case 5:
        return 1073741823;

      case 4:
        return 1E4;

      default:
        return 5E3;
    }
  }

  function V(a, b) {
    if (null === M) M = a.next = a.previous = a;else {
      var c = null,
          f = M;

      do {
        if (b < f.expirationTime) {
          c = f;
          break;
        }

        f = f.next;
      } while (f !== M);

      null === c ? c = M : c === M && (M = a);
      b = c.previous;
      b.next = c.previous = a;
      a.next = c;
      a.previous = b;
    }
  }

  var aa = n;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_NormalPriority = 3;
  exports.unstable_IdlePriority = 5;
  exports.unstable_LowPriority = 4;

  exports.unstable_runWithPriority = function (a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;

      default:
        a = 3;
    }

    var c = P;
    P = a;

    try {
      return b();
    } finally {
      P = c;
    }
  };

  exports.unstable_next = function (a) {
    switch (P) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;

      default:
        b = P;
    }

    var c = P;
    P = b;

    try {
      return a();
    } finally {
      P = c;
    }
  };

  exports.unstable_scheduleCallback = function (a, b, c) {
    var f = exports.unstable_now();

    if ("object" === typeof c && null !== c) {
      var l = c.delay;
      l = "number" === typeof l && 0 < l ? f + l : f;
      c = "number" === typeof c.timeout ? c.timeout : Y(a);
    } else c = Y(a), l = f;

    c = l + c;
    a = {
      callback: b,
      priorityLevel: a,
      startTime: l,
      expirationTime: c,
      next: null,
      previous: null
    };

    if (l > f) {
      c = l;
      if (null === N) N = a.next = a.previous = a;else {
        b = null;
        var h = N;

        do {
          if (c < h.startTime) {
            b = h;
            break;
          }

          h = h.next;
        } while (h !== N);

        null === b ? b = N : b === N && (N = a);
        c = b.previous;
        c.next = b.previous = a;
        a.next = b;
        a.previous = c;
      }
      null === M && N === a && (S ? g() : S = true, e(W, l - f));
    } else V(a, c), R || Q || (R = true, _d(X));

    return a;
  };

  exports.unstable_cancelCallback = function (a) {
    var b = a.next;

    if (null !== b) {
      if (a === b) a === M ? M = null : a === N && (N = null);else {
        a === M ? M = b : a === N && (N = b);
        var c = a.previous;
        c.next = b;
        b.previous = c;
      }
      a.next = a.previous = null;
    }
  };

  exports.unstable_wrapCallback = function (a) {
    var b = P;
    return function () {
      var c = P;
      P = b;

      try {
        return a.apply(this, arguments);
      } finally {
        P = c;
      }
    };
  };

  exports.unstable_getCurrentPriorityLevel = function () {
    return P;
  };

  exports.unstable_shouldYield = function () {
    var a = exports.unstable_now();
    U(a);
    return null !== O && null !== M && M.startTime <= a && M.expirationTime < O.expirationTime || m();
  };

  exports.unstable_requestPaint = aa;

  exports.unstable_continueExecution = function () {
    R || Q || (R = true, _d(X));
  };

  exports.unstable_pauseExecution = function () {};

  exports.unstable_getFirstCallbackNode = function () {
    return M;
  };
},14578,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeViewViewConfigAndroid = {
    uiViewClassName: 'RCTView',
    bubblingEventTypes: {
      topSelect: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        }
      }
    },
    directEventTypes: {
      topClick: {
        registrationName: 'onClick'
      },
      topContentSizeChange: {
        registrationName: 'onContentSizeChange'
      },
      topLoadingError: {
        registrationName: 'onLoadingError'
      },
      topLoadingFinish: {
        registrationName: 'onLoadingFinish'
      },
      topLoadingStart: {
        registrationName: 'onLoadingStart'
      },
      topMessage: {
        registrationName: 'onMessage'
      },
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      }
    },
    validAttributes: {
      hasTVPreferredFocus: true,
      focusable: true,
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true,
      nextFocusDown: true,
      nextFocusForward: true,
      nextFocusLeft: true,
      nextFocusRight: true,
      nextFocusUp: true
    }
  };
  module.exports = ReactNativeViewViewConfigAndroid;
},14581,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _verifyComponentAttributeEquivalence = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[4]);

  function registerGeneratedViewConfig(componentName, viewConfig) {
    var mergedViewConfig = {
      uiViewClassName: componentName,
      Commands: {},
      bubblingEventTypes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.bubblingEventTypes, viewConfig.bubblingEventTypes || {}),
      directEventTypes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.directEventTypes, viewConfig.directEventTypes || {}),
      validAttributes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.validAttributes, viewConfig.validAttributes || {})
    };
    ReactNativeViewConfigRegistry.register(componentName, function () {
      (0, _verifyComponentAttributeEquivalence.default)(componentName, mergedViewConfig);
      return mergedViewConfig;
    });
  }

  module.exports = registerGeneratedViewConfig;
},14584,[14305,14314,14587,14569,14590]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.lefthandObjectDiff = lefthandObjectDiff;
  exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
  exports.stringifyViewConfig = stringifyViewConfig;
  exports.default = undefined;

  var _ReactNativeViewViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var getNativeComponentAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var IGNORED_KEYS = ['transform', 'hitSlop'];

  function verifyComponentAttributeEquivalence(componentName, config) {}

  function lefthandObjectDiff(leftObj, rightObj) {
    var differentKeys = {};

    function compare(leftItem, rightItem, key) {
      if (typeof leftItem !== typeof rightItem && leftItem != null) {
        differentKeys[key] = rightItem;
        return;
      }

      if (typeof leftItem === 'object') {
        var objDiff = lefthandObjectDiff(leftItem, rightItem);

        if (Object.keys(objDiff).length > 1) {
          differentKeys[key] = objDiff;
        }

        return;
      }

      if (leftItem !== rightItem) {
        differentKeys[key] = rightItem;
        return;
      }
    }

    for (var key in leftObj) {
      if (IGNORED_KEYS.includes(key)) {
        continue;
      }

      if (!rightObj) {
        differentKeys[key] = {};
      } else if (leftObj.hasOwnProperty(key)) {
        compare(leftObj[key], rightObj[key], key);
      }
    }

    return differentKeys;
  }

  function getConfigWithoutViewProps(viewConfig, propName) {
    if (!viewConfig[propName]) {
      return {};
    }

    return Object.keys(viewConfig[propName]).filter(function (prop) {
      return !_ReactNativeViewViewConfig.default[propName][prop];
    }).reduce(function (obj, prop) {
      obj[prop] = viewConfig[propName][prop];
      return obj;
    }, {});
  }

  function stringifyViewConfig(viewConfig) {
    return JSON.stringify(viewConfig, function (key, val) {
      if (typeof val === 'function') {
        return "\u0192 " + val.name;
      }

      return val;
    }, 2);
  }

  var _default = verifyComponentAttributeEquivalence;
  exports.default = _default;
},14587,[14305,14590,14593]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ReactNativeViewViewConfigAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ReactNativeViewConfig = {
    uiViewClassName: 'RCTView',
    baseModuleName: null,
    Manager: 'ViewManager',
    Commands: {},
    Constants: {},
    bubblingEventTypes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.bubblingEventTypes, {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topPress: {
        phasedRegistrationNames: {
          bubbled: 'onPress',
          captured: 'onPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      },
      topTouchStart: {
        phasedRegistrationNames: {
          bubbled: 'onTouchStart',
          captured: 'onTouchStartCapture'
        }
      }
    }),
    directEventTypes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.directEventTypes, {
      topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
      },
      topAccessibilityEscape: {
        registrationName: 'onAccessibilityEscape'
      },
      topAccessibilityTap: {
        registrationName: 'onAccessibilityTap'
      },
      topLayout: {
        registrationName: 'onLayout'
      },
      topMagicTap: {
        registrationName: 'onMagicTap'
      },
      onGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
      },
      onGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
      }
    }),
    validAttributes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.validAttributes, {
      accessibilityActions: true,
      accessibilityElementsHidden: true,
      accessibilityHint: true,
      accessibilityIgnoresInvertColors: true,
      accessibilityLabel: true,
      accessibilityLiveRegion: true,
      accessibilityRole: true,
      accessibilityStates: true,
      accessibilityState: true,
      accessibilityViewIsModal: true,
      accessible: true,
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      aspectRatio: true,
      backfaceVisibility: true,
      backgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderBottomWidth: true,
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderEndColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderEndWidth: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderLeftWidth: true,
      borderRadius: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderRightWidth: true,
      borderStartColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderStartWidth: true,
      borderStyle: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      borderTopWidth: true,
      borderWidth: true,
      bottom: true,
      clickable: true,
      collapsable: true,
      direction: true,
      display: true,
      elevation: true,
      end: true,
      flex: true,
      flexBasis: true,
      flexDirection: true,
      flexGrow: true,
      flexShrink: true,
      flexWrap: true,
      height: true,
      hitSlop: {
        diff: _$$_REQUIRE(_dependencyMap[4])
      },
      importantForAccessibility: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      nativeID: true,
      needsOffscreenAlphaCompositing: true,
      onAccessibilityAction: true,
      onAccessibilityEscape: true,
      onAccessibilityTap: true,
      onLayout: true,
      onMagicTap: true,
      opacity: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      pointerEvents: true,
      position: true,
      removeClippedSubviews: true,
      renderToHardwareTextureAndroid: true,
      right: true,
      rotation: true,
      scaleX: true,
      scaleY: true,
      shadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      shadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[5])
      },
      shadowOpacity: true,
      shadowRadius: true,
      shouldRasterizeIOS: true,
      start: true,
      style: {
        alignContent: true,
        alignItems: true,
        alignSelf: true,
        aspectRatio: true,
        backfaceVisibility: true,
        backgroundColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderBottomColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderBottomEndRadius: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderBottomStartRadius: true,
        borderBottomWidth: true,
        borderColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderEndColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderEndWidth: true,
        borderLeftColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderLeftWidth: true,
        borderRadius: true,
        borderRightColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderRightWidth: true,
        borderStartColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderStartWidth: true,
        borderStyle: true,
        borderTopColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderTopEndRadius: true,
        borderTopLeftRadius: true,
        borderTopRightRadius: true,
        borderTopStartRadius: true,
        borderTopWidth: true,
        borderWidth: true,
        bottom: true,
        color: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        decomposedMatrix: true,
        direction: true,
        display: true,
        elevation: true,
        end: true,
        flex: true,
        flexBasis: true,
        flexDirection: true,
        flexGrow: true,
        flexShrink: true,
        flexWrap: true,
        fontFamily: true,
        fontSize: true,
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        height: true,
        includeFontPadding: true,
        justifyContent: true,
        left: true,
        letterSpacing: true,
        lineHeight: true,
        margin: true,
        marginBottom: true,
        marginEnd: true,
        marginHorizontal: true,
        marginLeft: true,
        marginRight: true,
        marginStart: true,
        marginTop: true,
        marginVertical: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        opacity: true,
        overflow: true,
        overlayColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        padding: true,
        paddingBottom: true,
        paddingEnd: true,
        paddingHorizontal: true,
        paddingLeft: true,
        paddingRight: true,
        paddingStart: true,
        paddingTop: true,
        paddingVertical: true,
        position: true,
        resizeMode: true,
        right: true,
        rotation: true,
        scaleX: true,
        scaleY: true,
        shadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        shadowOffset: {
          diff: _$$_REQUIRE(_dependencyMap[5])
        },
        shadowOpacity: true,
        shadowRadius: true,
        start: true,
        textAlign: true,
        textAlignVertical: true,
        textDecorationColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        textDecorationLine: true,
        textDecorationStyle: true,
        textShadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        textShadowOffset: true,
        textShadowRadius: true,
        textTransform: true,
        tintColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        top: true,
        transform: {
          diff: _$$_REQUIRE(_dependencyMap[6])
        },
        transformMatrix: true,
        translateX: true,
        translateY: true,
        width: true,
        writingDirection: true,
        zIndex: true
      },
      testID: true,
      top: true,
      transform: {
        diff: _$$_REQUIRE(_dependencyMap[6])
      },
      translateX: true,
      translateY: true,
      width: true,
      zIndex: true
    })
  };
  module.exports = ReactNativeViewConfig;
},14590,[14305,14314,14581,10393,10408,10402,10411]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var UIManager = _$$_REQUIRE(_dependencyMap[3]);

  var insetsDiffer = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var matricesDiffer = _$$_REQUIRE(_dependencyMap[6]);

  var pointsDiffer = _$$_REQUIRE(_dependencyMap[7]);

  var processColor = _$$_REQUIRE(_dependencyMap[8]);

  var processColorArray = _$$_REQUIRE(_dependencyMap[9]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[10]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[11]);

  var warning = _$$_REQUIRE(_dependencyMap[12]);

  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);
    var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;

    while (baseModuleName) {
      var baseModule = UIManager.getViewManagerConfig(baseModuleName);

      if (!baseModule) {
        warning(false, 'Base module "%s" does not exist', baseModuleName);
        baseModuleName = null;
      } else {
        bubblingEventTypes = _objectSpread({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = _objectSpread({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = _objectSpread({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }

    var validAttributes = {};

    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null && process == null ? true : {
        diff: diff,
        process: process
      };
    }

    validAttributes.style = ReactNativeStyleAttributes;

    _extends(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });

    if (!hasAttachedDefaultEventTypes) {
      attachDefaultEventTypes(viewConfig);
      hasAttachedDefaultEventTypes = true;
    }

    return viewConfig;
  }

  var hasAttachedDefaultEventTypes = false;

  function attachDefaultEventTypes(viewConfig) {
    var constants = UIManager.getConstants();

    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }

  function merge(destination, source) {
    if (!source) {
      return destination;
    }

    if (!destination) {
      return source;
    }

    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      var sourceValue = source[key];

      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];

        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }

      destination[key] = sourceValue;
    }

    return destination;
  }

  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;

      case 'CGPoint':
        return pointsDiffer;

      case 'CGSize':
        return sizesDiffer;

      case 'UIEdgeInsets':
        return insetsDiffer;
    }

    return null;
  }

  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;

      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;

      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;

      case 'Color':
        return processColor;

      case 'ColorArray':
        return processColorArray;
    }

    return null;
  }

  module.exports = getNativeComponentAttributes;
},14593,[14344,14314,10378,10279,10408,14326,10411,10414,10393,14596,10417,10402,14332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var processColor = _$$_REQUIRE(_dependencyMap[0]);

  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColor);
  }

  module.exports = processColorArray;
},14596,[10393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };

  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }

    throw new Error('no such scale ' + scale.toString());
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},14599,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('SourceCode');

  exports.default = _default;
},14602,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('AndroidProgressBar');

  exports.default = _default;
},14605,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _requireNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function codegenNativeComponent(componentName, options) {
    var componentNameInUse = options && options.paperComponentName ? options.paperComponentName : componentName;

    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_reactNative.UIManager.getViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _reactNative.UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)) {
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        throw new Error("Failed to find native component for either " + componentName + " or " + (options.paperComponentNameDeprecated || '(unknown)'));
      }
    }

    return (0, _requireNativeComponent.default)(componentNameInUse);
  }

  var _default = codegenNativeComponent;
  exports.default = _default;
},14608,[14305,10372,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTextStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedTextStylePropTypes);
  var DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: DeprecatedEdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool,
    dataDetectorType: PropTypes.oneOf(DataDetectorTypes)
  };
},14611,[14419,14614,14617,10318,14434]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = DeprecatedEdgeInsetsPropType;
},14614,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deprecatedCreateStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[0]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[1]);

  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = deprecatedCreateStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = DeprecatedStyleSheetPropType;
},14617,[14620,10291]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var merge = _$$_REQUIRE(_dependencyMap[1]);

  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var _key2 in allKeys) {
        var checker = shapeTypes[_key2];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, _key2, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
        rest[_key3 - 4] = arguments[_key3];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = deprecatedCreateStrictShapeTypeChecker;
},14620,[14326,10339]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(false);
},14623,[10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeTVNavigationEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(_NativeTVNavigationEventEmitter.default);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},14626,[14305,14629,10066,10198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('TVNavigationEventEmitter');

  exports.default = _default;
},14629,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? invariant(false) : undefined;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},14632,[14635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant(...): Second argument must be a string.');
    }
  };

  function invariant(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return String(args[argIndex++]);
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},14635,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }

    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1;
    throw error;
  }

  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},14638,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    DeprecatedAccessibilityRoles: ['none', 'button', 'link', 'search', 'image', 'keyboardkey', 'text', 'adjustable', 'imagebutton', 'header', 'summary', 'alert', 'checkbox', 'combobox', 'menu', 'menubar', 'menuitem', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'spinbutton', 'switch', 'tab', 'tablist', 'timer', 'toolbar'],
    DeprecatedAccessibilityStates: ['selected', 'disabled', 'checked', 'unchecked', 'busy', 'expanded', 'collapsed', 'hasPopup']
  };
},14641,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _require = _$$_REQUIRE(_dependencyMap[1]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[2]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[8]);

  var emptyAnimation = {
    start: function start() {},
    stop: function stop() {},
    reset: function reset() {},
    _startNativeLoop: function _startNativeLoop() {},
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };

  var spring = function spring(value, config) {
    var anyValue = value;
    return _objectSpread({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var timing = function timing(value, config) {
    var anyValue = value;
    return _objectSpread({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var decay = function decay(value, config) {
    return emptyAnimation;
  };

  var sequence = function sequence(animations) {
    return emptyAnimation;
  };

  var parallel = function parallel(animations, config) {
    return emptyAnimation;
  };

  var delay = function delay(time) {
    return emptyAnimation;
  };

  var stagger = function stagger(time, animations) {
    return emptyAnimation;
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    return emptyAnimation;
  };

  var event = function event(argMapping, config) {
    return null;
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: AnimatedImplementation.add,
    subtract: AnimatedImplementation.subtract,
    divide: AnimatedImplementation.divide,
    multiply: AnimatedImplementation.multiply,
    modulo: AnimatedImplementation.modulo,
    diffClamp: AnimatedImplementation.diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: AnimatedImplementation.forkEvent,
    unforkEvent: AnimatedImplementation.unforkEvent,
    Event: AnimatedEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},14644,[14314,10528,10525,10534,10537,10567,10531,10579,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('NativeAnimatedModule');

  exports.default = _default;
},14647,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = function (_AnimatedWithChildren) {
    _inherits(AnimatedSubtraction, _AnimatedWithChildren);

    function AnimatedSubtraction(a, b) {
      var _this;

      _classCallCheck(this, AnimatedSubtraction);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSubtraction).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedSubtraction;
  }(AnimatedWithChildren);

  module.exports = AnimatedSubtraction;
},14650,[14320,14323,14371,14377,14380,14386,10534,10537,10531,10543]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var FlatList = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(FlatList, {
    scrollEventThrottle: 0.0001
  });
},14653,[10657,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('AndroidSwipeRefreshLayout');

  exports.default = _default;
},14656,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('PullToRefreshView', {
    paperComponentName: 'RCTRefreshControl'
  });

  exports.default = _default;
},14659,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('FrameRateLogger');

  exports.default = _default;
},14662,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('KeyboardObserver');

  exports.default = _default;
},14665,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var OUTER_PROPS = _extends(Object.create(null), {
    margin: true,
    marginHorizontal: true,
    marginVertical: true,
    marginBottom: true,
    marginTop: true,
    marginLeft: true,
    marginRight: true,
    flex: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: true,
    alignSelf: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    width: true,
    minWidth: true,
    maxWidth: true,
    position: true,
    left: true,
    right: true,
    bottom: true,
    top: true
  });

  function splitLayoutProps(props) {
    var inner = {};
    var outer = {};

    if (props) {
      Object.keys(props).forEach(function (k) {
        var value = props[k];

        if (OUTER_PROPS[k]) {
          outer[k] = value;
        } else {
          inner[k] = value;
        }
      });
    }

    return {
      outer: outer,
      inner: inner
    };
  }

  module.exports = splitLayoutProps;
},14668,[14344]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Image = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(Image);
},14671,[10606,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},14674,[14677]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},14677,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var PlatformViewPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[6]),
      DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles,
      DeprecatedAccessibilityStates = _require.DeprecatedAccessibilityStates;

  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
  module.exports = _objectSpread({
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityHint: PropTypes.string,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
    accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityStates)),
    accessibilityState: PropTypes.object,
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: DeprecatedEdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  }, PlatformViewPropTypes);
},14680,[14314,14614,14617,14437,10348,10318,14641]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  var ImageViewNativeComponent = requireNativeComponent('RCTImageView');
  module.exports = ImageViewNativeComponent;
},14683,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  var TextInlineImage = requireNativeComponent('RCTTextInlineImage');
  module.exports = TextInlineImage;
},14686,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ScrollView = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(ScrollView, {
    scrollEventThrottle: 0.0001
  });
},14689,[10609,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SectionList = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(SectionList, {
    scrollEventThrottle: 0.0001
  });
},14692,[10744,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Text = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(Text);
},14695,[10483,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var View = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(View);
},14698,[10447,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = requireNativeComponent('AndroidCheckBox');
},14701,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function setAndForwardRef(_ref) {
    var getForwardedRef = _ref.getForwardedRef,
        setLocalRef = _ref.setLocalRef;
    return function forwardRef(ref) {
      var forwardedRef = getForwardedRef();
      setLocalRef(ref);

      if (typeof forwardedRef === 'function') {
        forwardedRef(ref);
      } else if (typeof forwardedRef === 'object' && forwardedRef != null) {
        forwardedRef.current = ref;
      }
    };
  }

  module.exports = setAndForwardRef;
},14704,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = undefined;

  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['openDrawer', 'closeDrawer']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('AndroidDrawerLayout');

  exports.default = _default;
},14707,[14308,14305,14710,14608,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(function (command) {
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (0, _ReactNative.dispatchCommand)(ref, command, args);
      };
    });
    return commandObj;
  }

  var _default = codegenNativeCommands;
  exports.default = _default;
},14710,[10114]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('StatusBarManager');

  exports.default = _default;
},14713,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[2]);

  var InternalListViewType = _$$_REQUIRE(_dependencyMap[3]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[6]);

  var Platform = ReactNative.Platform;
  var RCTScrollViewManager = ReactNative.NativeModules.ScrollViewManager;
  var ScrollView = ReactNative.ScrollView;

  var ScrollResponderMixin = _$$_REQUIRE(_dependencyMap[7]).Mixin;

  var StaticRenderer = _$$_REQUIRE(_dependencyMap[8]);

  var View = ReactNative.View;

  var cloneReferencedElement = _$$_REQUIRE(_dependencyMap[9]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[10]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[11]);

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _rafIds: [],
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponderMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _this$_scrollComponen;

        (_this$_scrollComponen = this._scrollComponent).scrollTo.apply(_this$_scrollComponen, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn("The scroll component used by the ListView does not support scrollToEnd. Check the renderScrollComponent prop of your ListView.");
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, props);
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: false,
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent && this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._rafIds = [];
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentWillUnmount: function componentWillUnmount() {
      this._rafIds.forEach(cancelAnimationFrame);

      this._rafIds = [];
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this._requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _$$_REQUIRE(_dependencyMap[12]);

            warning(false, "In next release empty section headers will be rendered. In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _$$_REQUIRE(_dependencyMap[13]);

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered. If empty section headers are not desirable their indices should be excluded from sectionIDs object. In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(View, {
                key: 's_' + comboID
              }, separator));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _this$props = this.props,
          renderScrollComponent = _this$props.renderScrollComponent,
          props = _objectWithoutProperties(_this$props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      _extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });

      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _requestAnimationFrame: function _requestAnimationFrame(fn) {
      var _this4 = this;

      var rafId = requestAnimationFrame(function () {
        _this4._rafIds = _this4._rafIds.filter(function (id) {
          return id !== rafId;
        });
        fn();
      });

      this._rafIds.push(rafId);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this5 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this5._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this5._measureAndUpdateScrollProps();

        _this5._prevRenderedRowsCount = _this5.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this6 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this6._childFrames[newFrame.index] = _objectSpread({}, newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},14716,[14314,14344,14407,14719,14722,10297,10033,10615,14728,10675,10456,14725,10078,13495]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[6]);

  var InternalListViewType = function (_React$Component) {
    "use strict";

    _inherits(InternalListViewType, _React$Component);

    function InternalListViewType() {
      _classCallCheck(this, InternalListViewType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalListViewType).apply(this, arguments));
    }

    _createClass(InternalListViewType, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {}
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {}
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {}
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {}
    }, {
      key: "getMetrics",
      value: function getMetrics() {}
    }, {
      key: "scrollTo",
      value: function scrollTo() {}
    }, {
      key: "scrollToEnd",
      value: function scrollToEnd(options) {}
    }]);

    return InternalListViewType;
  }(React.Component);

  InternalListViewType.DataSource = ListViewDataSource;
  module.exports = InternalListViewType;
},14719,[14320,14323,14371,14377,14386,10297,14722]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[4]);

  var warning = _$$_REQUIRE(_dependencyMap[5]);

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      _classCallCheck(this, ListViewDataSource);

      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    _createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [_toConsumableArray(rowIdentities)] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var _sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[_sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, _sectionID), this._getSectionHeaderData(this._dataBlob, _sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[_sectionID] || !prevRowsHash[_sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, _sectionID, rowID), this._getRowData(this._dataBlob, _sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);

    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var _key = arr[ii];
      warning(!result[_key], 'Value appears more than once in array: ' + _key);
      result[_key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},14722,[14359,14320,14323,13495,14725,10078]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},14725,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StaticRenderer = function (_React$Component) {
    _inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      _classCallCheck(this, StaticRenderer);

      return _possibleConstructorReturn(this, _getPrototypeOf(StaticRenderer).apply(this, arguments));
    }

    _createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);

    return StaticRenderer;
  }(React.Component);

  module.exports = StaticRenderer;
},14728,[14320,14323,14371,14377,14386,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "WebView", {
    enumerable: true,
    get: function get() {
      return _WebView.default;
    }
  });
  exports.default = undefined;

  var _WebView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _WebView.default;
  exports.default = _default;
},14731,[14305,14734]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _WebViewShared = _$$_REQUIRE(_dependencyMap[5]);

  var _WebView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) {
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  var __rest = this && this.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var UIManager = _reactNative.UIManager;
  var RNCWebView = (0, _reactNative.requireNativeComponent)('RNCWebView');
  var resolveAssetSource = _reactNative.Image.resolveAssetSource;

  var WebView = function (_super) {
    __extends(WebView, _super);

    function WebView() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.startUrl = null;
      _this.state = {
        viewState: _this.props.startInLoadingState ? 'LOADING' : 'IDLE',
        lastErrorEvent: null
      };
      _this.webViewRef = _react.default.createRef();

      _this.getCommands = function () {
        return UIManager.getViewManagerConfig('RNCWebView').Commands;
      };

      _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().goForward, undefined);
      };

      _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().goBack, undefined);
      };

      _this.reload = function () {
        _this.setState({
          viewState: 'LOADING'
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().reload, undefined);
      };

      _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().stopLoading, undefined);
      };

      _this.requestFocus = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().requestFocus, undefined);
      };

      _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().postMessage, [String(data)]);
      };

      _this.clearFormData = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().clearFormData, undefined);
      };

      _this.clearCache = function (includeDiskFiles) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().clearCache, [includeDiskFiles]);
      };

      _this.clearHistory = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().clearHistory, undefined);
      };

      _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().injectJavaScript, [data]);
      };

      _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      };

      _this.getWebViewHandle = function () {
        var nodeHandle = (0, _reactNative.findNodeHandle)(_this.webViewRef.current);
        (0, _invariant.default)(nodeHandle != null, 'nodeHandle expected to be non-null');
        return nodeHandle;
      };

      _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        var url = event.nativeEvent.url;
        _this.startUrl = url;

        if (onLoadStart) {
          onLoadStart(event);
        }

        _this.updateNavigationState(event);
      };

      _this.onLoadingError = function (event) {
        event.persist();
        var _a = _this.props,
            onError = _a.onError,
            onLoadEnd = _a.onLoadEnd;

        if (onError) {
          onError(event);
        }

        if (onLoadEnd) {
          onLoadEnd(event);
        }

        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: 'ERROR'
        });
      };

      _this.onHttpError = function (event) {
        var onHttpError = _this.props.onHttpError;

        if (onHttpError) {
          onHttpError(event);
        }
      };

      _this.onLoadingFinish = function (event) {
        var _a = _this.props,
            onLoad = _a.onLoad,
            onLoadEnd = _a.onLoadEnd;
        var url = event.nativeEvent.url;

        if (onLoad) {
          onLoad(event);
        }

        if (onLoadEnd) {
          onLoadEnd(event);
        }

        if (url === _this.startUrl) {
          _this.setState({
            viewState: 'IDLE'
          });
        }

        _this.updateNavigationState(event);
      };

      _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;

        if (onMessage) {
          onMessage(event);
        }
      };

      _this.onLoadingProgress = function (event) {
        var onLoadProgress = _this.props.onLoadProgress;
        var progress = event.nativeEvent.progress;

        if (progress === 1) {
          _this.setState(function (state) {
            if (state.viewState === 'LOADING') {
              return {
                viewState: 'IDLE'
              };
            }

            return null;
          });
        }

        if (onLoadProgress) {
          onLoadProgress(event);
        }
      };

      _this.onShouldStartLoadWithRequestCallback = function (shouldStart, url) {
        if (shouldStart) {
          UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this.getCommands().loadUrl, [String(url)]);
        }
      };

      return _this;
    }

    WebView.prototype.render = function () {
      var _a = this.props,
          onMessage = _a.onMessage,
          onShouldStartLoadWithRequestProp = _a.onShouldStartLoadWithRequest,
          originWhitelist = _a.originWhitelist,
          renderError = _a.renderError,
          renderLoading = _a.renderLoading,
          source = _a.source,
          style = _a.style,
          containerStyle = _a.containerStyle,
          _b = _a.nativeConfig,
          nativeConfig = _b === undefined ? {} : _b,
          otherProps = __rest(_a, ["onMessage", "onShouldStartLoadWithRequest", "originWhitelist", "renderError", "renderLoading", "source", "style", "containerStyle", "nativeConfig"]);

      var otherView = null;

      if (this.state.viewState === 'LOADING') {
        otherView = (renderLoading || _WebViewShared.defaultRenderLoading)();
      } else if (this.state.viewState === 'ERROR') {
        var errorEvent = this.state.lastErrorEvent;
        (0, _invariant.default)(errorEvent != null, 'lastErrorEvent expected to be non-null');
        otherView = (renderError || _WebViewShared.defaultRenderError)(errorEvent.domain, errorEvent.code, errorEvent.description);
      } else if (this.state.viewState !== 'IDLE') {
        console.error("RNCWebView invalid state encountered: " + this.state.viewState);
      }

      var webViewStyles = [_WebView.default.container, _WebView.default.webView, style];
      var webViewContainerStyle = [_WebView.default.container, containerStyle];

      if (typeof source !== "number" && source && 'method' in source) {
        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }
      }

      var NativeWebView = nativeConfig.component || RNCWebView;
      var onShouldStartLoadWithRequest = (0, _WebViewShared.createOnShouldStartLoadWithRequest)(this.onShouldStartLoadWithRequestCallback, originWhitelist, onShouldStartLoadWithRequestProp);

      var webView = _react.default.createElement(NativeWebView, (0, _extends2.default)({
        key: "webViewKey"
      }, otherProps, {
        messagingEnabled: typeof onMessage === 'function',
        onLoadingError: this.onLoadingError,
        onLoadingFinish: this.onLoadingFinish,
        onLoadingProgress: this.onLoadingProgress,
        onLoadingStart: this.onLoadingStart,
        onHttpError: this.onHttpError,
        onMessage: this.onMessage,
        onShouldStartLoadWithRequest: onShouldStartLoadWithRequest,
        ref: this.webViewRef,
        source: resolveAssetSource(source),
        style: webViewStyles
      }, nativeConfig.props));

      return _react.default.createElement(_reactNative.View, {
        style: webViewContainerStyle
      }, webView, otherView);
    };

    WebView.defaultProps = {
      overScrollMode: 'always',
      javaScriptEnabled: true,
      thirdPartyCookiesEnabled: true,
      scalesPageToFit: true,
      allowsFullscreenVideo: false,
      allowFileAccess: false,
      saveFormDataDisabled: false,
      cacheEnabled: true,
      androidHardwareAccelerationDisabled: false,
      originWhitelist: _WebViewShared.defaultOriginWhitelist
    };

    WebView.isFileUploadSupported = function () {
      return __awaiter(undefined, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, _reactNative.NativeModules.RNCWebView.isFileUploadSupported()];
        });
      });
    };

    return WebView;
  }(_react.default.Component);

  var _default = WebView;
  exports.default = _default;
},14734,[14305,14344,10297,10033,14326,14737,14743]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.defaultRenderError = exports.defaultRenderLoading = exports.createOnShouldStartLoadWithRequest = exports.defaultOriginWhitelist = undefined;

  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _WebView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var __spreadArrays = this && this.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
      s += arguments[i].length;
    }

    for (var r = Array(s), k = 0, i = 0; i < il; i++) {
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
        r[k] = a[j];
      }
    }

    return r;
  };

  var defaultOriginWhitelist = ['http://*', 'https://*'];
  exports.defaultOriginWhitelist = defaultOriginWhitelist;

  var extractOrigin = function extractOrigin(url) {
    var result = /^[A-Za-z][A-Za-z0-9+\-.]+:(\/\/)?[^/]*/.exec(url);
    return result === null ? '' : result[0];
  };

  var originWhitelistToRegex = function originWhitelistToRegex(originWhitelist) {
    return "^" + (0, _escapeStringRegexp.default)(originWhitelist).replace(/\\\*/g, '.*');
  };

  var passesWhitelist = function passesWhitelist(compiledWhitelist, url) {
    var origin = extractOrigin(url);
    return compiledWhitelist.some(function (x) {
      return new RegExp(x).test(origin);
    });
  };

  var compileWhitelist = function compileWhitelist(originWhitelist) {
    return __spreadArrays(['about:blank'], originWhitelist || []).map(originWhitelistToRegex);
  };

  var createOnShouldStartLoadWithRequest = function createOnShouldStartLoadWithRequest(loadRequest, originWhitelist, onShouldStartLoadWithRequest) {
    return function (_a) {
      var nativeEvent = _a.nativeEvent;
      var shouldStart = true;
      var url = nativeEvent.url,
          lockIdentifier = nativeEvent.lockIdentifier;

      if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {
        _reactNative.Linking.openURL(url);

        shouldStart = false;
      }

      if (onShouldStartLoadWithRequest) {
        shouldStart = onShouldStartLoadWithRequest(nativeEvent);
      }

      loadRequest(shouldStart, url, lockIdentifier);
    };
  };

  exports.createOnShouldStartLoadWithRequest = createOnShouldStartLoadWithRequest;

  var defaultRenderLoading = function defaultRenderLoading() {
    return _react.default.createElement(_reactNative.View, {
      style: _WebView.default.loadingOrErrorView
    }, _react.default.createElement(_reactNative.ActivityIndicator, null));
  };

  exports.defaultRenderLoading = defaultRenderLoading;

  var defaultRenderError = function defaultRenderError(errorDomain, errorCode, errorDesc) {
    return _react.default.createElement(_reactNative.View, {
      style: _WebView.default.loadingOrErrorView
    }, _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorTextTitle
    }, "Error loading page"), _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorText
    }, "Domain: " + errorDomain), _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorText
    }, "Error Code: " + errorCode), _react.default.createElement(_reactNative.Text, {
      style: _WebView.default.errorText
    }, "Description: " + errorDesc));
  };

  exports.defaultRenderError = defaultRenderError;
},14737,[14305,14740,10297,10033,14743]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;

  module.exports = function (string) {
    if (typeof string !== 'string') {
      throw new TypeError('Expected a string');
    }

    return string.replace(matchOperatorsRegex, '\\$&');
  };
},14740,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    loadingOrErrorView: {
      position: 'absolute',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
      width: '100%',
      backgroundColor: 'white'
    },
    loadingProgressBar: {
      height: 20
    },
    errorText: {
      fontSize: 14,
      textAlign: 'center',
      marginBottom: 2
    },
    errorTextTitle: {
      fontSize: 15,
      fontWeight: '500',
      marginBottom: 10
    },
    webView: {
      backgroundColor: '#ffffff'
    }
  });

  var _default = styles;
  exports.default = _default;
},14743,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var InputAccessoryView = function (_React$Component) {
    (0, _inherits2.default)(InputAccessoryView, _React$Component);

    function InputAccessoryView() {
      (0, _classCallCheck2.default)(this, InputAccessoryView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InputAccessoryView).apply(this, arguments));
    }

    (0, _createClass2.default)(InputAccessoryView, [{
      key: "render",
      value: function render() {
        {
          console.warn('<InputAccessoryView> is only supported on iOS.');
        }

        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(_RCTInputAccessoryViewNativeComponent.default, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor
        }, this.props.children);
      }
    }]);
    return InputAccessoryView;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},14746,[14305,14320,14323,14371,14377,14386,14749,14419,10066,10297,10441]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('RCTInputAccessoryView');

  exports.default = _default;
},14749,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ModalManager');

  exports.default = _default;
},14752,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('ModalHostView', {
    interfaceOnly: true,
    paperComponentName: 'RCTModalHostView'
  });

  exports.default = _default;
},14755,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(0);
},14758,[10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('I18nManager');

  exports.default = _default;
},14761,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = (0, _reactNative.requireNativeComponent)('AndroidDropdownPicker');
},14764,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = (0, _reactNative.requireNativeComponent)('AndroidDialogPicker');
},14767,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var View = _$$_REQUIRE(_dependencyMap[4]);

  var exported;
  {
    var SafeAreaView = function SafeAreaView(props, forwardedRef) {
      var emulateUnlessSupported = props.emulateUnlessSupported,
          localProps = _objectWithoutProperties(props, ["emulateUnlessSupported"]);

      return React.createElement(View, _extends({}, localProps, {
        ref: forwardedRef
      }));
    };

    var SafeAreaViewRef = React.forwardRef(SafeAreaView);
    SafeAreaViewRef.displayName = 'SafeAreaView';
    exported = SafeAreaViewRef;
  }
  module.exports = exported;
},14770,[14344,14407,10066,10297,10447]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('Slider', {
    interfaceOnly: true,
    paperComponentName: 'RCTSlider'
  });

  exports.default = _default;
},14773,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('Switch', {
    paperComponentName: 'RCTSwitch'
  });

  exports.default = _default;
},14776,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      NativeComponent = _require.NativeComponent;

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = requireNativeComponent('AndroidSwitch');
},14779,[10114,10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedViewPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DocumentSelectionState = _$$_REQUIRE(_dependencyMap[4]);

  var Text = _$$_REQUIRE(_dependencyMap[5]);

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  module.exports = _objectSpread({}, DeprecatedViewPropTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
    autoCompleteType: PropTypes.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
    autoCorrect: PropTypes.bool,
    spellCheck: PropTypes.bool,
    autoFocus: PropTypes.bool,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    editable: PropTypes.bool,
    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
    returnKeyLabel: PropTypes.string,
    maxLength: PropTypes.number,
    numberOfLines: PropTypes.number,
    disableFullscreenUI: PropTypes.bool,
    enablesReturnKeyAutomatically: PropTypes.bool,
    multiline: PropTypes.bool,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    onChange: PropTypes.func,
    onChangeText: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    onTextInput: PropTypes.func,
    onEndEditing: PropTypes.func,
    onSelectionChange: PropTypes.func,
    onSubmitEditing: PropTypes.func,
    onKeyPress: PropTypes.func,
    onLayout: PropTypes.func,
    onScroll: PropTypes.func,
    placeholder: PropTypes.string,
    placeholderTextColor: DeprecatedColorPropType,
    scrollEnabled: PropTypes.bool,
    secureTextEntry: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    selectionState: PropTypes.instanceOf(DocumentSelectionState),
    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),
    value: PropTypes.string,
    defaultValue: PropTypes.string,
    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
    clearTextOnFocus: PropTypes.bool,
    selectTextOnFocus: PropTypes.bool,
    blurOnSubmit: PropTypes.bool,
    style: Text.propTypes.style,
    underlineColorAndroid: DeprecatedColorPropType,
    inlineImageLeft: PropTypes.string,
    inlineImagePadding: PropTypes.number,
    rejectResponderTermination: PropTypes.bool,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    caretHidden: PropTypes.bool,
    contextMenuHidden: PropTypes.bool,
    inputAccessoryViewID: PropTypes.string,
    textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode']),
    showSoftInputOnFocus: PropTypes.bool
  });
},14782,[14314,10318,14419,14680,10789,10483]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},14785,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ActionSheetManager');

  exports.default = _default;
},14788,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('HeadlessJsTaskSupport');

  exports.default = _default;
},14791,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var HeadlessJsTaskError = function (_Error) {
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);

    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HeadlessJsTaskError).apply(this, arguments));
    }

    return HeadlessJsTaskError;
  }((0, _wrapNativeSuper2.default)(Error));

  exports.default = HeadlessJsTaskError;
},14794,[14305,14320,14371,14377,14386,14458]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('BugReporting');

  exports.default = _default;
},14797,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('RedBox');

  exports.default = _default;
},14800,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _GlobalPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
  module.exports = PerformanceLoggerContext;
},14803,[14305,14308,10297,14548]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[1]);

  var Text = _$$_REQUIRE(_dependencyMap[2]);

  var View = _$$_REQUIRE(_dependencyMap[3]);

  function ReactFabricIndicator() {
    return React.createElement(View, {
      style: styles.container
    }, React.createElement(Text, {
      style: styles.text
    }, "FABRIC"));
  }

  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: 'rgba(0,0,0, 0.25)',
      position: 'absolute',
      top: 0,
      right: 0,
      padding: 2
    },
    text: {
      fontSize: 6,
      color: '#ffffff'
    }
  });
  module.exports = ReactFabricIndicator;
},14806,[10297,10441,10483,10447]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('DeviceEventManager');

  exports.default = _default;
},14809,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[0]);

  var ReactFabric;
  {
    ReactFabric = _$$_REQUIRE(_dependencyMap[1]);
  }

  _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);

  module.exports = ReactFabric;
},14812,[14566,14815]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2]),
      React = _$$_REQUIRE(_dependencyMap[3]),
      Scheduler = _$$_REQUIRE(_dependencyMap[4]);

  function ReactError(error) {
    error.name = "Invariant Violation";
    return error;
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          if (!JSCompiler_inline_result) throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      if (eventPluginOrder) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (namesToPlugins[pluginName]) throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type."));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw ReactError(Error("Touch object is missing identifier."));
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  });

  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };

  getInstanceFromNode = getInstanceFromInstance;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical._nativeTag;
    if (!inst) throw ReactError(Error("All native instances should have a tag."));
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental");
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder");
  var MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    if (2 !== isFiberMountedImpl(fiber)) throw ReactError(Error("Unable to find node on an unmounted component."));
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = isFiberMountedImpl(fiber);
      if (3 === alternate) throw ReactError(Error("Unable to find node on an unmounted component."));
      return 1 === alternate ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw ReactError(Error("Unable to find node on an unmounted component."));
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
        }
      }
      if (a.alternate !== b) throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
    }

    if (3 !== a.tag) throw ReactError(Error("Unable to find node on an unmounted component."));
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (getInstanceFromNode(target)) throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function flushDiscreteUpdatesImpl() {}

  var isInsideEventHandler = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) if (flushDiscreteUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  (function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {};

    ReactNativeComponent.prototype.focus = function () {};

    ReactNativeComponent.prototype.measure = function () {};

    ReactNativeComponent.prototype.measureInWindow = function () {};

    ReactNativeComponent.prototype.measureLayout = function () {};

    ReactNativeComponent.prototype.setNativeProps = function () {};

    return ReactNativeComponent;
  })(React.Component);

  new Map();
  new Map();
  new Set();
  new Map();

  function dispatchEvent(target, topLevelType, nativeEvent) {
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
      }
    });
  }

  function shim$1() {
    throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
  }

  var _nativeFabricUIManage$1 = nativeFabricUIManager,
      createNode = _nativeFabricUIManage$1.createNode,
      cloneNode = _nativeFabricUIManage$1.cloneNode,
      cloneNodeWithNewChildren = _nativeFabricUIManage$1.cloneNodeWithNewChildren,
      cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage$1.cloneNodeWithNewChildrenAndProps,
      cloneNodeWithNewProps = _nativeFabricUIManage$1.cloneNodeWithNewProps,
      createChildNodeSet = _nativeFabricUIManage$1.createChildSet,
      appendChildNode = _nativeFabricUIManage$1.appendChild,
      appendChildNodeToSet = _nativeFabricUIManage$1.appendChildToSet,
      completeRoot = _nativeFabricUIManage$1.completeRoot,
      registerEventHandler = _nativeFabricUIManage$1.registerEventHandler,
      fabricMeasure = _nativeFabricUIManage$1.measure,
      fabricMeasureInWindow = _nativeFabricUIManage$1.measureInWindow,
      fabricMeasureLayout = _nativeFabricUIManage$1.measureLayout,
      getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      nextReactTag = 2;
  registerEventHandler && registerEventHandler(dispatchEvent);

  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
      if (!(this instanceof ReactFabricHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
      this._internalInstanceHandle = internalInstanceHandle;
    }

    ReactFabricHostComponent.prototype.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.measure = function (callback) {
      fabricMeasure(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureInWindow = function (callback) {
      fabricMeasureInWindow(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      "number" !== typeof relativeToNativeNode && relativeToNativeNode instanceof ReactFabricHostComponent && fabricMeasureLayout(this._internalInstanceHandle.stateNode.node, relativeToNativeNode._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactFabricHostComponent.prototype.setNativeProps = function () {};

    return ReactFabricHostComponent;
  }();

  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    if (!hostContext.isInAParentText) throw ReactError(Error("Text strings must be rendered within a <Text> component."));
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var updatePayload = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, updatePayload),
      canonical: instance.canonical
    };
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority,
      fakeCallbackNode = {},
      requestPaint = undefined !== Scheduler_requestPaint ? Scheduler_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = false,
      initialTimeMs = Scheduler_now(),
      now = 1e4 > initialTimeMs ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return 99;

      case Scheduler_UserBlockingPriority:
        return 98;

      case Scheduler_NormalPriority:
        return 97;

      case Scheduler_LowPriority:
        return 96;

      case Scheduler_IdlePriority:
        return 95;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return Scheduler_ImmediatePriority;

      case 98:
        return Scheduler_UserBlockingPriority;

      case 97:
        return Scheduler_NormalPriority;

      case 96:
        return Scheduler_LowPriority;

      case 95:
        return Scheduler_IdlePriority;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function runWithPriority$1(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    null !== immediateQueueCallbackNode && Scheduler_cancelCallback(immediateQueueCallbackNode);
    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority$1(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }

  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (1073741823 === expirationTime) return 99;
    if (1 === expirationTime) return 95;
    currentTime = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - currentTime);
    return 0 >= currentTime ? 99 : 250 >= currentTime ? 98 : 5250 >= currentTime ? 97 : 95;
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        lazyComponent._status = 0;
        result = lazyComponent._ctor;
        result = result();
        result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        });

        switch (lazyComponent._status) {
          case 1:
            return lazyComponent._result;

          case 2:
            throw lazyComponent._result;
        }

        lazyComponent._result = result;
        throw result;
    }
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue2 = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue2;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime, suspenseConfig) {
    return {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        if ("function" !== typeof _callback3) throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + _callback3));

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;

        if (element) {
          if (1 !== element.tag) throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
          inst = element.stateNode;
        }

        if (!inst) throw ReactError(Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue."));
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      if ("string" !== typeof returnFiber) throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
      if (!element._owner) throw ReactError(Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw ReactError(Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")."));
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw ReactError(Error("An iterable object provided no iterator."));

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);

              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, ReactError(Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var SubtreeSuspenseContextMask = 1,
      InvisibleParentSuspenseContext = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        if (null !== node.memoizedState) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var NoEffect$1 = 0,
      UnmountSnapshot = 2,
      UnmountMutation = 4,
      MountMutation = 8,
      UnmountLayout = 16,
      MountLayout = 32,
      MountPassive = 64,
      UnmountPassive = 128,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      renderExpirationTime$1 = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      nextCurrentHook = null,
      firstWorkInProgressHook = null,
      workInProgressHook = null,
      nextWorkInProgressHook = null,
      remainingExpirationTime = 0,
      componentUpdateQueue = null,
      sideEffectTag = 0,
      didScheduleRenderPhaseUpdate = false,
      renderPhaseUpdates = null,
      numberOfReRenders = 0;

  function throwInvalidHookError() {
    throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!is(nextDeps[i], prevDeps[i])) return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
    renderExpirationTime$1 = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    nextCurrentHook = null !== current ? current.memoizedState : null;
    ReactCurrentDispatcher$1.current = null === nextCurrentHook ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    workInProgress = Component(props, refOrContext);

    if (didScheduleRenderPhaseUpdate) {
      do {
        didScheduleRenderPhaseUpdate = false, numberOfReRenders += 1, nextCurrentHook = null !== current ? current.memoizedState : null, nextWorkInProgressHook = firstWorkInProgressHook, componentUpdateQueue = workInProgressHook = currentHook = null, ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdate, workInProgress = Component(props, refOrContext);
      } while (didScheduleRenderPhaseUpdate);

      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    current = currentlyRenderingFiber$1;
    current.memoizedState = firstWorkInProgressHook;
    current.expirationTime = remainingExpirationTime;
    current.updateQueue = componentUpdateQueue;
    current.effectTag |= sideEffectTag;
    current = null !== currentHook && null !== currentHook.next;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    if (current) throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
    return workInProgress;
  }

  function resetHooks() {
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    didScheduleRenderPhaseUpdate = false;
    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    null === workInProgressHook ? firstWorkInProgressHook = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook, nextCurrentHook = null !== currentHook ? currentHook.next : null;else {
      if (null === nextCurrentHook) throw ReactError(Error("Rendered more hooks than during the previous render."));
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        queue: currentHook.queue,
        baseUpdate: currentHook.baseUpdate,
        next: null
      };
      workInProgressHook = null === workInProgressHook ? firstWorkInProgressHook = newHook : workInProgressHook.next = newHook;
      nextCurrentHook = currentHook.next;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
    queue.lastRenderedReducer = reducer;

    if (0 < numberOfReRenders) {
      var _dispatch = queue.dispatch;

      if (null !== renderPhaseUpdates) {
        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (undefined !== firstRenderPhaseUpdate) {
          renderPhaseUpdates.delete(queue);
          var newState = hook.memoizedState;

          do {
            newState = reducer(newState, firstRenderPhaseUpdate.action), firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
          } while (null !== firstRenderPhaseUpdate);

          is(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          hook.baseUpdate === queue.last && (hook.baseState = newState);
          queue.lastRenderedState = newState;
          return [newState, _dispatch];
        }
      }

      return [hook.memoizedState, _dispatch];
    }

    _dispatch = queue.last;
    var baseUpdate = hook.baseUpdate;
    newState = hook.baseState;
    null !== baseUpdate ? (null !== _dispatch && (_dispatch.next = null), _dispatch = baseUpdate.next) : _dispatch = null !== _dispatch ? _dispatch.next : null;

    if (null !== _dispatch) {
      var newBaseUpdate = firstRenderPhaseUpdate = null,
          _update = _dispatch,
          didSkip = false;

      do {
        var updateExpirationTime = _update.expirationTime;
        updateExpirationTime < renderExpirationTime$1 ? (didSkip || (didSkip = true, newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState), updateExpirationTime > remainingExpirationTime && (remainingExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig), newState = _update.eagerReducer === reducer ? _update.eagerState : reducer(newState, _update.action));
        baseUpdate = _update;
        _update = _update.next;
      } while (null !== _update && _update !== _dispatch);

      didSkip || (newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState);
      is(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      hook.baseUpdate = newBaseUpdate;
      hook.baseState = firstRenderPhaseUpdate;
      queue.lastRenderedState = newState;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    null === componentUpdateQueue ? (componentUpdateQueue = {
      lastEffect: null
    }, componentUpdateQueue.lastEffect = tag.next = tag) : (create = componentUpdateQueue.lastEffect, null === create ? componentUpdateQueue.lastEffect = tag.next = tag : (destroy = create.next, create.next = tag, tag.next = destroy, componentUpdateQueue.lastEffect = tag));
    return tag;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, undefined, undefined === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(NoEffect$1, create, destroy, deps);
        return;
      }
    }

    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, destroy, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function mountDebugValue() {}

  function dispatchAction(fiber, queue, action) {
    if (!(25 > numberOfReRenders)) throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1) {
      if (didScheduleRenderPhaseUpdate = true, fiber = {
        expirationTime: renderExpirationTime$1,
        suspenseConfig: null,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === renderPhaseUpdates && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), undefined === action) renderPhaseUpdates.set(queue, fiber);else {
        for (queue = action; null !== queue.next;) {
          queue = queue.next;
        }

        queue.next = fiber;
      }
    } else {
      var currentTime = requestCurrentTime(),
          _suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);
      _suspenseConfig = {
        expirationTime: currentTime,
        suspenseConfig: _suspenseConfig,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var _last = queue.last;
      if (null === _last) _suspenseConfig.next = _suspenseConfig;else {
        var first = _last.next;
        null !== first && (_suspenseConfig.next = first);
        _last.next = _suspenseConfig;
      }
      queue.last = _suspenseConfig;
      if (0 === fiber.expirationTime && (null === alternate || 0 === alternate.expirationTime) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
            _eagerState = alternate(currentState, action);

        _suspenseConfig.eagerReducer = alternate;
        _suspenseConfig.eagerState = _eagerState;
        if (is(_eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleUpdateOnFiber(fiber, currentTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return mountEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = undefined !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function useState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return updateEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return updateEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: updateReducer,
    useRef: function useRef() {
      return updateWorkInProgressHook().memoizedState;
    },
    useState: function useState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 13:
        return false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current$$1, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref && (didReceiveUpdate = false, updateExpirationTime < renderExpirationTime) ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {};

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextState = null,
        nextDidTimeout = false,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & ForceSuspenseFallback) && (null === current$$1 || null !== current$$1.memoizedState));
    JSCompiler_temp ? (nextState = SUSPENDED_MARKER, nextDidTimeout = true, workInProgress.effectTag &= -65) : null !== current$$1 && null === current$$1.memoizedState || undefined === nextProps.fallback || true === nextProps.unstable_avoidThisFallback || (suspenseContext |= InvisibleParentSuspenseContext);
    suspenseContext &= SubtreeSuspenseContextMask;
    push(suspenseStackCursor, suspenseContext, workInProgress);
    if (null === current$$1) {
      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        current$$1 = createFiberFromFragment(null, mode, 0, null);
        current$$1.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, current$$1.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = current$$1, nextDidTimeout = nextDidTimeout.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextProps, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        current$$1.sibling = renderExpirationTime;
        mode = current$$1;
      } else mode = renderExpirationTime = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime);
    } else {
      if (null !== current$$1.memoizedState) {
        if (suspenseContext = current$$1.child, mode = suspenseContext.sibling, nextDidTimeout) {
          nextProps = nextProps.fallback;
          renderExpirationTime = createWorkInProgress(suspenseContext, suspenseContext.pendingProps, 0);
          renderExpirationTime.return = workInProgress;
          if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== suspenseContext.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
            nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
          }
          nextProps = createWorkInProgress(mode, nextProps, mode.expirationTime);
          nextProps.return = workInProgress;
          renderExpirationTime.sibling = nextProps;
          mode = renderExpirationTime;
          renderExpirationTime.childExpirationTime = 0;
          renderExpirationTime = nextProps;
        } else mode = renderExpirationTime = reconcileChildFibers(workInProgress, suspenseContext.child, nextProps.children, renderExpirationTime);
      } else if (suspenseContext = current$$1.child, nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        nextProps.child = suspenseContext;
        null !== suspenseContext && (suspenseContext.return = nextProps);
        if (0 === (workInProgress.mode & 2)) for (suspenseContext = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = suspenseContext; null !== suspenseContext;) {
          suspenseContext.return = nextProps, suspenseContext = suspenseContext.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        renderExpirationTime.effectTag |= 2;
        mode = nextProps;
        nextProps.childExpirationTime = 0;
      } else renderExpirationTime = mode = reconcileChildFibers(workInProgress, suspenseContext, nextProps.children, renderExpirationTime);
      workInProgress.stateNode = current$$1.stateNode;
    }
    workInProgress.memoizedState = nextState;
    workInProgress.child = mode;
    return renderExpirationTime;
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode);
  }

  function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current$$1, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.effectTag |= 64;else {
      if (null !== current$$1 && 0 !== (current$$1.effectTag & 64)) a: for (current$$1 = workInProgress.child; null !== current$$1;) {
        if (13 === current$$1.tag) {
          if (null !== current$$1.memoizedState) {
            current$$1.expirationTime < renderExpirationTime && (current$$1.expirationTime = renderExpirationTime);
            var alternate = current$$1.alternate;
            null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
            scheduleWorkOnParentPath(current$$1.return, renderExpirationTime);
          }
        } else if (null !== current$$1.child) {
          current$$1.child.return = current$$1;
          current$$1 = current$$1.child;
          continue;
        }

        if (current$$1 === workInProgress) break a;

        for (; null === current$$1.sibling;) {
          if (null === current$$1.return || current$$1.return === workInProgress) break a;
          current$$1 = current$$1.return;
        }

        current$$1.sibling.return = current$$1.return;
        current$$1 = current$$1.sibling;
      }
      nextProps &= SubtreeSuspenseContextMask;
    }
    push(suspenseStackCursor, nextProps, workInProgress);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          nextProps = renderExpirationTime.alternate, null !== nextProps && null === findFirstSuspended(nextProps) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderExpirationTime, tailMode);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          nextProps = revealOrder.alternate;

          if (null !== nextProps && null === findFirstSuspended(nextProps)) {
            workInProgress.child = revealOrder;
            break;
          }

          nextProps = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = nextProps;
        }

        initSuspenseListRenderState(workInProgress, true, renderExpirationTime, null, tailMode);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.dependencies = current$$1.dependencies);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current$$1 && workInProgress.child !== current$$1.child) throw ReactError(Error("Resuming work not yet implemented."));

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var _appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance, node.type, node.memoizedProps, node));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, _appendAllChildren(parent, primaryChildParent, true, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance, node.type, node.memoizedProps, node));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  updateHostContainer = function updateHostContainer(workInProgress) {
    var portalOrRoot = workInProgress.stateNode;

    if (null !== workInProgress.firstEffect) {
      var container = portalOrRoot.containerInfo,
          newChildSet = createChildNodeSet(container);
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.effectTag |= 4;
      completeRoot(container, newChildSet);
    }
  };

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = null === workInProgress.firstEffect) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, recyclableInstance = type.node, type = {
        node: current ? null !== newProps ? cloneNodeWithNewProps(recyclableInstance, newProps) : cloneNode(recyclableInstance) : null !== newProps ? cloneNodeWithNewChildrenAndProps(recyclableInstance, newProps) : cloneNodeWithNewChildren(recyclableInstance),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.effectTag |= 4 : _appendAllChildren(type, workInProgress, false, false));
    }
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
        workInProgress.effectTag = effectTag & -2049 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 18:
        return null;

      case 19:
        return pop(suspenseStackCursor, workInProgress), null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));

  function logCapturedError(capturedError) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet$1 = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current$$1, instance) {
    try {
      instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current$$1, unmountError);
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitHookEffectList(unmountTag, mountTag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & unmountTag) !== NoEffect$1) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && destroy();
        }

        (effect.tag & mountTag) !== NoEffect$1 && (destroy = effect.create, effect.destroy = destroy());
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitUnmount(current$$1$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var firstEffect = updateQueue.next;
          runWithPriority$1(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var destroy = effect.destroy;

              if (undefined !== destroy) {
                var current$$1 = current$$1$jscomp$0;

                try {
                  destroy();
                } catch (error) {
                  captureCommitPhaseError(current$$1, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        renderPriorityLevel = current$$1$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$$1$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        createChildNodeSet(current$$1$jscomp$0.stateNode.containerInfo);
    }
  }

  function detachFiber(current$$1) {
    var alternate = current$$1.alternate;
    current$$1.return = null;
    current$$1.child = null;
    current$$1.memoizedState = null;
    current$$1.updateQueue = null;
    current$$1.dependencies = null;
    current$$1.alternate = null;
    current$$1.firstEffect = null;
    current$$1.lastEffect = null;
    current$$1.pendingProps = null;
    current$$1.memoizedProps = null;
    null !== alternate && detachFiber(alternate);
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;

      case 12:
        return;

      case 13:
        null !== finishedWork.memoizedState && (globalMostRecentFallbackTime = now());
        attachSuspenseRetryListeners(finishedWork);
        return;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        return;
    }

    switch (finishedWork.tag) {
      case 1:
      case 5:
      case 6:
      case 20:
        break;

      case 3:
      case 4:
        break;

      default:
        throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet$1());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootErrored = 1,
      RootSuspended = 2,
      RootSuspendedWithDelay = 3,
      RootCompleted = 4,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootHasPendingPing = false,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      pendingPassiveEffectsExpirationTime = 0,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTime() {
    return (executionContext & 48) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 1;
        break;

      default:
        throw ReactError(Error("Expected a valid priority level"));
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime && --currentTime;
    return currentTime;
  }

  function scheduleUpdateOnFiber(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      fiber.pingTime = 0;
      var priorityLevel = getCurrentPriorityLevel();
      if (1073741823 === expirationTime) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & 48) === NoContext) for (var callback = renderRoot(fiber, 1073741823, true); null !== callback;) {
          callback = callback(true);
        } else scheduleCallbackForRoot(fiber, 99, 1073741823), executionContext === NoContext && flushSyncCallbackQueue();
      } else scheduleCallbackForRoot(fiber, priorityLevel, expirationTime);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (undefined === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime), fiber = root.lastPendingTime, 0 === fiber || expirationTime < fiber) && (root.lastPendingTime = expirationTime);
    return root;
  }

  function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
    if (root.callbackExpirationTime < expirationTime) {
      var existingCallbackNode = root.callbackNode;
      null !== existingCallbackNode && existingCallbackNode !== fakeCallbackNode && Scheduler_cancelCallback(existingCallbackNode);
      root.callbackExpirationTime = expirationTime;
      1073741823 === expirationTime ? root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime))) : (existingCallbackNode = null, 1 !== expirationTime && (existingCallbackNode = {
        timeout: 10 * (1073741821 - expirationTime) - now()
      }), root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), existingCallbackNode));
    }
  }

  function runRootCallback(root, callback, isSync) {
    var prevCallbackNode = root.callbackNode,
        continuation = null;

    try {
      return continuation = callback(isSync), null !== continuation ? runRootCallback.bind(null, root, continuation) : null;
    } finally {
      null === continuation && prevCallbackNode === root.callbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0);
    }
  }

  function resolveLocksOnRoot(root, expirationTime) {
    var firstBatch = root.firstBatch;
    return null !== firstBatch && firstBatch._defer && firstBatch._expirationTime >= expirationTime ? (scheduleCallback(97, function () {
      firstBatch._onComplete();

      return null;
    }), true) : false;
  }

  function flushPendingDiscreteUpdates() {
    if (null !== rootsWithPendingDiscreteUpdates) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
      });
      flushSyncCallbackQueue();
    }
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          var childContextTypes = interruptedWork.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork);
          break;

        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer(interruptedWork);
          break;

        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null, expirationTime);
    renderExpirationTime = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootHasPendingPing = false;
  }

  function renderRoot(root$jscomp$0, expirationTime, isSync) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    if (root$jscomp$0.firstPendingTime < expirationTime) return null;
    if (isSync && root$jscomp$0.finishedExpirationTime === expirationTime) return commitRoot.bind(null, root$jscomp$0);
    flushPassiveEffects();
    if (root$jscomp$0 !== workInProgressRoot || expirationTime !== renderExpirationTime) prepareFreshStack(root$jscomp$0, expirationTime);else if (workInProgressRootExitStatus === RootSuspendedWithDelay) if (workInProgressRootHasPendingPing) prepareFreshStack(root$jscomp$0, expirationTime);else {
      var lastPendingTime = root$jscomp$0.lastPendingTime;
      if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
    }

    if (null !== workInProgress) {
      lastPendingTime = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = ReactCurrentDispatcher.current;
      null === prevDispatcher && (prevDispatcher = ContextOnlyDispatcher);
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;

      if (isSync) {
        if (1073741823 !== expirationTime) {
          var currentTime = requestCurrentTime();
          if (currentTime < expirationTime) return executionContext = lastPendingTime, resetContextDependencies(), ReactCurrentDispatcher.current = prevDispatcher, renderRoot.bind(null, root$jscomp$0, currentTime);
        }
      } else currentEventTime = 0;

      do {
        try {
          if (isSync) for (; null !== workInProgress;) {
            workInProgress = performUnitOfWork(workInProgress);
          } else for (; null !== workInProgress && !Scheduler_shouldYield();) {
            workInProgress = performUnitOfWork(workInProgress);
          }
          break;
        } catch (thrownValue) {
          resetContextDependencies();
          resetHooks();
          currentTime = workInProgress;
          if (null === currentTime || null === currentTime.return) throw prepareFreshStack(root$jscomp$0, expirationTime), executionContext = lastPendingTime, thrownValue;

          a: {
            var root = root$jscomp$0,
                returnFiber = currentTime.return,
                sourceFiber = currentTime,
                value = thrownValue,
                renderExpirationTime$jscomp$0 = renderExpirationTime;
            sourceFiber.effectTag |= 1024;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;

            if (null !== value && "object" === typeof value && "function" === typeof value.then) {
              var thenable = value,
                  hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext);
              value = returnFiber;

              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === value.tag) null !== value.memoizedState ? JSCompiler_temp = false : (JSCompiler_temp = value.memoizedProps, JSCompiler_temp = undefined === JSCompiler_temp.fallback ? false : true !== JSCompiler_temp.unstable_avoidThisFallback ? true : hasInvisibleParentBoundary ? false : true);

                if (JSCompiler_temp) {
                  returnFiber = value.updateQueue;
                  null === returnFiber ? (returnFiber = new Set(), returnFiber.add(thenable), value.updateQueue = returnFiber) : returnFiber.add(thenable);

                  if (0 === (value.mode & 2)) {
                    value.effectTag |= 64;
                    sourceFiber.effectTag &= -1957;
                    1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (renderExpirationTime$jscomp$0 = createUpdate(1073741823, null), renderExpirationTime$jscomp$0.tag = 2, enqueueUpdate(sourceFiber, renderExpirationTime$jscomp$0)));
                    sourceFiber.expirationTime = 1073741823;
                    break a;
                  }

                  sourceFiber = root;
                  root = renderExpirationTime$jscomp$0;
                  hasInvisibleParentBoundary = sourceFiber.pingCache;
                  null === hasInvisibleParentBoundary ? (hasInvisibleParentBoundary = sourceFiber.pingCache = new PossiblyWeakMap(), returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)) : (returnFiber = hasInvisibleParentBoundary.get(thenable), undefined === returnFiber && (returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)));
                  returnFiber.has(root) || (returnFiber.add(root), sourceFiber = pingSuspendedRoot.bind(null, sourceFiber, thenable, root), thenable.then(sourceFiber, sourceFiber));
                  value.effectTag |= 2048;
                  value.expirationTime = renderExpirationTime$jscomp$0;
                  break a;
                }

                value = value.return;
              } while (null !== value);

              value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }

            workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
            value = createCapturedValue(value, sourceFiber);
            sourceFiber = returnFiber;

            do {
              switch (sourceFiber.tag) {
                case 3:
                  sourceFiber.effectTag |= 2048;
                  sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                  renderExpirationTime$jscomp$0 = createRootErrorUpdate(sourceFiber, value, renderExpirationTime$jscomp$0);
                  enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                  break a;

                case 1:
                  if (thenable = value, root = sourceFiber.type, returnFiber = sourceFiber.stateNode, 0 === (sourceFiber.effectTag & 64) && ("function" === typeof root.getDerivedStateFromError || null !== returnFiber && "function" === typeof returnFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(returnFiber)))) {
                    sourceFiber.effectTag |= 2048;
                    sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                    renderExpirationTime$jscomp$0 = createClassErrorUpdate(sourceFiber, thenable, renderExpirationTime$jscomp$0);
                    enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                    break a;
                  }

              }

              sourceFiber = sourceFiber.return;
            } while (null !== sourceFiber);
          }

          workInProgress = completeUnitOfWork(currentTime);
        }
      } while (1);

      executionContext = lastPendingTime;
      resetContextDependencies();
      ReactCurrentDispatcher.current = prevDispatcher;
      if (null !== workInProgress) return renderRoot.bind(null, root$jscomp$0, expirationTime);
    }

    root$jscomp$0.finishedWork = root$jscomp$0.current.alternate;
    root$jscomp$0.finishedExpirationTime = expirationTime;
    if (resolveLocksOnRoot(root$jscomp$0, expirationTime)) return null;
    workInProgressRoot = null;

    switch (workInProgressRootExitStatus) {
      case RootIncomplete:
        throw ReactError(Error("Should have a work-in-progress."));

      case RootErrored:
        return lastPendingTime = root$jscomp$0.lastPendingTime, lastPendingTime < expirationTime ? renderRoot.bind(null, root$jscomp$0, lastPendingTime) : isSync ? commitRoot.bind(null, root$jscomp$0) : (prepareFreshStack(root$jscomp$0, expirationTime), scheduleSyncCallback(renderRoot.bind(null, root$jscomp$0, expirationTime)), null);

      case RootSuspended:
        if (1073741823 === workInProgressRootLatestProcessedExpirationTime && !isSync && (isSync = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < isSync)) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          lastPendingTime = root$jscomp$0.lastPendingTime;
          if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
          root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync);
          return null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootSuspendedWithDelay:
        if (!isSync) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          isSync = root$jscomp$0.lastPendingTime;
          if (isSync < expirationTime) return renderRoot.bind(null, root$jscomp$0, isSync);
          1073741823 !== workInProgressRootLatestSuspenseTimeout ? isSync = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? isSync = 0 : (isSync = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, lastPendingTime = now(), expirationTime = 10 * (1073741821 - expirationTime) - lastPendingTime, isSync = lastPendingTime - isSync, 0 > isSync && (isSync = 0), isSync = (120 > isSync ? 120 : 480 > isSync ? 480 : 1080 > isSync ? 1080 : 1920 > isSync ? 1920 : 3e3 > isSync ? 3e3 : 4320 > isSync ? 4320 : 1960 * ceil(isSync / 1960)) - isSync, expirationTime < isSync && (isSync = expirationTime));
          if (10 < isSync) return root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync), null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootCompleted:
        return !isSync && 1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig && (lastPendingTime = workInProgressRootLatestProcessedExpirationTime, prevDispatcher = workInProgressRootCanSuspendUsingConfig, expirationTime = prevDispatcher.busyMinDurationMs | 0, 0 >= expirationTime ? expirationTime = 0 : (isSync = prevDispatcher.busyDelayMs | 0, lastPendingTime = now() - (10 * (1073741821 - lastPendingTime) - (prevDispatcher.timeoutMs | 0 || 5e3)), expirationTime = lastPendingTime <= isSync ? 0 : isSync + expirationTime - lastPendingTime), 10 < expirationTime) ? (root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), expirationTime), null) : commitRoot.bind(null, root$jscomp$0);

      default:
        throw ReactError(Error("Unknown root exit status."));
    }
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 1 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 1 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$$1(unitOfWork.alternate, unitOfWork, renderExpirationTime);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current$$1 = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 1024)) {
        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime$jscomp$0 = renderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              renderExpirationTime$jscomp$0 = current$$1.stateNode;
              renderExpirationTime$jscomp$0.pendingContext && (renderExpirationTime$jscomp$0.context = renderExpirationTime$jscomp$0.pendingContext, renderExpirationTime$jscomp$0.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime$jscomp$0 = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime$jscomp$0), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                requiredContext(contextStackCursor$1.current);
                current = newProps;
                var rootContainerInstance = renderExpirationTime$jscomp$0;
                renderExpirationTime$jscomp$0 = current$$1;
                newProps = nextReactTag;
                nextReactTag += 2;
                type = getViewConfigForType(type);
                var updatePayload = diffProperties(null, emptyObject, current, type.validAttributes);
                rootContainerInstance = createNode(newProps, type.uiViewClassName, rootContainerInstance, updatePayload, renderExpirationTime$jscomp$0);
                current = new ReactFabricHostComponent(newProps, type, current, renderExpirationTime$jscomp$0);
                current = {
                  node: rootContainerInstance,
                  canonical: current
                };

                _appendAllChildren(current, current$$1, false, false);

                current$$1.stateNode = current;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else if (null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
              break;

            case 6:
              if (current && null != current$$1.stateNode) updateHostText$1(current, current$$1, current.memoizedProps, newProps);else {
                if ("string" !== typeof newProps && null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                current = requiredContext(rootInstanceStackCursor.current);
                renderExpirationTime$jscomp$0 = requiredContext(contextStackCursor$1.current);
                current$$1.stateNode = createTextInstance(newProps, current, renderExpirationTime$jscomp$0, current$$1);
              }
              break;

            case 11:
              break;

            case 13:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime$jscomp$0;
                break a;
              }

              renderExpirationTime$jscomp$0 = null !== newProps;
              newProps = false;
              null !== current && (type = current.memoizedState, newProps = null !== type, renderExpirationTime$jscomp$0 || null === type || (type = current.child.sibling, null !== type && (rootContainerInstance = current$$1.firstEffect, null !== rootContainerInstance ? (current$$1.firstEffect = type, type.nextEffect = rootContainerInstance) : (current$$1.firstEffect = current$$1.lastEffect = type, type.nextEffect = null), type.effectTag = 8)));
              if (renderExpirationTime$jscomp$0 && !newProps && 0 !== (current$$1.mode & 2)) if (null === current && true !== current$$1.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
              renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 4);
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 18:
              break;

            case 19:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;
              if (null === newProps) break;
              type = 0 !== (current$$1.effectTag & 64);
              rootContainerInstance = newProps.rendering;
              if (null === rootContainerInstance) {
                if (type) cutOffTailIfNeeded(newProps, false);else {
                  if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = current$$1.child; null !== current;) {
                    rootContainerInstance = findFirstSuspended(current);

                    if (null !== rootContainerInstance) {
                      current$$1.effectTag |= 64;
                      cutOffTailIfNeeded(newProps, false);
                      current = rootContainerInstance.updateQueue;
                      null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                      current$$1.firstEffect = current$$1.lastEffect = null;
                      current = renderExpirationTime$jscomp$0;

                      for (renderExpirationTime$jscomp$0 = current$$1.child; null !== renderExpirationTime$jscomp$0;) {
                        newProps = renderExpirationTime$jscomp$0, type = current, newProps.effectTag &= 2, newProps.nextEffect = null, newProps.firstEffect = null, newProps.lastEffect = null, rootContainerInstance = newProps.alternate, null === rootContainerInstance ? (newProps.childExpirationTime = 0, newProps.expirationTime = type, newProps.child = null, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null) : (newProps.childExpirationTime = rootContainerInstance.childExpirationTime, newProps.expirationTime = rootContainerInstance.expirationTime, newProps.child = rootContainerInstance.child, newProps.memoizedProps = rootContainerInstance.memoizedProps, newProps.memoizedState = rootContainerInstance.memoizedState, newProps.updateQueue = rootContainerInstance.updateQueue, type = rootContainerInstance.dependencies, newProps.dependencies = null === type ? null : {
                          expirationTime: type.expirationTime,
                          firstContext: type.firstContext,
                          responders: type.responders
                        }), renderExpirationTime$jscomp$0 = renderExpirationTime$jscomp$0.sibling;
                      }

                      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, current$$1);
                      current$$1 = current$$1.child;
                      break a;
                    }

                    current = current.sibling;
                  }
                }
              } else {
                if (!type) if (current = findFirstSuspended(rootContainerInstance), null !== current) {
                  if (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode) {
                    current = current.updateQueue;
                    null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                    current$$1 = current$$1.lastEffect = newProps.lastEffect;
                    null !== current$$1 && (current$$1.nextEffect = null);
                    break;
                  }
                } else now() > newProps.tailExpiration && 1 < renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, false), current$$1.expirationTime = current$$1.childExpirationTime = renderExpirationTime$jscomp$0 - 1);
                newProps.isBackwards ? (rootContainerInstance.sibling = current$$1.child, current$$1.child = rootContainerInstance) : (current = newProps.last, null !== current ? current.sibling = rootContainerInstance : current$$1.child = rootContainerInstance, newProps.last = rootContainerInstance);
              }

              if (null !== newProps.tail) {
                0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500);
                current = newProps.tail;
                newProps.rendering = current;
                newProps.tail = current.sibling;
                newProps.lastEffect = current$$1.lastEffect;
                current.sibling = null;
                renderExpirationTime$jscomp$0 = suspenseStackCursor.current;
                renderExpirationTime$jscomp$0 = type ? renderExpirationTime$jscomp$0 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderExpirationTime$jscomp$0 & SubtreeSuspenseContextMask;
                push(suspenseStackCursor, renderExpirationTime$jscomp$0, current$$1);
                current$$1 = current;
                break a;
              }

              break;

            case 20:
              break;

            default:
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
          }

          current$$1 = null;
        }

        current = workInProgress;

        if (1 === renderExpirationTime || 1 !== current.childExpirationTime) {
          renderExpirationTime$jscomp$0 = 0;

          for (newProps = current.child; null !== newProps;) {
            type = newProps.expirationTime, rootContainerInstance = newProps.childExpirationTime, type > renderExpirationTime$jscomp$0 && (renderExpirationTime$jscomp$0 = type), rootContainerInstance > renderExpirationTime$jscomp$0 && (renderExpirationTime$jscomp$0 = rootContainerInstance), newProps = newProps.sibling;
          }

          current.childExpirationTime = renderExpirationTime$jscomp$0;
        }

        if (null !== current$$1) return current$$1;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 1024) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current$$1 = unwindWork(workInProgress, renderExpirationTime);
        if (null !== current$$1) return current$$1.effectTag &= 1023, current$$1;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 1024);
      }

      current$$1 = workInProgress.sibling;
      if (null !== current$$1) return current$$1;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority$1(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    null !== rootWithPendingPassiveEffects && scheduleCallback(97, function () {
      flushPassiveEffects();
      return null;
    });
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    flushPassiveEffects();
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    var finishedWork = root.finishedWork,
        expirationTime = root.finishedExpirationTime;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    if (finishedWork === root.current) throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
    root.callbackNode = null;
    root.callbackExpirationTime = 0;
    var updateExpirationTimeBeforeCommit = finishedWork.expirationTime,
        childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
    updateExpirationTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
    root.firstPendingTime = updateExpirationTimeBeforeCommit;
    updateExpirationTimeBeforeCommit < root.lastPendingTime && (root.lastPendingTime = updateExpirationTimeBeforeCommit);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, updateExpirationTimeBeforeCommit = finishedWork.firstEffect) : updateExpirationTimeBeforeCommit = finishedWork : updateExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== updateExpirationTimeBeforeCommit) {
      childExpirationTimeBeforeCommit = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (; null !== nextEffect;) {
            if (0 !== (nextEffect.effectTag & 256)) {
              var current$$1 = nextEffect.alternate,
                  finishedWork$jscomp$0 = nextEffect;

              switch (finishedWork$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork$jscomp$0);
                  break;

                case 1:
                  if (finishedWork$jscomp$0.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork$jscomp$0.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(finishedWork$jscomp$0.elementType === finishedWork$jscomp$0.type ? prevProps : resolveDefaultProps(finishedWork$jscomp$0.type, prevProps), prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break;

                case 3:
                case 5:
                case 6:
                case 4:
                case 17:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (current$$1 = renderPriorityLevel; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current$$1$jscomp$0 = nextEffect.alternate;

              if (null !== current$$1$jscomp$0) {
                var currentRef = current$$1$jscomp$0.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 14) {
              case 2:
                nextEffect.effectTag &= -3;
                break;

              case 6:
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                prevProps = nextEffect;

                a: for (prevState = prevProps, instance = current$$1, snapshot = prevState;;) {
                  if (commitUnmount(snapshot, instance), null !== snapshot.child) snapshot.child.return = snapshot, snapshot = snapshot.child;else {
                    if (snapshot === prevState) break;

                    for (; null === snapshot.sibling;) {
                      if (null === snapshot.return || snapshot.return === prevState) break a;
                      snapshot = snapshot.return;
                    }

                    snapshot.sibling.return = snapshot.return;
                    snapshot = snapshot.sibling;
                  }
                }

                detachFiber(prevProps);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root.current = finishedWork;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = expirationTime; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;

            if (effectTag$jscomp$0 & 36) {
              var current$$1$jscomp$1 = nextEffect.alternate;
              current$$1$jscomp$0 = nextEffect;
              currentRef = effectTag;

              switch (current$$1$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountLayout, MountLayout, current$$1$jscomp$0);
                  break;

                case 1:
                  var instance$jscomp$0 = current$$1$jscomp$0.stateNode;
                  if (current$$1$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                    var prevProps$jscomp$0 = current$$1$jscomp$0.elementType === current$$1$jscomp$0.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1$jscomp$0.type, current$$1$jscomp$1.memoizedProps);
                    instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                  }
                  var updateQueue = current$$1$jscomp$0.updateQueue;
                  null !== updateQueue && commitUpdateQueue(current$$1$jscomp$0, updateQueue, instance$jscomp$0, currentRef);
                  break;

                case 3:
                  var _updateQueue = current$$1$jscomp$0.updateQueue;

                  if (null !== _updateQueue) {
                    current$$1 = null;
                    if (null !== current$$1$jscomp$0.child) switch (current$$1$jscomp$0.child.tag) {
                      case 5:
                        current$$1 = current$$1$jscomp$0.child.stateNode.canonical;
                        break;

                      case 1:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                    }
                    commitUpdateQueue(current$$1$jscomp$0, _updateQueue, current$$1, currentRef);
                  }

                  break;

                case 5:
                  if (null === current$$1$jscomp$1 && current$$1$jscomp$0.effectTag & 4) throw ReactError(Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue."));
                  break;

                case 6:
                  break;

                case 4:
                  break;

                case 12:
                  break;

                case 13:
                case 19:
                case 17:
                case 20:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            if (effectTag$jscomp$0 & 128) {
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance$jscomp$1 = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    var instanceToUse = instance$jscomp$1.canonical;
                    break;

                  default:
                    instanceToUse = instance$jscomp$1;
                }

                "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
              }
            }

            effectTag$jscomp$0 & 512 && (rootDoesHavePassiveEffects = true);
            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = childExpirationTimeBeforeCommit;
    } else root.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsExpirationTime = expirationTime, pendingPassiveEffectsRenderPriority = renderPriorityLevel;else for (nextEffect = updateExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel;
    }
    renderPriorityLevel = root.firstPendingTime;
    0 !== renderPriorityLevel ? (effectTag$jscomp$0 = requestCurrentTime(), effectTag$jscomp$0 = inferPriorityFromExpirationTime(effectTag$jscomp$0, renderPriorityLevel), scheduleCallbackForRoot(root, effectTag$jscomp$0, renderPriorityLevel)) : legacyErrorBoundariesThatAlreadyFailed = null;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    1073741823 === renderPriorityLevel ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function flushPassiveEffects() {
    if (null === rootWithPendingPassiveEffects) return false;
    var root = rootWithPendingPassiveEffects,
        expirationTime = pendingPassiveEffectsExpirationTime,
        renderPriorityLevel = pendingPassiveEffectsRenderPriority;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = 0;
    pendingPassiveEffectsRenderPriority = 90;
    return runWithPriority$1(97 < renderPriorityLevel ? 97 : renderPriorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
  }

  function flushPassiveEffectsImpl(root) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Cannot flush passive effects while already rendering."));
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork), commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
        }
      } catch (error) {
        if (null === root) throw ReactError(Error("Should be working on an effect."));
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return true;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && scheduleCallbackForRoot(rootFiber, 99, 1073741823);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && scheduleCallbackForRoot(fiber, 99, 1073741823);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime) : workInProgressRootHasPendingPing = true : root.lastPendingTime < suspendedTime || (thenable = root.pingTime, 0 !== thenable && thenable < suspendedTime || (root.pingTime = suspendedTime, root.finishedExpirationTime === suspendedTime && (root.finishedExpirationTime = 0, root.finishedWork = null), thenable = requestCurrentTime(), thenable = inferPriorityFromExpirationTime(thenable, suspendedTime), scheduleCallbackForRoot(root, thenable, suspendedTime)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    retryCache = requestCurrentTime();
    thenable = computeExpirationForFiber(retryCache, boundaryFiber, null);
    retryCache = inferPriorityFromExpirationTime(retryCache, thenable);
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && scheduleCallbackForRoot(boundaryFiber, retryCache, thenable);
  }

  var beginWork$$1 = undefined;

  beginWork$$1 = function beginWork$$1(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current$$1) {
      if (current$$1.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              pushProvider(workInProgress, workInProgress.memoizedProps.value);
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current$$1.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              var renderState = workInProgress.memoizedState;
              null !== renderState && (renderState.rendering = null, renderState.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
    } else didReceiveUpdate = false;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        renderState = renderWithHooks(null, workInProgress, updateExpirationTime, current$$1, renderState, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof renderState && null !== renderState && "function" === typeof renderState.render && undefined === renderState.$$typeof) {
          workInProgress.tag = 1;
          resetHooks();

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== renderState.state && undefined !== renderState.state ? renderState.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          renderState.updater = classComponentUpdater;
          workInProgress.stateNode = renderState;
          renderState._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, renderState, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        renderState = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = readLazyComponentType(renderState);
        workInProgress.type = renderState;
        hasContext = workInProgress.tag = resolveLazyComponentTag(renderState);
        current$$1 = resolveDefaultProps(renderState, current$$1);

        switch (hasContext) {
          case 0:
            workInProgress = updateFunctionComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 1:
            workInProgress = updateClassComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 11:
            workInProgress = updateForwardRef(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 14:
            workInProgress = updateMemoComponent(null, workInProgress, renderState, resolveDefaultProps(renderState.type, current$$1), updateExpirationTime, renderExpirationTime);
            break;

          default:
            throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + renderState + ". Lazy element type must resolve to a class or function."));
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateClassComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === updateExpirationTime) throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        renderState = workInProgress.memoizedState;
        renderState = null !== renderState ? renderState.element : null;
        processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === renderState ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateForwardRef(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          renderState = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = renderState.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = is(oldValue, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === renderState.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldValue = workInProgress.child, null !== oldValue && (oldValue.return = workInProgress); null !== oldValue;) {
              var list = oldValue.dependencies;

              if (null !== list) {
                getDerivedStateFromProps = oldValue.child;

                for (var dependency = list.firstContext; null !== dependency;) {
                  if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                    1 === oldValue.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(oldValue, dependency));
                    oldValue.expirationTime < renderExpirationTime && (oldValue.expirationTime = renderExpirationTime);
                    dependency = oldValue.alternate;
                    null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                    scheduleWorkOnParentPath(oldValue.return, renderExpirationTime);
                    list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                    break;
                  }

                  dependency = dependency.next;
                }
              } else getDerivedStateFromProps = 10 === oldValue.tag ? oldValue.type === workInProgress.type ? null : oldValue.child : oldValue.child;

              if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = oldValue;else for (getDerivedStateFromProps = oldValue; null !== getDerivedStateFromProps;) {
                if (getDerivedStateFromProps === workInProgress) {
                  getDerivedStateFromProps = null;
                  break;
                }

                oldValue = getDerivedStateFromProps.sibling;

                if (null !== oldValue) {
                  oldValue.return = getDerivedStateFromProps.return;
                  getDerivedStateFromProps = oldValue;
                  break;
                }

                getDerivedStateFromProps = getDerivedStateFromProps.return;
              }
              oldValue = getDerivedStateFromProps;
            }
          }

          reconcileChildren(current$$1, workInProgress, renderState.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return renderState = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), renderState = readContext(renderState, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(renderState), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return renderState = workInProgress.type, hasContext = resolveDefaultProps(renderState, workInProgress.pendingProps), hasContext = resolveDefaultProps(renderState.type, hasContext), updateMemoComponent(current$$1, workInProgress, renderState, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
    }

    throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, undefined, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = this.firstBatch = null;
    this.pingTime = this.lastPendingTime = this.firstPendingTime = this.callbackExpirationTime = 0;
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (undefined === fiber) {
      if ("function" === typeof component.render) throw ReactError(Error("Unable to find node on an unmounted component."));
      throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    current$$1 = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (2 !== isFiberMountedImpl(parentComponent) || 1 !== parentComponent.tag) throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    suspenseConfig = createUpdate(current$$1, suspenseConfig);
    suspenseConfig.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (suspenseConfig.callback = container);
    enqueueUpdate(currentTime, suspenseConfig);
    scheduleUpdateOnFiber(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits$1(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    throw ReactError(Error("getInspectorDataForViewTag() is not available in production"));
  };

  var fabricDispatchCommand = nativeFabricUIManager.dispatchCommand;

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    (executionContext & 49) === NoContext && (flushPendingDiscreteUpdates(), flushPassiveEffects());
  };

  var roots = new Map(),
      ReactFabric = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits$1(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance && !maybeInstance.canonical) {
            var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
            maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
            null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance),
    findNodeHandle: findNodeHandle,
    setNativeProps: function setNativeProps() {},
    dispatchCommand: function dispatchCommand(handle, command, args) {
      null != handle._nativeTag && null != handle._internalInstanceHandle && fabricDispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
    },
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(containerTag, 0, false);
        var uninitializedFiber = createFiber(3, null, null, 0);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode.canonical;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureInWindow: function measureInWindow(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance && !maybeInstance.canonical) {
              var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
              maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
              null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance)
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    }));
  })({
    findFiberByHostInstance: getInstanceFromInstance,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.8.6",
    rendererPackageName: "react-native-renderer"
  });

  var ReactFabric$2 = {
    default: ReactFabric
  },
      ReactFabric$3 = ReactFabric$2 && ReactFabric || ReactFabric$2;
  module.exports = ReactFabric$3.default || ReactFabric$3;
},14815,[14344,14446,14566,10297,14575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('AppState');

  exports.default = _default;
},14818,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('AsyncSQLiteDBStorage') || TurboModuleRegistry.get('AsyncLocalStorage');

  exports.default = _default;
},14821,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Clipboard');

  exports.default = _default;
},14824,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('DatePickerAndroid');

  exports.default = _default;
},14827,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeImagePickerIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        videoMode: true,
        unmirrorFrontFacingCamera: false
      };

      if (config.videoMode != null) {
        newConfig.videoMode = config.videoMode;
      }

      if (config.unmirrorFrontFacingCamera != null) {
        newConfig.unmirrorFrontFacingCamera = config.unmirrorFrontFacingCamera;
      }

      return _NativeImagePickerIOS.default.openCameraDialog(newConfig, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        showImages: true,
        showVideos: false
      };

      if (config.showImages != null) {
        newConfig.showImages = config.showImages;
      }

      if (config.showVideos != null) {
        newConfig.showVideos = config.showVideos;
      }

      return _NativeImagePickerIOS.default.openSelectDialog(newConfig, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},14830,[14305,14833,14326]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ImagePickerIOS');

  exports.default = _default;
},14833,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _default = _Platform.default.OS === 'android' ? TurboModuleRegistry.getEnforcing('IntentAndroid') : TurboModuleRegistry.getEnforcing('LinkingManager');

  exports.default = _default;
},14836,[14305,14308,14341,10066]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];

          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined;

            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }

            total += toAdd;
            count++;
          }
        }
      }

      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},14839,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('PermissionsAndroid');

  exports.default = _default;
},14842,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('PushNotificationManager');

  exports.default = _default;
},14845,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ShareModule');

  exports.default = _default;
},14848,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _NativeTimePickerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      (0, _classCallCheck2.default)(this, TimePickerAndroid);
    }

    (0, _createClass2.default)(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return _regenerator.default.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_NativeTimePickerAndroid.default) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", _NativeTimePickerAndroid.default.open(options));

              case 4:
                return _context.abrupt("return", Promise.reject({
                  message: 'TimePickerAndroid is not supported on this platform.'
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]);
    return TimePickerAndroid;
  }();

  TimePickerAndroid.timeSetAction = 'timeSetAction';
  TimePickerAndroid.dismissedAction = 'dismissedAction';
  module.exports = TimePickerAndroid;
},14851,[14305,14674,14320,14323,14854]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('TimePickerAndroid');

  exports.default = _default;
},14854,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('ToastAndroid');

  exports.default = _default;
},14857,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;

  var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  function useWindowDimensions() {
    var dims = _Dimensions.default.get('window');

    var forceUpdate = React.useState(false)[1].bind(null, function (v) {
      return !v;
    });
    var initialDims = React.useState(dims)[0];
    React.useEffect(function () {
      _Dimensions.default.addEventListener('change', forceUpdate);

      var latestDims = _Dimensions.default.get('window');

      if (latestDims !== initialDims) {
        forceUpdate();
      }

      return function () {
        _Dimensions.default.removeEventListener('change', forceUpdate);
      };
    }, [forceUpdate, initialDims]);
    return dims;
  }
},14860,[14308,14305,10429,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[0]);

  var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: "\uFEFF",
    BULLET: "\u2022",
    BULLET_SP: "\xA0\u2022\xA0",
    MIDDOT: "\xB7",
    MIDDOT_SP: "\xA0\xB7\xA0",
    MIDDOT_KATAKANA: "\u30FB",
    MDASH: "\u2014",
    MDASH_SP: "\xA0\u2014\xA0",
    NDASH: "\u2013",
    NDASH_SP: "\xA0\u2013\xA0",
    NBSP: "\xA0",
    PIZZA: "\uD83C\uDF55",
    TRIANGLE_LEFT: "\u25C0",
    TRIANGLE_RIGHT: "\u25B6"
  });
  module.exports = UTFSequence;
},14863,[10057]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Vibration');

  exports.default = _default;
},14866,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var YellowBox;
  {
    YellowBox = function (_React$Component2) {
      _inherits(YellowBox, _React$Component2);

      function YellowBox() {
        _classCallCheck(this, YellowBox);

        return _possibleConstructorReturn(this, _getPrototypeOf(YellowBox).apply(this, arguments));
      }

      _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);

      return YellowBox;
    }(React.Component);
  }
  module.exports = YellowBox;
},14869,[14320,14323,14371,14377,14386,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var PointPropType = PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},14872,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    fetch: true,
    addEventListener: true,
    useNetInfo: true,
    removeEventListener: true,
    getConnectionInfo: true,
    isConnectionExpensive: true,
    isConnected: true
  };
  exports.fetch = fetch;
  exports.addEventListener = addEventListener;
  exports.useNetInfo = useNetInfo;
  exports.removeEventListener = removeEventListener;
  exports.getConnectionInfo = getConnectionInfo;
  exports.isConnectionExpensive = isConnectionExpensive;
  exports.default = exports.isConnected = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _$$_REQUIRE(_dependencyMap[3]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _deprecatedUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _deprecatedState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var DeprecatedTypes = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  Object.keys(DeprecatedTypes).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return DeprecatedTypes[key];
      }
    });
  });

  var _state = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var Types = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  Object.keys(Types).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return Types[key];
      }
    });
  });

  _state.default.setup();

  _deprecatedState.default.setup();

  var _isConnectedListeners = new Map();

  function fetch() {
    if (_reactNative.Platform.OS === 'android') {
      return _state.default.latest().then(function (state) {
        return state.type.toUpperCase();
      });
    } else {
      return _state.default.latest();
    }
  }

  function addEventListener(listenerOrType) {
    var deprecatedHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    if (typeof listenerOrType === 'string') {
      _deprecatedUtils.default.warnOnce();

      if (listenerOrType === DeprecatedTypes.CHANGE_EVENT_NAME && deprecatedHandler) {
        _deprecatedState.default.add(deprecatedHandler);

        return {
          remove: function remove() {
            _deprecatedState.default.remove(deprecatedHandler);
          }
        };
      } else {
        return {
          remove: function remove() {}
        };
      }
    } else {
      var _listener = listenerOrType;

      _state.default.add(_listener);

      return function () {
        _state.default.remove(_listener);
      };
    }
  }

  function useNetInfo() {
    var _useState = (0, _react.useState)({
      type: Types.NetInfoStateType.unknown,
      isConnected: false,
      isInternetReachable: false,
      details: null
    }),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        netInfo = _useState2[0],
        setNetInfo = _useState2[1];

    (0, _react.useEffect)(function () {
      return addEventListener(setNetInfo);
    }, []);
    return netInfo;
  }

  function removeEventListener(type, handler) {
    _deprecatedUtils.default.warnOnce();

    if (type === DeprecatedTypes.CHANGE_EVENT_NAME) {
      _deprecatedState.default.remove(handler);
    }
  }

  function getConnectionInfo() {
    _deprecatedUtils.default.warnOnce();

    return _deprecatedState.default.latest();
  }

  function isConnectionExpensive() {
    _deprecatedUtils.default.warnOnce();

    return _state.default.latest().then(_deprecatedUtils.default.isConnectionExpensive);
  }

  var isConnected = {
    addEventListener: function addEventListener(eventName, handler) {
      if (eventName !== DeprecatedTypes.CHANGE_EVENT_NAME) {
        return {
          remove: function remove() {}
        };
      }

      var listener = function listener(state) {
        handler(_deprecatedUtils.default.isConnected(state));
      };

      _isConnectedListeners.set(handler, listener);

      _state.default.add(listener);

      return {
        remove: function remove() {
          _state.default.remove(listener);
        }
      };
    },
    removeEventListener: function removeEventListener(_eventName, handler) {
      var listener = _isConnectedListeners.get(handler);

      listener && _state.default.remove(listener);

      _isConnectedListeners.delete(handler);
    },
    fetch: function fetch() {
      return _state.default.latest().then(_deprecatedUtils.default.isConnected);
    }
  };
  exports.isConnected = isConnected;
  var _default = {
    fetch: fetch,
    addEventListener: addEventListener,
    useNetInfo: useNetInfo,
    removeEventListener: removeEventListener,
    getConnectionInfo: getConnectionInfo,
    isConnectionExpensive: isConnectionExpensive,
    isConnected: isConnected
  };
  exports.default = _default;
},14875,[14308,14305,14347,10297,10033,14878,14884,14899,14887,14881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertState = convertState;
  exports.isConnectionExpensive = isConnectionExpensive;
  exports.isConnected = isConnected;
  exports.warnOnce = warnOnce;
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var Types = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  function convertState(input) {
    var effectiveType = 'unknown';

    if (input.type === 'cellular') {
      effectiveType = input.details.cellularGeneration || 'unknown';
    }

    var type = input.type === Types.NetInfoStateType.vpn || input.type === Types.NetInfoStateType.other ? 'unknown' : input.type;
    return {
      type: type,
      effectiveType: effectiveType
    };
  }

  function isConnectionExpensive(input) {
    if (_reactNative.Platform.OS === 'android') {
      if (input.type !== Types.NetInfoStateType.none && input.type !== Types.NetInfoStateType.unknown) {
        return input.details.isConnectionExpensive;
      } else {
        return false;
      }
    } else {
      throw new Error('Currently not supported on iOS');
    }
  }

  function isConnected(input) {
    return input.isConnected;
  }

  var warned = false;

  function warnOnce() {
    if (warned) {
      return;
    }

    console.warn('Warning: RNCNetInfo - You are using the deprecated API. It will still work, but you must upgrade to the new API to receive the new features. The old API will be removed in the future');
    warned = true;
  }

  var _default = {
    convertState: convertState,
    isConnectionExpensive: isConnectionExpensive,
    isConnected: isConnected,
    warnOnce: warnOnce
  };
  exports.default = _default;
},14878,[14308,10033,14881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NetInfoCellularGeneration = exports.NetInfoStateType = undefined;
  var NetInfoStateType;
  exports.NetInfoStateType = NetInfoStateType;

  (function (NetInfoStateType) {
    NetInfoStateType["unknown"] = "unknown";
    NetInfoStateType["none"] = "none";
    NetInfoStateType["cellular"] = "cellular";
    NetInfoStateType["wifi"] = "wifi";
    NetInfoStateType["bluetooth"] = "bluetooth";
    NetInfoStateType["ethernet"] = "ethernet";
    NetInfoStateType["wimax"] = "wimax";
    NetInfoStateType["vpn"] = "vpn";
    NetInfoStateType["other"] = "other";
  })(NetInfoStateType || (exports.NetInfoStateType = NetInfoStateType = {}));

  var NetInfoCellularGeneration;
  exports.NetInfoCellularGeneration = NetInfoCellularGeneration;

  (function (NetInfoCellularGeneration) {
    NetInfoCellularGeneration["2g"] = "2g";
    NetInfoCellularGeneration["3g"] = "3g";
    NetInfoCellularGeneration["4g"] = "4g";
  })(NetInfoCellularGeneration || (exports.NetInfoCellularGeneration = NetInfoCellularGeneration = {}));
},14881,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setup = setup;
  exports.tearDown = tearDown;
  exports.latest = latest;
  exports.add = add;
  exports.remove = remove;
  exports.default = undefined;

  var _state = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _deprecatedUtils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _isSetup = false;

  var _subscriptions = new Set();

  var _latestState = null;

  function _handler(state) {
    var convertedState = _deprecatedUtils.default.convertState(state);

    _latestState = convertedState;

    _subscriptions.forEach(function (handler) {
      return handler(convertedState);
    });
  }

  function setup() {
    _state.default.add(_handler);
  }

  function tearDown() {
    {
      return;
    }

    _state.default.remove(_handler);

    _latestState = null;

    _subscriptions.clear();
  }

  function latest() {
    if (_latestState) {
      return Promise.resolve(_latestState);
    } else {
      return _state.default.latest().then(function (state) {
        _latestState = _deprecatedUtils.default.convertState(state);
        return _latestState;
      });
    }
  }

  function add(handler) {
    _subscriptions.add(handler);

    if (_latestState) {
      handler(_latestState);
    } else {
      latest().then(handler);
    }
  }

  function remove(handler) {
    _subscriptions.delete(handler);
  }

  var _default = {
    setup: setup,
    tearDown: tearDown,
    latest: latest,
    add: add,
    remove: remove
  };
  exports.default = _default;
},14884,[14305,14887,14878]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setup = setup;
  exports.tearDown = tearDown;
  exports.latest = latest;
  exports.add = add;
  exports.remove = remove;
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _nativeInterface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _internetReachability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _utils = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';
  var _isSetup = false;
  var _nativeEventSubscription = null;
  var _internetReachabilitySubscription = null;

  var _subscriptions = new Set();

  var _latestState = null;

  function fetchCurrentState() {
    return _utils.default.currentState().then(function (state) {
      _internetReachability.default.update(state);

      var convertedState = _utils.default.convertState(state);

      _latestState = convertedState;
      return convertedState;
    });
  }

  function setup() {
    if (_isSetup) {
      return;
    }

    _nativeEventSubscription = _nativeInterface.default.eventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (state) {
      _internetReachability.default.update(state);

      var convertedState = _utils.default.convertState(state);

      _latestState = convertedState;

      _subscriptions.forEach(function (handler) {
        return handler(convertedState);
      });
    });
    fetchCurrentState();
    _internetReachabilitySubscription = _internetReachability.default.addSubscription(function (isInternetReachable) {
      if (!_latestState) {
        return;
      }

      var nextState = (0, _objectSpread2.default)({}, _latestState, {
        isInternetReachable: isInternetReachable
      });
      _latestState = nextState;

      _subscriptions.forEach(function (handler) {
        return handler(nextState);
      });
    });
    _isSetup = true;
  }

  function tearDown() {
    if (!_isSetup) {
      return;
    }

    if (_nativeEventSubscription) {
      _nativeEventSubscription.remove();
    }

    _subscriptions.clear();

    _internetReachability.default.clear();

    if (_internetReachabilitySubscription) {
      _internetReachabilitySubscription();
    }

    _isSetup = false;
  }

  function latest() {
    if (_latestState) {
      return Promise.resolve(_latestState);
    } else {
      return fetchCurrentState();
    }
  }

  function add(handler) {
    _subscriptions.add(handler);

    if (_latestState) {
      handler(_latestState);
    } else {
      latest().then(handler);
    }
  }

  function remove(handler) {
    _subscriptions.delete(handler);
  }

  var _default = {
    setup: setup,
    tearDown: tearDown,
    latest: latest,
    add: add,
    remove: remove
  };
  exports.default = _default;
},14887,[14305,14314,14890,14893,14896]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var RNCNetInfo = _reactNative.NativeModules.RNCNetInfo;

  if (!RNCNetInfo) {
    throw new Error("@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n\u2022 Run `react-native link @react-native-community/netinfo` in the project root.\n\u2022 Rebuild and re-run the app.\n\u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n\u2022 Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo");
  }

  var nativeEventEmitter = null;

  var _default = (0, _objectSpread2.default)({}, RNCNetInfo, {
    get eventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new _reactNative.NativeEventEmitter(RNCNetInfo);
      }

      return nativeEventEmitter;
    }

  });

  exports.default = _default;
},14890,[14305,14314,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clear = clear;
  exports.update = update;
  exports.currentState = currentState;
  exports.addSubscription = addSubscription;
  exports.default = undefined;
  var REACHABILITY_URL = 'https://clients3.google.com/generate_204';
  var LONG_TIMEOUT = 60000;
  var SHORT_TIMEOUT = 5000;

  var _subscriptions = new Set();

  var _isInternetReachable = null;
  var _currentInternetReachabilityCheckHandler = null;
  var _currentTimeoutHandle = null;

  function setIsInternetReachable(isInternetReachable) {
    if (_isInternetReachable === isInternetReachable) {
      return;
    }

    _isInternetReachable = isInternetReachable;

    _subscriptions.forEach(function (listener) {
      listener(_isInternetReachable);
    });
  }

  function checkInternetReachability() {
    var hasCanceled = false;
    var promise = fetch(REACHABILITY_URL).then(function (response) {
      if (!hasCanceled) {
        setIsInternetReachable(response.status === 204);
        var nextTimeoutInterval = _isInternetReachable ? LONG_TIMEOUT : SHORT_TIMEOUT;
        _currentTimeoutHandle = setTimeout(checkInternetReachability, nextTimeoutInterval);
      }
    }).catch(function () {
      setIsInternetReachable(false);
      _currentTimeoutHandle = setTimeout(checkInternetReachability, SHORT_TIMEOUT);
    });
    return {
      promise: promise,
      cancel: function cancel() {
        hasCanceled = true;
      }
    };
  }

  function setExpectsConnection(expectsConnection) {
    if (_currentInternetReachabilityCheckHandler !== null) {
      _currentInternetReachabilityCheckHandler.cancel();

      _currentInternetReachabilityCheckHandler = null;
    }

    if (_currentTimeoutHandle !== null) {
      clearTimeout(_currentTimeoutHandle);
      _currentTimeoutHandle = null;
    }

    if (expectsConnection) {
      if (!_isInternetReachable) {
        setIsInternetReachable(null);
      }

      _currentInternetReachabilityCheckHandler = checkInternetReachability();
    } else {
      setIsInternetReachable(false);
    }
  }

  function clear() {
    if (_currentInternetReachabilityCheckHandler !== null) {
      _currentInternetReachabilityCheckHandler.cancel();

      _currentInternetReachabilityCheckHandler = null;
    }

    if (_currentTimeoutHandle !== null) {
      clearTimeout(_currentTimeoutHandle);
      _currentTimeoutHandle = null;
    }

    _subscriptions.clear();
  }

  function update(state) {
    if (typeof state.isInternetReachable === 'boolean') {
      setIsInternetReachable(state.isInternetReachable);
    } else {
      setExpectsConnection(state.isConnected);
    }
  }

  function currentState() {
    return _isInternetReachable;
  }

  function addSubscription(listener) {
    _subscriptions.add(listener);

    return function () {
      _subscriptions.delete(listener);
    };
  }

  var _default = {
    update: update,
    currentState: currentState,
    clear: clear,
    addSubscription: addSubscription
  };
  exports.default = _default;
},14893,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertState = convertState;
  exports.currentState = currentState;
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _internetReachability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _nativeInterface = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function convertState(input) {
    if (typeof input.isInternetReachable === 'boolean') {
      return input;
    } else {
      return (0, _objectSpread2.default)({}, input, {
        isInternetReachable: _internetReachability.default.currentState()
      });
    }
  }

  function currentState() {
    return _nativeInterface.default.getCurrentState();
  }

  var _default = {
    convertState: convertState,
    currentState: currentState
  };
  exports.default = _default;
},14896,[14305,14314,14893,14890]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CHANGE_EVENT_NAME = undefined;
  var CHANGE_EVENT_NAME = 'connectionChange';
  exports.CHANGE_EVENT_NAME = CHANGE_EVENT_NAME;
},14899,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},14902,[14905]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _utils = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[10]);

  var Platform = ReactNative.Platform,
      UIManager = ReactNative.UIManager;

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[11]);

  var NativeViewPager = _$$_REQUIRE(_dependencyMap[12]);

  var VIEW_PAGER_REF = 'viewPager';
  var VIEW_MANAGER_NAME = 'RNCViewPager';

  function getViewManagerConfig(viewManagerName) {
    if (!UIManager.getViewManagerConfig) {
      return UIManager[viewManagerName];
    }

    return UIManager.getViewManagerConfig(viewManagerName);
  }

  var ViewPager = function (_React$Component) {
    (0, _inherits2.default)(ViewPager, _React$Component);

    function ViewPager() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ViewPager);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ViewPager)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.isScrolling = false;

      _this.getInnerViewNode = function () {
        return _this.refs[VIEW_PAGER_REF].getInnerViewNode();
      };

      _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        {
          if (_this.props.keyboardDismissMode === 'on-drag') {
            dismissKeyboard();
          }
        }
      };

      _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e);
        }

        _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';
      };

      _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      };

      _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle((0, _assertThisInitialized2.default)(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPage, [selectedPage]);
      };

      _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle((0, _assertThisInitialized2.default)(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setPageWithoutAnimation, [selectedPage]);
      };

      _this.setScrollEnabled = function (scrollEnabled) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle((0, _assertThisInitialized2.default)(_this)), getViewManagerConfig(VIEW_MANAGER_NAME).Commands.setScrollEnabled, [scrollEnabled]);
      };

      _this._onMoveShouldSetResponderCapture = function () {
        return false;
      };

      return _this;
    }

    (0, _createClass2.default)(ViewPager, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        {
          if (this.props.initialPage != null) {
            this.setPageWithoutAnimation(this.props.initialPage);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeViewPager, (0, _extends2.default)({}, this.props, {
          ref: VIEW_PAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,
          children: (0, _utils.childrenWithOverriddenStyle)(this.props.children)
        }));
      }
    }]);
    return ViewPager;
  }(React.Component);

  module.exports = ViewPager;
},14905,[14305,14344,14320,14323,14371,14377,14374,14386,14908,10297,10033,10627,14911]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.childrenWithOverriddenStyle = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var childrenWithOverriddenStyle = function childrenWithOverriddenStyle(children) {
    return React.Children.map(children, function (child) {
      if (!child) {
        return null;
      }

      var newProps = (0, _objectSpread2.default)({}, child.props, {
        style: [child.props.style, {
          position: 'absolute',
          left: 0,
          top: 0,
          right: 0,
          bottom: 0,
          width: undefined,
          height: undefined
        }],
        collapsable: false
      });
      return React.createElement(child.type, newProps);
    });
  };

  exports.childrenWithOverriddenStyle = childrenWithOverriddenStyle;
},14908,[14308,14305,14314,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      requireNativeComponent = _require.requireNativeComponent;

  module.exports = requireNativeComponent('RNCViewPager');
},14911,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  ;

  (function (isNode) {
    var Public = function Public(clone) {
      return merge(clone === true, false, arguments);
    },
        publicName = 'merge';

    Public.recursive = function (clone) {
      return merge(clone === true, true, arguments);
    };

    Public.clone = function (input) {
      var output = input,
          type = typeOf(input),
          index,
          size;

      if (type === 'array') {
        output = [];
        size = input.length;

        for (index = 0; index < size; ++index) {
          output[index] = Public.clone(input[index]);
        }
      } else if (type === 'object') {
        output = {};

        for (index in input) {
          output[index] = Public.clone(input[index]);
        }
      }

      return output;
    };

    function merge_recursive(base, extend) {
      if (typeOf(base) !== 'object') return extend;

      for (var key in extend) {
        if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {
          base[key] = merge_recursive(base[key], extend[key]);
        } else {
          base[key] = extend[key];
        }
      }

      return base;
    }

    function merge(clone, recursive, argv) {
      var result = argv[0],
          size = argv.length;
      if (clone || typeOf(result) !== 'object') result = {};

      for (var index = 0; index < size; ++index) {
        var item = argv[index],
            type = typeOf(item);
        if (type !== 'object') continue;

        for (var key in item) {
          if (key === '__proto__') continue;
          var sitem = clone ? Public.clone(item[key]) : item[key];

          if (recursive) {
            result[key] = merge_recursive(result[key], sitem);
          } else {
            result[key] = sitem;
          }
        }
      }

      return result;
    }

    function typeOf(input) {
      return {}.toString.call(input).slice(8, -1).toLowerCase();
    }

    if (isNode) {
      module.exports = Public;
    } else {
      window[publicName] = Public;
    }
  })(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);
},14914,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = extractColor;
  exports.integerColor = exports.colorNames = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var colorNames = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
  exports.colorNames = colorNames;

  for (var name in colorNames) {
    if (colorNames.hasOwnProperty(name)) {
      var color = colorNames[name];
      var r = color[0];
      var g = color[1];
      var b = color[2];
      colorNames[name] = (0xff000000 | r << 16 | g << 8 | b) >>> 0;
    }
  }

  Object.freeze(colorNames);

  function hslToRgb(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;

    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }

    t1 = 2 * l - t2;
    rgb = [0, 0, 0];

    for (var i = 0; i < 3; i++) {
      t3 = h + 0.3333333333333333 * -(i - 1);

      if (t3 < 0) {
        t3++;
      }

      if (t3 > 1) {
        t3--;
      }

      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
      } else {
        val = t1;
      }

      rgb[i] = val;
    }

    return rgb;
  }

  function hwbToRgb(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;

    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }

    n = wh + f * (v - wh);
    var r;
    var g;
    var b;

    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;

      case 1:
        r = n;
        g = v;
        b = wh;
        break;

      case 2:
        r = wh;
        g = v;
        b = n;
        break;

      case 3:
        r = wh;
        g = n;
        b = v;
        break;

      case 4:
        r = n;
        g = wh;
        b = v;
        break;

      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }

    return [r, g, b];
  }

  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }

  var abbr = /^#([a-f0-9]{3,4})$/i;
  var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
  var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;
  var per = /^rgba?\(\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;
  var keyword = /(\D+)/;

  function rgbFromString(string) {
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;

    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];

      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16) / 255;
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];

      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16) / 255;
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0) / 255;
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseFloat(match[i + 1]) / 100;
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === 'transparent') {
        return [0, 0, 0, 0];
      }

      rgb = colorNames[match[1]];

      if (!(typeof rgb === 'number')) {
        return null;
      }

      return integerColor(rgb);
    } else {
      return null;
    }

    for (i = 0; i < 4; i++) {
      rgb[i] = clamp(rgb[i], 0, 1);
    }

    return rgb;
  }

  var hslRegEx = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;

  function rgbFromHslString(string) {
    var match = string.match(hslRegEx);

    if (!match) {
      return null;
    }

    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) + 360) % 360;
    var s = clamp(parseFloat(match[2]), 0, 100);
    var l = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return hslToRgb([h, s, l, a]);
  }

  var hwbRegEx = /^hwb\(\s*([+-]?\d*[.]?\d+)(?:deg)?\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;

  function rgbFromHwbString(string) {
    var match = string.match(hwbRegEx);

    if (!match) {
      return null;
    }

    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) % 360 + 360) % 360;
    var w = clamp(parseFloat(match[2]), 0, 100);
    var b = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return hwbToRgb([h, w, b, a]);
  }

  function colorFromString(string) {
    var prefix = string.substring(0, 3).toLowerCase();

    switch (prefix) {
      case 'hsl':
        return rgbFromHslString(string);

      case 'hwb':
        return rgbFromHwbString(string);

      default:
        return rgbFromString(string);
    }
  }

  var identity = function identity(x) {
    return x;
  };

  var toSignedInt32 = function toSignedInt32(x) {
    return x | 0x0;
  };

  var integerColor = _reactNative.Platform.OS === 'android' ? toSignedInt32 : identity;
  exports.integerColor = integerColor;

  function extractColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return integerColor(color);
      }

      return null;
    }

    var parsedColor = typeof color === 'string' ? colorFromString(color) : color;

    if (!Array.isArray(parsedColor)) {
      return parsedColor;
    }

    var r = parsedColor[0];
    var g = parsedColor[1];
    var b = parsedColor[2];
    var a = parsedColor[3];
    var int32Color = ((a === undefined ? 0xff000000 : Math.round(a * 255) << 24) | Math.round(r * 255) << 16 | Math.round(g * 255) << 8 | Math.round(b * 255)) >>> 0;
    return integerColor(int32Color);
  }
},14917,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      transformList: peg$parsetransformList
    },
        peg$startRuleFunction = peg$parsetransformList,
        peg$c0 = function peg$c0(ts) {
      return ts;
    },
        peg$c1 = function peg$c1(t, ts) {
      return multiply_matrices(t, ts);
    },
        peg$c2 = "matrix",
        peg$c3 = peg$literalExpectation("matrix", false),
        peg$c4 = "(",
        peg$c5 = peg$literalExpectation("(", false),
        peg$c6 = ")",
        peg$c7 = peg$literalExpectation(")", false),
        peg$c8 = function peg$c8(a, b, c, d, e, f) {
      return [a, c, e, b, d, f];
    },
        peg$c9 = "translate",
        peg$c10 = peg$literalExpectation("translate", false),
        peg$c11 = function peg$c11(tx, ty) {
      return [1, 0, tx, 0, 1, ty || 0];
    },
        peg$c12 = "scale",
        peg$c13 = peg$literalExpectation("scale", false),
        peg$c14 = function peg$c14(sx, sy) {
      return [sx, 0, 0, 0, sy === null ? sx : sy, 0];
    },
        peg$c15 = "rotate",
        peg$c16 = peg$literalExpectation("rotate", false),
        peg$c17 = function peg$c17(angle, c) {
      var cos = Math.cos(deg2rad * angle);
      var sin = Math.sin(deg2rad * angle);

      if (c !== null) {
        var x = c[0];
        var y = c[1];
        return [cos, -sin, cos * -x + -sin * -y + x, sin, cos, sin * -x + cos * -y + y];
      }

      return [cos, -sin, 0, sin, cos, 0];
    },
        peg$c18 = "skewX",
        peg$c19 = peg$literalExpectation("skewX", false),
        peg$c20 = function peg$c20(angle) {
      return [1, Math.tan(deg2rad * angle), 0, 0, 1, 0];
    },
        peg$c21 = "skewY",
        peg$c22 = peg$literalExpectation("skewY", false),
        peg$c23 = function peg$c23(angle) {
      return [1, 0, 0, Math.tan(deg2rad * angle), 1, 0];
    },
        peg$c24 = function peg$c24(f) {
      return parseFloat(f.join(""));
    },
        peg$c25 = function peg$c25(i) {
      return parseInt(i.join(""));
    },
        peg$c26 = function peg$c26(n) {
      return n;
    },
        peg$c27 = function peg$c27(n1, n2) {
      return [n1, n2];
    },
        peg$c28 = ",",
        peg$c29 = peg$literalExpectation(",", false),
        peg$c30 = function peg$c30(ds) {
      return ds.join("");
    },
        peg$c31 = function peg$c31(f) {
      return f.join("");
    },
        peg$c32 = function peg$c32(d) {
      return d.join("");
    },
        peg$c33 = peg$otherExpectation("fractionalConstant"),
        peg$c34 = ".",
        peg$c35 = peg$literalExpectation(".", false),
        peg$c36 = function peg$c36(d1, d2) {
      return [d1 ? d1.join("") : null, ".", d2.join("")].join("");
    },
        peg$c37 = /^[eE]/,
        peg$c38 = peg$classExpectation(["e", "E"], false, false),
        peg$c39 = function peg$c39(e) {
      return [e[0], e[1], e[2].join("")].join("");
    },
        peg$c40 = /^[+\-]/,
        peg$c41 = peg$classExpectation(["+", "-"], false, false),
        peg$c42 = /^[0-9]/,
        peg$c43 = peg$classExpectation([["0", "9"]], false, false),
        peg$c44 = /^[ \t\r\n]/,
        peg$c45 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parsetransformList() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsp();

      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewsp();
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsetransforms();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewsp();

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewsp();
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetransforms() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsetransform();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecommaWsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecommaWsp();
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsetransforms();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsetransform();
      }

      return s0;
    }

    function peg$parsetransform() {
      var s0;
      s0 = peg$parsematrix();

      if (s0 === peg$FAILED) {
        s0 = peg$parsetranslate();

        if (s0 === peg$FAILED) {
          s0 = peg$parsescale();

          if (s0 === peg$FAILED) {
            s0 = peg$parserotate();

            if (s0 === peg$FAILED) {
              s0 = peg$parseskewX();

              if (s0 === peg$FAILED) {
                s0 = peg$parseskewY();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsematrix() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c3);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWsp();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecommaWsp();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenumber();

                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsecommaWsp();

                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsenumber();

                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecommaWsp();

                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsenumber();

                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsecommaWsp();

                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsenumber();

                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parsewsp();

                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parsewsp();
                                    }

                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c6;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;

                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c7);
                                        }
                                      }

                                      if (s17 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c8(s5, s7, s9, s11, s13, s15);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 9) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspNumber();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c11(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsescale() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c13);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspNumber();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c14(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserotate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspTwoNumbers();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c17(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseskewX() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c19);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewsp();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewsp();
                }

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c6;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseskewY() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewsp();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewsp();
                }

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c6;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c23(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsesign();

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsefloatingPointConstant();

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsesign();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseintegerConstant();

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s1);
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsecommaWspNumber() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$parsecommaWsp();

      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecommaWspTwoNumbers() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$parsecommaWsp();

      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();

        if (s2 !== peg$FAILED) {
          s3 = peg$parsecommaWsp();

          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumber();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecommaWsp() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsp();

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsewsp();
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewsp();

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewsp();
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecomma();

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsewsp();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewsp();
          }

          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c29);
        }
      }

      return s0;
    }

    function peg$parseintegerConstant() {
      var s0, s1;
      s0 = peg$currPos;
      s1 = peg$parsedigitSequence();

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parsefloatingPointConstant() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefractionalConstant();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseexponent();

        if (s3 === peg$FAILED) {
          s3 = null;
        }

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsedigitSequence();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseexponent();

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsefractionalConstant() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedigitSequence();

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c34;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c35);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsedigitSequence();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigitSequence();

        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c34;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c33);
        }
      }

      return s0;
    }

    function peg$parseexponent() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$currPos;

      if (peg$c37.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsesign();

        if (s3 === peg$FAILED) {
          s3 = null;
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigitSequence();

          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parsesign() {
      var s0;

      if (peg$c40.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }

      return s0;
    }

    function peg$parsedigitSequence() {
      var s0, s1;
      s0 = [];
      s1 = peg$parsedigit();

      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsedigit();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c42.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c43);
        }
      }

      return s0;
    }

    function peg$parsewsp() {
      var s0;

      if (peg$c44.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c45);
        }
      }

      return s0;
    }

    var deg2rad = Math.PI / 180;

    function multiply_matrices(l, r) {
      var al = l[0];
      var cl = l[1];
      var el = l[2];
      var bl = l[3];
      var dl = l[4];
      var fl = l[5];
      var ar = r[0];
      var cr = r[1];
      var er = r[2];
      var br = r[3];
      var dr = r[4];
      var fr = r[5];
      var a = al * ar + cl * br;
      var c = al * cr + cl * dr;
      var e = al * er + cl * fr + el;
      var b = bl * ar + dl * br;
      var d = bl * cr + dl * dr;
      var f = bl * er + dl * fr + fl;
      return [a, c, e, b, d, f];
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
},14920,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pickNotNil = pickNotNil;
  exports.idPattern = undefined;

  function pickNotNil(object) {
    var result = {};

    for (var key in object) {
      if (object.hasOwnProperty(key)) {
        var value = object[key];

        if (value !== undefined && value !== null) {
          result[key] = value;
        }
      }
    }

    return result;
  }

  var idPattern = /#([^)]+)\)?$/;
  exports.idPattern = idPattern;
},14923,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    objectBoundingBox: 0,
    userSpaceOnUse: 1
  };
  exports.default = _default;
},14926,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractViewBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var Pattern = function (_Shape) {
    (0, _inherits2.default)(Pattern, _Shape);

    function Pattern() {
      (0, _classCallCheck2.default)(this, Pattern);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Pattern).apply(this, arguments));
    }

    (0, _createClass2.default)(Pattern, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var patternTransform = props.patternTransform,
            transform = props.transform,
            id = props.id,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            patternUnits = props.patternUnits,
            patternContentUnits = props.patternContentUnits,
            children = props.children,
            viewBox = props.viewBox,
            preserveAspectRatio = props.preserveAspectRatio;
        var matrix = (0, _extractTransform.default)(patternTransform || transform || props);
        return _react.default.createElement(RNSVGPattern, (0, _extends2.default)({
          ref: this.refMethod,
          name: id,
          x: x,
          y: y,
          width: width,
          height: height,
          matrix: matrix,
          patternTransform: matrix,
          patternUnits: _units.default[patternUnits] || 0,
          patternContentUnits: patternContentUnits ? _units.default[patternContentUnits] : 1
        }, (0, _extractViewBox.default)({
          viewBox: viewBox,
          preserveAspectRatio: preserveAspectRatio
        })), children);
      }
    }]);
    return Pattern;
  }(_Shape2.default);

  exports.default = Pattern;
  Pattern.displayName = 'Pattern';
  Pattern.defaultProps = {
    x: '0%',
    y: '0%',
    width: '100%',
    height: '100%'
  };
  var RNSVGPattern = (0, _reactNative.requireNativeComponent)('RNSVGPattern');
},14929,[14305,14344,14320,14323,14371,14377,14386,10297,10033,11554,11644,14926,11497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _extractProps = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var Mask = function (_Shape) {
    (0, _inherits2.default)(Mask, _Shape);

    function Mask() {
      (0, _classCallCheck2.default)(this, Mask);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Mask).apply(this, arguments));
    }

    (0, _createClass2.default)(Mask, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var maskTransform = props.maskTransform,
            transform = props.transform,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            maskUnits = props.maskUnits,
            maskContentUnits = props.maskContentUnits,
            children = props.children;
        return _react.default.createElement(RNSVGMask, (0, _extends2.default)({
          ref: this.refMethod
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, (0, _extractProps.propsAndStyles)(props), {
          x: null,
          y: null
        }), this), {
          x: x,
          y: y,
          width: width,
          height: height,
          maskTransform: (0, _extractTransform.default)(maskTransform || transform || props),
          maskUnits: maskUnits !== undefined ? _units.default[maskUnits] : 0,
          maskContentUnits: maskContentUnits !== undefined ? _units.default[maskContentUnits] : 1
        }), children);
      }
    }]);
    return Mask;
  }(_Shape2.default);

  exports.default = Mask;
  Mask.displayName = 'Mask';
  Mask.defaultProps = {
    x: '0%',
    y: '0%',
    width: '100%',
    height: '100%'
  };
  var RNSVGMask = (0, _reactNative.requireNativeComponent)('RNSVGMask');
},14932,[14308,14305,14344,14314,14320,14323,14371,14377,14386,10297,10033,11554,11509,14926,11497]);
__r(10120);
__r(10001);