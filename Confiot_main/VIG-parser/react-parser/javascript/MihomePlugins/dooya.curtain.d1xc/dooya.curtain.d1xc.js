
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _initPackage = _$$_REQUIRE(_dependencyMap[1]);

  var _config = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  (0, _initPackage.init)(_config.default);
},10001,[14305,10004,10697]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.register = register;
  exports.init = init;

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[3]);

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _fns = _$$_REQUIRE(_dependencyMap[5]);

  var _crossViewData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _navigationHelper = _$$_REQUIRE(_dependencyMap[7]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[8]);

  var _app = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _setting = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _CommonSetting = _$$_REQUIRE(_dependencyMap[11]);

  var _list = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _virtualPage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _consts = _$$_REQUIRE(_dependencyMap[14]);

  _reactNative.YellowBox.ignoreWarnings(['Warning:', 'Module']);

  _reactNative.UIManager.setLayoutAnimationEnabledExperimental && _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
  var Views = {};

  function register(viewName, ViewComponent) {
    if (viewName && ViewComponent) {
      Views[viewName] = ViewComponent;
    }
  }

  function initRootStack(initPage) {
    register('App', _app.default);
    register('Setting', _setting.default);
    register('MoreSetting', _CommonSetting.MoreSetting);
    register('List', _list.default);
    register('VirtualPage', _virtualPage.default);
    var RootStack = (0, _reactNavigation.createStackNavigator)(Views, {
      initialRouteName: Views[initPage] ? initPage : 'App',
      navigationOptions: function navigationOptions(_ref) {
        var navigation = _ref.navigation;
        (0, _navigationHelper.setNavigation)(navigation);
        return {
          header: null
        };
      }
    });
    return (0, _navigationHelper.wrapBackWithViewName)(RootStack);
  }

  function init(PAGECONFIG) {
    var RootStack = initRootStack();

    _crossViewData.default.set(_consts.CONSTPAGECONFIG, PAGECONFIG);

    _miot.PackageEvent.packageAuthorizationCancel.addListener(function () {
      _miot.Host.storage.set(_consts.CONSTPROTOCOLCACHEKEY, false);
    });

    _miot.PackageEvent.packageWillLoad.addListener(function () {
      (0, _instanceManager.initManager)(PAGECONFIG);
      (0, _instanceManager.readAndWatchPropsGlobal)();
    });

    _miot.PackageEvent.packageDidLoaded.addListener(_fns.NOOP);

    _miot.PackageEvent.packageViewWillAppear.addListener(_fns.NOOP);

    _miot.PackageEvent.packageDidResume.addListener(_fns.NOOP);

    _miot.PackageEvent.packageWillPause.addListener(_fns.NOOP);

    _miot.PackageEvent.packageWillExit.addListener(_instanceManager.destoryManager);

    _miot.Package.entry(RootStack, _fns.NOOP);
  }
},10004,[14305,10297,10033,10918,10074,10779,10842,10824,10007,10505,10688,10353,10691,10694,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initManager = initManager;
  exports.getPropKey = getPropKey;
  exports.getPropEventKey = getPropEventKey;
  exports.updateCachedPropValues = updateCachedPropValues;
  exports.listen = listen;
  exports.listenGlobalOn = listenGlobalOn;
  exports.listenGlobalTheme = listenGlobalTheme;
  exports.listenPowerMultikeyChange = listenPowerMultikeyChange;
  exports.canAccess = canAccess;
  exports.readAndWatchProps = readAndWatchProps;
  exports.readAndWatchPropsGlobal = readAndWatchPropsGlobal;
  exports.readAndWatchPropsWithKey = readAndWatchPropsWithKey;
  exports.destoryManager = destoryManager;
  exports.getSpecDefinition = getSpecDefinition;
  exports.checkDeviceOnline = checkDeviceOnline;
  exports.setSpecValue = setSpecValue;
  exports.setSpecValues = setSpecValues;
  exports.triggerAction = triggerAction;
  exports.getVirtualProps = getVirtualProps;
  exports.setVirtualProp = setVirtualProp;
  exports.setVirtualProps = setVirtualProps;
  exports.setRpcRequests = setRpcRequests;
  exports.setRpcRequest = setRpcRequest;
  exports.parseValueList = parseValueList;
  exports.parseValueRange = parseValueRange;
  exports.CODES = exports.ACCESSNOTIFY = exports.ACCESSWRITE = exports.ACCESSREAD = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _miot = _$$_REQUIRE(_dependencyMap[6]);

  var _fns = _$$_REQUIRE(_dependencyMap[7]);

  var _colors = _$$_REQUIRE(_dependencyMap[8]);

  var _dialogManager = _$$_REQUIRE(_dependencyMap[9]);

  var _consts = _$$_REQUIRE(_dependencyMap[10]);

  var _icons = _$$_REQUIRE(_dependencyMap[11]);

  var _i18n = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var LANGUAGE = _miot.Host.locale.language;
  var parsedInstance = null;
  var cachedPropValues = {};
  var listeners = [];
  var intervals = [];
  var deviceReceivedMessagesListened = false;
  var allReadProps = [];
  var allReadPropsMap = {};
  var allWatchProps = [];
  var allWatchPropsMap = {};
  var allVirtualProps = [];
  var allVirtualPropsMap = {};
  var deviceType = parseInt(_miot.Device.type, 10);
  var cachedCfg = null;
  var SPECPROPVALUECHANGED = 'SPECPROPVALUECHANGED';
  var SPECPROPVALUEHANDLING = 'SPECPROPVALUEHANDLING';
  var SPECPROPVALUEERROR = 'SPECPROPVALUEERROR';
  var SPECGLOBALONCHANGED = 'SPECGLOBALONCHANGED';
  var SPECGLOBALTHEMECHANGED = 'SPECGLOBALTHEMECHANGED';
  var POWERMULTIKEYCHANGE = 'POWERMULTIKEYCHANGE';
  var VIRTUALPROPVALUECHANGED = 'VIRTUALPROPVALUECHANGED';
  var ACCESSREAD = 'read';
  exports.ACCESSREAD = ACCESSREAD;
  var ACCESSWRITE = 'write';
  exports.ACCESSWRITE = ACCESSWRITE;
  var ACCESSNOTIFY = 'notify';
  exports.ACCESSNOTIFY = ACCESSNOTIFY;

  function initManager(cfg) {
    cachedCfg = cfg;
    parsedInstance = parseInstance(cfg.instance);
    getInitSpecValues().then(_fns.log).catch(_fns.log);
  }

  var resetGetPropsIntervalKeys = ['spec', 'virtualProp'];
  var resetGetPropsIntervalCaches = {};

  function resetGetPropsInterval(key, delay, duration, fn) {
    if (!!key && resetGetPropsIntervalKeys.indexOf(key) === -1) {
      resetGetPropsIntervalKeys.push(key);
    }

    if (!resetGetPropsIntervalCaches[key]) {
      resetGetPropsIntervalCaches[key] = {};
    }

    var _ref = resetGetPropsIntervalCaches[key || 'spec'] || {},
        intervalGetProps = _ref.intervalGetProps,
        timerGetProps = _ref.timerGetProps;

    timerGetProps && clearTimeout(timerGetProps);
    timerGetProps = null;
    resetGetPropsIntervalCaches[key].timerGetProps = setTimeout(function () {
      fn();
      intervalGetProps && clearInterval(intervalGetProps);
      intervalGetProps = null;
      resetGetPropsIntervalCaches[key].intervalGetProps = setInterval(function () {
        fn();
      }, duration || 5e3);
    }, delay || 0);
  }

  function resetGetSpecPropsInterval() {
    var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5e3;

    if ([17].indexOf(deviceType) !== -1) {
      duration = 3e3;
    }

    resetGetPropsInterval('spec', delay, duration, function () {
      var allReadPropsNew = JSON.parse(JSON.stringify(allReadProps));

      _miot.Service.spec.getPropertiesValue(allReadPropsNew).then(function (res) {
        (0, _fns.log)('getPropertiesValue', res);

        if (!res || !(res instanceof Array)) {
          res = [];
        }

        updateCachedPropValues(res);
      }).catch(_fns.log);
    });
  }

  function resetGetVirturalPropsInterval(delay, duration) {
    resetGetPropsInterval('virtualProp', delay, duration, function () {
      getVirtualProps(allVirtualProps).then(updateCachedPropValues).catch(_fns.log);
    });
  }

  function isVirtualProp(spec) {
    return spec && spec.virtualProp;
  }

  function getPropKey(spec) {
    if (isVirtualProp(spec)) {
      return "virtualProps." + spec.virtualProp;
    }

    var _ref2 = spec || {},
        siid = _ref2.siid,
        piid = _ref2.piid,
        aiid = _ref2.aiid,
        eiid = _ref2.eiid;

    return (eiid ? 'event' : aiid ? 'action' : 'prop') + "." + siid + "." + (eiid || aiid || piid);
  }

  function getPropEventKey(spec) {
    if (isVirtualProp(spec)) {
      return "VIRTUALPROPVALUECHANGED." + spec.virtualProp;
    }

    var siid = spec.siid,
        piid = spec.piid,
        aiid = spec.aiid,
        eiid = spec.eiid,
        type = spec.type;
    return (type || SPECPROPVALUECHANGED) + "." + (eiid ? 'event' : aiid ? 'action' : 'prop') + "." + siid + "." + (eiid || aiid || piid);
  }

  var CODES = {
    success: function success(code) {
      return code >= 0;
    },
    handling: function handling(code) {
      return code === 1;
    },
    error: function error(code) {
      return !CODES.success(code) && !CODES.handling(code);
    }
  };
  exports.CODES = CODES;

  function parseInstance(instance) {
    if (parsedInstance) {
      return parsedInstance;
    }

    if (!instance) {
      return {};
    }

    var ret = {};
    (instance.services || []).forEach(function (service) {
      var siid = service.iid;
      ['properties', 'actions', 'events'].forEach(function (type, index) {
        (service[type] || []).forEach(function (prop) {
          var _objectSpread2;

          var iid = prop.iid;
          var nkey = ['pname', 'aname', 'ename'][index];
          var ikey = ['piid', 'aiid', 'eiid'][index];
          var key = getPropKey((0, _defineProperty2.default)({
            siid: siid
          }, ikey, iid));
          ret[key] = (0, _objectSpread3.default)({}, prop, (_objectSpread2 = {
            siid: siid
          }, (0, _defineProperty2.default)(_objectSpread2, ikey, iid), (0, _defineProperty2.default)(_objectSpread2, "sname", service.type.split(':')[3]), (0, _defineProperty2.default)(_objectSpread2, nkey, prop.type.split(':')[3]), _objectSpread2));
        });
      });
    });
    parsedInstance = ret;
    return ret;
  }

  function updateCachedPropValues(pvs) {
    console.log('updateCachedPropValues.start', pvs);

    if (!pvs || !pvs.length) {
      return;
    }

    var now = Date.now();
    pvs.forEach(function (propValue) {
      var code = propValue.code,
          timestamp = propValue.timestamp,
          setType = propValue.setType,
          value = propValue.value;
      var key = getPropKey(propValue);
      var ekey = getPropEventKey(propValue);
      var isEvent = propValue.eiid !== undefined && propValue.eiid !== null;

      if (isEvent) {
        cachedPropValues[key] = propValue;

        _reactNative.DeviceEventEmitter.emit(ekey, propValue);

        return;
      }

      var cachedPropValue = getCachedSpecValue(propValue);
      var isError = CODES.error(code);
      var hasChanged = false;
      var newPropValue = (0, _objectSpread3.default)({}, propValue);
      var hasValidCache = cachedPropValue && cachedPropValue.validValue !== undefined;

      if (isError && !hasValidCache) {} else if (!isError && !hasValidCache) {
        if (setType === 'beforeSet') {
          newPropValue.timestamp = timestamp || now;
          hasChanged = true;
        } else if (setType === 'afterSet' || !setType) {
          newPropValue.validValue = value;
          newPropValue.timestamp = timestamp || now;
          newPropValue.validTimestamp = timestamp || now;
          hasChanged = true;
        }
      } else if (isError && hasValidCache) {
        newPropValue.value = cachedPropValue.validValue;
        newPropValue.validValue = cachedPropValue.validValue;
        newPropValue.timestamp = cachedPropValue.validTimestamp;
        newPropValue.validTimestamp = cachedPropValue.validTimestamp;
        hasChanged = newPropValue.value !== cachedPropValue.value;
      } else {
        if (setType === 'beforeSet') {
          newPropValue.validValue = cachedPropValue.validValue;
          newPropValue.timestamp = timestamp || now;
          newPropValue.validTimestamp = cachedPropValue.validTimestamp;
          hasChanged = newPropValue.value !== cachedPropValue.value;
        } else if (!setType) {
          newPropValue.validValue = value;
          newPropValue.timestamp = timestamp || now;
          newPropValue.validTimestamp = timestamp || now;
          hasChanged = newPropValue.value !== cachedPropValue.value;
        } else if (setType === 'afterSet') {
          newPropValue.value = cachedPropValue.value;
          newPropValue.validValue = cachedPropValue.validValue;
          newPropValue.timestamp = timestamp || now;
          newPropValue.validTimestamp = timestamp || now;
          hasChanged = false;
        }
      }

      if (cachedPropValue && cachedPropValue.setType && !propValue.setType && now - cachedPropValue.timestamp < 5e3) {
        console.log('updateCachedPropValues.skip', pvs.length, cachedPropValue, propValue);
        return;
      }

      console.log('updateCachedPropValues.notskip', pvs.length);
      cachedPropValues[key] = newPropValue;

      if (hasChanged) {
        _reactNative.DeviceEventEmitter.emit(ekey, newPropValue);

        console.log('updateCachedPropValues.emit', cachedPropValue, propValue);
      }
    });
    (0, _fns.log)('updateCachedPropValues.cachedPropValues', (0, _objectSpread3.default)({}, cachedPropValues));
  }

  function listen(spec, fn) {
    var _ref3 = spec || {},
        siid = _ref3.siid,
        piid = _ref3.piid,
        aiid = _ref3.aiid,
        eiid = _ref3.eiid,
        virtualProp = _ref3.virtualProp;

    if ((siid === undefined || piid === undefined && aiid === undefined && eiid === undefined) && !virtualProp || typeof fn !== 'function') {
      return null;
    }

    var ekey = getPropEventKey({
      siid: siid,
      piid: piid,
      aiid: aiid,
      eiid: eiid,
      virtualProp: virtualProp
    });
    var key = getPropKey({
      siid: siid,
      piid: piid,
      aiid: aiid,
      eiid: eiid,
      virtualProp: virtualProp
    });
    var cachedPropValue = getCachedSpecValue(spec);

    if (cachedPropValue) {
      fn(cachedPropValue);
    }

    return _reactNative.DeviceEventEmitter.addListener(ekey, fn);
  }

  function listenGlobalOn(fn) {
    return listen(cachedCfg ? cachedCfg.globalOn : {}, function (v) {
      fn(!!v.value);
    });
  }

  var globalThemeFn = null;
  var globalThemeInited = false;
  var globalThemeKeys = [];
  var globalThemeValues = [];

  function listenGlobalTheme(fn) {
    initGlobalTheme();
    var themeFn = globalThemeFn || (globalThemeFn = cachedCfg.globalThemes ? (0, _fns.getStringGenerator)(cachedCfg.globalThemes) : null);
    fn(themeFn ? themeFn.apply(undefined, (0, _toConsumableArray2.default)(globalThemeValues)) : '');
    return _reactNative.DeviceEventEmitter.addListener(SPECGLOBALTHEMECHANGED, fn);
  }

  function initGlobalTheme() {
    if (globalThemeInited) {
      return;
    }

    var specs = cachedCfg ? cachedCfg.globalTheme : [];
    globalThemeInited = true;
    globalThemeValues = specs.map(function (spec) {
      return undefined;
    });
    specs.forEach(function (spec) {
      if (!spec) {
        return;
      }

      globalThemeKeys.push(getPropKey(spec));
      listeners.push(listen(spec, function (v) {
        var key = getPropKey(spec);
        var index = globalThemeKeys.findIndex(function (k) {
          return k === key;
        });

        if (index !== -1) {
          globalThemeValues[index] = v.value;
        }

        var themeFn = globalThemeFn || (globalThemeFn = cachedCfg.globalThemes ? (0, _fns.getStringGenerator)(cachedCfg.globalThemes) : null);
        var theme = themeFn ? themeFn.apply(undefined, (0, _toConsumableArray2.default)(globalThemeValues)) : '';

        _reactNative.DeviceEventEmitter.emit(SPECGLOBALTHEMECHANGED, theme);
      }));
    });
  }

  function listenPowerMultikeyChange(fn) {
    return _reactNative.DeviceEventEmitter.addListener(POWERMULTIKEYCHANGE, fn);
  }

  function canAccess(prop, access) {
    return prop && access && prop.access && prop.access.indexOf(access) !== -1;
  }

  function readAndWatchProps(items) {
    if (!items || !items.length) {
      return;
    }

    var readProps = [];
    var watchProps = [];
    var virtualProps = [];
    var hasPowerMultiKey = false;

    function scanSpec(spec) {
      if (!spec) {
        return;
      }

      if (isVirtualProp(spec) && !allVirtualPropsMap[spec.virtualProp]) {
        virtualProps.push(spec.virtualProp);
        allVirtualPropsMap[spec.virtualProp] = true;
        allVirtualProps.push(spec.virtualProp);
        return;
      }

      var siid = spec.siid,
          piid = spec.piid,
          eiid = spec.eiid;

      if (siid === undefined || piid === undefined && eiid === undefined) {
        return;
      }

      var instanceKey = getPropKey(spec);
      var instanceProp = parsedInstance[instanceKey];

      if (!instanceProp || !instanceProp.access && instanceProp.piid) {
        return;
      }

      if (canAccess(instanceProp, ACCESSREAD) && !allReadPropsMap[instanceKey]) {
        readProps.push({
          did: _consts.DeviceID,
          siid: siid,
          piid: piid
        });
        allReadPropsMap[instanceKey] = true;
        allReadProps.push({
          did: _consts.DeviceID,
          siid: siid,
          piid: piid
        });
      }

      if ((canAccess(instanceProp, ACCESSNOTIFY) || instanceProp.eiid) && !allWatchPropsMap[instanceKey]) {
        watchProps.push(instanceKey);
        allWatchPropsMap[instanceKey] = true;
        allWatchProps.push(instanceKey);
      }
    }

    function scanSpecs(host) {
      if (!host) {
        return;
      }

      var items = host.items || [];
      var specs = host.specs || [];
      var functionalSpecs = host.functionalSpecs || [];

      if (typeof host.nameIndex === 'number') {
        hasPowerMultiKey = true;
      }

      items.forEach(scanSpecs);
      specs.forEach(scanSpec);
      functionalSpecs.forEach(scanSpec);
    }

    items.forEach(function (item) {
      scanSpecs(item);
    });

    if (readProps.length > 0) {
      resetGetSpecPropsInterval(0);
    }

    if (watchProps.length > 0) {
      var _Device$getDeviceWifi;

      if (!deviceReceivedMessagesListened) {
        deviceReceivedMessagesListened = true;
        listeners.push(_miot.DeviceEvent.deviceReceivedMessages.addListener(function (device, message) {
          if (device.deviceID !== _consts.DeviceID) {
            return;
          }

          var pvs = [];

          for (var _iterator = message.keys(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref4;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref4 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref4 = _i.value;
            }

            var _key = _ref4;

            if (allWatchPropsMap[_key]) {
              var _pvs$push;

              var _key$split = _key.split('.'),
                  _key$split2 = (0, _slicedToArray2.default)(_key$split, 3),
                  type = _key$split2[0],
                  siid = _key$split2[1],
                  iid = _key$split2[2];

              pvs.push((_pvs$push = {
                siid: parseInt(siid, 10)
              }, (0, _defineProperty2.default)(_pvs$push, type === 'event' ? 'eiid' : 'piid', parseInt(iid, 10)), (0, _defineProperty2.default)(_pvs$push, "code", 0), (0, _defineProperty2.default)(_pvs$push, "did", _consts.DeviceID), (0, _defineProperty2.default)(_pvs$push, "value", message.get(_key)[0]), _pvs$push));
            }
          }

          updateCachedPropValues(pvs);
        }));
      }

      (_Device$getDeviceWifi = _miot.Device.getDeviceWifi()).subscribeMessages.apply(_Device$getDeviceWifi, watchProps).then(function (listener) {
        listeners.push(listener);
      }).catch(_fns.NOOP);
    }

    if (virtualProps.length > 0) {
      resetGetVirturalPropsInterval(0, 3e4);
    }

    if (hasPowerMultiKey) {
      getPowerMultiKey();
      listeners.push(_reactNative.DeviceEventEmitter.addListener(_consts.CONSTAPPSHOW, function () {
        getPowerMultiKey();
      }));
    }
  }

  function getPowerMultiKey() {
    _miot.Service.callSmartHomeAPI('/device/deviceinfo', {
      get_sub_relation: true,
      dids: [_consts.DeviceID]
    }).then(function (res) {
      if (!res || !res.list || !res.list[0] || !res.list[0].member_ship) {
        return;
      }

      _reactNative.DeviceEventEmitter.emit(POWERMULTIKEYCHANGE, res.list[0].member_ship);
    }).catch(_fns.log);
  }

  function readAndWatchPropsGlobal() {
    readAndWatchProps(cachedCfg ? [{
      specs: [cachedCfg.globalOn].concat((0, _toConsumableArray2.default)(cachedCfg.globalTheme), [cachedCfg.firstPageSpec])
    }] : []);
  }

  function readAndWatchPropsWithKey(key) {
    readAndWatchProps(cachedCfg ? cachedCfg[key] : []);
  }

  function destoryManager() {
    while (listeners.length) {
      var listener = listeners.pop();
      listener && listener.remove();
    }

    while (intervals.length) {
      var interval = intervals.pop();
      interval && clearInterval(interval);
    }

    allReadProps = [];
    allReadPropsMap = {};
    resetGetPropsIntervalKeys && resetGetPropsIntervalKeys.forEach(function (key) {
      var _ref5 = resetGetPropsIntervalCaches[key] || {},
          timerGetProps = _ref5.timerGetProps,
          intervalGetProps = _ref5.intervalGetProps;

      timerGetProps && clearTimeout(timerGetProps);
      timerGetProps = null;
      intervalGetProps && clearInterval(intervalGetProps);
      intervalGetProps = null;
    });
    resetGetPropsIntervalKeys = null;
    resetGetPropsIntervalCaches = null;
  }

  function getSpecDefinition(spec, instance) {
    var _ref6 = spec || {},
        siid = _ref6.siid,
        piid = _ref6.piid,
        aiid = _ref6.aiid,
        eiid = _ref6.eiid;

    if (siid === undefined || piid === undefined && aiid === undefined && eiid === undefined) {
      return {};
    }

    var parsedInstance = parseInstance(instance);
    var key = getPropKey(spec);
    return parsedInstance[key] || {};
  }

  function getCachedSpecValue(spec) {
    var _ref7 = spec || {},
        siid = _ref7.siid,
        piid = _ref7.piid,
        aiid = _ref7.aiid,
        eiid = _ref7.eiid,
        virtualProp = _ref7.virtualProp;

    if ((siid === undefined || piid === undefined && aiid === undefined && eiid === undefined) && !virtualProp) {
      return null;
    }

    var key = getPropKey(spec);
    return cachedPropValues[key];
  }

  function getInitSpecValues() {
    return new Promise(function (resolve, reject) {
      _miot.Service.spec.getCurrentSpecValue(_consts.DeviceID).then(function (pvs) {
        var ret = !pvs ? [] : Array.isArray(pvs) ? pvs : Array.isArray(pvs.result) ? pvs.result : [];
        ret = ret.map(function (_ref8) {
          var siid = _ref8.siid,
              piid = _ref8.piid,
              value = _ref8.value;
          return {
            siid: parseInt(siid, 10),
            piid: parseInt(piid, 10),
            code: 0,
            did: _consts.DeviceID,
            value: value
          };
        });
        updateCachedPropValues(ret);
        resolve(ret);
      }).catch(reject);
    });
  }

  var MeshTipUrls = {
    zh: 'https://home.mi.com/views/article.html?articleId=898437912000000001',
    en: 'https://home.mi.com/views/article.html?articleId=100147623000000001'
  };

  function checkDeviceOnline(showTip) {
    return new Promise(function (resolve, reject) {
      if (_miot.Device.isOnline || [16].indexOf(deviceType) === -1) {
        resolve();
        return;
      }

      if (showTip) {
        setTimeout(function () {
          (0, _dialogManager.showMessage)({
            message: _i18n.default.connectFail(),
            buttons: [{
              text: _i18n.default.resolvePlan(),
              callback: function callback() {
                var url = MeshTipUrls[_miot.Host.locale.language] || MeshTipUrls.zh;

                _miot.Host.ui.openProductBaikeWebPage(url);
              }
            }]
          });
        }, 0);
      }

      reject();
    });
  }

  function setSpecValue(pv) {
    return new Promise(function (resolve, reject) {
      setSpecValues([pv]).then(function (res) {
        resolve(res[0]);
      }).catch(reject);
    });
  }

  function setSpecValuesBefore(pvs) {
    var stime = Date.now();
    var pvsBefore = [];
    pvs.forEach(function (pv) {
      var specDef = getSpecDefinition(pv);

      if (canAccess(specDef, ACCESSREAD) || canAccess(specDef, ACCESSNOTIFY)) {
        pvsBefore.push({
          siid: pv.siid,
          piid: pv.piid,
          code: 0,
          did: _consts.DeviceID,
          setType: 'beforeSet',
          value: pv.value,
          timestamp: stime
        });
      }
    });
    updateCachedPropValues(pvsBefore);
  }

  function setSpecValuesAfter(pvs, res, resolve, reject) {
    var pvsAfter = [];
    var errorCodes = [];
    var successCount = 0;
    console.log('setPropertiesValue', res);
    var etime = Date.now();

    if (!res || !(res instanceof Array)) {
      res = pvs.map(function (pv) {
        return {
          siid: pv.siid,
          piid: pv.piid,
          code: -999
        };
      });
    }

    res.forEach(function (pv) {
      var specDef = getSpecDefinition(pv);

      if (!CODES.error(pv.code)) {
        successCount += 1;
      } else {
        errorCodes.push(pv.code);
      }

      if (canAccess(specDef, ACCESSREAD) || canAccess(specDef, ACCESSNOTIFY)) {
        pvsAfter.push({
          siid: pv.siid,
          piid: pv.piid,
          code: pv.code,
          did: _consts.DeviceID,
          setType: 'afterSet',
          value: pvs.find(function (item) {
            return item.siid === pv.siid && item.piid === pv.piid;
          }).value,
          timestamp: etime
        });
      }
    });
    updateCachedPropValues(pvsAfter);

    if (successCount < pvs.length) {
      reject(errorCodes);
    } else {
      resolve(res);
    }
  }

  function setSpecValues(pvs) {
    return new Promise(function (resolve, reject) {
      checkDeviceOnline(true).then(function () {
        setSpecValuesBefore(pvs);

        _miot.Service.spec.setPropertiesValue(pvs).then(function (res) {
          setSpecValuesAfter(pvs, res, resolve, reject);
          resetGetSpecPropsInterval([16].indexOf(deviceType) !== -1 ? 5e3 : 3e3);
        }).catch(function () {
          setSpecValuesAfter(pvs, null, resolve, reject);
        });
      }).catch(_fns.NOOP);
    });
  }

  function triggerAction(av) {
    return new Promise(function (resolve, reject) {
      _miot.Service.spec.doAction(av).then(function (res) {
        if (res && CODES.success(res.code)) {
          resolve();
          resetGetSpecPropsInterval(3e3);
          return;
        }

        reject();
      }).catch(reject);
    });
  }

  function getVirtualProps() {
    var virtualProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return new Promise(function (resolve, reject) {
      _miot.Service.smarthome.batchGetDeviceDatas([{
        did: _consts.DeviceID,
        props: virtualProps.map(function (p) {
          return "prop.s_" + p;
        })
      }]).then(function (res) {
        var props = res ? res[_consts.DeviceID] : {};
        var pvs = virtualProps.map(function (p) {
          var key = "prop.s_" + p;
          var value = props[key];
          return {
            code: 0,
            virtualProp: p,
            value: value
          };
        });
        resolve(pvs);
      }).catch(_fns.log);
    });
  }

  function setVirtualProp(pv) {
    return new Promise(function (resolve, reject) {
      setVirtualProps([pv]).then(function (res) {
        resolve(res);
      }).catch(reject);
    });
  }

  function setVirtualProps(pvs) {
    return new Promise(function (resolve, reject) {
      var props = {};
      pvs.forEach(function (pv) {
        props["prop.s_" + pv.virtualProp] = pv.value;
      });

      _miot.Service.smarthome.batchSetDeviceDatas([{
        did: _consts.DeviceID,
        props: props
      }]).then(function (res) {
        var successPvs = pvs.map(function (pv) {
          return {
            code: 0,
            virtualProp: pv.virtualProp,
            value: pv.value
          };
        });
        updateCachedPropValues(successPvs);
        resolve();
      }).catch(reject);
    });
  }

  function setRpcRequests(pvs) {
    return _miot.Device.getDeviceWifi().callMethod('set_properties', pvs);
  }

  function setRpcRequest(pv) {
    return new Promise(function (resolve, reject) {
      setRpcRequests([pv]).then(function (res) {
        resolve(res[0]);
      }).catch(reject);
    });
  }

  function parseValueList(list) {
    var icons = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var iconsSelected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var titles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var iconKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'icon';
    var iconSelectedKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'iconSelected';
    var titleKey = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'title';
    return list.map(function (v, index) {
      var _ref9;

      return _ref9 = {
        value: v.value,
        description: v.description
      }, (0, _defineProperty2.default)(_ref9, iconKey, (0, _icons.getIcon)(icons[index])), (0, _defineProperty2.default)(_ref9, iconSelectedKey, (0, _icons.getIcon)(iconsSelected[index] || icons[index])), (0, _defineProperty2.default)(_ref9, titleKey, titles[index] || v.description), _ref9;
    });
  }

  function parseValueRange(min, max, step) {
    var ret = [];

    for (var i = min; i <= max; i += step) {
      ret.push(i);
    }

    return ret;
  }
},10007,[14305,14347,14359,14314,14317,10033,10074,10779,10785,10806,10010,10013,10496]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.genSwiperChangeEventId = genSwiperChangeEventId;
  exports.CONSTSETTINGHIDEFROMRN = exports.CONSTSETTINGSHOWFROMRN = exports.CONSTSETTINGHIDEFROMNATIVE = exports.CONSTSETTINGSHOWFROMNATIVE = exports.CONSTSETTINGHIDE = exports.CONSTSETTINGSHOW = exports.CONSTAPPHIDEFROMRN = exports.CONSTAPPSHOWFROMRN = exports.CONSTAPPHIDEFROMNATIVE = exports.CONSTAPPSHOWFROMNATIVE = exports.CONSTAPPHIDE = exports.CONSTAPPSHOW = exports.CONSTREQUESTHIDE = exports.CONSTREQUESTSHOW = exports.CONSTPROTOCOLCACHEKEY = exports.CONSTFIRMWARECHANGE = exports.CONSTPAGECONFIG = exports.isAndroid = exports.isIos = exports.DeviceID = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _miot = _$$_REQUIRE(_dependencyMap[1]);

  var DeviceID = _miot.Device.deviceID;
  exports.DeviceID = DeviceID;
  var isIos = _reactNative.Platform.OS === 'ios';
  exports.isIos = isIos;
  var isAndroid = _reactNative.Platform.OS === 'android';
  exports.isAndroid = isAndroid;
  var CONSTPAGECONFIG = 'PAGECONFIG:' + DeviceID;
  exports.CONSTPAGECONFIG = CONSTPAGECONFIG;
  var CONSTFIRMWARECHANGE = 'MH_FirmwareNeedUpdateAlert';
  exports.CONSTFIRMWARECHANGE = CONSTFIRMWARECHANGE;
  var CONSTPROTOCOLCACHEKEY = 'CONSTPROTOCOLCACHEKEY:' + DeviceID;
  exports.CONSTPROTOCOLCACHEKEY = CONSTPROTOCOLCACHEKEY;
  var CONSTREQUESTSHOW = 'CONSTREQUESTSHOW:' + DeviceID;
  exports.CONSTREQUESTSHOW = CONSTREQUESTSHOW;
  var CONSTREQUESTHIDE = 'CONSTREQUESTHIDE:' + DeviceID;
  exports.CONSTREQUESTHIDE = CONSTREQUESTHIDE;
  var CONSTAPPSHOW = 'CONSTAPPSHOW:' + DeviceID;
  exports.CONSTAPPSHOW = CONSTAPPSHOW;
  var CONSTAPPHIDE = 'CONSTAPPHIDE:' + DeviceID;
  exports.CONSTAPPHIDE = CONSTAPPHIDE;
  var CONSTAPPSHOWFROMNATIVE = 'CONSTAPPSHOWFROMNATIVE:' + DeviceID;
  exports.CONSTAPPSHOWFROMNATIVE = CONSTAPPSHOWFROMNATIVE;
  var CONSTAPPHIDEFROMNATIVE = 'CONSTAPPHIDEFROMNATIVE:' + DeviceID;
  exports.CONSTAPPHIDEFROMNATIVE = CONSTAPPHIDEFROMNATIVE;
  var CONSTAPPSHOWFROMRN = 'CONSTAPPSHOWFROMRN:' + DeviceID;
  exports.CONSTAPPSHOWFROMRN = CONSTAPPSHOWFROMRN;
  var CONSTAPPHIDEFROMRN = 'CONSTAPPHIDEFROMRN:' + DeviceID;
  exports.CONSTAPPHIDEFROMRN = CONSTAPPHIDEFROMRN;
  var CONSTSETTINGSHOW = 'CONSTSETTINGSHOW:' + DeviceID;
  exports.CONSTSETTINGSHOW = CONSTSETTINGSHOW;
  var CONSTSETTINGHIDE = 'CONSTSETTINGHIDE:' + DeviceID;
  exports.CONSTSETTINGHIDE = CONSTSETTINGHIDE;
  var CONSTSETTINGSHOWFROMNATIVE = 'CONSTSETTINGSHOWFROMNATIVE:' + DeviceID;
  exports.CONSTSETTINGSHOWFROMNATIVE = CONSTSETTINGSHOWFROMNATIVE;
  var CONSTSETTINGHIDEFROMNATIVE = 'CONSTSETTINGHIDEFROMNATIVE:' + DeviceID;
  exports.CONSTSETTINGHIDEFROMNATIVE = CONSTSETTINGHIDEFROMNATIVE;
  var CONSTSETTINGSHOWFROMRN = 'CONSTSETTINGSHOWFROMRN:' + DeviceID;
  exports.CONSTSETTINGSHOWFROMRN = CONSTSETTINGSHOWFROMRN;
  var CONSTSETTINGHIDEFROMRN = 'CONSTSETTINGHIDEFROMRN:' + DeviceID;
  exports.CONSTSETTINGHIDEFROMRN = CONSTSETTINGHIDEFROMRN;

  function genSwiperChangeEventId(key) {
    return "SWIPERCHANGEEVENT:" + DeviceID + ":" + key;
  }
},10010,[10033,10074]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.register = register;
  exports.getIcon = getIcon;

  var _defineEnumerableProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _auto, _autoSelected, _autoOrange, _moon, _moonSelected, _moonOrange, _moonBig, _heart, _heartSelected, _heartOrange, _mode, _mode1Selected, _mode2, _mode2Selected, _mode3, _mode3Selected, _mode4, _mode4Selected, _filter, _statusWarn, _switch, _lighting, _lightingSelected, _glittering, _glitteringSelected, _book, _bookSelected, _bookBig, _computer, _computerSelected, _computerBig, _rainbow, _rainbowSelected, _rainbowBig, _sun, _sunSelected, _sunOrange, _sunBig, _close, _countdown, _usb, _plugCn, _plugUs, _plugSaf, _plugEn, _plugEu, _disconnect, _switchOn, _switchOff, _naturalWind, _naturalWindSelecte, _straightWind, _straightWindSelect, _straightWindOrange, _timer, _horizontalSwing, _horizontalSwingSel, _horizontalSwingOra, _verticalSwing, _verticalSwingSelec, _verticalSwingOrang, _pause, _pauseSelected, _up, _upSelected, _down, _downSelected, _alarm, _dryWithWind, _dryWithWindSelect, _dryWithHeat, _dryWithHeatSelect, _off, _offSelected, _quickHot, _quickHotSelected, _curtainOpen, _curtainOpenSelecte, _curtainClose, _curtainCloseSelect, _curtainStyleBoth, _curtainStyleLeft, _curtainStyleRight, _basicWind, _basicWindSelected, _energySavingWind, _energySavingWindS, _tv, _tvSelected, _tvBig, _warmth, _warmthSelected, _custom, _customSelected, _customBig, _water, _water0Selected, _consumableFilter, _none, _noneSelected, _level, _level1Selected, _level1Orange, _level2, _level2Selected, _level2Orange, _level3, _level3Selected, _level3Orange, _level4, _level4Selected, _level4Orange, _level5, _level5Selected, _level5Orange, _dryer, _dryerSelected, _dryerOrange, _ventilation, _ventilationSelected, _ventilationOrange, _heatLow, _heatLowSelected, _heatLowOrange, _light, _lightSelected, _lightBig, _lightOrange, _ptcBathBlow, _ptcBathCustom, _ptcBathDryer, _ptcBathHeating, _ptcBathMultiple, _ptcBathVentilation, _uv, _nightLight, _nightLightSelected, _countdownOrange, _timerOrange, _smileFace, _smileFaceSelected, _smileFaceBig, _friend, _friendSelected, _friendBig, _entertain, _entertainSelected, _entertainBig, _color, _colorTemperature, _switchOrange, _airCooler, _airCoolerSelected, _screen, _screenSelected, _anion, _anionSelected, _baby, _babySelected, _Icons, _mutatorMap;

  var Icons = (_Icons = {}, _auto = 'auto', _mutatorMap = {}, _mutatorMap[_auto] = _mutatorMap[_auto] || {}, _mutatorMap[_auto].get = function () {
    return _$$_REQUIRE(_dependencyMap[2]);
  }, _autoSelected = 'auto-selected', _mutatorMap[_autoSelected] = _mutatorMap[_autoSelected] || {}, _mutatorMap[_autoSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[3]);
  }, _autoOrange = 'auto-orange', _mutatorMap[_autoOrange] = _mutatorMap[_autoOrange] || {}, _mutatorMap[_autoOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  }, _moon = 'moon', _mutatorMap[_moon] = _mutatorMap[_moon] || {}, _mutatorMap[_moon].get = function () {
    return _$$_REQUIRE(_dependencyMap[5]);
  }, _moonSelected = 'moon-selected', _mutatorMap[_moonSelected] = _mutatorMap[_moonSelected] || {}, _mutatorMap[_moonSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[6]);
  }, _moonOrange = 'moon-orange', _mutatorMap[_moonOrange] = _mutatorMap[_moonOrange] || {}, _mutatorMap[_moonOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[7]);
  }, _moonBig = 'moon-big', _mutatorMap[_moonBig] = _mutatorMap[_moonBig] || {}, _mutatorMap[_moonBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[8]);
  }, _heart = 'heart', _mutatorMap[_heart] = _mutatorMap[_heart] || {}, _mutatorMap[_heart].get = function () {
    return _$$_REQUIRE(_dependencyMap[9]);
  }, _heartSelected = 'heart-selected', _mutatorMap[_heartSelected] = _mutatorMap[_heartSelected] || {}, _mutatorMap[_heartSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[10]);
  }, _heartOrange = 'heart-orange', _mutatorMap[_heartOrange] = _mutatorMap[_heartOrange] || {}, _mutatorMap[_heartOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[11]);
  }, _mode = 'mode1', _mutatorMap[_mode] = _mutatorMap[_mode] || {}, _mutatorMap[_mode].get = function () {
    return _$$_REQUIRE(_dependencyMap[12]);
  }, _mode1Selected = 'mode1-selected', _mutatorMap[_mode1Selected] = _mutatorMap[_mode1Selected] || {}, _mutatorMap[_mode1Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[13]);
  }, _mode2 = 'mode2', _mutatorMap[_mode2] = _mutatorMap[_mode2] || {}, _mutatorMap[_mode2].get = function () {
    return _$$_REQUIRE(_dependencyMap[14]);
  }, _mode2Selected = 'mode2-selected', _mutatorMap[_mode2Selected] = _mutatorMap[_mode2Selected] || {}, _mutatorMap[_mode2Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[15]);
  }, _mode3 = 'mode3', _mutatorMap[_mode3] = _mutatorMap[_mode3] || {}, _mutatorMap[_mode3].get = function () {
    return _$$_REQUIRE(_dependencyMap[16]);
  }, _mode3Selected = 'mode3-selected', _mutatorMap[_mode3Selected] = _mutatorMap[_mode3Selected] || {}, _mutatorMap[_mode3Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[17]);
  }, _mode4 = 'mode4', _mutatorMap[_mode4] = _mutatorMap[_mode4] || {}, _mutatorMap[_mode4].get = function () {
    return _$$_REQUIRE(_dependencyMap[18]);
  }, _mode4Selected = 'mode4-selected', _mutatorMap[_mode4Selected] = _mutatorMap[_mode4Selected] || {}, _mutatorMap[_mode4Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[19]);
  }, _filter = 'filter', _mutatorMap[_filter] = _mutatorMap[_filter] || {}, _mutatorMap[_filter].get = function () {
    return _$$_REQUIRE(_dependencyMap[20]);
  }, _statusWarn = 'status-warn', _mutatorMap[_statusWarn] = _mutatorMap[_statusWarn] || {}, _mutatorMap[_statusWarn].get = function () {
    return _$$_REQUIRE(_dependencyMap[21]);
  }, _switch = 'switch', _mutatorMap[_switch] = _mutatorMap[_switch] || {}, _mutatorMap[_switch].get = function () {
    return _$$_REQUIRE(_dependencyMap[22]);
  }, _lighting = 'lighting', _mutatorMap[_lighting] = _mutatorMap[_lighting] || {}, _mutatorMap[_lighting].get = function () {
    return _$$_REQUIRE(_dependencyMap[23]);
  }, _lightingSelected = 'lighting-selected', _mutatorMap[_lightingSelected] = _mutatorMap[_lightingSelected] || {}, _mutatorMap[_lightingSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[24]);
  }, _glittering = 'glittering', _mutatorMap[_glittering] = _mutatorMap[_glittering] || {}, _mutatorMap[_glittering].get = function () {
    return _$$_REQUIRE(_dependencyMap[25]);
  }, _glitteringSelected = 'glittering-selected', _mutatorMap[_glitteringSelected] = _mutatorMap[_glitteringSelected] || {}, _mutatorMap[_glitteringSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[26]);
  }, _book = 'book', _mutatorMap[_book] = _mutatorMap[_book] || {}, _mutatorMap[_book].get = function () {
    return _$$_REQUIRE(_dependencyMap[27]);
  }, _bookSelected = 'book-selected', _mutatorMap[_bookSelected] = _mutatorMap[_bookSelected] || {}, _mutatorMap[_bookSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[28]);
  }, _bookBig = 'book-big', _mutatorMap[_bookBig] = _mutatorMap[_bookBig] || {}, _mutatorMap[_bookBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[29]);
  }, _computer = 'computer', _mutatorMap[_computer] = _mutatorMap[_computer] || {}, _mutatorMap[_computer].get = function () {
    return _$$_REQUIRE(_dependencyMap[30]);
  }, _computerSelected = 'computer-selected', _mutatorMap[_computerSelected] = _mutatorMap[_computerSelected] || {}, _mutatorMap[_computerSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[31]);
  }, _computerBig = 'computer-big', _mutatorMap[_computerBig] = _mutatorMap[_computerBig] || {}, _mutatorMap[_computerBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[32]);
  }, _rainbow = 'rainbow', _mutatorMap[_rainbow] = _mutatorMap[_rainbow] || {}, _mutatorMap[_rainbow].get = function () {
    return _$$_REQUIRE(_dependencyMap[33]);
  }, _rainbowSelected = 'rainbow-selected', _mutatorMap[_rainbowSelected] = _mutatorMap[_rainbowSelected] || {}, _mutatorMap[_rainbowSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[34]);
  }, _rainbowBig = 'rainbow-big', _mutatorMap[_rainbowBig] = _mutatorMap[_rainbowBig] || {}, _mutatorMap[_rainbowBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[35]);
  }, _sun = 'sun', _mutatorMap[_sun] = _mutatorMap[_sun] || {}, _mutatorMap[_sun].get = function () {
    return _$$_REQUIRE(_dependencyMap[36]);
  }, _sunSelected = 'sun-selected', _mutatorMap[_sunSelected] = _mutatorMap[_sunSelected] || {}, _mutatorMap[_sunSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[37]);
  }, _sunOrange = 'sun-orange', _mutatorMap[_sunOrange] = _mutatorMap[_sunOrange] || {}, _mutatorMap[_sunOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[38]);
  }, _sunBig = 'sun-big', _mutatorMap[_sunBig] = _mutatorMap[_sunBig] || {}, _mutatorMap[_sunBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[39]);
  }, _close = 'close', _mutatorMap[_close] = _mutatorMap[_close] || {}, _mutatorMap[_close].get = function () {
    return _$$_REQUIRE(_dependencyMap[40]);
  }, _countdown = 'countdown', _mutatorMap[_countdown] = _mutatorMap[_countdown] || {}, _mutatorMap[_countdown].get = function () {
    return _$$_REQUIRE(_dependencyMap[41]);
  }, _usb = 'usb', _mutatorMap[_usb] = _mutatorMap[_usb] || {}, _mutatorMap[_usb].get = function () {
    return _$$_REQUIRE(_dependencyMap[42]);
  }, _plugCn = 'plug-cn', _mutatorMap[_plugCn] = _mutatorMap[_plugCn] || {}, _mutatorMap[_plugCn].get = function () {
    return _$$_REQUIRE(_dependencyMap[43]);
  }, _plugUs = 'plug-us', _mutatorMap[_plugUs] = _mutatorMap[_plugUs] || {}, _mutatorMap[_plugUs].get = function () {
    return _$$_REQUIRE(_dependencyMap[44]);
  }, _plugSaf = 'plug-saf', _mutatorMap[_plugSaf] = _mutatorMap[_plugSaf] || {}, _mutatorMap[_plugSaf].get = function () {
    return _$$_REQUIRE(_dependencyMap[45]);
  }, _plugEn = 'plug-en', _mutatorMap[_plugEn] = _mutatorMap[_plugEn] || {}, _mutatorMap[_plugEn].get = function () {
    return _$$_REQUIRE(_dependencyMap[46]);
  }, _plugEu = 'plug-eu', _mutatorMap[_plugEu] = _mutatorMap[_plugEu] || {}, _mutatorMap[_plugEu].get = function () {
    return _$$_REQUIRE(_dependencyMap[47]);
  }, _disconnect = 'disconnect', _mutatorMap[_disconnect] = _mutatorMap[_disconnect] || {}, _mutatorMap[_disconnect].get = function () {
    return _$$_REQUIRE(_dependencyMap[48]);
  }, _switchOn = 'switch-on', _mutatorMap[_switchOn] = _mutatorMap[_switchOn] || {}, _mutatorMap[_switchOn].get = function () {
    return _$$_REQUIRE(_dependencyMap[49]);
  }, _switchOff = 'switch-off', _mutatorMap[_switchOff] = _mutatorMap[_switchOff] || {}, _mutatorMap[_switchOff].get = function () {
    return _$$_REQUIRE(_dependencyMap[50]);
  }, _naturalWind = 'natural-wind', _mutatorMap[_naturalWind] = _mutatorMap[_naturalWind] || {}, _mutatorMap[_naturalWind].get = function () {
    return _$$_REQUIRE(_dependencyMap[51]);
  }, _naturalWindSelecte = 'natural-wind-selected', _mutatorMap[_naturalWindSelecte] = _mutatorMap[_naturalWindSelecte] || {}, _mutatorMap[_naturalWindSelecte].get = function () {
    return _$$_REQUIRE(_dependencyMap[52]);
  }, _straightWind = 'straight-wind', _mutatorMap[_straightWind] = _mutatorMap[_straightWind] || {}, _mutatorMap[_straightWind].get = function () {
    return _$$_REQUIRE(_dependencyMap[53]);
  }, _straightWindSelect = 'straight-wind-selected', _mutatorMap[_straightWindSelect] = _mutatorMap[_straightWindSelect] || {}, _mutatorMap[_straightWindSelect].get = function () {
    return _$$_REQUIRE(_dependencyMap[54]);
  }, _straightWindOrange = 'straight-wind-orange', _mutatorMap[_straightWindOrange] = _mutatorMap[_straightWindOrange] || {}, _mutatorMap[_straightWindOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[55]);
  }, _timer = 'timer', _mutatorMap[_timer] = _mutatorMap[_timer] || {}, _mutatorMap[_timer].get = function () {
    return _$$_REQUIRE(_dependencyMap[56]);
  }, _horizontalSwing = 'horizontal-swing', _mutatorMap[_horizontalSwing] = _mutatorMap[_horizontalSwing] || {}, _mutatorMap[_horizontalSwing].get = function () {
    return _$$_REQUIRE(_dependencyMap[57]);
  }, _horizontalSwingSel = 'horizontal-swing-selected', _mutatorMap[_horizontalSwingSel] = _mutatorMap[_horizontalSwingSel] || {}, _mutatorMap[_horizontalSwingSel].get = function () {
    return _$$_REQUIRE(_dependencyMap[58]);
  }, _horizontalSwingOra = 'horizontal-swing-orange', _mutatorMap[_horizontalSwingOra] = _mutatorMap[_horizontalSwingOra] || {}, _mutatorMap[_horizontalSwingOra].get = function () {
    return _$$_REQUIRE(_dependencyMap[59]);
  }, _verticalSwing = 'vertical-swing', _mutatorMap[_verticalSwing] = _mutatorMap[_verticalSwing] || {}, _mutatorMap[_verticalSwing].get = function () {
    return _$$_REQUIRE(_dependencyMap[60]);
  }, _verticalSwingSelec = 'vertical-swing-selected', _mutatorMap[_verticalSwingSelec] = _mutatorMap[_verticalSwingSelec] || {}, _mutatorMap[_verticalSwingSelec].get = function () {
    return _$$_REQUIRE(_dependencyMap[61]);
  }, _verticalSwingOrang = 'vertical-swing-orange', _mutatorMap[_verticalSwingOrang] = _mutatorMap[_verticalSwingOrang] || {}, _mutatorMap[_verticalSwingOrang].get = function () {
    return _$$_REQUIRE(_dependencyMap[62]);
  }, _pause = 'pause', _mutatorMap[_pause] = _mutatorMap[_pause] || {}, _mutatorMap[_pause].get = function () {
    return _$$_REQUIRE(_dependencyMap[63]);
  }, _pauseSelected = 'pause-selected', _mutatorMap[_pauseSelected] = _mutatorMap[_pauseSelected] || {}, _mutatorMap[_pauseSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[64]);
  }, _up = 'up', _mutatorMap[_up] = _mutatorMap[_up] || {}, _mutatorMap[_up].get = function () {
    return _$$_REQUIRE(_dependencyMap[65]);
  }, _upSelected = 'up-selected', _mutatorMap[_upSelected] = _mutatorMap[_upSelected] || {}, _mutatorMap[_upSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[66]);
  }, _down = 'down', _mutatorMap[_down] = _mutatorMap[_down] || {}, _mutatorMap[_down].get = function () {
    return _$$_REQUIRE(_dependencyMap[67]);
  }, _downSelected = 'down-selected', _mutatorMap[_downSelected] = _mutatorMap[_downSelected] || {}, _mutatorMap[_downSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[68]);
  }, _alarm = 'alarm', _mutatorMap[_alarm] = _mutatorMap[_alarm] || {}, _mutatorMap[_alarm].get = function () {
    return _$$_REQUIRE(_dependencyMap[69]);
  }, _dryWithWind = 'dry-with-wind', _mutatorMap[_dryWithWind] = _mutatorMap[_dryWithWind] || {}, _mutatorMap[_dryWithWind].get = function () {
    return _$$_REQUIRE(_dependencyMap[70]);
  }, _dryWithWindSelect = 'dry-with-wind-selected', _mutatorMap[_dryWithWindSelect] = _mutatorMap[_dryWithWindSelect] || {}, _mutatorMap[_dryWithWindSelect].get = function () {
    return _$$_REQUIRE(_dependencyMap[71]);
  }, _dryWithHeat = 'dry-with-heat', _mutatorMap[_dryWithHeat] = _mutatorMap[_dryWithHeat] || {}, _mutatorMap[_dryWithHeat].get = function () {
    return _$$_REQUIRE(_dependencyMap[72]);
  }, _dryWithHeatSelect = 'dry-with-heat-selected', _mutatorMap[_dryWithHeatSelect] = _mutatorMap[_dryWithHeatSelect] || {}, _mutatorMap[_dryWithHeatSelect].get = function () {
    return _$$_REQUIRE(_dependencyMap[73]);
  }, _off = 'off', _mutatorMap[_off] = _mutatorMap[_off] || {}, _mutatorMap[_off].get = function () {
    return _$$_REQUIRE(_dependencyMap[74]);
  }, _offSelected = 'off-selected', _mutatorMap[_offSelected] = _mutatorMap[_offSelected] || {}, _mutatorMap[_offSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[75]);
  }, _quickHot = 'quick-hot', _mutatorMap[_quickHot] = _mutatorMap[_quickHot] || {}, _mutatorMap[_quickHot].get = function () {
    return _$$_REQUIRE(_dependencyMap[76]);
  }, _quickHotSelected = 'quick-hot-selected', _mutatorMap[_quickHotSelected] = _mutatorMap[_quickHotSelected] || {}, _mutatorMap[_quickHotSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[77]);
  }, _curtainOpen = 'curtain-open', _mutatorMap[_curtainOpen] = _mutatorMap[_curtainOpen] || {}, _mutatorMap[_curtainOpen].get = function () {
    return _$$_REQUIRE(_dependencyMap[78]);
  }, _curtainOpenSelecte = 'curtain-open-selected', _mutatorMap[_curtainOpenSelecte] = _mutatorMap[_curtainOpenSelecte] || {}, _mutatorMap[_curtainOpenSelecte].get = function () {
    return _$$_REQUIRE(_dependencyMap[79]);
  }, _curtainClose = 'curtain-close', _mutatorMap[_curtainClose] = _mutatorMap[_curtainClose] || {}, _mutatorMap[_curtainClose].get = function () {
    return _$$_REQUIRE(_dependencyMap[80]);
  }, _curtainCloseSelect = 'curtain-close-selected', _mutatorMap[_curtainCloseSelect] = _mutatorMap[_curtainCloseSelect] || {}, _mutatorMap[_curtainCloseSelect].get = function () {
    return _$$_REQUIRE(_dependencyMap[81]);
  }, _curtainStyleBoth = 'curtain-style-both', _mutatorMap[_curtainStyleBoth] = _mutatorMap[_curtainStyleBoth] || {}, _mutatorMap[_curtainStyleBoth].get = function () {
    return _$$_REQUIRE(_dependencyMap[82]);
  }, _curtainStyleLeft = 'curtain-style-left', _mutatorMap[_curtainStyleLeft] = _mutatorMap[_curtainStyleLeft] || {}, _mutatorMap[_curtainStyleLeft].get = function () {
    return _$$_REQUIRE(_dependencyMap[83]);
  }, _curtainStyleRight = 'curtain-style-right', _mutatorMap[_curtainStyleRight] = _mutatorMap[_curtainStyleRight] || {}, _mutatorMap[_curtainStyleRight].get = function () {
    return _$$_REQUIRE(_dependencyMap[84]);
  }, _basicWind = 'basic-wind', _mutatorMap[_basicWind] = _mutatorMap[_basicWind] || {}, _mutatorMap[_basicWind].get = function () {
    return _$$_REQUIRE(_dependencyMap[85]);
  }, _basicWindSelected = 'basic-wind-selected', _mutatorMap[_basicWindSelected] = _mutatorMap[_basicWindSelected] || {}, _mutatorMap[_basicWindSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[86]);
  }, _energySavingWind = 'energy-saving-wind', _mutatorMap[_energySavingWind] = _mutatorMap[_energySavingWind] || {}, _mutatorMap[_energySavingWind].get = function () {
    return _$$_REQUIRE(_dependencyMap[87]);
  }, _energySavingWindS = 'energy-saving-wind-selected', _mutatorMap[_energySavingWindS] = _mutatorMap[_energySavingWindS] || {}, _mutatorMap[_energySavingWindS].get = function () {
    return _$$_REQUIRE(_dependencyMap[88]);
  }, _tv = 'tv', _mutatorMap[_tv] = _mutatorMap[_tv] || {}, _mutatorMap[_tv].get = function () {
    return _$$_REQUIRE(_dependencyMap[89]);
  }, _tvSelected = 'tv-selected', _mutatorMap[_tvSelected] = _mutatorMap[_tvSelected] || {}, _mutatorMap[_tvSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[90]);
  }, _tvBig = 'tv-big', _mutatorMap[_tvBig] = _mutatorMap[_tvBig] || {}, _mutatorMap[_tvBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[91]);
  }, _warmth = 'warmth', _mutatorMap[_warmth] = _mutatorMap[_warmth] || {}, _mutatorMap[_warmth].get = function () {
    return _$$_REQUIRE(_dependencyMap[92]);
  }, _warmthSelected = 'warmth-selected', _mutatorMap[_warmthSelected] = _mutatorMap[_warmthSelected] || {}, _mutatorMap[_warmthSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[93]);
  }, _custom = 'custom', _mutatorMap[_custom] = _mutatorMap[_custom] || {}, _mutatorMap[_custom].get = function () {
    return _$$_REQUIRE(_dependencyMap[94]);
  }, _customSelected = 'custom-selected', _mutatorMap[_customSelected] = _mutatorMap[_customSelected] || {}, _mutatorMap[_customSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[95]);
  }, _customBig = 'custom-big', _mutatorMap[_customBig] = _mutatorMap[_customBig] || {}, _mutatorMap[_customBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[96]);
  }, _water = 'water0', _mutatorMap[_water] = _mutatorMap[_water] || {}, _mutatorMap[_water].get = function () {
    return _$$_REQUIRE(_dependencyMap[97]);
  }, _water0Selected = 'water0-selected', _mutatorMap[_water0Selected] = _mutatorMap[_water0Selected] || {}, _mutatorMap[_water0Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[98]);
  }, _consumableFilter = 'consumable-filter', _mutatorMap[_consumableFilter] = _mutatorMap[_consumableFilter] || {}, _mutatorMap[_consumableFilter].get = function () {
    return _$$_REQUIRE(_dependencyMap[99]);
  }, _none = 'none', _mutatorMap[_none] = _mutatorMap[_none] || {}, _mutatorMap[_none].get = function () {
    return _$$_REQUIRE(_dependencyMap[100]);
  }, _noneSelected = 'none-selected', _mutatorMap[_noneSelected] = _mutatorMap[_noneSelected] || {}, _mutatorMap[_noneSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[101]);
  }, _level = 'level1', _mutatorMap[_level] = _mutatorMap[_level] || {}, _mutatorMap[_level].get = function () {
    return _$$_REQUIRE(_dependencyMap[102]);
  }, _level1Selected = 'level1-selected', _mutatorMap[_level1Selected] = _mutatorMap[_level1Selected] || {}, _mutatorMap[_level1Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[103]);
  }, _level1Orange = 'level1-orange', _mutatorMap[_level1Orange] = _mutatorMap[_level1Orange] || {}, _mutatorMap[_level1Orange].get = function () {
    return _$$_REQUIRE(_dependencyMap[104]);
  }, _level2 = 'level2', _mutatorMap[_level2] = _mutatorMap[_level2] || {}, _mutatorMap[_level2].get = function () {
    return _$$_REQUIRE(_dependencyMap[105]);
  }, _level2Selected = 'level2-selected', _mutatorMap[_level2Selected] = _mutatorMap[_level2Selected] || {}, _mutatorMap[_level2Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[106]);
  }, _level2Orange = 'level2-orange', _mutatorMap[_level2Orange] = _mutatorMap[_level2Orange] || {}, _mutatorMap[_level2Orange].get = function () {
    return _$$_REQUIRE(_dependencyMap[107]);
  }, _level3 = 'level3', _mutatorMap[_level3] = _mutatorMap[_level3] || {}, _mutatorMap[_level3].get = function () {
    return _$$_REQUIRE(_dependencyMap[108]);
  }, _level3Selected = 'level3-selected', _mutatorMap[_level3Selected] = _mutatorMap[_level3Selected] || {}, _mutatorMap[_level3Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[109]);
  }, _level3Orange = 'level3-orange', _mutatorMap[_level3Orange] = _mutatorMap[_level3Orange] || {}, _mutatorMap[_level3Orange].get = function () {
    return _$$_REQUIRE(_dependencyMap[110]);
  }, _level4 = 'level4', _mutatorMap[_level4] = _mutatorMap[_level4] || {}, _mutatorMap[_level4].get = function () {
    return _$$_REQUIRE(_dependencyMap[111]);
  }, _level4Selected = 'level4-selected', _mutatorMap[_level4Selected] = _mutatorMap[_level4Selected] || {}, _mutatorMap[_level4Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[112]);
  }, _level4Orange = 'level4-orange', _mutatorMap[_level4Orange] = _mutatorMap[_level4Orange] || {}, _mutatorMap[_level4Orange].get = function () {
    return _$$_REQUIRE(_dependencyMap[113]);
  }, _level5 = 'level5', _mutatorMap[_level5] = _mutatorMap[_level5] || {}, _mutatorMap[_level5].get = function () {
    return _$$_REQUIRE(_dependencyMap[114]);
  }, _level5Selected = 'level5-selected', _mutatorMap[_level5Selected] = _mutatorMap[_level5Selected] || {}, _mutatorMap[_level5Selected].get = function () {
    return _$$_REQUIRE(_dependencyMap[115]);
  }, _level5Orange = 'level5-orange', _mutatorMap[_level5Orange] = _mutatorMap[_level5Orange] || {}, _mutatorMap[_level5Orange].get = function () {
    return _$$_REQUIRE(_dependencyMap[116]);
  }, _dryer = 'dryer', _mutatorMap[_dryer] = _mutatorMap[_dryer] || {}, _mutatorMap[_dryer].get = function () {
    return _$$_REQUIRE(_dependencyMap[117]);
  }, _dryerSelected = 'dryer-selected', _mutatorMap[_dryerSelected] = _mutatorMap[_dryerSelected] || {}, _mutatorMap[_dryerSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[118]);
  }, _dryerOrange = 'dryer-orange', _mutatorMap[_dryerOrange] = _mutatorMap[_dryerOrange] || {}, _mutatorMap[_dryerOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[119]);
  }, _ventilation = 'ventilation', _mutatorMap[_ventilation] = _mutatorMap[_ventilation] || {}, _mutatorMap[_ventilation].get = function () {
    return _$$_REQUIRE(_dependencyMap[120]);
  }, _ventilationSelected = 'ventilation-selected', _mutatorMap[_ventilationSelected] = _mutatorMap[_ventilationSelected] || {}, _mutatorMap[_ventilationSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[121]);
  }, _ventilationOrange = 'ventilation-orange', _mutatorMap[_ventilationOrange] = _mutatorMap[_ventilationOrange] || {}, _mutatorMap[_ventilationOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[122]);
  }, _heatLow = 'heat-low', _mutatorMap[_heatLow] = _mutatorMap[_heatLow] || {}, _mutatorMap[_heatLow].get = function () {
    return _$$_REQUIRE(_dependencyMap[123]);
  }, _heatLowSelected = 'heat-low-selected', _mutatorMap[_heatLowSelected] = _mutatorMap[_heatLowSelected] || {}, _mutatorMap[_heatLowSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[124]);
  }, _heatLowOrange = 'heat-low-orange', _mutatorMap[_heatLowOrange] = _mutatorMap[_heatLowOrange] || {}, _mutatorMap[_heatLowOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[125]);
  }, _light = 'light', _mutatorMap[_light] = _mutatorMap[_light] || {}, _mutatorMap[_light].get = function () {
    return _$$_REQUIRE(_dependencyMap[126]);
  }, _lightSelected = 'light-selected', _mutatorMap[_lightSelected] = _mutatorMap[_lightSelected] || {}, _mutatorMap[_lightSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[127]);
  }, _lightBig = 'light-big', _mutatorMap[_lightBig] = _mutatorMap[_lightBig] || {}, _mutatorMap[_lightBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[128]);
  }, _lightOrange = 'light-orange', _mutatorMap[_lightOrange] = _mutatorMap[_lightOrange] || {}, _mutatorMap[_lightOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[129]);
  }, _ptcBathBlow = 'ptc-bath-blow', _mutatorMap[_ptcBathBlow] = _mutatorMap[_ptcBathBlow] || {}, _mutatorMap[_ptcBathBlow].get = function () {
    return _$$_REQUIRE(_dependencyMap[130]);
  }, _ptcBathCustom = 'ptc-bath-custom', _mutatorMap[_ptcBathCustom] = _mutatorMap[_ptcBathCustom] || {}, _mutatorMap[_ptcBathCustom].get = function () {
    return _$$_REQUIRE(_dependencyMap[131]);
  }, _ptcBathDryer = 'ptc-bath-dryer', _mutatorMap[_ptcBathDryer] = _mutatorMap[_ptcBathDryer] || {}, _mutatorMap[_ptcBathDryer].get = function () {
    return _$$_REQUIRE(_dependencyMap[132]);
  }, _ptcBathHeating = 'ptc-bath-heating', _mutatorMap[_ptcBathHeating] = _mutatorMap[_ptcBathHeating] || {}, _mutatorMap[_ptcBathHeating].get = function () {
    return _$$_REQUIRE(_dependencyMap[133]);
  }, _ptcBathMultiple = 'ptc-bath-multiple', _mutatorMap[_ptcBathMultiple] = _mutatorMap[_ptcBathMultiple] || {}, _mutatorMap[_ptcBathMultiple].get = function () {
    return _$$_REQUIRE(_dependencyMap[134]);
  }, _ptcBathVentilation = 'ptc-bath-ventilation', _mutatorMap[_ptcBathVentilation] = _mutatorMap[_ptcBathVentilation] || {}, _mutatorMap[_ptcBathVentilation].get = function () {
    return _$$_REQUIRE(_dependencyMap[135]);
  }, _uv = 'uv', _mutatorMap[_uv] = _mutatorMap[_uv] || {}, _mutatorMap[_uv].get = function () {
    return _$$_REQUIRE(_dependencyMap[136]);
  }, _nightLight = 'night-light', _mutatorMap[_nightLight] = _mutatorMap[_nightLight] || {}, _mutatorMap[_nightLight].get = function () {
    return _$$_REQUIRE(_dependencyMap[137]);
  }, _nightLightSelected = 'night-light-selected', _mutatorMap[_nightLightSelected] = _mutatorMap[_nightLightSelected] || {}, _mutatorMap[_nightLightSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[138]);
  }, _countdownOrange = 'countdown-orange', _mutatorMap[_countdownOrange] = _mutatorMap[_countdownOrange] || {}, _mutatorMap[_countdownOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[139]);
  }, _timerOrange = 'timer-orange', _mutatorMap[_timerOrange] = _mutatorMap[_timerOrange] || {}, _mutatorMap[_timerOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[140]);
  }, _smileFace = 'smile-face', _mutatorMap[_smileFace] = _mutatorMap[_smileFace] || {}, _mutatorMap[_smileFace].get = function () {
    return _$$_REQUIRE(_dependencyMap[141]);
  }, _smileFaceSelected = 'smile-face-selected', _mutatorMap[_smileFaceSelected] = _mutatorMap[_smileFaceSelected] || {}, _mutatorMap[_smileFaceSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[142]);
  }, _smileFaceBig = 'smile-face-big', _mutatorMap[_smileFaceBig] = _mutatorMap[_smileFaceBig] || {}, _mutatorMap[_smileFaceBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[143]);
  }, _friend = 'friend', _mutatorMap[_friend] = _mutatorMap[_friend] || {}, _mutatorMap[_friend].get = function () {
    return _$$_REQUIRE(_dependencyMap[144]);
  }, _friendSelected = 'friend-selected', _mutatorMap[_friendSelected] = _mutatorMap[_friendSelected] || {}, _mutatorMap[_friendSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[145]);
  }, _friendBig = 'friend-big', _mutatorMap[_friendBig] = _mutatorMap[_friendBig] || {}, _mutatorMap[_friendBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[146]);
  }, _entertain = 'entertain', _mutatorMap[_entertain] = _mutatorMap[_entertain] || {}, _mutatorMap[_entertain].get = function () {
    return _$$_REQUIRE(_dependencyMap[147]);
  }, _entertainSelected = 'entertain-selected', _mutatorMap[_entertainSelected] = _mutatorMap[_entertainSelected] || {}, _mutatorMap[_entertainSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[148]);
  }, _entertainBig = 'entertain-big', _mutatorMap[_entertainBig] = _mutatorMap[_entertainBig] || {}, _mutatorMap[_entertainBig].get = function () {
    return _$$_REQUIRE(_dependencyMap[149]);
  }, _color = 'color', _mutatorMap[_color] = _mutatorMap[_color] || {}, _mutatorMap[_color].get = function () {
    return _$$_REQUIRE(_dependencyMap[150]);
  }, _colorTemperature = 'color-temperature', _mutatorMap[_colorTemperature] = _mutatorMap[_colorTemperature] || {}, _mutatorMap[_colorTemperature].get = function () {
    return _$$_REQUIRE(_dependencyMap[151]);
  }, _switchOrange = 'switch-orange', _mutatorMap[_switchOrange] = _mutatorMap[_switchOrange] || {}, _mutatorMap[_switchOrange].get = function () {
    return _$$_REQUIRE(_dependencyMap[152]);
  }, _airCooler = 'air-cooler', _mutatorMap[_airCooler] = _mutatorMap[_airCooler] || {}, _mutatorMap[_airCooler].get = function () {
    return _$$_REQUIRE(_dependencyMap[153]);
  }, _airCoolerSelected = 'air-cooler-selected', _mutatorMap[_airCoolerSelected] = _mutatorMap[_airCoolerSelected] || {}, _mutatorMap[_airCoolerSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[154]);
  }, _screen = 'screen', _mutatorMap[_screen] = _mutatorMap[_screen] || {}, _mutatorMap[_screen].get = function () {
    return _$$_REQUIRE(_dependencyMap[155]);
  }, _screenSelected = 'screen-selected', _mutatorMap[_screenSelected] = _mutatorMap[_screenSelected] || {}, _mutatorMap[_screenSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[156]);
  }, _anion = 'anion', _mutatorMap[_anion] = _mutatorMap[_anion] || {}, _mutatorMap[_anion].get = function () {
    return _$$_REQUIRE(_dependencyMap[157]);
  }, _anionSelected = 'anion-selected', _mutatorMap[_anionSelected] = _mutatorMap[_anionSelected] || {}, _mutatorMap[_anionSelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[158]);
  }, _baby = 'baby', _mutatorMap[_baby] = _mutatorMap[_baby] || {}, _mutatorMap[_baby].get = function () {
    return _$$_REQUIRE(_dependencyMap[159]);
  }, _babySelected = 'baby-selected', _mutatorMap[_babySelected] = _mutatorMap[_babySelected] || {}, _mutatorMap[_babySelected].get = function () {
    return _$$_REQUIRE(_dependencyMap[160]);
  }, (0, _defineEnumerableProperties2.default)(_Icons, _mutatorMap), _Icons);

  function register(name, localSource) {
    if (name && localSource) {
      Icons[name] = localSource;
    }
  }

  function getIcon(name) {
    if (!name) {
      return null;
    }

    return Icons[name] || {
      uri: name
    };
  }
},10013,[14305,10016,10019,10022,10025,10028,10031,10034,10037,10040,10043,10046,10049,10052,10055,10058,10061,10064,10067,10070,10073,10076,10079,10082,10085,10088,10091,10094,10097,10100,10103,10106,10109,10112,10115,10118,10121,10124,10127,10130,10133,10136,10139,10142,10145,10148,10151,10154,10157,10160,10163,10166,10169,10172,10175,10178,10181,10184,10187,10190,10193,10196,10199,10202,10205,10208,10211,10214,10217,10220,10223,10226,10229,10232,10235,10238,10241,10244,10247,10250,10253,10256,10259,10262,10265,10268,10271,10274,10277,10280,10283,10286,10289,10292,10295,10298,10301,10304,10307,10310,10313,10316,10319,10322,10325,10328,10331,10334,10337,10340,10343,10346,10349,10352,10355,10358,10361,10364,10367,10370,10373,10376,10379,10382,10385,10388,10391,10394,10397,10400,10403,10406,10409,10412,10415,10418,10421,10424,10427,10430,10433,10436,10439,10442,10445,10448,10451,10454,10457,10460,10463,10466,10469,10472,10475,10478,10481,10484,10487,10490,10493]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);

      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }

    return obj;
  }

  module.exports = _defineEnumerableProperties;
},10016,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "040ceb5f0feefb5d9fb9bf2881e5feab",
    "name": "auto",
    "type": "png"
  });
},10019,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "8623fa70f282cfc1b12c3a006686b029",
    "name": "auto-selected",
    "type": "png"
  });
},10022,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "daf8d6881002dcb2c8e7195dfe5f51fd",
    "name": "auto-orange",
    "type": "png"
  });
},10025,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "a3f77fe687f60d9fd25863af5f7aa2cc",
    "name": "moon",
    "type": "png"
  });
},10028,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "be78d0e80df1d8c9e515d339d2ab208c",
    "name": "moon-selected",
    "type": "png"
  });
},10031,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "1c6007baa1239e3f2575c9d4b46fbf42",
    "name": "moon-orange",
    "type": "png"
  });
},10034,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "156c71c202a6c1ec9a90a5d44ffb0ca6",
    "name": "moon-big",
    "type": "png"
  });
},10037,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "48e5872e3d02fae656191f68f801ddbd",
    "name": "heart",
    "type": "png"
  });
},10040,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "aac60c8d2edf45981fc8aa267eea89c6",
    "name": "heart-selected",
    "type": "png"
  });
},10043,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "cb803de500f344495854dc7a0c8d9a30",
    "name": "heart-orange",
    "type": "png"
  });
},10046,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "6bdb97cbd7486ce09e78c169930aa688",
    "name": "mode1",
    "type": "png"
  });
},10049,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "e9e3cdfb4d57d0337cb0d74fd74b4eec",
    "name": "mode1-selected",
    "type": "png"
  });
},10052,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "5117ed050332cbce59c1aa03959ce2ff",
    "name": "mode2",
    "type": "png"
  });
},10055,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "5bd39a196917b7b8191b3beb790470ff",
    "name": "mode2-selected",
    "type": "png"
  });
},10058,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "b39a36e459d944ccaafcc7d6afca9deb",
    "name": "mode3",
    "type": "png"
  });
},10061,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "6ea2b5659dd0a08176b949f9b23641b6",
    "name": "mode3-selected",
    "type": "png"
  });
},10064,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "8264ee82c6b9707106e8fc8233582359",
    "name": "mode4",
    "type": "png"
  });
},10067,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "3796f40a5fed4513b9432bf8de90309c",
    "name": "mode4-selected",
    "type": "png"
  });
},10070,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "74e0dfffa2f55999940212490b4eae0e",
    "name": "filter",
    "type": "png"
  });
},10073,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 40,
    "height": 40,
    "scales": [2, 3],
    "hash": "7485ddbdd50abde6691b11ee3340769f",
    "name": "status-warn",
    "type": "png"
  });
},10076,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "a36684a43dc6e0ca4e37290f7fff59f5",
    "name": "switch",
    "type": "png"
  });
},10079,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "1abb58207b3fd4f5dd37af189608bcaa",
    "name": "lighting",
    "type": "png"
  });
},10082,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "167f1a8ec30e54121d81cee2efda29fe",
    "name": "lighting-selected",
    "type": "png"
  });
},10085,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "02a8c92c53be295578cc8f785b3415c6",
    "name": "glittering",
    "type": "png"
  });
},10088,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "05d59191c917b7a580699dfce7f90c74",
    "name": "glittering-selected",
    "type": "png"
  });
},10091,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "fb52612bf7d4e142bfd0ebbebadf4d6e",
    "name": "book",
    "type": "png"
  });
},10094,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "079f0f0d56fbe02ec9207b08dc1b56e3",
    "name": "book-selected",
    "type": "png"
  });
},10097,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "90336f92f2cfd4b11083fdf32478c91f",
    "name": "book-big",
    "type": "png"
  });
},10100,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "272779a358740667442c2518608c3251",
    "name": "computer",
    "type": "png"
  });
},10103,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "90e4027463680cf584541ff7516c56fa",
    "name": "computer-selected",
    "type": "png"
  });
},10106,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "25f318e91c726b32bb7ca8c756919619",
    "name": "computer-big",
    "type": "png"
  });
},10109,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "e9ecd9c380e6520fbe0a130cb724cb7e",
    "name": "rainbow",
    "type": "png"
  });
},10112,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "e21a920f30256fb659136e3790aff3ab",
    "name": "rainbow-selected",
    "type": "png"
  });
},10115,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "3af5d81e3a0278399a8a42d8ca756706",
    "name": "rainbow-big",
    "type": "png"
  });
},10118,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var start = Date.now();

  _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  _$$_REQUIRE(_dependencyMap[2]);

  _$$_REQUIRE(_dependencyMap[3]);

  _$$_REQUIRE(_dependencyMap[4]);

  _$$_REQUIRE(_dependencyMap[5]);

  _$$_REQUIRE(_dependencyMap[6]);

  _$$_REQUIRE(_dependencyMap[7]);

  _$$_REQUIRE(_dependencyMap[8]);

  _$$_REQUIRE(_dependencyMap[9]);

  _$$_REQUIRE(_dependencyMap[10]);

  var GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[11]);

  GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
  GlobalPerformanceLogger.markPoint('initializeCore_end');
},10120,[14449,14452,14455,14470,14479,14485,14500,14524,14533,14536,14560,14548]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "b6b3f06195ed8965c7213cee8e9aa8e1",
    "name": "sun",
    "type": "png"
  });
},10121,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "ffa303026bd88a608829482b591eb500",
    "name": "sun-selected",
    "type": "png"
  });
},10124,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "fd1e945a9752f76fbd04e841460c47b4",
    "name": "sun-orange",
    "type": "png"
  });
},10127,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "c6e73fbff4021d0d2d68edeff60535b8",
    "name": "sun-big",
    "type": "png"
  });
},10130,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 20,
    "height": 20,
    "scales": [2, 3],
    "hash": "955ce080c72b68ccf1aba33a5ec080c0",
    "name": "close",
    "type": "png"
  });
},10133,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "3da8884ad0be79e2b3bda958c43f6a73",
    "name": "countdown",
    "type": "png"
  });
},10136,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "025195b973bbfcc0e8f45260a891c6c9",
    "name": "usb",
    "type": "png"
  });
},10139,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "cf85db62cd4734e6e20d7526ec21cdaf",
    "name": "plug-cn",
    "type": "png"
  });
},10142,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "fe6501632ff30a6447506d9f63d4d348",
    "name": "plug-us",
    "type": "png"
  });
},10145,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "9827ddd5ab12568129b48fc35cd525f7",
    "name": "plug-saf",
    "type": "png"
  });
},10148,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "83ea85809785a35ab2c3f6cef0786560",
    "name": "plug-en",
    "type": "png"
  });
},10151,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "2b858bc18859a3fdf29ab978eae237e2",
    "name": "plug-eu",
    "type": "png"
  });
},10154,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 88,
    "height": 76,
    "scales": [2, 3],
    "hash": "0a4cd5345c11dbb24d7106e23e8cbffe",
    "name": "disconnect",
    "type": "png"
  });
},10157,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2],
    "hash": "d19df0a4a61929b763d719e9cac01e98",
    "name": "switch-on",
    "type": "png"
  });
},10160,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "8e960826f01241d7ea3dee7380a13359",
    "name": "switch-off",
    "type": "png"
  });
},10163,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "727ac7d92a6ffa09416fbec94d1685b7",
    "name": "natural-wind",
    "type": "png"
  });
},10166,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "953523ac4b6ac87af3e2dc7edddd10cb",
    "name": "natural-wind-selected",
    "type": "png"
  });
},10169,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "5669904a540f58db3f4d168223d757e5",
    "name": "straight-wind",
    "type": "png"
  });
},10172,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [3],
    "hash": "81106050330e6940dd7e143d1dcddb28",
    "name": "straight-wind-selected",
    "type": "png"
  });
},10175,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "7fa903246757f7d34347a52f1df6e4c7",
    "name": "straight-wind-orange",
    "type": "png"
  });
},10178,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "9b7d815d4d432fc82f83d00d19e022c0",
    "name": "timer",
    "type": "png"
  });
},10181,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "dd8daeaab220041db6542b91a9b89d80",
    "name": "horizontal-swing",
    "type": "png"
  });
},10184,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "c81bd8c1d092c34333d6c35c3ccb54ef",
    "name": "horizontal-swing-selected",
    "type": "png"
  });
},10187,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "0a1e1857d7a74cbfb2ddaff39527abef",
    "name": "horizontal-swing-orange",
    "type": "png"
  });
},10190,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "a833e4e3f4e6e02f1c76d224252df925",
    "name": "vertical-swing",
    "type": "png"
  });
},10193,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "ee322c5dd075a851f40a6c668e07f041",
    "name": "vertical-swing-selected",
    "type": "png"
  });
},10196,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "24d0a86f8df4c06c612a209a8f2cdada",
    "name": "vertical-swing-orange",
    "type": "png"
  });
},10199,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "b9ee3b1afe6191df548fb0a58097ba3b",
    "name": "pause",
    "type": "png"
  });
},10202,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "fe952b87a3385eff0ff944e93239cda4",
    "name": "pause-selected",
    "type": "png"
  });
},10205,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "04f2a087a0174dc659f1acc44ba51053",
    "name": "up",
    "type": "png"
  });
},10208,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "96141109e602cdcf6447f37f085867ea",
    "name": "up-selected",
    "type": "png"
  });
},10211,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "3bad786d96d944b94b853a89fea90b04",
    "name": "down",
    "type": "png"
  });
},10214,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "63519df140e091c66e79c6cf2bea9d44",
    "name": "down-selected",
    "type": "png"
  });
},10217,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "c434319cf8879d4a7836eef83413075a",
    "name": "alarm",
    "type": "png"
  });
},10220,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "9d78284b34873036c2fa6195a11ca4f0",
    "name": "dry-with-wind",
    "type": "png"
  });
},10223,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "cd79b774b88356c079e9949e6d7bd80b",
    "name": "dry-with-wind-selected",
    "type": "png"
  });
},10226,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "a6d89e1348e8438ebb68ceed19d1b357",
    "name": "dry-with-heat",
    "type": "png"
  });
},10229,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "6e966fc70fe92f9858ad3c910f60e900",
    "name": "dry-with-heat-selected",
    "type": "png"
  });
},10232,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "f5d158b2a6af7ca8581ed8174044365a",
    "name": "off",
    "type": "png"
  });
},10235,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "58f45c88986c92e879405d1874721dfd",
    "name": "off-selected",
    "type": "png"
  });
},10238,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "a6d89e1348e8438ebb68ceed19d1b357",
    "name": "quick-hot",
    "type": "png"
  });
},10241,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "6e966fc70fe92f9858ad3c910f60e900",
    "name": "quick-hot-selected",
    "type": "png"
  });
},10244,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "cd0dd5bbe5f3c88df50524cf092b7389",
    "name": "curtain-open",
    "type": "png"
  });
},10247,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "07365226c58c9ee28d2ed3a13c8cfc1c",
    "name": "curtain-open-selected",
    "type": "png"
  });
},10250,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "6494c2fd0b2801d3594bbecd1d885352",
    "name": "curtain-close",
    "type": "png"
  });
},10253,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "aa8b1c97ae7664cd6b4ad9aa113f6186",
    "name": "curtain-close-selected",
    "type": "png"
  });
},10256,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 104,
    "height": 102,
    "scales": [2, 3],
    "hash": "30f82b7b5fc91bd64f1ca5ccd82f26ab",
    "name": "curtain-style-both",
    "type": "png"
  });
},10259,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 104,
    "height": 102,
    "scales": [2, 3],
    "hash": "ae8aed56a05c032fe426e1f72852386b",
    "name": "curtain-style-left",
    "type": "png"
  });
},10262,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 104,
    "height": 102,
    "scales": [2, 3],
    "hash": "a28c3f7fad0687fdbbeb86597d83be61",
    "name": "curtain-style-right",
    "type": "png"
  });
},10265,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "452190e2feca6c30dc942d3a74c97096",
    "name": "basic-wind",
    "type": "png"
  });
},10268,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "2bf18cc9bdf31e19ef658aa900ecd271",
    "name": "basic-wind-selected",
    "type": "png"
  });
},10271,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "fede858652e98707d134ae2818341004",
    "name": "energy-saving-wind",
    "type": "png"
  });
},10274,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "19a3c14865d3229dd6c0ff58d09eab5f",
    "name": "energy-saving-wind-selected",
    "type": "png"
  });
},10277,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "afd05696e519cde2cf3225b16eed7704",
    "name": "tv",
    "type": "png"
  });
},10280,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "536810dbda8e280cadab21d448301ee8",
    "name": "tv-selected",
    "type": "png"
  });
},10283,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "9acf8090ebada7914781cb6cdbd33132",
    "name": "tv-big",
    "type": "png"
  });
},10286,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "91fb0f34f008ddab2c113cd290a74166",
    "name": "warmth",
    "type": "png"
  });
},10289,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "90258e0587864edb939c17962a809b53",
    "name": "warmth-selected",
    "type": "png"
  });
},10292,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "706d939d669d3783963ea0ae5605ad25",
    "name": "custom",
    "type": "png"
  });
},10295,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "49ef94af9c0848b2b27f63dd6917309a",
    "name": "custom-selected",
    "type": "png"
  });
},10298,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "5d4296526bc9a04e7cda175455fc5a88",
    "name": "custom-big",
    "type": "png"
  });
},10301,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "5d82c24f2b617151773629a990910bcc",
    "name": "water0",
    "type": "png"
  });
},10304,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "2cf88aad42ca380993b4ce8522b65046",
    "name": "water0-selected",
    "type": "png"
  });
},10307,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 684,
    "height": 1056,
    "scales": [1],
    "hash": "d5a6269455d49f8303f6c69dad0f3863",
    "name": "consumable-filter",
    "type": "png"
  });
},10310,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "dda18fe705893b06cfba1425c70cc1a7",
    "name": "none",
    "type": "png"
  });
},10313,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "4a0bfb649f01bb351bbd9e27af6eecca",
    "name": "none-selected",
    "type": "png"
  });
},10316,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "d26eb4733283c2946d173663ad8a3120",
    "name": "level1",
    "type": "png"
  });
},10319,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "ca3b411c4638f99d0dfcdb5333bd9c2c",
    "name": "level1-selected",
    "type": "png"
  });
},10322,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "5c81bb572f1bdbf2f7ae01c5ece126c1",
    "name": "level1-orange",
    "type": "png"
  });
},10325,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "1b1b1793e2d2575e6594b8bd105d8a71",
    "name": "level2",
    "type": "png"
  });
},10328,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "c4decde385d892886fd513016a105607",
    "name": "level2-selected",
    "type": "png"
  });
},10331,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "dc422dcb5cd650ecdd2a435aae458b40",
    "name": "level2-orange",
    "type": "png"
  });
},10334,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "6fdfc7f4f44272f5a1b8e0653e398ace",
    "name": "level3",
    "type": "png"
  });
},10337,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "14ac4261e913faf3b65102f8d4fa86f0",
    "name": "level3-selected",
    "type": "png"
  });
},10340,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "bc3ff23d1a09bd3fa4c69ca6c32ce10b",
    "name": "level3-orange",
    "type": "png"
  });
},10343,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "ed96d4591eb1e1f373705f2c96d75a5d",
    "name": "level4",
    "type": "png"
  });
},10346,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "4f3c6e8721ff52131040d18f7a807012",
    "name": "level4-selected",
    "type": "png"
  });
},10349,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "d1254cb483ade364c0c9cfd659e1b74b",
    "name": "level4-orange",
    "type": "png"
  });
},10352,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "629ef5050a54d044b69718838d3c5a48",
    "name": "level5",
    "type": "png"
  });
},10355,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1, 2, 3],
    "hash": "1717a425a7a0a51ff78c3cf4073bb187",
    "name": "level5-selected",
    "type": "png"
  });
},10358,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "eaf39e74601bcda0fd6c40fd1c33ff4c",
    "name": "level5-orange",
    "type": "png"
  });
},10361,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "5195e5b3b8516067a2a9789d3489649a",
    "name": "dryer",
    "type": "png"
  });
},10364,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "5839d6c8f814df15b7b3f9a6a4cb94b7",
    "name": "dryer-selected",
    "type": "png"
  });
},10367,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "ff425864b2248a29fca009127e787118",
    "name": "dryer-orange",
    "type": "png"
  });
},10370,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "22fa00e36befb57b4b9a7bbdd57d0bf4",
    "name": "ventilation",
    "type": "png"
  });
},10373,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "9ec15f1de322986c2f53c0705956802b",
    "name": "ventilation-selected",
    "type": "png"
  });
},10376,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "60bdb46ac0687283fc9754d39ce06d4d",
    "name": "ventilation-orange",
    "type": "png"
  });
},10379,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "f8143f7237e8c8668a130ba02fd49d52",
    "name": "heat-low",
    "type": "png"
  });
},10382,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "b4ce1ba866380f15ba521976fd195575",
    "name": "heat-low-selected",
    "type": "png"
  });
},10385,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "c5f10b38c636304e682a9852c8d581ad",
    "name": "heat-low-orange",
    "type": "png"
  });
},10388,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "738dbe8c0ff82a0fd0ec38847e156455",
    "name": "light",
    "type": "png"
  });
},10391,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "0554209873336fcb756df6a34c1c3e67",
    "name": "light-selected",
    "type": "png"
  });
},10394,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "11e0ee730daa911f1000f4ad4e282055",
    "name": "light-big",
    "type": "png"
  });
},10397,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "d9a1994332f6ef2912a910999e8e3ce1",
    "name": "light-orange",
    "type": "png"
  });
},10400,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 540,
    "height": 540,
    "scales": [1],
    "hash": "d127c3dccb69984315f6750d4cdbc159",
    "name": "ptc-bath-blow",
    "type": "png"
  });
},10403,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 540,
    "height": 540,
    "scales": [1],
    "hash": "b983a6eb31616e6ff6ac60c19072021b",
    "name": "ptc-bath-custom",
    "type": "png"
  });
},10406,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 540,
    "height": 540,
    "scales": [1],
    "hash": "d0ffa3e0574255ee0c4644d07a2a54e3",
    "name": "ptc-bath-dryer",
    "type": "png"
  });
},10409,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 540,
    "height": 540,
    "scales": [1],
    "hash": "f14fa229e45beed5db939b994996dc1f",
    "name": "ptc-bath-heating",
    "type": "png"
  });
},10412,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 540,
    "height": 540,
    "scales": [1],
    "hash": "28d91abb53ac670e59cc673ccfc34314",
    "name": "ptc-bath-multiple",
    "type": "png"
  });
},10415,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 540,
    "height": 540,
    "scales": [1],
    "hash": "bfb17315699ce3ad0a6c2b3a502275ac",
    "name": "ptc-bath-ventilation",
    "type": "png"
  });
},10418,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "3632afba67f69465ac02d2982f784906",
    "name": "uv",
    "type": "png"
  });
},10421,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "52cb0412078d0815ac8bfaadaa802fc5",
    "name": "night-light",
    "type": "png"
  });
},10424,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "15757da166f2008393a190de177a1652",
    "name": "night-light-selected",
    "type": "png"
  });
},10427,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "07e5a1e6a8c87e0afaee173bd9ccc2db",
    "name": "countdown-orange",
    "type": "png"
  });
},10430,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "fe46327f2eb52980485c6b83ec745771",
    "name": "timer-orange",
    "type": "png"
  });
},10433,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "38bf559ee60c4e6ebf87a30ce1464550",
    "name": "smile-face",
    "type": "png"
  });
},10436,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "6c854d5ba2329d05f32b5db5d2671785",
    "name": "smile-face-selected",
    "type": "png"
  });
},10439,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "1a0006575fc85dbfeac4d6274346155e",
    "name": "smile-face-big",
    "type": "png"
  });
},10442,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "f43d6b19dab8db7060af41cdbf5a1194",
    "name": "friend",
    "type": "png"
  });
},10445,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "bed4d0023417357d05c61424cc3e9928",
    "name": "friend-selected",
    "type": "png"
  });
},10448,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "a14420fb99f0148ee4e41643a0f9e4cd",
    "name": "friend-big",
    "type": "png"
  });
},10451,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [1],
    "hash": "a2fb286d4af26ea901136bf1a61d312d",
    "name": "entertain",
    "type": "png"
  });
},10454,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [1],
    "hash": "10f781d6df3914287cf0126bc0ae7bb8",
    "name": "entertain-selected",
    "type": "png"
  });
},10457,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 288,
    "height": 288,
    "scales": [1],
    "hash": "c45c5fffef670566130e4865991cd8b5",
    "name": "entertain-big",
    "type": "png"
  });
},10460,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 126,
    "height": 126,
    "scales": [1],
    "hash": "37cf2fb5593d03812a1ab139f778578d",
    "name": "color",
    "type": "png"
  });
},10463,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 126,
    "height": 126,
    "scales": [1],
    "hash": "5717fdfd44f51e5a1b70d3ed64bf3a0c",
    "name": "color-temperature",
    "type": "png"
  });
},10466,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 72,
    "height": 72,
    "scales": [1],
    "hash": "64503180f07121d6d288de009eaadeb8",
    "name": "switch-orange",
    "type": "png"
  });
},10469,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "b5bdd5f2d794df05bf9928654756b5f7",
    "name": "air-cooler",
    "type": "png"
  });
},10472,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "92de6c7e7ba5858884bc13375406ce04",
    "name": "air-cooler-selected",
    "type": "png"
  });
},10475,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "fc622c1f0328f47fdcb52eb458ff0c9e",
    "name": "screen",
    "type": "png"
  });
},10478,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "6b838a9ca0afad451e4cbdcec3d7f4b2",
    "name": "screen-selected",
    "type": "png"
  });
},10481,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "5a46ef8a7f0dd36e824c4bbe60a1c146",
    "name": "anion",
    "type": "png"
  });
},10484,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "7d154b7483811d3b43837c6fa81582bc",
    "name": "anion-selected",
    "type": "png"
  });
},10487,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "927d502332b073a1f3aabd9ccced4fdb",
    "name": "baby",
    "type": "png"
  });
},10490,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 24,
    "height": 24,
    "scales": [2, 3],
    "hash": "17437ebdaac5a803afc5036ef9adf8b5",
    "name": "baby-selected",
    "type": "png"
  });
},10493,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _miot = _$$_REQUIRE(_dependencyMap[2]);

  var _resources = _$$_REQUIRE(_dependencyMap[3]);

  var lang = _miot.Host.locale.language;
  var i18ns = {
    get zh() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },

    get en() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    }

  };

  var _default = _miot.Resources.createI18n((0, _defineProperty2.default)({}, lang, i18ns[lang] || i18ns.zh || {}), lang).strings;

  exports.default = _default;
},10496,[14305,14317,10074,10077,10499,10502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    connectFail: '连接失败',
    reconnect: '重新连接',
    resolvePlan: '解决方案',
    notConnected: '未连接',
    connecting: '连接中...',
    retry: '重试',
    errorNetworkAbnormal: '网络异常，请检查网络连接',
    errorDeviceOperationTimeOut: '设备响应超时'
  };
  exports.default = _default;
},10499,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    connectFail: 'Couldn\'t connect',
    reconnect: 'Reconnect',
    resolvePlan: 'Solution',
    notConnected: 'Not connected',
    connecting: 'Connecting…',
    retry: 'Retry',
    errorNetworkAbnormal: 'The network is abnormal, please check the network connection',
    errorDeviceOperationTimeOut: 'Device response timed out'
  };
  exports.default = _default;
},10502,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _crossViewData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _fns = _$$_REQUIRE(_dependencyMap[12]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[13]);

  var _renderFromConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _instanceManager = _$$_REQUIRE(_dependencyMap[15]);

  var _protocolManager = _$$_REQUIRE(_dependencyMap[16]);

  var _handlers = _$$_REQUIRE(_dependencyMap[17]);

  var _consts = _$$_REQUIRE(_dependencyMap[18]);

  var App = function (_PureComponent) {
    (0, _inherits2.default)(App, _PureComponent);

    function App(props) {
      var _this;

      (0, _classCallCheck2.default)(this, App);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(App).call(this, props));

      _this.initProtocol = function (fn) {
        if (typeof fn !== 'function') {
          fn = _fns.NOOP;
        }

        if (!_miot.Device.isOwner) {
          return;
        }

        _miot.Host.storage.get(_consts.CONSTPROTOCOLCACHEKEY).then(function (cached) {
          if (cached) {
            fn();
            return;
          }

          (0, _protocolManager.getProtocol)().then(function (protocol) {
            if (!protocol || !protocol.privacyURL) {
              fn();
              return;
            }

            _miot.Host.ui.alertLegalInformationAuthorization(protocol).then(function (agreed) {
              if (agreed) {
                _miot.Host.storage.set(_consts.CONSTPROTOCOLCACHEKEY, true);

                fn();
              }
            }).catch(_fns.NOOP);
          }).catch(_fns.NOOP);
        }).catch(_fns.NOOP);
      };

      _this.setUpgradeDot = function (needUpgrade) {
        var lastNavigationState = (0, _PageWithNormalNavigator.getNavigationState)();

        if (!lastNavigationState || !lastNavigationState.right || !lastNavigationState.right[0]) {
          return;
        }

        var newNavigationState = (0, _objectSpread2.default)({}, lastNavigationState, {
          right: [(0, _objectSpread2.default)({}, lastNavigationState.right[0], {
            showDot: !!needUpgrade
          })]
        });

        _reactNative.DeviceEventEmitter.emit(_this.navigationEventKey, newNavigationState);
      };

      var config = _crossViewData.default.get(_consts.CONSTPAGECONFIG);

      var configData = config['App'];
      var firstPage = config.firstPage;
      var firstPageSpec = config.firstPageSpec;
      (0, _instanceManager.readAndWatchProps)(configData);
      _this.navigationEventKey = (0, _PageWithNormalNavigator.getNavigationEventKey)();
      _this.content = (0, _renderFromConfig.default)(configData);

      _this.tryGoFirstPage(firstPage, firstPageSpec);

      return _this;
    }

    (0, _createClass2.default)(App, [{
      key: "tryGoFirstPage",
      value: function tryGoFirstPage(firstPage, firstPageSpec) {
        var goVirtualPage = (0, _handlers.getHandler)('goVirtualPage');
        this.firstPageListener = (0, _instanceManager.listen)(firstPageSpec, function (v) {
          if (!v || v.value === null) {
            goVirtualPage({
              virtualPage: firstPage
            });
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.CONSTAPPSHOWFROMRN && this.CONSTAPPSHOWFROMRN.remove();
        this.CONSTAPPSHOWFROMRN = this.props.navigation.addListener('didFocus', function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPSHOWFROMRN);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPSHOW);

          _this2.setUpgradeDot();
        });
        this.CONSTAPPHIDEFROMRN && this.CONSTAPPHIDEFROMRN.remove();
        this.CONSTAPPHIDEFROMRN = this.props.navigation.addListener('willBlur', function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPHIDEFROMRN);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPHIDE);
        });
        this.CONSTAPPSHOWFROMNATIVE && this.CONSTAPPSHOWFROMNATIVE.remove();
        this.CONSTAPPSHOWFROMNATIVE = _miot.PackageEvent.packageViewWillAppear.addListener(function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPSHOWFROMNATIVE);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPSHOW);

          _this2.setUpgradeDot();
        });
        this.CONSTAPPHIDEFROMNATIVE && this.CONSTAPPHIDEFROMNATIVE.remove();
        this.CONSTAPPHIDEFROMNATIVE = _miot.PackageEvent.packageWillPause.addListener(function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPHIDEFROMNATIVE);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTAPPHIDE);
        });
        this.CONSTFIRMWARECHANGE && this.CONSTFIRMWARECHANGE.remove();
        this.CONSTFIRMWARECHANGE = _reactNative.DeviceEventEmitter.addListener(_consts.CONSTFIRMWARECHANGE, function (params) {
          _this2.setUpgradeDot(params.needUpgrade);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.CONSTAPPSHOWFROMRN && this.CONSTAPPSHOWFROMRN.remove();
        this.CONSTAPPHIDEFROMRN && this.CONSTAPPHIDEFROMRN.remove();
        this.CONSTAPPSHOWFROMNATIVE && this.CONSTAPPSHOWFROMNATIVE.remove();
        this.CONSTAPPHIDEFROMNATIVE && this.CONSTAPPHIDEFROMNATIVE.remove();
        this.CONSTFIRMWARECHANGE && this.CONSTFIRMWARECHANGE.remove();
        this.firstPageListener && this.firstPageListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var content = this.content;
        return _react.default.createElement(_react.Fragment, null, content);
      }
    }]);
    return App;
  }(_react.PureComponent);

  exports.default = App;
},10505,[14308,14305,14314,14320,14323,14371,14377,14386,10297,10033,10074,10842,10779,10821,10508,10007,10685,10520,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getItems;

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _components = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _connectSpec = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var IsOwner = _miot.Device.isOwner;

  function getItems(items) {
    if (!items || !items.length) {
      return null;
    }

    return items.map(function (item, index) {
      if (!item || item.ownerOnly && !IsOwner) {
        return null;
      }

      var componentName = item['componentName'];
      var Item = _components.default[componentName];

      if (!Item) {
        return null;
      }

      var SpecItem = (0, _connectSpec.default)(Item, item);
      return _react.default.createElement(SpecItem, {
        key: componentName + "." + index,
        itemProps: item
      }, item.items ? getItems(item.items) : null);
    }).filter(function (item) {
      return !!item;
    });
  }
},10508,[14305,14308,10297,10033,10074,10511,10682]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.register = register;
  exports.default = undefined;

  var _PageWithNormalNavigator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ContainerWithGap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _ContainerWithFlex = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _BigNumber = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _CardButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _CardLink = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _CardTip = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _SelectorWithButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _SliderWithHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _LightControl = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _WallSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Swiper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _SwiperIndicator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _DeviceWithCountdownInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _CardSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _ListItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _ListItemWithTimerSetting = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _SmallNumbers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _Fan = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _ListItemWithSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _ListItemWithSlider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _Airer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _DoubleSelectors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _HeaterHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _Gap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var _Curtain = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[27]));

  var _CurtainStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));

  var _PrimeButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[29]));

  var _QAList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[30]));

  var _MultiButtons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[31]));

  var _SetLightBackground = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[32]));

  var _Consumable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[33]));

  var _InvisibleHandler = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[34]));

  var _MultiSwitchers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[35]));

  var _ImageHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[36]));

  var _BathHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[37]));

  var _TypeSelector = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[38]));

  var _CircleButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[39]));

  var _ContainerWithChildren = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[40]));

  var _ContainerScrollView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[41]));

  var AllComponents = {};

  function register() {
    for (var _len = arguments.length, UIComponents = new Array(_len), _key = 0; _key < _len; _key++) {
      UIComponents[_key] = arguments[_key];
    }

    UIComponents.forEach(function (UIComponent) {
      if (UIComponent && UIComponent.name) {
        AllComponents[UIComponent.name] = UIComponent;
      }
    });
  }

  register(_PageWithNormalNavigator.default, _ContainerWithGap.default, _ContainerWithFlex.default, _ContainerWithShadowAndSeparator.default, _BigNumber.default, _CardButton.default, _CardLink.default, _CardTip.default, _SelectorWithButton.default, _SliderWithHeader.default, _LightControl.default, _WallSwitch.default, _Swiper.default, _SwiperIndicator.default, _DeviceWithCountdownInfo.default, _CardSwitch.default, _ListItem.default, _ListItemWithTimerSetting.default, _SmallNumbers.default, _Fan.default, _ListItemWithSwitch.default, _ListItemWithSlider.default, _Airer.default, _DoubleSelectors.default, _HeaterHeader.default, _Gap.default, _Curtain.default, _CurtainStyle.default, _PrimeButton.default, _QAList.default, _MultiButtons.default, _SetLightBackground.default, _Consumable.default, _InvisibleHandler.default, _MultiSwitchers.default, _ImageHeader.default, _BathHeader.default, _TypeSelector.default, _CircleButton.default, _ContainerWithChildren.default, _ContainerScrollView.default);
  var _default = AllComponents;
  exports.default = _default;
},10511,[14305,10514,10523,10526,10529,10532,10535,10538,10541,10544,10553,10562,10577,10580,10583,10586,10592,10598,10601,10604,10610,10613,10616,10619,10622,10625,10628,10631,10634,10637,10640,10643,10649,10652,10655,10658,10661,10664,10667,10670,10673,10679]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _NavigationBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _navigationHelper = _$$_REQUIRE(_dependencyMap[6]);

  var _PageWithNormalNavigator = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _fns = _$$_REQUIRE(_dependencyMap[8]);

  var _handlers = _$$_REQUIRE(_dependencyMap[9]);

  var _default = {
    UIComponent: _PageWithNormalNavigator.default,
    name: 'PageWithNormalNavigator',
    adapter: {
      onMounted: function onMounted() {
        var _this = this;

        var _this$item = this.item,
            onPressLeft = _this$item.onPressLeft,
            onPressRight = _this$item.onPressRight;
        var handlePressLeft = onPressLeft ? (0, _handlers.getHandler)(onPressLeft) : null;
        var handlePressRight = onPressRight ? (0, _handlers.getHandler)(onPressRight) : null;
        this.navigationEventKey = (0, _PageWithNormalNavigator.getNavigationEventKey)();
        var navigatorParams = {};
        navigatorParams.left = handlePressLeft ? [{
          key: _NavigationBar.default.ICON.BACK,
          onPress: handlePressLeft
        }] : [];
        navigatorParams.right = handlePressRight ? [{
          key: _NavigationBar.default.ICON.MORE,
          onPress: handlePressRight
        }] : [];
        var newState = {
          navigatorParams: navigatorParams
        };

        if (this.item.contentInnerStyle) {
          newState.contentInnerStyle = this.item.contentInnerStyle;
        }

        if (this.item.containerStyle) {
          newState.containerStyle = this.item.containerStyle;
        }

        this.setState(newState);
        this.listeners.push(_miot.DeviceEvent.deviceNameChanged.addListener(function (device) {
          _this.handle();
        }));
        this.listeners.push((0, _navigationHelper.getNavigation)().addListener('didFocus', function () {
          _this.handle();
        }));
      },
      handle: function handle(v) {
        var _this$item2 = this.item,
            specs = _this$item2.specs,
            onPressLeft = _this$item2.onPressLeft,
            onPressRight = _this$item2.onPressRight;
        var values = this.values;
        var i18n = this.i18n;
        var typeFn = this.typeFn || (this.typeFn = this.item.type ? (0, _fns.getStringGenerator)(this.item.type) : null);
        var backgroundColorFn = this.backgroundColorFn || (this.backgroundColorFn = this.item.backgroundColor ? (0, _fns.getStringGenerator)(this.item.backgroundColor) : null);
        var handlePressLeft = onPressLeft ? (0, _handlers.getHandler)(onPressLeft) : null;
        var handlePressRight = onPressRight ? (0, _handlers.getHandler)(onPressRight) : null;
        var navigatorParams = {};

        if (i18n.title) {
          navigatorParams.title = i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values));
        }

        if (i18n.subtitle0 && specs.length > 1) {
          var subtitles = [];
          specs.forEach(function (spec, index) {
            if (spec && i18n['subtitle' + index]) {
              var t = i18n['subtitle' + index](values[index]);

              if (t) {
                subtitles.push(t);
              }
            }
          });
          navigatorParams.subtitle = subtitles.join('|');
        } else if (i18n.subtitle) {
          navigatorParams.subtitle = i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values));
        }

        if (typeFn) {
          navigatorParams.type = typeFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (backgroundColorFn) {
          navigatorParams.backgroundColor = backgroundColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        navigatorParams.left = handlePressLeft ? [{
          key: _NavigationBar.default.ICON.BACK,
          onPress: handlePressLeft
        }] : [];
        navigatorParams.right = handlePressRight ? [{
          key: _NavigationBar.default.ICON.MORE,
          onPress: handlePressRight
        }] : [];

        _reactNative.DeviceEventEmitter.emit(this.navigationEventKey, navigatorParams);
      }
    }
  };
  exports.default = _default;
},10514,[14308,14305,14359,10033,10074,10719,10824,10517,10779,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBackgroundEventKey = getBackgroundEventKey;
  exports.getNavigationState = getNavigationState;
  exports.getNavigationEventKey = getNavigationEventKey;
  exports.getContentEventKey = getContentEventKey;
  exports.default = exports.PageWithNormalNavigatorKey = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf4 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[12]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _miot = _$$_REQUIRE(_dependencyMap[14]);

  var _NavigationBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _resources = _$$_REQUIRE(_dependencyMap[17]);

  var _dialogManager = _$$_REQUIRE(_dependencyMap[18]);

  var _navigationHelper = _$$_REQUIRE(_dependencyMap[19]);

  var _sizes = _$$_REQUIRE(_dependencyMap[20]);

  var window = _reactNative.Dimensions.get('window');

  var isIos = _reactNative.Platform.OS === 'ios';
  var isIphoneX = isIos && window.width === 375 && window.height === 812;
  var PageWithNormalNavigatorKey = 'PageWithNormalNavigator_key';
  exports.PageWithNormalNavigatorKey = PageWithNormalNavigatorKey;

  function getBackgroundEventKey() {
    var navigation = (0, _navigationHelper.getNavigation)();
    var params = navigation.state.params;
    var page = navigation.state.routeName;
    var key = params && params[PageWithNormalNavigatorKey] ? params[PageWithNormalNavigatorKey] : page;
    return 'PageWithNormalNavigator_REQUESTSETBACKGROUND:' + page;
  }

  var BackgroundComponent = function (_Component) {
    (0, _inherits2.default)(BackgroundComponent, _Component);

    function BackgroundComponent() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, BackgroundComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf4.default)(BackgroundComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        component: null
      };
      return _this;
    }

    (0, _createClass2.default)(BackgroundComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (!this.props.eventKey) {
          return;
        }

        this.REQUESTSETBACKGROUND = _reactNative.DeviceEventEmitter.addListener(this.props.eventKey, function (component) {
          _this2.setState({
            component: component
          });
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.REQUESTSETBACKGROUND && this.REQUESTSETBACKGROUND.remove();
        this.REQUESTSETBACKGROUND = null;
      }
    }, {
      key: "render",
      value: function render() {
        var component = this.state.component;
        return _react.default.createElement(_reactNative.View, {
          style: StylesBackground.container
        }, component);
      }
    }]);
    return BackgroundComponent;
  }(_react.Component);

  var NavigationState = {};

  function saveNavigationState(key, state) {
    NavigationState[key] = state;
  }

  function removeNavigationState() {}

  function getNavigationState() {
    var key = getNavigationEventKey();
    return NavigationState[key];
  }

  function getNavigationEventKey() {
    var navigation = (0, _navigationHelper.getNavigation)();
    var params = navigation.state.params;
    var page = navigation.state.routeName;
    var key = params && params[PageWithNormalNavigatorKey] ? params[PageWithNormalNavigatorKey] : page;
    return 'PageWithNormalNavigator_REQUESTSETNAVIGATION:' + key;
  }

  var WrapedNavigation = function (_Component2) {
    (0, _inherits2.default)(WrapedNavigation, _Component2);

    function WrapedNavigation() {
      var _getPrototypeOf3;

      var _this3;

      (0, _classCallCheck2.default)(this, WrapedNavigation);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this3 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf3 = (0, _getPrototypeOf4.default)(WrapedNavigation)).call.apply(_getPrototypeOf3, [this].concat(args)));
      _this3.state = {
        pageKey: getNavigationEventKey()
      };
      return _this3;
    }

    (0, _createClass2.default)(WrapedNavigation, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this4 = this;

        if (!this.props.eventKey) {
          return;
        }

        this.REQUESTSETNAVIGATION = _reactNative.DeviceEventEmitter.addListener(this.props.eventKey, function (props) {
          _this4.setState(function (state) {
            return (0, _objectSpread2.default)({}, state, props);
          });

          var isDarkStyle = props.type === _NavigationBar.default.TYPE.DARK;

          _reactNative.StatusBar.setBarStyle(isDarkStyle ? 'light-content' : 'dark-content');
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.REQUESTSETNAVIGATION && this.REQUESTSETNAVIGATION.remove();
        this.REQUESTSETNAVIGATION = null;
        removeNavigationState();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
            pageKey = _this$state.pageKey,
            title = _this$state.title,
            backgroundColor = _this$state.backgroundColor,
            type = _this$state.type,
            withSeperator = _this$state.withSeperator,
            restNavigatorParams = (0, _objectWithoutProperties2.default)(_this$state, ["pageKey", "title", "backgroundColor", "type", "withSeperator"]);
        saveNavigationState(pageKey, this.state);
        return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_NavigationBar.default, (0, _extends2.default)({
          title: title || _miot.Device.name,
          backgroundColor: backgroundColor || 'transparent',
          type: type || _NavigationBar.default.TYPE.LIGHT
        }, restNavigatorParams)), withSeperator ? _react.default.createElement(_Separator.default, null) : null);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props) {
        return props;
      }
    }]);
    return WrapedNavigation;
  }(_react.Component);

  function getContentEventKey() {
    var navigation = (0, _navigationHelper.getNavigation)();
    var params = navigation.state.params;
    var page = navigation.state.routeName;
    var key = params && params[PageWithNormalNavigatorKey] ? params[PageWithNormalNavigatorKey] : page;
    return 'PageWithNormalNavigator_REQUESTSETCONTENT:' + page;
  }

  var alreadySetPackageEnableBLEAutoCheckUpgrade = false;

  var PageWithNormalNavigator = function (_Component3) {
    (0, _inherits2.default)(PageWithNormalNavigator, _Component3);

    function PageWithNormalNavigator(props) {
      var _this5;

      (0, _classCallCheck2.default)(this, PageWithNormalNavigator);
      _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf4.default)(PageWithNormalNavigator).call(this, props));
      _this5.state = {
        backgroundEventKey: getBackgroundEventKey(),
        navigationEventKey: getNavigationEventKey(),
        contentEventKey: getContentEventKey(),
        height: '100%'
      };

      _this5.onLayout = function (e) {
        _this5.setState({
          height: e.nativeEvent.layout.height
        });
      };

      _this5.listeners = [];

      if (_miot.Device.type == 16 && !alreadySetPackageEnableBLEAutoCheckUpgrade) {
        alreadySetPackageEnableBLEAutoCheckUpgrade = true;
        _miot.Package.BLEAutoCheckUpgradeOptions = {
          enable: true,
          redPoint: true,
          alertDialog: true,
          authType: 5
        };
      }

      return _this5;
    }

    (0, _createClass2.default)(PageWithNormalNavigator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this6 = this;

        this.listeners.push(_reactNative.DeviceEventEmitter.addListener(this.state.contentEventKey, function (params) {
          if (!_this6.refContent) {
            return;
          }

          try {
            if (params.scrollFlag) {
              _this6.refContent.scrollTo({
                x: params.x,
                y: params.y
              });
            } else {
              _this6.refContent.setNativeProps(params);
            }
          } catch (e) {}
        }));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        while (this.listeners.length) {
          var listener = this.listeners.pop();
          listener && listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this7 = this;

        var _this$props = this.props,
            navigatorParams = _this$props.navigatorParams,
            containerStyle = _this$props.containerStyle,
            contentStyle = _this$props.contentStyle;
        var _this$state2 = this.state,
            backgroundEventKey = _this$state2.backgroundEventKey,
            navigationEventKey = _this$state2.navigationEventKey,
            minHeight = _this$state2.height;
        return _react.default.createElement(_reactNative.View, {
          style: [Styles.container, containerStyle]
        }, _react.default.createElement(BackgroundComponent, {
          eventKey: backgroundEventKey
        }), _react.default.createElement(WrapedNavigation, (0, _extends2.default)({
          eventKey: navigationEventKey
        }, navigatorParams)), _react.default.createElement(_reactNative.ScrollView, {
          ref: function ref(_ref) {
            _this7.refContent = _ref;
          },
          style: [Styles.content, contentStyle],
          alwaysBounceVertical: false,
          contentContainerStyle: [Styles.contentInner, {
            minHeight: minHeight
          }],
          showsVerticalScrollIndicator: false,
          onLayout: this.onLayout,
          automaticallyAdjustContentInsets: false
        }, this.props.children), _react.default.createElement(_dialogManager.DialogComponent, null));
      }
    }]);
    return PageWithNormalNavigator;
  }(_react.Component);

  exports.default = PageWithNormalNavigator;
  PageWithNormalNavigator.propTypes = {
    navigatorParams: _propTypes.default.any,
    backgroundComponent: _propTypes.default.node
  };
  ;

  var Styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: _resources.Styles.common.backgroundColor
    },
    safearea: {
      flex: 1
    },
    content: {
      flex: 1
    },
    contentInner: {
      paddingBottom: isIphoneX ? 34 : (0, _sizes.adjustSize)(30)
    }
  });

  var StylesBackground = _reactNative.StyleSheet.create({
    container: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    }
  });
},10517,[14308,14305,14344,14407,14314,14320,14323,14371,14377,14386,10297,10033,10918,10318,10074,10719,10332,10077,10806,10824,10776]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.register = register;
  exports.getHandler = getHandler;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _reactNativeLinearGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var _fns = _$$_REQUIRE(_dependencyMap[10]);

  var _navigationHelper = _$$_REQUIRE(_dependencyMap[11]);

  var _dialogManager = _$$_REQUIRE(_dependencyMap[12]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[13]);

  var _LightControl = _$$_REQUIRE(_dependencyMap[14]);

  var _colors = _$$_REQUIRE(_dependencyMap[15]);

  var _Strings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _i18n = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _consts = _$$_REQUIRE(_dependencyMap[18]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[19]);

  function defaultSetSpecValue(_ref, _ref2) {
    var siid = _ref.siid,
        piid = _ref.piid,
        value = _ref.value;
    var onSuccess = _ref2.onSuccess,
        onFail = _ref2.onFail;
    (0, _fns.log)('defaultSetSpecValue', siid, piid, value);
    (0, _instanceManager.setSpecValue)({
      did: _consts.DeviceID,
      siid: siid,
      piid: piid,
      value: value
    }).then(function (res) {
      (0, _fns.log)(res);

      if (!res) {
        showClassifiedError(2);
        return;
      }

      if (_instanceManager.CODES.error(res.code)) {
        showClassifiedError(0, [res.code]);
        return;
      }

      if (typeof onSuccess === 'function') {
        onSuccess();
      }
    }).catch(function (e) {
      (0, _fns.log)(e);
      showClassifiedError(0, e);

      if (typeof onFail === 'function') {
        onFail();
      }
    });
  }

  function showClassifiedError(type, errorCodes) {
    if (type === 1) {
      (0, _dialogManager.showError)();
    } else if (type === 2) {
      (0, _dialogManager.showError)({
        message: _i18n.default.errorNetworkAbnormal(),
        timeout: 2000
      });
    } else if (type === 3) {
      (0, _dialogManager.showError)({
        message: _i18n.default.errorDeviceOperationTimeOut(),
        timeout: 2000
      });
    } else {
      if (errorCodes && errorCodes instanceof Array) {
        var newType = 1;
        errorCodes.forEach(function (code) {
          if (!isNaN(code)) {
            var codeStr = String(code);
            var err = codeStr.substr(codeStr.length - 3);

            if ("036" === err) {
              newType = 3;
            } else if ("999" === err) {
              newType = 2;
            }
          }
        });
        showClassifiedError(newType);
      } else {
        (0, _dialogManager.showError)();
      }
    }
  }

  function defaultSetSpecValues(specs, values, _ref3) {
    var onSuccess = _ref3.onSuccess,
        onFail = _ref3.onFail;
    (0, _fns.log)('defaultSetSpecValues', specs, values);
    var kvs = specs.map(function (spec, index) {
      return spec ? {
        did: _consts.DeviceID,
        siid: spec.siid,
        piid: spec.piid,
        value: values[index]
      } : null;
    }).filter(function (kv) {
      return !!kv;
    });
    (0, _instanceManager.setSpecValues)(kvs).then(function (res) {
      (0, _fns.log)(res);

      if (typeof onSuccess === 'function') {
        onSuccess();
      }
    }).catch(function (e) {
      (0, _fns.log)(e);
      showClassifiedError(0, e);

      if (typeof onFail === 'function') {
        onFail();
      }
    });
  }

  function defaultSetRpcRequest(_ref4, _ref5) {
    var siid = _ref4.siid,
        piid = _ref4.piid,
        value = _ref4.value;
    var onSuccess = _ref5.onSuccess,
        onFail = _ref5.onFail;
    (0, _instanceManager.setRpcRequest)({
      did: _consts.DeviceID,
      siid: siid,
      piid: piid,
      value: value
    }).then(function (res) {
      (0, _fns.log)(res);

      if (typeof onSuccess === 'function') {
        onSuccess();
      }
    }).catch(function (e) {
      (0, _fns.log)(e);

      if (typeof onFail === 'function') {
        onFail();
      }
    });
  }

  function defaultTriggerAction(_ref6, _ref7) {
    var siid = _ref6.siid,
        aiid = _ref6.aiid,
        params = _ref6.params;
    var onSuccess = _ref7.onSuccess,
        onFail = _ref7.onFail;
    (0, _fns.log)('defaultTriggerAction', siid, aiid, params);
    (0, _instanceManager.triggerAction)({
      did: _consts.DeviceID,
      siid: siid,
      aiid: aiid,
      in: params || []
    }).then(function (res) {
      (0, _fns.log)(res);

      if (typeof onSuccess === 'function') {
        onSuccess();
      }
    }).catch(function (e) {
      (0, _fns.log)(e);
      showClassifiedError(0, e);

      if (typeof onFail === 'function') {
        onFail();
      }
    });
  }

  function defaultSetVirtualProp(_ref8, _ref9) {
    var virtualProp = _ref8.virtualProp,
        value = _ref8.value;
    var onSuccess = _ref9.onSuccess,
        onFail = _ref9.onFail;
    console.log('defaultSetVirtualProp', virtualProp, value);
    (0, _instanceManager.setVirtualProp)({
      virtualProp: virtualProp,
      value: String(value)
    }).then(function (res) {
      (0, _fns.log)(res);

      if (typeof onSuccess === 'function') {
        onSuccess();
      }
    }).catch(function (e) {
      (0, _fns.log)(e);
      showClassifiedError(0, e);

      if (typeof onFail === 'function') {
        onFail();
      }
    });
  }

  var BackgroundProps = {};

  function defaultSetBackground(backgroundEventKey, cfg) {
    if (!cfg) {
      return;
    }

    var key = backgroundEventKey || (0, _PageWithNormalNavigator.getBackgroundEventKey)();
    var cachedBackgroundProps = BackgroundProps[key] || {};
    var newProps = (0, _objectSpread2.default)({}, cachedBackgroundProps, cfg);
    BackgroundProps[key] = newProps;

    if (newProps.color && String(newProps.color).indexOf('#') === 0) {
      newProps.color = (0, _colors.transformHexToDigtal)(newProps.color);
    }

    _reactNative.DeviceEventEmitter.emit(key, _react.default.createElement(_LightControl.Background, newProps));
  }

  var LinearBackgroundProps = {};

  function defaultSetLinearBackground(backgroundEventKey, cfg) {
    if (!cfg) {
      return;
    }

    var key = backgroundEventKey || (0, _PageWithNormalNavigator.getBackgroundEventKey)();
    var cachedLinearBackgroundProps = LinearBackgroundProps[key] || {};
    var newProps = (0, _objectSpread2.default)({}, cachedLinearBackgroundProps, cfg);
    LinearBackgroundProps[key] = newProps;

    _reactNative.DeviceEventEmitter.emit(key, _react.default.createElement(_reactNativeLinearGradient.default, (0, _extends2.default)({
      style: {
        position: 'absolute',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      }
    }, newProps)));
  }

  var Handlers = {
    switch: function _switch(_, _ref10, value, __, ___) {
      var siid = _ref10.siid,
          piid = _ref10.piid;

      var _ref11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref11.onSuccess,
          onFail = _ref11.onFail;

      defaultSetSpecValue({
        siid: siid,
        piid: piid,
        value: !value
      }, {
        onSuccess: onSuccess,
        onFail: onFail
      });
    },
    setTargetProperty: function setTargetProperty(_, _ref12, value, __, ___) {
      var siid = _ref12.siid,
          piid = _ref12.piid;

      var _ref13 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref13.onSuccess,
          onFail = _ref13.onFail;

      defaultSetSpecValue({
        siid: siid,
        piid: piid,
        value: value
      }, {
        onSuccess: onSuccess,
        onFail: onFail
      });
    },
    setTargetPropertys: function setTargetPropertys(_ref14, _, __, ___, ____) {
      var _ref14$specs = _ref14.specs,
          specs = _ref14$specs === undefined ? [] : _ref14$specs,
          values = _ref14.values;

      var _ref15 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref15.onSuccess,
          onFail = _ref15.onFail;

      defaultSetSpecValues(specs, values, {
        onSuccess: onSuccess,
        onFail: onFail
      });
    },
    triggerAction: function triggerAction(_ref16, _ref17, _, __, ___) {
      var actionIn = _ref16.actionIn;
      var siid = _ref17.siid,
          aiid = _ref17.aiid;

      var _ref18 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref18.onSuccess,
          onFail = _ref18.onFail;

      defaultTriggerAction({
        siid: siid,
        aiid: aiid,
        actionIn: actionIn
      }, {
        onSuccess: onSuccess,
        onFail: onFail
      });
    },
    setRpcRequest: function setRpcRequest(_, _ref19, value, __, ___) {
      var siid = _ref19.siid,
          piid = _ref19.piid;

      var _ref20 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref20.onSuccess,
          onFail = _ref20.onFail;

      defaultSetRpcRequest({
        siid: siid,
        piid: piid,
        value: value
      }, {
        onSuccess: onSuccess,
        onFail: onFail
      });
    },
    goShop: function goShop(_ref21) {
      var goodsId = _ref21.goodsId;

      _miot.Host.ui.openShopPage(goodsId);
    },
    exit: function exit() {
      _miot.Package.exit();
    },
    goSetting: function goSetting() {
      var navigation = (0, _navigationHelper.getNavigation)();

      if (navigation) {
        navigation.navigate('Setting');
      }
    },
    goBack: function goBack(_ref22) {
      var backPageName = _ref22.backPageName;
      var navigation = (0, _navigationHelper.getNavigation)();

      if (navigation) {
        navigation.goBack(backPageName);
      }
    },
    goList: function goList(_ref23) {
      var title = _ref23.title,
          _ref23$list = _ref23.list,
          list = _ref23$list === undefined ? [] : _ref23$list;
      var navigation = (0, _navigationHelper.getNavigation)();

      if (navigation) {
        navigation.navigate('List', {
          title: title,
          items: list
        });
      }
    },
    requestGlobalHide: function requestGlobalHide() {
      _reactNative.DeviceEventEmitter.emit(_consts.CONSTREQUESTHIDE);
    },
    requestGlobalShow: function requestGlobalShow() {
      _reactNative.DeviceEventEmitter.emit(_consts.CONSTREQUESTSHOW);
    },
    goTimerSetting: function goTimerSetting(_ref24, _ref25, _, values) {
      var timerTitle = _ref24.timerTitle,
          _ref24$onValue = _ref24.onValue,
          onValue = _ref24$onValue === undefined ? true : _ref24$onValue,
          _ref24$offValue = _ref24.offValue,
          offValue = _ref24$offValue === undefined ? false : _ref24$offValue;
      var siid = _ref25.siid,
          piid = _ref25.piid;
      var i18n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      _miot.Host.ui.openTimerSettingPageWithOptions({
        timerTitle: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
        displayName: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
        identify: onValue === true && offValue === false ? "prop." + siid + "." + piid : "prop." + siid + "." + piid + "." + String(onValue) + "." + String(offValue),
        onMethod: 'set_properties',
        offMethod: 'set_properties',
        onParam: [{
          did: _consts.DeviceID,
          siid: siid,
          piid: piid,
          value: onValue
        }],
        offParam: [{
          did: _consts.DeviceID,
          siid: siid,
          piid: piid,
          value: offValue
        }]
      });
    },
    goCountdown: function goCountdown(item, _ref26, value) {
      var siid = _ref26.siid,
          piid = _ref26.piid;

      _miot.Host.ui.openCountDownPage(!!value, {
        onMethod: 'set_properties',
        offMethod: 'set_properties',
        onParam: [{
          did: _consts.DeviceID,
          siid: siid,
          piid: piid,
          value: true
        }],
        offParam: [{
          did: _consts.DeviceID,
          siid: siid,
          piid: piid,
          value: false
        }]
      });
    },
    requestEdit: function requestEdit(_ref27, _ref28, _, __, ___) {
      var title = _ref27.title;
      var siid = _ref28.siid,
          piid = _ref28.piid;

      var _ref29 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref29.onSuccess,
          onFail = _ref29.onFail;

      (0, _dialogManager.showInput)({
        message: title,
        onConfirm: function onConfirm(text) {
          if (!text || title === text) {
            return;
          }

          defaultSetSpecValue({
            siid: siid,
            piid: piid,
            value: text
          }, {
            onSuccess: onSuccess,
            onFail: onFail
          });
        }
      });
    },
    goSearchShop: function goSearchShop(_ref30) {
      var i18n = _ref30.i18n;

      var transformedI18n = _miot.Resources.createI18n(i18n || {
        zh: {}
      }, _miot.Host.locale.language).strings;

      _miot.Host.ui.openShopSearchPage(transformedI18n.searchKey ? transformedI18n.searchKey() : '');
    },
    openPowerMultikeyPage: function openPowerMultikeyPage() {
      _miot.Host.ui.openPowerMultikeyPage(_consts.DeviceID);
    },
    goVirtualPage: function goVirtualPage(_ref31) {
      var virtualPage = _ref31.virtualPage;
      var navigation = (0, _navigationHelper.getNavigation)();

      if (navigation) {
        var _navigation$navigate;

        navigation.navigate('VirtualPage', (_navigation$navigate = {}, (0, _defineProperty2.default)(_navigation$navigate, _PageWithNormalNavigator.PageWithNormalNavigatorKey, virtualPage), (0, _defineProperty2.default)(_navigation$navigate, "virtualPage", virtualPage), _navigation$navigate));
      }
    },
    setVirtualProp: function setVirtualProp(_, _ref32, value, __, ___) {
      var virtualProp = _ref32.virtualProp;

      var _ref33 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref33.onSuccess,
          onFail = _ref33.onFail;

      defaultSetVirtualProp({
        virtualProp: virtualProp,
        value: value
      }, {
        onSuccess: onSuccess,
        onFail: onFail
      });
    },
    requestSelect: function requestSelect(_, _ref34, value, values, i18n) {
      var siid = _ref34.siid,
          piid = _ref34.piid;

      var _ref35 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref35.onSuccess,
          onFail = _ref35.onFail;

      var specDef = (0, _instanceManager.getSpecDefinition)({
        siid: siid,
        piid: piid
      });

      if (!specDef || !specDef['value-list']) {
        return;
      }

      var vl = specDef['value-list'];
      (0, _dialogManager.showSelector)({
        message: i18n && i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values || [])) : null,
        options: vl.map(function (v) {
          return {
            title: i18n && i18n.value ? i18n.value(v.value) : v.value
          };
        }),
        selectedIndexs: [vl.findIndex(function (v) {
          return v.value === value;
        })],
        onSelect: function onSelect(_ref36) {
          var _ref37 = (0, _slicedToArray2.default)(_ref36, 1),
              index = _ref37[0];

          if (!vl[index] || vl[index].value === value) {
            return;
          }

          defaultSetSpecValue({
            siid: siid,
            piid: piid,
            value: vl[index].value
          }, {
            onSuccess: onSuccess,
            onFail: onFail
          });
        }
      });
    },
    setBackground: function setBackground(_ref38, _, cfg) {
      var backgroundEventKey = _ref38.backgroundEventKey;
      defaultSetBackground(backgroundEventKey, cfg);
    },
    setBackgroundBrightness: function setBackgroundBrightness(_ref39, _, value) {
      var backgroundEventKey = _ref39.backgroundEventKey;
      defaultSetBackground(backgroundEventKey, {
        brightness: value,
        supportBrightness: true
      });
    },
    setBackgroundColorTemperature: function setBackgroundColorTemperature(_ref40, _, value) {
      var backgroundEventKey = _ref40.backgroundEventKey,
          colorTemperatureRange = _ref40.colorTemperatureRange;
      defaultSetBackground(backgroundEventKey, {
        colorTemperature: value,
        colorTemperatureRange: colorTemperatureRange,
        supportColorTemperature: true,
        supportColor: false
      });
    },
    setBackgroundColor: function setBackgroundColor(_ref41, _, value) {
      var backgroundEventKey = _ref41.backgroundEventKey;
      defaultSetBackground(backgroundEventKey, {
        color: value,
        supportColorTemperature: false,
        supportColor: true
      });
    },
    setBackgroundLinearGradient: function setBackgroundLinearGradient(_ref42, _, __, values) {
      var backgroundEventKey = _ref42.backgroundEventKey,
          gradientAngel = _ref42.gradientAngel,
          gradientLocations = _ref42.gradientLocations,
          gradientColors = _ref42.gradientColors;

      if (!gradientColors) {
        return;
      }

      defaultSetLinearBackground(backgroundEventKey, {
        useAngel: true,
        angel: gradientAngel || 0,
        angelCenter: {
          x: 0.5,
          y: 0.5
        },
        locations: JSON.parse(gradientLocations ? (0, _fns.getStringGenerator)(gradientLocations).apply(undefined, (0, _toConsumableArray2.default)(values)) : '[0, 1]'),
        colors: JSON.parse((0, _fns.getStringGenerator)(gradientColors).apply(undefined, (0, _toConsumableArray2.default)(values)) || '["transparent", "transparent"]')
      });
    },
    requestConfirm: function requestConfirm(_ref43, _ref44, value, values, i18n) {
      var message = _ref43.message,
          actionIn = _ref43.actionIn;
      var siid = _ref44.siid,
          piid = _ref44.piid,
          aiid = _ref44.aiid,
          virtualProp = _ref44.virtualProp;

      var _ref45 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          onSuccess = _ref45.onSuccess,
          onFail = _ref45.onFail;

      if (!message) {
        return;
      }

      (0, _dialogManager.showMessage)({
        message: message,
        buttons: virtualProp || siid !== undefined && (piid !== undefined || aiid !== undefined) ? [{
          text: _Strings.default.cancel,
          callback: _fns.NOOP
        }, {
          text: _Strings.default.ok,
          callback: function callback() {
            if (virtualProp) {
              defaultSetVirtualProp({
                virtualProp: virtualProp,
                value: value
              }, {
                onSuccess: onSuccess,
                onFail: onFail
              });
            } else if (piid !== undefined) {
              defaultSetSpecValue({
                siid: siid,
                piid: piid,
                value: value
              }, {
                onSuccess: onSuccess,
                onFail: onFail
              });
            } else if (aiid !== undefined) {
              defaultTriggerAction({
                siid: siid,
                aiid: aiid,
                actionIn: actionIn
              }, {
                onSuccess: onSuccess,
                onFail: onFail
              });
            }
          }
        }] : [{
          text: _Strings.default.ok,
          callback: _fns.NOOP
        }]
      });
    },
    requestToast: function requestToast(_ref46, __, ___, values, i18n) {
      var toastTimeout = _ref46.toastTimeout;

      if (!i18n || !i18n.toastMessage) {
        return;
      }

      var message = i18n.toastMessage.apply(i18n, (0, _toConsumableArray2.default)(values));

      if (!message) {
        return;
      }

      (0, _dialogManager.showError)({
        message: message,
        timeout: toastTimeout || 3000
      });
    },
    checkDeviceOnline: function checkDeviceOnline() {
      (0, _instanceManager.checkDeviceOnline)(true).then(_fns.NOOP).catch(_fns.NOOP);
    },
    goPosition: function goPosition(_, __, ___, ____, _____) {
      var x = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var y = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

      _reactNative.DeviceEventEmitter.emit((0, _PageWithNormalNavigator.getContentEventKey)(), {
        x: x,
        y: y,
        scrollFlag: true
      });
    },
    setScrollAbility: function setScrollAbility() {
      var scrollEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      _reactNative.DeviceEventEmitter.emit((0, _PageWithNormalNavigator.getContentEventKey)(), {
        scrollEnabled: scrollEnabled
      });
    }
  };

  function register(name, fn) {
    if (name && typeof fn === 'function') {
      Handlers[name] = fn;
    }
  }

  function getHandler(name) {
    return Handlers[name] || null;
  }
},10520,[14305,14347,14317,14359,14344,14314,10297,10033,14299,10074,10779,10824,10806,10821,10803,10785,10320,10496,10010,10007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ContainerWithGap = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _sizes = _$$_REQUIRE(_dependencyMap[2]);

  var _default = {
    UIComponent: _ContainerWithGap.default,
    name: 'ContainerWithGap',
    adapter: {
      onMounted: function onMounted() {
        var _this$item = this.item,
            _this$item$gap = _this$item.gap,
            gap = _this$item$gap === undefined ? 10 : _this$item$gap,
            _this$item$outerGap = _this$item.outerGap,
            outerGap = _this$item$outerGap === undefined ? 0 : _this$item$outerGap,
            horizontal = _this$item.horizontal;
        var newState = {
          horizontal: horizontal,
          gap: (0, _sizes.adjustSize)(gap * 3),
          outerGap: (0, _sizes.adjustSize)(outerGap * 3)
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10523,[14305,10797,10776]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _sizes = _$$_REQUIRE(_dependencyMap[9]);

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      (0, _classCallCheck2.default)(this, UIComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UIComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        var children = this.props.children;

        if (!children) {
          return null;
        }

        return _react.default.createElement(_reactNative.View, {
          style: Styles.container
        }, children);
      }
    }]);
    return UIComponent;
  }(_react.Component);

  ;

  var Styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });

  var _default = {
    UIComponent: UIComponent,
    name: 'ContainerWithFlex'
  };
  exports.default = _default;
},10526,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10776]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = {
    UIComponent: _ContainerWithShadowAndSeparator.default,
    name: 'ContainerWithShadowAndSeparator',
    adapter: {
      onMounted: function onMounted() {
        var _this$item = this.item,
            horizontal = _this$item.horizontal,
            separatorStyle = _this$item.separatorStyle;
        var newState = {
          horizontal: horizontal,
          separatorStyle: separatorStyle
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10529,[14305,10791]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _BigNumber = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _fns = _$$_REQUIRE(_dependencyMap[3]);

  var _default = {
    UIComponent: _BigNumber.default,
    name: 'BigNumber',
    adapter: {
      handle: function handle(v) {
        var values = this.values;
        var i18n = this.i18n;
        var title = i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var number = v.value;
        var themeColorFn = this.themeColorFn || (this.themeColorFn = this.item.themeColor ? (0, _fns.getStringGenerator)(this.item.themeColor) : null);
        var newState = {
          title: title,
          number: number
        };

        if (themeColorFn !== null) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      }
    }
  };
  exports.default = _default;
},10532,[14305,14359,10773,10779]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _CardButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _handlers = _$$_REQUIRE(_dependencyMap[5]);

  var _icons = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _CardButton.default,
    name: 'CardButton',
    adapter: {
      handle: function handle(v) {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            icon = _this$item.icon,
            hasShadow = _this$item.hasShadow,
            onClick = _this$item.onClick,
            themeColor = _this$item.themeColor,
            themeBackgroundColor = _this$item.themeBackgroundColor,
            underlayColor = _this$item.underlayColor,
            showCircle = _this$item.showCircle;

        var i18n = this.i18n;
        var values = this.values;
        var handle = (0, _handlers.getHandler)(onClick) || null;
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var themeBackgroundColorFn = this.themeBackgroundColorFn || (this.themeBackgroundColorFn = themeBackgroundColor ? (0, _fns.getStringGenerator)(themeBackgroundColor) : null);
        var underlayColorFn = this.underlayColorFn || (this.underlayColorFn = underlayColor ? (0, _fns.getStringGenerator)(underlayColor) : null);
        var iconFn = this.iconFn || (this.iconFn = icon ? (0, _fns.getStringGenerator)(icon) : null);
        var showCircleFn = this.showCircleFn || (this.showCircleFn = showCircle ? (0, _fns.getStringGenerator)(showCircle) : null);
        var needShowCircle = showCircleFn ? showCircleFn.apply(undefined, (0, _toConsumableArray2.default)(values)) : false;
        var iconContainerStyle = needShowCircle ? {
          borderWidth: 1,
          borderColor: 'rgba(176, 182, 184, 0.4)'
        } : null;
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          icon: (0, _icons.getIcon)(iconFn ? iconFn.apply(undefined, (0, _toConsumableArray2.default)(values)) : null),
          hasShadow: hasShadow,
          iconContainerStyle: iconContainerStyle,
          onPress: handle ? function () {
            handle(_this.item, spec, values[0]);
          } : null
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (themeBackgroundColorFn) {
          newState.themeBackgroundColor = themeBackgroundColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (underlayColorFn) {
          newState.underlayColor = underlayColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10535,[14305,14359,14347,10788,10779,10520,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _CardButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _fns = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _icons = _$$_REQUIRE(_dependencyMap[7]);

  var _default = {
    UIComponent: _CardButton.default,
    name: 'CardLink',
    adapter: {
      supportShop: false,
      onMounted: function onMounted() {
        var _this = this;

        _miot.Service.getServerName().then(function (_ref) {
          var countryCode = _ref.countryCode;

          if (countryCode && countryCode.toLowerCase() === 'cn') {
            _this.supportShop = true;

            _this.handle();
          }
        }).catch(_fns.NOOP);
      },
      handle: function handle(v) {
        var _this2 = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            icon = _this$item.icon,
            hasShadow = _this$item.hasShadow,
            onClick = _this$item.onClick,
            themeColor = _this$item.themeColor,
            themeBackgroundColor = _this$item.themeBackgroundColor,
            underlayColor = _this$item.underlayColor;

        var i18n = this.i18n;
        var values = this.values;
        var handle = (0, _handlers.getHandler)(onClick) || null;
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var themeBackgroundColorFn = this.themeBackgroundColorFn || (this.themeBackgroundColorFn = themeBackgroundColor ? (0, _fns.getStringGenerator)(themeBackgroundColor) : null);
        var underlayColorFn = this.underlayColorFn || (this.underlayColorFn = underlayColor ? (0, _fns.getStringGenerator)(underlayColor) : null);
        var isAboutShop = ['goShop', 'goSearchShop'].indexOf(onClick) !== -1;
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          icon: (0, _icons.getIcon)(icon),
          rightArrow: isAboutShop ? this.supportShop : true,
          hasShadow: hasShadow,
          onPress: handle && (isAboutShop ? this.supportShop : true) ? function () {
            handle(_this2.item, spec, values[0], values, i18n);
          } : null
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (themeBackgroundColorFn) {
          newState.themeBackgroundColor = themeBackgroundColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (underlayColorFn) {
          newState.underlayColor = underlayColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10538,[14305,14359,14347,10074,10788,10779,10520,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _CardButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[15]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _miot = _$$_REQUIRE(_dependencyMap[17]);

  var _fns = _$$_REQUIRE(_dependencyMap[18]);

  var _sizes = _$$_REQUIRE(_dependencyMap[19]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[20]);

  var _handlers = _$$_REQUIRE(_dependencyMap[21]);

  var _icons = _$$_REQUIRE(_dependencyMap[22]);

  var SourceClose = (0, _icons.getIcon)('close');

  var UIComponent = function (_PureComponent) {
    (0, _inherits2.default)(UIComponent, _PureComponent);

    function UIComponent() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, UIComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(UIComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        visible: true,
        random: 0
      };

      _this.hide = function () {
        var disabled = _this.props.disabled;

        if (disabled) {
          return;
        }

        _this.setState({
          visible: false
        });
      };

      return _this;
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            icon = _this$props.icon,
            title = _this$props.title,
            closable = _this$props.closable,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["icon", "title", "closable"]);
        var visible = this.state.visible;

        if (!visible || !icon && !title) {
          return null;
        }

        return _react.default.createElement(_reactNative.View, {
          style: Styles.container
        }, _react.default.createElement(_CardButton.default, (0, _extends2.default)({
          icon: icon,
          iconStyle: Styles.icon,
          title: title
        }, rest)), closable ? _react.default.createElement(_reactNative.TouchableHighlight, {
          underlayColor: "transparent",
          style: Styles.closeContainer,
          onPress: this.hide
        }, _react.default.createElement(_reactNative.Image, {
          source: SourceClose,
          style: Styles.close
        })) : null);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return nextProps && nextProps.random > 0 && prevState.random !== nextProps.random && (nextProps.title || nextProps.icon) ? {
          visible: true,
          random: nextProps.random
        } : null;
      }
    }]);
    return UIComponent;
  }(_react.PureComponent);

  UIComponent.name = 'CardTip';
  UIComponent.propTypes = (0, _objectSpread2.default)({}, _CardButton.default.propTypes, {
    closable: _propTypes.default.bool
  });

  var Styles = _reactNative.StyleSheet.create({
    icon: {
      width: (0, _sizes.adjustSize)(120),
      height: (0, _sizes.adjustSize)(120),
      resizeMode: 'contain'
    },
    closeContainer: {
      position: 'absolute',
      right: (0, _sizes.adjustSize)(60),
      top: 0,
      height: '100%',
      justifyContent: 'center'
    }
  });

  var _default = {
    UIComponent: UIComponent,
    name: 'CardTip',
    adapter: {
      cachedValues: [],
      random: 0,
      handle: function handle(v) {
        var _this2 = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            icon = _this$item.icon,
            closable = _this$item.closable,
            onClick = _this$item.onClick,
            themeBackgroundColor = _this$item.themeBackgroundColor,
            underlayColor = _this$item.underlayColor;

        var values = this.values;
        var cachedValues = this.cachedValues;
        var i18n = this.i18n;
        var random = this.random;

        if (v && v.value && cachedValues.indexOf(v.value) === -1) {
          var transformed = i18n.transformer ? i18n.transformer(v.value) : '';

          if (transformed) {
            cachedValues.unshift(transformed);
            random = random + 1 > 1000 ? 1 : random + 1;
          }
        }

        if (v && v.value === 0) {
          cachedValues = [];
          random = 0;
        }

        this.random = random;
        var length = cachedValues.length;
        var handle = (0, _handlers.getHandler)(onClick) || null;
        var themeBackgroundColorFn = this.themeBackgroundColorFn || (this.themeBackgroundColorFn = themeBackgroundColor ? (0, _fns.getStringGenerator)(themeBackgroundColor) : null);
        var underlayColorFn = this.underlayColorFn || (this.underlayColorFn = underlayColor ? (0, _fns.getStringGenerator)(underlayColor) : null);
        var newState = {
          hidden: length <= 0,
          icon: length > 0 ? (0, _icons.getIcon)(icon) : '',
          themeColor: 'transparent',
          title: length > 0 && i18n.title ? i18n.title(length > 1, length, cachedValues[0]) : '',
          subtitle: i18n.subtitle ? i18n.subtitle(length > 1, length, cachedValues[0]) : '',
          onPress: handle ? function () {
            _this2.cachedValues = [];

            _this2.hide(function () {
              handle((0, _objectSpread2.default)({}, _this2.item, {
                list: cachedValues.map(function (v) {
                  return {
                    componentName: 'ListItem',
                    specs: [],
                    i18n: (0, _defineProperty2.default)({}, _miot.Host.locale.language, {
                      title: String(v),
                      subtitle: ''
                    }),
                    onClick: null
                  };
                }),
                title: i18n.title(length > 1, length, cachedValues[length - 1])
              }));
            });
          } : _fns.NOOP,
          closable: closable,
          random: random
        };

        if (themeBackgroundColorFn) {
          newState.themeBackgroundColor = themeBackgroundColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (underlayColorFn) {
          newState.underlayColor = underlayColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10541,[14308,14305,14359,14317,14314,14347,14344,14407,14320,14323,14371,14377,14386,10788,10297,10033,10318,10074,10779,10776,10007,10520,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _SelectorWithButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _icons = _$$_REQUIRE(_dependencyMap[7]);

  var _default = {
    UIComponent: _SelectorWithButton.default,
    name: 'SelectorWithButton',
    adapter: {
      handle: function handle(v) {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 3),
            spec = _this$item$specs[0],
            specSwitch = _this$item$specs[1],
            specOn = _this$item$specs[2],
            buttonIcons = _this$item.buttonIcons,
            selectedButtonIcons = _this$item.selectedButtonIcons,
            onSelect = _this$item.onSelect,
            onSwitch = _this$item.onSwitch,
            hasShadow = _this$item.hasShadow,
            maxNumberInRow = _this$item.maxNumberInRow,
            hideTitleLeastNumber = _this$item.hideTitleLeastNumber,
            afterClick = _this$item.afterClick,
            afterClickValidator = _this$item.afterClickValidator,
            afterClickSpec = _this$item.afterClickSpec,
            afterClickSpecValue = _this$item.afterClickSpecValue,
            offColor = _this$item.offColor,
            themeColor = _this$item.themeColor,
            valueList = _this$item.valueList,
            offValue = _this$item.offValue;

        var specDef = (0, _instanceManager.getSpecDefinition)(spec);
        var values = this.values;
        var i18n = this.i18n;
        var value = values[0];
        var title = i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var subtitle = i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var functionalKeys = this.functionalKeys;
        var functionalValues = this.functionalValues;
        var handle = (0, _handlers.getHandler)(onSelect);
        var handleSetPropertiesValue = (0, _handlers.getHandler)('setTargetPropertys');
        var handleSwitch = (0, _handlers.getHandler)(onSwitch);
        var handleAfterClick = (0, _handlers.getHandler)(afterClick);
        var buttonNames = this.buttonNames || (this.buttonNames = buttonIcons.map(function (icon, index) {
          return i18n.buttonNames ? i18n.buttonNames(index) : '';
        }));
        var items = this.items || (this.items = buttonIcons.map(function (icon, index) {
          return {
            icon: (0, _icons.getIcon)(icon),
            iconSelected: (0, _icons.getIcon)(selectedButtonIcons[index]) || (0, _icons.getIcon)(icon),
            title: buttonNames[index]
          };
        }));
        var selectedIndex = valueList.findIndex(function (v) {
          return v === value;
        });
        var initSelectedIndexs = selectedIndex === -1 || specOn && !values[2] ? [] : [selectedIndex];
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var offColorFn = this.offColorFn || (this.offColorFn = offColor ? (0, _fns.getStringGenerator)(offColor) : null);
        var afterClickValidatorFn = this.afterClickValidatorFn || (this.afterClickValidatorFn = afterClickValidator ? (0, _fns.getStringGenerator)(afterClickValidator) : null);

        if (!items || items.length < 2) {
          return;
        }

        var newState = {
          title: title,
          subtitle: subtitle,
          items: items,
          initSelectedIndexs: initSelectedIndexs,
          multiple: specOn ? true : false,
          minSelected: specOn ? 0 : 1,
          maxSelected: 1,
          hasShadow: hasShadow,
          maxNumberInRow: maxNumberInRow,
          hideTitleLeastNumber: hideTitleLeastNumber,
          onSelected: function onSelected(selectedIndexs) {
            var selectedValues = selectedIndexs.map(function (index) {
              return valueList[index];
            });
            var onSuccess = handleAfterClick ? function () {
              var theValues = (0, _toConsumableArray2.default)(functionalValues);
              var theKey = (0, _instanceManager.getPropKey)(spec);
              var theIndex = functionalKeys.findIndex(function (k) {
                return k === theKey;
              });

              if (theIndex !== -1) {
                theValues[theIndex] = selectedValues[0];
              }

              var afterClickValidated = afterClickValidatorFn ? afterClickValidatorFn.apply(undefined, (0, _toConsumableArray2.default)(theValues)) : true;

              if (!afterClickValidated) {
                return;
              }

              if (!afterClickSpec) {
                handleAfterClick(_this.item, spec, value, theValues, i18n);
              } else {
                var afterClickSpecValueFn = afterClickSpecValue ? (0, _fns.getStringGenerator)(afterClickSpecValue) : null;

                if (afterClickSpecValueFn) {
                  var afterValue = afterClickSpecValueFn.apply(undefined, (0, _toConsumableArray2.default)(values));
                  console.log("afterValue: ", afterValue);
                  console.log("values: ", values);
                  console.log("fun:::", afterClickSpecValueFn);
                  handleAfterClick(_this.item, afterClickSpec, afterValue, theValues, i18n);
                }
              }
            } : null;

            if (!selectedIndexs.length && specOn && offValue !== undefined && offValue !== null) {
              handleSetPropertiesValue({
                specs: [specOn, spec],
                values: [false, offValue]
              }, _this.item, (0, _toConsumableArray2.default)(values), i18n, null, {
                onSuccess: onSuccess
              });
            } else if (!initSelectedIndexs.length && selectedIndexs.length && specOn) {
                handleSetPropertiesValue({
                  specs: [specOn, spec],
                  values: [true, selectedValues[0]]
                }, _this.item, (0, _toConsumableArray2.default)(values), i18n, null, {
                  onSuccess: onSuccess
                });
              } else if (selectedIndexs.length) {
                handle(_this.item, spec, selectedValues[0], (0, _toConsumableArray2.default)(values), i18n, {
                  onSuccess: onSuccess
                });
              }
          },
          switchDisabled: specSwitch && !values[1],
          showSwitch: !!specSwitch,
          switchOn: !!values[1],
          onSwitch: handleSwitch ? function (value) {
            handleSwitch(_this.item, specSwitch, value);
          } : _fns.NOOP
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (offColorFn) {
          newState.offColor = offColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10544,[14305,14359,14347,10547,10779,10007,10520,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Switch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _CircleButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Host = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _sizes = _$$_REQUIRE(_dependencyMap[15]);

  var _fns = _$$_REQUIRE(_dependencyMap[16]);

  var _fonts = _$$_REQUIRE(_dependencyMap[17]);

  var _colors = _$$_REQUIRE(_dependencyMap[18]);

  var SelectorWithButton = function (_Component) {
    (0, _inherits2.default)(SelectorWithButton, _Component);

    function SelectorWithButton() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, SelectorWithButton);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SelectorWithButton)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        selectedIndexs: [0]
      };

      _this.select = function (index) {
        var _this$props = _this.props,
            disabled = _this$props.disabled,
            switchDisabled = _this$props.switchDisabled,
            multiple = _this$props.multiple,
            onSelected = _this$props.onSelected,
            minSelected = _this$props.minSelected,
            maxSelected = _this$props.maxSelected;

        if (disabled || switchDisabled) {
          return;
        }

        var selectedIndexs = (0, _toConsumableArray2.default)(_this.state.selectedIndexs);
        var selectedIndex = selectedIndexs.indexOf(index);
        var hasChanged = false;

        if (multiple) {
          if (selectedIndex === -1) {
            if (selectedIndexs.length >= maxSelected) {
              selectedIndexs.shift();
            }

            selectedIndexs.push(index);
            hasChanged = true;
          } else {
            if (selectedIndexs.length > minSelected) {
              selectedIndexs.splice(selectedIndex, 1);
              hasChanged = true;
            }
          }
        } else {
          if (selectedIndex === -1) {
            hasChanged = true;
            selectedIndexs = [index];
          }
        }

        if (hasChanged) {
          onSelected(selectedIndexs);
        }

        return null;
      };

      _this.getSelectors = function () {
        var _this$props2 = _this.props,
            items = _this$props2.items,
            themeColor = _this$props2.themeColor,
            disabled = _this$props2.disabled,
            switchDisabled = _this$props2.switchDisabled,
            separator = _this$props2.separator,
            offColor = _this$props2.offColor,
            maxNumberInRow = _this$props2.maxNumberInRow,
            hideTitleLeastNumber = _this$props2.hideTitleLeastNumber;
        var selectedIndexs = _this.state.selectedIndexs;
        var itemCount = items.length;

        var sizeLevel = _this.getSizeLevel(items);

        var isHorizontal = itemCount === 2;
        var hasSeparator = isHorizontal;
        var newArray = [];
        var index = 0;

        while (index < items.length) {
          newArray.push(items.slice(index, index += maxNumberInRow));
        }

        return newArray.map(function (array, index1) {
          return _react.default.createElement(_reactNative.View, {
            key: index1,
            style: [Styles.selectors]
          }, array.map(function (item, index2) {
            var realIndex = index2 + maxNumberInRow * index1;
            var selected = selectedIndexs.indexOf(realIndex) !== -1;
            var numInOneRow = itemCount > maxNumberInRow ? maxNumberInRow : itemCount;
            var hideTitle = items.findIndex(function (item) {
              return item;
            }) === -1 || numInOneRow >= 5 && _Host.default.locale.language !== 'zh' || itemCount >= hideTitleLeastNumber;
            return _react.default.createElement(_react.Fragment, {
              key: index2 + maxNumberInRow * index1
            }, hasSeparator && realIndex > 0 ? _react.default.createElement(_reactNative.View, {
              style: Styles.separator
            }) : null, _react.default.createElement(_CircleButton.default, {
              sizeLevel: sizeLevel,
              horizontal: isHorizontal,
              themeColor: themeColor,
              disabled: disabled || switchDisabled,
              selected: selected,
              title: hideTitle ? '' : item.title,
              icon: item.icon,
              iconSelected: item.iconSelected,
              iconText: item.title || '',
              onPress: function onPress() {
                _this.select(realIndex);
              }
            }));
          }), itemCount > maxNumberInRow && itemCount % maxNumberInRow !== 0 && index1 === parseInt(itemCount / maxNumberInRow) ? Array.apply(null, Array(maxNumberInRow - itemCount % maxNumberInRow)).map(function (item, index) {
            return _react.default.createElement(_reactNative.View, {
              style: {
                opacity: 0
              },
              key: index
            }, _react.default.createElement(_CircleButton.default, {
              sizeLevel: sizeLevel,
              disabled: true
            }));
          }) : null);
        });
      };

      return _this;
    }

    (0, _createClass2.default)(SelectorWithButton, [{
      key: "getSizeLevel",
      value: function getSizeLevel(items, sizeLevel) {
        var itemCount = items.length;
        return itemCount <= 2 ? 0 : itemCount === 3 ? 1 : 2;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            title = _this$props3.title,
            subtitle = _this$props3.subtitle,
            items = _this$props3.items,
            hasShadow = _this$props3.hasShadow,
            showSwitch = _this$props3.showSwitch,
            disabled = _this$props3.disabled,
            switchOn = _this$props3.switchOn,
            themeColor = _this$props3.themeColor,
            onSwitch = _this$props3.onSwitch,
            switchDisabled = _this$props3.switchDisabled,
            maxNumberInRow = _this$props3.maxNumberInRow,
            hideTitleLeastNumber = _this$props3.hideTitleLeastNumber;

        if (!items || !items.length) {
          return null;
        }

        var Wrap = hasShadow ? _ContainerWithShadowAndSeparator.default : _react.Fragment;
        var sizeLevel = this.getSizeLevel(items);
        return _react.default.createElement(Wrap, null, _react.default.createElement(_reactNative.View, {
          style: Styles.container
        }, title || subtitle || showSwitch ? _react.default.createElement(_reactNative.View, {
          style: [Styles.header, disabled ? {
            opacity: 0.3
          } : null]
        }, title || subtitle ? _react.default.createElement(_reactNative.View, {
          style: Styles.titleContainer
        }, title ? _react.default.createElement(_reactNative.Text, {
          style: Styles.title
        }, title) : null, title && subtitle ? _react.default.createElement(_reactNative.View, {
          style: Styles.titleSeparator
        }) : null, subtitle ? _react.default.createElement(_reactNative.Text, {
          style: Styles.subtitle
        }, subtitle) : null) : null, showSwitch ? _react.default.createElement(_Switch.default, {
          disabled: disabled,
          value: switchOn,
          onTintColor: themeColor || _colors.ColorGreen,
          onValueChange: onSwitch
        }) : null) : null, showSwitch && !switchOn ? null : _react.default.createElement(_reactNative.View, {
          style: [title || subtitle || showSwitch ? Styles.selectorsWithHeader : null, items.length >= maxNumberInRow ? null : [Styles.selectorsPadding0, Styles.selectorsPadding1, Styles.selectorsPadding2, Styles.selectorsPadding3][sizeLevel]]
        }, this.getSelectors())));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var selectedIndexsProp = nextProps.initSelectedIndexs;
        var selectedIndexsState = prevState.initSelectedIndexs;

        if ((0, _fns.isSameArrayElements)(selectedIndexsProp, selectedIndexsState)) {
          return null;
        }

        return {
          selectedIndexs: selectedIndexsProp
        };
      }
    }]);
    return SelectorWithButton;
  }(_react.Component);

  exports.default = SelectorWithButton;
  SelectorWithButton.propTypes = {
    title: _propTypes.default.string,
    items: _propTypes.default.arrayOf(_propTypes.default.shape({
      icon: _propTypes.default.oneOf([_propTypes.default.number, _propTypes.default.object]).required,
      iconSelected: _propTypes.default.oneOf([_propTypes.default.number, _propTypes.default.object]).required,
      title: _propTypes.default.string
    })),
    initSelectedIndexs: _propTypes.default.array,
    onSelected: _propTypes.default.func,
    disabled: _propTypes.default.bool,
    switchDisabled: _propTypes.default.bool,
    themeColor: _propTypes.default.any,
    offColor: _propTypes.default.any,
    multiple: _propTypes.default.bool,
    minSelected: _propTypes.default.number,
    maxSelected: _propTypes.default.number,
    showSwitch: _propTypes.default.bool,
    switchOn: _propTypes.default.bool,
    onSwitch: _propTypes.default.func,
    hasShadow: _propTypes.default.bool,
    maxNumberInRow: _propTypes.default.number,
    hideTitleLeastNumber: _propTypes.default.number
  };
  SelectorWithButton.defaultProps = {
    title: '',
    items: [],
    initSelectedIndexs: [0],
    onSelected: _fns.NOOP,
    disabled: false,
    switchDisabled: false,
    themeColor: '',
    offColor: '',
    multiple: false,
    minSelected: 1,
    maxSelected: Infinity,
    showSwitch: false,
    switchOn: true,
    onSwitch: _fns.log,
    hasShadow: true,
    maxNumberInRow: 4,
    hideTitleLeastNumber: 1000
  };
  ;

  var Styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: '#fff',
      paddingHorizontal: (0, _sizes.adjustSize)(60)
    },
    header: {
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    titleContainer: {
      flex: 1,
      height: (0, _sizes.adjustSize)(156),
      flexDirection: 'row',
      alignItems: 'center'
    },
    title: {
      fontSize: (0, _sizes.adjustSize)(42),
      fontFamily: _fonts.FontDefault,
      color: '#000'
    },
    titleSeparator: {
      width: 1,
      height: (0, _sizes.adjustSize)(42),
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      marginHorizontal: (0, _sizes.adjustSize)(18)
    },
    subtitle: {
      fontSize: (0, _sizes.adjustSize)(36),
      fontFamily: _fonts.FontDefault,
      color: 'rgba(0, 0, 0, 0.6)'
    },
    selectors: {
      paddingVertical: (0, _sizes.adjustSize)(60),
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-start'
    },
    selectorsWithHeader: {
      paddingTop: 0
    },
    selectorsPadding0: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorsPadding1: {
      paddingHorizontal: (0, _sizes.adjustSize)(78)
    },
    selectorsPadding2: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorsPadding3: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorWithHeader: {
      paddingTop: 0
    },
    separator: {
      width: 1,
      height: (0, _sizes.adjustSize)(120),
      backgroundColor: 'rgba(0, 0, 0, 0.15)',
      marginHorizontal: (0, _sizes.adjustSize)(60)
    }
  });
},10547,[14308,14305,14359,14320,14323,14371,14377,14386,10297,10033,10318,10347,10550,10791,10035,10776,10779,10782,10785]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _colors = _$$_REQUIRE(_dependencyMap[10]);

  var _sizes = _$$_REQUIRE(_dependencyMap[11]);

  var _fonts = _$$_REQUIRE(_dependencyMap[12]);

  var _fns = _$$_REQUIRE(_dependencyMap[13]);

  var Size72 = (0, _sizes.adjustSize)(72);
  var Size120 = (0, _sizes.adjustSize)(120);
  var Size168 = (0, _sizes.adjustSize)(168);
  var Size150 = (0, _sizes.adjustSize)(150);
  var Size138 = (0, _sizes.adjustSize)(138);

  var CircleButton = function (_Component) {
    (0, _inherits2.default)(CircleButton, _Component);

    function CircleButton() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CircleButton);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CircleButton)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        isPressing: false
      };

      _this.onPress = function () {
        var _this$props = _this.props,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress;

        if (disabled) {
          return;
        }

        onPress();
      };

      _this.onPressIn = function () {
        var showHighlight = _this.props.showHighlight;

        if (showHighlight) {
          _this.setState({
            isPressing: true
          });
        }
      };

      _this.onPressOut = function () {
        _this.setState({
          isPressing: false
        });
      };

      return _this;
    }

    (0, _createClass2.default)(CircleButton, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            sizeLevel = _this$props2.sizeLevel,
            selected = _this$props2.selected,
            title = _this$props2.title,
            icon = _this$props2.icon,
            iconSelected = _this$props2.iconSelected,
            iconText = _this$props2.iconText,
            themeColor = _this$props2.themeColor,
            disabled = _this$props2.disabled,
            horizontal = _this$props2.horizontal,
            offColor = _this$props2.offColor,
            themeTextColor = _this$props2.themeTextColor,
            offTextColor = _this$props2.offTextColor;
        var isPressing = this.state.isPressing;
        var containerSizeStyle = Styles[['container0', 'container1', 'container2', 'container3'][sizeLevel || 0]] || Styles.container0;
        var iconContainerSizeStyle = Styles[['iconContainer0', 'iconContainer1', 'iconContainer2', 'iconContainer3'][sizeLevel || 0]] || Styles.iconContainer0;
        selected = selected || isPressing;
        return _react.default.createElement(_reactNative.View, {
          style: _reactNative.StyleSheet.flatten([Styles.container, containerSizeStyle, horizontal ? Styles.containerHorizontal : null, disabled ? {
            opacity: 0.3
          } : null])
        }, _react.default.createElement(_reactNative.TouchableOpacity, {
          disabled: disabled,
          style: _reactNative.StyleSheet.flatten([Styles.iconContainer, iconContainerSizeStyle, selected ? {
            backgroundColor: themeColor || _colors.ColorGreen,
            borderColor: themeColor || _colors.ColorGreen
          } : offColor ? {
            backgroundColor: offColor,
            borderColor: offColor
          } : null, disabled ? Styles.iconContainerDisabled : null, disabled && selected ? Styles.iconContainerDisabledSelected : null]),
          activeOpacity: 0.15,
          onPress: this.onPress,
          onPressIn: this.onPressIn,
          onPressOut: this.onPressOut
        }, icon ? _react.default.createElement(_reactNative.Image, {
          style: _reactNative.StyleSheet.flatten([Styles.icon]),
          source: selected && !disabled ? iconSelected || iconSelected : icon
        }) : _react.default.createElement(_reactNative.Text, {
          style: [Styles.iconText, selected && !disabled ? Styles.iconTextSelected : null]
        }, iconText)), title ? _react.default.createElement(_reactNative.Text, {
          style: _reactNative.StyleSheet.flatten([Styles.title, selected ? {
            color: themeTextColor ? themeTextColor : themeColor || _colors.ColorGreen
          } : offTextColor ? offTextColor : null, disabled ? Styles.titleDisabled : null, horizontal ? Styles.titleHorizontal : null]),
          numberOfLines: 0
        }, title) : null);
      }
    }]);
    return CircleButton;
  }(_react.Component);

  exports.default = CircleButton;
  CircleButton.propTypes = {
    sizeLevel: _propTypes.default.oneOf([0, 1, 2, 3]),
    themeColor: _propTypes.default.any,
    offColor: _propTypes.default.any,
    disabled: _propTypes.default.bool,
    showHighlight: _propTypes.default.bool,
    selected: _propTypes.default.bool,
    horizontal: _propTypes.default.bool,
    onPress: _propTypes.default.func,
    title: _propTypes.default.string,
    icon: _propTypes.default.any,
    iconSelected: _propTypes.default.any,
    iconText: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  };
  CircleButton.defaultProps = {
    sizeLevel: 0,
    themeColor: '',
    offColor: '',
    disabled: false,
    showHighlight: false,
    selected: false,
    horizontal: false,
    onPress: _fns.NOOP,
    title: '',
    icon: null,
    iconSelected: null,
    iconText: ''
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center'
    },
    container0: {
      width: Size120
    },
    container1: {
      width: Size168
    },
    container2: {
      width: Size150
    },
    container3: {
      width: Size138
    },
    containerHorizontal: {
      width: 'auto',
      flex: 1,
      flexDirection: 'row'
    },
    iconContainer: {
      justifyContent: 'center',
      alignItems: 'center',
      borderWidth: 1,
      borderColor: 'rgba(176, 182, 184, 0.4)'
    },
    iconContainer0: {
      width: Size120,
      height: Size120,
      borderRadius: Size120 / 2
    },
    iconContainer1: {
      width: Size168,
      height: Size168,
      borderRadius: Size168 / 2
    },
    iconContainer2: {
      width: Size150,
      height: Size150,
      borderRadius: Size150 / 2
    },
    iconContainer3: {
      width: Size138,
      height: Size138,
      borderRadius: Size138 / 2
    },
    iconContainerDisabled: {
      backgroundColor: 'transparent',
      borderColor: 'rgba(197, 201, 203, 1)'
    },
    iconContainerDisabledSelected: {
      backgroundColor: 'rgba(197, 201, 203, 0.3)',
      borderColor: 'rgba(197, 201, 203, 1)'
    },
    icon: {
      resizeMode: 'contain',
      width: Size72,
      height: Size72
    },
    iconText: {
      fontFamily: "",
      fontSize: (0, _sizes.adjustSize)(48),
      color: '#B0B6B8'
    },
    iconTextSelected: {
      fontSize: (0, _sizes.adjustSize)(54),
      color: '#FFF'
    },
    title: {
      marginTop: (0, _sizes.adjustSize)(27),
      textAlign: 'center',
      fontSize: (0, _sizes.adjustSize)(36),
      fontFamily: "",
      color: '#7F7F7F'
    },
    title3: {
      display: 'none'
    },
    titleDisabled: {
      color: '#7F7F7F'
    },
    titleHorizontal: {
      marginTop: 0,
      flex: 1,
      textAlign: 'left',
      marginLeft: (0, _sizes.adjustSize)(39)
    }
  });
},10550,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10785,10776,10782,10779]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _SliderWithHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _fns = _$$_REQUIRE(_dependencyMap[5]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[6]);

  var _handlers = _$$_REQUIRE(_dependencyMap[7]);

  var _default = {
    UIComponent: _SliderWithHeader.default,
    name: 'SliderWithHeader',
    adapter: {
      handle: function handle(v) {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 2),
            specSlider = _this$item$specs[0],
            specSwitch = _this$item$specs[1],
            onSlide = _this$item.onSlide,
            onSwitch = _this$item.onSwitch,
            onSliding = _this$item.onSliding,
            hasShadow = _this$item.hasShadow,
            min = _this$item.min,
            max = _this$item.max,
            step = _this$item.step,
            contentType = _this$item.contentType,
            showEndText = _this$item.showEndText,
            afterSlide = _this$item.afterSlide,
            afterSlideValidator = _this$item.afterSlideValidator;

        var i18n = this.i18n;
        var values = this.values;
        var functionalKeys = this.functionalKeys;
        var functionalValues = this.functionalValues;
        var handleSlide = (0, _handlers.getHandler)(onSlide);
        var handleSwitch = (0, _handlers.getHandler)(onSwitch);
        var themeColorFn = this.themeColorFn || (this.themeColorFn = this.item.themeColor ? (0, _fns.getStringGenerator)(this.item.themeColor) : null);
        var handleSliding = (0, _handlers.getHandler)(onSliding);
        var handleAfterSlide = (0, _handlers.getHandler)(afterSlide);
        var afterSlideValidatorFn = this.afterSlideValidatorFn || (this.afterSlideValidatorFn = afterSlideValidator ? (0, _fns.getStringGenerator)(afterSlideValidator) : null);
        var slideValue = values[0];
        var newState = {
          hasShadow: hasShadow,
          min: min,
          max: max,
          step: step,
          contentType: contentType,
          showEndText: showEndText,
          initValue: slideValue,
          onSlidingChange: function onSlidingChange(value) {
            var _values = (0, _toArray2.default)(values),
                vSlider = _values[0],
                rest = _values.slice(1);

            _this.setState({
              subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, [value].concat((0, _toConsumableArray2.default)(rest))) : ''
            });

            if (handleSliding) {
              handleSliding(_this.item, specSlider, value);
            }
          },
          onSlidingComplete: handleSlide ? function (value) {
            handleSlide(_this.item, specSlider, value, (0, _toConsumableArray2.default)(values), i18n, {
              onSuccess: handleAfterSlide ? function () {
                var theValues = (0, _toConsumableArray2.default)(functionalValues);
                var theKey = (0, _instanceManager.getPropKey)(specSlider);
                var theIndex = functionalKeys.findIndex(function (k) {
                  return k === theKey;
                });

                if (theIndex !== -1) {
                  theValues[theIndex] = value;
                }

                var afterSlideValidated = afterSlideValidatorFn ? afterSlideValidatorFn.apply(undefined, (0, _toConsumableArray2.default)(theValues)) : false;

                if (!afterSlideValidated) {
                  return;
                }

                handleAfterSlide(_this.item, specSlider, value, theValues, i18n);
              } : null
            });
          } : _fns.NOOP,
          switchDisabled: specSwitch && !values[1],
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          showSwitch: !!specSwitch,
          switchOn: !!values[1],
          onSwitch: handleSwitch ? function (value) {
            handleSwitch(_this.item, specSwitch, value);
          } : _fns.NOOP
        };

        if (themeColorFn !== null) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10553,[14305,14359,22396,14347,10556,10779,10007,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Switch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _SlideGear = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _fns = _$$_REQUIRE(_dependencyMap[13]);

  var _sizes = _$$_REQUIRE(_dependencyMap[14]);

  var _fonts = _$$_REQUIRE(_dependencyMap[15]);

  var _colors = _$$_REQUIRE(_dependencyMap[16]);

  var SliderWithHeader = function (_Component) {
    (0, _inherits2.default)(SliderWithHeader, _Component);

    function SliderWithHeader() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, SliderWithHeader);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SliderWithHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.onSlidingChange = function (v) {
        var _this$props = _this.props,
            onSlidingChange = _this$props.onSlidingChange,
            options = _this$props.options,
            min = _this$props.min,
            max = _this$props.max,
            step = _this$props.step;
        var isRange = min !== max && step !== 0;
        onSlidingChange(isRange ? v : options[v]);
      };

      _this.onSlidingComplete = function (v) {
        var _this$props2 = _this.props,
            onSlidingComplete = _this$props2.onSlidingComplete,
            options = _this$props2.options,
            min = _this$props2.min,
            max = _this$props2.max,
            step = _this$props2.step;
        var isRange = min !== max && step !== 0;
        onSlidingComplete(isRange ? v : options[v]);
      };

      return _this;
    }

    (0, _createClass2.default)(SliderWithHeader, [{
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            options = _this$props3.options,
            disabled = _this$props3.disabled,
            switchDisabled = _this$props3.switchDisabled,
            themeColor = _this$props3.themeColor,
            showSwitch = _this$props3.showSwitch,
            switchOn = _this$props3.switchOn,
            onSwitch = _this$props3.onSwitch,
            initValue = _this$props3.initValue,
            title = _this$props3.title,
            subtitle = _this$props3.subtitle,
            hasShadow = _this$props3.hasShadow,
            min = _this$props3.min,
            max = _this$props3.max,
            step = _this$props3.step,
            contentType = _this$props3.contentType,
            showEndText = _this$props3.showEndText;
        var isRange = min !== max && step !== 0;

        if ((!options || !options.length) && !isRange) {
          return null;
        }

        var initSelectedIndex = options.findIndex(function (option) {
          return option === initValue;
        });
        var Wrap = hasShadow ? _ContainerWithShadowAndSeparator.default : _react.Fragment;
        return _react.default.createElement(Wrap, null, _react.default.createElement(_reactNative.View, {
          style: Styles.container
        }, title || subtitle || showSwitch ? _react.default.createElement(_reactNative.View, {
          style: [Styles.header, disabled ? {
            opacity: 0.3
          } : null]
        }, title || subtitle ? _react.default.createElement(_reactNative.View, {
          style: Styles.titleContainer
        }, title ? _react.default.createElement(_reactNative.Text, {
          style: Styles.title
        }, title) : null, title && subtitle ? _react.default.createElement(_reactNative.View, {
          style: Styles.titleSeparator
        }) : null, subtitle ? _react.default.createElement(_reactNative.Text, {
          style: Styles.subtitle
        }, subtitle) : null) : null, showSwitch ? _react.default.createElement(_Switch.default, {
          disabled: disabled,
          value: switchOn,
          onTintColor: themeColor || _colors.ColorGreen,
          onValueChange: onSwitch
        }) : null) : null, showSwitch && !switchOn ? null : _react.default.createElement(_reactNative.View, {
          style: [Styles.sliderContainer, title || subtitle || showSwitch ? Styles.sliderContainerWithHeader : null]
        }, _react.default.createElement(_SlideGear.default, {
          disabled: disabled || showSwitch && switchDisabled,
          containerStyle: Styles.slider,
          options: isRange ? [] : options,
          minimumTrackTintColor: themeColor || _colors.ColorGreen,
          contentType: contentType,
          showEndText: showEndText,
          value: isRange ? initValue : Math.max(0, initSelectedIndex),
          optionMin: min,
          optionMax: max,
          optionStep: step,
          onValueChange: this.onSlidingChange,
          onSlidingComplete: this.onSlidingComplete
        }))));
      }
    }]);
    return SliderWithHeader;
  }(_react.Component);

  exports.default = SliderWithHeader;
  SliderWithHeader.propTypes = {
    options: _propTypes.default.array,
    min: _propTypes.default.number,
    max: _propTypes.default.number,
    step: _propTypes.default.number,
    initValue: _propTypes.default.number,
    onSlidingChange: _propTypes.default.func,
    onSlidingComplete: _propTypes.default.func,
    disabled: _propTypes.default.bool,
    switchDisabled: _propTypes.default.bool,
    themeColor: _propTypes.default.any,
    title: _propTypes.default.string,
    subtitle: _propTypes.default.string,
    contentType: _propTypes.default.string,
    showEndText: _propTypes.default.bool,
    showSwitch: _propTypes.default.bool,
    switchOn: _propTypes.default.bool,
    onSwitch: _propTypes.default.func,
    hasShadow: _propTypes.default.bool
  };
  SliderWithHeader.defaultProps = {
    options: [],
    min: 0,
    max: 0,
    step: 0,
    initValue: 0,
    onSlidingChange: _fns.log,
    onSlidingComplete: _fns.log,
    disabled: false,
    switchDisabled: false,
    themeColor: '',
    title: '',
    subtitle: '',
    contentType: '',
    showEndText: true,
    showSwitch: false,
    switchOn: true,
    onSwitch: _fns.log,
    hasShadow: true
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: '#fff',
      paddingHorizontal: (0, _sizes.adjustSize)(60)
    },
    header: {
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    titleContainer: {
      flex: 1,
      height: (0, _sizes.adjustSize)(156),
      flexDirection: 'row',
      alignItems: 'center'
    },
    title: {
      fontSize: (0, _sizes.adjustSize)(42),
      fontFamily: _fonts.FontDefault,
      color: '#000'
    },
    titleSeparator: {
      width: 1,
      height: (0, _sizes.adjustSize)(42),
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      marginHorizontal: (0, _sizes.adjustSize)(18)
    },
    subtitle: {
      fontSize: (0, _sizes.adjustSize)(36),
      fontFamily: _fonts.FontDefault,
      color: 'rgba(0, 0, 0, 0.6)'
    },
    sliderContainer: {
      paddingVertical: (0, _sizes.adjustSize)(60)
    },
    sliderContainerWithHeader: {
      paddingTop: 0
    }
  });
},10556,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10347,10559,10791,10779,10776,10782,10785]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _Styles = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Block = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNativeLinearGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _colors = _$$_REQUIRE(_dependencyMap[13]);

  var TYPE = {
    CIRCLE: 'circle',
    RECTANGLE: 'rectangle'
  };
  var CONTENTTYPE = {
    NUM: 'num',
    COLOR: 'color',
    COLORTEM: 'colorTem'
  };
  var COLORRANGE = {
    "0.00": '#FFA100',
    "0.10": '#FFFA00',
    "0.20": '#9AFF00',
    "0.30": '#01FF00',
    "0.40": '#00FDA4',
    "0.50": '#00EEFF',
    "0.60": '#007CFF',
    "0.70": '#0600F9',
    "0.80": '#BF00FC',
    "0.90": '#FF0081',
    "1.00": '#FF0000'
  };
  var COLORTEMRANGE = {
    "0.00": '#FFAE00',
    "0.50": '#F6EFD6',
    "1.00": '#8AB2D4'
  };
  Object.freeze(TYPE);
  Object.freeze(CONTENTTYPE);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      screenWidth = _Dimensions$get.width;

  var DEFAULT_SIZE = 40;
  var MIN_MARGIN = 5;
  var MARGIN = 7.5;
  var MAX_MARGIN = 10;
  var DEFAULT_HEIGHT = 55;
  var DEFAULT_BLOCK_COLOR = '#fff';

  var SlideGear = function (_React$Component) {
    (0, _inherits2.default)(SlideGear, _React$Component);

    function SlideGear(props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, SlideGear);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SlideGear).call(this, props, context));

      if (_this.props.options.length === 0) {
        if (!_this.props.optionStep) {
          console.warn('options 为空数组 且无 optionStep');
          _this.showNothing = true;
          return (0, _possibleConstructorReturn2.default)(_this);
        } else {
          _this.optionMin = _this.props.optionMin;
          _this.optionMax = _this.props.optionMax;
          _this.optionStep = _this.props.optionStep;
          _this.length = (_this.optionMax - _this.optionMin) / _this.optionStep + 1;
        }
      } else {
        _this.options = _this.props.options;
        _this.length = _this.props.options.length;
      }

      var _this$getCorrectLayou = _this.getCorrectLayout(),
          margin = _this$getCorrectLayou.margin,
          blockWidth = _this$getCorrectLayou.blockWidth,
          blockHeight = _this$getCorrectLayou.blockHeight,
          containerHeight = _this$getCorrectLayou.containerHeight;

      _this.margin = margin;
      _this.blockWidth = blockWidth;
      _this.blockHeight = blockHeight;
      _this.containerHeight = containerHeight;
      console.log("\u6ED1\u5757\u9AD8\u5EA6: " + blockHeight + "\n\u6ED1\u5757\u5BBD\u5EA6: " + blockWidth + "\n\u6ED1\u5757\u5468\u56F4\u95F4\u8DDD: " + margin + "\n\u5BB9\u5668\u9AD8\u5EA6: " + containerHeight);
      _this.state = {
        pan: new _reactNative.Animated.Value(0),
        moveX: new _reactNative.Animated.Value(0),
        value: _this.props.value,
        dragToValueMin: 0,
        dragToValueMax: 0
      };
      _this.translateX = 0;
      _this.offset = 0;

      _this.constructPanResponder(props);

      return _this;
    }

    (0, _createClass2.default)(SlideGear, [{
      key: "constructPanResponder",
      value: function constructPanResponder(props) {
        this.panResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
            return true;
          },
          onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {
            return false;
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
            return !props.disabled;
          },
          onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {
            return !props.disabled;
          },
          onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {
            return true;
          },
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderGrant: this._onPanResponderGrant.bind(this),
          onPanResponderMove: _reactNative.Animated.event([null, {
            dx: this.state.pan,
            moveX: this.state.moveX
          }]),
          onPanResponderRelease: this._onPanResponderRelease.bind(this),
          onPanResponderTerminate: this._onPanResponderRelease.bind(this)
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        console.log(11111111, newProps);

        if (this.sliding) {
          return;
        }

        var value = newProps.value,
            disabled = newProps.disabled;

        if (disabled !== this.props.disabled) {
          this.constructPanResponder(newProps);
        }

        if (this.optionStep) {
          var optionMin = newProps.optionMin,
              optionMax = newProps.optionMax,
              optionStep = newProps.optionStep;

          if (optionMin === this.state.optionMin && optionMax === this.state.optionMax && optionStep === this.state.optionStep && value === this.state.value) {
            return;
          }

          this.optionMin = optionMin;
          this.optionMax = optionMax;
          this.optionStep = optionStep;
          this.length = (this.optionMax - this.optionMin) / this.optionStep + 1;

          if (value !== this.props.value) {
            this.state.value = value;
          }
        } else {
          var options = newProps.options;
          if (value === this.state.value && this.isSameArray(options, this.props.options)) return;

          if (!this.isSameArray(options, this.props.options)) {
            if (!(options instanceof Array) || options.length === 0) {
              console.warn('options 不是数组或者是空数组');
              this.showNothing = true;
              return;
            } else {
              this.showNothing = false;
              this.options = options;
              this.length = options.length;
            }
          }

          if (value !== this.props.value) {
            if (value < 0 || value >= this.length) {
              console.warn('value 不在 options 范围内');
              this.state.value = 0;
            } else {
              this.state.value = value;
            }
          }
        }

        this.calculateCoord(this.containerLayout);
      }
    }, {
      key: "isSameArray",
      value: function isSameArray(arr1, arr2) {
        if (!(arr1 instanceof Array) || !(arr2 instanceof Array)) return false;
        if (arr1.length !== arr2.length) return false;

        for (var i = 0; i < arr1.length; i++) {
          if (arr1[i] !== arr2[i]) return false;
        }

        return true;
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this.state.pan.addListener(function (e) {
          var _this2$state = _this2.state,
              min = _this2$state.dragToValueMin,
              max = _this2$state.dragToValueMax;

          if (e.value >= min && e.value <= max) {
            _this2.translateX = e.value;
          } else {
            _this2.translateX = e.value < min ? min : max;
          }

          _this2._background.setNativeProps({
            width: _this2.translateX + _this2.margin * 2 + _this2.blockWidth - _this2.state.dragToValueMin
          });
        });
        this.state.moveX.addListener(function (e) {
          var index = _this2.getClosetIndex(e.value);

          if (_this2.props.onValueChange) {
            if (_this2.props.contentType === CONTENTTYPE.COLOR) {
              var colorValue = _this2.getColorFromValue(index);

              _this2.props.onValueChange(colorValue);
            } else {
              _this2.props.onValueChange(index);
            }
          }
        });
      }
    }, {
      key: "getClosetIndex",
      value: function getClosetIndex(moveX) {
        var adjustCoord = moveX - this.offset;
        console.log("拖拽过程中Block的中心点坐标adjustCoord: ", adjustCoord);

        if (this.optionStep) {
          var value;

          if (adjustCoord <= this.firstCoord) {
            value = this.optionMin;
          } else if (adjustCoord >= this.endCoord) {
            value = this.optionMax;
          } else {
            var index = Math.round((adjustCoord - this.firstCoord) / this.d);
            value = index * this.optionStep + this.optionMin;
            if (value > this.optionMax) value = this.optionMax;
          }

          console.log("get step value: ", value);
          return value;
        } else {
          var diffs = this.coords.map(function (coord) {
            return Math.abs(coord - adjustCoord);
          });
          return diffs.indexOf(Math.min.apply(Math, (0, _toConsumableArray2.default)(diffs)));
        }
      }
    }, {
      key: "getColorFromValue",
      value: function getColorFromValue(value) {
        var getter = (0, _colors.colorGetterforRange)(this.props.colorRangeObject);
        var colorHex = getter.getColorFromPercent((value - this.props.optionMin) / (this.props.optionMax - this.props.optionMin) * 100);
        var colorValue = (0, _colors.transformHexToDigtal)(colorHex);
        return colorValue;
      }
    }, {
      key: "getValueFromColor",
      value: function getValueFromColor(colorValue) {
        var getter = (0, _colors.colorGetterforRange)(this.props.colorRangeObject);
        var percent = getter.getPercentFromColor((0, _colors.transformDigtalToHex)(colorValue));
        var value = this.props.optionMin + (this.props.optionMax - this.props.optionMin) * (percent / 100);
        return value;
      }
    }, {
      key: "_onPanResponderGrant",
      value: function _onPanResponderGrant(e, gesture) {
        this.sliding = true;
        this.state.pan.setOffset(this.translateX);
        this.state.pan.setValue(0);
        var pageX = e.nativeEvent.pageX;
        this.offset = pageX - this.currentCoord;
        console.log('⬇️⬇️⬇️⬇️⬇️⬇️⬇️滑动开始⬇️⬇️⬇️⬇️⬇️⬇️⬇️');
        console.log("\u6ED1\u5757\u4E2D\u5FC3\u5750\u6807: " + this.currentCoord + "\n\u89E6\u6478\u70B9\u5750\u6807: " + pageX + "\nthis.translateX: " + this.translateX);
      }
    }, {
      key: "_onPanResponderRelease",
      value: function _onPanResponderRelease(e, gesture) {
        var coord = gesture.moveX - this.offset;
        console.log("计算currentCoord时的coord：", coord);

        if (this.optionStep) {
          if (coord >= this.firstCoord && coord <= this.endCoord) {
            this.currentCoord = coord;
          } else {
            console.log("coord越界");
            this.currentCoord = coord < this.firstCoord ? this.firstCoord : this.endCoord;
            console.log("currentCoord: ", this.currentCoord);
          }
        } else {
          var min = this.coords[0];
          var max = this.coords[this.length - 1];

          if (coord >= min && coord <= max) {
            this.currentCoord = coord;
          } else {
            this.currentCoord = coord < min ? min : max;
          }
        }

        var index = this.getClosetIndex(gesture.moveX);

        if (this.props.contentType !== CONTENTTYPE.COLOR) {
          this.state.value = index;
        }

        if (this.props.onSlidingComplete) {
          if (this.props.contentType === CONTENTTYPE.COLOR) {
            var colorValue = this.getColorFromValue(index);
            this.state.value = colorValue;
            this.props.onSlidingComplete(colorValue);
          } else {
            this.props.onSlidingComplete(index);
            this.state.value = index;
          }
        }

        this.offset = 0;
        console.log("\u624B\u52BF\u7ED3\u675F\u5750\u6807: " + coord + "\n\u6ED1\u5757\u6700\u7EC8\u5750\u6807: " + this.currentCoord + "\n\u79BB\u6ED1\u5757\u6700\u8FD1\u7684\u9009\u9879\u4E0B\u6807: " + index);
        console.log('⬆️⬆️⬆️⬆️⬆️⬆️⬆️滑动结束⬆️⬆️⬆️⬆️⬆️⬆️⬆️');
        this.sliding = false;
      }
    }, {
      key: "getCorrectLayout",
      value: function getCorrectLayout() {
        var containerHeight = this.props.containerStyle.height || DEFAULT_HEIGHT;
        var blockWidth = this.props.blockStyle.width || DEFAULT_SIZE;
        var margin = ~~(containerHeight / 10);
        margin = margin > MAX_MARGIN ? MAX_MARGIN : margin;
        margin = margin < MIN_MARGIN ? MIN_MARGIN : margin;
        var blockHeight = containerHeight - margin * 2;
        return {
          margin: margin,
          blockWidth: this.props.type === TYPE.CIRCLE ? blockHeight : blockWidth,
          blockHeight: blockHeight,
          containerHeight: containerHeight
        };
      }
    }, {
      key: "_onLayout",
      value: function _onLayout() {
        var _this3 = this;

        this._container.measure(function (x, y, w, h, px, py) {
          _this3.calculateCoord({
            x: x,
            y: y,
            w: w,
            h: h,
            px: px,
            py: py
          });
        });
      }
    }, {
      key: "calculateCoord",
      value: function calculateCoord(obj) {
        if (!obj) {
          return;
        }

        var x = obj.x,
            y = obj.y,
            w = obj.w,
            h = obj.h;
        this.containerLayout = obj;
        var offset = this.margin * 2 + this.blockWidth;
        var startCoord = x + offset / 2;
        var d = (w - offset) / (this.length - 1);
        this.d = d;
        console.log("\u5BB9\u5668\u8D77\u59CB\u5750\u6807: " + x + "\n\u5B9E\u9645\u5BBD\u5EA6: " + w + "\n\u5404\u9009\u9879\u4E2D\u5FC3\u5750\u6807\u95F4\u8DDD: " + d);

        if (d <= 0) {
          console.warn('容器实际宽度 < 滑块宽度，滑块无法移动，请仔细检查 containerStyle 或者增加容器的宽度');
        }

        if (!this.optionStep) {
          this.coords = this.options.map(function (v, i) {
            return d > 0 ? startCoord + d * i : 0;
          });
          console.log('各选项中心坐标', this.coords);
          this.currentCoord = this.coords[this.state.value];
        } else {
          this.firstCoord = startCoord;
          this.endCoord = startCoord + d * (this.length - 1);

          if (this.props.contentType !== CONTENTTYPE.COLOR) {
            this.currentCoord = startCoord + d * ((this.state.value - this.optionMin) / this.optionStep);
          } else {
            var value = this.getValueFromColor(this.state.value);
            this.currentCoord = startCoord + d * Math.round((value - this.optionMin) / this.optionStep);
          }
        }

        this.totalWidth = w;
        this.getDragRange();
      }
    }, {
      key: "getDragRange",
      value: function getDragRange(callback) {
        var _this4 = this;

        if (!this.optionStep) {
          this.setState({
            dragToValueMin: this.coords[0] - this.currentCoord || 0,
            dragToValueMax: this.coords[this.length - 1] - this.currentCoord || 0
          }, function (_) {
            console.log("\u6ED1\u5757\u4E2D\u5FC3\u5750\u6807: " + _this4.currentCoord + "\n\u53EF\u6ED1\u52A8\u8303\u56F4: " + _this4.state.dragToValueMin + " ~ " + _this4.state.dragToValueMax);
            callback && callback();

            _this4.state.pan.setOffset(0);

            _this4.state.pan.setValue(0);
          });
        } else {
          console.log("计算drag范围时的currentCoord： ", this.currentCoord);
          this.setState({
            dragToValueMin: this.firstCoord - this.currentCoord || 0,
            dragToValueMax: this.endCoord - this.currentCoord || 0
          }, function (_) {
            console.log("\u6ED1\u5757\u4E2D\u5FC3\u5750\u6807: " + _this4.currentCoord + "\n\u53EF\u6ED1\u52A8\u8303\u56F4: " + _this4.state.dragToValueMin + " ~ " + _this4.state.dragToValueMax);
            callback && callback();

            _this4.state.pan.setOffset(0);

            _this4.state.pan.setValue(0);
          });
        }
      }
    }, {
      key: "renderDraggable",
      value: function renderDraggable() {
        var _this$state = this.state,
            min = _this$state.dragToValueMin,
            max = _this$state.dragToValueMax;
        if (min === undefined) return null;
        var position = {
          position: 'absolute',
          left: -min - this.margin,
          top: -this.margin
        };
        var innerCircle = this.props.type === TYPE.CIRCLE ? {
          width: this.blockHeight,
          height: this.blockHeight,
          borderRadius: this.blockHeight / 2
        } : {
          width: this.blockWidth,
          height: this.blockHeight,
          borderRadius: 0
        };
        var touchArea = {
          width: this.blockWidth + this.margin * 4,
          height: this.containerHeight + this.margin * 2,
          backgroundColor: 'transparent',
          alignItems: 'center',
          justifyContent: 'center'
        };
        var panStyle = {
          transform: [{
            translateX: this.state.pan.interpolate({
              inputRange: [min - 1, min, max, max + 1],
              outputRange: [min, min, max, max]
            })
          }]
        };
        return _react.default.createElement(_Block.default, {
          panHandlers: this.panResponder.panHandlers,
          style: [position, panStyle]
        }, _react.default.createElement(_reactNative.View, {
          style: touchArea
        }, _react.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: DEFAULT_BLOCK_COLOR
          }, this.props.blockStyle, innerCircle]
        })));
      }
    }, {
      key: "renderBackground",
      value: function renderBackground() {
        var _this5 = this;

        var _this$state2 = this.state,
            min = _this$state2.dragToValueMin,
            max = _this$state2.dragToValueMax;
        if (min === undefined) return null;
        return _react.default.createElement(_reactNative.Animated.View, {
          ref: function ref(background) {
            return _this5._background = background;
          },
          style: {
            position: 'absolute',
            width: this.state.pan.interpolate({
              inputRange: [min - 1, min, max, max + 1],
              outputRange: [this.margin * 2 + this.blockWidth, this.margin * 2 + this.blockWidth, this.totalWidth, this.totalWidth]
            }),
            height: this.containerHeight,
            borderRadius: this.props.type === TYPE.CIRCLE ? this.containerHeight / 2 : 0,
            backgroundColor: this.props.contentType === CONTENTTYPE.NUM ? this.props.minimumTrackTintColor : ''
          }
        }, this.props.showEndText ? _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer, {
            margin: this.margin,
            alignSelf: 'flex-start',
            width: this.blockWidth + this.margin * 2,
            height: this.blockHeight
          }]
        }, _react.default.createElement(_reactNative.Text, {
          style: [styles.text, {
            color: this.props.leftTextColor
          }]
        }, this.optionStep ? this.optionMin : this.options[0])) : null);
      }
    }, {
      key: "renderRightText",
      value: function renderRightText() {
        var width = this.blockWidth + this.margin * 2;

        if (this.optionStep && this.optionMax > 999999) {
          width += 20;
        }

        return _react.default.createElement(_reactNative.View, {
          style: [styles.textContainer, {
            margin: this.margin,
            alignSelf: 'flex-end',
            width: width,
            height: this.blockHeight
          }]
        }, this.props.showEndText ? _react.default.createElement(_reactNative.Text, {
          style: [styles.text, {
            color: this.props.rightTextColor
          }]
        }, this.optionStep ? this.optionMax : this.options[this.length - 1]) : null);
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        if (this.showNothing) return null;
        var containerStyle = {
          height: this.containerHeight,
          borderRadius: this.props.type === TYPE.CIRCLE ? this.containerHeight / 2 : 0,
          backgroundColor: this.props.contentType === CONTENTTYPE.NUM ? this.props.maximumTrackTintColor : ''
        };
        var opacity = this.props.disabled ? 0.3 : 1;
        return _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(_) {
            return _this6._onLayout();
          },
          ref: function ref(container) {
            return _this6._container = container;
          },
          style: [this.props.containerStyle, containerStyle, {
            opacity: opacity
          }]
        }, this.props.contentType === CONTENTTYPE.NUM ? _react.default.createElement(_reactNative.View, null, this.renderRightText(), this.renderBackground(), this.renderDraggable()) : _react.default.createElement(_reactNativeLinearGradient.default, {
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 0
          },
          locations: this.props.contentType === CONTENTTYPE.COLOR ? Object.keys(this.props.colorRangeObject).map(function (value) {
            return Number(value);
          }) : Object.keys(this.props.colorTemRangeObject).map(function (value) {
            return Number(value);
          }),
          colors: this.props.contentType === CONTENTTYPE.COLOR ? Object.values(this.props.colorRangeObject) : Object.values(this.props.colorTemRangeObject),
          style: {
            borderRadius: this.props.type === TYPE.CIRCLE ? this.containerHeight / 2 : 0
          }
        }, this.renderRightText(), this.renderBackground(), this.renderDraggable()));
      }
    }]);
    return SlideGear;
  }(_react.default.Component);

  exports.default = SlideGear;
  SlideGear.propTypes = {
    type: _propTypes.default.oneOf([TYPE.CIRCLE, TYPE.RECTANGLE]),
    options: _propTypes.default.array.isRequired,
    showEndText: _propTypes.default.bool,
    containerStyle: _propTypes.default.object,
    blockStyle: _propTypes.default.object,
    minimumTrackTintColor: _propTypes.default.string,
    leftTextColor: _propTypes.default.string,
    maximumTrackTintColor: _propTypes.default.string,
    rightTextColor: _propTypes.default.string,
    value: _propTypes.default.number,
    disabled: _propTypes.default.bool,
    onValueChange: _propTypes.default.func,
    onSlidingComplete: _propTypes.default.func.isRequired,
    optionMin: _propTypes.default.number,
    optionMax: _propTypes.default.number,
    optionStep: _propTypes.default.number,
    contentType: _propTypes.default.oneOf([CONTENTTYPE.NUM, CONTENTTYPE.COLOR, CONTENTTYPE.COLORTEM]),
    colorRangeObject: _propTypes.default.object,
    colorTemRangeObject: _propTypes.default.object
  };
  SlideGear.defaultProps = {
    type: TYPE.CIRCLE,
    options: [],
    showEndText: true,
    containerStyle: {},
    blockStyle: {},
    minimumTrackTintColor: _Styles.default.common.MHGreen,
    leftTextColor: '#eee',
    maximumTrackTintColor: '#dfe2e3',
    rightTextColor: '#999',
    value: 0,
    disabled: false,
    optionMin: 0,
    optionMax: 0,
    optionStep: 0,
    contentType: CONTENTTYPE.NUM,
    colorRangeObject: COLORRANGE,
    colorTemRangeObject: COLORTEMRANGE
  };
  SlideGear.TYPE = TYPE;
  SlideGear.CONTENTTYPE = CONTENTTYPE;

  var styles = _reactNative.StyleSheet.create({
    textContainer: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    text: {
      fontSize: 15,
      width: '100%',
      textAlign: 'center'
    }
  });
},10559,[14305,14359,14320,14323,14371,14377,14386,10318,10297,10033,10323,10389,14299,10785]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var _LightControl = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[8]);

  var _fns = _$$_REQUIRE(_dependencyMap[9]);

  var _colors = _$$_REQUIRE(_dependencyMap[10]);

  var _handlers = _$$_REQUIRE(_dependencyMap[11]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[12]);

  var _icons = _$$_REQUIRE(_dependencyMap[13]);

  var SourceBgOff = _$$_REQUIRE(_dependencyMap[14]);

  var setTargetProperty = (0, _handlers.getHandler)('setTargetProperty');
  var setScrollAbility = (0, _handlers.getHandler)('setScrollAbility');
  var _default = {
    UIComponent: _LightControl.default,
    name: 'LightControl',
    adapter: {
      isSetting: false,
      lastSupportBrightness: false,
      lastSupportColor: false,
      lastSupportColorTemperature: false,
      onMounted: function onMounted() {
        this.backgroundEventKey = (0, _PageWithNormalNavigator.getBackgroundEventKey)();
        this.navigationEventKey = (0, _PageWithNormalNavigator.getNavigationEventKey)();
        this.setState({
          modeText: this.i18n.modeText ? this.i18n.modeText() : ''
        });
      },
      handle: function handle(v) {
        var _this = this;

        if (this.isSetting) {
          return;
        }

        var values = this.values;
        var i18n = this.i18n;
        var transformedValues = (0, _toConsumableArray2.default)(this.values);

        if (typeof transformedValues[2] === 'number') {
          transformedValues[2] = (0, _colors.transformDigtalToHex)(transformedValues[2]);
        }

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 5),
            _ = _this$item$specs[0],
            specBrightness = _this$item$specs[1],
            specColor = _this$item$specs[2],
            specColorTemperature = _this$item$specs[3],
            specMode = _this$item$specs[4],
            onSetStart = _this$item.onSetStart,
            onSetEnd = _this$item.onSetEnd,
            buttonIcons = _this$item.buttonIcons;

        var disabled = this.state.disabled;
        var specKey = v && 'siid' in v ? (0, _instanceManager.getPropKey)(v) : '';
        var specBrightnessDef = specBrightness ? (0, _instanceManager.getSpecDefinition)(specBrightness) : null;
        var brightnessRange = specBrightnessDef ? specBrightnessDef['value-range'] : null;

        var _values = (0, _slicedToArray2.default)(values, 4),
            mode = _values[0],
            brightness = _values[1],
            color = _values[2],
            colorTemperature = _values[3];

        var modeFn = this.modeFn || (this.item.mode ? this.modeFn = (0, _fns.getStringGenerator)(this.item.mode) : null);
        var supports = modeFn(mode).split('|');
        var supportBrightness = specBrightness && supports[0] === '2';
        var supportColor = specColor && supports[1] === '3';
        var supportColorTemperature = specColorTemperature && supports[1] === '4';
        var colorTemperatureRange = this.colorTemperatureRange || (this.colorTemperatureRange = specColorTemperature ? (0, _instanceManager.getSpecDefinition)(specColorTemperature)['value-range'] : null);
        var handleOnSetStart = this.handleOnSetStart || (onSetStart ? (0, _handlers.getHandler)(onSetStart) : null);
        var handleOnSetEnd = this.handleOnSetEnd || (onSetEnd ? (0, _handlers.getHandler)(onSetEnd) : null);

        if (specKey === (0, _instanceManager.getPropKey)(specBrightness)) {
          this.lastSupportBrightness = true;
        }

        if (specKey === (0, _instanceManager.getPropKey)(specColor)) {
          this.lastSupportColor = true;
          this.lastSupportColorTemperature = false;
        }

        if (specKey === (0, _instanceManager.getPropKey)(specColorTemperature)) {
          this.lastSupportColor = false;
          this.lastSupportColorTemperature = true;
        }

        var nowModeText = '';
        var nowModeIcon = null;

        if (specMode) {
          var specDef = (0, _instanceManager.getSpecDefinition)(specMode);
          var valueList = specDef['value-list'];
          var selectedIndex = valueList.findIndex(function (v) {
            return v.value === values[4];
          });

          if (valueList[selectedIndex] && valueList[selectedIndex].description === "None") {
            nowModeText = '';
            nowModeIcon = null;
          } else {
            nowModeText = i18n.buttonNames && i18n.buttonNames(selectedIndex);
            nowModeIcon = buttonIcons && (0, _icons.getIcon)(buttonIcons[selectedIndex]);
          }
        }

        this.setState({
          setScrollAbility: setScrollAbility,
          nowModeText: nowModeText,
          nowModeIcon: nowModeIcon,
          supportBrightness: supportBrightness,
          brightness: brightness,
          brightnessRange: brightnessRange,
          onBrightnessChanging: function onBrightnessChanging(brightness, pos) {
            _this.setBackground({
              supportBrightness: true,
              brightness: brightness,
              pos: pos
            });

            transformedValues[1] = brightness;
          },
          onBrightnessChanged: function onBrightnessChanged(brightness) {
            setTargetProperty(null, specBrightness, brightness);
          },
          supportColor: supportColor,
          color: color,
          onColorChanging: function onColorChanging(color, pos) {
            _this.setBackground({
              supportColor: true,
              color: color,
              pos: pos
            });

            transformedValues[2] = color;

            if (typeof transformedValues[2] === 'number') {
              transformedValues[2] = (0, _colors.transformDigtalToHex)(transformedValues[2]);
            }
          },
          onColorChanged: function onColorChanged(color) {
            setTargetProperty(null, specColor, color);
          },
          supportColorTemperature: supportColorTemperature,
          colorTemperature: colorTemperature,
          colorTemperatureRange: colorTemperatureRange,
          onColorTemperatureChanging: function onColorTemperatureChanging(colorTemperature, pos) {
            _this.setBackground({
              supportColorTemperature: true,
              colorTemperature: colorTemperature,
              pos: pos
            });

            transformedValues[3] = colorTemperature;

            _this.setPos(pos);
          },
          onColorTemperatureChanged: function onColorTemperatureChanged(colorTemperature) {
            setTargetProperty(null, specColorTemperature, colorTemperature);
          },
          onSetStart: function onSetStart() {
            _this.isSetting = true;
            handleOnSetStart && handleOnSetStart();
          },
          onSetEnd: function onSetEnd() {
            _this.isSetting = false;
            handleOnSetEnd && handleOnSetEnd();

            _this.setPos();
          }
        });
        this.setBackground({
          supportBrightness: supportBrightness || this.lastSupportBrightness,
          brightness: brightness,
          supportColor: supportColor || this.lastSupportColor && !supportColorTemperature,
          color: color,
          supportColorTemperature: supportColorTemperature || this.lastSupportColorTemperature && !supportColor,
          colorTemperature: colorTemperature,
          colorTemperatureRange: colorTemperatureRange
        });
        this.setPos();
      },
      setBackground: function setBackground(props) {
        var cachedBackgroundProps = this.cachedBackgroundProps || {
          SourceBgOff: SourceBgOff
        };
        cachedBackgroundProps = (0, _extends2.default)({}, cachedBackgroundProps, props);
        this.cachedBackgroundProps = cachedBackgroundProps;

        if (!cachedBackgroundProps.supportBrightness || isNaN(cachedBackgroundProps.brightness)) {
          cachedBackgroundProps.brightness = 100;
        }

        if (cachedBackgroundProps.supportColor && !cachedBackgroundProps.color && cachedBackgroundProps.color !== 0) {
          cachedBackgroundProps.color = '#F8AD4C';
        }

        if (cachedBackgroundProps.supportColorTemperature && isNaN(cachedBackgroundProps.colorTemperature)) {
          cachedBackgroundProps.colorTemperature = 4000;
        }

        _reactNative.DeviceEventEmitter.emit(this.backgroundEventKey, _react.default.createElement(_LightControl.Background, cachedBackgroundProps));
      },
      setNavigation: function setNavigation(props) {
        var cachedNavigationProps = this.cachedNavigationProps || {};
        cachedNavigationProps = (0, _extends2.default)({}, cachedNavigationProps, props);
        this.cachedNavigationProps = cachedNavigationProps;

        _reactNative.DeviceEventEmitter.emit(this.navigationEventKey, cachedNavigationProps);
      },
      setPos: function setPos(pos) {
        this.setBackground({
          pos: pos
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        var transformedValues = (0, _toConsumableArray2.default)(this.values);

        if (typeof transformedValues[2] === 'number') {
          transformedValues[2] = (0, _colors.transformDigtalToHex)(transformedValues[2]);
        }

        this.setState({
          disabled: !on
        });
        this.setBackground({
          disabled: !on
        });
        this.setPos();
      }
    }
  };
  exports.default = _default;
},10562,[14308,14305,14344,14347,14359,10297,10033,10565,10821,10779,10785,10520,10007,10013,10574]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getColorTemperatureColor = getColorTemperatureColor;
  exports.default = exports.Background = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _reactNavigation = _$$_REQUIRE(_dependencyMap[11]);

  var _Device = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Host = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _NavigationBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _resources = _$$_REQUIRE(_dependencyMap[16]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _reactNativeSvg = _$$_REQUIRE(_dependencyMap[18]);

  var _dialogManager = _$$_REQUIRE(_dependencyMap[19]);

  var _sizes = _$$_REQUIRE(_dependencyMap[20]);

  var _fns = _$$_REQUIRE(_dependencyMap[21]);

  var _colors = _$$_REQUIRE(_dependencyMap[22]);

  var _fonts = _$$_REQUIRE(_dependencyMap[23]);

  var SourceBrightnessHigh = _$$_REQUIRE(_dependencyMap[24]);

  var SourceBrightnessLow = _$$_REQUIRE(_dependencyMap[25]);

  var SourceTriangle = _$$_REQUIRE(_dependencyMap[26]);

  var SourceBlur = _$$_REQUIRE(_dependencyMap[27]);

  var SourceGuide = _$$_REQUIRE(_dependencyMap[28]);

  var SourceGuideUpDown = _$$_REQUIRE(_dependencyMap[29]);

  var LightGuideCacheKey = 'LightGuideCacheKey000:' + _Device.default.deviceID;

  function getOpacityFromBrightness(brightness) {
    return (50 - brightness / 2) / 100;
  }

  var ColorRange = {
    '0.00': '#FF0000',
    '0.09': '#FF0081',
    '0.19': '#BF00FC',
    '0.28': '#0600F9',
    '0.38': '#007CFF',
    '0.48': '#00EEFF',
    '0.58': '#00FDA4',
    '0.68': '#01FF00',
    '0.77': '#9AFF00',
    '0.84': '#FFFA00',
    '0.94': '#FFA100',
    '1.00': '#FF0000'
  };
  var ColorTemperatureRange = {
    '0.00': '#CDE6FB',
    '1.00': '#FFAF01'
  };

  function getLinearStopsColor(range) {
    var ret = [];

    for (var k in range) {
      if (range.hasOwnProperty(k) && !isNaN(k) && k - 0 >= 0 && k - 1 <= 0) {
        ret.push(_react.default.createElement(_reactNativeSvg.Stop, {
          key: k,
          offset: k,
          stopColor: range[k],
          stopOpacity: "1"
        }));
      }
    }

    return ret;
  }

  var LinearStopsColor = getLinearStopsColor(ColorRange);
  var LinearStopsColorTemperature = getLinearStopsColor(ColorTemperatureRange);
  var ColorGetter = (0, _colors.colorGetterforRange)(ColorRange);
  var ColorTemperatureGetter = (0, _colors.colorGetterforRange)(ColorTemperatureRange);

  function getColorTemperaturePercent(v, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        min = _ref2[0],
        max = _ref2[1];

    return 100 - (v < min ? 0 : v > max ? 100 : min === max ? 50 : (v - min) / (max - min) * 100);
  }

  function getColorTemperatureFromPercent(percent, _ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        min = _ref4[0],
        max = _ref4[1];

    return min === max ? min : Math.round((max - min) * (100 - percent) / 100) + min;
  }

  function mergePercent() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var targetMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var targetMax = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

    if (min >= max || targetMin >= targetMax || value >= max) {
      return targetMax;
    }

    if (value <= min) {
      return targetMin;
    }

    return (value - min) / (max - min) * (targetMax - targetMin) + targetMin;
  }

  function getColorTemperatureColor(colorTemperature, _ref5) {
    var _ref6 = (0, _slicedToArray2.default)(_ref5, 3),
        min = _ref6[0],
        max = _ref6[1],
        step = _ref6[2];

    return ColorTemperatureGetter.getColorFromPercent(getColorTemperaturePercent(colorTemperature, [min, max, step]));
  }

  var Background = function (_PureComponent) {
    (0, _inherits2.default)(Background, _PureComponent);

    function Background() {
      (0, _classCallCheck2.default)(this, Background);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(Background).apply(this, arguments));
    }

    (0, _createClass2.default)(Background, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            disabled = _this$props.disabled,
            brightness = _this$props.brightness,
            supportBrightness = _this$props.supportBrightness,
            color = _this$props.color,
            supportColor = _this$props.supportColor,
            colorTemperature = _this$props.colorTemperature,
            supportColorTemperature = _this$props.supportColorTemperature,
            colorTemperatureRange = _this$props.colorTemperatureRange,
            pos = _this$props.pos,
            SourceBgOff = _this$props.SourceBgOff;
        var targetColor = supportColor ? (0, _colors.transformDigtalToHex)(color) : supportColorTemperature ? getColorTemperatureColor(colorTemperature, colorTemperatureRange) : '#FFEFCB';
        var WIDTH = _sizes.window.width;
        var HEIGHT = _sizes.window.height;
        return _react.default.createElement(_reactNative.View, {
          style: StylesBackground.container
        }, disabled ? _react.default.createElement(_reactNative.Image, {
          style: StylesBackground.disabledContainer,
          source: SourceBgOff
        }) : _react.default.createElement(_react.Fragment, null, _react.default.createElement(_reactNative.View, {
          style: [StylesBackground.colorOrColorTemperatureContainer, {
            backgroundColor: targetColor
          }]
        }), _react.default.createElement(_reactNativeSvg.Svg, {
          width: WIDTH,
          height: HEIGHT
        }, _react.default.createElement(_reactNativeSvg.Defs, null, _react.default.createElement(_reactNativeSvg.RadialGradient, {
          id: "radialGradient",
          cx: WIDTH / 2,
          cy: 0.4025641025641026 * HEIGHT,
          rx: 0.5974358974358974 * HEIGHT,
          ry: 0.5974358974358974 * HEIGHT,
          fx: WIDTH / 2,
          fy: 0.4025641025641026 * HEIGHT
        }, _react.default.createElement(_reactNativeSvg.Stop, {
          offset: "0",
          stopColor: "#fff",
          stopOpacity: "0.6"
        }), _react.default.createElement(_reactNativeSvg.Stop, {
          offset: "1",
          stopColor: "#fff",
          stopOpacity: "0"
        }))), _react.default.createElement(_reactNativeSvg.Rect, {
          x: "0",
          y: "0",
          width: WIDTH,
          height: HEIGHT,
          fill: "url(#radialGradient)"
        }))), disabled || !supportBrightness ? null : _react.default.createElement(_reactNative.View, {
          style: [StylesBackground.brightness, {
            opacity: getOpacityFromBrightness(brightness)
          }]
        }), disabled || !pos ? null : _react.default.createElement(_reactNative.Image, {
          style: {
            position: 'absolute',
            left: pos.pageX,
            top: pos.pageY,
            width: (0, _sizes.adjustSize)(192),
            height: (0, _sizes.adjustSize)(192),
            marginLeft: (0, _sizes.adjustSize)(-96),
            marginTop: (0, _sizes.adjustSize)(-96),
            resizeMode: 'contain'
          },
          source: SourceBlur
        }));
      }
    }]);
    return Background;
  }(_react.PureComponent);

  exports.Background = Background;

  var LightControl = function (_Component) {
    (0, _inherits2.default)(LightControl, _Component);

    function LightControl() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, LightControl);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(LightControl)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        direction: 0,
        brightness: 0,
        color: 0,
        colorTemperature: 0,
        guided: true,
        animationDone: true
      };
      _this.brightnessPercent = new _reactNative.Animated.Value(100);
      _this.colorPercent = new _reactNative.Animated.Value(0);
      _this.colorTemperaturePercent = new _reactNative.Animated.Value(0);
      _this.nowModeValue = new _reactNative.Animated.Value(1);
      _this.width = _sizes.window.width;
      _this.height = _sizes.window.height;

      _this.onLayout = function (e) {
        var layout = e.nativeEvent.layout;
        _this.width = layout.width;
        _this.height = layout.height;
      };

      _this.hideGuide = function () {
        _Host.default.storage.set(LightGuideCacheKey, true);

        _this.setState({
          guided: true
        });
      };

      return _this;
    }

    (0, _createClass2.default)(LightControl, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(props) {
        var direction = this.state.direction;
        var brightnessRange = props.brightnessRange;

        if (direction) {
          return;
        }

        this.brightnessPercent.setValue(props.supportBrightness ? mergePercent(props.brightness, brightnessRange ? brightnessRange[0] : 0, brightnessRange ? brightnessRange[1] : 100, 0, 100) : 100);
      }
    }, {
      key: "initResponders",
      value: function initResponders() {
        var _this2 = this;

        var x0 = null,
            y0 = null;
        var brightnessPercent0 = null;
        var colorPercent0 = null;
        var colorTemperaturePercent0 = null;

        var onmove = function onmove(e) {
          var _this2$props = _this2.props,
              disabled = _this2$props.disabled,
              supportBrightness = _this2$props.supportBrightness,
              brightnessRange = _this2$props.brightnessRange,
              onBrightnessChanging = _this2$props.onBrightnessChanging,
              supportColor = _this2$props.supportColor,
              onColorChanging = _this2$props.onColorChanging,
              supportColorTemperature = _this2$props.supportColorTemperature,
              onColorTemperatureChanging = _this2$props.onColorTemperatureChanging,
              colorTemperatureRange = _this2$props.colorTemperatureRange,
              onSetStart = _this2$props.onSetStart;
          var direction = _this2.state.direction;
          var width = _this2.width;
          var height = _this2.height;

          if (disabled || x0 === null || y0 === null) {
            return;
          }

          var pageX = e.pageX,
              pageY = e.pageY;
          var diffX = pageX - x0;
          var diffY = pageY - y0;
          var absX = Math.abs(diffX);
          var absY = Math.abs(diffY);

          if (!direction && (absX > 5 || absY > 5)) {
            direction = absX < absY ? 1 : 2;

            _this2.setState({
              direction: direction
            });

            typeof onSetStart === 'function' && onSetStart();
          }

          if (!direction) {
            return;
          }

          if (direction === 1 && supportBrightness && onBrightnessChanging) {
            var newBrightnessPercent = Math.min(100, Math.max(0, brightnessPercent0 - diffY / (0, _sizes.adjustSize)(990) * 100));

            _this2.brightnessPercent.setValue(newBrightnessPercent);

            onBrightnessChanging(Math.round(mergePercent(newBrightnessPercent, 0, 100, brightnessRange ? brightnessRange[0] : 0, brightnessRange ? brightnessRange[1] : 100)), {
              pageX: pageX,
              pageY: pageY
            });
            return;
          }

          if (direction === 2 && supportColor && onColorChanging) {
            var newColorPercent = Math.min(100, Math.max(0, colorPercent0 + diffX / (0, _sizes.adjustSize)(1200) * 100));

            _this2.colorPercent.setValue(newColorPercent);

            onColorChanging((0, _colors.transformHexToDigtal)(ColorGetter.getColorFromPercent(newColorPercent)), {
              pageX: pageX,
              pageY: pageY
            });
            return;
          }

          if (direction === 2 && supportColorTemperature && onColorTemperatureChanging) {
            var newColorTemperaturePercent = Math.min(100, Math.max(0, colorTemperaturePercent0 + diffX / (0, _sizes.adjustSize)(1200) * 100));

            _this2.colorTemperaturePercent.setValue(newColorTemperaturePercent);

            onColorTemperatureChanging(Math.round(getColorTemperatureFromPercent(newColorTemperaturePercent, colorTemperatureRange)), {
              pageX: pageX,
              pageY: pageY
            });
            return;
          }
        };

        this.responders = {
          onStartShouldSetResponder: function onStartShouldSetResponder(e) {
            console.log("onStartShouldSetResponder");
            var _this2$props2 = _this2.props,
                disabled = _this2$props2.disabled,
                supportBrightness = _this2$props2.supportBrightness,
                supportColor = _this2$props2.supportColor,
                supportColorTemperature = _this2$props2.supportColorTemperature,
                setScrollAbility = _this2$props2.setScrollAbility;

            if (!disabled && (supportBrightness || supportColor || supportColorTemperature)) {
              setScrollAbility(false);
            }

            return !disabled && (supportBrightness || supportColor || supportColorTemperature);
          },
          onResponderReject: function onResponderReject(evt) {
            console.log("onResponderReject");
          },
          onResponderTerminationRequest: function onResponderTerminationRequest(e) {
            console.log("onResponderTerminationRequest");
            var disabled = _this2.props.disabled;
            return disabled;
          },
          onResponderEnd: function onResponderEnd(evt) {
            console.log("onResponderEnd");
          },
          onResponderTerminate: function onResponderTerminate(evt, gestureState) {
            _this2.props.setScrollAbility(true);

            console.log("onResponderTerminate");

            if (typeof _this2.props.onSetEnd === 'function') {
              _this2.props.onSetEnd();
            }

            if (_this2.state.animationDone) {
              _this2.setState({
                animationDone: false
              });

              var configAnimation = {
                duration: 500,
                create: {
                  type: _reactNative.LayoutAnimation.Types.easeIn,
                  property: _reactNative.LayoutAnimation.Properties.opacity
                }
              };

              _reactNative.LayoutAnimation.configureNext(configAnimation, function () {
                _this2.setState({
                  animationDone: true
                });

                console.log("onrespond testttttttttttttt");
              });
            }

            setTimeout(function () {
              _reactNative.Animated.timing(_this2.nowModeValue, {
                toValue: 1,
                duration: 500,
                easing: _reactNative.Easing.ease
              }).start();
            }, 0);

            _this2.setState({
              direction: 0
            });
          },
          onResponderGrant: function onResponderGrant(e) {
            console.log("onResponderGrant");
            var _e$nativeEvent = e.nativeEvent,
                pageX = _e$nativeEvent.pageX,
                pageY = _e$nativeEvent.pageY;
            x0 = pageX;
            y0 = pageY;
            brightnessPercent0 = _this2.brightnessPercent.__getValue();
            colorPercent0 = _this2.colorPercent.__getValue();
            colorTemperaturePercent0 = _this2.colorTemperaturePercent.__getValue();

            _this2.setState({
              direction: 0
            });

            typeof _this2.props.onSetStart === 'function' && _this2.props.onSetStart();
            var configAnimation = {
              duration: 10,
              delete: {
                type: _reactNative.LayoutAnimation.Types.linear,
                property: _reactNative.LayoutAnimation.Properties.opacity
              }
            };

            _reactNative.LayoutAnimation.configureNext(configAnimation, function () {
              console.log("onrespond testttttttttttttt");
            });

            _this2.nowModeValue.setValue(0);
          },
          onResponderMove: function onResponderMove(e) {
            console.log("onResponderMove");
            onmove(e.nativeEvent);
          },
          onResponderRelease: function onResponderRelease(e) {
            _this2.props.setScrollAbility(true);

            console.log("onResponderRelease");
            var _this2$props3 = _this2.props,
                onSetEnd = _this2$props3.onSetEnd,
                supportBrightness = _this2$props3.supportBrightness,
                brightnessRange = _this2$props3.brightnessRange,
                onBrightnessChanged = _this2$props3.onBrightnessChanged,
                supportColor = _this2$props3.supportColor,
                onColorChanged = _this2$props3.onColorChanged,
                supportColorTemperature = _this2$props3.supportColorTemperature,
                colorTemperatureRange = _this2$props3.colorTemperatureRange,
                onColorTemperatureChanged = _this2$props3.onColorTemperatureChanged;

            _this2.setState(function (state) {
              var direction = state.direction;
              x0 = null;
              y0 = null;
              brightnessPercent0 = null;
              colorPercent0 = null;
              colorTemperaturePercent0 = null;

              if (direction === 1 && supportBrightness && typeof onBrightnessChanged === 'function') {
                onBrightnessChanged(Math.round(mergePercent(_this2.brightnessPercent.__getValue(), 0, 100, brightnessRange ? brightnessRange[0] : 0, brightnessRange ? brightnessRange[1] : 100)));
              }

              if (direction === 2 && supportColor && typeof onColorChanged === 'function') {
                onColorChanged((0, _colors.transformHexToDigtal)(ColorGetter.getColorFromPercent(_this2.colorPercent.__getValue())));
              }

              if (direction === 2 && supportColorTemperature && typeof onColorTemperatureChanged === 'function') {
                onColorTemperatureChanged(Math.round(getColorTemperatureFromPercent(_this2.colorTemperaturePercent.__getValue(), colorTemperatureRange)));
              }

              if (typeof onSetEnd === 'function') {
                onSetEnd();
              }

              if (_this2.state.animationDone) {
                _this2.setState({
                  animationDone: false
                });

                var configAnimation = {
                  duration: 500,
                  create: {
                    type: _reactNative.LayoutAnimation.Types.easeIn,
                    property: _reactNative.LayoutAnimation.Properties.opacity
                  }
                };

                _reactNative.LayoutAnimation.configureNext(configAnimation, function () {
                  _this2.setState({
                    animationDone: true
                  });

                  console.log("onrespond testttttttttttttt");
                });
              }

              setTimeout(function () {
                _reactNative.Animated.timing(_this2.nowModeValue, {
                  toValue: 1,
                  duration: 500,
                  easing: _reactNative.Easing.ease
                }).start();
              }, 0);
              return {
                direction: 0
              };
            });
          }
        };
      }
    }, {
      key: "removeResponders",
      value: function removeResponders() {
        this.responders && (this.responders = null);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        this.initResponders();

        if (_reactNative.Platform.OS === 'android' && _reactNative.UIManager.setLayoutAnimationEnabledExperimental) {
          _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
        }

        _Host.default.storage.get(LightGuideCacheKey).then(function (value) {
          _this3.setState({
            guided: !!value
          });
        }).catch(function () {
          _this3.setState({
            guided: true
          });
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.removeResponders();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            disabled = _this$props2.disabled,
            supportBrightness = _this$props2.supportBrightness,
            supportColor = _this$props2.supportColor,
            supportColorTemperature = _this$props2.supportColorTemperature,
            nowModeText = _this$props2.nowModeText,
            nowModeIcon = _this$props2.nowModeIcon;
        var _this$state = this.state,
            direction = _this$state.direction,
            guided = _this$state.guided;
        var brightnessPercent = this.brightnessPercent,
            colorPercent = this.colorPercent,
            colorTemperaturePercent = this.colorTemperaturePercent;
        var linearStops = supportColor ? LinearStopsColor : supportColorTemperature ? LinearStopsColorTemperature : null;
        var showBrightness = !disabled && supportBrightness && direction === 1;
        var showColorOrColorTemperature = !disabled && (supportColor || supportColorTemperature) && direction === 2;
        var brightnessHeight = brightnessPercent.interpolate({
          inputRange: [0, 100],
          outputRange: [0, (0, _sizes.adjustSize)(630)]
        });
        var brightnessIndicatorBottom = brightnessPercent.interpolate({
          inputRange: [0, 100],
          outputRange: [(0, _sizes.adjustSize)(39), (0, _sizes.adjustSize)(666)]
        });
        var colorOrColorTemperatureIndicatorLeft = supportColor ? colorPercent.interpolate({
          inputRange: [0, 100],
          outputRange: [(0, _sizes.adjustSize)(12), (0, _sizes.adjustSize)(900)]
        }) : supportColorTemperature ? colorTemperaturePercent.interpolate({
          inputRange: [0, 100],
          outputRange: [(0, _sizes.adjustSize)(12), (0, _sizes.adjustSize)(900)]
        }) : 0;
        return _react.default.createElement(_reactNative.View, (0, _extends2.default)({
          style: Styles.container
        }, !disabled && !guided ? {} : this.responders, {
          onLayout: this.onLayout
        }), _react.default.createElement(_reactNative.View, {
          style: [Styles.brightness, {
            opacity: showBrightness ? 1 : 0
          }]
        }, _react.default.createElement(_reactNative.Image, {
          style: Styles.iconBrightnessHigh,
          source: SourceBrightnessHigh
        }), _react.default.createElement(_reactNative.View, {
          style: Styles.brightnessBar
        }, _react.default.createElement(_reactNative.View, {
          style: Styles.brightnessBarBack
        }, _react.default.createElement(_reactNative.Animated.View, {
          key: String(Math.round(Date.now() / 100)),
          style: [Styles.brightnessBarFore, {
            height: brightnessHeight
          }]
        })), _react.default.createElement(_reactNative.Animated.Image, {
          key: String(Math.round(Date.now() / 100)),
          style: [Styles.iconBrightnessIndicator, {
            bottom: brightnessIndicatorBottom
          }],
          source: SourceTriangle
        })), _react.default.createElement(_reactNative.Image, {
          style: Styles.iconBrightnessLow,
          source: SourceBrightnessLow
        })), _react.default.createElement(_reactNative.View, {
          style: [Styles.colorOrColorTemperature, {
            opacity: showColorOrColorTemperature ? 1 : 0
          }]
        }, _react.default.createElement(_reactNative.Animated.Image, {
          style: [Styles.iconColorOrColorTemperatureIndicator, {
            left: colorOrColorTemperatureIndicatorLeft
          }],
          source: SourceTriangle
        }), showColorOrColorTemperature ? _react.default.createElement(_reactNativeSvg.Svg, {
          width: (0, _sizes.adjustSize)(900),
          height: (0, _sizes.adjustSize)(12)
        }, _react.default.createElement(_reactNativeSvg.Defs, null, _react.default.createElement(_reactNativeSvg.LinearGradient, {
          id: "linearGradient",
          x1: "0",
          y1: "0",
          x2: "100%",
          y2: "0"
        }, linearStops)), _react.default.createElement(_reactNativeSvg.Rect, {
          width: (0, _sizes.adjustSize)(900),
          height: (0, _sizes.adjustSize)(12),
          fill: "url(#linearGradient)"
        })) : null), !disabled && !guided ? _react.default.createElement(_reactNative.TouchableOpacity, {
          style: Styles.guideContainer,
          activeOpacity: 1,
          onPressIn: this.hideGuide
        }, _react.default.createElement(_reactNative.Image, {
          style: Styles.guideImage,
          source: supportColor || supportColorTemperature ? SourceGuide : SourceGuideUpDown
        })) : null, !disabled && guided && nowModeText ? _react.default.createElement(_reactNative.Animated.View, {
          style: [Styles.textContainer, {
            opacity: this.nowModeValue
          }]
        }, _react.default.createElement(_reactNative.Image, {
          style: Styles.modeImage,
          source: nowModeIcon
        }), _react.default.createElement(_reactNative.Text, {
          style: Styles.modeText
        }, "" + this.props.modeText + nowModeText)) : null);
      }
    }]);
    return LightControl;
  }(_react.Component);

  exports.default = LightControl;
  LightControl.defaultProps = {
    disabled: false,
    supportBrightness: false,
    brightness: 20,
    brightnessRange: [0, 100, 1],
    onBrightnessChanging: _fns.log,
    onBrightnessChanged: _fns.log,
    supportColor: false,
    color: 128833,
    onColorChanging: _fns.log,
    onColorChanged: _fns.log,
    supportColorTemperature: false,
    colorTemperature: 4288,
    colorTemperatureRange: [2600, 7600, 1],
    onColorTemperatureChanging: _fns.log,
    onColorTemperatureChanged: _fns.log,
    onSetStart: _fns.log,
    onSetEnd: _fns.log,
    nowModeText: '',
    nowModeIcon: null
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      minHeight: (0, _sizes.adjustSize)(1101)
    },
    brightness: {
      position: 'absolute',
      left: (0, _sizes.adjustSize)(84),
      width: (0, _sizes.adjustSize)(117),
      height: (0, _sizes.adjustSize)(891),
      top: (0, _sizes.adjustSize)(210),
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    iconBrightnessHigh: {
      width: (0, _sizes.adjustSize)(90),
      height: (0, _sizes.adjustSize)(81)
    },
    iconBrightnessLow: {
      width: (0, _sizes.adjustSize)(48),
      height: (0, _sizes.adjustSize)(63)
    },
    brightnessBar: {
      flex: 1,
      alignItems: 'center',
      width: '100%'
    },
    brightnessBarBack: {
      marginVertical: (0, _sizes.adjustSize)(60),
      width: (0, _sizes.adjustSize)(18),
      flex: 1,
      borderRadius: (0, _sizes.adjustSize)(120),
      backgroundColor: 'rgba(255, 255, 255, 0.3)',
      borderWidth: 1,
      borderColor: 'rgba(0, 0, 0, 0.24)',
      overflow: 'hidden'
    },
    brightnessBarFore: {
      position: 'absolute',
      left: 0,
      bottom: 0,
      width: '100%',
      backgroundColor: '#fff'
    },
    iconBrightnessIndicator: {
      position: 'absolute',
      right: 0,
      width: (0, _sizes.adjustSize)(27),
      height: (0, _sizes.adjustSize)(42)
    },
    colorOrColorTemperature: {
      position: 'absolute',
      width: (0, _sizes.adjustSize)(942),
      left: '50%',
      marginLeft: (0, _sizes.adjustSize)(-471),
      alignItems: 'center'
    },
    iconColorOrColorTemperatureIndicator: {
      alignSelf: 'flex-start',
      marginBottom: (0, _sizes.adjustSize)(6),
      transform: [{
        rotateZ: '-90deg'
      }]
    },
    colorOrColorTemperatureBar: {
      width: (0, _sizes.adjustSize)(900),
      height: (0, _sizes.adjustSize)(12),
      backgroundColor: '#f00',
      borderRadius: (0, _sizes.adjustSize)(6),
      overflow: 'hidden'
    },
    guideContainer: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      justifyContent: 'center',
      alignItems: 'center'
    },
    guideImage: {
      width: (0, _sizes.adjustSize)(700),
      height: (0, _sizes.adjustSize)(700),
      resizeMode: 'contain'
    },
    guideText: {
      fontFamily: _fonts.FontDefault,
      fontSize: (0, _sizes.adjustSize)(42),
      lineHeight: (0, _sizes.adjustSize)(60),
      color: '#fff',
      textAlign: 'center',
      marginTop: (0, _sizes.adjustSize)(45)
    },
    textContainer: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      paddingBottom: (0, _sizes.adjustSize)(450),
      justifyContent: 'center',
      alignItems: 'center'
    },
    modeImage: {
      width: (0, _sizes.adjustSize)(288),
      height: (0, _sizes.adjustSize)(288),
      resizeMode: 'contain'
    },
    modeText: {
      fontFamily: _fonts.FontDefault,
      fontSize: (0, _sizes.adjustSize)(42),
      lineHeight: (0, _sizes.adjustSize)(60),
      color: '#fff',
      textAlign: 'center',
      marginTop: (0, _sizes.adjustSize)(45)
    }
  });

  var StylesBackground = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    disabledContainer: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: '100%',
      height: '100%',
      backgroundColor: '#000',
      resizeMode: 'cover'
    },
    blankContainer: {
      position: 'absolute',
      left: 0,
      top: 0,
      width: '100%',
      height: '100%',
      backgroundColor: '#fff'
    },
    colorOrColorTemperatureContainer: {
      position: 'absolute',
      left: 0,
      top: 0,
      bottom: 0,
      right: 0
    },
    brightness: {
      position: 'absolute',
      left: 0,
      top: 0,
      bottom: 0,
      right: 0,
      backgroundColor: 'rgba(0, 0, 0, 1)'
    }
  });
},10565,[14308,14305,14344,14320,14323,14371,14377,14386,14347,10297,10033,10918,10029,10035,10719,10332,10077,10318,11485,10806,10776,10779,10785,10782,10809,10812,10815,10818,10568,10571]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/modules/fix/resources/images",
    "width": 700,
    "height": 700,
    "scales": [1],
    "hash": "7249652a9b1684cdaee7639b401d95a1",
    "name": "light-control-guide",
    "type": "png"
  });
},10568,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/modules/fix/resources/images",
    "width": 700,
    "height": 700,
    "scales": [1],
    "hash": "3932613acf7e54dec197a43406aa5c62",
    "name": "light-control-guide-updown",
    "type": "png"
  });
},10571,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/projects/xiaomi.CommonPlugin.1637889544631/resources/images",
    "width": 1080,
    "height": 2340,
    "scales": [1],
    "hash": "953bce4ab86063b49ee85e7c91ed1975",
    "name": "light-off",
    "type": "png"
  });
},10574,[10420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _WallSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _handlers = _$$_REQUIRE(_dependencyMap[2]);

  var _default = {
    UIComponent: _WallSwitch.default,
    name: 'WallSwitch',
    adapter: {
      handle: function handle(v) {
        var _this = this;

        var _this$item = this.item,
            specs = _this$item.specs,
            onSwitch = _this$item.onSwitch;
        var values = this.values;
        var handle = (0, _handlers.getHandler)(onSwitch);
        var items = values.map(function (value) {
          return {
            isOn: !!value
          };
        });
        var newState = {
          items: items,
          onSwitch: handle ? function (index) {
            handle(_this.item, specs[index], values[index]);
          } : null
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10577,[14305,10833,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _reactNativeSwiper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _consts = _$$_REQUIRE(_dependencyMap[11]);

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, UIComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(UIComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.onIndexChanged = function (index) {
        var onIndexChanged = _this.props.onIndexChanged;
        onIndexChanged(index);
      };

      return _this;
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNativeSwiper.default, {
          horizontal: true,
          removeClippedSubviews: false,
          showsPagination: false,
          pagingEnabled: true,
          loop: false,
          onIndexChanged: this.onIndexChanged
        }, this.props.children);
      }
    }]);
    return UIComponent;
  }(_react.Component);

  UIComponent.propTypes = {
    onIndexChanged: _propTypes.default.func
  };
  var _default = {
    UIComponent: UIComponent,
    name: 'Swiper',
    adapter: {
      onMounted: function onMounted() {
        var _this2 = this;

        this.setState({
          selectedIndex: 0,
          onIndexChanged: function onIndexChanged(index) {
            _this2.onIndexChanged(index);
          }
        });
      },
      onIndexChanged: function onIndexChanged(index) {
        var swiperId = this.item.swiperId;
        var eid = this.swiperChangeEventId || (this.swiperChangeEventId = swiperId ? (0, _consts.genSwiperChangeEventId)(swiperId) : null);

        if (!eid) {
          return;
        }

        _reactNative.DeviceEventEmitter.emit(eid, index);
      }
    }
  };
  exports.default = _default;
},10580,[14308,14305,14320,14323,14371,14377,14386,10297,10033,13663,10318,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _sizes = _$$_REQUIRE(_dependencyMap[10]);

  var _fonts = _$$_REQUIRE(_dependencyMap[11]);

  var _consts = _$$_REQUIRE(_dependencyMap[12]);

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      (0, _classCallCheck2.default)(this, UIComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UIComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "getTabs",
      value: function getTabs() {
        var _this$props = this.props,
            _this$props$tabs = _this$props.tabs,
            tabs = _this$props$tabs === undefined ? [] : _this$props$tabs,
            selectedIndex = _this$props.selectedIndex;
        return tabs.map(function (tab, index) {
          return _react.default.createElement(_reactNative.Text, {
            key: String(index),
            style: [Styles.tab, selectedIndex === index ? Styles.tabSelected : null]
          }, tab);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var isAbsolute = this.props.isAbsolute;
        var tabs = this.getTabs();

        if (!tabs || !tabs.length) {
          return null;
        }

        return _react.default.createElement(_reactNative.View, {
          style: [Styles.container, isAbsolute ? {
            position: 'absolute',
            width: '100%'
          } : null]
        }, tabs);
      }
    }]);
    return UIComponent;
  }(_react.Component);

  UIComponent.propTypes = {
    tabs: _propTypes.default.arrayOf(_propTypes.default.string),
    selectedIndex: _propTypes.default.number,
    isAbsolute: _propTypes.default.bool
  };
  var _default = {
    UIComponent: UIComponent,
    name: 'SwiperIndicator',
    adapter: {
      onMounted: function onMounted() {
        var _this = this;

        var i18n = this.i18n;
        var isAbsolute = this.item.isAbsolute;
        var tabs = [];
        var i = 0;

        while (true) {
          var tab = i18n.titles ? i18n.titles(i) : '';

          if (tab) {
            i += 1;
            tabs.push(tab);
          } else {
            break;
          }
        }

        this.setState({
          tabs: tabs,
          selectedIndex: 0,
          isAbsolute: isAbsolute
        });
        var swiperId = this.item.swiperId;
        var eid = this.swiperChangeEventId || (this.swiperChangeEventId = swiperId ? (0, _consts.genSwiperChangeEventId)(swiperId) : null);

        if (!eid) {
          return;
        }

        this.listeners.push(_reactNative.DeviceEventEmitter.addListener(eid, function (index) {
          _this.setState({
            selectedIndex: index
          });
        }));
      }
    }
  };
  exports.default = _default;

  var Styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    tab: {
      fontFamily: _fonts.FontLantingLight,
      fontSize: (0, _sizes.adjustSize)(43.8),
      lineHeight: (0, _sizes.adjustSize)(135),
      color: '#999',
      marginHorizontal: (0, _sizes.adjustSize)(54)
    },
    tabSelected: {
      color: '#1B9BEB'
    }
  });
},10583,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10776,10782,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _miot = _$$_REQUIRE(_dependencyMap[4]);

  var _DeviceWithInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _fns = _$$_REQUIRE(_dependencyMap[6]);

  var _icons = _$$_REQUIRE(_dependencyMap[7]);

  var _consts = _$$_REQUIRE(_dependencyMap[8]);

  var _sceneManager = _$$_REQUIRE(_dependencyMap[9]);

  function formatTime(time) {
    return {
      y: String(time.getFullYear()),
      m: (0, _fns.fixNum)(time.getMonth() + 1),
      d: (0, _fns.fixNum)(time.getDate()),
      h: (0, _fns.fixNum)(time.getHours()),
      i: (0, _fns.fixNum)(time.getMinutes()),
      s: (0, _fns.fixNum)(time.getMinutes())
    };
  }

  var _default = {
    UIComponent: _DeviceWithInfo.default,
    name: 'DeviceWithCountdownInfo',
    adapter: {
      onMounted: function onMounted() {
        var _this = this;

        this.updateIcon();
        this.setState({
          holdPlace: !!this.item.holdPlace
        });
        this.listeners.push(_reactNative.DeviceEventEmitter.addListener(_consts.CONSTAPPSHOWFROMNATIVE, function () {
          _this.loadTimerScenes();
        }));
      },
      updateIcon: function updateIcon() {
        var _this2 = this;

        var icon = this.item.icon;
        var iconFn = this.iconFn || (this.iconFn = icon ? (0, _fns.getStringGenerator)(icon) : null);

        _miot.Service.getServerName().then(function (_ref) {
          var countryCode = _ref.countryCode;
          var iconKey = iconFn ? iconFn((countryCode || '').toLowerCase()) : '';

          _this2.setState({
            icon: (0, _icons.getIcon)(iconKey || 'plugCn')
          });
        }).catch(function () {
          var iconKey = iconFn ? iconFn('') : '';

          _this2.setState({
            icon: (0, _icons.getIcon)(iconKey || 'plugCn')
          });
        });
      },
      handle: function handle(v) {
        var themeColor = this.item.themeColor;
        var i18n = this.i18n;
        var values = this.values;
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var newState = {
          holdPlace: !!this.item.holdPlace,
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : ''
        };

        if (themeColorFn !== null) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
        this.loadTimerScenes();
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      loadTimerScenes: function loadTimerScenes() {
        var _this3 = this;

        _miot.Service.scene.loadTimerScenes(_consts.DeviceID, {}).then(function (scenes) {
          _this3.updateTimerInfo(scenes);
        }).catch(_fns.log);
      },
      updateTimerInfo: function updateTimerInfo() {
        var scenes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var i18n = this.i18n;
        var isOn = this.values[0];

        var _this$item$specs = (0, _slicedToArray2.default)(this.item.specs, 1),
            spec = _this$item$specs[0];

        if (!scenes || !scenes.length) {
          this.setState({
            subtitle: '',
            progress: 0
          });
          this.intervalTimerLeft && clearInterval(this.intervalTimerLeft);
          return;
        }

        var _getNextCountdown = (0, _sceneManager.getNextCountdown)(scenes, spec, !isOn),
            nextTimer = _getNextCountdown.nextTimer,
            nextTime = _getNextCountdown.nextTime;

        if (!nextTime) {
          this.setState({
            subtitle: '',
            progress: 0
          });
          this.intervalTimerLeft && clearInterval(this.intervalTimerLeft);
          return;
        }

        var formatedTime = formatTime(nextTime);
        this.setState({
          subtitle: i18n.subtitle(isOn, formatedTime.y, formatedTime.m, formatedTime.d, formatedTime.h, formatedTime.i, formatedTime.s)
        });
        this.updateTimerLeft(nextTime, nextTimer);
      },
      updateTimerLeft: function updateTimerLeft(time, timer) {
        var _this4 = this;

        var begin = timer.createTime * 1000;
        var end = time.getTime();
        this.intervalTimerLeft && clearInterval(this.intervalTimerLeft);

        var set = function set() {
          var now = Date.now();
          var left = 1 - (now - begin) / (end - begin);

          _this4.setState({
            progress: left
          });

          if (left <= 0) {
            _this4.intervalTimerLeft && clearInterval(_this4.intervalTimerLeft);
          }
        };

        this.intervalTimerLeft = setInterval(set, 1000);
        set();
      }
    }
  };
  exports.default = _default;
},10586,[14305,14347,14359,10033,10074,10800,10779,10013,10010,10589]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getTimers = getTimers;
  exports.getCountdowns = getCountdowns;
  exports.getNextCountdown = getNextCountdown;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _miot = _$$_REQUIRE(_dependencyMap[2]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[3]);

  function parseCountdownCrontab(time) {
    var _time$split = time.split(/\s+/),
        _time$split2 = (0, _slicedToArray2.default)(_time$split, 4),
        ii = _time$split2[0],
        hh = _time$split2[1],
        dd = _time$split2[2],
        mm = _time$split2[3];

    var now = new Date();
    var y = now.getFullYear();
    var m = parseInt(mm);
    var d = parseInt(dd);
    var h = parseInt(hh);
    var i = parseInt(ii);
    var then = new Date(y, m - 1, d, h, i, 0);
    return then;
  }

  function isEnable(v) {
    return v === true || v === '1';
  }

  function getTimers(scenes, spec, isOn) {
    var onValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var offValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var propKey = (0, _instanceManager.getPropKey)(spec || {});

    if (!scenes || !scenes.length) {
      return [];
    }

    return scenes.filter(function (scene) {
      var setting = scene.setting;
      return setting.timer_type === '0' && isEnable(setting.enable_timer) && (typeof isOn === 'boolean' ? isEnable(setting[isOn ? 'enable_timer_on' : 'enable_timer_off']) : true) && (isEnable(setting.enable_timer_on) || isEnable(setting.enable_timer_off)) && (setting.on_param && setting.on_param[0] ? setting.on_param[0].value === onValue && (spec ? (0, _instanceManager.getPropKey)(setting.on_param[0]) === propKey : true) : true) && (setting.off_param && setting.off_param[0] ? setting.off_param[0].value === offValue && (spec ? (0, _instanceManager.getPropKey)(setting.off_param[0]) === propKey : true) : true);
    });
  }

  function getCountdowns(scenes, spec, isOn) {
    var propKey = (0, _instanceManager.getPropKey)(spec || {});

    if (!scenes || !scenes.length) {
      return [];
    }

    return scenes.filter(function (scene) {
      var setting = scene.setting;
      return setting.timer_type === '1' && setting.enable_timer === '1' && (typeof isOn === 'boolean' ? setting[isOn ? 'enable_timer_on' : 'enable_timer_off'] === '1' : true) && (setting.enable_timer_on === '1' && setting.on_param && (spec ? (0, _instanceManager.getPropKey)(setting.on_param[0]) === propKey : true) || setting.enable_timer_off === '1' && setting.off_param && (spec ? (0, _instanceManager.getPropKey)(setting.off_param[0]) === propKey : true));
    });
  }

  function getNextCountdown(scenes, spec, isOn) {
    var now = new Date();
    var key = isOn ? 'on_time' : 'off_time';
    var countdowns = getCountdowns(scenes, spec, isOn);
    var nextTime = null;
    var nextTimer = null;

    for (var i = 0, l = countdowns.length; i < l; i++) {
      var then = countdowns[i].setting[key];
      var thenTime = then ? parseCountdownCrontab(then) : null;

      if (thenTime > now) {
        if (!nextTime || nextTime > thenTime) {
          nextTime = thenTime;
          nextTimer = scenes[i];
        }
      }
    }

    return {
      nextTimer: nextTimer,
      nextTime: nextTime
    };
  }
},10589,[14305,14347,10074,10007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _CardButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _icons = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[7]);

  var _default = {
    UIComponent: _CardButton.default,
    name: 'CardSwitch',
    adapter: {
      subname: '',
      onMounted: function onMounted() {
        var _this = this;

        var nameIndex = this.item.nameIndex;

        if (typeof nameIndex === 'number') {
          this.listeners.push((0, _instanceManager.listenPowerMultikeyChange)(function (v) {
            _this.subname = (v[nameIndex + 1] || {}).name;

            _this.handle();
          }));
        }
      },
      handle: function handle(v) {
        var _this2 = this;

        var i18n = this.i18n;
        var values = this.values;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            icon = _this$item.icon,
            iconText = _this$item.iconText,
            hasShadow = _this$item.hasShadow,
            onSwitch = _this$item.onSwitch,
            themeColor = _this$item.themeColor,
            themeBackgroundColor = _this$item.themeBackgroundColor,
            underlayColor = _this$item.underlayColor,
            offColor = _this$item.offColor,
            valueReverse = _this$item.valueReverse;

        var handle = (0, _handlers.getHandler)(onSwitch);
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var themeBackgroundColorFn = this.themeBackgroundColorFn || (this.themeBackgroundColorFn = themeBackgroundColor ? (0, _fns.getStringGenerator)(themeBackgroundColor) : null);
        var underlayColorFn = this.underlayColorFn || (this.underlayColorFn = underlayColor ? (0, _fns.getStringGenerator)(underlayColor) : null);
        var iconFn = this.iconFn || (this.iconFn = icon ? (0, _fns.getStringGenerator)(icon) : null);
        var offColorFn = this.offColorFn || (this.offColorFn = offColor ? (0, _fns.getStringGenerator)(offColor) : null);
        var newState = {
          icon: (0, _icons.getIcon)(iconFn ? iconFn.apply(undefined, (0, _toConsumableArray2.default)(values)) : ''),
          iconText: iconText,
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: this.subname || (i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : ''),
          hasShadow: hasShadow,
          switchOn: valueReverse ? !values[0] : !!values[0],
          onSwitch: handle ? function () {
            handle(_this2.item, spec, values[0]);
          } : null
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (offColorFn) {
          newState.offColor = offColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (themeBackgroundColorFn) {
          newState.themeBackgroundColor = themeBackgroundColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (underlayColorFn) {
          newState.underlayColor = underlayColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10592,[14305,14359,14347,10595,10779,10013,10520,10007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Switch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _sizes = _$$_REQUIRE(_dependencyMap[12]);

  var _fonts = _$$_REQUIRE(_dependencyMap[13]);

  var _colors = _$$_REQUIRE(_dependencyMap[14]);

  var SourceArrow = _$$_REQUIRE(_dependencyMap[15]);

  var CardButton = function (_PureComponent) {
    (0, _inherits2.default)(CardButton, _PureComponent);

    function CardButton() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, CardButton);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CardButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.onPress = function () {
        var _this$props = _this.props,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress;

        if (typeof onPress === 'function' && !disabled) {
          onPress();
        }
      };

      return _this;
    }

    (0, _createClass2.default)(CardButton, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            containerStyle = _this$props2.containerStyle,
            themeColor = _this$props2.themeColor,
            themeBackgroundColor = _this$props2.themeBackgroundColor,
            underlayColor = _this$props2.underlayColor,
            hasShadow = _this$props2.hasShadow,
            iconContainerStyle = _this$props2.iconContainerStyle,
            iconStyle = _this$props2.iconStyle,
            icon = _this$props2.icon,
            iconText = _this$props2.iconText,
            title = _this$props2.title,
            subtitle = _this$props2.subtitle,
            onSwitch = _this$props2.onSwitch,
            switchOn = _this$props2.switchOn,
            disabled = _this$props2.disabled,
            onPress = _this$props2.onPress,
            rightText = _this$props2.rightText,
            rightArrow = _this$props2.rightArrow,
            offColor = _this$props2.offColor;
        var opacity = disabled ? 0.3 : 1;

        if (!icon && !iconText && !title && !subtitle && !onSwitch) {
          return null;
        }

        var Wrap = hasShadow ? _ContainerWithShadowAndSeparator.default : _react.Fragment;
        return _react.default.createElement(Wrap, null, _react.default.createElement(_reactNative.TouchableHighlight, {
          style: [Styles.container, containerStyle, themeBackgroundColor ? {
            backgroundColor: themeBackgroundColor
          } : null],
          underlayColor: disabled || !onPress ? themeBackgroundColor || '#fff' : underlayColor,
          onPress: this.onPress
        }, _react.default.createElement(_react.Fragment, null, icon || iconText ? _react.default.createElement(_reactNative.View, {
          style: [Styles.iconContainer, iconContainerStyle, {
            backgroundColor: (switchOn ? themeColor : offColor) || _colors.ColorGreen,
            opacity: opacity
          }]
        }, icon ? _react.default.createElement(_reactNative.Image, {
          style: [Styles.icon, iconStyle],
          source: icon
        }) : _react.default.createElement(_reactNative.Text, {
          style: Styles.iconText
        }, iconText)) : null, _react.default.createElement(_reactNative.View, {
          style: [Styles.titleContainer, {
            opacity: opacity
          }]
        }, title ? _react.default.createElement(_reactNative.Text, {
          style: Styles.title
        }, title) : null, subtitle ? _react.default.createElement(_reactNative.Text, {
          style: Styles.subtitle
        }, subtitle) : null), onSwitch ? _react.default.createElement(_reactNative.View, {
          style: Styles.switchContainer
        }, _react.default.createElement(_Switch.default, {
          value: switchOn,
          onValueChange: onSwitch,
          onTintColor: themeColor || _colors.ColorGreen,
          disabled: disabled
        })) : rightText || rightArrow ? _react.default.createElement(_react.Fragment, null, rightText ? _react.default.createElement(_reactNative.Text, {
          style: Styles.rightText
        }, rightText) : null, rightArrow ? _react.default.createElement(_reactNative.Image, {
          style: Styles.rightArrow,
          source: SourceArrow
        }) : null) : null)));
      }
    }]);
    return CardButton;
  }(_react.PureComponent);

  exports.default = CardButton;
  CardButton.propTypes = {
    containerStyle: _propTypes.default.any,
    disabled: _propTypes.default.bool,
    themeColor: _propTypes.default.string,
    offColor: _propTypes.default.string,
    themeBackgroundColor: _propTypes.default.string,
    underlayColor: _propTypes.default.string,
    hasShadow: _propTypes.default.bool,
    iconContainerStyle: _propTypes.default.any,
    iconStyle: _propTypes.default.any,
    icon: _propTypes.default.any,
    iconText: _propTypes.default.string,
    title: _propTypes.default.string,
    subtitle: _propTypes.default.string,
    onPress: _propTypes.default.func,
    onSwitch: _propTypes.default.func,
    switchOn: _propTypes.default.bool,
    rightText: _propTypes.default.string,
    rightArrow: _propTypes.default.bool
  };
  CardButton.defaultProps = {
    underlayColor: 'rgba(0, 0, 0, 0.05)',
    hasShadow: true
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      height: (0, _sizes.adjustSize)(240),
      paddingHorizontal: (0, _sizes.adjustSize)(60),
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: '#fff'
    },
    iconContainer: {
      marginRight: (0, _sizes.adjustSize)(39),
      width: (0, _sizes.adjustSize)(120),
      height: (0, _sizes.adjustSize)(120),
      borderRadius: (0, _sizes.adjustSize)(60),
      justifyContent: 'center',
      alignItems: 'center'
    },
    icon: {
      width: (0, _sizes.adjustSize)(72),
      height: (0, _sizes.adjustSize)(72),
      resizeMode: 'contain'
    },
    iconText: {
      fontFamily: _fonts.FontKmedium,
      fontSize: (0, _sizes.adjustSize)(60),
      color: '#fff'
    },
    titleContainer: {
      flex: 1
    },
    title: {
      fontFamily: _fonts.FontDefault,
      fontSize: (0, _sizes.adjustSize)(45),
      color: '#000'
    },
    subtitle: {
      fontFamily: _fonts.FontDefault,
      fontSize: (0, _sizes.adjustSize)(36),
      lineHeight: (0, _sizes.adjustSize)(42),
      color: '#999'
    },
    switchContainer: {
      marginLeft: (0, _sizes.adjustSize)(30)
    },
    rightText: {
      fontFamily: _fonts.FontDefault,
      fontSize: (0, _sizes.adjustSize)(36),
      color: '#999',
      marginLeft: (0, _sizes.adjustSize)(30)
    }
  });
},10595,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10347,10791,10776,10782,10785,10311]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ListItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _fns = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _ListItem.default,
    name: 'ListItem',
    adapter: {
      onMounted: function onMounted() {
        this.handle();
      },
      handle: function handle(v) {
        var _this = this;

        var i18n = this.i18n;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            rightArrow = _this$item.rightArrow;

        var values = this.values;
        var onClick = this.item.onClick;
        var handle = (0, _handlers.getHandler)(onClick);
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          value: i18n.value ? i18n.value.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          hideArrow: rightArrow !== true,
          onPress: handle ? function () {
            handle((0, _objectSpread2.default)({}, _this.item, {
              title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : ''
            }), spec, v ? v.value : '', (0, _toConsumableArray2.default)(values), i18n);
          } : null
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10598,[14305,14314,14359,14347,10329,10779,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _ListItem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _fns = _$$_REQUIRE(_dependencyMap[5]);

  var _consts = _$$_REQUIRE(_dependencyMap[6]);

  var _handlers = _$$_REQUIRE(_dependencyMap[7]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[8]);

  var _sceneManager = _$$_REQUIRE(_dependencyMap[9]);

  var _default = {
    UIComponent: _ListItem.default,
    name: 'ListItemWithTimerSetting',
    adapter: {
      onMounted: function onMounted() {
        var _this = this;

        var _this$item$specs = (0, _slicedToArray2.default)(this.item.specs, 1),
            spec = _this$item$specs[0];

        if (!spec) {
          return null;
        }

        this.updateInfo([]);
        this.loadTimerScenes();
        this.listeners.push(_reactNative.DeviceEventEmitter.addListener(_consts.CONSTSETTINGSHOWFROMNATIVE, function () {
          _this.loadTimerScenes();
        }));
      },
      loadTimerScenes: function loadTimerScenes() {
        var _this2 = this;

        var _this$item = this.item,
            _this$item$specs2 = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs2[0],
            _this$item$onValue = _this$item.onValue,
            onValue = _this$item$onValue === undefined ? true : _this$item$onValue,
            _this$item$offValue = _this$item.offValue,
            offValue = _this$item$offValue === undefined ? false : _this$item$offValue;

        _miot.Service.scene.loadTimerScenes(_consts.DeviceID, {}).then(function (scenes) {
          _this2.updateInfo((0, _sceneManager.getTimers)(scenes, spec, null, onValue, offValue));
        }).catch(_fns.log);
      },
      updateInfo: function updateInfo(scenes) {
        var _this3 = this;

        var i18n = this.i18n;

        var _this$item$specs3 = (0, _slicedToArray2.default)(this.item.specs, 1),
            spec = _this$item$specs3[0];

        var hasScene = !!scenes.length;
        var handle = (0, _handlers.getHandler)('goTimerSetting');
        this.setState({
          title: i18n.title ? i18n.title(hasScene) : '',
          subtitle: i18n.subtitle ? i18n.subtitle(hasScene) : '',
          onPress: handle ? function () {
            handle(_this3.item, spec, hasScene, [hasScene], i18n);
          } : _fns.NOOP
        });
      }
    }
  };
  exports.default = _default;
},10601,[14305,14347,10033,10074,10329,10779,10010,10520,10007,10589]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _SmallNumbers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _fns = _$$_REQUIRE(_dependencyMap[3]);

  var _default = {
    UIComponent: _SmallNumbers.default,
    name: 'SmallNumbers',
    adapter: {
      handle: function handle(v) {
        var _this$item = this.item,
            _this$item$specs = _this$item.specs,
            specs = _this$item$specs === undefined ? [] : _this$item$specs,
            itemIndexs = _this$item.itemIndexs,
            titleIndexs = _this$item.titleIndexs,
            themeColor = _this$item.themeColor,
            titleThemeColor = _this$item.titleThemeColor;
        var values = this.values;
        var i18n = this.i18n;

        if (!itemIndexs) {
          itemIndexs = specs.map(function (spec, index) {
            return index;
          });
        }

        if (!titleIndexs) {
          titleIndexs = [];
        }

        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var titleThemeColorFn = this.titleThemeColorFn || (this.titleThemeColorFn = titleThemeColor ? (0, _fns.getStringGenerator)(titleThemeColor) : null);
        var newState = {
          list: itemIndexs.map(function (index, idx) {
            var titleFn = i18n['title' + idx];
            var valueFn = i18n['value' + idx];
            var tValue = values[titleIndexs[idx] || index];
            var vValue = values[index];
            return {
              spec: specs[index],
              title: titleFn ? titleFn(tValue) : String(tValue),
              number: valueFn ? valueFn([undefined, null].indexOf(vValue) !== -1 ? '-' : vValue) : String([undefined, null].indexOf(vValue) !== -1 ? '-' : vValue)
            };
          }).filter(function (item) {
            return !!item.spec;
          }).map(function (_ref) {
            var title = _ref.title,
                number = _ref.number;
            return {
              title: title,
              number: number
            };
          })
        };

        if (themeColorFn !== null) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (titleThemeColorFn !== null) {
          newState.titleThemeColor = titleThemeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      }
    }
  };
  exports.default = _default;
},10604,[14305,14359,10607,10779]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _sizes = _$$_REQUIRE(_dependencyMap[10]);

  var _fonts = _$$_REQUIRE(_dependencyMap[11]);

  var _colors = _$$_REQUIRE(_dependencyMap[12]);

  var SmallNumber = function (_PureComponent) {
    (0, _inherits2.default)(SmallNumber, _PureComponent);

    function SmallNumber() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, SmallNumber);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SmallNumber)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.offsetX = new _reactNative.Animated.Value(0);
      _this.containerWidth = 0;
      _this.centerWidth = 0;
      _this.centerX = 0;

      _this.onLayoutContainer = function (e) {
        var width = e.nativeEvent.layout.width;
        _this.containerWidth = width;

        if (width && _this.centerWidth) {
          _this.offsetX.setValue(width / 2 - _this.centerWidth / 2 - _this.centerX);
        }
      };

      _this.onLayoutCenter = function (e) {
        var _e$nativeEvent$layout = e.nativeEvent.layout,
            width = _e$nativeEvent$layout.width,
            x = _e$nativeEvent$layout.x;
        _this.centerWidth = width;
        _this.centerX = x;

        if (width && _this.containerWidth) {
          _this.offsetX.setValue(_this.containerWidth / 2 - width / 2 - x);
        }
      };

      _this.getItems = function () {
        var _this$props = _this.props,
            list = _this$props.list,
            themeColor = _this$props.themeColor,
            titleThemeColor = _this$props.titleThemeColor;
        var filtered = list.filter(function (item) {
          return item && item.title !== undefined && item.number !== undefined;
        });
        var total = filtered.length;
        var isOdd = total % 2 === 1;
        var centerIndex = total <= 0 ? 0 : isOdd ? total / 2 - 0.5 : total / 2;
        return filtered.map(function (item, index) {
          var title = item.title,
              number = item.number;
          var theme = item.themeColor || themeColor;
          var titleTheme = item.titleThemeColor || titleThemeColor;
          return _react.default.createElement(_react.Fragment, {
            key: index
          }, index > 0 ? _react.default.createElement(_reactNative.View, {
            style: [Styles.separator, titleTheme ? {
              backgroundColor: titleTheme
            } : null],
            onLayout: centerIndex === index && !isOdd ? _this.onLayoutCenter : null
          }) : null, _react.default.createElement(_reactNative.View, {
            style: Styles.item,
            onLayout: centerIndex === index && isOdd ? _this.onLayoutCenter : null
          }, _react.default.createElement(_reactNative.Text, {
            style: [Styles.number, theme ? {
              color: theme
            } : null, isNaN(number) ? {
              fontSize: (0, _sizes.adjustSize)(88)
            } : null]
          }, number), _react.default.createElement(_reactNative.Text, {
            style: [Styles.title, titleTheme ? {
              color: titleTheme
            } : null]
          }, title)));
        });
      };

      return _this;
    }

    (0, _createClass2.default)(SmallNumber, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            list = _this$props2.list,
            themeColor = _this$props2.themeColor;

        if (!list || !list.length) {
          return null;
        }

        var items = this.getItems();
        var offsetX = this.offsetX;
        return _react.default.createElement(_reactNative.View, {
          style: Styles.container,
          onLayout: this.onLayoutContainer
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [Styles.containerInner, {
            transform: [{
              translateX: offsetX
            }]
          }]
        }, items));
      }
    }]);
    return SmallNumber;
  }(_react.PureComponent);

  exports.default = SmallNumber;
  SmallNumber.propTypes = {
    list: _propTypes.default.arrayOf(_propTypes.default.shape({
      title: _propTypes.default.string,
      number: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      themeColor: _propTypes.default.any,
      titleThemeColor: _propTypes.default.any
    })),
    themeColor: _propTypes.default.any,
    titleThemeColor: _propTypes.default.any
  };

  var Styles = _reactNative.StyleSheet.create({
    containerInner: {
      alignItems: 'center',
      flexDirection: 'row',
      justifyContent: 'center'
    },
    separator: {
      width: (0, _sizes.adjustSize)(2.1),
      height: (0, _sizes.adjustSize)(135),
      marginHorizontal: (0, _sizes.adjustSize)(33),
      marginTop: (0, _sizes.adjustSize)(12),
      backgroundColor: 'rgba(0, 0, 0, 1)',
      opacity: 0.2
    },
    item: {
      alignItems: 'center'
    },
    title: {
      fontSize: (0, _sizes.adjustSize)(36),
      fontFamily: _fonts.FontDefault,
      lineHeight: (0, _sizes.adjustSize)(48),
      color: '#1C2229',
      opacity: 1
    },
    number: {
      fontSize: (0, _sizes.adjustSize)(102),
      fontFamily: 'Helvetica',
      lineHeight: (0, _sizes.adjustSize)(123),
      color: '#1C2229',
      opacity: 0.8
    }
  });
},10607,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10776,10782,10785]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _Fan = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _fns = _$$_REQUIRE(_dependencyMap[3]);

  var _default = {
    UIComponent: _Fan.default,
    name: 'Fan',
    adapter: {
      handle: function handle(v) {
        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 3),
            specMode = _this$item$specs[0],
            specFanLevel = _this$item$specs[1],
            specFanOn = _this$item$specs[2],
            type = _this$item.type,
            speedLevel = _this$item.speedLevel,
            noDisableColor = _this$item.noDisableColor;

        var values = this.values;

        var _values = (0, _slicedToArray2.default)(values, 3),
            vMode = _values[0],
            vFanLevel = _values[1],
            vFanOn = _values[2];

        var typeFn = this.typeFn || (this.typeFn = type ? (0, _fns.getStringGenerator)(type) : null);
        var speedLevelFn = this.speedLevelFn || (this.speedLevelFn = speedLevel ? (0, _fns.getStringGenerator)(speedLevel) : null);
        var newState = {
          noDisableColor: noDisableColor
        };

        if (specFanOn && !vFanOn) {
          newState.disabled = true;
        }

        if (typeFn) {
          newState.type = parseInt(typeFn(vMode), 10);
        }

        if (speedLevelFn) {
          newState.speedLevel = parseInt(speedLevelFn(vFanLevel), 10);
        }

        this.setState(newState);
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10610,[14305,14347,10848,10779]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _ListItemWithSwitch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _handlers = _$$_REQUIRE(_dependencyMap[5]);

  var _default = {
    UIComponent: _ListItemWithSwitch.default,
    name: 'ListItemWithSwitch',
    adapter: {
      handle: function handle(v) {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            onSwitch = _this$item.onSwitch;

        var i18n = this.i18n;
        var values = this.values;
        var handleSwitch = (0, _handlers.getHandler)(onSwitch);
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          disabled: false,
          value: !!values[0],
          onValueChange: handleSwitch ? function (v) {
            handleSwitch(_this.item, spec, v);
          } : _fns.NOOP
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10613,[14305,14359,14347,10344,10779,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _ListItemWithSlider = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _handlers = _$$_REQUIRE(_dependencyMap[5]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _ListItemWithSlider.default,
    name: 'ListItemWithSlider',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            onSlide = _this$item.onSlide;

        var i18n = this.i18n;
        var specDef = (0, _instanceManager.getSpecDefinition)(spec) || {};
        var vr = specDef['value-range'] || [0, 100, 1];
        var values = this.values;
        var handleSlidingComplete = onSlide ? (0, _handlers.getHandler)(onSlide) : null;
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          sliderProps: {
            minimumValue: vr[0],
            maximumValue: vr[1],
            step: vr[2],
            value: values[0] || vr[0]
          },
          onSlidingComplete: handleSlidingComplete ? function (v) {
            handleSlidingComplete(_this.item, spec, v);
          } : _fns.NOOP
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10616,[14305,14359,14347,10341,10779,10520,10007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _Airer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _Airer.default,
    name: 'Airer',
    adapter: {
      onMounted: function onMounted() {
        this.navigationEventKey = (0, _PageWithNormalNavigator.getNavigationEventKey)();
      },
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 5),
            specCurrentPosition = _this$item$specs[0],
            specLightOn = _this$item$specs[1],
            specStatus = _this$item$specs[2],
            specDryLeftTime = _this$item$specs[3],
            specTargetPosition = _this$item$specs[4],
            onValueChange = _this$item.onValueChange;

        var i18n = this.i18n;
        var values = this.values;

        var _values = (0, _slicedToArray2.default)(values, 5),
            vCurrentPosition = _values[0],
            vLightOn = _values[1],
            vStatus = _values[2],
            vDryLeftTime = _values[3],
            vTargetPosition = _values[4];

        var handleChange = (0, _handlers.getHandler)(onValueChange);
        var subtitleIndexs = [2, 0, 3];
        var newState = {
          position: vTargetPosition || 0,
          lightOn: !!vLightOn,
          controlable: specTargetPosition ? true : false,
          onValueChange: handleChange ? function (v) {
            handleChange(_this.item, specTargetPosition, Math.round(v));
          } : _fns.log,
          onValueChanging: function onValueChanging(v) {
            var subtitle = Math.round(v) + "%";

            _reactNative.DeviceEventEmitter.emit(_this.navigationEventKey, {
              subtitle: subtitle
            });
          }
        };
        this.setState(newState);
        var subtitles = [];
        subtitleIndexs.forEach(function (spec, index) {
          if (i18n["subtitle" + index]) {
            subtitles.push(i18n["subtitle" + index](values[subtitleIndexs[index]]));
          }
        });

        _reactNative.DeviceEventEmitter.emit(this.navigationEventKey, {
          subtitle: subtitles.filter(function (s) {
            return !!s;
          }).join('|')
        });
      }
    }
  };
  exports.default = _default;
},10619,[14305,14347,10033,10875,10779,10821,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _DoubleSelectors = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _icons = _$$_REQUIRE(_dependencyMap[5]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[6]);

  var _handlers = _$$_REQUIRE(_dependencyMap[7]);

  var _default = {
    UIComponent: _DoubleSelectors.default,
    name: 'DoubleSelectors',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _toArray2.default)(_this$item.specs),
            specFirst = _this$item$specs[0],
            specRest = _this$item$specs.slice(1),
            secondIndex = _this$item.secondIndex,
            secondDisabledFirstValues = _this$item.secondDisabledFirstValues,
            hasShadow = _this$item.hasShadow,
            buttonIcons = _this$item.buttonIcons,
            selectedButtonIcons = _this$item.selectedButtonIcons,
            onSelects = _this$item.onSelects;

        var i18n = this.i18n,
            values = this.values;
        var specDefFirst = (0, _instanceManager.getSpecDefinition)(specFirst);
        var vlFirst = specDefFirst['value-list'];
        var titlesFirst = this.titlesFirst || (this.titlesFirst = vlFirst.map(function (_, index) {
          return i18n.buttonNames0 ? i18n.buttonNames0(index) : '';
        }));
        var itemsFirst = this.itemsFirst || (this.itemsFirst = (0, _instanceManager.parseValueList)(vlFirst, buttonIcons[0], selectedButtonIcons[0], titlesFirst, 'icon', 'iconSelected', 'title'));
        var selectedIndexFirst = vlFirst.findIndex(function (v) {
          return v.value === values[0];
        });
        var initSelectedIndexsFirst = [selectedIndexFirst === -1 ? 0 : selectedIndexFirst];
        var onSelectFirst = (0, _handlers.getHandler)(onSelects[0]);
        var secondIndexFn = this.secondIndexFn || (this.secondIndexFn = secondIndex ? (0, _fns.getStringGenerator)(secondIndex) : null);
        var secondIndexN = secondIndexFn ? parseInt(secondIndexFn.apply(undefined, (0, _toConsumableArray2.default)(values)), 10) : 1;
        var specSecond = specRest[secondIndexN - 1];
        var specDefSecond = specSecond ? (0, _instanceManager.getSpecDefinition)(specSecond) : null;
        var vlSecond = specSecond ? specDefSecond['value-list'] : [];
        var titlesSecond = this['titlesSecond' + secondIndexN] || (this['titlesSecond' + secondIndexN] = vlSecond.map(function (_, index) {
          return i18n['buttonNames' + secondIndexN] ? i18n['buttonNames' + secondIndexN](index) : '';
        }));
        var itemsSecond = this['itemsSecond' + secondIndexN] || (this['itemsSecond' + secondIndexN] = (0, _instanceManager.parseValueList)(vlSecond, buttonIcons[secondIndexN], selectedButtonIcons[secondIndexN], titlesSecond, 'icon', 'iconSelected', 'title'));
        var selectedIndexSecond = vlSecond.findIndex(function (v) {
          return v.value === values[secondIndexN];
        });
        var initSelectedIndexsSecond = [selectedIndexSecond === -1 ? 0 : selectedIndexSecond];
        var onSelectSecond = (0, _handlers.getHandler)(onSelects[secondIndexN]);
        var secondDisabled = secondDisabledFirstValues ? secondDisabledFirstValues.indexOf(values[0]) !== -1 : false;
        var subtitleValues = [titlesFirst[selectedIndexFirst] || '', titlesSecond[selectedIndexSecond] || ''];
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          subtitle: i18n.subtitle ? i18n.subtitle.apply(i18n, subtitleValues) : '',
          secondShow: !!specDefSecond,
          secondDisabled: secondDisabled,
          hasShadow: hasShadow,
          first: {
            initSelectedIndexs: initSelectedIndexsFirst,
            onSelected: onSelectFirst ? function (value) {
              onSelectFirst(_this.items, specFirst, value);
            } : null,
            items: itemsFirst
          },
          second: {
            initSelectedIndexs: initSelectedIndexsSecond,
            onSelected: onSelectSecond ? function (value) {
              onSelectSecond(_this.items, specSecond, value);
            } : null,
            items: itemsSecond
          }
        };
        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10622,[14305,14359,22396,10890,10779,10013,10007,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var _HeaterHeader = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _fns = _$$_REQUIRE(_dependencyMap[8]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[9]);

  function getBetweenIndex(range, v) {
    var i = range.findIndex(function (item, index) {
      return index === 0 && v < range[0] || v >= range[index - 1] && v < range[index];
    });
    return i === -1 ? range.length : i;
  }

  var _default = {
    UIComponent: _HeaterHeader.default,
    name: 'HeaterHeader',
    adapter: {
      cachedBackgroundProps: {},
      onMounted: function onMounted() {
        this.backgroundEventKey = (0, _PageWithNormalNavigator.getBackgroundEventKey)();
      },
      setBackground: function setBackground(props) {
        var hideBackground = this.item.hideBackground;

        if (hideBackground) {
          return;
        }

        this.cachedBackgroundProps = (0, _objectSpread2.default)({}, this.cachedBackgroundProps, props);

        _reactNative.DeviceEventEmitter.emit(this.backgroundEventKey, _react.default.createElement(_HeaterHeader.Background, this.cachedBackgroundProps));
      },
      handle: function handle() {
        var _this$item = this.item,
            _this$item$range = _this$item.range,
            range = _this$item$range === undefined ? [16] : _this$item$range,
            themeColor = _this$item.themeColor;
        var values = this.values;

        var _values = (0, _slicedToArray2.default)(values, 2),
            vOn = _values[0],
            vTemperature = _values[1];

        var i18n = this.i18n;
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var temperatureIndex = typeof vTemperature === 'number' ? getBetweenIndex(range, vTemperature) : Math.round(range.length / 2);
        var newState = {
          title: vOn && i18n.onTitle ? i18n.onTitle(temperatureIndex) : !vOn && i18n.offTitle ? i18n.offTitle(temperatureIndex) : ''
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
        this.setBackground({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
        this.setBackground({
          on: on
        });
      }
    }
  };
  exports.default = _default;
},10625,[14308,14305,14359,14347,14314,10297,10033,10851,10779,10821]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _sizes = _$$_REQUIRE(_dependencyMap[9]);

  var UIComponent = function (_PureComponent) {
    (0, _inherits2.default)(UIComponent, _PureComponent);

    function UIComponent() {
      (0, _classCallCheck2.default)(this, UIComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UIComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        var height = this.props.height;
        return _react.default.createElement(_reactNative.View, {
          style: [Styles.container, {
            height: height
          }]
        });
      }
    }]);
    return UIComponent;
  }(_react.PureComponent);

  var Styles = _reactNative.StyleSheet.create({});

  var _default = {
    UIComponent: UIComponent,
    name: 'Gap',
    adapter: {
      onMounted: function onMounted() {
        var height = this.item.height;
        var newState = {
          height: (0, _sizes.adjustSize)(height * 3)
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10628,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10776]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _Curtain = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _Curtain.default,
    name: 'Curtain',
    adapter: {
      onMounted: function onMounted() {
        this.navigationEventKey = (0, _PageWithNormalNavigator.getNavigationEventKey)();
      },
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 4),
            specCurtainStyle = _this$item$specs[0],
            specStatus = _this$item$specs[1],
            specCurrentPosition = _this$item$specs[2],
            specTargetPosition = _this$item$specs[3],
            styleIndex = _this$item.styleIndex,
            statusIndex = _this$item.statusIndex,
            onValueChange = _this$item.onValueChange;

        var i18n = this.i18n;

        var _this$values = (0, _slicedToArray2.default)(this.values, 4),
            vCurtainStyle = _this$values[0],
            vStatus = _this$values[1],
            vCurrentPosition = _this$values[2],
            vTargetPosition = _this$values[3];

        var styleIndexFn = this.styleIndexFn || (this.styleIndexFn = styleIndex ? (0, _fns.getStringGenerator)(styleIndex) : null);
        var statusIndexFn = this.statusIndexFn || (this.statusIndexFn = statusIndex ? (0, _fns.getStringGenerator)(statusIndex) : null);
        var position = vTargetPosition;
        var handleChange = (0, _handlers.getHandler)(onValueChange);
        var newState = {
          type: styleIndexFn ? parseInt(styleIndexFn(vCurtainStyle)) : 0,
          position: position,
          onValueChange: handleChange ? function (v) {
            handleChange(_this.item, specTargetPosition, Math.round(v));
          } : _fns.log,
          onValueChanging: function onValueChanging(v) {
            var subtitle = i18n.subtitle ? i18n.subtitle(vStatus, Math.round(v)) : '';

            _reactNative.DeviceEventEmitter.emit(_this.navigationEventKey, {
              subtitle: subtitle
            });
          }
        };
        this.setState(newState);
        var subtitle = i18n.subtitle ? i18n.subtitle(vStatus, isFinite(vCurrentPosition) ? vCurrentPosition : isFinite(vTargetPosition) ? vTargetPosition : '') : '';

        _reactNative.DeviceEventEmitter.emit(this.navigationEventKey, {
          subtitle: subtitle
        });
      }
    }
  };
  exports.default = _default;
},10631,[14305,14347,10033,10938,10779,10821,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _CurtainStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _icons = _$$_REQUIRE(_dependencyMap[3]);

  var _handlers = _$$_REQUIRE(_dependencyMap[4]);

  var _default = {
    UIComponent: _CurtainStyle.default,
    name: 'CurtainStyle',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            _this$item$icons = _this$item.icons,
            icons = _this$item$icons === undefined ? [] : _this$item$icons,
            _this$item$ids = _this$item.ids,
            ids = _this$item$ids === undefined ? [] : _this$item$ids,
            onSelect = _this$item.onSelect;

        var i18n = this.i18n;
        var values = this.values;
        var iconSources = [];
        var titles = [];
        var handleSelect = (0, _handlers.getHandler)(onSelect);
        icons.forEach(function (_, index) {
          var title = i18n["title" + index];
          titles.push(title ? title() : '');
          iconSources.push((0, _icons.getIcon)(icons[index]));
        });
        this.setState({
          icons: iconSources,
          titles: titles,
          ids: ids,
          checkedId: values[0],
          onValueChange: handleSelect ? function (id) {
            handleSelect(_this.item, spec, id);
          } : null
        });
      }
    }
  };
  exports.default = _default;
},10634,[14305,14347,10953,10013,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _PrimeButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _handlers = _$$_REQUIRE(_dependencyMap[5]);

  var _default = {
    UIComponent: _PrimeButton.default,
    name: 'PrimeButton',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            onClick = _this$item.onClick,
            themeColor = _this$item.themeColor,
            textColor = _this$item.textColor;

        var i18n = this.i18n;
        var values = this.values;
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var textColorFn = this.textColorFn || (this.textColorFn = textColor ? (0, _fns.getStringGenerator)(textColor) : null);
        var handleClick = onClick ? (0, _handlers.getHandler)(onClick) : null;
        var newState = {
          title: i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          onClick: handleClick ? function () {
            handleClick(_this.item, spec, null);
          } : _fns.NOOP
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (textColorFn) {
          newState.textColor = textColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10637,[14305,14359,14347,10956,10779,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _QAList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = {
    UIComponent: _QAList.default,
    name: 'QAList',
    adapter: {
      handle: function handle() {
        var i18n = this.i18n;
        var list = [];
        var listIndex = 0;
        var hasList = true;

        while (hasList) {
          var title = i18n["title" + listIndex];
          var text = i18n["text" + listIndex];

          if (!title && !text) {
            hasList = false;
            break;
          }

          list.push({
            title: title(),
            text: text()
          });
          listIndex += 1;
        }

        var newState = {
          list: list
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10640,[14305,10959]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _MultiButtons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _icons = _$$_REQUIRE(_dependencyMap[7]);

  var _default = {
    UIComponent: _MultiButtons.default,
    name: 'MultiButtons',
    adapter: {
      handle: function handle(v) {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _toArray2.default)(_this$item.specs),
            specSwitch = _this$item$specs[0],
            specButtons = _this$item$specs.slice(1),
            _this$item$buttonIcon = _this$item.buttonIcons,
            buttonIcons = _this$item$buttonIcon === undefined ? [] : _this$item$buttonIcon,
            _this$item$selectedBu = _this$item.selectedButtonIcons,
            selectedButtonIcons = _this$item$selectedBu === undefined ? [] : _this$item$selectedBu,
            _this$item$onClicks = _this$item.onClicks,
            onClicks = _this$item$onClicks === undefined ? [] : _this$item$onClicks,
            _this$item$params = _this$item.params,
            params = _this$item$params === undefined ? [] : _this$item$params,
            onSwitch = _this$item.onSwitch;

        var values = this.values;
        var i18n = this.i18n;
        var title = i18n.title ? i18n.title() : '';
        var handleSwitch = (0, _handlers.getHandler)(onSwitch);
        var items = this.items || (this.items = buttonIcons.map(function (i, index) {
          return {
            title: i18n.buttonNames ? i18n.buttonNames(index) : '',
            icon: (0, _icons.getIcon)(buttonIcons[index]),
            iconSelected: (0, _icons.getIcon)(selectedButtonIcons[index] || buttonIcons[index])
          };
        }));
        var themeColorFn = this.themeColorFn || (this.themeColorFn = this.item.themeColor ? (0, _fns.getStringGenerator)(this.item.themeColor) : null);

        if (!items || items.length < 2) {
          return;
        }

        var newState = {
          title: title,
          items: items,
          onClick: function onClick(index) {
            var handle = (0, _handlers.getHandler)(onClicks[index]);
            var param = params[index];

            if (handle) {
              handle(_this.item, specButtons[index], params[index]);
            }
          },
          switchDisabled: specSwitch && !values[1],
          showSwitch: !!specSwitch,
          switchOn: values[1],
          onSwitch: handleSwitch ? function (value) {
            handleSwitch(_this.item, specSwitch, value);
          } : _fns.NOOP
        };

        if (themeColorFn !== null) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10643,[14305,14359,22396,10646,10779,10007,10520,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Switch = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _CircleButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _sizes = _$$_REQUIRE(_dependencyMap[14]);

  var _fns = _$$_REQUIRE(_dependencyMap[15]);

  var _fonts = _$$_REQUIRE(_dependencyMap[16]);

  var _colors = _$$_REQUIRE(_dependencyMap[17]);

  var _accessibilityHelper = _$$_REQUIRE(_dependencyMap[18]);

  var MultiButtons = function (_Component) {
    (0, _inherits2.default)(MultiButtons, _Component);

    function MultiButtons() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, MultiButtons);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MultiButtons)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        activeIndex: -1
      };

      _this.onClick = function (index) {
        var onClick = _this.props.onClick;

        if (typeof onClick === 'function') {
          onClick(index);
        }
      };

      _this.getSelectors = function () {
        var _this$props = _this.props,
            items = _this$props.items,
            themeColor = _this$props.themeColor,
            disabled = _this$props.disabled,
            switchDisabled = _this$props.switchDisabled;
        var itemCount = items.length;

        var sizeLevel = _this.getSizeLevel(items);

        return items.map(function (item, index) {
          var isHorizontal = itemCount === 2;
          var hasSeparator = isHorizontal;
          var hideTitle = itemCount >= 5 || items.findIndex(function (item) {
            return item && item.icon;
          }) === -1;
          return _react.default.createElement(_react.Fragment, {
            key: index
          }, hasSeparator && index > 0 ? _react.default.createElement(_reactNative.View, {
            style: Styles.separator
          }) : null, _react.default.createElement(_CircleButton.default, (0, _extends2.default)({
            titleIsTouchable: _this.props.titleIsTouchable,
            selected: _this.props.activeIndex === index,
            showHighlight: _this.props.activeIndex === -1,
            sizeLevel: sizeLevel,
            horizontal: isHorizontal,
            themeColor: themeColor,
            disabled: disabled || switchDisabled,
            title: hideTitle ? '' : item.title,
            icon: item.icon,
            iconSelected: item.iconSelected,
            iconText: item.title || '',
            onPress: function onPress() {
              _this.onClick(index);
            }
          }, (0, _accessibilityHelper.getAccessibilityConfig)({
            accessible: _this.props.accessible,
            accessibilityLabel: item.accessibilityLabel,
            accessibilityHint: item.accessibilityHint
          }))));
        });
      };

      return _this;
    }

    (0, _createClass2.default)(MultiButtons, [{
      key: "getSizeLevel",
      value: function getSizeLevel(items) {
        var itemCount = items.length;
        return itemCount <= 2 ? 0 : itemCount === 3 ? 1 : itemCount === 4 ? 2 : 3;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            title = _this$props2.title,
            items = _this$props2.items,
            hasShadow = _this$props2.hasShadow,
            showSwitch = _this$props2.showSwitch,
            disabled = _this$props2.disabled,
            switchOn = _this$props2.switchOn,
            themeColor = _this$props2.themeColor,
            onSwitch = _this$props2.onSwitch;

        if (!items || !items.length) {
          return null;
        }

        var Wrap = hasShadow ? _ContainerWithShadowAndSeparator.default : _react.Fragment;
        var sizeLevel = this.getSizeLevel(items);
        return _react.default.createElement(Wrap, null, _react.default.createElement(_reactNative.View, {
          style: Styles.container
        }, title || showSwitch ? _react.default.createElement(_reactNative.View, (0, _extends2.default)({
          style: [Styles.header, disabled ? {
            opacity: 0.3
          } : null]
        }, (0, _accessibilityHelper.getAccessibilityConfig)({
          accessible: this.props.accessible,
          accessibilityRole: showSwitch ? _accessibilityHelper.AccessibilityRoles.switch : _accessibilityHelper.AccessibilityPropTypes.text,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityState: showSwitch ? {
            disabled: disabled,
            checked: switchOn
          } : {
            disabled: disabled
          }
        })), title ? _react.default.createElement(_reactNative.View, {
          style: Styles.titleContainer
        }, _react.default.createElement(_reactNative.Text, {
          style: Styles.title
        }, title)) : null, showSwitch ? _react.default.createElement(_Switch.default, (0, _extends2.default)({
          disabled: disabled,
          value: switchOn,
          onTintColor: themeColor || _colors.ColorGreen,
          onValueChange: onSwitch
        }, (0, _accessibilityHelper.getAccessibilityConfig)({
          accessible: false
        }))) : null) : null, _react.default.createElement(_reactNative.View, {
          style: [Styles.selectors, title || showSwitch ? Styles.selectorsWithHeader : null, items.length >= 4 ? null : [Styles.selectorsPadding0, Styles.selectorsPadding1, Styles.selectorsPadding2, Styles.selectorsPadding3][sizeLevel]]
        }, this.getSelectors())));
      }
    }]);
    return MultiButtons;
  }(_react.Component);

  exports.default = MultiButtons;
  MultiButtons.propTypes = {
    title: _propTypes.default.string,
    activeIndex: _propTypes.default.number,
    items: _propTypes.default.arrayOf(_propTypes.default.shape({
      icon: _propTypes.default.oneOf([_propTypes.default.number, _propTypes.default.object]).required,
      iconSelected: _propTypes.default.oneOf([_propTypes.default.number, _propTypes.default.object]).required,
      title: _propTypes.default.string,
      accessibilityLabel: _accessibilityHelper.AccessibilityPropTypes.accessibilityLabel,
      accessibilityHint: _accessibilityHelper.AccessibilityPropTypes.accessibilityHint
    })),
    onClick: _propTypes.default.func,
    disabled: _propTypes.default.bool,
    switchDisabled: _propTypes.default.bool,
    themeColor: _propTypes.default.any,
    showSwitch: _propTypes.default.bool,
    switchOn: _propTypes.default.bool,
    titleIsTouchable: _propTypes.default.bool,
    onSwitch: _propTypes.default.func,
    hasShadow: _propTypes.default.bool,
    accessible: _accessibilityHelper.AccessibilityPropTypes.accessible,
    accessibilityLabel: _accessibilityHelper.AccessibilityPropTypes.accessibilityLabel,
    accessibilityHint: _accessibilityHelper.AccessibilityPropTypes.accessibilityHint
  };
  MultiButtons.defaultProps = {
    title: '',
    activeIndex: -1,
    items: [],
    onClick: _fns.NOOP,
    disabled: false,
    switchDisabled: false,
    themeColor: '',
    showSwitch: false,
    switchOn: true,
    titleIsTouchable: false,
    onSwitch: _fns.log,
    hasShadow: true
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: '#fff',
      paddingHorizontal: (0, _sizes.adjustSize)(60)
    },
    header: {
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    titleContainer: {
      flex: 1,
      height: (0, _sizes.adjustSize)(156),
      flexDirection: 'row',
      alignItems: 'center'
    },
    title: {
      fontSize: (0, _sizes.adjustSize)(42),
      fontFamily: _fonts.FontDefault,
      color: '#000'
    },
    selectors: {
      paddingVertical: (0, _sizes.adjustSize)(60),
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    selectorsWithHeader: {
      paddingTop: 0
    },
    selectorsPadding0: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorsPadding1: {
      paddingHorizontal: (0, _sizes.adjustSize)(78)
    },
    selectorsPadding2: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorsPadding3: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorWithHeader: {
      paddingTop: 0
    },
    separator: {
      width: 1,
      height: (0, _sizes.adjustSize)(120),
      backgroundColor: 'rgba(0, 0, 0, 0.15)',
      marginHorizontal: (0, _sizes.adjustSize)(60)
    }
  });
},10646,[14308,14305,14344,14320,14323,14371,14377,14386,10297,10033,10318,10347,10550,10791,10776,10779,10782,10785,11025]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _LightControl = _$$_REQUIRE(_dependencyMap[13]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[14]);

  var _colors = _$$_REQUIRE(_dependencyMap[15]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[16]);

  var _handlers = _$$_REQUIRE(_dependencyMap[17]);

  var setBackground = (0, _handlers.getHandler)('setBackground');

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      (0, _classCallCheck2.default)(this, UIComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UIComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            backgroundEventKey = _this$props.backgroundEventKey,
            disabled = _this$props.disabled,
            disableColor = _this$props.disableColor,
            color = _this$props.color,
            supportColor = _this$props.supportColor,
            supportColorTemperature = _this$props.supportColorTemperature,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["backgroundEventKey", "disabled", "disableColor", "color", "supportColor", "supportColorTemperature"]);

        if (disabled && disableColor) {
          disabled = false;
          color = disableColor;
          supportColor = true;
          supportColorTemperature = false;
        }

        setBackground({
          backgroundEventKey: backgroundEventKey
        }, null, (0, _objectSpread2.default)({
          disabled: disabled
        }, rest, {
          color: color,
          supportColor: supportColor,
          supportColorTemperature: supportColorTemperature
        }));
        return null;
      }
    }]);
    return UIComponent;
  }(_react.Component);

  var _default = {
    UIComponent: UIComponent,
    name: 'SetLightBackground',
    adapter: {
      lastSupportBrightness: false,
      lastSupportColor: false,
      lastSupportColorTemperature: false,
      onMounted: function onMounted() {
        this.backgroundEventKey = (0, _PageWithNormalNavigator.getBackgroundEventKey)();
      },
      handle: function handle(v) {
        var values = this.values;
        var transformedValues = (0, _toConsumableArray2.default)(this.values);

        if (typeof transformedValues[2] === 'number') {
          transformedValues[2] = (0, _colors.transformDigtalToHex)(transformedValues[2]);
        }

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 4),
            specMode = _this$item$specs[0],
            specBrightness = _this$item$specs[1],
            specColor = _this$item$specs[2],
            specColorTemperature = _this$item$specs[3],
            disableColor = _this$item.disableColor;

        var disabled = this.state.disabled;
        var specKey = v && 'siid' in v ? (0, _instanceManager.getPropKey)(v) : '';
        var specModeDef = specMode ? (0, _instanceManager.getSpecDefinition)(specMode) : null;
        var specBrightnessDef = specBrightness ? (0, _instanceManager.getSpecDefinition)(specBrightness) : null;
        var brightnessRange = specBrightnessDef ? specBrightnessDef['value-range'] : null;

        var _values = (0, _slicedToArray2.default)(values, 4),
            mode = _values[0],
            brightness = _values[1],
            color = _values[2],
            colorTemperature = _values[3];

        var supportBrightness = specBrightness && typeof brightness === 'number';
        var supportColor = specColor && typeof color === 'number' && (specModeDef ? (specModeDef['value-list'].find(function (v) {
          return v && v.description === 'Color';
        }) || {}).value === values[0] : true);
        var supportColorTemperature = specColorTemperature && typeof colorTemperature === 'number' && (specModeDef ? (specModeDef['value-list'].find(function (v) {
          return v && v.description === 'Day';
        }) || {}).value === values[0] : true);
        var colorTemperatureRange = this.colorTemperatureRange || (this.colorTemperatureRange = specColorTemperature ? (0, _instanceManager.getSpecDefinition)(specColorTemperature)['value-range'] : null);

        if (specKey === (0, _instanceManager.getPropKey)(specBrightness)) {
          this.lastSupportBrightness = true;
        }

        if (specKey === (0, _instanceManager.getPropKey)(specColor)) {
          this.lastSupportColor = true;
          this.lastSupportColorTemperature = false;
        }

        if (specKey === (0, _instanceManager.getPropKey)(specColorTemperature)) {
          this.lastSupportColor = false;
          this.lastSupportColorTemperature = true;
        }

        this.setState({
          backgroundEventKey: this.backgroundEventKey,
          disableColor: disableColor,
          supportBrightness: supportBrightness || this.lastSupportBrightness,
          brightness: brightness,
          supportColor: supportColor || this.lastSupportColor && !supportColorTemperature,
          color: color,
          supportColorTemperature: supportColorTemperature || this.lastSupportColorTemperature && !supportColor,
          colorTemperature: colorTemperature,
          colorTemperatureRange: colorTemperatureRange
        });
      }
    }
  };
  exports.default = _default;
},10649,[14308,14305,14347,14359,14314,14407,14320,14323,14371,14377,14386,10297,10033,10803,10821,10785,10007,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _Consumable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _handlers = _$$_REQUIRE(_dependencyMap[5]);

  var _icons = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _Consumable.default,
    name: 'Consumable',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 3),
            specLifeLevel = _this$item$specs[0],
            specLeftTime = _this$item$specs[1],
            specResetLife = _this$item$specs[2],
            icon = _this$item.icon,
            values = this.values,
            i18n = this.i18n;

        var vLifeLevel = values[0];
        var title = i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var subtitle = i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var buy = i18n.buy ? i18n.buy.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var reset = i18n.reset ? i18n.reset.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var resetTip = i18n.resetTip ? i18n.resetTip.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var subtitleColor = isNaN(vLifeLevel) ? '' : vLifeLevel <= 5 ? '#F7384C' : vLifeLevel <= 30 ? '#FF9900' : '#01ADFD';
        var goSearchShop = (0, _handlers.getHandler)('goSearchShop');
        var requestConfirm = (0, _handlers.getHandler)('requestConfirm');
        var triggerAction = (0, _handlers.getHandler)('triggerAction');
        var newState = {
          title: title,
          subtitle: subtitle,
          buy: buy,
          reset: reset,
          subtitleColor: subtitleColor,
          icon: (0, _icons.getIcon)(icon),
          onBuy: function onBuy() {
            goSearchShop(_this.item, {}, null, values, i18n);
          },
          onReset: resetTip ? function () {
            requestConfirm((0, _objectSpread2.default)({}, _this.item, {
              message: resetTip
            }), specResetLife, null, values, i18n);
          } : function () {
            triggerAction(_this.item, specResetLife, null, values, i18n);
          }
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10652,[14305,14314,14359,14347,10989,10520,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _fns = _$$_REQUIRE(_dependencyMap[9]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[10]);

  var _handlers = _$$_REQUIRE(_dependencyMap[11]);

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      (0, _classCallCheck2.default)(this, UIComponent);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UIComponent).apply(this, arguments));
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return UIComponent;
  }(_react.Component);

  var _default = {
    UIComponent: UIComponent,
    name: 'InvisibleHandler',
    adapter: {
      handle: function handle(v) {
        var _this$item = this.item,
            _this$item$specs = _this$item.specs,
            specs = _this$item$specs === undefined ? [] : _this$item$specs,
            changeIndexs = _this$item.changeIndexs,
            validator = _this$item.validator,
            handler = _this$item.handler,
            values = this.values,
            i18n = this.i18n;
        var currentPropKey = (0, _instanceManager.getPropKey)(v);

        if (changeIndexs.length === 0) {
          changeIndexs = specs.map(function (spec, index) {
            return index;
          });
        }

        var currentChangeIndex = specs.findIndex(function (spec) {
          return (0, _instanceManager.getPropKey)(spec) === currentPropKey;
        });
        var needValidate = changeIndexs.indexOf(currentChangeIndex) !== -1 || changeIndexs.length === specs.length && (!v || !v.siid && !v.virtualProp);

        if (!needValidate) {
          return;
        }

        var handleFn = (0, _handlers.getHandler)(handler);

        if (!handleFn) {
          return;
        }

        var validatorFn = this.validatorFn || (this.validatorFn = validator ? (0, _fns.getStringGenerator)(validator) : null);

        if (!validatorFn) {
          validatorFn = function validatorFn() {
            return true;
          };
        }

        var validateResult = !!validatorFn.apply(undefined, (0, _toConsumableArray2.default)(values));

        if (!validateResult) {
          return;
        }

        handleFn(this.item, v, v.value, values, i18n);
      }
    }
  };
  exports.default = _default;
},10655,[14308,14305,14359,14320,14323,14371,14377,14386,10297,10779,10007,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _fns = _$$_REQUIRE(_dependencyMap[3]);

  var _SelectorWithButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _icons = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _SelectorWithButton.default,
    name: 'MultiSwitchers',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            specs = _this$item.specs,
            minSelected = _this$item.minSelected,
            maxSelected = _this$item.maxSelected,
            onValues = _this$item.onValues,
            offValues = _this$item.offValues,
            buttonIcons = _this$item.buttonIcons,
            selectedButtonIcons = _this$item.selectedButtonIcons,
            onChange = _this$item.onChange,
            hasShadow = _this$item.hasShadow,
            themeColor = _this$item.themeColor,
            offColor = _this$item.offColor;
        var i18n = this.i18n,
            values = this.values;
        var isSingleSpec = specs.length === 1;
        var isMultiSpec = specs.length > 1;
        var title = i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var subtitle = i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var subtitles = isMultiSpec ? specs.map(function (spec, index) {
          return i18n['subtitle' + index] ? i18n['subtitle' + index](values[index]) : '';
        }) : [];
        var buttonNames = this.buttonNames || (this.buttonNames = buttonIcons.map(function (icon, index) {
          return i18n.buttonNames ? i18n.buttonNames(index) : '';
        }));
        var items = this.items || (this.items = buttonIcons.map(function (icon, index) {
          return {
            icon: (0, _icons.getIcon)(icon),
            iconSelected: (0, _icons.getIcon)(selectedButtonIcons[index]) || (0, _icons.getIcon)(icon),
            title: buttonNames[index]
          };
        }));
        var initSelectedIndexs = [];

        if (isSingleSpec) {
          var selectedIndex = onValues.findIndex(function (v) {
            return v === values[0];
          });

          if (selectedIndex !== -1) {
            initSelectedIndexs = [selectedIndex];
          }
        } else {
          onValues.forEach(function (v, index) {
            if (v === values[index]) {
              initSelectedIndexs.push(index);
            }
          });
        }

        var handleChange = (0, _handlers.getHandler)(onChange);
        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var offColorFn = this.offColorFn || (this.offColorFn = offColor ? (0, _fns.getStringGenerator)(offColor) : null);
        var newState = {
          title: title,
          subtitle: subtitles.filter(function (s) {
            return !!s;
          }).join('|') || subtitle,
          items: items,
          initSelectedIndexs: initSelectedIndexs,
          multiple: true,
          minSelected: minSelected,
          maxSelected: maxSelected,
          hasShadow: hasShadow,
          onSelected: function onSelected(selectedIndexs) {
            if (!handleChange) {
              return;
            }

            var diffs = [];
            var diffOnIndex = -1,
                diffOffIndex = -1;
            buttonIcons.forEach(function (_, index) {
              var hasInit = initSelectedIndexs.indexOf(index) !== -1;
              var hasSelect = selectedIndexs.indexOf(index) !== -1;

              if (hasInit === hasSelect) {
                return;
              }

              diffs.push({
                index: index,
                type: hasSelect ? 'on' : 'off'
              });

              if (hasSelect) {
                diffOnIndex = index;
              } else {
                diffOffIndex = index;
              }
            });

            if (!diffs.length) {
              return;
            }

            if (isSingleSpec && diffOnIndex !== -1) {
              handleChange(_this.item, specs[0], onValues[diffOnIndex], values, i18n);
              return;
            }

            if (isSingleSpec && diffOffIndex !== -1) {
              handleChange(_this.item, specs[0], offValues[diffOffIndex], values, i18n);
              return;
            }

            if (isMultiSpec) {
              var diffSpecs = diffs.map(function (_ref) {
                var index = _ref.index;
                return specs[index];
              });
              var diffValues = diffs.map(function (_ref2) {
                var index = _ref2.index,
                    type = _ref2.type;
                return (type === 'on' ? onValues : offValues)[index];
              });
              handleChange((0, _objectSpread2.default)({}, _this.item, {
                specs: diffSpecs,
                values: diffValues
              }));
            }
          }
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (offColorFn) {
          newState.offColor = offColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      }
    }
  };
  exports.default = _default;
},10658,[14305,14314,14359,10779,10547,10013,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ImageHeader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _fns = _$$_REQUIRE(_dependencyMap[3]);

  var _icons = _$$_REQUIRE(_dependencyMap[4]);

  var _default = {
    UIComponent: _ImageHeader.default,
    name: 'ImageHeader',
    adapter: {
      handle: function handle() {
        var icon = this.item.icon,
            values = this.values;
        var iconFn = this.iconFn || (this.iconFn = icon ? (0, _fns.getStringGenerator)(icon) : null);
        var newState = {
          icon: (0, _icons.getIcon)(iconFn ? iconFn.apply(undefined, (0, _toConsumableArray2.default)(values)) : null)
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10661,[14305,14359,10992,10779,10013]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _sizes = _$$_REQUIRE(_dependencyMap[6]);

  var _fonts = _$$_REQUIRE(_dependencyMap[7]);

  function UIComponent(props) {
    var titles = props.titles,
        subtitle = props.subtitle;
    var filteredTitles = titles.filter(function (title) {
      return !!title;
    });
    var filteredTitlesCount = filteredTitles.length;
    var titleDoms = filteredTitles.map(function (title, index) {
      return _react.default.createElement(_react.Fragment, {
        key: index
      }, index > 0 ? _react.default.createElement(_reactNative.View, {
        style: [Styles.separator, {
          0: Styles.separator1,
          1: Styles.separator1,
          2: Styles.separator2,
          3: Styles.separator3,
          4: Styles.separator4
        }[filteredTitlesCount]]
      }) : null, _react.default.createElement(_reactNative.Text, {
        style: [Styles.title, {
          0: Styles.title1,
          1: Styles.title1,
          2: Styles.title2,
          3: Styles.title3,
          4: Styles.title4
        }[filteredTitlesCount]]
      }, title));
    });
    return _react.default.createElement(_reactNative.View, {
      style: Styles.container
    }, _react.default.createElement(_reactNative.Text, {
      style: Styles.subtitle
    }, subtitle || ' '), _react.default.createElement(_reactNative.View, {
      style: Styles.titles
    }, titleDoms));
  }

  UIComponent.propTypes = {
    titles: _propTypes.default.array,
    subtitle: _propTypes.default.string
  };
  UIComponent.defaultProps = {
    titles: [],
    subtitle: ''
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      paddingTop: (0, _sizes.adjustSize)(204),
      paddingBottom: (0, _sizes.adjustSize)(180)
    },
    subtitle: {
      fontSize: (0, _sizes.adjustSize)(60),
      fontFamily: _fonts.FontDefault,
      color: '#fff',
      textAlign: 'center',
      lineHeight: (0, _sizes.adjustSize)(81),
      marginBottom: (0, _sizes.adjustSize)(15)
    },
    separator: {
      width: (0, _sizes.adjustSize)(3),
      height: (0, _sizes.adjustSize)(85.5),
      marginHorizontal: (0, _sizes.adjustSize)(45),
      backgroundColor: 'rgba(255, 255, 255, 0.4)'
    },
    separator1: {
      height: 0
    },
    separator2: {
      height: (0, _sizes.adjustSize)(94.19999999999999)
    },
    separator3: {
      height: (0, _sizes.adjustSize)(85.5)
    },
    separator4: {
      height: (0, _sizes.adjustSize)(85.5)
    },
    titles: {
      minHeight: (0, _sizes.adjustSize)(192),
      textAlign: 'center',
      flexDirection: 'row',
      alignItems: 'center'
    },
    title: {
      fontSize: (0, _sizes.adjustSize)(90),
      fontFamily: _fonts.FontDefault,
      color: '#fff'
    },
    title1: {
      fontSize: (0, _sizes.adjustSize)(144)
    },
    title2: {
      fontSize: (0, _sizes.adjustSize)(120)
    },
    title3: {
      fontSize: (0, _sizes.adjustSize)(108)
    },
    title4: {
      fontSize: (0, _sizes.adjustSize)(90)
    }
  });

  var _default = {
    UIComponent: UIComponent,
    name: 'BathHeader',
    adapter: {
      handle: function handle() {
        var specs = this.item.specs,
            values = this.values,
            i18n = this.i18n;
        var titles = specs.map(function (spec, index) {
          return i18n['title' + index] ? i18n['title' + index](values[index]) : '';
        }).filter(function (title) {
          return !!title;
        });
        var newState = {
          subtitle: titles.length ? i18n.subtitle ? i18n.subtitle.apply(i18n, (0, _toConsumableArray2.default)(values)) : '' : i18n.subtitleEmpty ? i18n.subtitleEmpty.apply(i18n, (0, _toConsumableArray2.default)(values)) : '',
          titles: titles.length ? titles : [i18n.titleEmpty ? i18n.titleEmpty.apply(i18n, (0, _toConsumableArray2.default)(values)) : '']
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10664,[14308,14305,14359,10297,10033,10318,10776,10782]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _sizes = _$$_REQUIRE(_dependencyMap[11]);

  var _fns = _$$_REQUIRE(_dependencyMap[12]);

  var _fonts = _$$_REQUIRE(_dependencyMap[13]);

  var _icons = _$$_REQUIRE(_dependencyMap[14]);

  var _handlers = _$$_REQUIRE(_dependencyMap[15]);

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, UIComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(UIComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.onPress = function (index) {
        var _this$props = _this.props,
            disabled = _this$props.disabled,
            onSelect = _this$props.onSelect;

        if (disabled) {
          return;
        }

        onSelect(index);
      };

      return _this;
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "getItems",
      value: function getItems() {
        var _this2 = this;

        var _this$props2 = this.props,
            items = _this$props2.items,
            selectedIndex = _this$props2.selectedIndex,
            disabled = _this$props2.disabled,
            title = _this$props2.title;
        return items.map(function (item, index) {
          return _react.default.createElement(_react.Fragment, {
            key: index
          }, _react.default.createElement(_reactNative.View, {
            style: Styles.itemContainer
          }, _react.default.createElement(_reactNative.TouchableOpacity, {
            disabled: disabled,
            key: index,
            style: [Styles.btnWrap, index === 0 ? Styles.btnWrapFirst : null, index === selectedIndex && !disabled ? Styles.btnWrapSelected : null],
            onPress: function onPress() {
              _this2.onPress(index);
            }
          }, _react.default.createElement(_reactNative.Image, {
            style: Styles.btn,
            source: item
          })), _react.default.createElement(_reactNative.Text, {
            style: [Styles.iconText, index === selectedIndex ? Styles.iconTextSelected : null],
            numberOfLines: 2
          }, title[index])), index === 0 ? _react.default.createElement(_reactNative.View, {
            style: Styles.separator
          }) : null);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var invisible = this.props.invisible;
        var items = this.getItems();
        return _react.default.createElement(_reactNative.View, {
          style: [Styles.container, {
            opacity: invisible ? 0 : 1
          }]
        }, items);
      }
    }]);
    return UIComponent;
  }(_react.Component);

  UIComponent.propTypes = {
    disabled: _propTypes.default.bool,
    items: _propTypes.default.array,
    selectedIndex: _propTypes.default.number,
    invisible: _propTypes.default.bool,
    onSelect: _propTypes.default.func
  };
  UIComponent.defaultProps = {
    disabled: false,
    items: [],
    selectedIndex: 0,
    invisible: false,
    onSelect: _fns.NOOP
  };

  var Styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'space-between',
      backgroundColor: '#fff',
      paddingHorizontal: (0, _sizes.adjustSize)(45),
      paddingVertical: (0, _sizes.adjustSize)(60),
      borderRadius: (0, _sizes.adjustSize)(30),
      marginBottom: (0, _sizes.adjustSize)(10)
    },
    itemContainer: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      width: 'auto',
      flex: 1
    },
    btnWrap: {
      flexDirection: 'row',
      width: (0, _sizes.adjustSize)(120),
      height: (0, _sizes.adjustSize)(120),
      justifyContent: 'center',
      alignItems: 'center',
      overflow: 'hidden'
    },
    btnWrapFirst: {
      marginLeft: (0, _sizes.adjustSize)(12)
    },
    btnWrapSelected: {
      borderWidth: (0, _sizes.adjustSize)(3),
      borderColor: '#FFBC39',
      borderRadius: (0, _sizes.adjustSize)(60)
    },
    btn: {
      width: (0, _sizes.adjustSize)(96),
      height: (0, _sizes.adjustSize)(96),
      resizeMode: 'contain'
    },
    separator: {
      width: 1,
      height: (0, _sizes.adjustSize)(120),
      backgroundColor: 'rgba(0, 0, 0, 0.15)',
      marginHorizontal: (0, _sizes.adjustSize)(60)
    },
    iconText: {
      flex: 1,
      fontFamily: _fonts.FontDefault,
      fontSize: (0, _sizes.adjustSize)(42),
      marginLeft: (0, _sizes.adjustSize)(39),
      color: '#7F7F7F'
    },
    iconTextSelected: {
      color: '#FDB72E'
    }
  });

  var _default = {
    UIComponent: UIComponent,
    name: 'TypeSelector',
    adapter: {
      handle: function handle(v) {
        var _this3 = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 2),
            specChangeType = _this$item$specs[0],
            specMode = _this$item$specs[1],
            icons = _this$item.icons,
            ids = _this$item.ids,
            onSelect = _this$item.onSelect,
            modeValueList = _this$item.modeValueList,
            _this$values = (0, _slicedToArray2.default)(this.values, 2),
            idSlected = _this$values[0],
            mode = _this$values[1],
            i18n = this.i18n;

        var items = this.items || (this.items = (icons || []).map(function (icon) {
          return (0, _icons.getIcon)(icon);
        }));
        var selectedIndex = ids.findIndex(function (id) {
          return id === idSlected;
        });

        if (specMode && modeValueList && v.siid === specMode.siid && v.piid === specMode.piid) {
          var modifySelectedIndex = -1;
          var modifyValue = '';
          var DayMode = modeValueList.find(function (item) {
            return item.description === 'Day';
          });
          var ColorMode = modeValueList.find(function (item) {
            return item.description === 'Color';
          });

          if (DayMode && mode === DayMode.value) {
            modifyValue = 'colorTemperature';
            modifySelectedIndex = ids.findIndex(function (id) {
              return id === 'colorTemperature';
            });
          } else if (ColorMode && mode === ColorMode.value) {
            modifyValue = 'color';
            modifySelectedIndex = ids.findIndex(function (id) {
              return id === 'color';
            });
          }

          if (modifySelectedIndex !== -1 && modifySelectedIndex !== selectedIndex) {
            var handleFun = (0, _handlers.getHandler)('setVirtualProp');
            handleFun(this.item, specChangeType, modifyValue, null, null);
          }
        }

        var handleSelect = (0, _handlers.getHandler)(onSelect);
        var newState = {
          items: items,
          title: [i18n.colorTemperature && i18n.colorTemperature(), i18n.color && i18n.color()],
          selectedIndex: selectedIndex,
          onSelect: handleSelect ? function (index) {
            handleSelect(_this3.item, specChangeType, ids[index], _this3.values, i18n, {
              onSuccess: function onSuccess() {
                if (specMode && modeValueList) {
                  var handleAfter = (0, _handlers.getHandler)('setTargetProperty');
                  var modeValue = index === 0 ? modeValueList.find(function (item) {
                    return item.description === 'Day';
                  }).value : modeValueList.find(function (item) {
                    return item.description === 'Color';
                  }).value;
                  handleAfter(_this3.item, specMode, modeValue, _this3.values, i18n);
                }
              }
            });
          } : _fns.NOOP
        };
        this.setState(newState);
      }
    }
  };
  exports.default = _default;
},10667,[14308,14305,14347,14320,14323,14371,14377,14386,10297,10033,10318,10776,10779,10782,10013,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _CircleButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var _icons = _$$_REQUIRE(_dependencyMap[5]);

  var _handlers = _$$_REQUIRE(_dependencyMap[6]);

  var _default = {
    UIComponent: _CircleButton.default,
    name: 'CircleButton',
    adapter: {
      handle: function handle() {
        var _this = this;

        var _this$item = this.item,
            _this$item$specs = (0, _slicedToArray2.default)(_this$item.specs, 1),
            spec = _this$item$specs[0],
            sizeLevel = _this$item.sizeLevel,
            themeColor = _this$item.themeColor,
            offColor = _this$item.offColor,
            themeTextColor = _this$item.themeTextColor,
            offTextColor = _this$item.offTextColor,
            showHighlight = _this$item.showHighlight,
            icon = _this$item.icon,
            iconSelected = _this$item.iconSelected,
            onClick = _this$item.onClick,
            _this$props = this.props,
            propSizeLevel = _this$props.sizeLevel,
            horizontal = _this$props.horizontal,
            values = this.values,
            i18n = this.i18n;

        var themeColorFn = this.themeColorFn || (this.themeColorFn = themeColor ? (0, _fns.getStringGenerator)(themeColor) : null);
        var offColorFn = this.offColorFn || (this.offColorFn = offColor ? (0, _fns.getStringGenerator)(offColor) : null);
        var themeTextColorFn = this.themeTextColorFn || (this.themeTextColorFn = themeTextColor ? (0, _fns.getStringGenerator)(themeTextColor) : null);
        var offTextColorFn = this.offTextColorFn || (this.offTextColorFn = offTextColor ? (0, _fns.getStringGenerator)(offTextColor) : null);
        var title = i18n.title ? i18n.title.apply(i18n, (0, _toConsumableArray2.default)(values)) : '';
        var handleClick = (0, _handlers.getHandler)(onClick);
        var newState = {
          sizeLevel: typeof sizeLevel === 'number' ? sizeLevel : typeof propSizeLevel === 'number' ? propSizeLevel : 3,
          showHighlight: showHighlight,
          selected: !!values[0],
          horizontal: horizontal,
          onPress: _fns.NOOP,
          title: title,
          icon: (0, _icons.getIcon)(icon),
          iconSelected: (0, _icons.getIcon)(iconSelected) || (0, _icons.getIcon)(icon),
          iconText: title,
          onPress: handleClick ? function () {
            handleClick(_this.item, spec, values[0], values, i18n);
          } : _fns.NOOP
        };

        if (themeColorFn) {
          newState.themeColor = themeColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (offColorFn) {
          newState.offColor = offColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (themeTextColorFn) {
          newState.themeTextColor = themeTextColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        if (offTextColorFn) {
          newState.offTextColor = offTextColorFn.apply(undefined, (0, _toConsumableArray2.default)(values));
        }

        this.setState(newState);
      },
      handleGlobalTheme: function handleGlobalTheme(themeColor) {
        this.setState({
          themeColor: themeColor
        });
      },
      handleGlobalOn: function handleGlobalOn(on) {
        this.setState({
          disabled: !on
        });
      }
    }
  };
  exports.default = _default;
},10670,[14305,14359,14347,10550,10779,10013,10520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ContainerWithChildren = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = {
    UIComponent: _ContainerWithChildren.default,
    name: 'ContainerWithChildren',
    adapter: {}
  };
  exports.default = _default;
},10673,[14305,10676]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _ContainerWithShadowAndSeparator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _sizes = _$$_REQUIRE(_dependencyMap[11]);

  var ContainerWithChildren = function (_Component) {
    (0, _inherits2.default)(ContainerWithChildren, _Component);

    function ContainerWithChildren() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ContainerWithChildren);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ContainerWithChildren)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.getSelectors = function () {
        var children = _this.props.children;
        var itemCount = children.length;

        var sizeLevel = _this.getSizeLevel(itemCount);

        var isHorizontal = itemCount <= 2;
        var hasSeparator = isHorizontal;
        return children.map(function (child, index) {
          return _react.default.createElement(_react.Fragment, {
            key: index
          }, hasSeparator && index > 0 ? _react.default.createElement(_reactNative.View, {
            style: Styles.separator
          }) : null, _react.default.cloneElement(child, {
            sizeLevel: sizeLevel,
            horizontal: isHorizontal
          }));
        });
      };

      return _this;
    }

    (0, _createClass2.default)(ContainerWithChildren, [{
      key: "getSizeLevel",
      value: function getSizeLevel(itemCount) {
        return itemCount <= 2 ? 0 : itemCount === 3 ? 1 : itemCount === 4 ? 2 : 3;
      }
    }, {
      key: "render",
      value: function render() {
        var hasShadow = this.props.hasShadow;
        var itemCount = this.props.children.length;

        if (!itemCount) {
          return null;
        }

        var sizeLevel = this.getSizeLevel(itemCount);
        var Wrap = hasShadow ? _ContainerWithShadowAndSeparator.default : _react.Fragment;
        return _react.default.createElement(Wrap, null, _react.default.createElement(_reactNative.View, {
          style: Styles.container
        }, _react.default.createElement(_reactNative.View, {
          style: [Styles.selectors, itemCount >= 4 ? null : [Styles.selectorsPadding0, Styles.selectorsPadding1, Styles.selectorsPadding2, Styles.selectorsPadding3][sizeLevel]]
        }, this.getSelectors())));
      }
    }]);
    return ContainerWithChildren;
  }(_react.Component);

  exports.default = ContainerWithChildren;
  ContainerWithChildren.propTypes = {
    hasShadow: _propTypes.default.bool
  };
  ContainerWithChildren.defaultProps = {
    hasShadow: true
  };
  ;

  var Styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: '#fff',
      paddingHorizontal: (0, _sizes.adjustSize)(60)
    },
    selectors: {
      paddingVertical: (0, _sizes.adjustSize)(60),
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    selectorsPadding0: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorsPadding1: {
      paddingHorizontal: (0, _sizes.adjustSize)(78)
    },
    selectorsPadding2: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    selectorsPadding3: {
      paddingHorizontal: (0, _sizes.adjustSize)(0)
    },
    separator: {
      width: 1,
      height: (0, _sizes.adjustSize)(120),
      backgroundColor: 'rgba(0, 0, 0, 0.15)',
      marginHorizontal: (0, _sizes.adjustSize)(60)
    }
  });
},10676,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10318,10791,10776]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      height = _Dimensions$get.height;

  var UIComponent = function (_Component) {
    (0, _inherits2.default)(UIComponent, _Component);

    function UIComponent() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, UIComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(UIComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        height: 0
      };

      _this.measure = function () {
        if (!_this.refContainer) return;
        setTimeout(function () {
          _this.refContainer.measure(function (x, y, w, h, pageX, pageY) {
            _this.setState({
              height: height - pageY
            });
          });
        }, 500);
      };

      return _this;
    }

    (0, _createClass2.default)(UIComponent, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var children = this.props.children;

        if (!children) {
          return null;
        }

        var height = this.state.height;
        return _react.default.createElement(_reactNative.View, {
          ref: function ref(r) {
            _this2.refContainer = r;
          },
          onLayout: this.measure
        }, _react.default.createElement(_reactNative.ScrollView, {
          style: {
            height: height
          },
          contentContainerStyle: {
            minHeight: height
          }
        }, children));
      }
    }]);
    return UIComponent;
  }(_react.Component);

  var _default = {
    UIComponent: UIComponent,
    name: 'ContainerScrollView'
  };
  exports.default = _default;
},10679,[14308,14305,14320,14323,14371,14377,14386,10297,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _miot = _$$_REQUIRE(_dependencyMap[11]);

  var _resources = _$$_REQUIRE(_dependencyMap[12]);

  var _fns = _$$_REQUIRE(_dependencyMap[13]);

  var _PageWithNormalNavigator = _$$_REQUIRE(_dependencyMap[14]);

  var _instanceManager = _$$_REQUIRE(_dependencyMap[15]);

  var _consts = _$$_REQUIRE(_dependencyMap[16]);

  var isUIComponentAnimating = false;

  function _default(_ref, item) {
    var UIComponent = _ref.UIComponent,
        adapter = _ref.adapter;

    if (!item || !UIComponent || !adapter) {
      return UIComponent;
    }

    if (item.i18n && JSON.stringify(item.i18n) === '{}') {
      item.i18n = null;
    }

    var i18n = _miot.Resources.createI18n(item.i18n || {
      zh: {}
    }, item.i18n && item.i18n[_miot.Host.locale.language] ? _miot.Host.locale.language : 'en');

    var WrapedUIComponent = function (_PureComponent) {
      (0, _inherits2.default)(WrapedUIComponent, _PureComponent);

      function WrapedUIComponent() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, WrapedUIComponent);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(WrapedUIComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.item = item;
        _this.listeners = [];
        _this.i18n = i18n.strings;
        _this.valueKeys = [];
        _this.values = item.specs.map(function (spec) {
          return undefined;
        });
        _this.functionalKeys = [];
        _this.functionalValues = item.functionalSpecs ? item.functionalSpecs.map(function (spec) {
          return undefined;
        }) : [];
        _this.state = {};

        _this.hide = function (fn) {
          _this.prepareAnimation();

          _this.setState({
            hidden: true
          }, fn);
        };

        _this.show = function (fn) {
          _this.prepareAnimation();

          _this.setState({
            hidden: false
          }, typeof fn === 'function' ? fn : null);
        };

        return _this;
      }

      (0, _createClass2.default)(WrapedUIComponent, [{
        key: "prepareAnimation",
        value: function prepareAnimation() {
          if (!this.item.disableAnimation && !isUIComponentAnimating) {
            isUIComponentAnimating = true;

            _reactNative.LayoutAnimation.easeInEaseOut(function () {
              isUIComponentAnimating = false;
            });
          }
        }
      }, {
        key: "watch",
        value: function watch() {
          var _this2 = this;

          this.unwatch();
          var _this$item = this.item,
              _this$item$specs = _this$item.specs,
              specs = _this$item$specs === undefined ? [] : _this$item$specs,
              _this$item$functional = _this$item.functionalSpecs,
              functionalSpecs = _this$item$functional === undefined ? [] : _this$item$functional,
              useGlobalOn = _this$item.useGlobalOn,
              useGlobalTheme = _this$item.useGlobalTheme,
              useGlobalShowHide = _this$item.useGlobalShowHide;
          this.item.backgroundEventKey = (0, _PageWithNormalNavigator.getBackgroundEventKey)();

          if (typeof this.onMounted === 'function') {
            this.onMounted();
          }

          this.handle && this.handle({});
          this.handleDisable();
          specs.forEach(function (spec) {
            if (!spec) {
              _this2.valueKeys.push('');

              return;
            }

            _this2.valueKeys.push((0, _instanceManager.getPropKey)(spec));

            _this2.listeners.push((0, _instanceManager.listen)(spec, function (v) {
              var pk = (0, _instanceManager.getPropKey)(v);

              var index = _this2.valueKeys.findIndex(function (vk) {
                return vk === pk;
              });

              if (index !== -1) {
                _this2.values[index] = v.value;
              }

              _this2.handle && _this2.handle(v);
            }));
          });
          functionalSpecs.forEach(function (spec) {
            if (!spec) {
              _this2.functionalKeys.push('');

              return;
            }

            _this2.functionalKeys.push((0, _instanceManager.getPropKey)(spec));

            _this2.listeners.push((0, _instanceManager.listen)(spec, function (v) {
              var pk = (0, _instanceManager.getPropKey)(v);

              var index = _this2.functionalKeys.findIndex(function (vk) {
                return vk === pk;
              });

              if (index !== -1) {
                _this2.functionalValues[index] = v.value;
              }

              _this2.handleDisable(v);
            }));
          });

          if (useGlobalTheme && typeof this.handleGlobalTheme === 'function') {
            this.listeners.push((0, _instanceManager.listenGlobalTheme)(this.handleGlobalTheme.bind(this)));
          }

          if (useGlobalOn && typeof this.handleGlobalOn === 'function') {
            this.listeners.push((0, _instanceManager.listenGlobalOn)(this.handleGlobalOn.bind(this)));
          }

          if (useGlobalShowHide) {
            this.listeners.push(_reactNative.DeviceEventEmitter.addListener(_consts.CONSTREQUESTHIDE, this.hide));
            this.listeners.push(_reactNative.DeviceEventEmitter.addListener(_consts.CONSTREQUESTSHOW, this.show));
          }
        }
      }, {
        key: "handleDisable",
        value: function handleDisable() {
          var _this$item2 = this.item,
              _this$item2$disableTy = _this$item2.disableType,
              disableType = _this$item2$disableTy === undefined ? 'disable' : _this$item2$disableTy,
              _this$item2$disableVa = _this$item2.disableValidator,
              disableValidator = _this$item2$disableVa === undefined ? false : _this$item2$disableVa;
          var functionalValues = this.functionalValues;
          var disableFn = this.disableFn || (this.disableFn = disableValidator ? (0, _fns.getStringGenerator)(disableValidator) : null);
          var disabled = disableFn ? !!disableFn.apply(undefined, (0, _toConsumableArray2.default)(functionalValues)) : false;

          switch (true) {
            case disableType === 'hide' && disabled:
              this.hide();
              break;

            case disableType === 'hide' && !disabled:
              this.show();
              break;

            case disableType === 'invisible':
              this.setState({
                invisible: disabled
              });
              break;

            default:
              this.setState({
                disabled: disabled
              });
          }
        }
      }, {
        key: "unwatch",
        value: function unwatch() {
          while (this.listeners.length) {
            var listener = this.listeners.pop();
            listener && listener.remove();
          }

          this.timerMount && clearTimeout(this.timerMount);
          this.timerMount = null;
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.watch();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.unwatch();
        }
      }, {
        key: "render",
        value: function render() {
          var _this$state = this.state,
              hidden = _this$state.hidden,
              rest = (0, _objectWithoutProperties2.default)(_this$state, ["hidden"]);

          if (hidden) {
            return null;
          }

          return _react.default.createElement(UIComponent, rest, this.props.children);
        }
      }]);
      return WrapedUIComponent;
    }(_react.PureComponent);

    for (var k in adapter) {
      if (adapter.hasOwnProperty(k)) {
        WrapedUIComponent.prototype[k] = adapter[k];
      }
    }

    return WrapedUIComponent;
  }
},10682,[14308,14305,14407,14359,14320,14323,14371,14377,14386,10297,10033,10074,10077,10779,10821,10007,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getProtocol = getProtocol;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _miot = _$$_REQUIRE(_dependencyMap[3]);

  var _fns = _$$_REQUIRE(_dependencyMap[4]);

  var cachedPrivacyURL = null;
  var cachedAgreementURL = null;
  var cachedExperiencePlanURL = null;
  var inited = false;
  var UniUrl = 'https://home.mi.com/miot/activity/privacy/index.html';

  function resolveCache(resolve) {
    resolve({
      privacyURL: cachedPrivacyURL,
      agreementURL: cachedAgreementURL,
      hideAgreement: !cachedAgreementURL,
      experiencePlanURL: cachedExperiencePlanURL,
      hideUserExperiencePlan: !cachedExperiencePlanURL
    });
  }

  function resolveParams(params) {
    var ret = [];

    for (var k in params) {
      if (params.hasOwnProperty(k)) {
        ret.push(k + "=" + params[k]);
      }
    }

    return ret.join('&');
  }

  function resolveUrl(url, params) {
    if (!url) {
      return '';
    }

    return url + (url.indexOf('?') > -1 ? '&' : '?') + resolveParams(params);
  }

  function getProtocol() {
    return new Promise(function (resolve, reject) {
      if (inited) {
        resolveCache(resolve);
        return;
      }

      var model = _miot.Device.model;
      var plugin_id = _miot.Package.pluginID,
          plugin_version = _miot.Package.version;
      var language = _miot.Host.locale.language;

      _miot.Service.getServerName().then(function (_ref) {
        var country = _ref.countryCode;
        var baseParams = {
          model: model,
          plugin_id: plugin_id,
          plugin_version: plugin_version,
          country: country,
          language: language
        };
        var params = [1, 2, 3].map(function (type_int) {
          return (0, _objectSpread2.default)({}, baseParams, {
            type_int: type_int
          });
        });
        Promise.all(params.map(function (p) {
          return _miot.Service.smarthome.getProtocolUrls(p);
        })).then(function (_ref2) {
          var _ref3 = (0, _slicedToArray2.default)(_ref2, 3),
              privacy = _ref3[0],
              agreement = _ref3[1],
              experiencePlan = _ref3[2];

          cachedPrivacyURL = privacy.html_url ? resolveUrl(UniUrl, params[0]) : '';
          cachedAgreementURL = agreement.html_url ? resolveUrl(UniUrl, params[1]) : '';
          cachedExperiencePlanURL = experiencePlan.html_url ? resolveUrl(UniUrl, params[2]) : '';
          inited = true;
          resolveCache(resolve);
        }).catch(reject);
      }).catch(reject);
    });
  }
},10685,[14305,14347,14314,10074,10779]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _miot = _$$_REQUIRE(_dependencyMap[9]);

  var _CommonSetting = _$$_REQUIRE(_dependencyMap[10]);

  var _resources = _$$_REQUIRE(_dependencyMap[11]);

  var _PageWithNormalNavigator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _NavigationBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _crossViewData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _fns = _$$_REQUIRE(_dependencyMap[16]);

  var _renderFromConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _instanceManager = _$$_REQUIRE(_dependencyMap[18]);

  var _protocolManager = _$$_REQUIRE(_dependencyMap[19]);

  var _consts = _$$_REQUIRE(_dependencyMap[20]);

  var Setting = function (_PureComponent) {
    (0, _inherits2.default)(Setting, _PureComponent);

    function Setting(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Setting);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Setting).call(this, props));
      _this.state = {
        protocol: null
      };

      _this.initProtocol = function () {
        (0, _protocolManager.getProtocol)().then(function (protocol) {
          _this.setState({
            protocol: protocol
          });
        }).catch(function () {
          _this.setState({
            protocol: {}
          });
        });
      };

      _this.onPressLeft = function () {
        _this.props.navigation.goBack();
      };

      var configData = _crossViewData.default.get(_consts.CONSTPAGECONFIG)['Setting'];

      (0, _instanceManager.readAndWatchProps)(configData);
      _this.featureSettings = (0, _renderFromConfig.default)(configData);
      return _this;
    }

    (0, _createClass2.default)(Setting, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.initProtocol();
        this.CONSTSETTINGSHOWFROMRN && this.CONSTSETTINGSHOWFROMRN.remove();
        this.CONSTSETTINGSHOWFROMRN = this.props.navigation.addListener('didFocus', function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGSHOWFROMRN);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGSHOW);
        });
        this.CONSTSETTINGHIDEFROMRN && this.CONSTSETTINGHIDEFROMRN.remove();
        this.CONSTSETTINGHIDEFROMRN = this.props.navigation.addListener('willBlur', function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGHIDEFROMRN);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGHIDE);
        });
        this.CONSTSETTINGSHOWFROMNATIVE && this.CONSTSETTINGSHOWFROMNATIVE.remove();
        this.CONSTSETTINGSHOWFROMNATIVE = _miot.PackageEvent.packageViewWillAppear.addListener(function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGSHOWFROMNATIVE);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGSHOW);
        });
        this.CONSTSETTINGHIDEFROMNATIVE && this.CONSTSETTINGHIDEFROMNATIVE.remove();
        this.CONSTSETTINGHIDEFROMNATIVE = _miot.PackageEvent.packageWillPause.addListener(function (_) {
          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGHIDEFROMNATIVE);

          _reactNative.DeviceEventEmitter.emit(_consts.CONSTSETTINGHIDE);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.CONSTSETTINGSHOWFROMRN && this.CONSTSETTINGSHOWFROMRN.remove();
        this.CONSTSETTINGHIDEFROMRN && this.CONSTSETTINGHIDEFROMRN.remove();
        this.CONSTSETTINGSHOWFROMNATIVE && this.CONSTSETTINGSHOWFROMNATIVE.remove();
        this.CONSTSETTINGHIDEFROMNATIVE && this.CONSTSETTINGHIDEFROMNATIVE.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var protocol = this.state.protocol;

        if (!protocol) {
          return null;
        }

        var navigatorParams = {
          title: _resources.strings.setting,
          left: [{
            key: _NavigationBar.default.ICON.BACK,
            onPress: this.onPressLeft
          }],
          withSeperator: true,
          backgroundColor: '#fff'
        };
        var featureSettings = this.featureSettings;
        var first_options = _CommonSetting.SETTING_KEYS.first_options,
            second_options = _CommonSetting.SETTING_KEYS.second_options;
        var firstOptions = [first_options.SHARE, first_options.IFTTT, first_options.FIRMWARE_UPGRADE];
        var deviceModel = _miot.Device.model;

        if (deviceModel === 'aok98.curtain.aok100') {
          firstOptions = [first_options.SHARE, first_options.IFTTT];
        }

        var secondOptions = [second_options.TIMEZONE];
        var extraOptions = {
          showUpgrade: true,
          option: protocol
        };
        return _react.default.createElement(_PageWithNormalNavigator.default, {
          navigatorParams: navigatorParams,
          contentStyle: Styles.container
        }, featureSettings && featureSettings.length ? _react.default.createElement(_reactNative.View, {
          style: Styles.section
        }, _react.default.createElement(_reactNative.View, {
          style: Styles.sectionTitle
        }, _react.default.createElement(_reactNative.Text, {
          style: Styles.sectionTitleText
        }, _resources.strings.featureSetting)), _react.default.createElement(_Separator.default, {
          style: {
            marginLeft: _resources.Styles.common.padding
          }
        }), featureSettings, _react.default.createElement(_reactNative.View, {
          style: [Styles.blank, {
            marginTop: -1
          }]
        })) : null, _react.default.createElement(_CommonSetting.CommonSetting, {
          navigation: this.props.navigation,
          firstOptions: firstOptions,
          secondOptions: secondOptions,
          extraOptions: extraOptions
        }));
      }
    }]);
    return Setting;
  }(_react.PureComponent);

  exports.default = Setting;

  var Styles = _reactNative.StyleSheet.create({
    container: {
      backgroundColor: _resources.Styles.common.backgroundColor
    },
    blank: {
      height: 8,
      backgroundColor: _resources.Styles.common.backgroundColor,
      borderTopColor: _resources.Styles.common.hairlineColor,
      borderTopWidth: _resources.Styles.common.separator.height,
      borderBottomColor: _resources.Styles.common.hairlineColor,
      borderBottomWidth: _resources.Styles.common.separator.height
    },
    section: {
      backgroundColor: '#fff',
      borderTopColor: _resources.Styles.common.hairlineColor,
      borderTopWidth: _resources.Styles.common.separator.height,
      marginTop: 8
    },
    sectionTitle: {
      height: 32,
      backgroundColor: '#fff',
      justifyContent: 'center',
      paddingLeft: _resources.Styles.common.padding
    },
    sectionTitleText: {
      fontSize: 11,
      color: 'rgba(0,0,0,0.5)',
      lineHeight: 14
    }
  });
},10688,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10074,10353,10077,10821,10719,10332,10842,10779,10508,10007,10685,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _resources = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _PageWithNormalNavigator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _NavigationBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Separator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _renderFromConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _instanceManager = _$$_REQUIRE(_dependencyMap[15]);

  var List = function (_Component) {
    (0, _inherits2.default)(List, _Component);

    function List(props) {
      var _this;

      (0, _classCallCheck2.default)(this, List);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(List).call(this, props));

      _this.onPressLeft = function () {
        _this.props.navigation.goBack();
      };

      var navigation = _this.props.navigation;
      var configData = navigation.getParam('items', []);
      (0, _instanceManager.readAndWatchProps)(configData);
      _this.content = (0, _renderFromConfig.default)(configData);
      return _this;
    }

    (0, _createClass2.default)(List, [{
      key: "render",
      value: function render() {
        var navigation = this.props.navigation;
        var title = navigation.getParam('title', _miot.Device.name);
        var navigatorParams = {
          type: _NavigationBar.default.TYPE.LIGHT,
          title: title,
          left: [{
            key: _NavigationBar.default.ICON.BACK,
            onPress: this.onPressLeft
          }],
          withSeperator: true
        };
        var content = this.content;
        return _react.default.createElement(_PageWithNormalNavigator.default, {
          navigatorParams: navigatorParams,
          contentStyle: Styles.container
        }, _react.default.createElement(_reactNative.View, {
          style: [Styles.blank]
        }), _react.default.createElement(_reactNative.View, null, content));
      }
    }]);
    return List;
  }(_react.Component);

  exports.default = List;

  var Styles = _reactNative.StyleSheet.create({});
},10691,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10077,10074,10821,10719,10332,10508,10007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _resources = _$$_REQUIRE(_dependencyMap[9]);

  var _miot = _$$_REQUIRE(_dependencyMap[10]);

  var _crossViewData = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _renderFromConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _instanceManager = _$$_REQUIRE(_dependencyMap[13]);

  var _consts = _$$_REQUIRE(_dependencyMap[14]);

  var List = function (_Component) {
    (0, _inherits2.default)(List, _Component);

    function List(props) {
      var _this;

      (0, _classCallCheck2.default)(this, List);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(List).call(this, props));
      var navigation = _this.props.navigation;
      var virtualPage = navigation.getParam('virtualPage', null);

      var pageConfig = _crossViewData.default.get(_consts.CONSTPAGECONFIG);

      if (!virtualPage || !pageConfig[virtualPage]) {
        _this.content = null;
      }

      var configData = pageConfig[virtualPage];
      (0, _instanceManager.readAndWatchProps)(configData);
      _this.content = (0, _renderFromConfig.default)(configData);
      return _this;
    }

    (0, _createClass2.default)(List, [{
      key: "render",
      value: function render() {
        var content = this.content;
        return _react.default.createElement(_react.Fragment, null, content);
      }
    }]);
    return List;
  }(_react.Component);

  exports.default = List;

  var Styles = _reactNative.StyleSheet.create({});
},10694,[14308,14305,14320,14323,14371,14377,14386,10297,10033,10077,10074,10842,10508,10007,10010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    "instance": {
      "type": "urn:miot-spec-v2:device:curtain:0000A00C:dooya-d1xc:1",
      "description": "Curtain",
      "services": [{
        "iid": 1,
        "type": "urn:miot-spec-v2:service:device-information:00007801:dooya-d1xc:1",
        "description": "Device Information",
        "properties": [{
          "iid": 1,
          "type": "urn:miot-spec-v2:property:manufacturer:00000001:dooya-d1xc:1",
          "description": "Device Manufacturer",
          "format": "string",
          "access": ["read"]
        }, {
          "iid": 2,
          "type": "urn:miot-spec-v2:property:model:00000002:dooya-d1xc:1",
          "description": "Device Model",
          "format": "string",
          "access": ["read"]
        }, {
          "iid": 3,
          "type": "urn:miot-spec-v2:property:serial-number:00000003:dooya-d1xc:1",
          "description": "Device ID",
          "format": "string",
          "access": ["read"]
        }, {
          "iid": 4,
          "type": "urn:miot-spec-v2:property:firmware-revision:00000005:dooya-d1xc:1",
          "description": "Current Firmware Version",
          "format": "string",
          "access": ["read"]
        }, {
          "iid": 5,
          "type": "urn:miot-spec-v2:property:serial-no:000000FF:dooya-d1xc:1",
          "description": "Serial Number",
          "format": "string",
          "access": ["read", "notify"]
        }]
      }, {
        "iid": 2,
        "type": "urn:miot-spec-v2:service:curtain:00007816:dooya-d1xc:1",
        "description": "Curtain",
        "properties": [{
          "iid": 1,
          "type": "urn:miot-spec-v2:property:fault:00000009:dooya-d1xc:1",
          "description": "Device Fault",
          "format": "uint8",
          "access": ["read", "notify"],
          "value-list": [{
            "value": 0,
            "description": "No Faults"
          }]
        }, {
          "iid": 2,
          "type": "urn:miot-spec-v2:property:motor-control:00000038:dooya-d1xc:1",
          "description": "Motor Control",
          "format": "uint8",
          "access": ["write"],
          "value-list": [{
            "value": 0,
            "description": "Close"
          }, {
            "value": 1,
            "description": "Pause"
          }, {
            "value": 2,
            "description": "Open"
          }],
          "unit": "none"
        }, {
          "iid": 4,
          "type": "urn:miot-spec-v2:property:status:00000007:dooya-d1xc:1",
          "description": "Status",
          "format": "uint8",
          "access": ["read", "notify"],
          "value-list": [{
            "value": 0,
            "description": "Closing"
          }, {
            "value": 1,
            "description": "Stop"
          }, {
            "value": 2,
            "description": "Opening"
          }]
        }, {
          "iid": 6,
          "type": "urn:miot-spec-v2:property:current-position:00000039:dooya-d1xc:1",
          "description": "Current Position",
          "format": "uint8",
          "access": ["read", "notify"],
          "value-range": [0, 100, 1],
          "unit": "percentage"
        }, {
          "iid": 7,
          "type": "urn:miot-spec-v2:property:target-position:0000003A:dooya-d1xc:1",
          "description": "Target Position",
          "format": "uint8",
          "access": ["read", "write", "notify"],
          "value-range": [0, 100, 1],
          "unit": "percentage"
        }, {
          "iid": 8,
          "type": "urn:miot-spec-v2:property:motor-reverse:00000072:dooya-d1xc:1",
          "description": "Motor Reverse",
          "format": "bool",
          "access": ["read", "write", "notify"]
        }],
        "actions": [{
          "iid": 1,
          "type": "urn:miot-spec-v2:action:motor-calibrate:00002836:dooya-d1xc:1",
          "description": "Motor Calibrate",
          "in": [],
          "out": []
        }]
      }]
    },
    "globalOn": {},
    "globalTheme": [],
    "globalThemes": null,
    "firstPage": "CurtainStyle",
    "firstPageSpec": {
      "virtualProp": "curtainStyle"
    },
    "App": [{
      "i18n": {
        "en": {},
        "zh": {}
      },
      "componentName": "PageWithNormalNavigator",
      "useGlobalShowHide": false,
      "disableAnimation": false,
      "specs": [],
      "functionalSpecs": [],
      "disableType": "disable",
      "items": [{
        "componentName": "ContainerWithFlex",
        "useGlobalShowHide": false,
        "disableAnimation": false,
        "specs": [],
        "functionalSpecs": [],
        "disableType": "disable",
        "items": [{
          "specs": [{
            "virtualProp": "curtainStyle"
          }, {
            "siid": 2,
            "piid": 4
          }, {
            "siid": 2,
            "piid": 6
          }, {
            "siid": 2,
            "piid": 7
          }],
          "componentName": "Curtain",
          "useGlobalShowHide": false,
          "disableAnimation": false,
          "functionalSpecs": [],
          "disableType": "disable",
          "items": null,
          "styleIndex": ["0", ["100", "0"], ["101", "1"], ["102", "2"]],
          "statusIndex": ["", [0, "2"], [1, "1"], [2, "0"]],
          "onValueChange": "setTargetProperty",
          "i18n": {
            "zh": {
              "subtitle": ["{2}%", [0, "关闭中|{2}%"], [1, "停止|{2}%"], [2, "打开中|{2}%"]]
            },
            "en": {
              "subtitle": ["{2}%", [0, "Closing|{2}%"], [1, "Stop|{2}%"], [2, "Opening|{2}%"]]
            }
          }
        }]
      }, {
        "outerGap": 10,
        "componentName": "ContainerWithGap",
        "useGlobalShowHide": false,
        "disableAnimation": false,
        "specs": [],
        "functionalSpecs": [],
        "disableType": "disable",
        "items": [{
          "specs": [null, {
            "siid": 2,
            "piid": 2
          }, {
            "siid": 2,
            "piid": 2
          }, {
            "siid": 2,
            "piid": 2
          }],
          "useGlobalOn": false,
          "themeColor": "#5898FF",
          "onClicks": ["setTargetProperty", "setTargetProperty", "setTargetProperty"],
          "params": [0, 1, 2],
          "i18n": {
            "zh": {
              "title": "",
              "buttonNames": ["", [0, "关闭"], [1, "暂停"], [2, "打开"]],
              "subtitle": ""
            },
            "en": {
              "title": "",
              "buttonNames": ["", [0, "Close"], [1, "Pause"], [2, "Open"]],
              "subtitle": ""
            }
          },
          "componentName": "MultiButtons",
          "useGlobalShowHide": false,
          "disableAnimation": false,
          "functionalSpecs": [],
          "disableType": "disable",
          "items": null,
          "useGlobalTheme": false,
          "buttonIcons": ["curtain-close", "pause", "curtain-open"],
          "selectedButtonIcons": ["curtain-close-selected", "pause-selected", "curtain-open-selected"],
          "onSwitch": "setTargetProperty"
        }],
        "horizontal": false,
        "gap": 7
      }],
      "type": "",
      "backgroundColor": null,
      "containerStyle": null,
      "onPressLeft": "exit",
      "onPressRight": "goSetting"
    }],
    "Setting": [{
      "specs": [{
        "siid": 2,
        "piid": 8
      }],
      "componentName": "ListItemWithSwitch",
      "useGlobalShowHide": false,
      "disableAnimation": false,
      "functionalSpecs": [],
      "disableType": "disable",
      "items": null,
      "onSwitch": "setTargetProperty",
      "i18n": {
        "zh": {
          "title": "电机反向",
          "subtitle": ["已关闭", [true, "已开启"]]
        },
        "en": {
          "title": "Motor Reverse",
          "subtitle": ["Off", [true, "On"]]
        }
      }
    }, {
      "onClick": "goVirtualPage",
      "rightArrow": true,
      "virtualPage": "MotorCalibrate",
      "i18n": {
        "zh": {
          "title": "电机校准"
        },
        "en": {
          "title": "Motor Calibrate"
        }
      },
      "componentName": "ListItem",
      "useGlobalShowHide": false,
      "disableAnimation": false,
      "specs": [],
      "functionalSpecs": [],
      "disableType": "disable",
      "items": null
    }, {
      "specs": [{
        "virtualProp": "curtainStyle"
      }],
      "onClick": "goVirtualPage",
      "rightArrow": true,
      "virtualPage": "CurtainStyle",
      "i18n": {
        "en": {
          "title": "Select curtain mode",
          "value": ["", ["100", "Open both sides"], ["101", "Open left side"], ["102", "Open right side"]]
        },
        "zh": {
          "title": "选择窗帘样式",
          "value": ["", ["100", "左右双开"], ["101", "左侧单开"], ["102", "右侧单开"]]
        }
      },
      "componentName": "ListItem",
      "useGlobalShowHide": false,
      "disableAnimation": false,
      "functionalSpecs": [],
      "disableType": "disable",
      "items": null
    }, null, null],
    "CurtainStyle": [{
      "backgroundColor": "#fff",
      "onPressLeft": "goBack",
      "onPressRight": null,
      "i18n": {
        "en": {
          "subtitle": ["", [true, "Device On"], [false, "Device Off"]],
          "title": "Select curtain mode"
        },
        "zh": {
          "subtitle": ["", [true, "已开启"], [false, "已关闭"]],
          "title": "选择窗帘样式"
        }
      },
      "componentName": "PageWithNormalNavigator",
      "useGlobalShowHide": false,
      "disableAnimation": false,
      "specs": [],
      "functionalSpecs": [],
      "disableType": "disable",
      "items": [{
        "specs": [{
          "virtualProp": "curtainStyle"
        }],
        "componentName": "CurtainStyle",
        "useGlobalShowHide": false,
        "disableAnimation": false,
        "functionalSpecs": [],
        "disableType": "disable",
        "items": null,
        "icons": ["curtain-style-both", "curtain-style-left", "curtain-style-right"],
        "ids": ["100", "101", "102"],
        "onSelect": "setVirtualProp",
        "i18n": {
          "en": {
            "title0": "Open both sides",
            "title1": "Open left side",
            "title2": "Open right side"
          },
          "zh": {
            "title0": "左右双开",
            "title1": "左侧单开",
            "title2": "右侧单开"
          }
        }
      }],
      "type": "",
      "containerStyle": null
    }],
    "MotorCalibrate": [{
      "onPressLeft": "goBack",
      "onPressRight": null,
      "containerStyle": {
        "backgroundColor": "#fff"
      },
      "i18n": {
        "en": {
          "subtitle": ["", [true, "Device On"], [false, "Device Off"]],
          "title": "Motor Calibrate"
        },
        "zh": {
          "subtitle": ["", [true, "已开启"], [false, "已关闭"]],
          "title": "电机校准"
        }
      },
      "componentName": "PageWithNormalNavigator",
      "useGlobalShowHide": false,
      "disableAnimation": false,
      "specs": [],
      "functionalSpecs": [],
      "disableType": "disable",
      "items": [{
        "height": 36,
        "componentName": "Gap",
        "useGlobalShowHide": false,
        "disableAnimation": false,
        "specs": [],
        "functionalSpecs": [],
        "disableType": "disable",
        "items": null
      }, {
        "componentName": "ContainerWithFlex",
        "useGlobalShowHide": false,
        "disableAnimation": false,
        "specs": [],
        "functionalSpecs": [],
        "disableType": "disable",
        "items": [{
          "i18n": {
            "en": {
              "title0": "The applicable scenes of motor calibration:",
              "text0": "1. When you change the curtain rail;\n2. When something jams the curtain rail, and the degree of opening needs to be adjusted after the rail is clear;\n3. When the curtain can’t be fully opened or closed.",
              "title1": "Will the curtain be any different when the motor is calibrated?",
              "text1": "The motor calibration removes all previous position limits remembered. The sliding blocks of the curtain needs to re-measure all its trajectory and generate new position limits, and then the curtain can be fully opened or closed."
            },
            "zh": {
              "title0": "电机校准功能用于哪些场景：",
              "text0": "1.换窗帘轨道。\n2.轨道内有异物卡住了，清除异物后需要重新更新窗帘开合度。\n3.窗帘不能完全打开或关闭时。",
              "title1": "电机校准后窗帘会发生哪些变化：",
              "text1": "电机校准相当于清除限位，窗帘滑块需要重新测量行程，碰撞和测量后，自动形成新的限位，然后窗帘能达到完全的关闭和打开。"
            }
          },
          "componentName": "QAList",
          "useGlobalShowHide": false,
          "disableAnimation": false,
          "specs": [],
          "functionalSpecs": [],
          "disableType": "disable",
          "items": null
        }]
      }, {
        "specs": [{
          "siid": 2,
          "aiid": 1
        }],
        "themeColor": "#32BAC0",
        "textColor": "#fff",
        "componentName": "PrimeButton",
        "useGlobalShowHide": false,
        "disableAnimation": false,
        "functionalSpecs": [],
        "disableType": "disable",
        "items": null,
        "onClick": "triggerAction",
        "i18n": {
          "zh": {
            "title": "电机校准"
          },
          "en": {
            "title": "Motor Calibrate"
          }
        }
      }],
      "type": "",
      "backgroundColor": null
    }]
  };
  exports.default = _default;
},10697,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  module.exports = _interopRequireDefault;
},14305,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();

    _getRequireWildcardCache = function _getRequireWildcardCache() {
      return cache;
    };

    return cache;
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        "default": obj
      };
    }

    var cache = _getRequireWildcardCache();

    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }

    newObj["default"] = obj;

    if (cache) {
      cache.set(obj, newObj);
    }

    return newObj;
  }

  module.exports = _interopRequireWildcard;
},14308,[14311]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
},14311,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(Object(source));

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  module.exports = _objectSpread;
},14314,[14317]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty;
},14317,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck;
},14320,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  module.exports = _createClass;
},14323,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},14326,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warning = _$$_REQUIRE(_dependencyMap[0]);

  var warnedKeys = {};

  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }

    warning(false, message);
    warnedKeys[key] = true;
  }

  module.exports = warnOnce;
},14329,[14332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _$$_REQUIRE(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},14332,[14335]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},14335,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('AccessibilityInfo');

  exports.default = _default;
},14338,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

  var turboModuleProxy = global.__turboModuleProxy;

  function get(name) {
    if (!global.RN$Bridgeless) {
      var legacyModule = NativeModules[name];

      if (legacyModule != null) {
        return legacyModule;
      }
    }

    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      return module;
    }

    return null;
  }

  function getEnforcing(name) {
    var module = get(name);
    (0, _invariant.default)(module != null, "TurboModuleRegistry.getEnforcing(...): '" + name + "' could not be found. " + 'Verify that a module by this name is registered in the native binary.');
    return module;
  }
},14341,[14305,14326,10042]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
},14344,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }

  module.exports = _slicedToArray;
},14347,[14350,14353,14356]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles;
},14350,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(arr, i) {
    if (!((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit;
},14353,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  module.exports = _nonIterableRest;
},14356,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableSpread = _$$_REQUIRE(_dependencyMap[2]);

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  module.exports = _toConsumableArray;
},14359,[14362,14365,14368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  module.exports = _arrayWithoutHoles;
},14362,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  module.exports = _iterableToArray;
},14365,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  module.exports = _nonIterableSpread;
},14368,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  module.exports = _possibleConstructorReturn;
},14371,[14311,14374]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},14374,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf;
},14377,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var superPropBase = _$$_REQUIRE(_dependencyMap[0]);

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  module.exports = _get;
},14380,[14383]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  module.exports = _superPropBase;
},14383,[14377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  module.exports = _inherits;
},14386,[14389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf;
},14389,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      console.warn('Attempting to get config for view manager: ' + viewManagerName);
      return null;
    },
    getConstants: function getConstants() {
      return {};
    },
    getConstantsForViewManager: function getConstantsForViewManager(viewManagerName) {},
    getDefaultEventTypes: function getDefaultEventTypes() {
      return [];
    },
    playTouchSound: function playTouchSound() {},
    lazilyLoadView: function lazilyLoadView(name) {},
    createView: function createView(reactTag, viewName, rootTag, props) {},
    updateView: function updateView(reactTag, viewName, props) {},
    focus: function focus(reactTag) {},
    blur: function blur(reactTag) {},
    findSubviewIn: function findSubviewIn(reactTag, point, callback) {},
    dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandID, commandArgs) {},
    measure: function measure(reactTag, callback) {},
    measureInWindow: function measureInWindow(reactTag, callback) {},
    viewIsDescendantOf: function viewIsDescendantOf(reactTag, ancestorReactTag, callback) {},
    measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {},
    measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {},
    setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {},
    clearJSResponder: function clearJSResponder() {},
    configureNextLayoutAnimation: function configureNextLayoutAnimation(config, callback, errorCallback) {},
    removeSubviewsFromContainerWithID: function removeSubviewsFromContainerWithID(containerID) {},
    replaceExistingNonRootView: function replaceExistingNonRootView(reactTag, newReactTag) {},
    setChildren: function setChildren(containerTag, reactTags) {},
    manageChildren: function manageChildren(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {},
    setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental(enabled) {},
    sendAccessibilityEvent: function sendAccessibilityEvent(reactTag, eventType) {},
    showPopupMenu: function showPopupMenu(reactTag, items, error, success) {},
    dismissPopupMenu: function dismissPopupMenu() {}
  };
},14392,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _NativeUIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var UIManagerProperties = _$$_REQUIRE(_dependencyMap[5]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[6]);

  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;

  function _getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }

    return NativeUIManagerConstants;
  }

  var UIManagerJS = (0, _objectSpread2.default)({}, _NativeUIManager.default, {
    getConstants: function getConstants() {
      return _getConstants();
    },
    getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
      if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {
        try {
          viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
          viewManagerConfigs[viewManagerName] = null;
        }
      }

      var config = viewManagerConfigs[viewManagerName];

      if (config) {
        return config;
      }

      if (!global.nativeCallSyncHook) {
        return config;
      }

      if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);

        triedLoadingConfig.add(viewManagerName);

        if (result.viewConfig) {
          _getConstants()[viewManagerName] = result.viewConfig;
          lazifyViewManagerConfig(viewManagerName);
        }
      }

      return viewManagerConfigs[viewManagerName];
    }
  });
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;

  function lazifyViewManagerConfig(viewName) {
    var viewConfig = _getConstants()[viewName];

    viewManagerConfigs[viewName] = viewConfig;

    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];

            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }

  if (_getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
        get: function get() {
          return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  if (!global.nativeCallSyncHook) {
    Object.keys(_getConstants()).forEach(function (viewManagerName) {
      if (!UIManagerProperties.includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];
        }

        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
          get: function get() {
            console.warn("Accessing view manager configs directly off UIManager via UIManager['" + viewManagerName + "'] " + ("is no longer supported. Use UIManager.getViewManagerConfig('" + viewManagerName + "') instead."));
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }

  module.exports = UIManagerJS;
},14395,[14305,14314,14398,10042,10066,14404,10084]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('UIManager');

  exports.default = _default;
},14398,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('PlatformConstants');

  exports.default = _default;
},14401,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dismissPopupMenu', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'playTouchSound', 'removeRootView', 'removeSubviewsFromContainerWithID', 'replaceExistingNonRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'showPopupMenu', 'updateView', 'viewIsDescendantOf', 'PopupMenu', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
},14404,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = _$$_REQUIRE(_dependencyMap[0]);

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  module.exports = _objectWithoutProperties;
},14407,[14410]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose;
},14410,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var NativeDeviceInfo = NativeModule;
  var _default = NativeDeviceInfo;
  exports.default = _default;
},14413,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedLayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTransformPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var ImageStylePropTypes = _objectSpread({}, DeprecatedLayoutPropTypes, DeprecatedShadowPropTypesIOS, DeprecatedTransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(['center', 'contain', 'cover', 'repeat', 'stretch']),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: DeprecatedColorPropType,
    borderColor: DeprecatedColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: DeprecatedColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},14416,[14314,14419,14425,14428,14431,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _$$_REQUIRE(_dependencyMap[0]);

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},14419,[14422]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _native = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _utils = _$$_REQUIRE(_dependencyMap[2]);

  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function shouldUseAutoDarkmode() {
    if (_native.default.isIOS && _native.default.MIOTService.currentDarkMode == "dark" && !_index.default.darkModeStore.setDarkMode) {
      return true;
    } else {
      return false;
    }
  }

  function changeColor(color, flag, isText) {
    if (!shouldUseAutoDarkmode() || flag) {
      return color;
    }

    var tmp = color.toString(16);

    if (tmp.length < 8) {
      if (tmp.length == 1) {
        tmp = "0000000" + tmp;
      } else if (tmp.length == 2) {
        tmp = "000000" + tmp;
      } else if (tmp.length == 3) {
        tmp = "00000" + tmp;
      } else if (tmp.length == 4) {
        tmp = "0000" + tmp;
      } else if (tmp.length == 5) {
        tmp = "000" + tmp;
      } else if (tmp.length == 6) {
        tmp = "00" + tmp;
      } else if (tmp.length == 7) {
        tmp = "0" + tmp;
      } else {
        tmp = '00000000';
      }
    }

    var alpha = tmp.substr(6, 2);
    var first = "0x" + tmp.substr(0, 6);
    var finalColor = getAntiColor(parseInt(first, 16), parseInt(alpha, 16), isText);
    var finalAlpha = getAntiAlpha(parseInt(first, 16), parseInt(alpha, 16));
    var final = parseInt(finalColor.toString(16) + alpha, 16) >>> 0;
    return final;
  }

  function getAntiAlpha(originColor, alpha, isText) {
    if (alpha <= 0x65 && alpha >= 0x4c && originColor === 0x000000) {
      return 0x99;
    }

    return alpha;
  }

  function getAntiColor(originColor, alpha, isText) {
    if (originColor === 0x32bac0) {
      return 0x25A9AF;
    } else if (originColor === 0x25A9AF) {
      return 0x158B90;
    } else if (originColor === 0xF43F31) {
      return 0xD92719;
    } else if (originColor === 0xD53C32) {
      return 0xB62920;
    }

    if (!isText) {
      if (originColor === 0xf6f7f8 || originColor === 0xe9e9ef || originColor === 0xEBEBEC || originColor === 0xefeff0) {
        return 0x000000;
      }

      if (originColor === 0xE3E6E7) {
        return 0x1a1a1a;
      }

      if (originColor === 0xb0b0b0) {
        return 0x1a1a1a;
      }
    } else {
      if (originColor === 0x23262a || originColor === 0x404346 || originColor === 0x454553) {
        return 0xffffff;
      }
    }

    var rgbColor = hexToRgb(originColor.toString(16));
    var hsvColor = rgbToHsv(rgbColor[0], rgbColor[1], rgbColor[2]);
    var h = hsvColor.h;
    var s = hsvColor.s;
    var v = hsvColor.v;
    var flag = false;

    if (isText) {
      if (hsvColor.h === 0 && hsvColor.s === 0) {
        flag = true;

        if (v >= 0 && v < 20) {
          hsvColor.v = 90;
        } else if (v >= 20 && v < 30) {
          hsvColor.v = 80;
        } else if (v >= 30 && v < 40) {
          hsvColor.v = 70;
        } else if (v >= 40 && v < 50) {
          hsvColor.v = 60;
        } else if (v >= 50 && v < 60) {
          hsvColor.v = 50;
        } else if (v >= 60 && v < 90) {
          hsvColor.v = 40;
        } else if (v >= 90 && v <= 100) {
          hsvColor.v = 90;
        } else {
          flag = false;
        }
      } else {
        console.log('Text的其他情况看下hsv', h, '-', s, '-', v, '  originColor:', originColor.toString(16));
      }
    } else {
      if (hsvColor.h === 0 && hsvColor.s === 0) {
        flag = true;

        if (v >= 90 && v < 97) {
          hsvColor.v = 15;
        } else if (v >= 97 && v < 100) {
          hsvColor.v = 0;
        } else if (v === 100) {
          hsvColor.v = 10;
        } else {
          flag = false;
        }
      }
    }

    if (!flag) {
      hsvColor.s += 8;
      hsvColor.v -= 10;
    }

    return hsvToHex(hsvColor.h, Math.min(Math.max(hsvColor.s, 0), 100), Math.min(Math.max(hsvColor.v, 0), 100));
  }

  function hexToRgb(color) {
    var sColorChange = [];
    var tmp = color.toString(16);

    if (tmp.length < 8) {
      if (tmp.length == 1) {
        tmp = "#00000" + tmp;
      } else if (tmp.length == 2) {
        tmp = "#0000" + tmp;
      } else if (tmp.length == 3) {
        tmp = "#000" + tmp;
      } else if (tmp.length == 4) {
        tmp = "#00" + tmp;
      } else if (tmp.length == 5) {
        tmp = "#0" + tmp;
      } else if (tmp.length == 6) {
        tmp = "#" + tmp;
      } else {
        tmp = '#000000';
      }
    }

    var rgbString = "" + tmp.slice(1).match(/.{2}/g).map(function (x) {
      return parseInt(x, 16);
    }).join();
    sColorChange = rgbString.split(",");
    return sColorChange;
  }

  function rgbToHsv(r, g, b) {
    r = r / 255;
    g = g / 255;
    b = b / 255;
    var h, s, v;
    var min = Math.min(r, g, b);
    var max = v = Math.max(r, g, b);
    var l = (min + max) / 2;
    var difference = max - min;

    if (max == min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b) / difference + (g < b ? 6 : 0);
          break;

        case g:
          h = 2.0 + (b - r) / difference;
          break;

        case b:
          h = 4.0 + (r - g) / difference;
          break;
      }

      h = Math.round(h * 60);
    }

    if (max == 0) {
      s = 0;
    } else {
      s = 1 - min / max;
    }

    s = Math.round(s * 100);
    v = Math.round(v * 100);
    return {
      "h": h,
      "s": s,
      "v": v
    };
  }

  function hsvToHex(h, s, v) {
    s = s / 100;
    v = v / 100;
    var r = 0,
        g = 0,
        b = 0;
    var i = parseInt(h / 60 % 6);
    var f = h / 60 - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);

    switch (i) {
      case 0:
        r = v;
        g = t;
        b = p;
        break;

      case 1:
        r = q;
        g = v;
        b = p;
        break;

      case 2:
        r = p;
        g = v;
        b = t;
        break;

      case 3:
        r = p;
        g = q;
        b = v;
        break;

      case 4:
        r = t;
        g = p;
        b = v;
        break;

      case 5:
        r = v;
        g = p;
        b = q;
        break;

      default:
        break;
    }

    r = parseInt(r * 255.0);
    g = parseInt(g * 255.0);
    b = parseInt(b * 255.0);
    var color = (0, _utils.rgbToHex)(r, g, b);
    return color;
  }

  function normalizeColor(color) {
    var matchers = getMatchers();
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return changeColor(color, false, false);
      }

      return null;
    }

    var isText = false;

    if (color.indexOf('text') != -1) {
      isText = true;
      color = color.replace(new RegExp("text", "gm"), '');
    }

    var flag = false;

    if (color.indexOf('xm') != -1) {
      flag = true;
      color = color.replace(new RegExp("xm", "gm"), '');
    }

    if (match = matchers.hex6.exec(color)) {
      var tmp = parseInt(match[1] + "ff", 16) >>> 0;
      return changeColor(tmp, flag, isText);
    }

    if (names.hasOwnProperty(color)) {
      return changeColor(names[color], flag, isText);
    }

    if (match = matchers.rgb.exec(color)) {
      var _tmp = (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;

      return changeColor(_tmp, flag, isText);
    }

    if (match = matchers.rgba.exec(color)) {
      var _tmp2 = (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;

      return changeColor(_tmp2, flag, isText);
    }

    if (match = matchers.hex3.exec(color)) {
      var _tmp3 = parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;

      return changeColor(_tmp3, flag, isText);
    }

    if (match = matchers.hex8.exec(color)) {
      var _tmp4 = parseInt(match[1], 16) >>> 0;

      return changeColor(_tmp4, flag, isText);
    }

    if (match = matchers.hex4.exec(color)) {
      var _tmp5 = parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;

      return changeColor(_tmp5, flag, isText);
    }

    if (match = matchers.hsl.exec(color)) {
      var _tmp6 = (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;

      return changeColor(_tmp6, flag, isText);
    }

    if (match = matchers.hsla.exec(color)) {
      var _tmp7 = (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;

      return changeColor(_tmp7, flag, isText);
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }

    if (t < 0.5) {
      return q;
    }

    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";

  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return "\\(\\s*(" + args.join(')\\s*,\\s*(') + ")\\s*\\)";
  }

  var cachedMatchers;

  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER)),
        hsl: new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }

    return cachedMatchers;
  }

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},14422,[14305,10005,10014,10998]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap', 'wrap-reverse']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},14425,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedShadowPropTypesIOS = {
    shadowColor: DeprecatedColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = DeprecatedShadowPropTypesIOS;
},14428,[14419,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[1]);

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The transformMatrix style property is deprecated. Use `transform: [{ matrix: ... }]` instead.");
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The decomposedMatrix style property is deprecated. Use `transform: [...]` instead.");
    }
  };

  var DeprecatedTransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = DeprecatedTransformPropTypes;
},14431,[10318,10366]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTextStylePropTypes = _objectSpread({}, DeprecatedViewStylePropTypes, {
    color: DeprecatedColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: DeprecatedColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: DeprecatedColorPropType,
    textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = DeprecatedTextStylePropTypes;
},14434,[14314,14419,14437,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedLayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTransformPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var DeprecatedViewStylePropTypes = _objectSpread({}, DeprecatedLayoutPropTypes, DeprecatedShadowPropTypesIOS, DeprecatedTransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: DeprecatedColorPropType,
    borderColor: DeprecatedColorPropType,
    borderTopColor: DeprecatedColorPropType,
    borderRightColor: DeprecatedColorPropType,
    borderBottomColor: DeprecatedColorPropType,
    borderLeftColor: DeprecatedColorPropType,
    borderStartColor: DeprecatedColorPropType,
    borderEndColor: DeprecatedColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = DeprecatedViewStylePropTypes;
},14437,[14314,14419,14425,14428,14431,10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewViewConfigAndroid = _$$_REQUIRE(_dependencyMap[2]);

  var registerGeneratedViewConfig = _$$_REQUIRE(_dependencyMap[3]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[4]);

  var NativeViewComponent;
  var viewConfig;
  {
    NativeViewComponent = requireNativeComponent('RCTView');
  }
  var __INTERNAL_VIEW_CONFIG = viewConfig;
  exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
  var _default = NativeViewComponent;
  exports.default = _default;
},14440,[10066,10114,14581,14584,10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2]),
      React = _$$_REQUIRE(_dependencyMap[3]),
      Scheduler = _$$_REQUIRE(_dependencyMap[4]);

  function ReactError(error) {
    error.name = "Invariant Violation";
    return error;
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          if (!JSCompiler_inline_result) throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      if (eventPluginOrder) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (namesToPlugins[pluginName]) throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type."));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw ReactError(Error("Touch object is missing identifier."));
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  });
  var instanceCache = new Map(),
      instanceProps = new Map();

  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (getInstanceFromNode(target)) throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function flushDiscreteUpdatesImpl() {}

  var isInsideEventHandler = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) if (flushDiscreteUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
      }
    });
  }

  ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };

  getInstanceFromNode = getInstanceFromTag;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    var tag = inst.stateNode._nativeTag;
    undefined === tag && (tag = inst.stateNode.canonical._nativeTag);
    if (!tag) throw ReactError(Error("All native instances should have a tag."));
    return tag;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental");
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder");
  var MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    if (2 !== isFiberMountedImpl(fiber)) throw ReactError(Error("Unable to find node on an unmounted component."));
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = isFiberMountedImpl(fiber);
      if (3 === alternate) throw ReactError(Error("Unable to find node on an unmounted component."));
      return 1 === alternate ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw ReactError(Error("Unable to find node on an unmounted component."));
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
        }
      }
      if (a.alternate !== b) throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
    }

    if (3 !== a.tag) throw ReactError(Error("Unable to find node on an unmounted component."));
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      var relativeNode = undefined;
      "number" === typeof relativeToNativeNode ? relativeNode = relativeToNativeNode : relativeToNativeNode._nativeTag ? relativeNode = relativeToNativeNode._nativeTag : relativeToNativeNode.canonical && relativeToNativeNode.canonical._nativeTag && (relativeNode = relativeToNativeNode.canonical._nativeTag);
      null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }();

  function shim$1() {
    throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
  }

  var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      UPDATE_SIGNAL = {},
      nextReactTag = 3;

  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }

  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);

      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }

  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;

    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });

    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout,
      BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority,
      fakeCallbackNode = {},
      requestPaint = undefined !== Scheduler_requestPaint ? Scheduler_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = false,
      initialTimeMs = Scheduler_now(),
      now = 1e4 > initialTimeMs ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return 99;

      case Scheduler_UserBlockingPriority:
        return 98;

      case Scheduler_NormalPriority:
        return 97;

      case Scheduler_LowPriority:
        return 96;

      case Scheduler_IdlePriority:
        return 95;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return Scheduler_ImmediatePriority;

      case 98:
        return Scheduler_UserBlockingPriority;

      case 97:
        return Scheduler_NormalPriority;

      case 96:
        return Scheduler_LowPriority;

      case 95:
        return Scheduler_IdlePriority;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function runWithPriority(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    null !== immediateQueueCallbackNode && Scheduler_cancelCallback(immediateQueueCallbackNode);
    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }

  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (1073741823 === expirationTime) return 99;
    if (1 === expirationTime) return 95;
    currentTime = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - currentTime);
    return 0 >= currentTime ? 99 : 250 >= currentTime ? 98 : 5250 >= currentTime ? 97 : 95;
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        lazyComponent._status = 0;
        result = lazyComponent._ctor;
        result = result();
        result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        });

        switch (lazyComponent._status) {
          case 1:
            return lazyComponent._result;

          case 2:
            throw lazyComponent._result;
        }

        lazyComponent._result = result;
        throw result;
    }
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime, suspenseConfig) {
    return {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        if ("function" !== typeof _callback3) throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + _callback3));

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;

        if (element) {
          if (1 !== element.tag) throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
          inst = element.stateNode;
        }

        if (!inst) throw ReactError(Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue."));
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      if ("string" !== typeof returnFiber) throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
      if (!element._owner) throw ReactError(Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw ReactError(Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")."));
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw ReactError(Error("An iterable object provided no iterator."));

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);

              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, ReactError(Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var SubtreeSuspenseContextMask = 1,
      InvisibleParentSuspenseContext = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        if (null !== node.memoizedState) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var NoEffect$1 = 0,
      UnmountSnapshot = 2,
      UnmountMutation = 4,
      MountMutation = 8,
      UnmountLayout = 16,
      MountLayout = 32,
      MountPassive = 64,
      UnmountPassive = 128,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      renderExpirationTime$1 = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      nextCurrentHook = null,
      firstWorkInProgressHook = null,
      workInProgressHook = null,
      nextWorkInProgressHook = null,
      remainingExpirationTime = 0,
      componentUpdateQueue = null,
      sideEffectTag = 0,
      didScheduleRenderPhaseUpdate = false,
      renderPhaseUpdates = null,
      numberOfReRenders = 0;

  function throwInvalidHookError() {
    throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!is(nextDeps[i], prevDeps[i])) return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
    renderExpirationTime$1 = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    nextCurrentHook = null !== current ? current.memoizedState : null;
    ReactCurrentDispatcher$1.current = null === nextCurrentHook ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    workInProgress = Component(props, refOrContext);

    if (didScheduleRenderPhaseUpdate) {
      do {
        didScheduleRenderPhaseUpdate = false, numberOfReRenders += 1, nextCurrentHook = null !== current ? current.memoizedState : null, nextWorkInProgressHook = firstWorkInProgressHook, componentUpdateQueue = workInProgressHook = currentHook = null, ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdate, workInProgress = Component(props, refOrContext);
      } while (didScheduleRenderPhaseUpdate);

      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    current = currentlyRenderingFiber$1;
    current.memoizedState = firstWorkInProgressHook;
    current.expirationTime = remainingExpirationTime;
    current.updateQueue = componentUpdateQueue;
    current.effectTag |= sideEffectTag;
    current = null !== currentHook && null !== currentHook.next;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    if (current) throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
    return workInProgress;
  }

  function resetHooks() {
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    didScheduleRenderPhaseUpdate = false;
    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    null === workInProgressHook ? firstWorkInProgressHook = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook, nextCurrentHook = null !== currentHook ? currentHook.next : null;else {
      if (null === nextCurrentHook) throw ReactError(Error("Rendered more hooks than during the previous render."));
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        queue: currentHook.queue,
        baseUpdate: currentHook.baseUpdate,
        next: null
      };
      workInProgressHook = null === workInProgressHook ? firstWorkInProgressHook = newHook : workInProgressHook.next = newHook;
      nextCurrentHook = currentHook.next;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
    queue.lastRenderedReducer = reducer;

    if (0 < numberOfReRenders) {
      var _dispatch = queue.dispatch;

      if (null !== renderPhaseUpdates) {
        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (undefined !== firstRenderPhaseUpdate) {
          renderPhaseUpdates.delete(queue);
          var newState = hook.memoizedState;

          do {
            newState = reducer(newState, firstRenderPhaseUpdate.action), firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
          } while (null !== firstRenderPhaseUpdate);

          is(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          hook.baseUpdate === queue.last && (hook.baseState = newState);
          queue.lastRenderedState = newState;
          return [newState, _dispatch];
        }
      }

      return [hook.memoizedState, _dispatch];
    }

    _dispatch = queue.last;
    var baseUpdate = hook.baseUpdate;
    newState = hook.baseState;
    null !== baseUpdate ? (null !== _dispatch && (_dispatch.next = null), _dispatch = baseUpdate.next) : _dispatch = null !== _dispatch ? _dispatch.next : null;

    if (null !== _dispatch) {
      var newBaseUpdate = firstRenderPhaseUpdate = null,
          _update = _dispatch,
          didSkip = false;

      do {
        var updateExpirationTime = _update.expirationTime;
        updateExpirationTime < renderExpirationTime$1 ? (didSkip || (didSkip = true, newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState), updateExpirationTime > remainingExpirationTime && (remainingExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig), newState = _update.eagerReducer === reducer ? _update.eagerState : reducer(newState, _update.action));
        baseUpdate = _update;
        _update = _update.next;
      } while (null !== _update && _update !== _dispatch);

      didSkip || (newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState);
      is(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      hook.baseUpdate = newBaseUpdate;
      hook.baseState = firstRenderPhaseUpdate;
      queue.lastRenderedState = newState;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    null === componentUpdateQueue ? (componentUpdateQueue = {
      lastEffect: null
    }, componentUpdateQueue.lastEffect = tag.next = tag) : (create = componentUpdateQueue.lastEffect, null === create ? componentUpdateQueue.lastEffect = tag.next = tag : (destroy = create.next, create.next = tag, tag.next = destroy, componentUpdateQueue.lastEffect = tag));
    return tag;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, undefined, undefined === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(NoEffect$1, create, destroy, deps);
        return;
      }
    }

    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, destroy, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function mountDebugValue() {}

  function dispatchAction(fiber, queue, action) {
    if (!(25 > numberOfReRenders)) throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1) {
      if (didScheduleRenderPhaseUpdate = true, fiber = {
        expirationTime: renderExpirationTime$1,
        suspenseConfig: null,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === renderPhaseUpdates && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), undefined === action) renderPhaseUpdates.set(queue, fiber);else {
        for (queue = action; null !== queue.next;) {
          queue = queue.next;
        }

        queue.next = fiber;
      }
    } else {
      var currentTime = requestCurrentTime(),
          _suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);
      _suspenseConfig = {
        expirationTime: currentTime,
        suspenseConfig: _suspenseConfig,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var _last = queue.last;
      if (null === _last) _suspenseConfig.next = _suspenseConfig;else {
        var first = _last.next;
        null !== first && (_suspenseConfig.next = first);
        _last.next = _suspenseConfig;
      }
      queue.last = _suspenseConfig;
      if (0 === fiber.expirationTime && (null === alternate || 0 === alternate.expirationTime) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
            _eagerState = alternate(currentState, action);

        _suspenseConfig.eagerReducer = alternate;
        _suspenseConfig.eagerState = _eagerState;
        if (is(_eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleUpdateOnFiber(fiber, currentTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return mountEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = undefined !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function useState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return updateEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return updateEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: updateReducer,
    useRef: function useRef() {
      return updateWorkInProgressHook().memoizedState;
    },
    useState: function useState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 13:
        return false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current$$1, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref && (didReceiveUpdate = false, updateExpirationTime < renderExpirationTime) ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {};

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextState = null,
        nextDidTimeout = false,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & ForceSuspenseFallback) && (null === current$$1 || null !== current$$1.memoizedState));
    JSCompiler_temp ? (nextState = SUSPENDED_MARKER, nextDidTimeout = true, workInProgress.effectTag &= -65) : null !== current$$1 && null === current$$1.memoizedState || undefined === nextProps.fallback || true === nextProps.unstable_avoidThisFallback || (suspenseContext |= InvisibleParentSuspenseContext);
    suspenseContext &= SubtreeSuspenseContextMask;
    push(suspenseStackCursor, suspenseContext, workInProgress);
    if (null === current$$1) {
      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        current$$1 = createFiberFromFragment(null, mode, 0, null);
        current$$1.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, current$$1.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = current$$1, nextDidTimeout = nextDidTimeout.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextProps, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        current$$1.sibling = renderExpirationTime;
        mode = current$$1;
      } else mode = renderExpirationTime = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime);
    } else {
      if (null !== current$$1.memoizedState) {
        if (suspenseContext = current$$1.child, mode = suspenseContext.sibling, nextDidTimeout) {
          nextProps = nextProps.fallback;
          renderExpirationTime = createWorkInProgress(suspenseContext, suspenseContext.pendingProps, 0);
          renderExpirationTime.return = workInProgress;
          if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== suspenseContext.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
            nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
          }
          nextProps = createWorkInProgress(mode, nextProps, mode.expirationTime);
          nextProps.return = workInProgress;
          renderExpirationTime.sibling = nextProps;
          mode = renderExpirationTime;
          renderExpirationTime.childExpirationTime = 0;
          renderExpirationTime = nextProps;
        } else mode = renderExpirationTime = reconcileChildFibers(workInProgress, suspenseContext.child, nextProps.children, renderExpirationTime);
      } else if (suspenseContext = current$$1.child, nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        nextProps.child = suspenseContext;
        null !== suspenseContext && (suspenseContext.return = nextProps);
        if (0 === (workInProgress.mode & 2)) for (suspenseContext = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = suspenseContext; null !== suspenseContext;) {
          suspenseContext.return = nextProps, suspenseContext = suspenseContext.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        renderExpirationTime.effectTag |= 2;
        mode = nextProps;
        nextProps.childExpirationTime = 0;
      } else renderExpirationTime = mode = reconcileChildFibers(workInProgress, suspenseContext, nextProps.children, renderExpirationTime);
      workInProgress.stateNode = current$$1.stateNode;
    }
    workInProgress.memoizedState = nextState;
    workInProgress.child = mode;
    return renderExpirationTime;
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode);
  }

  function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current$$1, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.effectTag |= 64;else {
      if (null !== current$$1 && 0 !== (current$$1.effectTag & 64)) a: for (current$$1 = workInProgress.child; null !== current$$1;) {
        if (13 === current$$1.tag) {
          if (null !== current$$1.memoizedState) {
            current$$1.expirationTime < renderExpirationTime && (current$$1.expirationTime = renderExpirationTime);
            var alternate = current$$1.alternate;
            null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
            scheduleWorkOnParentPath(current$$1.return, renderExpirationTime);
          }
        } else if (null !== current$$1.child) {
          current$$1.child.return = current$$1;
          current$$1 = current$$1.child;
          continue;
        }

        if (current$$1 === workInProgress) break a;

        for (; null === current$$1.sibling;) {
          if (null === current$$1.return || current$$1.return === workInProgress) break a;
          current$$1 = current$$1.return;
        }

        current$$1.sibling.return = current$$1.return;
        current$$1 = current$$1.sibling;
      }
      nextProps &= SubtreeSuspenseContextMask;
    }
    push(suspenseStackCursor, nextProps, workInProgress);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          nextProps = renderExpirationTime.alternate, null !== nextProps && null === findFirstSuspended(nextProps) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderExpirationTime, tailMode);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          nextProps = revealOrder.alternate;

          if (null !== nextProps && null === findFirstSuspended(nextProps)) {
            workInProgress.child = revealOrder;
            break;
          }

          nextProps = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = nextProps;
        }

        initSuspenseListRenderState(workInProgress, true, renderExpirationTime, null, tailMode);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.dependencies = current$$1.dependencies);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current$$1 && workInProgress.child !== current$$1.child) throw ReactError(Error("Resuming work not yet implemented."));

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  appendAllChildren = function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag || 6 === node.tag) parent._children.push(node.stateNode);else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function updateHostContainer() {};

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.effectTag |= 4);
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
        workInProgress.effectTag = effectTag & -2049 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 18:
        return null;

      case 19:
        return pop(suspenseStackCursor, workInProgress), null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));

  function logCapturedError(capturedError) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet$1 = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current$$1, instance) {
    try {
      instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current$$1, unmountError);
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitHookEffectList(unmountTag, mountTag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & unmountTag) !== NoEffect$1) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && destroy();
        }

        (effect.tag & mountTag) !== NoEffect$1 && (destroy = effect.create, effect.destroy = destroy());
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitUnmount(current$$1$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var firstEffect = updateQueue.next;
          runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var destroy = effect.destroy;

              if (undefined !== destroy) {
                var current$$1 = current$$1$jscomp$0;

                try {
                  destroy();
                } catch (error) {
                  captureCommitPhaseError(current$$1, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        renderPriorityLevel = current$$1$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$$1$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        unmountHostComponents(current$$1$jscomp$0, renderPriorityLevel);
    }
  }

  function detachFiber(current$$1) {
    var alternate = current$$1.alternate;
    current$$1.return = null;
    current$$1.child = null;
    current$$1.memoizedState = null;
    current$$1.updateQueue = null;
    current$$1.dependencies = null;
    current$$1.alternate = null;
    current$$1.firstEffect = null;
    current$$1.lastEffect = null;
    current$$1.pendingProps = null;
    current$$1.memoizedProps = null;
    null !== alternate && detachFiber(alternate);
  }

  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }

  function commitPlacement(finishedWork) {
    a: {
      for (var parent = finishedWork.return; null !== parent;) {
        if (isHostParent(parent)) {
          var parentFiber = parent;
          break a;
        }

        parent = parent.return;
      }

      throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
    }

    parent = parentFiber.stateNode;

    switch (parentFiber.tag) {
      case 5:
        var isContainer = false;
        break;

      case 3:
        parent = parent.containerInfo;
        isContainer = true;
        break;

      case 4:
        parent = parent.containerInfo;
        isContainer = true;
        break;

      default:
        throw ReactError(Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."));
    }

    parentFiber.effectTag & 16 && (parentFiber.effectTag &= -17);

    a: b: for (parentFiber = finishedWork;;) {
      for (; null === parentFiber.sibling;) {
        if (null === parentFiber.return || isHostParent(parentFiber.return)) {
          parentFiber = null;
          break a;
        }

        parentFiber = parentFiber.return;
      }

      parentFiber.sibling.return = parentFiber.return;

      for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag && 18 !== parentFiber.tag;) {
        if (parentFiber.effectTag & 2) continue b;
        if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child.return = parentFiber, parentFiber = parentFiber.child;
      }

      if (!(parentFiber.effectTag & 2)) {
        parentFiber = parentFiber.stateNode;
        break a;
      }
    }

    for (var node = finishedWork;;) {
      var isHost = 5 === node.tag || 6 === node.tag;

      if (isHost) {
        var stateNode = isHost ? node.stateNode : node.stateNode.instance;
        if (parentFiber) {
          if (isContainer) {
            if ("number" === typeof parent) throw ReactError(Error("Container does not support insertBefore operation"));
          } else {
            isHost = parent;
            var beforeChild = parentFiber,
                children = isHost._children,
                index = children.indexOf(stateNode);
            0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [], [], ["number" === typeof stateNode ? stateNode : stateNode._nativeTag], [index], []));
          }
        } else isContainer ? ReactNativePrivateInterface.UIManager.setChildren(parent, ["number" === typeof stateNode ? stateNode : stateNode._nativeTag]) : (isHost = parent, children = "number" === typeof stateNode ? stateNode : stateNode._nativeTag, index = isHost._children, beforeChild = index.indexOf(stateNode), 0 <= beforeChild ? (index.splice(beforeChild, 1), index.push(stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [beforeChild], [index.length - 1], [], [], [])) : (index.push(stateNode), ReactNativePrivateInterface.UIManager.manageChildren(isHost._nativeTag, [], [], [children], [index.length - 1], [])));
      } else if (4 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === finishedWork) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function unmountHostComponents(current$$1, renderPriorityLevel$jscomp$0) {
    for (var node = current$$1, currentParentIsValid = false, currentParent = undefined, currentParentIsContainer = undefined;;) {
      if (!currentParentIsValid) {
        currentParentIsValid = node.return;

        a: for (;;) {
          if (null === currentParentIsValid) throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
          currentParent = currentParentIsValid.stateNode;

          switch (currentParentIsValid.tag) {
            case 5:
              currentParentIsContainer = false;
              break a;

            case 3:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = true;
              break a;

            case 4:
              currentParent = currentParent.containerInfo;
              currentParentIsContainer = true;
              break a;
          }

          currentParentIsValid = currentParentIsValid.return;
        }

        currentParentIsValid = true;
      }

      if (5 === node.tag || 6 === node.tag) {
        a: for (var root = node, renderPriorityLevel = renderPriorityLevel$jscomp$0, node$jscomp$0 = root;;) {
          if (commitUnmount(node$jscomp$0, renderPriorityLevel), null !== node$jscomp$0.child && 4 !== node$jscomp$0.tag) node$jscomp$0.child.return = node$jscomp$0, node$jscomp$0 = node$jscomp$0.child;else {
            if (node$jscomp$0 === root) break;

            for (; null === node$jscomp$0.sibling;) {
              if (null === node$jscomp$0.return || node$jscomp$0.return === root) break a;
              node$jscomp$0 = node$jscomp$0.return;
            }

            node$jscomp$0.sibling.return = node$jscomp$0.return;
            node$jscomp$0 = node$jscomp$0.sibling;
          }
        }

        currentParentIsContainer ? (root = currentParent, recursivelyUncacheFiberNode(node.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(root, [], [], [], [], [0])) : (root = currentParent, node$jscomp$0 = node.stateNode, recursivelyUncacheFiberNode(node$jscomp$0), renderPriorityLevel = root._children, node$jscomp$0 = renderPriorityLevel.indexOf(node$jscomp$0), renderPriorityLevel.splice(node$jscomp$0, 1), ReactNativePrivateInterface.UIManager.manageChildren(root._nativeTag, [], [], [], [], [node$jscomp$0]));
      } else if (4 === node.tag) {
        if (null !== node.child) {
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true;
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (commitUnmount(node, renderPriorityLevel$jscomp$0), null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === current$$1) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === current$$1) return;
        node = node.return;
        4 === node.tag && (currentParentIsValid = false);
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        break;

      case 1:
        break;

      case 5:
        var instance = finishedWork.stateNode;

        if (null != instance) {
          var newProps = finishedWork.memoizedProps;
          current$$1 = null !== current$$1 ? current$$1.memoizedProps : newProps;
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          null !== updatePayload && (finishedWork = instance.viewConfig, instanceProps.set(instance._nativeTag, newProps), newProps = diffProperties(null, current$$1, newProps, finishedWork.validAttributes), null != newProps && ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, finishedWork.uiViewClassName, newProps));
        }

        break;

      case 6:
        if (null === finishedWork.stateNode) throw ReactError(Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."));
        ReactNativePrivateInterface.UIManager.updateView(finishedWork.stateNode, "RCTRawText", {
          text: finishedWork.memoizedProps
        });
        break;

      case 3:
        break;

      case 12:
        break;

      case 13:
        instance = finishedWork;
        null === finishedWork.memoizedState ? newProps = false : (newProps = true, instance = finishedWork.child, globalMostRecentFallbackTime = now());
        if (null !== instance) a: for (current$$1 = instance;;) {
          if (5 === current$$1.tag) {
            if (updatePayload = current$$1.stateNode, newProps) {
              var viewConfig = updatePayload.viewConfig;
              var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                style: {
                  display: "none"
                }
              }, viewConfig.validAttributes);
              ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            } else {
              updatePayload = current$$1.stateNode;
              updatePayload$jscomp$0 = current$$1.memoizedProps;
              viewConfig = updatePayload.viewConfig;

              var prevProps = _extends({}, updatePayload$jscomp$0, {
                style: [updatePayload$jscomp$0.style, {
                  display: "none"
                }]
              });

              updatePayload$jscomp$0 = diffProperties(null, prevProps, updatePayload$jscomp$0, viewConfig.validAttributes);
              ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig.uiViewClassName, updatePayload$jscomp$0);
            }
          } else {
            if (6 === current$$1.tag) throw Error("Not yet implemented.");

            if (13 === current$$1.tag && null !== current$$1.memoizedState) {
              updatePayload = current$$1.child.sibling;
              updatePayload.return = current$$1;
              current$$1 = updatePayload;
              continue;
            } else if (null !== current$$1.child) {
              current$$1.child.return = current$$1;
              current$$1 = current$$1.child;
              continue;
            }
          }
          if (current$$1 === instance) break a;

          for (; null === current$$1.sibling;) {
            if (null === current$$1.return || current$$1.return === instance) break a;
            current$$1 = current$$1.return;
          }

          current$$1.sibling.return = current$$1.return;
          current$$1 = current$$1.sibling;
        }
        attachSuspenseRetryListeners(finishedWork);
        break;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        break;

      case 17:
        break;

      case 20:
        break;

      default:
        throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet$1());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootErrored = 1,
      RootSuspended = 2,
      RootSuspendedWithDelay = 3,
      RootCompleted = 4,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootHasPendingPing = false,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      pendingPassiveEffectsExpirationTime = 0,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTime() {
    return (executionContext & 48) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 1;
        break;

      default:
        throw ReactError(Error("Expected a valid priority level"));
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime && --currentTime;
    return currentTime;
  }

  function scheduleUpdateOnFiber(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      fiber.pingTime = 0;
      var priorityLevel = getCurrentPriorityLevel();
      if (1073741823 === expirationTime) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & 48) === NoContext) for (var callback = renderRoot(fiber, 1073741823, true); null !== callback;) {
          callback = callback(true);
        } else scheduleCallbackForRoot(fiber, 99, 1073741823), executionContext === NoContext && flushSyncCallbackQueue();
      } else scheduleCallbackForRoot(fiber, priorityLevel, expirationTime);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (undefined === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime), fiber = root.lastPendingTime, 0 === fiber || expirationTime < fiber) && (root.lastPendingTime = expirationTime);
    return root;
  }

  function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
    if (root.callbackExpirationTime < expirationTime) {
      var existingCallbackNode = root.callbackNode;
      null !== existingCallbackNode && existingCallbackNode !== fakeCallbackNode && Scheduler_cancelCallback(existingCallbackNode);
      root.callbackExpirationTime = expirationTime;
      1073741823 === expirationTime ? root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime))) : (existingCallbackNode = null, 1 !== expirationTime && (existingCallbackNode = {
        timeout: 10 * (1073741821 - expirationTime) - now()
      }), root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), existingCallbackNode));
    }
  }

  function runRootCallback(root, callback, isSync) {
    var prevCallbackNode = root.callbackNode,
        continuation = null;

    try {
      return continuation = callback(isSync), null !== continuation ? runRootCallback.bind(null, root, continuation) : null;
    } finally {
      null === continuation && prevCallbackNode === root.callbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0);
    }
  }

  function resolveLocksOnRoot(root, expirationTime) {
    var firstBatch = root.firstBatch;
    return null !== firstBatch && firstBatch._defer && firstBatch._expirationTime >= expirationTime ? (scheduleCallback(97, function () {
      firstBatch._onComplete();

      return null;
    }), true) : false;
  }

  function flushPendingDiscreteUpdates() {
    if (null !== rootsWithPendingDiscreteUpdates) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
      });
      flushSyncCallbackQueue();
    }
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          var childContextTypes = interruptedWork.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork);
          break;

        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer(interruptedWork);
          break;

        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null, expirationTime);
    renderExpirationTime = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootHasPendingPing = false;
  }

  function renderRoot(root$jscomp$0, expirationTime, isSync) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    if (root$jscomp$0.firstPendingTime < expirationTime) return null;
    if (isSync && root$jscomp$0.finishedExpirationTime === expirationTime) return commitRoot.bind(null, root$jscomp$0);
    flushPassiveEffects();
    if (root$jscomp$0 !== workInProgressRoot || expirationTime !== renderExpirationTime) prepareFreshStack(root$jscomp$0, expirationTime);else if (workInProgressRootExitStatus === RootSuspendedWithDelay) if (workInProgressRootHasPendingPing) prepareFreshStack(root$jscomp$0, expirationTime);else {
      var lastPendingTime = root$jscomp$0.lastPendingTime;
      if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
    }

    if (null !== workInProgress) {
      lastPendingTime = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = ReactCurrentDispatcher.current;
      null === prevDispatcher && (prevDispatcher = ContextOnlyDispatcher);
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;

      if (isSync) {
        if (1073741823 !== expirationTime) {
          var currentTime = requestCurrentTime();
          if (currentTime < expirationTime) return executionContext = lastPendingTime, resetContextDependencies(), ReactCurrentDispatcher.current = prevDispatcher, renderRoot.bind(null, root$jscomp$0, currentTime);
        }
      } else currentEventTime = 0;

      do {
        try {
          if (isSync) for (; null !== workInProgress;) {
            workInProgress = performUnitOfWork(workInProgress);
          } else for (; null !== workInProgress && !Scheduler_shouldYield();) {
            workInProgress = performUnitOfWork(workInProgress);
          }
          break;
        } catch (thrownValue) {
          resetContextDependencies();
          resetHooks();
          currentTime = workInProgress;
          if (null === currentTime || null === currentTime.return) throw prepareFreshStack(root$jscomp$0, expirationTime), executionContext = lastPendingTime, thrownValue;

          a: {
            var root = root$jscomp$0,
                returnFiber = currentTime.return,
                sourceFiber = currentTime,
                value = thrownValue,
                renderExpirationTime$jscomp$0 = renderExpirationTime;
            sourceFiber.effectTag |= 1024;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;

            if (null !== value && "object" === typeof value && "function" === typeof value.then) {
              var thenable = value,
                  hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext);
              value = returnFiber;

              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === value.tag) null !== value.memoizedState ? JSCompiler_temp = false : (JSCompiler_temp = value.memoizedProps, JSCompiler_temp = undefined === JSCompiler_temp.fallback ? false : true !== JSCompiler_temp.unstable_avoidThisFallback ? true : hasInvisibleParentBoundary ? false : true);

                if (JSCompiler_temp) {
                  returnFiber = value.updateQueue;
                  null === returnFiber ? (returnFiber = new Set(), returnFiber.add(thenable), value.updateQueue = returnFiber) : returnFiber.add(thenable);

                  if (0 === (value.mode & 2)) {
                    value.effectTag |= 64;
                    sourceFiber.effectTag &= -1957;
                    1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (renderExpirationTime$jscomp$0 = createUpdate(1073741823, null), renderExpirationTime$jscomp$0.tag = 2, enqueueUpdate(sourceFiber, renderExpirationTime$jscomp$0)));
                    sourceFiber.expirationTime = 1073741823;
                    break a;
                  }

                  sourceFiber = root;
                  root = renderExpirationTime$jscomp$0;
                  hasInvisibleParentBoundary = sourceFiber.pingCache;
                  null === hasInvisibleParentBoundary ? (hasInvisibleParentBoundary = sourceFiber.pingCache = new PossiblyWeakMap(), returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)) : (returnFiber = hasInvisibleParentBoundary.get(thenable), undefined === returnFiber && (returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)));
                  returnFiber.has(root) || (returnFiber.add(root), sourceFiber = pingSuspendedRoot.bind(null, sourceFiber, thenable, root), thenable.then(sourceFiber, sourceFiber));
                  value.effectTag |= 2048;
                  value.expirationTime = renderExpirationTime$jscomp$0;
                  break a;
                }

                value = value.return;
              } while (null !== value);

              value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }

            workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
            value = createCapturedValue(value, sourceFiber);
            sourceFiber = returnFiber;

            do {
              switch (sourceFiber.tag) {
                case 3:
                  sourceFiber.effectTag |= 2048;
                  sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                  renderExpirationTime$jscomp$0 = createRootErrorUpdate(sourceFiber, value, renderExpirationTime$jscomp$0);
                  enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                  break a;

                case 1:
                  if (thenable = value, root = sourceFiber.type, returnFiber = sourceFiber.stateNode, 0 === (sourceFiber.effectTag & 64) && ("function" === typeof root.getDerivedStateFromError || null !== returnFiber && "function" === typeof returnFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(returnFiber)))) {
                    sourceFiber.effectTag |= 2048;
                    sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                    renderExpirationTime$jscomp$0 = createClassErrorUpdate(sourceFiber, thenable, renderExpirationTime$jscomp$0);
                    enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                    break a;
                  }

              }

              sourceFiber = sourceFiber.return;
            } while (null !== sourceFiber);
          }

          workInProgress = completeUnitOfWork(currentTime);
        }
      } while (1);

      executionContext = lastPendingTime;
      resetContextDependencies();
      ReactCurrentDispatcher.current = prevDispatcher;
      if (null !== workInProgress) return renderRoot.bind(null, root$jscomp$0, expirationTime);
    }

    root$jscomp$0.finishedWork = root$jscomp$0.current.alternate;
    root$jscomp$0.finishedExpirationTime = expirationTime;
    if (resolveLocksOnRoot(root$jscomp$0, expirationTime)) return null;
    workInProgressRoot = null;

    switch (workInProgressRootExitStatus) {
      case RootIncomplete:
        throw ReactError(Error("Should have a work-in-progress."));

      case RootErrored:
        return lastPendingTime = root$jscomp$0.lastPendingTime, lastPendingTime < expirationTime ? renderRoot.bind(null, root$jscomp$0, lastPendingTime) : isSync ? commitRoot.bind(null, root$jscomp$0) : (prepareFreshStack(root$jscomp$0, expirationTime), scheduleSyncCallback(renderRoot.bind(null, root$jscomp$0, expirationTime)), null);

      case RootSuspended:
        if (1073741823 === workInProgressRootLatestProcessedExpirationTime && !isSync && (isSync = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < isSync)) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          lastPendingTime = root$jscomp$0.lastPendingTime;
          if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
          root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync);
          return null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootSuspendedWithDelay:
        if (!isSync) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          isSync = root$jscomp$0.lastPendingTime;
          if (isSync < expirationTime) return renderRoot.bind(null, root$jscomp$0, isSync);
          1073741823 !== workInProgressRootLatestSuspenseTimeout ? isSync = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? isSync = 0 : (isSync = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, lastPendingTime = now(), expirationTime = 10 * (1073741821 - expirationTime) - lastPendingTime, isSync = lastPendingTime - isSync, 0 > isSync && (isSync = 0), isSync = (120 > isSync ? 120 : 480 > isSync ? 480 : 1080 > isSync ? 1080 : 1920 > isSync ? 1920 : 3e3 > isSync ? 3e3 : 4320 > isSync ? 4320 : 1960 * ceil(isSync / 1960)) - isSync, expirationTime < isSync && (isSync = expirationTime));
          if (10 < isSync) return root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync), null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootCompleted:
        return !isSync && 1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig && (lastPendingTime = workInProgressRootLatestProcessedExpirationTime, prevDispatcher = workInProgressRootCanSuspendUsingConfig, expirationTime = prevDispatcher.busyMinDurationMs | 0, 0 >= expirationTime ? expirationTime = 0 : (isSync = prevDispatcher.busyDelayMs | 0, lastPendingTime = now() - (10 * (1073741821 - lastPendingTime) - (prevDispatcher.timeoutMs | 0 || 5e3)), expirationTime = lastPendingTime <= isSync ? 0 : isSync + expirationTime - lastPendingTime), 10 < expirationTime) ? (root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), expirationTime), null) : commitRoot.bind(null, root$jscomp$0);

      default:
        throw ReactError(Error("Unknown root exit status."));
    }
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 1 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 1 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$$1(unitOfWork.alternate, unitOfWork, renderExpirationTime);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current$$1 = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 1024)) {
        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime$jscomp$0 = renderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              newProps = current$$1.stateNode;
              newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime$jscomp$0 = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime$jscomp$0), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                current = requiredContext(contextStackCursor$1.current);
                var type$jscomp$0 = type;
                var _instance6 = newProps;
                var rootContainerInstance = renderExpirationTime$jscomp$0,
                    internalInstanceHandle = current$$1,
                    tag = allocateTag();
                type$jscomp$0 = getViewConfigForType(type$jscomp$0);
                var updatePayload = diffProperties(null, emptyObject, _instance6, type$jscomp$0.validAttributes);
                ReactNativePrivateInterface.UIManager.createView(tag, type$jscomp$0.uiViewClassName, rootContainerInstance, updatePayload);
                rootContainerInstance = new ReactNativeFiberHostComponent(tag, type$jscomp$0);
                instanceCache.set(tag, internalInstanceHandle);
                instanceProps.set(tag, _instance6);
                _instance6 = rootContainerInstance;
                appendAllChildren(_instance6, current$$1, false, false);
                finalizeInitialChildren(_instance6, type, newProps, renderExpirationTime$jscomp$0, current) && (current$$1.effectTag |= 4);
                current$$1.stateNode = _instance6;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else if (null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
              break;

            case 6:
              if (current && null != current$$1.stateNode) updateHostText$1(current, current$$1, current.memoizedProps, newProps);else {
                if ("string" !== typeof newProps && null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                type = requiredContext(rootInstanceStackCursor.current);
                renderExpirationTime$jscomp$0 = requiredContext(contextStackCursor$1.current);
                current = current$$1;
                if (!renderExpirationTime$jscomp$0.isInAParentText) throw ReactError(Error("Text strings must be rendered within a <Text> component."));
                renderExpirationTime$jscomp$0 = allocateTag();
                ReactNativePrivateInterface.UIManager.createView(renderExpirationTime$jscomp$0, "RCTRawText", type, {
                  text: newProps
                });
                instanceCache.set(renderExpirationTime$jscomp$0, current$$1);
                current.stateNode = renderExpirationTime$jscomp$0;
              }
              break;

            case 11:
              break;

            case 13:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime$jscomp$0;
                break a;
              }

              newProps = null !== newProps;
              renderExpirationTime$jscomp$0 = false;
              null !== current && (type = current.memoizedState, renderExpirationTime$jscomp$0 = null !== type, newProps || null === type || (type = current.child.sibling, null !== type && (_instance6 = current$$1.firstEffect, null !== _instance6 ? (current$$1.firstEffect = type, type.nextEffect = _instance6) : (current$$1.firstEffect = current$$1.lastEffect = type, type.nextEffect = null), type.effectTag = 8)));
              if (newProps && !renderExpirationTime$jscomp$0 && 0 !== (current$$1.mode & 2)) if (null === current && true !== current$$1.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
              if (newProps || renderExpirationTime$jscomp$0) current$$1.effectTag |= 4;
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 18:
              break;

            case 19:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;
              if (null === newProps) break;
              type = 0 !== (current$$1.effectTag & 64);
              _instance6 = newProps.rendering;
              if (null === _instance6) {
                if (type) cutOffTailIfNeeded(newProps, false);else {
                  if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = current$$1.child; null !== current;) {
                    _instance6 = findFirstSuspended(current);

                    if (null !== _instance6) {
                      current$$1.effectTag |= 64;
                      cutOffTailIfNeeded(newProps, false);
                      newProps = _instance6.updateQueue;
                      null !== newProps && (current$$1.updateQueue = newProps, current$$1.effectTag |= 4);
                      current$$1.firstEffect = current$$1.lastEffect = null;
                      newProps = renderExpirationTime$jscomp$0;

                      for (current = current$$1.child; null !== current;) {
                        renderExpirationTime$jscomp$0 = current, type = newProps, renderExpirationTime$jscomp$0.effectTag &= 2, renderExpirationTime$jscomp$0.nextEffect = null, renderExpirationTime$jscomp$0.firstEffect = null, renderExpirationTime$jscomp$0.lastEffect = null, _instance6 = renderExpirationTime$jscomp$0.alternate, null === _instance6 ? (renderExpirationTime$jscomp$0.childExpirationTime = 0, renderExpirationTime$jscomp$0.expirationTime = type, renderExpirationTime$jscomp$0.child = null, renderExpirationTime$jscomp$0.memoizedProps = null, renderExpirationTime$jscomp$0.memoizedState = null, renderExpirationTime$jscomp$0.updateQueue = null, renderExpirationTime$jscomp$0.dependencies = null) : (renderExpirationTime$jscomp$0.childExpirationTime = _instance6.childExpirationTime, renderExpirationTime$jscomp$0.expirationTime = _instance6.expirationTime, renderExpirationTime$jscomp$0.child = _instance6.child, renderExpirationTime$jscomp$0.memoizedProps = _instance6.memoizedProps, renderExpirationTime$jscomp$0.memoizedState = _instance6.memoizedState, renderExpirationTime$jscomp$0.updateQueue = _instance6.updateQueue, type = _instance6.dependencies, renderExpirationTime$jscomp$0.dependencies = null === type ? null : {
                          expirationTime: type.expirationTime,
                          firstContext: type.firstContext,
                          responders: type.responders
                        }), current = current.sibling;
                      }

                      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, current$$1);
                      current$$1 = current$$1.child;
                      break a;
                    }

                    current = current.sibling;
                  }
                }
              } else {
                if (!type) if (current = findFirstSuspended(_instance6), null !== current) {
                  if (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode) {
                    current = current.updateQueue;
                    null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                    current$$1 = current$$1.lastEffect = newProps.lastEffect;
                    null !== current$$1 && (current$$1.nextEffect = null);
                    break;
                  }
                } else now() > newProps.tailExpiration && 1 < renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, false), current$$1.expirationTime = current$$1.childExpirationTime = renderExpirationTime$jscomp$0 - 1);
                newProps.isBackwards ? (_instance6.sibling = current$$1.child, current$$1.child = _instance6) : (current = newProps.last, null !== current ? current.sibling = _instance6 : current$$1.child = _instance6, newProps.last = _instance6);
              }

              if (null !== newProps.tail) {
                0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500);
                current = newProps.tail;
                newProps.rendering = current;
                newProps.tail = current.sibling;
                newProps.lastEffect = current$$1.lastEffect;
                current.sibling = null;
                newProps = suspenseStackCursor.current;
                newProps = type ? newProps & SubtreeSuspenseContextMask | ForceSuspenseFallback : newProps & SubtreeSuspenseContextMask;
                push(suspenseStackCursor, newProps, current$$1);
                current$$1 = current;
                break a;
              }

              break;

            case 20:
              break;

            default:
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
          }

          current$$1 = null;
        }

        newProps = workInProgress;

        if (1 === renderExpirationTime || 1 !== newProps.childExpirationTime) {
          current = 0;

          for (renderExpirationTime$jscomp$0 = newProps.child; null !== renderExpirationTime$jscomp$0;) {
            type = renderExpirationTime$jscomp$0.expirationTime, _instance6 = renderExpirationTime$jscomp$0.childExpirationTime, type > current && (current = type), _instance6 > current && (current = _instance6), renderExpirationTime$jscomp$0 = renderExpirationTime$jscomp$0.sibling;
          }

          newProps.childExpirationTime = current;
        }

        if (null !== current$$1) return current$$1;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 1024) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current$$1 = unwindWork(workInProgress, renderExpirationTime);
        if (null !== current$$1) return current$$1.effectTag &= 1023, current$$1;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 1024);
      }

      current$$1 = workInProgress.sibling;
      if (null !== current$$1) return current$$1;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    null !== rootWithPendingPassiveEffects && scheduleCallback(97, function () {
      flushPassiveEffects();
      return null;
    });
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    flushPassiveEffects();
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    var finishedWork = root.finishedWork,
        expirationTime = root.finishedExpirationTime;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    if (finishedWork === root.current) throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
    root.callbackNode = null;
    root.callbackExpirationTime = 0;
    var updateExpirationTimeBeforeCommit = finishedWork.expirationTime,
        childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
    updateExpirationTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
    root.firstPendingTime = updateExpirationTimeBeforeCommit;
    updateExpirationTimeBeforeCommit < root.lastPendingTime && (root.lastPendingTime = updateExpirationTimeBeforeCommit);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, updateExpirationTimeBeforeCommit = finishedWork.firstEffect) : updateExpirationTimeBeforeCommit = finishedWork : updateExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== updateExpirationTimeBeforeCommit) {
      childExpirationTimeBeforeCommit = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (; null !== nextEffect;) {
            if (0 !== (nextEffect.effectTag & 256)) {
              var current$$1 = nextEffect.alternate,
                  finishedWork$jscomp$0 = nextEffect;

              switch (finishedWork$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork$jscomp$0);
                  break;

                case 1:
                  if (finishedWork$jscomp$0.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork$jscomp$0.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(finishedWork$jscomp$0.elementType === finishedWork$jscomp$0.type ? prevProps : resolveDefaultProps(finishedWork$jscomp$0.type, prevProps), prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break;

                case 3:
                case 5:
                case 6:
                case 4:
                case 17:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (current$$1 = renderPriorityLevel; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current$$1$jscomp$0 = nextEffect.alternate;

              if (null !== current$$1$jscomp$0) {
                var currentRef = current$$1$jscomp$0.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                prevProps = nextEffect, unmountHostComponents(prevProps, current$$1), detachFiber(prevProps);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root.current = finishedWork;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = expirationTime; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;

            if (effectTag$jscomp$0 & 36) {
              var current$$1$jscomp$1 = nextEffect.alternate;
              current$$1$jscomp$0 = nextEffect;
              currentRef = effectTag;

              switch (current$$1$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountLayout, MountLayout, current$$1$jscomp$0);
                  break;

                case 1:
                  var instance$jscomp$0 = current$$1$jscomp$0.stateNode;
                  if (current$$1$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                    var prevProps$jscomp$0 = current$$1$jscomp$0.elementType === current$$1$jscomp$0.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1$jscomp$0.type, current$$1$jscomp$1.memoizedProps);
                    instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                  }
                  var updateQueue = current$$1$jscomp$0.updateQueue;
                  null !== updateQueue && commitUpdateQueue(current$$1$jscomp$0, updateQueue, instance$jscomp$0, currentRef);
                  break;

                case 3:
                  var _updateQueue = current$$1$jscomp$0.updateQueue;

                  if (null !== _updateQueue) {
                    current$$1 = null;
                    if (null !== current$$1$jscomp$0.child) switch (current$$1$jscomp$0.child.tag) {
                      case 5:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                        break;

                      case 1:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                    }
                    commitUpdateQueue(current$$1$jscomp$0, _updateQueue, current$$1, currentRef);
                  }

                  break;

                case 5:
                  break;

                case 6:
                  break;

                case 4:
                  break;

                case 12:
                  break;

                case 13:
                case 19:
                case 17:
                case 20:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            if (effectTag$jscomp$0 & 128) {
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance$jscomp$1 = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    var instanceToUse = instance$jscomp$1;
                    break;

                  default:
                    instanceToUse = instance$jscomp$1;
                }

                "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
              }
            }

            effectTag$jscomp$0 & 512 && (rootDoesHavePassiveEffects = true);
            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = childExpirationTimeBeforeCommit;
    } else root.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsExpirationTime = expirationTime, pendingPassiveEffectsRenderPriority = renderPriorityLevel;else for (nextEffect = updateExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel;
    }
    renderPriorityLevel = root.firstPendingTime;
    0 !== renderPriorityLevel ? (effectTag$jscomp$0 = requestCurrentTime(), effectTag$jscomp$0 = inferPriorityFromExpirationTime(effectTag$jscomp$0, renderPriorityLevel), scheduleCallbackForRoot(root, effectTag$jscomp$0, renderPriorityLevel)) : legacyErrorBoundariesThatAlreadyFailed = null;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    1073741823 === renderPriorityLevel ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function flushPassiveEffects() {
    if (null === rootWithPendingPassiveEffects) return false;
    var root = rootWithPendingPassiveEffects,
        expirationTime = pendingPassiveEffectsExpirationTime,
        renderPriorityLevel = pendingPassiveEffectsRenderPriority;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = 0;
    pendingPassiveEffectsRenderPriority = 90;
    return runWithPriority(97 < renderPriorityLevel ? 97 : renderPriorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
  }

  function flushPassiveEffectsImpl(root) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Cannot flush passive effects while already rendering."));
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork), commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
        }
      } catch (error) {
        if (null === root) throw ReactError(Error("Should be working on an effect."));
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return true;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && scheduleCallbackForRoot(rootFiber, 99, 1073741823);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && scheduleCallbackForRoot(fiber, 99, 1073741823);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime) : workInProgressRootHasPendingPing = true : root.lastPendingTime < suspendedTime || (thenable = root.pingTime, 0 !== thenable && thenable < suspendedTime || (root.pingTime = suspendedTime, root.finishedExpirationTime === suspendedTime && (root.finishedExpirationTime = 0, root.finishedWork = null), thenable = requestCurrentTime(), thenable = inferPriorityFromExpirationTime(thenable, suspendedTime), scheduleCallbackForRoot(root, thenable, suspendedTime)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    retryCache = requestCurrentTime();
    thenable = computeExpirationForFiber(retryCache, boundaryFiber, null);
    retryCache = inferPriorityFromExpirationTime(retryCache, thenable);
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && scheduleCallbackForRoot(boundaryFiber, retryCache, thenable);
  }

  var beginWork$$1 = undefined;

  beginWork$$1 = function beginWork$$1(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current$$1) {
      if (current$$1.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              pushProvider(workInProgress, workInProgress.memoizedProps.value);
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current$$1.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              var renderState = workInProgress.memoizedState;
              null !== renderState && (renderState.rendering = null, renderState.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
    } else didReceiveUpdate = false;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        renderState = renderWithHooks(null, workInProgress, updateExpirationTime, current$$1, renderState, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof renderState && null !== renderState && "function" === typeof renderState.render && undefined === renderState.$$typeof) {
          workInProgress.tag = 1;
          resetHooks();

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== renderState.state && undefined !== renderState.state ? renderState.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          renderState.updater = classComponentUpdater;
          workInProgress.stateNode = renderState;
          renderState._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, renderState, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        renderState = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = readLazyComponentType(renderState);
        workInProgress.type = renderState;
        hasContext = workInProgress.tag = resolveLazyComponentTag(renderState);
        current$$1 = resolveDefaultProps(renderState, current$$1);

        switch (hasContext) {
          case 0:
            workInProgress = updateFunctionComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 1:
            workInProgress = updateClassComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 11:
            workInProgress = updateForwardRef(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 14:
            workInProgress = updateMemoComponent(null, workInProgress, renderState, resolveDefaultProps(renderState.type, current$$1), updateExpirationTime, renderExpirationTime);
            break;

          default:
            throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + renderState + ". Lazy element type must resolve to a class or function."));
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateClassComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === updateExpirationTime) throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        renderState = workInProgress.memoizedState;
        renderState = null !== renderState ? renderState.element : null;
        processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === renderState ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateForwardRef(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          renderState = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = renderState.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = is(oldValue, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === renderState.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldValue = workInProgress.child, null !== oldValue && (oldValue.return = workInProgress); null !== oldValue;) {
              var list = oldValue.dependencies;

              if (null !== list) {
                getDerivedStateFromProps = oldValue.child;

                for (var dependency = list.firstContext; null !== dependency;) {
                  if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                    1 === oldValue.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(oldValue, dependency));
                    oldValue.expirationTime < renderExpirationTime && (oldValue.expirationTime = renderExpirationTime);
                    dependency = oldValue.alternate;
                    null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                    scheduleWorkOnParentPath(oldValue.return, renderExpirationTime);
                    list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                    break;
                  }

                  dependency = dependency.next;
                }
              } else getDerivedStateFromProps = 10 === oldValue.tag ? oldValue.type === workInProgress.type ? null : oldValue.child : oldValue.child;

              if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = oldValue;else for (getDerivedStateFromProps = oldValue; null !== getDerivedStateFromProps;) {
                if (getDerivedStateFromProps === workInProgress) {
                  getDerivedStateFromProps = null;
                  break;
                }

                oldValue = getDerivedStateFromProps.sibling;

                if (null !== oldValue) {
                  oldValue.return = getDerivedStateFromProps.return;
                  getDerivedStateFromProps = oldValue;
                  break;
                }

                getDerivedStateFromProps = getDerivedStateFromProps.return;
              }
              oldValue = getDerivedStateFromProps;
            }
          }

          reconcileChildren(current$$1, workInProgress, renderState.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return renderState = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), renderState = readContext(renderState, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(renderState), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return renderState = workInProgress.type, hasContext = resolveDefaultProps(renderState, workInProgress.pendingProps), hasContext = resolveDefaultProps(renderState.type, hasContext), updateMemoComponent(current$$1, workInProgress, renderState, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
    }

    throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, undefined, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = this.firstBatch = null;
    this.pingTime = this.lastPendingTime = this.firstPendingTime = this.callbackExpirationTime = 0;
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (undefined === fiber) {
      if ("function" === typeof component.render) throw ReactError(Error("Unable to find node on an unmounted component."));
      throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    current$$1 = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (2 !== isFiberMountedImpl(parentComponent) || 1 !== parentComponent.tag) throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    suspenseConfig = createUpdate(current$$1, suspenseConfig);
    suspenseConfig.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (suspenseConfig.callback = container);
    enqueueUpdate(currentTime, suspenseConfig);
    scheduleUpdateOnFiber(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    throw ReactError(Error("getInspectorDataForViewTag() is not available in production"));
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    (executionContext & 49) === NoContext && (flushPendingDiscreteUpdates(), flushPassiveEffects());
  };

  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance && !maybeInstance.canonical) {
            var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
            maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
            null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance),
    findNodeHandle: findNodeHandle,
    dispatchCommand: function dispatchCommand(handle, command, args) {
      null != handle._nativeTag && ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
    },
    setNativeProps: function setNativeProps(handle, nativeProps) {
      null != handle._nativeTag && (nativeProps = diffProperties(null, emptyObject, nativeProps, handle.viewConfig.validAttributes), null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(handle._nativeTag, handle.viewConfig.uiViewClassName, nativeProps));
    },
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(containerTag, 0, false);
        var uninitializedFiber = createFiber(3, null, null, 0);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureInWindow: function measureInWindow(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance && !maybeInstance.canonical) {
              var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
              maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
              null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance),
      computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
        return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
      }
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    }));
  })({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.8.6",
    rendererPackageName: "react-native-renderer"
  });

  var ReactNativeRenderer$2 = {
    default: ReactNativeRenderer
  },
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3.default || ReactNativeRenderer$3;
},14443,[14344,14446,14566,10297,14575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  _$$_REQUIRE(_dependencyMap[0]);
},14446,[10120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  if (global.self === undefined) {
    global.self = global;
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }
},14449,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _$$_REQUIRE(_dependencyMap[0]);

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }
},14452,[10054]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[1]);

    ErrorUtils.setGlobalHandler(handleError);
  }
},14455,[10141,10051]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[1]);

  var isNativeFunction = _$$_REQUIRE(_dependencyMap[2]);

  var construct = _$$_REQUIRE(_dependencyMap[3]);

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  module.exports = _wrapNativeSuper;
},14458,[14377,14389,14461,14464]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  module.exports = _isNativeFunction;
},14461,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      module.exports = _construct = Reflect.construct;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  module.exports = _construct;
},14464,[14389]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException: function reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException: function reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {
      NativeModule.updateExceptionMessage(message, stack, exceptionId);
    },
    dismissRedbox: function dismissRedbox() {
      if (NativeModule.dismissRedbox) {
        NativeModule.dismissRedbox();
      }
    },
    reportException: function reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }

      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = ExceptionsManager;
  exports.default = _default;
},14467,[14308,14341,10066]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('Promise', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
},14470,[14473,10159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[0]);

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},14473,[10084]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;

  Promise.prototype['finally'] = function (f) {
    return this.then(function (value) {
      return Promise.resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return Promise.resolve(f()).then(function () {
        throw err;
      });
    });
  };
},14476,[10168]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;
    return _$$_REQUIRE(_dependencyMap[1]);
  });
},14479,[14473,14482]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === undefined) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},14482,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var _require = _$$_REQUIRE(_dependencyMap[0]),
        polyfillGlobal = _require.polyfillGlobal;

    var defineLazyTimer = function defineLazyTimer(name) {
      polyfillGlobal(name, function () {
        return _$$_REQUIRE(_dependencyMap[1])[name];
      });
    };

    defineLazyTimer('setTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('setImmediate');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('clearInterval');
    defineLazyTimer('clearImmediate');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
  }
},14485,[14473,10063]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('Timing');

  exports.default = _default;
},14488,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var performance = _$$_REQUIRE(_dependencyMap[0]);

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},14491,[14494]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _$$_REQUIRE(_dependencyMap[0]);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},14494,[14497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},14497,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

  polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[1]);
  });
  polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[2]);
  });
  polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[3]).fetch;
  });
  polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Headers;
  });
  polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Request;
  });
  polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[3]).Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[5]);
  });
  polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[6]);
  });
  polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[7]);
  });
  polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URL;
  });
  polyfillGlobal('URLSearchParams', function () {
    return _$$_REQUIRE(_dependencyMap[8]).URLSearchParams;
  });
  polyfillGlobal('AbortController', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortController;
  });
  polyfillGlobal('AbortSignal', function () {
    return _$$_REQUIRE(_dependencyMap[9]).AbortSignal;
  });
},14500,[14473,10177,10219,10222,10228,10210,10234,10237,10240,14521]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('BlobModule');

  exports.default = _default;
},14503,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var privateData = new WeakMap();
  var wrappers = new WeakMap();

  function pd(event) {
    var retv = privateData.get(event);

    if (retv === null) {
      throw new TypeError("'this' is expected an Event object, but got " + JSON.stringify(event));
    }

    return retv;
  }

  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }

      return;
    }

    if (!data.event.cancelable) {
      return;
    }

    data.canceled = true;

    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget: eventTarget,
      event: event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });
    var keys = Object.keys(event);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  Event.prototype = {
    get type() {
      return pd(this).event.type;
    },

    get target() {
      return pd(this).eventTarget;
    },

    get currentTarget() {
      return pd(this).currentTarget;
    },

    composedPath: function composedPath() {
      var currentTarget = pd(this).currentTarget;

      if (currentTarget == null) {
        return [];
      }

      return [currentTarget];
    },

    get NONE() {
      return 0;
    },

    get CAPTURING_PHASE() {
      return 1;
    },

    get AT_TARGET() {
      return 2;
    },

    get BUBBLING_PHASE() {
      return 3;
    },

    get eventPhase() {
      return pd(this).eventPhase;
    },

    stopPropagation: function stopPropagation() {
      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;

      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },

    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },

    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },

    preventDefault: function preventDefault() {
      setCancelFlag(pd(this));
    },

    get defaultPrevented() {
      return pd(this).canceled;
    },

    get composed() {
      return Boolean(pd(this).event.composed);
    },

    get timeStamp() {
      return pd(this).timeStamp;
    },

    get srcElement() {
      return pd(this).eventTarget;
    },

    get cancelBubble() {
      return pd(this).stopped;
    },

    set cancelBubble(value) {
      if (!value) {
        return;
      }

      var data = pd(this);
      data.stopped = true;

      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },

    get returnValue() {
      return !pd(this).canceled;
    },

    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },

    initEvent: function initEvent() {}
  };
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    wrappers.set(window.Event.prototype, Event);
  }

  function defineRedirectDescriptor(key) {
    return {
      get: function get() {
        return pd(this).event[key];
      },
      set: function set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineCallDescriptor(key) {
    return {
      value: function value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);

    if (keys.length === 0) {
      return BaseEvent;
    }

    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }

    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }

    return CustomEvent;
  }

  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }

    var wrapper = wrappers.get(proto);

    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }

    return wrapper;
  }

  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  var listenersMap = new WeakMap();
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  function isObject(x) {
    return x !== null && typeof x === "object";
  }

  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);

    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }

    return listeners;
  }

  function defineEventAttributeDescriptor(eventName) {
    return {
      get: function get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }

          node = node.next;
        }

        return null;
      },
      set: function set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null;
        }

        var listeners = getListeners(this);
        var prev = null;
        var node = listeners.get(eventName);

        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }

          node = node.next;
        }

        if (listener !== null) {
          var newNode = {
            listener: listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };

          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, "on" + eventName, defineEventAttributeDescriptor(eventName));
  }

  function defineCustomEventTarget(eventNames) {
    function CustomEventTarget() {
      EventTarget.call(this);
    }

    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });

    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }

    return CustomEventTarget;
  }

  function EventTarget() {
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }

    if (arguments.length > 0) {
      var types = new Array(arguments.length);

      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }

      return defineCustomEventTarget(types);
    }

    throw new TypeError("Cannot call a class as a function");
  }

  EventTarget.prototype = {
    addEventListener: function addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }

      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener: listener,
        listenerType: listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };
      var node = listeners.get(eventName);

      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      var prev = null;

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          return;
        }

        prev = node;
        node = node.next;
      }

      prev.next = newNode;
    },
    removeEventListener: function removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }

      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }

          return;
        }

        prev = node;
        node = node.next;
      }
    },
    dispatchEvent: function dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);

      if (node == null) {
        return true;
      }

      var wrappedEvent = wrapEvent(this, event);
      var prev = null;

      while (node != null) {
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        if (isStopped(wrappedEvent)) {
          break;
        }

        node = node.next;
      }

      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }

  exports.defineEventAttribute = defineEventAttribute;
  exports.EventTarget = EventTarget;
  exports.default = EventTarget;
  module.exports = EventTarget;
  module.exports.EventTarget = module.exports["default"] = EventTarget;
  module.exports.defineEventAttribute = defineEventAttribute;
},14506,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Networking');

  exports.default = _default;
},14509,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    exports.DOMException = self.DOMException;

    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };

      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }

    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.onabort = function () {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }

    fetch.polyfill = true;

    if (!self.fetch) {
      self.fetch = fetch;
      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;
    }

    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},14512,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('WebSocketModule');

  exports.default = _default;
},14515,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('FileReaderModule');

  exports.default = _default;
},14518,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var eventTargetShim = _$$_REQUIRE(_dependencyMap[5]);

  var AbortSignal = function (_eventTargetShim$Even) {
    _inherits(AbortSignal, _eventTargetShim$Even);

    function AbortSignal() {
      var _this;

      _classCallCheck(this, AbortSignal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AbortSignal).call(this));
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }

    _createClass(AbortSignal, [{
      key: "aborted",
      get: function get() {
        var aborted = abortedFlags.get(this);

        if (typeof aborted !== "boolean") {
          throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got " + (this === null ? "null" : typeof this));
        }

        return aborted;
      }
    }]);

    return AbortSignal;
  }(eventTargetShim.EventTarget);

  eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");

  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }

  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }

    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }

  var abortedFlags = new WeakMap();
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") === "symbol") {
    Object.defineProperty(AbortSignal.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
      configurable: true,
      value: "AbortSignal"
    });
  }

  var AbortController = function () {
    function AbortController() {
      _classCallCheck(this, AbortController);

      signals.set(this, createAbortSignal());
    }

    _createClass(AbortController, [{
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }, {
      key: "signal",
      get: function get() {
        return getSignal(this);
      }
    }]);

    return AbortController;
  }();

  var signals = new WeakMap();

  function getSignal(controller) {
    var signal = signals.get(controller);

    if (signal == null) {
      throw new TypeError("Expected 'this' to be an 'AbortController' object, but got " + (controller === null ? "null" : typeof controller));
    }

    return signal;
  }

  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });

  if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") === "symbol") {
    Object.defineProperty(AbortController.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
      configurable: true,
      value: "AbortController"
    });
  }

  exports.AbortController = AbortController;
  exports.AbortSignal = AbortSignal;
  exports.default = AbortController;
  module.exports = AbortController;
  module.exports.AbortController = module.exports["default"] = AbortController;
  module.exports.AbortSignal = AbortSignal;
},14521,[14320,14323,14371,14377,14386,14506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.alert) {
    global.alert = function (text) {
      _$$_REQUIRE(_dependencyMap[0]).alert('Alert', '' + text);
    };
  }
},14524,[10243]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('DialogManagerAndroid');

  exports.default = _default;
},14527,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeDialogManagerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function emptyCallback() {}

  module.exports = {
    alertWithArgs: function alertWithArgs(args, callback) {
      if (!_NativeDialogManagerAndroid.default) {
        return;
      }

      _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
  };
},14530,[14305,14527]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty;

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
},14533,[14473]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.RN$Bridgeless) {
    var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

    BatchedBridge.registerLazyCallableModule('Systrace', function () {
      return _$$_REQUIRE(_dependencyMap[1]);
    });
    BatchedBridge.registerLazyCallableModule('JSTimers', function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
    BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
      return _$$_REQUIRE(_dependencyMap[3]);
    });
    BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
      return _$$_REQUIRE(_dependencyMap[4]);
    });
    BatchedBridge.registerLazyCallableModule('RCTLog', function () {
      return _$$_REQUIRE(_dependencyMap[5]);
    });
    BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
      return _$$_REQUIRE(_dependencyMap[6]);
    });
    BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
      return _$$_REQUIRE(_dependencyMap[7]);
    });
    BatchedBridge.registerLazyCallableModule('GlobalPerformanceLogger', function () {
      return _$$_REQUIRE(_dependencyMap[8]);
    });
    BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
      return _$$_REQUIRE(_dependencyMap[9]);
    });
    {
      BatchedBridge.registerCallableModule('HMRClient', _$$_REQUIRE(_dependencyMap[10]));
    }
  }
},14536,[10045,10054,10063,14539,10261,10264,10087,10267,14548,10276,14557]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeHeapCapture = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      if (_NativeHeapCapture.default) {
        _NativeHeapCapture.default.captureComplete(path, error);
      }
    }
  };
  module.exports = HeapCapture;
},14539,[14305,14542]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('HeapCapture');

  exports.default = _default;
},14542,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('JSCSamplingProfiler');

  exports.default = _default;
},14545,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createPerformanceLogger = _$$_REQUIRE(_dependencyMap[0]);

  var GlobalPerformanceLogger = createPerformanceLogger();
  module.exports = GlobalPerformanceLogger;
},14548,[14551]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _$$_REQUIRE(_dependencyMap[0]);

  var infoLog = _$$_REQUIRE(_dependencyMap[1]);

  var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || _$$_REQUIRE(_dependencyMap[2]);

  var _cookies = {};
  var PRINT_TO_CONSOLE = false;

  function createPerformanceLogger() {
    var result = {
      _timespans: {},
      _extras: {},
      _points: {},
      addTimespan: function addTimespan(key, lengthInMs, description) {
        if (this._timespans[key]) {
          return;
        }

        this._timespans[key] = {
          description: description,
          totalTime: lengthInMs
        };
      },
      startTimespan: function startTimespan(key, description) {
        if (this._timespans[key]) {
          return;
        }

        this._timespans[key] = {
          description: description,
          startTime: performanceNow()
        };
        _cookies[key] = Systrace.beginAsyncEvent(key);
      },
      stopTimespan: function stopTimespan(key) {
        var timespan = this._timespans[key];

        if (!timespan || !timespan.startTime) {
          return;
        }

        if (timespan.endTime) {
          return;
        }

        timespan.endTime = performanceNow();
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        Systrace.endAsyncEvent(key, _cookies[key]);
        delete _cookies[key];
      },
      clear: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
      },
      clearCompleted: function clearCompleted() {
        for (var _key in this._timespans) {
          if (this._timespans[_key].totalTime) {
            delete this._timespans[_key];
          }
        }

        this._extras = {};
        this._points = {};
      },
      clearExceptTimespans: function clearExceptTimespans(keys) {
        this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {
          if (keys.indexOf(key) !== -1) {
            previous[key] = this._timespans[key];
          }

          return previous;
        }, {});
        this._extras = {};
        this._points = {};
      },
      currentTimestamp: function currentTimestamp() {
        return performanceNow();
      },
      getTimespans: function getTimespans() {
        return this._timespans;
      },
      hasTimespan: function hasTimespan(key) {
        return !!this._timespans[key];
      },
      logTimespans: function logTimespans() {},
      addTimespans: function addTimespans(newTimespans, labels) {
        for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
          var label = labels[ii / 2];
          this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
        }
      },
      setExtra: function setExtra(key, value) {
        if (this._extras[key]) {
          return;
        }

        this._extras[key] = value;
      },
      getExtras: function getExtras() {
        return this._extras;
      },
      removeExtra: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      },
      logExtras: function logExtras() {},
      markPoint: function markPoint(key, timestamp) {
        var _timestamp;

        if (this._points[key]) {
          return;
        }

        this._points[key] = (_timestamp = timestamp) != null ? _timestamp : performanceNow();
      },
      getPoints: function getPoints() {
        return this._points;
      },
      logPoints: function logPoints() {},
      logEverything: function logEverything() {
        this.logTimespans();
        this.logExtras();
        this.logPoints();
      }
    };
    return result;
  }

  module.exports = createPerformanceLogger;
},14551,[10054,10273,14491]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('JSDevSupport');

  exports.default = _default;
},14554,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HMRClientProdShim = {
    setup: function setup() {},
    enable: function enable() {
      console.error("Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?");
    },
    disable: function disable() {},
    registerBundle: function registerBundle() {},
    log: function log() {}
  };
  module.exports = HMRClientProdShim;
},14557,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  }

  global.__fetchSegment = __fetchSegment;

  function __getSegment(segmentId, options, callback) {
    var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

    if (!SegmentFetcher.getSegment) {
      throw new Error('SegmentFetcher.getSegment must be defined');
    }

    SegmentFetcher.getSegment(segmentId, options, function (errorObject, path) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null, path);
    });
  }

  global.__getSegment = __getSegment;
},14560,[14563]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('SegmentFetcher');

  exports.default = _default;
},14563,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BatchedBridge() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },

    get ExceptionsManager() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },

    get RCTEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },

    get ReactNativeViewConfigRegistry() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },

    get TextInputState() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },

    get deepDiffer() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },

    get deepFreezeAndThrowOnMutationInDev() {
      return _$$_REQUIRE(_dependencyMap[8]);
    },

    get flattenStyle() {
      return _$$_REQUIRE(_dependencyMap[9]);
    },

    get ReactFiberErrorDialog() {
      return _$$_REQUIRE(_dependencyMap[10]);
    }

  };
},14566,[10045,10141,10066,10282,14569,10285,10279,10288,10057,10291,14572]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();

  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }

    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  exports.register = function (name, callback) {
    invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    viewConfigCallbacks.set(name, callback);
    return name;
  };

  exports.get = function (name) {
    var viewConfig;

    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);

      if (typeof callback !== 'function') {
        invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }

      viewConfigCallbacks.set(name, null);
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
    } else {
      viewConfig = viewConfigs.get(name);
    }

    invariant(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},14569,[14326]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

  function showErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;
    var errorToHandle;

    if (error instanceof Error) {
      errorToHandle = error;
    } else if (typeof error === 'string') {
      errorToHandle = new _ExceptionsManager.SyntheticError(error);
    } else {
      errorToHandle = new _ExceptionsManager.SyntheticError('Unspecified error');
    }

    try {
      errorToHandle.componentStack = componentStack;
    } catch (e) {}

    (0, _ExceptionsManager.handleException)(errorToHandle, false);
    return false;
  }

  module.exports = {
    showErrorDialog: showErrorDialog
  };
},14572,[10141]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},14575,[14578]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.15.0
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _d = undefined,
      e = undefined,
      g = undefined,
      m = undefined,
      n = undefined;
  exports.unstable_now = undefined;
  exports.unstable_forceFrameRate = undefined;

  if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var p = null,
        q = null,
        r = function r() {
      if (null !== p) try {
        var a = exports.unstable_now();
        p(true, a);
        p = null;
      } catch (b) {
        throw setTimeout(r, 0), b;
      }
    };

    exports.unstable_now = function () {
      return Date.now();
    };

    _d = function d(a) {
      null !== p ? setTimeout(_d, 0, a) : (p = a, setTimeout(r, 0));
    };

    e = function e(a, b) {
      q = setTimeout(a, b);
    };

    g = function g() {
      clearTimeout(q);
    };

    m = function m() {
      return false;
    };

    n = exports.unstable_forceFrameRate = function () {};
  } else {
    var t = window.performance,
        u = window.Date,
        v = window.setTimeout,
        w = window.clearTimeout,
        x = window.requestAnimationFrame,
        y = window.cancelAnimationFrame;
    "undefined" !== typeof console && ("function" !== typeof x && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof y && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));
    exports.unstable_now = "object" === typeof t && "function" === typeof t.now ? function () {
      return t.now();
    } : function () {
      return u.now();
    };
    var z = false,
        A = null,
        B = -1,
        C = -1,
        D = 33.33,
        E = -1,
        F = -1,
        G = 0,
        H = false;

    m = function m() {
      return exports.unstable_now() >= G;
    };

    n = function n() {};

    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : 0 < a ? (D = Math.floor(1E3 / a), H = true) : (D = 33.33, H = false);
    };

    var J = function J() {
      if (null !== A) {
        var a = exports.unstable_now(),
            b = 0 < G - a;

        try {
          A(b, a) || (A = null);
        } catch (c) {
          throw I.postMessage(null), c;
        }
      }
    },
        K = new MessageChannel(),
        I = K.port2;

    K.port1.onmessage = J;

    var L = function L(a) {
      if (null === A) F = E = -1, z = false;else {
        z = true;
        x(function (a) {
          w(B);
          L(a);
        });

        var b = function b() {
          G = exports.unstable_now() + D / 2;
          J();
          B = v(b, 3 * D);
        };

        B = v(b, 3 * D);

        if (-1 !== E && .1 < a - E) {
          var c = a - E;
          !H && -1 !== F && c < D && F < D && (D = c < F ? F : c, 8.33 > D && (D = 8.33));
          F = c;
        }

        E = a;
        G = a + D;
        I.postMessage(null);
      }
    };

    _d = function _d(a) {
      A = a;
      z || (z = true, x(function (a) {
        L(a);
      }));
    };

    e = function e(a, b) {
      C = v(function () {
        a(exports.unstable_now());
      }, b);
    };

    g = function g() {
      w(C);
      C = -1;
    };
  }

  var M = null,
      N = null,
      O = null,
      P = 3,
      Q = false,
      R = false,
      S = false;

  function T(a, b) {
    var c = a.next;
    if (c === a) M = null;else {
      a === M && (M = c);
      var f = a.previous;
      f.next = c;
      c.previous = f;
    }
    a.next = a.previous = null;
    c = a.callback;
    f = P;
    var l = O;
    P = a.priorityLevel;
    O = a;

    try {
      var h = a.expirationTime <= b;

      switch (P) {
        case 1:
          var k = c(h);
          break;

        case 2:
          k = c(h);
          break;

        case 3:
          k = c(h);
          break;

        case 4:
          k = c(h);
          break;

        case 5:
          k = c(h);
      }
    } catch (Z) {
      throw Z;
    } finally {
      P = f, O = l;
    }

    if ("function" === typeof k) if (b = a.expirationTime, a.callback = k, null === M) M = a.next = a.previous = a;else {
      k = null;
      h = M;

      do {
        if (b <= h.expirationTime) {
          k = h;
          break;
        }

        h = h.next;
      } while (h !== M);

      null === k ? k = M : k === M && (M = a);
      b = k.previous;
      b.next = k.previous = a;
      a.next = k;
      a.previous = b;
    }
  }

  function U(a) {
    if (null !== N && N.startTime <= a) {
      do {
        var b = N,
            c = b.next;
        if (b === c) N = null;else {
          N = c;
          var f = b.previous;
          f.next = c;
          c.previous = f;
        }
        b.next = b.previous = null;
        V(b, b.expirationTime);
      } while (null !== N && N.startTime <= a);
    }
  }

  function W(a) {
    S = false;
    U(a);
    R || (null !== M ? (R = true, _d(X)) : null !== N && e(W, N.startTime - a));
  }

  function X(a, b) {
    R = false;
    S && (S = false, g());
    U(b);
    Q = true;

    try {
      if (!a) for (; null !== M && M.expirationTime <= b;) {
        T(M, b), b = exports.unstable_now(), U(b);
      } else if (null !== M) {
        do {
          T(M, b), b = exports.unstable_now(), U(b);
        } while (null !== M && !m());
      }
      if (null !== M) return true;
      null !== N && e(W, N.startTime - b);
      return false;
    } finally {
      Q = false;
    }
  }

  function Y(a) {
    switch (a) {
      case 1:
        return -1;

      case 2:
        return 250;

      case 5:
        return 1073741823;

      case 4:
        return 1E4;

      default:
        return 5E3;
    }
  }

  function V(a, b) {
    if (null === M) M = a.next = a.previous = a;else {
      var c = null,
          f = M;

      do {
        if (b < f.expirationTime) {
          c = f;
          break;
        }

        f = f.next;
      } while (f !== M);

      null === c ? c = M : c === M && (M = a);
      b = c.previous;
      b.next = c.previous = a;
      a.next = c;
      a.previous = b;
    }
  }

  var aa = n;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_NormalPriority = 3;
  exports.unstable_IdlePriority = 5;
  exports.unstable_LowPriority = 4;

  exports.unstable_runWithPriority = function (a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;

      default:
        a = 3;
    }

    var c = P;
    P = a;

    try {
      return b();
    } finally {
      P = c;
    }
  };

  exports.unstable_next = function (a) {
    switch (P) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;

      default:
        b = P;
    }

    var c = P;
    P = b;

    try {
      return a();
    } finally {
      P = c;
    }
  };

  exports.unstable_scheduleCallback = function (a, b, c) {
    var f = exports.unstable_now();

    if ("object" === typeof c && null !== c) {
      var l = c.delay;
      l = "number" === typeof l && 0 < l ? f + l : f;
      c = "number" === typeof c.timeout ? c.timeout : Y(a);
    } else c = Y(a), l = f;

    c = l + c;
    a = {
      callback: b,
      priorityLevel: a,
      startTime: l,
      expirationTime: c,
      next: null,
      previous: null
    };

    if (l > f) {
      c = l;
      if (null === N) N = a.next = a.previous = a;else {
        b = null;
        var h = N;

        do {
          if (c < h.startTime) {
            b = h;
            break;
          }

          h = h.next;
        } while (h !== N);

        null === b ? b = N : b === N && (N = a);
        c = b.previous;
        c.next = b.previous = a;
        a.next = b;
        a.previous = c;
      }
      null === M && N === a && (S ? g() : S = true, e(W, l - f));
    } else V(a, c), R || Q || (R = true, _d(X));

    return a;
  };

  exports.unstable_cancelCallback = function (a) {
    var b = a.next;

    if (null !== b) {
      if (a === b) a === M ? M = null : a === N && (N = null);else {
        a === M ? M = b : a === N && (N = b);
        var c = a.previous;
        c.next = b;
        b.previous = c;
      }
      a.next = a.previous = null;
    }
  };

  exports.unstable_wrapCallback = function (a) {
    var b = P;
    return function () {
      var c = P;
      P = b;

      try {
        return a.apply(this, arguments);
      } finally {
        P = c;
      }
    };
  };

  exports.unstable_getCurrentPriorityLevel = function () {
    return P;
  };

  exports.unstable_shouldYield = function () {
    var a = exports.unstable_now();
    U(a);
    return null !== O && null !== M && M.startTime <= a && M.expirationTime < O.expirationTime || m();
  };

  exports.unstable_requestPaint = aa;

  exports.unstable_continueExecution = function () {
    R || Q || (R = true, _d(X));
  };

  exports.unstable_pauseExecution = function () {};

  exports.unstable_getFirstCallbackNode = function () {
    return M;
  };
},14578,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeViewViewConfigAndroid = {
    uiViewClassName: 'RCTView',
    bubblingEventTypes: {
      topSelect: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        }
      }
    },
    directEventTypes: {
      topClick: {
        registrationName: 'onClick'
      },
      topContentSizeChange: {
        registrationName: 'onContentSizeChange'
      },
      topLoadingError: {
        registrationName: 'onLoadingError'
      },
      topLoadingFinish: {
        registrationName: 'onLoadingFinish'
      },
      topLoadingStart: {
        registrationName: 'onLoadingStart'
      },
      topMessage: {
        registrationName: 'onMessage'
      },
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      }
    },
    validAttributes: {
      hasTVPreferredFocus: true,
      focusable: true,
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true,
      nextFocusDown: true,
      nextFocusForward: true,
      nextFocusLeft: true,
      nextFocusRight: true,
      nextFocusUp: true
    }
  };
  module.exports = ReactNativeViewViewConfigAndroid;
},14581,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _verifyComponentAttributeEquivalence = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[4]);

  function registerGeneratedViewConfig(componentName, viewConfig) {
    var mergedViewConfig = {
      uiViewClassName: componentName,
      Commands: {},
      bubblingEventTypes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.bubblingEventTypes, viewConfig.bubblingEventTypes || {}),
      directEventTypes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.directEventTypes, viewConfig.directEventTypes || {}),
      validAttributes: (0, _objectSpread2.default)({}, ReactNativeViewViewConfig.validAttributes, viewConfig.validAttributes || {})
    };
    ReactNativeViewConfigRegistry.register(componentName, function () {
      (0, _verifyComponentAttributeEquivalence.default)(componentName, mergedViewConfig);
      return mergedViewConfig;
    });
  }

  module.exports = registerGeneratedViewConfig;
},14584,[14305,14314,14587,14569,14590]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.lefthandObjectDiff = lefthandObjectDiff;
  exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
  exports.stringifyViewConfig = stringifyViewConfig;
  exports.default = undefined;

  var _ReactNativeViewViewConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var getNativeComponentAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var IGNORED_KEYS = ['transform', 'hitSlop'];

  function verifyComponentAttributeEquivalence(componentName, config) {}

  function lefthandObjectDiff(leftObj, rightObj) {
    var differentKeys = {};

    function compare(leftItem, rightItem, key) {
      if (typeof leftItem !== typeof rightItem && leftItem != null) {
        differentKeys[key] = rightItem;
        return;
      }

      if (typeof leftItem === 'object') {
        var objDiff = lefthandObjectDiff(leftItem, rightItem);

        if (Object.keys(objDiff).length > 1) {
          differentKeys[key] = objDiff;
        }

        return;
      }

      if (leftItem !== rightItem) {
        differentKeys[key] = rightItem;
        return;
      }
    }

    for (var key in leftObj) {
      if (IGNORED_KEYS.includes(key)) {
        continue;
      }

      if (!rightObj) {
        differentKeys[key] = {};
      } else if (leftObj.hasOwnProperty(key)) {
        compare(leftObj[key], rightObj[key], key);
      }
    }

    return differentKeys;
  }

  function getConfigWithoutViewProps(viewConfig, propName) {
    if (!viewConfig[propName]) {
      return {};
    }

    return Object.keys(viewConfig[propName]).filter(function (prop) {
      return !_ReactNativeViewViewConfig.default[propName][prop];
    }).reduce(function (obj, prop) {
      obj[prop] = viewConfig[propName][prop];
      return obj;
    }, {});
  }

  function stringifyViewConfig(viewConfig) {
    return JSON.stringify(viewConfig, function (key, val) {
      if (typeof val === 'function') {
        return "\u0192 " + val.name;
      }

      return val;
    }, 2);
  }

  var _default = verifyComponentAttributeEquivalence;
  exports.default = _default;
},14587,[14305,14590,14593]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ReactNativeViewViewConfigAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ReactNativeViewConfig = {
    uiViewClassName: 'RCTView',
    baseModuleName: null,
    Manager: 'ViewManager',
    Commands: {},
    Constants: {},
    bubblingEventTypes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.bubblingEventTypes, {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topPress: {
        phasedRegistrationNames: {
          bubbled: 'onPress',
          captured: 'onPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      },
      topTouchStart: {
        phasedRegistrationNames: {
          bubbled: 'onTouchStart',
          captured: 'onTouchStartCapture'
        }
      }
    }),
    directEventTypes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.directEventTypes, {
      topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
      },
      topAccessibilityEscape: {
        registrationName: 'onAccessibilityEscape'
      },
      topAccessibilityTap: {
        registrationName: 'onAccessibilityTap'
      },
      topLayout: {
        registrationName: 'onLayout'
      },
      topMagicTap: {
        registrationName: 'onMagicTap'
      },
      onGestureHandlerEvent: {
        registrationName: 'onGestureHandlerEvent'
      },
      onGestureHandlerStateChange: {
        registrationName: 'onGestureHandlerStateChange'
      }
    }),
    validAttributes: (0, _objectSpread2.default)({}, _ReactNativeViewViewConfigAndroid.default.validAttributes, {
      accessibilityActions: true,
      accessibilityElementsHidden: true,
      accessibilityHint: true,
      accessibilityIgnoresInvertColors: true,
      accessibilityLabel: true,
      accessibilityLiveRegion: true,
      accessibilityRole: true,
      accessibilityStates: true,
      accessibilityState: true,
      accessibilityViewIsModal: true,
      accessible: true,
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      aspectRatio: true,
      backfaceVisibility: true,
      backgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderBottomColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderBottomWidth: true,
      borderColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderEndColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderEndWidth: true,
      borderLeftColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderLeftWidth: true,
      borderRadius: true,
      borderRightColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderRightWidth: true,
      borderStartColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderStartWidth: true,
      borderStyle: true,
      borderTopColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      borderTopWidth: true,
      borderWidth: true,
      bottom: true,
      clickable: true,
      collapsable: true,
      direction: true,
      display: true,
      elevation: true,
      end: true,
      flex: true,
      flexBasis: true,
      flexDirection: true,
      flexGrow: true,
      flexShrink: true,
      flexWrap: true,
      height: true,
      hitSlop: {
        diff: _$$_REQUIRE(_dependencyMap[4])
      },
      importantForAccessibility: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      nativeID: true,
      needsOffscreenAlphaCompositing: true,
      onAccessibilityAction: true,
      onAccessibilityEscape: true,
      onAccessibilityTap: true,
      onLayout: true,
      onMagicTap: true,
      opacity: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      pointerEvents: true,
      position: true,
      removeClippedSubviews: true,
      renderToHardwareTextureAndroid: true,
      right: true,
      rotation: true,
      scaleX: true,
      scaleY: true,
      shadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3])
      },
      shadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[5])
      },
      shadowOpacity: true,
      shadowRadius: true,
      shouldRasterizeIOS: true,
      start: true,
      style: {
        alignContent: true,
        alignItems: true,
        alignSelf: true,
        aspectRatio: true,
        backfaceVisibility: true,
        backgroundColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderBottomColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderBottomEndRadius: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderBottomStartRadius: true,
        borderBottomWidth: true,
        borderColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderEndColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderEndWidth: true,
        borderLeftColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderLeftWidth: true,
        borderRadius: true,
        borderRightColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderRightWidth: true,
        borderStartColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderStartWidth: true,
        borderStyle: true,
        borderTopColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        borderTopEndRadius: true,
        borderTopLeftRadius: true,
        borderTopRightRadius: true,
        borderTopStartRadius: true,
        borderTopWidth: true,
        borderWidth: true,
        bottom: true,
        color: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        decomposedMatrix: true,
        direction: true,
        display: true,
        elevation: true,
        end: true,
        flex: true,
        flexBasis: true,
        flexDirection: true,
        flexGrow: true,
        flexShrink: true,
        flexWrap: true,
        fontFamily: true,
        fontSize: true,
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        height: true,
        includeFontPadding: true,
        justifyContent: true,
        left: true,
        letterSpacing: true,
        lineHeight: true,
        margin: true,
        marginBottom: true,
        marginEnd: true,
        marginHorizontal: true,
        marginLeft: true,
        marginRight: true,
        marginStart: true,
        marginTop: true,
        marginVertical: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        opacity: true,
        overflow: true,
        overlayColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        padding: true,
        paddingBottom: true,
        paddingEnd: true,
        paddingHorizontal: true,
        paddingLeft: true,
        paddingRight: true,
        paddingStart: true,
        paddingTop: true,
        paddingVertical: true,
        position: true,
        resizeMode: true,
        right: true,
        rotation: true,
        scaleX: true,
        scaleY: true,
        shadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        shadowOffset: {
          diff: _$$_REQUIRE(_dependencyMap[5])
        },
        shadowOpacity: true,
        shadowRadius: true,
        start: true,
        textAlign: true,
        textAlignVertical: true,
        textDecorationColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        textDecorationLine: true,
        textDecorationStyle: true,
        textShadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        textShadowOffset: true,
        textShadowRadius: true,
        textTransform: true,
        tintColor: {
          process: _$$_REQUIRE(_dependencyMap[3])
        },
        top: true,
        transform: {
          diff: _$$_REQUIRE(_dependencyMap[6])
        },
        transformMatrix: true,
        translateX: true,
        translateY: true,
        width: true,
        writingDirection: true,
        zIndex: true
      },
      testID: true,
      top: true,
      transform: {
        diff: _$$_REQUIRE(_dependencyMap[6])
      },
      translateX: true,
      translateY: true,
      width: true,
      zIndex: true
    })
  };
  module.exports = ReactNativeViewConfig;
},14590,[14305,14314,14581,10393,10408,10402,10411]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var UIManager = _$$_REQUIRE(_dependencyMap[3]);

  var insetsDiffer = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var matricesDiffer = _$$_REQUIRE(_dependencyMap[6]);

  var pointsDiffer = _$$_REQUIRE(_dependencyMap[7]);

  var processColor = _$$_REQUIRE(_dependencyMap[8]);

  var processColorArray = _$$_REQUIRE(_dependencyMap[9]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[10]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[11]);

  var warning = _$$_REQUIRE(_dependencyMap[12]);

  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);
    var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;

    while (baseModuleName) {
      var baseModule = UIManager.getViewManagerConfig(baseModuleName);

      if (!baseModule) {
        warning(false, 'Base module "%s" does not exist', baseModuleName);
        baseModuleName = null;
      } else {
        bubblingEventTypes = _objectSpread({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = _objectSpread({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = _objectSpread({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }

    var validAttributes = {};

    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null && process == null ? true : {
        diff: diff,
        process: process
      };
    }

    validAttributes.style = ReactNativeStyleAttributes;

    _extends(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });

    if (!hasAttachedDefaultEventTypes) {
      attachDefaultEventTypes(viewConfig);
      hasAttachedDefaultEventTypes = true;
    }

    return viewConfig;
  }

  var hasAttachedDefaultEventTypes = false;

  function attachDefaultEventTypes(viewConfig) {
    var constants = UIManager.getConstants();

    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }

  function merge(destination, source) {
    if (!source) {
      return destination;
    }

    if (!destination) {
      return source;
    }

    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      var sourceValue = source[key];

      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];

        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }

      destination[key] = sourceValue;
    }

    return destination;
  }

  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;

      case 'CGPoint':
        return pointsDiffer;

      case 'CGSize':
        return sizesDiffer;

      case 'UIEdgeInsets':
        return insetsDiffer;
    }

    return null;
  }

  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;

      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;

      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;

      case 'Color':
        return processColor;

      case 'ColorArray':
        return processColorArray;
    }

    return null;
  }

  module.exports = getNativeComponentAttributes;
},14593,[14344,14314,10378,10279,10408,14326,10411,10414,10393,14596,10417,10402,14332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var processColor = _$$_REQUIRE(_dependencyMap[0]);

  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColor);
  }

  module.exports = processColorArray;
},14596,[10393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };

  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }

    throw new Error('no such scale ' + scale.toString());
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},14599,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('SourceCode');

  exports.default = _default;
},14602,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('AndroidProgressBar');

  exports.default = _default;
},14605,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _requireNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function codegenNativeComponent(componentName, options) {
    var componentNameInUse = options && options.paperComponentName ? options.paperComponentName : componentName;

    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_reactNative.UIManager.getViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _reactNative.UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)) {
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        throw new Error("Failed to find native component for either " + componentName + " or " + (options.paperComponentNameDeprecated || '(unknown)'));
      }
    }

    return (0, _requireNativeComponent.default)(componentNameInUse);
  }

  var _default = codegenNativeComponent;
  exports.default = _default;
},14608,[14305,10372,10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DeprecatedTextStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedTextStylePropTypes);
  var DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: DeprecatedEdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool,
    dataDetectorType: PropTypes.oneOf(DataDetectorTypes)
  };
},14611,[14419,14614,14617,10318,14434]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = DeprecatedEdgeInsetsPropType;
},14614,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deprecatedCreateStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[0]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[1]);

  function DeprecatedStyleSheetPropType(shape) {
    var shapePropType = deprecatedCreateStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = DeprecatedStyleSheetPropType;
},14617,[14620,10291]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var merge = _$$_REQUIRE(_dependencyMap[1]);

  function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var _key2 in allKeys) {
        var checker = shapeTypes[_key2];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, _key2, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
        rest[_key3 - 4] = arguments[_key3];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = deprecatedCreateStrictShapeTypeChecker;
},14620,[14326,10339]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(false);
},14623,[10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeTVNavigationEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(_NativeTVNavigationEventEmitter.default);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},14626,[14305,14629,10066,10198]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('TVNavigationEventEmitter');

  exports.default = _default;
},14629,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? invariant(false) : undefined;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},14632,[14635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant(...): Second argument must be a string.');
    }
  };

  function invariant(condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return String(args[argIndex++]);
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},14635,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }

    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1;
    throw error;
  }

  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},14638,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    DeprecatedAccessibilityRoles: ['none', 'button', 'link', 'search', 'image', 'keyboardkey', 'text', 'adjustable', 'imagebutton', 'header', 'summary', 'alert', 'checkbox', 'combobox', 'menu', 'menubar', 'menuitem', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'spinbutton', 'switch', 'tab', 'tablist', 'timer', 'toolbar'],
    DeprecatedAccessibilityStates: ['selected', 'disabled', 'checked', 'unchecked', 'busy', 'expanded', 'collapsed', 'hasPopup']
  };
},14641,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _require = _$$_REQUIRE(_dependencyMap[1]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[2]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[8]);

  var emptyAnimation = {
    start: function start() {},
    stop: function stop() {},
    reset: function reset() {},
    _startNativeLoop: function _startNativeLoop() {},
    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };

  var spring = function spring(value, config) {
    var anyValue = value;
    return _objectSpread({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var timing = function timing(value, config) {
    var anyValue = value;
    return _objectSpread({}, emptyAnimation, {
      start: function start(callback) {
        anyValue.setValue(config.toValue);
        callback && callback({
          finished: true
        });
      }
    });
  };

  var decay = function decay(value, config) {
    return emptyAnimation;
  };

  var sequence = function sequence(animations) {
    return emptyAnimation;
  };

  var parallel = function parallel(animations, config) {
    return emptyAnimation;
  };

  var delay = function delay(time) {
    return emptyAnimation;
  };

  var stagger = function stagger(time, animations) {
    return emptyAnimation;
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    return emptyAnimation;
  };

  var event = function event(argMapping, config) {
    return null;
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: AnimatedImplementation.add,
    subtract: AnimatedImplementation.subtract,
    divide: AnimatedImplementation.divide,
    multiply: AnimatedImplementation.multiply,
    modulo: AnimatedImplementation.modulo,
    diffClamp: AnimatedImplementation.diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: AnimatedImplementation.forkEvent,
    unforkEvent: AnimatedImplementation.unforkEvent,
    Event: AnimatedEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},14644,[14314,10528,10525,10534,10537,10567,10531,10579,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('NativeAnimatedModule');

  exports.default = _default;
},14647,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = function (_AnimatedWithChildren) {
    _inherits(AnimatedSubtraction, _AnimatedWithChildren);

    function AnimatedSubtraction(a, b) {
      var _this;

      _classCallCheck(this, AnimatedSubtraction);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSubtraction).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedSubtraction;
  }(AnimatedWithChildren);

  module.exports = AnimatedSubtraction;
},14650,[14320,14323,14371,14377,14380,14386,10534,10537,10531,10543]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var FlatList = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(FlatList, {
    scrollEventThrottle: 0.0001
  });
},14653,[10657,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('AndroidSwipeRefreshLayout');

  exports.default = _default;
},14656,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('PullToRefreshView', {
    paperComponentName: 'RCTRefreshControl'
  });

  exports.default = _default;
},14659,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('FrameRateLogger');

  exports.default = _default;
},14662,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('KeyboardObserver');

  exports.default = _default;
},14665,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var OUTER_PROPS = _extends(Object.create(null), {
    margin: true,
    marginHorizontal: true,
    marginVertical: true,
    marginBottom: true,
    marginTop: true,
    marginLeft: true,
    marginRight: true,
    flex: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: true,
    alignSelf: true,
    height: true,
    minHeight: true,
    maxHeight: true,
    width: true,
    minWidth: true,
    maxWidth: true,
    position: true,
    left: true,
    right: true,
    bottom: true,
    top: true
  });

  function splitLayoutProps(props) {
    var inner = {};
    var outer = {};

    if (props) {
      Object.keys(props).forEach(function (k) {
        var value = props[k];

        if (OUTER_PROPS[k]) {
          outer[k] = value;
        } else {
          inner[k] = value;
        }
      });
    }

    return {
      outer: outer,
      inner: inner
    };
  }

  module.exports = splitLayoutProps;
},14668,[14344]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Image = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(Image);
},14671,[10606,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},14674,[14677]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === undefined) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},14677,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var DeprecatedEdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedStyleSheetPropType = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var PlatformViewPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[6]),
      DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles,
      DeprecatedAccessibilityStates = _require.DeprecatedAccessibilityStates;

  var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
  module.exports = _objectSpread({
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityHint: PropTypes.string,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
    accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityStates)),
    accessibilityState: PropTypes.object,
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: DeprecatedEdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  }, PlatformViewPropTypes);
},14680,[14314,14614,14617,14437,10348,10318,14641]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  var ImageViewNativeComponent = requireNativeComponent('RCTImageView');
  module.exports = ImageViewNativeComponent;
},14683,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  var TextInlineImage = requireNativeComponent('RCTTextInlineImage');
  module.exports = TextInlineImage;
},14686,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ScrollView = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(ScrollView, {
    scrollEventThrottle: 0.0001
  });
},14689,[10609,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SectionList = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(SectionList, {
    scrollEventThrottle: 0.0001
  });
},14692,[10744,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Text = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(Text);
},14695,[10483,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var View = _$$_REQUIRE(_dependencyMap[0]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = createAnimatedComponent(View);
},14698,[10447,10603]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = requireNativeComponent('AndroidCheckBox');
},14701,[10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function setAndForwardRef(_ref) {
    var getForwardedRef = _ref.getForwardedRef,
        setLocalRef = _ref.setLocalRef;
    return function forwardRef(ref) {
      var forwardedRef = getForwardedRef();
      setLocalRef(ref);

      if (typeof forwardedRef === 'function') {
        forwardedRef(ref);
      } else if (typeof forwardedRef === 'object' && forwardedRef != null) {
        forwardedRef.current = ref;
      }
    };
  }

  module.exports = setAndForwardRef;
},14704,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = undefined;

  var _codegenNativeCommands = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['openDrawer', 'closeDrawer']
  });
  exports.Commands = Commands;

  var _default = (0, _codegenNativeComponent.default)('AndroidDrawerLayout');

  exports.default = _default;
},14707,[14308,14305,14710,14608,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(function (command) {
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (0, _ReactNative.dispatchCommand)(ref, command, args);
      };
    });
    return commandObj;
  }

  var _default = codegenNativeCommands;
  exports.default = _default;
},14710,[10114]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('StatusBarManager');

  exports.default = _default;
},14713,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var InputAccessoryView = function (_React$Component) {
    (0, _inherits2.default)(InputAccessoryView, _React$Component);

    function InputAccessoryView() {
      (0, _classCallCheck2.default)(this, InputAccessoryView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InputAccessoryView).apply(this, arguments));
    }

    (0, _createClass2.default)(InputAccessoryView, [{
      key: "render",
      value: function render() {
        {
          console.warn('<InputAccessoryView> is only supported on iOS.');
        }

        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(_RCTInputAccessoryViewNativeComponent.default, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor
        }, this.props.children);
      }
    }]);
    return InputAccessoryView;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},14746,[14305,14320,14323,14371,14377,14386,14749,14419,10066,10297,10441]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('RCTInputAccessoryView');

  exports.default = _default;
},14749,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ModalManager');

  exports.default = _default;
},14752,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('ModalHostView', {
    interfaceOnly: true,
    paperComponentName: 'RCTModalHostView'
  });

  exports.default = _default;
},14755,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(0);
},14758,[10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('I18nManager');

  exports.default = _default;
},14761,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = (0, _reactNative.requireNativeComponent)('AndroidDropdownPicker');
},14764,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = (0, _reactNative.requireNativeComponent)('AndroidDialogPicker');
},14767,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var View = _$$_REQUIRE(_dependencyMap[4]);

  var exported;
  {
    var SafeAreaView = function SafeAreaView(props, forwardedRef) {
      var emulateUnlessSupported = props.emulateUnlessSupported,
          localProps = _objectWithoutProperties(props, ["emulateUnlessSupported"]);

      return React.createElement(View, _extends({}, localProps, {
        ref: forwardedRef
      }));
    };

    var SafeAreaViewRef = React.forwardRef(SafeAreaView);
    SafeAreaViewRef.displayName = 'SafeAreaView';
    exported = SafeAreaViewRef;
  }
  module.exports = exported;
},14770,[14344,14407,10066,10297,10447]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('Slider', {
    interfaceOnly: true,
    paperComponentName: 'RCTSlider'
  });

  exports.default = _default;
},14773,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _codegenNativeComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = (0, _codegenNativeComponent.default)('Switch', {
    paperComponentName: 'RCTSwitch'
  });

  exports.default = _default;
},14776,[14305,14608]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      NativeComponent = _require.NativeComponent;

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = requireNativeComponent('AndroidSwitch');
},14779,[10114,10372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var DeprecatedColorPropType = _$$_REQUIRE(_dependencyMap[2]);

  var DeprecatedViewPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var DocumentSelectionState = _$$_REQUIRE(_dependencyMap[4]);

  var Text = _$$_REQUIRE(_dependencyMap[5]);

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  module.exports = _objectSpread({}, DeprecatedViewPropTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
    autoCompleteType: PropTypes.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
    autoCorrect: PropTypes.bool,
    spellCheck: PropTypes.bool,
    autoFocus: PropTypes.bool,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    editable: PropTypes.bool,
    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
    returnKeyLabel: PropTypes.string,
    maxLength: PropTypes.number,
    numberOfLines: PropTypes.number,
    disableFullscreenUI: PropTypes.bool,
    enablesReturnKeyAutomatically: PropTypes.bool,
    multiline: PropTypes.bool,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    onChange: PropTypes.func,
    onChangeText: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    onTextInput: PropTypes.func,
    onEndEditing: PropTypes.func,
    onSelectionChange: PropTypes.func,
    onSubmitEditing: PropTypes.func,
    onKeyPress: PropTypes.func,
    onLayout: PropTypes.func,
    onScroll: PropTypes.func,
    placeholder: PropTypes.string,
    placeholderTextColor: DeprecatedColorPropType,
    scrollEnabled: PropTypes.bool,
    secureTextEntry: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    selectionState: PropTypes.instanceOf(DocumentSelectionState),
    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),
    value: PropTypes.string,
    defaultValue: PropTypes.string,
    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
    clearTextOnFocus: PropTypes.bool,
    selectTextOnFocus: PropTypes.bool,
    blurOnSubmit: PropTypes.bool,
    style: Text.propTypes.style,
    underlineColorAndroid: DeprecatedColorPropType,
    inlineImageLeft: PropTypes.string,
    inlineImagePadding: PropTypes.number,
    rejectResponderTermination: PropTypes.bool,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    caretHidden: PropTypes.bool,
    contextMenuHidden: PropTypes.bool,
    inputAccessoryViewID: PropTypes.string,
    textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode']),
    showSoftInputOnFocus: PropTypes.bool
  });
},14782,[14314,10318,14419,14680,10789,10483]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},14785,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ActionSheetManager');

  exports.default = _default;
},14788,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('HeadlessJsTaskSupport');

  exports.default = _default;
},14791,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var HeadlessJsTaskError = function (_Error) {
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);

    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HeadlessJsTaskError).apply(this, arguments));
    }

    return HeadlessJsTaskError;
  }((0, _wrapNativeSuper2.default)(Error));

  exports.default = HeadlessJsTaskError;
},14794,[14305,14320,14371,14377,14386,14458]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('BugReporting');

  exports.default = _default;
},14797,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('RedBox');

  exports.default = _default;
},14800,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _GlobalPerformanceLogger = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
  module.exports = PerformanceLoggerContext;
},14803,[14305,14308,10297,14548]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[1]);

  var Text = _$$_REQUIRE(_dependencyMap[2]);

  var View = _$$_REQUIRE(_dependencyMap[3]);

  function ReactFabricIndicator() {
    return React.createElement(View, {
      style: styles.container
    }, React.createElement(Text, {
      style: styles.text
    }, "FABRIC"));
  }

  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: 'rgba(0,0,0, 0.25)',
      position: 'absolute',
      top: 0,
      right: 0,
      padding: 2
    },
    text: {
      fontSize: 6,
      color: '#ffffff'
    }
  });
  module.exports = ReactFabricIndicator;
},14806,[10297,10441,10483,10447]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('DeviceEventManager');

  exports.default = _default;
},14809,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[0]);

  var ReactFabric;
  {
    ReactFabric = _$$_REQUIRE(_dependencyMap[1]);
  }

  _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);

  module.exports = ReactFabric;
},14812,[14566,14815]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2]),
      React = _$$_REQUIRE(_dependencyMap[3]),
      Scheduler = _$$_REQUIRE(_dependencyMap[4]);

  function ReactError(error) {
    error.name = "Invariant Violation";
    return error;
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (!(-1 < pluginIndex)) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));

      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0)) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName$jscomp$0 + "`."));
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          if (!JSCompiler_inline_result) throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    if (Array.isArray(dispatchListener)) throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    if (null == next) throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      if (eventPluginOrder) throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (namesToPlugins[pluginName]) throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    if (listener && "function" !== typeof listener) throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type."));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw ReactError(Error("Touch object is missing identifier."));
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.warn("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    if (null == next) throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (null == targetInst) return null;
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
        if (!bubbleDispatchConfig && !directDispatchConfig) throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
        topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
        return topLevelType;
      }
    }
  });

  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };

  getInstanceFromNode = getInstanceFromInstance;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical._nativeTag;
    if (!inst) throw ReactError(Error("All native instances should have a tag."));
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher") || (ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  });
  ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig") || (ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  });
  var hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 60113,
      REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 60120,
      REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 60115,
      REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 60116;
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental");
  hasSymbol && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder");
  var MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_SUSPENSE_TYPE:
        return "Suspense";

      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }

    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return "Context.Consumer";

      case REACT_PROVIDER_TYPE:
        return "Context.Provider";

      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        innerType = innerType.displayName || innerType.name || "";
        return type.displayName || ("" !== innerType ? "ForwardRef(" + innerType + ")" : "ForwardRef");

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        if (type = 1 === type._status ? type._result : null) return getComponentName(type);
    }
    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    if (2 !== isFiberMountedImpl(fiber)) throw ReactError(Error("Unable to find node on an unmounted component."));
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      alternate = isFiberMountedImpl(fiber);
      if (3 === alternate) throw ReactError(Error("Unable to find node on an unmounted component."));
      return 1 === alternate ? null : fiber;
    }

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;

      if (null === parentB) {
        b = parentA.return;

        if (null !== b) {
          a = b;
          continue;
        }

        break;
      }

      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }

        throw ReactError(Error("Unable to find node on an unmounted component."));
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, _child = parentA.child; _child;) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
        }
      }
      if (a.alternate !== b) throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
    }

    if (3 !== a.tag) throw ReactError(Error("Unable to find node on an unmounted component."));
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || ReactNativePrivateInterface.deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (getInstanceFromNode(target)) throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
  }

  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function flushDiscreteUpdatesImpl() {}

  var isInsideEventHandler = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) if (flushDiscreteUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  (function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {};

    ReactNativeComponent.prototype.focus = function () {};

    ReactNativeComponent.prototype.measure = function () {};

    ReactNativeComponent.prototype.measureInWindow = function () {};

    ReactNativeComponent.prototype.measureLayout = function () {};

    ReactNativeComponent.prototype.setNativeProps = function () {};

    return ReactNativeComponent;
  })(React.Component);

  new Map();
  new Map();
  new Set();
  new Map();

  function dispatchEvent(target, topLevelType, nativeEvent) {
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;

      if (events) {
        forEachAccumulated(events, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        if (hasRethrowError) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
      }
    });
  }

  function shim$1() {
    throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
  }

  var _nativeFabricUIManage$1 = nativeFabricUIManager,
      createNode = _nativeFabricUIManage$1.createNode,
      cloneNode = _nativeFabricUIManage$1.cloneNode,
      cloneNodeWithNewChildren = _nativeFabricUIManage$1.cloneNodeWithNewChildren,
      cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage$1.cloneNodeWithNewChildrenAndProps,
      cloneNodeWithNewProps = _nativeFabricUIManage$1.cloneNodeWithNewProps,
      createChildNodeSet = _nativeFabricUIManage$1.createChildSet,
      appendChildNode = _nativeFabricUIManage$1.appendChild,
      appendChildNodeToSet = _nativeFabricUIManage$1.appendChildToSet,
      completeRoot = _nativeFabricUIManage$1.completeRoot,
      registerEventHandler = _nativeFabricUIManage$1.registerEventHandler,
      fabricMeasure = _nativeFabricUIManage$1.measure,
      fabricMeasureInWindow = _nativeFabricUIManage$1.measureInWindow,
      fabricMeasureLayout = _nativeFabricUIManage$1.measureLayout,
      getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      nextReactTag = 2;
  registerEventHandler && registerEventHandler(dispatchEvent);

  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
      if (!(this instanceof ReactFabricHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
      this._internalInstanceHandle = internalInstanceHandle;
    }

    ReactFabricHostComponent.prototype.blur = function () {
      ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.focus = function () {
      ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.measure = function (callback) {
      fabricMeasure(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureInWindow = function (callback) {
      fabricMeasureInWindow(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      "number" !== typeof relativeToNativeNode && relativeToNativeNode instanceof ReactFabricHostComponent && fabricMeasureLayout(this._internalInstanceHandle.stateNode.node, relativeToNativeNode._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactFabricHostComponent.prototype.setNativeProps = function () {};

    return ReactFabricHostComponent;
  }();

  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    if (!hostContext.isInAParentText) throw ReactError(Error("Text strings must be rendered within a <Text> component."));
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }

  var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var updatePayload = diffProperties(null, emptyObject, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, updatePayload),
      canonical: instance.canonical
    };
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 3:
        case 4:
        case 6:
        case 7:
        case 10:
        case 9:
          var JSCompiler_inline_result = "";
          break a;

        default:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    if (contextStackCursor.current !== emptyContextObject) throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      if (!(contextKey in fiber)) throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    if (!instance) throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority,
      fakeCallbackNode = {},
      requestPaint = undefined !== Scheduler_requestPaint ? Scheduler_requestPaint : function () {},
      syncQueue = null,
      immediateQueueCallbackNode = null,
      isFlushingSyncQueue = false,
      initialTimeMs = Scheduler_now(),
      now = 1e4 > initialTimeMs ? Scheduler_now : function () {
    return Scheduler_now() - initialTimeMs;
  };

  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return 99;

      case Scheduler_UserBlockingPriority:
        return 98;

      case Scheduler_NormalPriority:
        return 97;

      case Scheduler_LowPriority:
        return 96;

      case Scheduler_IdlePriority:
        return 95;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case 99:
        return Scheduler_ImmediatePriority;

      case 98:
        return Scheduler_UserBlockingPriority;

      case 97:
        return Scheduler_NormalPriority;

      case 96:
        return Scheduler_LowPriority;

      case 95:
        return Scheduler_IdlePriority;

      default:
        throw ReactError(Error("Unknown priority level."));
    }
  }

  function runWithPriority$1(reactPriorityLevel, fn) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(reactPriorityLevel, fn);
  }

  function scheduleCallback(reactPriorityLevel, callback, options) {
    reactPriorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(reactPriorityLevel, callback, options);
  }

  function scheduleSyncCallback(callback) {
    null === syncQueue ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback);
    return fakeCallbackNode;
  }

  function flushSyncCallbackQueue() {
    null !== immediateQueueCallbackNode && Scheduler_cancelCallback(immediateQueueCallbackNode);
    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && null !== syncQueue) {
      isFlushingSyncQueue = true;
      var i = 0;

      try {
        var queue = syncQueue;
        runWithPriority$1(99, function () {
          for (; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }
        });
        syncQueue = null;
      } catch (error) {
        throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }

  function inferPriorityFromExpirationTime(currentTime, expirationTime) {
    if (1073741823 === expirationTime) return 99;
    if (1 === expirationTime) return 95;
    currentTime = 10 * (1073741821 - expirationTime) - 10 * (1073741821 - currentTime);
    return 0 >= currentTime ? 99 : 250 >= currentTime ? 98 : 5250 >= currentTime ? 97 : 95;
  }

  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function readLazyComponentType(lazyComponent) {
    var result = lazyComponent._result;

    switch (lazyComponent._status) {
      case 1:
        return result;

      case 2:
        throw result;

      case 0:
        throw result;

      default:
        lazyComponent._status = 0;
        result = lazyComponent._ctor;
        result = result();
        result.then(function (moduleObject) {
          0 === lazyComponent._status && (moduleObject = moduleObject.default, lazyComponent._status = 1, lazyComponent._result = moduleObject);
        }, function (error) {
          0 === lazyComponent._status && (lazyComponent._status = 2, lazyComponent._result = error);
        });

        switch (lazyComponent._status) {
          case 1:
            return lazyComponent._result;

          case 2:
            throw lazyComponent._result;
        }

        lazyComponent._result = result;
        throw result;
    }
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function resetContextDependencies() {
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = null;
  }

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue2 = currentValue;
  }

  function scheduleWorkOnParentPath(parent, renderExpirationTime) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      if (parent.childExpirationTime < renderExpirationTime) parent.childExpirationTime = renderExpirationTime, null !== alternate && alternate.childExpirationTime < renderExpirationTime && (alternate.childExpirationTime = renderExpirationTime);else if (null !== alternate && alternate.childExpirationTime < renderExpirationTime) alternate.childExpirationTime = renderExpirationTime;else break;
      parent = parent.return;
    }
  }

  function prepareToReadContext(workInProgress, renderExpirationTime) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && null !== workInProgress.firstContext && (workInProgress.expirationTime >= renderExpirationTime && (didReceiveUpdate = true), workInProgress.firstContext = null);
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };

      if (null === lastContextDependency) {
        if (null === currentlyRenderingFiber) throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
        lastContextDependency = observedBits;
        currentlyRenderingFiber.dependencies = {
          expirationTime: 0,
          firstContext: observedBits,
          responders: null
        };
      } else lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue2;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime, suspenseConfig) {
    return {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -2049 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;
      updateExpirationTime < renderExpirationTime ? (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), newExpirationTime < updateExpirationTime && (newExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig), resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update)));
      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;
      _updateExpirationTime < renderExpirationTime ? (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), newExpirationTime < _updateExpirationTime && (newExpirationTime = _updateExpirationTime)) : (resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update)));
      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        if ("function" !== typeof _callback3) throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + _callback3));

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,
      emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 1;
      suspenseConfig.payload = payload;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime(),
          suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, inst, suspenseConfig);
      suspenseConfig = createUpdate(currentTime, suspenseConfig);
      suspenseConfig.tag = 2;
      undefined !== callback && null !== callback && (suspenseConfig.callback = callback);
      enqueueUpdate(inst, suspenseConfig);
      scheduleUpdateOnFiber(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
    var context = ctor.contextType;
    "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && undefined !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternalFiber = workInProgress;
    isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return ctor;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    var contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType ? instance.context = readContext(contextType) : (contextType = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, contextType));
    contextType = workInProgress.updateQueue;
    null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), contextType = workInProgress.updateQueue, null !== contextType && (processUpdateQueue(workInProgress, contextType, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;

        if (element) {
          if (1 !== element.tag) throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
          inst = element.stateNode;
        }

        if (!inst) throw ReactError(Error("Missing owner for string ref " + returnFiber + ". This error is likely caused by a bug in React. Please file an issue."));
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      if ("string" !== typeof returnFiber) throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
      if (!element._owner) throw ReactError(Error("Element ref was specified as a string (" + returnFiber + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) throw ReactError(Error("Objects are not valid as a React child (found: " + ("[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")."));
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.elementType === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 4 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 7 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      if ("function" !== typeof iteratorFn) throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      if (null == newChildrenIterable) throw ReactError(Error("An iterable object provided no iterator."));

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (7 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.elementType === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                break;
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);

              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                }

                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);

              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 1:
        case 0:
          throw returnFiber = returnFiber.type, ReactError(Error((returnFiber.displayName || returnFiber.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    if (c === NO_CONTEXT) throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var SubtreeSuspenseContextMask = 1,
      InvisibleParentSuspenseContext = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = {
    current: 0
  };

  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        if (null !== node.memoizedState) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.effectTag & 64)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  function createResponderListener(responder, props) {
    return {
      responder: responder,
      props: props
    };
  }

  var NoEffect$1 = 0,
      UnmountSnapshot = 2,
      UnmountMutation = 4,
      MountMutation = 8,
      UnmountLayout = 16,
      MountLayout = 32,
      MountPassive = 64,
      UnmountPassive = 128,
      ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      renderExpirationTime$1 = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      nextCurrentHook = null,
      firstWorkInProgressHook = null,
      workInProgressHook = null,
      nextWorkInProgressHook = null,
      remainingExpirationTime = 0,
      componentUpdateQueue = null,
      sideEffectTag = 0,
      didScheduleRenderPhaseUpdate = false,
      renderPhaseUpdates = null,
      numberOfReRenders = 0;

  function throwInvalidHookError() {
    throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (!is(nextDeps[i], prevDeps[i])) return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
    renderExpirationTime$1 = nextRenderExpirationTime;
    currentlyRenderingFiber$1 = workInProgress;
    nextCurrentHook = null !== current ? current.memoizedState : null;
    ReactCurrentDispatcher$1.current = null === nextCurrentHook ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    workInProgress = Component(props, refOrContext);

    if (didScheduleRenderPhaseUpdate) {
      do {
        didScheduleRenderPhaseUpdate = false, numberOfReRenders += 1, nextCurrentHook = null !== current ? current.memoizedState : null, nextWorkInProgressHook = firstWorkInProgressHook, componentUpdateQueue = workInProgressHook = currentHook = null, ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdate, workInProgress = Component(props, refOrContext);
      } while (didScheduleRenderPhaseUpdate);

      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    current = currentlyRenderingFiber$1;
    current.memoizedState = firstWorkInProgressHook;
    current.expirationTime = remainingExpirationTime;
    current.updateQueue = componentUpdateQueue;
    current.effectTag |= sideEffectTag;
    current = null !== currentHook && null !== currentHook.next;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    if (current) throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
    return workInProgress;
  }

  function resetHooks() {
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
    renderExpirationTime$1 = 0;
    nextWorkInProgressHook = workInProgressHook = firstWorkInProgressHook = nextCurrentHook = currentHook = currentlyRenderingFiber$1 = null;
    remainingExpirationTime = 0;
    componentUpdateQueue = null;
    sideEffectTag = 0;
    didScheduleRenderPhaseUpdate = false;
    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      queue: null,
      baseUpdate: null,
      next: null
    };
    null === workInProgressHook ? firstWorkInProgressHook = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook, nextCurrentHook = null !== currentHook ? currentHook.next : null;else {
      if (null === nextCurrentHook) throw ReactError(Error("Rendered more hooks than during the previous render."));
      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        queue: currentHook.queue,
        baseUpdate: currentHook.baseUpdate,
        next: null
      };
      workInProgressHook = null === workInProgressHook ? firstWorkInProgressHook = newHook : workInProgressHook.next = newHook;
      nextCurrentHook = currentHook.next;
    }
    return workInProgressHook;
  }

  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }

  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook(),
        queue = hook.queue;
    if (null === queue) throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
    queue.lastRenderedReducer = reducer;

    if (0 < numberOfReRenders) {
      var _dispatch = queue.dispatch;

      if (null !== renderPhaseUpdates) {
        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (undefined !== firstRenderPhaseUpdate) {
          renderPhaseUpdates.delete(queue);
          var newState = hook.memoizedState;

          do {
            newState = reducer(newState, firstRenderPhaseUpdate.action), firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
          } while (null !== firstRenderPhaseUpdate);

          is(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          hook.baseUpdate === queue.last && (hook.baseState = newState);
          queue.lastRenderedState = newState;
          return [newState, _dispatch];
        }
      }

      return [hook.memoizedState, _dispatch];
    }

    _dispatch = queue.last;
    var baseUpdate = hook.baseUpdate;
    newState = hook.baseState;
    null !== baseUpdate ? (null !== _dispatch && (_dispatch.next = null), _dispatch = baseUpdate.next) : _dispatch = null !== _dispatch ? _dispatch.next : null;

    if (null !== _dispatch) {
      var newBaseUpdate = firstRenderPhaseUpdate = null,
          _update = _dispatch,
          didSkip = false;

      do {
        var updateExpirationTime = _update.expirationTime;
        updateExpirationTime < renderExpirationTime$1 ? (didSkip || (didSkip = true, newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState), updateExpirationTime > remainingExpirationTime && (remainingExpirationTime = updateExpirationTime)) : (markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig), newState = _update.eagerReducer === reducer ? _update.eagerState : reducer(newState, _update.action));
        baseUpdate = _update;
        _update = _update.next;
      } while (null !== _update && _update !== _dispatch);

      didSkip || (newBaseUpdate = baseUpdate, firstRenderPhaseUpdate = newState);
      is(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      hook.baseUpdate = newBaseUpdate;
      hook.baseState = firstRenderPhaseUpdate;
      queue.lastRenderedState = newState;
    }

    return [hook.memoizedState, queue.dispatch];
  }

  function pushEffect(tag, create, destroy, deps) {
    tag = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      next: null
    };
    null === componentUpdateQueue ? (componentUpdateQueue = {
      lastEffect: null
    }, componentUpdateQueue.lastEffect = tag.next = tag) : (create = componentUpdateQueue.lastEffect, null === create ? componentUpdateQueue.lastEffect = tag.next = tag : (destroy = create.next, create.next = tag, tag.next = destroy, componentUpdateQueue.lastEffect = tag));
    return tag;
  }

  function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = mountWorkInProgressHook();
    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, undefined, undefined === deps ? null : deps);
  }

  function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var destroy = undefined;

    if (null !== currentHook) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
        pushEffect(NoEffect$1, create, destroy, deps);
        return;
      }
    }

    sideEffectTag |= fiberEffectTag;
    hook.memoizedState = pushEffect(hookEffectTag, create, destroy, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) return create = create(), ref(create), function () {
      ref(null);
    };
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }

  function mountDebugValue() {}

  function dispatchAction(fiber, queue, action) {
    if (!(25 > numberOfReRenders)) throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
    var alternate = fiber.alternate;
    if (fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1) {
      if (didScheduleRenderPhaseUpdate = true, fiber = {
        expirationTime: renderExpirationTime$1,
        suspenseConfig: null,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      }, null === renderPhaseUpdates && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), undefined === action) renderPhaseUpdates.set(queue, fiber);else {
        for (queue = action; null !== queue.next;) {
          queue = queue.next;
        }

        queue.next = fiber;
      }
    } else {
      var currentTime = requestCurrentTime(),
          _suspenseConfig = ReactCurrentBatchConfig.suspense;
      currentTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);
      _suspenseConfig = {
        expirationTime: currentTime,
        suspenseConfig: _suspenseConfig,
        action: action,
        eagerReducer: null,
        eagerState: null,
        next: null
      };
      var _last = queue.last;
      if (null === _last) _suspenseConfig.next = _suspenseConfig;else {
        var first = _last.next;
        null !== first && (_suspenseConfig.next = first);
        _last.next = _suspenseConfig;
      }
      queue.last = _suspenseConfig;
      if (0 === fiber.expirationTime && (null === alternate || 0 === alternate.expirationTime) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
            _eagerState = alternate(currentState, action);

        _suspenseConfig.eagerReducer = alternate;
        _suspenseConfig.eagerState = _eagerState;
        if (is(_eagerState, currentState)) return;
      } catch (error) {} finally {}
      scheduleUpdateOnFiber(fiber, currentTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useResponder: throwInvalidHookError
  },
      HooksDispatcherOnMount = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return mountEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return mountEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return mountEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: function useReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = undefined !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialArg
      };
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function useRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function useState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      initialState = initialState.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      HooksDispatcherOnUpdate = {
    readContext: readContext,
    useCallback: function useCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    },
    useContext: readContext,
    useEffect: function useEffect(create, deps) {
      return updateEffectImpl(516, 192, create, deps);
    },
    useImperativeHandle: function useImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, 36, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function useLayoutEffect(create, deps) {
      return updateEffectImpl(4, 36, create, deps);
    },
    useMemo: function useMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    },
    useReducer: updateReducer,
    useRef: function useRef() {
      return updateWorkInProgressHook().memoizedState;
    },
    useState: function useState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    },
    useDebugValue: mountDebugValue,
    useResponder: createResponderListener
  },
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 5:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 6:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 13:
        return false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = createFiber(5, null, null, 0);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    Component = Component.render;
    var ref = workInProgress.ref;
    prepareToReadContext(workInProgress, renderExpirationTime);
    nextProps = renderWithHooks(current$$1, workInProgress, Component, nextProps, ref, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, nextProps, renderExpirationTime);
    return workInProgress.child;
  }

  function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    if (null === current$$1) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare && undefined === Component.defaultProps) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
      current$$1 = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
      current$$1.ref = workInProgress.ref;
      current$$1.return = workInProgress;
      return workInProgress.child = current$$1;
    }

    type = current$$1.child;
    if (updateExpirationTime < renderExpirationTime && (updateExpirationTime = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(updateExpirationTime, nextProps) && current$$1.ref === workInProgress.ref)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    current$$1 = createWorkInProgress(type, nextProps, renderExpirationTime);
    current$$1.ref = workInProgress.ref;
    current$$1.return = workInProgress;
    return workInProgress.child = current$$1;
  }

  function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
    return null !== current$$1 && shallowEqual(current$$1.memoizedProps, nextProps) && current$$1.ref === workInProgress.ref && (didReceiveUpdate = false, updateExpirationTime < renderExpirationTime) ? bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var context = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    context = getMaskedContext(workInProgress, context);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
    if (null !== current$$1 && !didReceiveUpdate) return workInProgress.updateQueue = current$$1.updateQueue, workInProgress.effectTag &= -517, current$$1.expirationTime <= renderExpirationTime && (current$$1.expirationTime = 0), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === workInProgress.stateNode) null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime), mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime), nextProps = true;else if (null === current$$1) {
      var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context,
          contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      oldContext = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;
      null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldContext = workInProgress.memoizedState);
      oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = contextType, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
    } else instance = workInProgress.stateNode, oldProps = workInProgress.memoizedProps, instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps), oldContext = instance.context, contextType = Component.contextType, "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType)), getDerivedStateFromProps = Component.getDerivedStateFromProps, (hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, instance, nextProps, contextType), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = instance.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, instance, renderExpirationTime), oldState = workInProgress.memoizedState), oldProps !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldContext, oldState, contextType)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, oldState, contextType), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, oldState, contextType)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), instance.props = nextProps, instance.state = oldState, instance.context = contextType, nextProps = getDerivedStateFromProps) : ("function" !== typeof instance.componentDidUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError ? (workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime), workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)) : reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  var SUSPENDED_MARKER = {};

  function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
    var mode = workInProgress.mode,
        nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        nextState = null,
        nextDidTimeout = false,
        JSCompiler_temp;
    (JSCompiler_temp = 0 !== (workInProgress.effectTag & 64)) || (JSCompiler_temp = 0 !== (suspenseContext & ForceSuspenseFallback) && (null === current$$1 || null !== current$$1.memoizedState));
    JSCompiler_temp ? (nextState = SUSPENDED_MARKER, nextDidTimeout = true, workInProgress.effectTag &= -65) : null !== current$$1 && null === current$$1.memoizedState || undefined === nextProps.fallback || true === nextProps.unstable_avoidThisFallback || (suspenseContext |= InvisibleParentSuspenseContext);
    suspenseContext &= SubtreeSuspenseContextMask;
    push(suspenseStackCursor, suspenseContext, workInProgress);
    if (null === current$$1) {
      if (nextDidTimeout) {
        nextProps = nextProps.fallback;
        current$$1 = createFiberFromFragment(null, mode, 0, null);
        current$$1.return = workInProgress;
        if (0 === (workInProgress.mode & 2)) for (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, current$$1.child = nextDidTimeout; null !== nextDidTimeout;) {
          nextDidTimeout.return = current$$1, nextDidTimeout = nextDidTimeout.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextProps, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        current$$1.sibling = renderExpirationTime;
        mode = current$$1;
      } else mode = renderExpirationTime = mountChildFibers(workInProgress, null, nextProps.children, renderExpirationTime);
    } else {
      if (null !== current$$1.memoizedState) {
        if (suspenseContext = current$$1.child, mode = suspenseContext.sibling, nextDidTimeout) {
          nextProps = nextProps.fallback;
          renderExpirationTime = createWorkInProgress(suspenseContext, suspenseContext.pendingProps, 0);
          renderExpirationTime.return = workInProgress;
          if (0 === (workInProgress.mode & 2) && (nextDidTimeout = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextDidTimeout !== suspenseContext.child)) for (renderExpirationTime.child = nextDidTimeout; null !== nextDidTimeout;) {
            nextDidTimeout.return = renderExpirationTime, nextDidTimeout = nextDidTimeout.sibling;
          }
          nextProps = createWorkInProgress(mode, nextProps, mode.expirationTime);
          nextProps.return = workInProgress;
          renderExpirationTime.sibling = nextProps;
          mode = renderExpirationTime;
          renderExpirationTime.childExpirationTime = 0;
          renderExpirationTime = nextProps;
        } else mode = renderExpirationTime = reconcileChildFibers(workInProgress, suspenseContext.child, nextProps.children, renderExpirationTime);
      } else if (suspenseContext = current$$1.child, nextDidTimeout) {
        nextDidTimeout = nextProps.fallback;
        nextProps = createFiberFromFragment(null, mode, 0, null);
        nextProps.return = workInProgress;
        nextProps.child = suspenseContext;
        null !== suspenseContext && (suspenseContext.return = nextProps);
        if (0 === (workInProgress.mode & 2)) for (suspenseContext = null !== workInProgress.memoizedState ? workInProgress.child.child : workInProgress.child, nextProps.child = suspenseContext; null !== suspenseContext;) {
          suspenseContext.return = nextProps, suspenseContext = suspenseContext.sibling;
        }
        renderExpirationTime = createFiberFromFragment(nextDidTimeout, mode, renderExpirationTime, null);
        renderExpirationTime.return = workInProgress;
        nextProps.sibling = renderExpirationTime;
        renderExpirationTime.effectTag |= 2;
        mode = nextProps;
        nextProps.childExpirationTime = 0;
      } else renderExpirationTime = mode = reconcileChildFibers(workInProgress, suspenseContext, nextProps.children, renderExpirationTime);
      workInProgress.stateNode = current$$1.stateNode;
    }
    workInProgress.memoizedState = nextState;
    workInProgress.child = mode;
    return renderExpirationTime;
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailExpiration = 0, renderState.tailMode = tailMode);
  }

  function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
    var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
    reconcileChildren(current$$1, workInProgress, nextProps.children, renderExpirationTime);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.effectTag |= 64;else {
      if (null !== current$$1 && 0 !== (current$$1.effectTag & 64)) a: for (current$$1 = workInProgress.child; null !== current$$1;) {
        if (13 === current$$1.tag) {
          if (null !== current$$1.memoizedState) {
            current$$1.expirationTime < renderExpirationTime && (current$$1.expirationTime = renderExpirationTime);
            var alternate = current$$1.alternate;
            null !== alternate && alternate.expirationTime < renderExpirationTime && (alternate.expirationTime = renderExpirationTime);
            scheduleWorkOnParentPath(current$$1.return, renderExpirationTime);
          }
        } else if (null !== current$$1.child) {
          current$$1.child.return = current$$1;
          current$$1 = current$$1.child;
          continue;
        }

        if (current$$1 === workInProgress) break a;

        for (; null === current$$1.sibling;) {
          if (null === current$$1.return || current$$1.return === workInProgress) break a;
          current$$1 = current$$1.return;
        }

        current$$1.sibling.return = current$$1.return;
        current$$1 = current$$1.sibling;
      }
      nextProps &= SubtreeSuspenseContextMask;
    }
    push(suspenseStackCursor, nextProps, workInProgress);
    if (0 === (workInProgress.mode & 2)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderExpirationTime = workInProgress.child;

        for (revealOrder = null; null !== renderExpirationTime;) {
          nextProps = renderExpirationTime.alternate, null !== nextProps && null === findFirstSuspended(nextProps) && (revealOrder = renderExpirationTime), renderExpirationTime = renderExpirationTime.sibling;
        }

        renderExpirationTime = revealOrder;
        null === renderExpirationTime ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderExpirationTime.sibling, renderExpirationTime.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderExpirationTime, tailMode);
        break;

      case "backwards":
        renderExpirationTime = null;
        revealOrder = workInProgress.child;

        for (workInProgress.child = null; null !== revealOrder;) {
          nextProps = revealOrder.alternate;

          if (null !== nextProps && null === findFirstSuspended(nextProps)) {
            workInProgress.child = revealOrder;
            break;
          }

          nextProps = revealOrder.sibling;
          revealOrder.sibling = renderExpirationTime;
          renderExpirationTime = revealOrder;
          revealOrder = nextProps;
        }

        initSuspenseListRenderState(workInProgress, true, renderExpirationTime, null, tailMode);
        break;

      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;

      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.dependencies = current$$1.dependencies);
    if (workInProgress.childExpirationTime < renderExpirationTime) return null;
    if (null !== current$$1 && workInProgress.child !== current$$1.child) throw ReactError(Error("Resuming work not yet implemented."));

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  var _appendAllChildren = undefined,
      updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance, node.type, node.memoizedProps, node));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, _appendAllChildren(parent, primaryChildParent, true, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance, node.type, node.memoizedProps, node));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) {
        if (13 === node.tag && 0 !== (node.effectTag & 4) && (instance = null !== node.memoizedState)) {
          var primaryChildParent = node.child;

          if (null !== primaryChildParent && (null !== primaryChildParent.child && (primaryChildParent.child.return = primaryChildParent, appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, instance)), instance = primaryChildParent.sibling, null !== instance)) {
            instance.return = node;
            node = instance;
            continue;
          }
        }

        if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  updateHostContainer = function updateHostContainer(workInProgress) {
    var portalOrRoot = workInProgress.stateNode;

    if (null !== workInProgress.firstEffect) {
      var container = portalOrRoot.containerInfo,
          newChildSet = createChildNodeSet(container);
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.effectTag |= 4;
      completeRoot(container, newChildSet);
    }
  };

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = null === workInProgress.firstEffect) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, recyclableInstance = type.node, type = {
        node: current ? null !== newProps ? cloneNodeWithNewProps(recyclableInstance, newProps) : cloneNode(recyclableInstance) : null !== newProps ? cloneNodeWithNewChildrenAndProps(recyclableInstance, newProps) : cloneNodeWithNewChildren(recyclableInstance),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.effectTag |= 4 : _appendAllChildren(type, workInProgress, false, false));
    }
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.effectTag |= 4);
  };

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;

        for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
          null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        }

        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;

      case "collapsed":
        lastTailNode = renderState.tail;

        for (var _lastTailNode = null; null !== lastTailNode;) {
          null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
        }

        null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
    }
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 3:
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        effectTag = workInProgress.effectTag;
        if (0 !== (effectTag & 64)) throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
        workInProgress.effectTag = effectTag & -2049 | 64;
        return workInProgress;

      case 5:
        return popHostContext(workInProgress), null;

      case 13:
        return pop(suspenseStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 2048 ? (workInProgress.effectTag = effectTag & -2049 | 64, workInProgress) : null;

      case 18:
        return null;

      case 19:
        return pop(suspenseStackCursor, workInProgress), null;

      case 4:
        return popHostContainer(workInProgress), null;

      case 10:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));

  function logCapturedError(capturedError) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError) && console.error(capturedError.error);
  }

  var PossiblyWeakSet$1 = "function" === typeof WeakSet ? WeakSet : Set;

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 1 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyCallComponentWillUnmount(current$$1, instance) {
    try {
      instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
    } catch (unmountError) {
      captureCommitPhaseError(current$$1, unmountError);
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitHookEffectList(unmountTag, mountTag, finishedWork) {
    finishedWork = finishedWork.updateQueue;
    finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

    if (null !== finishedWork) {
      var effect = finishedWork = finishedWork.next;

      do {
        if ((effect.tag & unmountTag) !== NoEffect$1) {
          var destroy = effect.destroy;
          effect.destroy = undefined;
          undefined !== destroy && destroy();
        }

        (effect.tag & mountTag) !== NoEffect$1 && (destroy = effect.create, effect.destroy = destroy());
        effect = effect.next;
      } while (effect !== finishedWork);
    }
  }

  function commitUnmount(current$$1$jscomp$0, renderPriorityLevel) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1$jscomp$0);

    switch (current$$1$jscomp$0.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        var updateQueue = current$$1$jscomp$0.updateQueue;

        if (null !== updateQueue && (updateQueue = updateQueue.lastEffect, null !== updateQueue)) {
          var firstEffect = updateQueue.next;
          runWithPriority$1(97 < renderPriorityLevel ? 97 : renderPriorityLevel, function () {
            var effect = firstEffect;

            do {
              var destroy = effect.destroy;

              if (undefined !== destroy) {
                var current$$1 = current$$1$jscomp$0;

                try {
                  destroy();
                } catch (error) {
                  captureCommitPhaseError(current$$1, error);
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          });
        }

        break;

      case 1:
        safelyDetachRef(current$$1$jscomp$0);
        renderPriorityLevel = current$$1$jscomp$0.stateNode;
        "function" === typeof renderPriorityLevel.componentWillUnmount && safelyCallComponentWillUnmount(current$$1$jscomp$0, renderPriorityLevel);
        break;

      case 5:
        safelyDetachRef(current$$1$jscomp$0);
        break;

      case 4:
        createChildNodeSet(current$$1$jscomp$0.stateNode.containerInfo);
    }
  }

  function detachFiber(current$$1) {
    var alternate = current$$1.alternate;
    current$$1.return = null;
    current$$1.child = null;
    current$$1.memoizedState = null;
    current$$1.updateQueue = null;
    current$$1.dependencies = null;
    current$$1.alternate = null;
    current$$1.firstEffect = null;
    current$$1.lastEffect = null;
    current$$1.pendingProps = null;
    current$$1.memoizedProps = null;
    null !== alternate && detachFiber(alternate);
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;

      case 12:
        return;

      case 13:
        null !== finishedWork.memoizedState && (globalMostRecentFallbackTime = now());
        attachSuspenseRetryListeners(finishedWork);
        return;

      case 19:
        attachSuspenseRetryListeners(finishedWork);
        return;
    }

    switch (finishedWork.tag) {
      case 1:
      case 5:
      case 6:
      case 20:
        break;

      case 3:
      case 4:
        break;

      default:
        throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    var thenables = finishedWork.updateQueue;

    if (null !== thenables) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;
      null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet$1());
      thenables.forEach(function (thenable) {
        var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
        retryCache.has(thenable) || (retryCache.add(thenable), thenable.then(retry, retry));
      });
    }
  }

  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime, null);
    expirationTime.tag = 3;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;

      expirationTime.payload = function () {
        logError(fiber, errorInfo);
        return getDerivedStateFromError(error);
      };
    }

    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this), logError(fiber, errorInfo));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  var ceil = Math.ceil,
      ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      NoContext = 0,
      LegacyUnbatchedContext = 8,
      RenderContext = 16,
      CommitContext = 32,
      RootIncomplete = 0,
      RootErrored = 1,
      RootSuspended = 2,
      RootSuspendedWithDelay = 3,
      RootCompleted = 4,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      renderExpirationTime = 0,
      workInProgressRootExitStatus = RootIncomplete,
      workInProgressRootLatestProcessedExpirationTime = 1073741823,
      workInProgressRootLatestSuspenseTimeout = 1073741823,
      workInProgressRootCanSuspendUsingConfig = null,
      workInProgressRootHasPendingPing = false,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 500,
      nextEffect = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsRenderPriority = 90,
      pendingPassiveEffectsExpirationTime = 0,
      rootsWithPendingDiscreteUpdates = null,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = 0;

  function requestCurrentTime() {
    return (executionContext & 48) !== NoContext ? 1073741821 - (now() / 10 | 0) : 0 !== currentEventTime ? currentEventTime : currentEventTime = 1073741821 - (now() / 10 | 0);
  }

  function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
    fiber = fiber.mode;
    if (0 === (fiber & 2)) return 1073741823;
    var priorityLevel = getCurrentPriorityLevel();
    if (0 === (fiber & 4)) return 99 === priorityLevel ? 1073741823 : 1073741822;
    if ((executionContext & RenderContext) !== NoContext) return renderExpirationTime;
    if (null !== suspenseConfig) currentTime = 1073741821 - 25 * (((1073741821 - currentTime + (suspenseConfig.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);else switch (priorityLevel) {
      case 99:
        currentTime = 1073741823;
        break;

      case 98:
        currentTime = 1073741821 - 10 * (((1073741821 - currentTime + 15) / 10 | 0) + 1);
        break;

      case 97:
      case 96:
        currentTime = 1073741821 - 25 * (((1073741821 - currentTime + 500) / 25 | 0) + 1);
        break;

      case 95:
        currentTime = 1;
        break;

      default:
        throw ReactError(Error("Expected a valid priority level"));
    }
    null !== workInProgressRoot && currentTime === renderExpirationTime && --currentTime;
    return currentTime;
  }

  function scheduleUpdateOnFiber(fiber, expirationTime) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    fiber = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

    if (null !== fiber) {
      fiber.pingTime = 0;
      var priorityLevel = getCurrentPriorityLevel();
      if (1073741823 === expirationTime) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & 48) === NoContext) for (var callback = renderRoot(fiber, 1073741823, true); null !== callback;) {
          callback = callback(true);
        } else scheduleCallbackForRoot(fiber, 99, 1073741823), executionContext === NoContext && flushSyncCallbackQueue();
      } else scheduleCallbackForRoot(fiber, priorityLevel, expirationTime);
      (executionContext & 4) === NoContext || 98 !== priorityLevel && 99 !== priorityLevel || (null === rootsWithPendingDiscreteUpdates ? rootsWithPendingDiscreteUpdates = new Map([[fiber, expirationTime]]) : (priorityLevel = rootsWithPendingDiscreteUpdates.get(fiber), (undefined === priorityLevel || priorityLevel > expirationTime) && rootsWithPendingDiscreteUpdates.set(fiber, expirationTime)));
    }
  }

  function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
    fiber.expirationTime < expirationTime && (fiber.expirationTime = expirationTime);
    var alternate = fiber.alternate;
    null !== alternate && alternate.expirationTime < expirationTime && (alternate.expirationTime = expirationTime);
    var node = fiber.return,
        root = null;
    if (null === node && 3 === fiber.tag) root = fiber.stateNode;else for (; null !== node;) {
      alternate = node.alternate;
      node.childExpirationTime < expirationTime && (node.childExpirationTime = expirationTime);
      null !== alternate && alternate.childExpirationTime < expirationTime && (alternate.childExpirationTime = expirationTime);

      if (null === node.return && 3 === node.tag) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
    null !== root && (expirationTime > root.firstPendingTime && (root.firstPendingTime = expirationTime), fiber = root.lastPendingTime, 0 === fiber || expirationTime < fiber) && (root.lastPendingTime = expirationTime);
    return root;
  }

  function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
    if (root.callbackExpirationTime < expirationTime) {
      var existingCallbackNode = root.callbackNode;
      null !== existingCallbackNode && existingCallbackNode !== fakeCallbackNode && Scheduler_cancelCallback(existingCallbackNode);
      root.callbackExpirationTime = expirationTime;
      1073741823 === expirationTime ? root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime))) : (existingCallbackNode = null, 1 !== expirationTime && (existingCallbackNode = {
        timeout: 10 * (1073741821 - expirationTime) - now()
      }), root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), existingCallbackNode));
    }
  }

  function runRootCallback(root, callback, isSync) {
    var prevCallbackNode = root.callbackNode,
        continuation = null;

    try {
      return continuation = callback(isSync), null !== continuation ? runRootCallback.bind(null, root, continuation) : null;
    } finally {
      null === continuation && prevCallbackNode === root.callbackNode && (root.callbackNode = null, root.callbackExpirationTime = 0);
    }
  }

  function resolveLocksOnRoot(root, expirationTime) {
    var firstBatch = root.firstBatch;
    return null !== firstBatch && firstBatch._defer && firstBatch._expirationTime >= expirationTime ? (scheduleCallback(97, function () {
      firstBatch._onComplete();

      return null;
    }), true) : false;
  }

  function flushPendingDiscreteUpdates() {
    if (null !== rootsWithPendingDiscreteUpdates) {
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (expirationTime, root) {
        scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
      });
      flushSyncCallbackQueue();
    }
  }

  function prepareFreshStack(root, expirationTime) {
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    if (null !== workInProgress) for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
      var interruptedWork = timeoutHandle;

      switch (interruptedWork.tag) {
        case 1:
          var childContextTypes = interruptedWork.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork);
          break;

        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;

        case 5:
          popHostContext(interruptedWork);
          break;

        case 4:
          popHostContainer(interruptedWork);
          break;

        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;

        case 10:
          popProvider(interruptedWork);
      }

      timeoutHandle = timeoutHandle.return;
    }
    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null, expirationTime);
    renderExpirationTime = expirationTime;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootLatestSuspenseTimeout = workInProgressRootLatestProcessedExpirationTime = 1073741823;
    workInProgressRootCanSuspendUsingConfig = null;
    workInProgressRootHasPendingPing = false;
  }

  function renderRoot(root$jscomp$0, expirationTime, isSync) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    if (root$jscomp$0.firstPendingTime < expirationTime) return null;
    if (isSync && root$jscomp$0.finishedExpirationTime === expirationTime) return commitRoot.bind(null, root$jscomp$0);
    flushPassiveEffects();
    if (root$jscomp$0 !== workInProgressRoot || expirationTime !== renderExpirationTime) prepareFreshStack(root$jscomp$0, expirationTime);else if (workInProgressRootExitStatus === RootSuspendedWithDelay) if (workInProgressRootHasPendingPing) prepareFreshStack(root$jscomp$0, expirationTime);else {
      var lastPendingTime = root$jscomp$0.lastPendingTime;
      if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
    }

    if (null !== workInProgress) {
      lastPendingTime = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = ReactCurrentDispatcher.current;
      null === prevDispatcher && (prevDispatcher = ContextOnlyDispatcher);
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;

      if (isSync) {
        if (1073741823 !== expirationTime) {
          var currentTime = requestCurrentTime();
          if (currentTime < expirationTime) return executionContext = lastPendingTime, resetContextDependencies(), ReactCurrentDispatcher.current = prevDispatcher, renderRoot.bind(null, root$jscomp$0, currentTime);
        }
      } else currentEventTime = 0;

      do {
        try {
          if (isSync) for (; null !== workInProgress;) {
            workInProgress = performUnitOfWork(workInProgress);
          } else for (; null !== workInProgress && !Scheduler_shouldYield();) {
            workInProgress = performUnitOfWork(workInProgress);
          }
          break;
        } catch (thrownValue) {
          resetContextDependencies();
          resetHooks();
          currentTime = workInProgress;
          if (null === currentTime || null === currentTime.return) throw prepareFreshStack(root$jscomp$0, expirationTime), executionContext = lastPendingTime, thrownValue;

          a: {
            var root = root$jscomp$0,
                returnFiber = currentTime.return,
                sourceFiber = currentTime,
                value = thrownValue,
                renderExpirationTime$jscomp$0 = renderExpirationTime;
            sourceFiber.effectTag |= 1024;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;

            if (null !== value && "object" === typeof value && "function" === typeof value.then) {
              var thenable = value,
                  hasInvisibleParentBoundary = 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext);
              value = returnFiber;

              do {
                var JSCompiler_temp;
                if (JSCompiler_temp = 13 === value.tag) null !== value.memoizedState ? JSCompiler_temp = false : (JSCompiler_temp = value.memoizedProps, JSCompiler_temp = undefined === JSCompiler_temp.fallback ? false : true !== JSCompiler_temp.unstable_avoidThisFallback ? true : hasInvisibleParentBoundary ? false : true);

                if (JSCompiler_temp) {
                  returnFiber = value.updateQueue;
                  null === returnFiber ? (returnFiber = new Set(), returnFiber.add(thenable), value.updateQueue = returnFiber) : returnFiber.add(thenable);

                  if (0 === (value.mode & 2)) {
                    value.effectTag |= 64;
                    sourceFiber.effectTag &= -1957;
                    1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (renderExpirationTime$jscomp$0 = createUpdate(1073741823, null), renderExpirationTime$jscomp$0.tag = 2, enqueueUpdate(sourceFiber, renderExpirationTime$jscomp$0)));
                    sourceFiber.expirationTime = 1073741823;
                    break a;
                  }

                  sourceFiber = root;
                  root = renderExpirationTime$jscomp$0;
                  hasInvisibleParentBoundary = sourceFiber.pingCache;
                  null === hasInvisibleParentBoundary ? (hasInvisibleParentBoundary = sourceFiber.pingCache = new PossiblyWeakMap(), returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)) : (returnFiber = hasInvisibleParentBoundary.get(thenable), undefined === returnFiber && (returnFiber = new Set(), hasInvisibleParentBoundary.set(thenable, returnFiber)));
                  returnFiber.has(root) || (returnFiber.add(root), sourceFiber = pingSuspendedRoot.bind(null, sourceFiber, thenable, root), thenable.then(sourceFiber, sourceFiber));
                  value.effectTag |= 2048;
                  value.expirationTime = renderExpirationTime$jscomp$0;
                  break a;
                }

                value = value.return;
              } while (null !== value);

              value = Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }

            workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
            value = createCapturedValue(value, sourceFiber);
            sourceFiber = returnFiber;

            do {
              switch (sourceFiber.tag) {
                case 3:
                  sourceFiber.effectTag |= 2048;
                  sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                  renderExpirationTime$jscomp$0 = createRootErrorUpdate(sourceFiber, value, renderExpirationTime$jscomp$0);
                  enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                  break a;

                case 1:
                  if (thenable = value, root = sourceFiber.type, returnFiber = sourceFiber.stateNode, 0 === (sourceFiber.effectTag & 64) && ("function" === typeof root.getDerivedStateFromError || null !== returnFiber && "function" === typeof returnFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(returnFiber)))) {
                    sourceFiber.effectTag |= 2048;
                    sourceFiber.expirationTime = renderExpirationTime$jscomp$0;
                    renderExpirationTime$jscomp$0 = createClassErrorUpdate(sourceFiber, thenable, renderExpirationTime$jscomp$0);
                    enqueueCapturedUpdate(sourceFiber, renderExpirationTime$jscomp$0);
                    break a;
                  }

              }

              sourceFiber = sourceFiber.return;
            } while (null !== sourceFiber);
          }

          workInProgress = completeUnitOfWork(currentTime);
        }
      } while (1);

      executionContext = lastPendingTime;
      resetContextDependencies();
      ReactCurrentDispatcher.current = prevDispatcher;
      if (null !== workInProgress) return renderRoot.bind(null, root$jscomp$0, expirationTime);
    }

    root$jscomp$0.finishedWork = root$jscomp$0.current.alternate;
    root$jscomp$0.finishedExpirationTime = expirationTime;
    if (resolveLocksOnRoot(root$jscomp$0, expirationTime)) return null;
    workInProgressRoot = null;

    switch (workInProgressRootExitStatus) {
      case RootIncomplete:
        throw ReactError(Error("Should have a work-in-progress."));

      case RootErrored:
        return lastPendingTime = root$jscomp$0.lastPendingTime, lastPendingTime < expirationTime ? renderRoot.bind(null, root$jscomp$0, lastPendingTime) : isSync ? commitRoot.bind(null, root$jscomp$0) : (prepareFreshStack(root$jscomp$0, expirationTime), scheduleSyncCallback(renderRoot.bind(null, root$jscomp$0, expirationTime)), null);

      case RootSuspended:
        if (1073741823 === workInProgressRootLatestProcessedExpirationTime && !isSync && (isSync = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < isSync)) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          lastPendingTime = root$jscomp$0.lastPendingTime;
          if (lastPendingTime < expirationTime) return renderRoot.bind(null, root$jscomp$0, lastPendingTime);
          root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync);
          return null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootSuspendedWithDelay:
        if (!isSync) {
          if (workInProgressRootHasPendingPing) return prepareFreshStack(root$jscomp$0, expirationTime), renderRoot.bind(null, root$jscomp$0, expirationTime);
          isSync = root$jscomp$0.lastPendingTime;
          if (isSync < expirationTime) return renderRoot.bind(null, root$jscomp$0, isSync);
          1073741823 !== workInProgressRootLatestSuspenseTimeout ? isSync = 10 * (1073741821 - workInProgressRootLatestSuspenseTimeout) - now() : 1073741823 === workInProgressRootLatestProcessedExpirationTime ? isSync = 0 : (isSync = 10 * (1073741821 - workInProgressRootLatestProcessedExpirationTime) - 5e3, lastPendingTime = now(), expirationTime = 10 * (1073741821 - expirationTime) - lastPendingTime, isSync = lastPendingTime - isSync, 0 > isSync && (isSync = 0), isSync = (120 > isSync ? 120 : 480 > isSync ? 480 : 1080 > isSync ? 1080 : 1920 > isSync ? 1920 : 3e3 > isSync ? 3e3 : 4320 > isSync ? 4320 : 1960 * ceil(isSync / 1960)) - isSync, expirationTime < isSync && (isSync = expirationTime));
          if (10 < isSync) return root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), isSync), null;
        }

        return commitRoot.bind(null, root$jscomp$0);

      case RootCompleted:
        return !isSync && 1073741823 !== workInProgressRootLatestProcessedExpirationTime && null !== workInProgressRootCanSuspendUsingConfig && (lastPendingTime = workInProgressRootLatestProcessedExpirationTime, prevDispatcher = workInProgressRootCanSuspendUsingConfig, expirationTime = prevDispatcher.busyMinDurationMs | 0, 0 >= expirationTime ? expirationTime = 0 : (isSync = prevDispatcher.busyDelayMs | 0, lastPendingTime = now() - (10 * (1073741821 - lastPendingTime) - (prevDispatcher.timeoutMs | 0 || 5e3)), expirationTime = lastPendingTime <= isSync ? 0 : isSync + expirationTime - lastPendingTime), 10 < expirationTime) ? (root$jscomp$0.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root$jscomp$0), expirationTime), null) : commitRoot.bind(null, root$jscomp$0);

      default:
        throw ReactError(Error("Unknown root exit status."));
    }
  }

  function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
    expirationTime < workInProgressRootLatestProcessedExpirationTime && 1 < expirationTime && (workInProgressRootLatestProcessedExpirationTime = expirationTime);
    null !== suspenseConfig && expirationTime < workInProgressRootLatestSuspenseTimeout && 1 < expirationTime && (workInProgressRootLatestSuspenseTimeout = expirationTime, workInProgressRootCanSuspendUsingConfig = suspenseConfig);
  }

  function performUnitOfWork(unitOfWork) {
    var next = beginWork$$1(unitOfWork.alternate, unitOfWork, renderExpirationTime);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next && (next = completeUnitOfWork(unitOfWork));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function completeUnitOfWork(unitOfWork) {
    workInProgress = unitOfWork;

    do {
      var current$$1 = workInProgress.alternate;
      unitOfWork = workInProgress.return;

      if (0 === (workInProgress.effectTag & 1024)) {
        a: {
          var current = current$$1;
          current$$1 = workInProgress;
          var renderExpirationTime$jscomp$0 = renderExpirationTime,
              newProps = current$$1.pendingProps;

          switch (current$$1.tag) {
            case 2:
              break;

            case 16:
              break;

            case 15:
            case 0:
              break;

            case 1:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 3:
              popHostContainer(current$$1);
              popTopLevelContextObject(current$$1);
              renderExpirationTime$jscomp$0 = current$$1.stateNode;
              renderExpirationTime$jscomp$0.pendingContext && (renderExpirationTime$jscomp$0.context = renderExpirationTime$jscomp$0.pendingContext, renderExpirationTime$jscomp$0.pendingContext = null);
              if (null === current || null === current.child) current$$1.effectTag &= -3;
              updateHostContainer(current$$1);
              break;

            case 5:
              popHostContext(current$$1);
              renderExpirationTime$jscomp$0 = requiredContext(rootInstanceStackCursor.current);
              var type = current$$1.type;
              if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, renderExpirationTime$jscomp$0), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
                requiredContext(contextStackCursor$1.current);
                current = newProps;
                var rootContainerInstance = renderExpirationTime$jscomp$0;
                renderExpirationTime$jscomp$0 = current$$1;
                newProps = nextReactTag;
                nextReactTag += 2;
                type = getViewConfigForType(type);
                var updatePayload = diffProperties(null, emptyObject, current, type.validAttributes);
                rootContainerInstance = createNode(newProps, type.uiViewClassName, rootContainerInstance, updatePayload, renderExpirationTime$jscomp$0);
                current = new ReactFabricHostComponent(newProps, type, current, renderExpirationTime$jscomp$0);
                current = {
                  node: rootContainerInstance,
                  canonical: current
                };

                _appendAllChildren(current, current$$1, false, false);

                current$$1.stateNode = current;
                null !== current$$1.ref && (current$$1.effectTag |= 128);
              } else if (null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
              break;

            case 6:
              if (current && null != current$$1.stateNode) updateHostText$1(current, current$$1, current.memoizedProps, newProps);else {
                if ("string" !== typeof newProps && null === current$$1.stateNode) throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                current = requiredContext(rootInstanceStackCursor.current);
                renderExpirationTime$jscomp$0 = requiredContext(contextStackCursor$1.current);
                current$$1.stateNode = createTextInstance(newProps, current, renderExpirationTime$jscomp$0, current$$1);
              }
              break;

            case 11:
              break;

            case 13:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;

              if (0 !== (current$$1.effectTag & 64)) {
                current$$1.expirationTime = renderExpirationTime$jscomp$0;
                break a;
              }

              renderExpirationTime$jscomp$0 = null !== newProps;
              newProps = false;
              null !== current && (type = current.memoizedState, newProps = null !== type, renderExpirationTime$jscomp$0 || null === type || (type = current.child.sibling, null !== type && (rootContainerInstance = current$$1.firstEffect, null !== rootContainerInstance ? (current$$1.firstEffect = type, type.nextEffect = rootContainerInstance) : (current$$1.firstEffect = current$$1.lastEffect = type, type.nextEffect = null), type.effectTag = 8)));
              if (renderExpirationTime$jscomp$0 && !newProps && 0 !== (current$$1.mode & 2)) if (null === current && true !== current$$1.memoizedProps.unstable_avoidThisFallback || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext)) workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);else if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
              renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 4);
              break;

            case 7:
              break;

            case 8:
              break;

            case 12:
              break;

            case 4:
              popHostContainer(current$$1);
              updateHostContainer(current$$1);
              break;

            case 10:
              popProvider(current$$1);
              break;

            case 9:
              break;

            case 14:
              break;

            case 17:
              isContextProvider(current$$1.type) && popContext(current$$1);
              break;

            case 18:
              break;

            case 19:
              pop(suspenseStackCursor, current$$1);
              newProps = current$$1.memoizedState;
              if (null === newProps) break;
              type = 0 !== (current$$1.effectTag & 64);
              rootContainerInstance = newProps.rendering;
              if (null === rootContainerInstance) {
                if (type) cutOffTailIfNeeded(newProps, false);else {
                  if (workInProgressRootExitStatus !== RootIncomplete || null !== current && 0 !== (current.effectTag & 64)) for (current = current$$1.child; null !== current;) {
                    rootContainerInstance = findFirstSuspended(current);

                    if (null !== rootContainerInstance) {
                      current$$1.effectTag |= 64;
                      cutOffTailIfNeeded(newProps, false);
                      current = rootContainerInstance.updateQueue;
                      null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                      current$$1.firstEffect = current$$1.lastEffect = null;
                      current = renderExpirationTime$jscomp$0;

                      for (renderExpirationTime$jscomp$0 = current$$1.child; null !== renderExpirationTime$jscomp$0;) {
                        newProps = renderExpirationTime$jscomp$0, type = current, newProps.effectTag &= 2, newProps.nextEffect = null, newProps.firstEffect = null, newProps.lastEffect = null, rootContainerInstance = newProps.alternate, null === rootContainerInstance ? (newProps.childExpirationTime = 0, newProps.expirationTime = type, newProps.child = null, newProps.memoizedProps = null, newProps.memoizedState = null, newProps.updateQueue = null, newProps.dependencies = null) : (newProps.childExpirationTime = rootContainerInstance.childExpirationTime, newProps.expirationTime = rootContainerInstance.expirationTime, newProps.child = rootContainerInstance.child, newProps.memoizedProps = rootContainerInstance.memoizedProps, newProps.memoizedState = rootContainerInstance.memoizedState, newProps.updateQueue = rootContainerInstance.updateQueue, type = rootContainerInstance.dependencies, newProps.dependencies = null === type ? null : {
                          expirationTime: type.expirationTime,
                          firstContext: type.firstContext,
                          responders: type.responders
                        }), renderExpirationTime$jscomp$0 = renderExpirationTime$jscomp$0.sibling;
                      }

                      push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, current$$1);
                      current$$1 = current$$1.child;
                      break a;
                    }

                    current = current.sibling;
                  }
                }
              } else {
                if (!type) if (current = findFirstSuspended(rootContainerInstance), null !== current) {
                  if (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode) {
                    current = current.updateQueue;
                    null !== current && (current$$1.updateQueue = current, current$$1.effectTag |= 4);
                    current$$1 = current$$1.lastEffect = newProps.lastEffect;
                    null !== current$$1 && (current$$1.nextEffect = null);
                    break;
                  }
                } else now() > newProps.tailExpiration && 1 < renderExpirationTime$jscomp$0 && (current$$1.effectTag |= 64, type = true, cutOffTailIfNeeded(newProps, false), current$$1.expirationTime = current$$1.childExpirationTime = renderExpirationTime$jscomp$0 - 1);
                newProps.isBackwards ? (rootContainerInstance.sibling = current$$1.child, current$$1.child = rootContainerInstance) : (current = newProps.last, null !== current ? current.sibling = rootContainerInstance : current$$1.child = rootContainerInstance, newProps.last = rootContainerInstance);
              }

              if (null !== newProps.tail) {
                0 === newProps.tailExpiration && (newProps.tailExpiration = now() + 500);
                current = newProps.tail;
                newProps.rendering = current;
                newProps.tail = current.sibling;
                newProps.lastEffect = current$$1.lastEffect;
                current.sibling = null;
                renderExpirationTime$jscomp$0 = suspenseStackCursor.current;
                renderExpirationTime$jscomp$0 = type ? renderExpirationTime$jscomp$0 & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderExpirationTime$jscomp$0 & SubtreeSuspenseContextMask;
                push(suspenseStackCursor, renderExpirationTime$jscomp$0, current$$1);
                current$$1 = current;
                break a;
              }

              break;

            case 20:
              break;

            default:
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
          }

          current$$1 = null;
        }

        current = workInProgress;

        if (1 === renderExpirationTime || 1 !== current.childExpirationTime) {
          renderExpirationTime$jscomp$0 = 0;

          for (newProps = current.child; null !== newProps;) {
            type = newProps.expirationTime, rootContainerInstance = newProps.childExpirationTime, type > renderExpirationTime$jscomp$0 && (renderExpirationTime$jscomp$0 = type), rootContainerInstance > renderExpirationTime$jscomp$0 && (renderExpirationTime$jscomp$0 = rootContainerInstance), newProps = newProps.sibling;
          }

          current.childExpirationTime = renderExpirationTime$jscomp$0;
        }

        if (null !== current$$1) return current$$1;
        null !== unitOfWork && 0 === (unitOfWork.effectTag & 1024) && (null === unitOfWork.firstEffect && (unitOfWork.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== unitOfWork.lastEffect && (unitOfWork.lastEffect.nextEffect = workInProgress.firstEffect), unitOfWork.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== unitOfWork.lastEffect ? unitOfWork.lastEffect.nextEffect = workInProgress : unitOfWork.firstEffect = workInProgress, unitOfWork.lastEffect = workInProgress));
      } else {
        current$$1 = unwindWork(workInProgress, renderExpirationTime);
        if (null !== current$$1) return current$$1.effectTag &= 1023, current$$1;
        null !== unitOfWork && (unitOfWork.firstEffect = unitOfWork.lastEffect = null, unitOfWork.effectTag |= 1024);
      }

      current$$1 = workInProgress.sibling;
      if (null !== current$$1) return current$$1;
      workInProgress = unitOfWork;
    } while (null !== workInProgress);

    workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
    return null;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority$1(99, commitRootImpl.bind(null, root, renderPriorityLevel));
    null !== rootWithPendingPassiveEffects && scheduleCallback(97, function () {
      flushPassiveEffects();
      return null;
    });
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    flushPassiveEffects();
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Should not already be working."));
    var finishedWork = root.finishedWork,
        expirationTime = root.finishedExpirationTime;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedExpirationTime = 0;
    if (finishedWork === root.current) throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
    root.callbackNode = null;
    root.callbackExpirationTime = 0;
    var updateExpirationTimeBeforeCommit = finishedWork.expirationTime,
        childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
    updateExpirationTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
    root.firstPendingTime = updateExpirationTimeBeforeCommit;
    updateExpirationTimeBeforeCommit < root.lastPendingTime && (root.lastPendingTime = updateExpirationTimeBeforeCommit);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, renderExpirationTime = 0);
    1 < finishedWork.effectTag ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, updateExpirationTimeBeforeCommit = finishedWork.firstEffect) : updateExpirationTimeBeforeCommit = finishedWork : updateExpirationTimeBeforeCommit = finishedWork.firstEffect;

    if (null !== updateExpirationTimeBeforeCommit) {
      childExpirationTimeBeforeCommit = executionContext;
      executionContext |= CommitContext;
      ReactCurrentOwner$2.current = null;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (; null !== nextEffect;) {
            if (0 !== (nextEffect.effectTag & 256)) {
              var current$$1 = nextEffect.alternate,
                  finishedWork$jscomp$0 = nextEffect;

              switch (finishedWork$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork$jscomp$0);
                  break;

                case 1:
                  if (finishedWork$jscomp$0.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork$jscomp$0.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(finishedWork$jscomp$0.elementType === finishedWork$jscomp$0.type ? prevProps : resolveDefaultProps(finishedWork$jscomp$0.type, prevProps), prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break;

                case 3:
                case 5:
                case 6:
                case 4:
                case 17:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (current$$1 = renderPriorityLevel; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & 128) {
              var current$$1$jscomp$0 = nextEffect.alternate;

              if (null !== current$$1$jscomp$0) {
                var currentRef = current$$1$jscomp$0.ref;
                null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
              }
            }

            switch (effectTag & 14) {
              case 2:
                nextEffect.effectTag &= -3;
                break;

              case 6:
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                prevProps = nextEffect;

                a: for (prevState = prevProps, instance = current$$1, snapshot = prevState;;) {
                  if (commitUnmount(snapshot, instance), null !== snapshot.child) snapshot.child.return = snapshot, snapshot = snapshot.child;else {
                    if (snapshot === prevState) break;

                    for (; null === snapshot.sibling;) {
                      if (null === snapshot.return || snapshot.return === prevState) break a;
                      snapshot = snapshot.return;
                    }

                    snapshot.sibling.return = snapshot.return;
                    snapshot = snapshot.sibling;
                  }
                }

                detachFiber(prevProps);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      root.current = finishedWork;
      nextEffect = updateExpirationTimeBeforeCommit;

      do {
        try {
          for (effectTag = expirationTime; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;

            if (effectTag$jscomp$0 & 36) {
              var current$$1$jscomp$1 = nextEffect.alternate;
              current$$1$jscomp$0 = nextEffect;
              currentRef = effectTag;

              switch (current$$1$jscomp$0.tag) {
                case 0:
                case 11:
                case 15:
                  commitHookEffectList(UnmountLayout, MountLayout, current$$1$jscomp$0);
                  break;

                case 1:
                  var instance$jscomp$0 = current$$1$jscomp$0.stateNode;
                  if (current$$1$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.componentDidMount();else {
                    var prevProps$jscomp$0 = current$$1$jscomp$0.elementType === current$$1$jscomp$0.type ? current$$1$jscomp$1.memoizedProps : resolveDefaultProps(current$$1$jscomp$0.type, current$$1$jscomp$1.memoizedProps);
                    instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, current$$1$jscomp$1.memoizedState, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                  }
                  var updateQueue = current$$1$jscomp$0.updateQueue;
                  null !== updateQueue && commitUpdateQueue(current$$1$jscomp$0, updateQueue, instance$jscomp$0, currentRef);
                  break;

                case 3:
                  var _updateQueue = current$$1$jscomp$0.updateQueue;

                  if (null !== _updateQueue) {
                    current$$1 = null;
                    if (null !== current$$1$jscomp$0.child) switch (current$$1$jscomp$0.child.tag) {
                      case 5:
                        current$$1 = current$$1$jscomp$0.child.stateNode.canonical;
                        break;

                      case 1:
                        current$$1 = current$$1$jscomp$0.child.stateNode;
                    }
                    commitUpdateQueue(current$$1$jscomp$0, _updateQueue, current$$1, currentRef);
                  }

                  break;

                case 5:
                  if (null === current$$1$jscomp$1 && current$$1$jscomp$0.effectTag & 4) throw ReactError(Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue."));
                  break;

                case 6:
                  break;

                case 4:
                  break;

                case 12:
                  break;

                case 13:
                case 19:
                case 17:
                case 20:
                  break;

                default:
                  throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            }

            if (effectTag$jscomp$0 & 128) {
              var ref = nextEffect.ref;

              if (null !== ref) {
                var instance$jscomp$1 = nextEffect.stateNode;

                switch (nextEffect.tag) {
                  case 5:
                    var instanceToUse = instance$jscomp$1.canonical;
                    break;

                  default:
                    instanceToUse = instance$jscomp$1;
                }

                "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
              }
            }

            effectTag$jscomp$0 & 512 && (rootDoesHavePassiveEffects = true);
            nextEffect = nextEffect.nextEffect;
          }
        } catch (error) {
          if (null === nextEffect) throw ReactError(Error("Should be working on an effect."));
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      } while (null !== nextEffect);

      nextEffect = null;
      requestPaint();
      executionContext = childExpirationTimeBeforeCommit;
    } else root.current = finishedWork;

    if (rootDoesHavePassiveEffects) rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsExpirationTime = expirationTime, pendingPassiveEffectsRenderPriority = renderPriorityLevel;else for (nextEffect = updateExpirationTimeBeforeCommit; null !== nextEffect;) {
      renderPriorityLevel = nextEffect.nextEffect, nextEffect.nextEffect = null, nextEffect = renderPriorityLevel;
    }
    renderPriorityLevel = root.firstPendingTime;
    0 !== renderPriorityLevel ? (effectTag$jscomp$0 = requestCurrentTime(), effectTag$jscomp$0 = inferPriorityFromExpirationTime(effectTag$jscomp$0, renderPriorityLevel), scheduleCallbackForRoot(root, effectTag$jscomp$0, renderPriorityLevel)) : legacyErrorBoundariesThatAlreadyFailed = null;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork.stateNode, expirationTime);
    1073741823 === renderPriorityLevel ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    if (hasUncaughtError) throw hasUncaughtError = false, root = firstUncaughtError, firstUncaughtError = null, root;
    if ((executionContext & LegacyUnbatchedContext) !== NoContext) return null;
    flushSyncCallbackQueue();
    return null;
  }

  function flushPassiveEffects() {
    if (null === rootWithPendingPassiveEffects) return false;
    var root = rootWithPendingPassiveEffects,
        expirationTime = pendingPassiveEffectsExpirationTime,
        renderPriorityLevel = pendingPassiveEffectsRenderPriority;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsExpirationTime = 0;
    pendingPassiveEffectsRenderPriority = 90;
    return runWithPriority$1(97 < renderPriorityLevel ? 97 : renderPriorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
  }

  function flushPassiveEffectsImpl(root) {
    if ((executionContext & 48) !== NoContext) throw ReactError(Error("Cannot flush passive effects while already rendering."));
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;

    for (root = root.current.firstEffect; null !== root;) {
      try {
        var finishedWork = root;
        if (0 !== (finishedWork.effectTag & 512)) switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork), commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
        }
      } catch (error) {
        if (null === root) throw ReactError(Error("Should be working on an effect."));
        captureCommitPhaseError(root, error);
      }

      finishedWork = root.nextEffect;
      root.nextEffect = null;
      root = finishedWork;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue();
    return true;
  }

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValue(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1073741823);
    enqueueUpdate(rootFiber, sourceFiber);
    rootFiber = markUpdateTimeFromFiberToRoot(rootFiber, 1073741823);
    null !== rootFiber && scheduleCallbackForRoot(rootFiber, 99, 1073741823);
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (var fiber = sourceFiber.return; null !== fiber;) {
      if (3 === fiber.tag) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        break;
      } else if (1 === fiber.tag) {
        var instance = fiber.stateNode;

        if ("function" === typeof fiber.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValue(error, sourceFiber);
          sourceFiber = createClassErrorUpdate(fiber, sourceFiber, 1073741823);
          enqueueUpdate(fiber, sourceFiber);
          fiber = markUpdateTimeFromFiberToRoot(fiber, 1073741823);
          null !== fiber && scheduleCallbackForRoot(fiber, 99, 1073741823);
          break;
        }
      }

      fiber = fiber.return;
    }
  }

  function pingSuspendedRoot(root, thenable, suspendedTime) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(thenable);
    workInProgressRoot === root && renderExpirationTime === suspendedTime ? workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && 1073741823 === workInProgressRootLatestProcessedExpirationTime && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, renderExpirationTime) : workInProgressRootHasPendingPing = true : root.lastPendingTime < suspendedTime || (thenable = root.pingTime, 0 !== thenable && thenable < suspendedTime || (root.pingTime = suspendedTime, root.finishedExpirationTime === suspendedTime && (root.finishedExpirationTime = 0, root.finishedWork = null), thenable = requestCurrentTime(), thenable = inferPriorityFromExpirationTime(thenable, suspendedTime), scheduleCallbackForRoot(root, thenable, suspendedTime)));
  }

  function resolveRetryThenable(boundaryFiber, thenable) {
    var retryCache = boundaryFiber.stateNode;
    null !== retryCache && retryCache.delete(thenable);
    retryCache = requestCurrentTime();
    thenable = computeExpirationForFiber(retryCache, boundaryFiber, null);
    retryCache = inferPriorityFromExpirationTime(retryCache, thenable);
    boundaryFiber = markUpdateTimeFromFiberToRoot(boundaryFiber, thenable);
    null !== boundaryFiber && scheduleCallbackForRoot(boundaryFiber, retryCache, thenable);
  }

  var beginWork$$1 = undefined;

  beginWork$$1 = function beginWork$$1(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;
    if (null !== current$$1) {
      if (current$$1.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current) didReceiveUpdate = true;else {
        if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 5:
              pushHostContext(workInProgress);
              break;

            case 1:
              isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 10:
              pushProvider(workInProgress, workInProgress.memoizedProps.value);
              break;

            case 13:
              if (null !== workInProgress.memoizedState) {
                updateExpirationTime = workInProgress.child.childExpirationTime;
                if (0 !== updateExpirationTime && updateExpirationTime >= renderExpirationTime) return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                return null !== workInProgress ? workInProgress.sibling : null;
              }

              push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
              break;

            case 19:
              updateExpirationTime = workInProgress.childExpirationTime >= renderExpirationTime;

              if (0 !== (current$$1.effectTag & 64)) {
                if (updateExpirationTime) return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                workInProgress.effectTag |= 64;
              }

              var renderState = workInProgress.memoizedState;
              null !== renderState && (renderState.rendering = null, renderState.tail = null);
              push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
              if (!updateExpirationTime) return null;
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }
    } else didReceiveUpdate = false;
    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 2:
        updateExpirationTime = workInProgress.type;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = getMaskedContext(workInProgress, contextStackCursor.current);
        prepareToReadContext(workInProgress, renderExpirationTime);
        renderState = renderWithHooks(null, workInProgress, updateExpirationTime, current$$1, renderState, renderExpirationTime);
        workInProgress.effectTag |= 1;

        if ("object" === typeof renderState && null !== renderState && "function" === typeof renderState.render && undefined === renderState.$$typeof) {
          workInProgress.tag = 1;
          resetHooks();

          if (isContextProvider(updateExpirationTime)) {
            var hasContext = true;
            pushContextProvider(workInProgress);
          } else hasContext = false;

          workInProgress.memoizedState = null !== renderState.state && undefined !== renderState.state ? renderState.state : null;
          var getDerivedStateFromProps = updateExpirationTime.getDerivedStateFromProps;
          "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, updateExpirationTime, getDerivedStateFromProps, current$$1);
          renderState.updater = classComponentUpdater;
          workInProgress.stateNode = renderState;
          renderState._reactInternalFiber = workInProgress;
          mountClassInstance(workInProgress, updateExpirationTime, current$$1, renderExpirationTime);
          workInProgress = finishClassComponent(null, workInProgress, updateExpirationTime, true, hasContext, renderExpirationTime);
        } else workInProgress.tag = 0, reconcileChildren(null, workInProgress, renderState, renderExpirationTime), workInProgress = workInProgress.child;

        return workInProgress;

      case 16:
        renderState = workInProgress.elementType;
        null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2);
        current$$1 = workInProgress.pendingProps;
        renderState = readLazyComponentType(renderState);
        workInProgress.type = renderState;
        hasContext = workInProgress.tag = resolveLazyComponentTag(renderState);
        current$$1 = resolveDefaultProps(renderState, current$$1);

        switch (hasContext) {
          case 0:
            workInProgress = updateFunctionComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 1:
            workInProgress = updateClassComponent(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 11:
            workInProgress = updateForwardRef(null, workInProgress, renderState, current$$1, renderExpirationTime);
            break;

          case 14:
            workInProgress = updateMemoComponent(null, workInProgress, renderState, resolveDefaultProps(renderState.type, current$$1), updateExpirationTime, renderExpirationTime);
            break;

          default:
            throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + renderState + ". Lazy element type must resolve to a class or function."));
        }

        return workInProgress;

      case 0:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateFunctionComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 1:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateClassComponent(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 3:
        pushHostRootContext(workInProgress);
        updateExpirationTime = workInProgress.updateQueue;
        if (null === updateExpirationTime) throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        renderState = workInProgress.memoizedState;
        renderState = null !== renderState ? renderState.element : null;
        processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime);
        updateExpirationTime = workInProgress.memoizedState.element;
        updateExpirationTime === renderState ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child);
        return workInProgress;

      case 5:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 6:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), null;

      case 13:
        return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 11:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), updateForwardRef(current$$1, workInProgress, updateExpirationTime, renderState, renderExpirationTime);

      case 7:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps, renderExpirationTime), workInProgress.child;

      case 8:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 12:
        return reconcileChildren(current$$1, workInProgress, workInProgress.pendingProps.children, renderExpirationTime), workInProgress.child;

      case 10:
        a: {
          updateExpirationTime = workInProgress.type._context;
          renderState = workInProgress.pendingProps;
          getDerivedStateFromProps = workInProgress.memoizedProps;
          hasContext = renderState.value;
          pushProvider(workInProgress, hasContext);

          if (null !== getDerivedStateFromProps) {
            var oldValue = getDerivedStateFromProps.value;
            hasContext = is(oldValue, hasContext) ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, hasContext) : 1073741823) | 0;

            if (0 === hasContext) {
              if (getDerivedStateFromProps.children === renderState.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldValue = workInProgress.child, null !== oldValue && (oldValue.return = workInProgress); null !== oldValue;) {
              var list = oldValue.dependencies;

              if (null !== list) {
                getDerivedStateFromProps = oldValue.child;

                for (var dependency = list.firstContext; null !== dependency;) {
                  if (dependency.context === updateExpirationTime && 0 !== (dependency.observedBits & hasContext)) {
                    1 === oldValue.tag && (dependency = createUpdate(renderExpirationTime, null), dependency.tag = 2, enqueueUpdate(oldValue, dependency));
                    oldValue.expirationTime < renderExpirationTime && (oldValue.expirationTime = renderExpirationTime);
                    dependency = oldValue.alternate;
                    null !== dependency && dependency.expirationTime < renderExpirationTime && (dependency.expirationTime = renderExpirationTime);
                    scheduleWorkOnParentPath(oldValue.return, renderExpirationTime);
                    list.expirationTime < renderExpirationTime && (list.expirationTime = renderExpirationTime);
                    break;
                  }

                  dependency = dependency.next;
                }
              } else getDerivedStateFromProps = 10 === oldValue.tag ? oldValue.type === workInProgress.type ? null : oldValue.child : oldValue.child;

              if (null !== getDerivedStateFromProps) getDerivedStateFromProps.return = oldValue;else for (getDerivedStateFromProps = oldValue; null !== getDerivedStateFromProps;) {
                if (getDerivedStateFromProps === workInProgress) {
                  getDerivedStateFromProps = null;
                  break;
                }

                oldValue = getDerivedStateFromProps.sibling;

                if (null !== oldValue) {
                  oldValue.return = getDerivedStateFromProps.return;
                  getDerivedStateFromProps = oldValue;
                  break;
                }

                getDerivedStateFromProps = getDerivedStateFromProps.return;
              }
              oldValue = getDerivedStateFromProps;
            }
          }

          reconcileChildren(current$$1, workInProgress, renderState.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 9:
        return renderState = workInProgress.type, hasContext = workInProgress.pendingProps, updateExpirationTime = hasContext.children, prepareToReadContext(workInProgress, renderExpirationTime), renderState = readContext(renderState, hasContext.unstable_observedBits), updateExpirationTime = updateExpirationTime(renderState), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.child;

      case 14:
        return renderState = workInProgress.type, hasContext = resolveDefaultProps(renderState, workInProgress.pendingProps), hasContext = resolveDefaultProps(renderState.type, hasContext), updateMemoComponent(current$$1, workInProgress, renderState, hasContext, updateExpirationTime, renderExpirationTime);

      case 15:
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);

      case 17:
        return updateExpirationTime = workInProgress.type, renderState = workInProgress.pendingProps, renderState = workInProgress.elementType === updateExpirationTime ? renderState : resolveDefaultProps(updateExpirationTime, renderState), null !== current$$1 && (current$$1.alternate = null, workInProgress.alternate = null, workInProgress.effectTag |= 2), workInProgress.tag = 1, isContextProvider(updateExpirationTime) ? (current$$1 = true, pushContextProvider(workInProgress)) : current$$1 = false, prepareToReadContext(workInProgress, renderExpirationTime), constructClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), mountClassInstance(workInProgress, updateExpirationTime, renderState, renderExpirationTime), finishClassComponent(null, workInProgress, updateExpirationTime, true, current$$1, renderExpirationTime);

      case 19:
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
    }

    throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
  };

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);

      onCommitFiberRoot = function onCommitFiberRoot(root) {
        try {
          hook.onCommitFiberRoot(rendererID, root, undefined, 64 === (root.current.effectTag & 64));
        } catch (err) {}
      };

      onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
        try {
          hook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
      };
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function createFiber(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function resolveLazyComponentTag(Component) {
    if ("function" === typeof Component) return shouldConstruct(Component) ? 1 : 0;

    if (undefined !== Component && null !== Component) {
      Component = Component.$$typeof;
      if (Component === REACT_FORWARD_REF_TYPE) return 11;
      if (Component === REACT_MEMO_TYPE) return 14;
    }

    return 2;
  }

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      expirationTime: pendingProps.expirationTime,
      firstContext: pendingProps.firstContext,
      responders: pendingProps.responders
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
    var fiberTag = 2;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = 8;
        mode |= 7;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 1;
        break;

      case REACT_PROFILER_TYPE:
        return type = createFiber(12, pendingProps, key, mode | 8), type.elementType = REACT_PROFILER_TYPE, type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_TYPE:
        return type = createFiber(13, pendingProps, key, mode), type.type = REACT_SUSPENSE_TYPE, type.elementType = REACT_SUSPENSE_TYPE, type.expirationTime = expirationTime, type;

      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.expirationTime = expirationTime, type;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 10;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 9;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;

          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;

          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (null == type ? type : typeof type) + "."));
    }
    key = createFiber(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.expirationTime = expirationTime;
    return key;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = createFiber(7, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = createFiber(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.current = null;
    this.containerInfo = containerInfo;
    this.pingCache = this.pendingChildren = null;
    this.finishedExpirationTime = 0;
    this.finishedWork = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = hydrate;
    this.callbackNode = this.firstBatch = null;
    this.pingTime = this.lastPendingTime = this.firstPendingTime = this.callbackExpirationTime = 0;
  }

  function findHostInstance(component) {
    var fiber = component._reactInternalFiber;

    if (undefined === fiber) {
      if ("function" === typeof component.render) throw ReactError(Error("Unable to find node on an unmounted component."));
      throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
    }

    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime(),
        suspenseConfig = ReactCurrentBatchConfig.suspense;
    current$$1 = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
    currentTime = container.current;

    a: if (parentComponent) {
      parentComponent = parentComponent._reactInternalFiber;

      b: {
        if (2 !== isFiberMountedImpl(parentComponent) || 1 !== parentComponent.tag) throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
        var parentContext = parentComponent;

        do {
          switch (parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break b;

            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }

          }

          parentContext = parentContext.return;
        } while (null !== parentContext);

        throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
      }

      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;

        if (isContextProvider(Component)) {
          parentComponent = processChildContext(parentComponent, Component, parentContext);
          break a;
        }
      }

      parentComponent = parentContext;
    } else parentComponent = emptyContextObject;

    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    suspenseConfig = createUpdate(current$$1, suspenseConfig);
    suspenseConfig.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (suspenseConfig.callback = container);
    enqueueUpdate(currentTime, suspenseConfig);
    scheduleUpdateOnFiber(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits$1(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    throw ReactError(Error("getInspectorDataForViewTag() is not available in production"));
  };

  var fabricDispatchCommand = nativeFabricUIManager.dispatchCommand;

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, executionContext === NoContext && flushSyncCallbackQueue();
    }
  };

  flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {
    (executionContext & 49) === NoContext && (flushPendingDiscreteUpdates(), flushPassiveEffects());
  };

  var roots = new Map(),
      ReactFabric = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits$1(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance && !maybeInstance.canonical) {
            var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
            maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
            null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance),
    findNodeHandle: findNodeHandle,
    setNativeProps: function setNativeProps() {},
    dispatchCommand: function dispatchCommand(handle, command, args) {
      null != handle._nativeTag && null != handle._internalInstanceHandle && fabricDispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
    },
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(containerTag, 0, false);
        var uninitializedFiber = createFiber(3, null, null, 0);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 5:
          element = element.child.stateNode.canonical;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureInWindow: function measureInWindow(callback) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null != maybeInstance && (maybeInstance.canonical ? nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback)) : ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback)));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            null == maybeInstance || maybeInstance.canonical || (maybeInstance = undefined, "number" === typeof relativeToNativeNode ? maybeInstance = relativeToNativeNode : relativeToNativeNode._nativeTag && (maybeInstance = relativeToNativeNode._nativeTag), null != maybeInstance && ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), maybeInstance, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance && !maybeInstance.canonical) {
              var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
              maybeInstance = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, maybeInstance.validAttributes);
              null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(nativeTag, maybeInstance.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance)
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      overrideHookState: null,
      overrideProps: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      },
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null
    }));
  })({
    findFiberByHostInstance: getInstanceFromInstance,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.8.6",
    rendererPackageName: "react-native-renderer"
  });

  var ReactFabric$2 = {
    default: ReactFabric
  },
      ReactFabric$3 = ReactFabric$2 && ReactFabric || ReactFabric$2;
  module.exports = ReactFabric$3.default || ReactFabric$3;
},14815,[14344,14446,14566,10297,14575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('AppState');

  exports.default = _default;
},14818,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('AsyncSQLiteDBStorage') || TurboModuleRegistry.get('AsyncLocalStorage');

  exports.default = _default;
},14821,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Clipboard');

  exports.default = _default;
},14824,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('DatePickerAndroid');

  exports.default = _default;
},14827,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeImagePickerIOS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      return _NativeImagePickerIOS.default.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        videoMode: true,
        unmirrorFrontFacingCamera: false
      };

      if (config.videoMode != null) {
        newConfig.videoMode = config.videoMode;
      }

      if (config.unmirrorFrontFacingCamera != null) {
        newConfig.unmirrorFrontFacingCamera = config.unmirrorFrontFacingCamera;
      }

      return _NativeImagePickerIOS.default.openCameraDialog(newConfig, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');
      var newConfig = {
        showImages: true,
        showVideos: false
      };

      if (config.showImages != null) {
        newConfig.showImages = config.showImages;
      }

      if (config.showVideos != null) {
        newConfig.showVideos = config.showVideos;
      }

      return _NativeImagePickerIOS.default.openSelectDialog(newConfig, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},14830,[14305,14833,14326]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ImagePickerIOS');

  exports.default = _default;
},14833,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _default = _Platform.default.OS === 'android' ? TurboModuleRegistry.getEnforcing('IntentAndroid') : TurboModuleRegistry.getEnforcing('LinkingManager');

  exports.default = _default;
},14836,[14305,14308,14341,10066]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];

          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined;

            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }

            total += toAdd;
            count++;
          }
        }
      }

      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},14839,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('PermissionsAndroid');

  exports.default = _default;
},14842,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('PushNotificationManager');

  exports.default = _default;
},14845,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('ShareModule');

  exports.default = _default;
},14848,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _NativeTimePickerAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      (0, _classCallCheck2.default)(this, TimePickerAndroid);
    }

    (0, _createClass2.default)(TimePickerAndroid, null, [{
      key: "open",
      value: function open(options) {
        return _regenerator.default.async(function open$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_NativeTimePickerAndroid.default) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", _NativeTimePickerAndroid.default.open(options));

              case 4:
                return _context.abrupt("return", Promise.reject({
                  message: 'TimePickerAndroid is not supported on this platform.'
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    }]);
    return TimePickerAndroid;
  }();

  TimePickerAndroid.timeSetAction = 'timeSetAction';
  TimePickerAndroid.dismissedAction = 'dismissedAction';
  module.exports = TimePickerAndroid;
},14851,[14305,14674,14320,14323,14854]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.get('TimePickerAndroid');

  exports.default = _default;
},14854,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('ToastAndroid');

  exports.default = _default;
},14857,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;

  var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

  function useWindowDimensions() {
    var dims = _Dimensions.default.get('window');

    var forceUpdate = React.useState(false)[1].bind(null, function (v) {
      return !v;
    });
    var initialDims = React.useState(dims)[0];
    React.useEffect(function () {
      _Dimensions.default.addEventListener('change', forceUpdate);

      var latestDims = _Dimensions.default.get('window');

      if (latestDims !== initialDims) {
        forceUpdate();
      }

      return function () {
        _Dimensions.default.removeEventListener('change', forceUpdate);
      };
    }, [forceUpdate, initialDims]);
    return dims;
  }
},14860,[14308,14305,10429,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[0]);

  var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: "\uFEFF",
    BULLET: "\u2022",
    BULLET_SP: "\xA0\u2022\xA0",
    MIDDOT: "\xB7",
    MIDDOT_SP: "\xA0\xB7\xA0",
    MIDDOT_KATAKANA: "\u30FB",
    MDASH: "\u2014",
    MDASH_SP: "\xA0\u2014\xA0",
    NDASH: "\u2013",
    NDASH_SP: "\xA0\u2013\xA0",
    NBSP: "\xA0",
    PIZZA: "\uD83C\uDF55",
    TRIANGLE_LEFT: "\u25C0",
    TRIANGLE_RIGHT: "\u25B6"
  });
  module.exports = UTFSequence;
},14863,[10057]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var _default = TurboModuleRegistry.getEnforcing('Vibration');

  exports.default = _default;
},14866,[14308,14341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var YellowBox;
  {
    YellowBox = function (_React$Component2) {
      _inherits(YellowBox, _React$Component2);

      function YellowBox() {
        _classCallCheck(this, YellowBox);

        return _possibleConstructorReturn(this, _getPrototypeOf(YellowBox).apply(this, arguments));
      }

      _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);

      return YellowBox;
    }(React.Component);
  }
  module.exports = YellowBox;
},14869,[14320,14323,14371,14377,14386,10297]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var PointPropType = PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},14872,[10318]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  ;

  (function (isNode) {
    var Public = function Public(clone) {
      return merge(clone === true, false, arguments);
    },
        publicName = 'merge';

    Public.recursive = function (clone) {
      return merge(clone === true, true, arguments);
    };

    Public.clone = function (input) {
      var output = input,
          type = typeOf(input),
          index,
          size;

      if (type === 'array') {
        output = [];
        size = input.length;

        for (index = 0; index < size; ++index) {
          output[index] = Public.clone(input[index]);
        }
      } else if (type === 'object') {
        output = {};

        for (index in input) {
          output[index] = Public.clone(input[index]);
        }
      }

      return output;
    };

    function merge_recursive(base, extend) {
      if (typeOf(base) !== 'object') return extend;

      for (var key in extend) {
        if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {
          base[key] = merge_recursive(base[key], extend[key]);
        } else {
          base[key] = extend[key];
        }
      }

      return base;
    }

    function merge(clone, recursive, argv) {
      var result = argv[0],
          size = argv.length;
      if (clone || typeOf(result) !== 'object') result = {};

      for (var index = 0; index < size; ++index) {
        var item = argv[index],
            type = typeOf(item);
        if (type !== 'object') continue;

        for (var key in item) {
          if (key === '__proto__') continue;
          var sitem = clone ? Public.clone(item[key]) : item[key];

          if (recursive) {
            result[key] = merge_recursive(result[key], sitem);
          } else {
            result[key] = sitem;
          }
        }
      }

      return result;
    }

    function typeOf(input) {
      return {}.toString.call(input).slice(8, -1).toLowerCase();
    }

    if (isNode) {
      module.exports = Public;
    } else {
      window[publicName] = Public;
    }
  })(typeof module === 'object' && module && typeof module.exports === 'object' && module.exports);
},14914,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = extractColor;
  exports.integerColor = exports.colorNames = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var colorNames = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
  exports.colorNames = colorNames;

  for (var name in colorNames) {
    if (colorNames.hasOwnProperty(name)) {
      var color = colorNames[name];
      var r = color[0];
      var g = color[1];
      var b = color[2];
      colorNames[name] = (0xff000000 | r << 16 | g << 8 | b) >>> 0;
    }
  }

  Object.freeze(colorNames);

  function hslToRgb(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;

    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }

    t1 = 2 * l - t2;
    rgb = [0, 0, 0];

    for (var i = 0; i < 3; i++) {
      t3 = h + 0.3333333333333333 * -(i - 1);

      if (t3 < 0) {
        t3++;
      }

      if (t3 > 1) {
        t3--;
      }

      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
      } else {
        val = t1;
      }

      rgb[i] = val;
    }

    return rgb;
  }

  function hwbToRgb(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;

    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }

    n = wh + f * (v - wh);
    var r;
    var g;
    var b;

    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;

      case 1:
        r = n;
        g = v;
        b = wh;
        break;

      case 2:
        r = wh;
        g = v;
        b = n;
        break;

      case 3:
        r = wh;
        g = n;
        b = v;
        break;

      case 4:
        r = n;
        g = wh;
        b = v;
        break;

      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }

    return [r, g, b];
  }

  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }

  var abbr = /^#([a-f0-9]{3,4})$/i;
  var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
  var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;
  var per = /^rgba?\(\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;
  var keyword = /(\D+)/;

  function rgbFromString(string) {
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;

    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];

      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16) / 255;
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];

      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16) / 255;
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0) / 255;
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseFloat(match[i + 1]) / 100;
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === 'transparent') {
        return [0, 0, 0, 0];
      }

      rgb = colorNames[match[1]];

      if (!(typeof rgb === 'number')) {
        return null;
      }

      return integerColor(rgb);
    } else {
      return null;
    }

    for (i = 0; i < 4; i++) {
      rgb[i] = clamp(rgb[i], 0, 1);
    }

    return rgb;
  }

  var hslRegEx = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;

  function rgbFromHslString(string) {
    var match = string.match(hslRegEx);

    if (!match) {
      return null;
    }

    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) + 360) % 360;
    var s = clamp(parseFloat(match[2]), 0, 100);
    var l = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return hslToRgb([h, s, l, a]);
  }

  var hwbRegEx = /^hwb\(\s*([+-]?\d*[.]?\d+)(?:deg)?\s*,\s*([+-]?[\d.]+)%\s*,\s*([+-]?[\d.]+)%\s*(?:,\s*([+-]?[\d.]+)\s*)?\)$/;

  function rgbFromHwbString(string) {
    var match = string.match(hwbRegEx);

    if (!match) {
      return null;
    }

    var alpha = parseFloat(match[4]);
    var h = (parseFloat(match[1]) % 360 + 360) % 360;
    var w = clamp(parseFloat(match[2]), 0, 100);
    var b = clamp(parseFloat(match[3]), 0, 100);
    var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
    return hwbToRgb([h, w, b, a]);
  }

  function colorFromString(string) {
    var prefix = string.substring(0, 3).toLowerCase();

    switch (prefix) {
      case 'hsl':
        return rgbFromHslString(string);

      case 'hwb':
        return rgbFromHwbString(string);

      default:
        return rgbFromString(string);
    }
  }

  var identity = function identity(x) {
    return x;
  };

  var toSignedInt32 = function toSignedInt32(x) {
    return x | 0x0;
  };

  var integerColor = _reactNative.Platform.OS === 'android' ? toSignedInt32 : identity;
  exports.integerColor = integerColor;

  function extractColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return integerColor(color);
      }

      return null;
    }

    var parsedColor = typeof color === 'string' ? colorFromString(color) : color;

    if (!Array.isArray(parsedColor)) {
      return parsedColor;
    }

    var r = parsedColor[0];
    var g = parsedColor[1];
    var b = parsedColor[2];
    var a = parsedColor[3];
    var int32Color = ((a === undefined ? 0xff000000 : Math.round(a * 255) << 24) | Math.round(r * 255) << 16 | Math.round(g * 255) << 8 | Math.round(b * 255)) >>> 0;
    return integerColor(int32Color);
  }
},14917,[10033]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      transformList: peg$parsetransformList
    },
        peg$startRuleFunction = peg$parsetransformList,
        peg$c0 = function peg$c0(ts) {
      return ts;
    },
        peg$c1 = function peg$c1(t, ts) {
      return multiply_matrices(t, ts);
    },
        peg$c2 = "matrix",
        peg$c3 = peg$literalExpectation("matrix", false),
        peg$c4 = "(",
        peg$c5 = peg$literalExpectation("(", false),
        peg$c6 = ")",
        peg$c7 = peg$literalExpectation(")", false),
        peg$c8 = function peg$c8(a, b, c, d, e, f) {
      return [a, c, e, b, d, f];
    },
        peg$c9 = "translate",
        peg$c10 = peg$literalExpectation("translate", false),
        peg$c11 = function peg$c11(tx, ty) {
      return [1, 0, tx, 0, 1, ty || 0];
    },
        peg$c12 = "scale",
        peg$c13 = peg$literalExpectation("scale", false),
        peg$c14 = function peg$c14(sx, sy) {
      return [sx, 0, 0, 0, sy === null ? sx : sy, 0];
    },
        peg$c15 = "rotate",
        peg$c16 = peg$literalExpectation("rotate", false),
        peg$c17 = function peg$c17(angle, c) {
      var cos = Math.cos(deg2rad * angle);
      var sin = Math.sin(deg2rad * angle);

      if (c !== null) {
        var x = c[0];
        var y = c[1];
        return [cos, -sin, cos * -x + -sin * -y + x, sin, cos, sin * -x + cos * -y + y];
      }

      return [cos, -sin, 0, sin, cos, 0];
    },
        peg$c18 = "skewX",
        peg$c19 = peg$literalExpectation("skewX", false),
        peg$c20 = function peg$c20(angle) {
      return [1, Math.tan(deg2rad * angle), 0, 0, 1, 0];
    },
        peg$c21 = "skewY",
        peg$c22 = peg$literalExpectation("skewY", false),
        peg$c23 = function peg$c23(angle) {
      return [1, 0, 0, Math.tan(deg2rad * angle), 1, 0];
    },
        peg$c24 = function peg$c24(f) {
      return parseFloat(f.join(""));
    },
        peg$c25 = function peg$c25(i) {
      return parseInt(i.join(""));
    },
        peg$c26 = function peg$c26(n) {
      return n;
    },
        peg$c27 = function peg$c27(n1, n2) {
      return [n1, n2];
    },
        peg$c28 = ",",
        peg$c29 = peg$literalExpectation(",", false),
        peg$c30 = function peg$c30(ds) {
      return ds.join("");
    },
        peg$c31 = function peg$c31(f) {
      return f.join("");
    },
        peg$c32 = function peg$c32(d) {
      return d.join("");
    },
        peg$c33 = peg$otherExpectation("fractionalConstant"),
        peg$c34 = ".",
        peg$c35 = peg$literalExpectation(".", false),
        peg$c36 = function peg$c36(d1, d2) {
      return [d1 ? d1.join("") : null, ".", d2.join("")].join("");
    },
        peg$c37 = /^[eE]/,
        peg$c38 = peg$classExpectation(["e", "E"], false, false),
        peg$c39 = function peg$c39(e) {
      return [e[0], e[1], e[2].join("")].join("");
    },
        peg$c40 = /^[+\-]/,
        peg$c41 = peg$classExpectation(["+", "-"], false, false),
        peg$c42 = /^[0-9]/,
        peg$c43 = peg$classExpectation([["0", "9"]], false, false),
        peg$c44 = /^[ \t\r\n]/,
        peg$c45 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parsetransformList() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsp();

      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewsp();
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsetransforms();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewsp();

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewsp();
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetransforms() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsetransform();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecommaWsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecommaWsp();
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsetransforms();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsetransform();
      }

      return s0;
    }

    function peg$parsetransform() {
      var s0;
      s0 = peg$parsematrix();

      if (s0 === peg$FAILED) {
        s0 = peg$parsetranslate();

        if (s0 === peg$FAILED) {
          s0 = peg$parsescale();

          if (s0 === peg$FAILED) {
            s0 = peg$parserotate();

            if (s0 === peg$FAILED) {
              s0 = peg$parseskewX();

              if (s0 === peg$FAILED) {
                s0 = peg$parseskewY();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsematrix() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c3);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWsp();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();

                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecommaWsp();

                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenumber();

                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsecommaWsp();

                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsenumber();

                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecommaWsp();

                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsenumber();

                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsecommaWsp();

                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsenumber();

                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parsewsp();

                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parsewsp();
                                    }

                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c6;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;

                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c7);
                                        }
                                      }

                                      if (s17 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c8(s5, s7, s9, s11, s13, s15);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 9) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c10);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspNumber();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c11(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsescale() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c13);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspNumber();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c14(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserotate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c16);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = peg$parsecommaWspTwoNumbers();

                if (s6 === peg$FAILED) {
                  s6 = null;
                }

                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewsp();

                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewsp();
                  }

                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c6;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                      }
                    }

                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c17(s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseskewX() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c19);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewsp();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewsp();
                }

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c6;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseskewY() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewsp();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewsp();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c5);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewsp();

            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewsp();
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();

              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsewsp();

                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsewsp();
                }

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c6;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c23(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsesign();

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsefloatingPointConstant();

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsesign();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseintegerConstant();

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s1);
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsecommaWspNumber() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$parsecommaWsp();

      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecommaWspTwoNumbers() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$parsecommaWsp();

      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();

        if (s2 !== peg$FAILED) {
          s3 = peg$parsecommaWsp();

          if (s3 !== peg$FAILED) {
            s4 = peg$parsenumber();

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecommaWsp() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsp();

      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsewsp();
        }
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewsp();

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewsp();
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecomma();

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsewsp();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewsp();
          }

          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c29);
        }
      }

      return s0;
    }

    function peg$parseintegerConstant() {
      var s0, s1;
      s0 = peg$currPos;
      s1 = peg$parsedigitSequence();

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parsefloatingPointConstant() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefractionalConstant();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseexponent();

        if (s3 === peg$FAILED) {
          s3 = null;
        }

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsedigitSequence();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseexponent();

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
        }

        s0 = s1;
      }

      return s0;
    }

    function peg$parsefractionalConstant() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedigitSequence();

      if (s1 === peg$FAILED) {
        s1 = null;
      }

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c34;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c35);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsedigitSequence();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedigitSequence();

        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c34;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c33);
        }
      }

      return s0;
    }

    function peg$parseexponent() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$currPos;

      if (peg$c37.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c38);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsesign();

        if (s3 === peg$FAILED) {
          s3 = null;
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigitSequence();

          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1);
      }

      s0 = s1;
      return s0;
    }

    function peg$parsesign() {
      var s0;

      if (peg$c40.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c41);
        }
      }

      return s0;
    }

    function peg$parsedigitSequence() {
      var s0, s1;
      s0 = [];
      s1 = peg$parsedigit();

      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsedigit();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c42.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c43);
        }
      }

      return s0;
    }

    function peg$parsewsp() {
      var s0;

      if (peg$c44.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c45);
        }
      }

      return s0;
    }

    var deg2rad = Math.PI / 180;

    function multiply_matrices(l, r) {
      var al = l[0];
      var cl = l[1];
      var el = l[2];
      var bl = l[3];
      var dl = l[4];
      var fl = l[5];
      var ar = r[0];
      var cr = r[1];
      var er = r[2];
      var br = r[3];
      var dr = r[4];
      var fr = r[5];
      var a = al * ar + cl * br;
      var c = al * cr + cl * dr;
      var e = al * er + cl * fr + el;
      var b = bl * ar + dl * br;
      var d = bl * cr + dl * dr;
      var f = bl * er + dl * fr + fl;
      return [a, c, e, b, d, f];
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
},14920,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pickNotNil = pickNotNil;
  exports.idPattern = undefined;

  function pickNotNil(object) {
    var result = {};

    for (var key in object) {
      if (object.hasOwnProperty(key)) {
        var value = object[key];

        if (value !== undefined && value !== null) {
          result[key] = value;
        }
      }
    }

    return result;
  }

  var idPattern = /#([^)]+)\)?$/;
  exports.idPattern = idPattern;
},14923,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    objectBoundingBox: 0,
    userSpaceOnUse: 1
  };
  exports.default = _default;
},14926,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractViewBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var Pattern = function (_Shape) {
    (0, _inherits2.default)(Pattern, _Shape);

    function Pattern() {
      (0, _classCallCheck2.default)(this, Pattern);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Pattern).apply(this, arguments));
    }

    (0, _createClass2.default)(Pattern, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var patternTransform = props.patternTransform,
            transform = props.transform,
            id = props.id,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            patternUnits = props.patternUnits,
            patternContentUnits = props.patternContentUnits,
            children = props.children,
            viewBox = props.viewBox,
            preserveAspectRatio = props.preserveAspectRatio;
        var matrix = (0, _extractTransform.default)(patternTransform || transform || props);
        return _react.default.createElement(RNSVGPattern, (0, _extends2.default)({
          ref: this.refMethod,
          name: id,
          x: x,
          y: y,
          width: width,
          height: height,
          matrix: matrix,
          patternTransform: matrix,
          patternUnits: _units.default[patternUnits] || 0,
          patternContentUnits: patternContentUnits ? _units.default[patternContentUnits] : 1
        }, (0, _extractViewBox.default)({
          viewBox: viewBox,
          preserveAspectRatio: preserveAspectRatio
        })), children);
      }
    }]);
    return Pattern;
  }(_Shape2.default);

  exports.default = Pattern;
  Pattern.displayName = 'Pattern';
  Pattern.defaultProps = {
    x: '0%',
    y: '0%',
    width: '100%',
    height: '100%'
  };
  var RNSVGPattern = (0, _reactNative.requireNativeComponent)('RNSVGPattern');
},14929,[14305,14344,14320,14323,14371,14377,14386,10297,10033,11554,11644,14926,11497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _extractProps = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var Mask = function (_Shape) {
    (0, _inherits2.default)(Mask, _Shape);

    function Mask() {
      (0, _classCallCheck2.default)(this, Mask);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Mask).apply(this, arguments));
    }

    (0, _createClass2.default)(Mask, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var maskTransform = props.maskTransform,
            transform = props.transform,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            maskUnits = props.maskUnits,
            maskContentUnits = props.maskContentUnits,
            children = props.children;
        return _react.default.createElement(RNSVGMask, (0, _extends2.default)({
          ref: this.refMethod
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, (0, _extractProps.propsAndStyles)(props), {
          x: null,
          y: null
        }), this), {
          x: x,
          y: y,
          width: width,
          height: height,
          maskTransform: (0, _extractTransform.default)(maskTransform || transform || props),
          maskUnits: maskUnits !== undefined ? _units.default[maskUnits] : 0,
          maskContentUnits: maskContentUnits !== undefined ? _units.default[maskContentUnits] : 1
        }), children);
      }
    }]);
    return Mask;
  }(_Shape2.default);

  exports.default = Mask;
  Mask.displayName = 'Mask';
  Mask.defaultProps = {
    x: '0%',
    y: '0%',
    width: '100%',
    height: '100%'
  };
  var RNSVGMask = (0, _reactNative.requireNativeComponent)('RNSVGMask');
},14932,[14308,14305,14344,14314,14320,14323,14371,14377,14386,10297,10033,11554,11509,14926,11497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object.keys(descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== undefined) {
      desc.value = desc.initializer ? desc.initializer.call(context) : undefined;
      desc.initializer = undefined;
    }

    if (desc.initializer === undefined) {
      Object.defineProperty(target, property, desc);
      desc = null;
    }

    return desc;
  }

  module.exports = _applyDecoratedDescriptor;
},22393,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _toArray(arr) {
    return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();
  }

  module.exports = _toArray;
},22396,[14350,14365,14356]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  'use strict';

  var base64 = _$$_REQUIRE(_dependencyMap[0]);

  var ieee754 = _$$_REQUIRE(_dependencyMap[1]);

  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }

  function typedArraySupport() {
    try {
      var arr = new Uint8Array(1);
      arr.__proto__ = {
        __proto__: Uint8Array.prototype,
        foo: function foo() {
          return 42;
        }
      };
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }

  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.byteOffset;
    }
  });

  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }

    var buf = new Uint8Array(length);
    buf.__proto__ = Buffer.prototype;
    return buf;
  }

  function Buffer(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }

      return allocUnsafe(arg);
    }

    return from(arg, encodingOrOffset, length);
  }

  if (typeof Symbol !== 'undefined' && (typeof Symbol === "function" ? Symbol.species : "@@species") != null && Buffer[typeof Symbol === "function" ? Symbol.species : "@@species"] === Buffer) {
    Object.defineProperty(Buffer, typeof Symbol === "function" ? Symbol.species : "@@species", {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    });
  }

  Buffer.poolSize = 8192;

  function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset);
    }

    if (ArrayBuffer.isView(value)) {
      return fromArrayLike(value);
    }

    if (value == null) {
      throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }

    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }

    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }

    var valueOf = value.valueOf && value.valueOf();

    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }

    var b = fromObject(value);
    if (b) return b;

    if (typeof Symbol !== 'undefined' && (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") != null && typeof value[typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive"] === 'function') {
      return Buffer.from(value[typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive"]('string'), encodingOrOffset, length);
    }

    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }

  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };

  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }

  function alloc(size, fill, encoding) {
    assertSize(size);

    if (size <= 0) {
      return createBuffer(size);
    }

    if (fill !== undefined) {
      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }

    return createBuffer(size);
  }

  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding);
  };

  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }

  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size);
  };

  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size);
  };

  function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);

    if (actual !== length) {
      buf = buf.slice(0, actual);
    }

    return buf;
  }

  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);

    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }

    return buf;
  }

  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }

    var buf;

    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }

    buf.__proto__ = Buffer.prototype;
    return buf;
  }

  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);

      if (buf.length === 0) {
        return buf;
      }

      obj.copy(buf, 0, 0, len);
      return buf;
    }

    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }

      return fromArrayLike(obj);
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }

  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    }

    return length | 0;
  }

  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }

    return Buffer.alloc(+length);
  }

  Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype;
  };

  Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }

    if (a === b) return 0;
    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;

      default:
        return false;
    }
  };

  Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    if (list.length === 0) {
      return Buffer.alloc(0);
    }

    var i;

    if (length === undefined) {
      length = 0;

      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;

    for (i = 0; i < list.length; ++i) {
      var buf = list[i];

      if (isInstance(buf, Uint8Array)) {
        buf = Buffer.from(buf);
      }

      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      buf.copy(buffer, pos);
      pos += buf.length;
    }

    return buffer;
  };

  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }

    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }

    if (typeof string !== 'string') {
      throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    }

    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;

        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;

        case 'hex':
          return len >>> 1;

        case 'base64':
          return base64ToBytes(string).length;

        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length;
          }

          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false;

    if (start === undefined || start < 0) {
      start = 0;
    }

    if (start > this.length) {
      return '';
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return '';
    }

    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return '';
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.prototype._isBuffer = true;

  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;

    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }

    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }

    return this;
  };

  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;

    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }

    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }

    return this;
  };

  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;

    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }

    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }

    return this;
  };

  Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer.prototype.toLocaleString = Buffer.prototype.toString;

  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };

  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
  };

  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }

    if (!Buffer.isBuffer(target)) {
      throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    }

    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = target ? target.length : 0;
    }

    if (thisStart === undefined) {
      thisStart = 0;
    }

    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }

    if (thisStart >= thisEnd) {
      return -1;
    }

    if (start >= end) {
      return 1;
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    if (buffer.length === 0) return -1;

    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }

    byteOffset = +byteOffset;

    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer.length - 1;
    }

    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    }

    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    if (Buffer.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }

      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF;

      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }

      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }

    throw new TypeError('val must be string, number or Buffer');
  }

  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();

      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }

        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }

    var i;

    if (dir) {
      var foundIndex = -1;

      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

      for (i = byteOffset; i >= 0; i--) {
        var found = true;

        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }

        if (found) return i;
      }
    }

    return -1;
  }

  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };

  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;

    if (!length) {
      length = remaining;
    } else {
      length = Number(length);

      if (length > remaining) {
        length = remaining;
      }
    }

    var strLen = string.length;

    if (length > strLen / 2) {
      length = strLen / 2;
    }

    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }

    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer.prototype.write = function write(string, offset, length, encoding) {
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;

      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length);

        case 'base64':
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;

    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }

            break;

          case 2:
            secondByte = buf[i + 1];

            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }

        }
      }

      if (codePoint === null) {
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  }

  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;

    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }

    var res = '';
    var i = 0;

    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }

    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }

    return ret;
  }

  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }

    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';

    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }

    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';

    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }

    return res;
  }

  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
    return newBuf;
  };

  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;

    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;

    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];

    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };

  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };

  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };

  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }

    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157e+308);
    }

    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };

  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;

    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }

    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    if (end > this.length) end = this.length;

    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;

    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      this.copyWithin(targetStart, start, end);
    } else if (this === target && start < targetStart && targetStart < end) {
      for (var i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }

    return len;
  };

  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }

      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }

      if (val.length === 1) {
        var code = val.charCodeAt(0);

        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }

    if (end <= start) {
      return this;
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;

    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len = bytes.length;

      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }

      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this;
  };

  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

  function base64clean(str) {
    str = str.split('=')[0];
    str = str.trim().replace(INVALID_BASE64_RE, '');
    if (str.length < 2) return '';

    while (str.length % 4 !== 0) {
      str = str + '=';
    }

    return str;
  }

  function toHex(n) {
    if (n < 16) return '0' + n.toString(16);
    return n.toString(16);
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        if (!leadSurrogate) {
          if (codePoint > 0xDBFF) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }

          leadSurrogate = codePoint;
          continue;
        }

        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }

        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }

    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }

    return i;
  }

  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }

  function numberIsNaN(obj) {
    return obj !== obj;
  }
},22399,[10207,22402]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;

    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;

    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }

    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };

  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);

      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }

      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }

      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = e << mLen | m;
    eLen += mLen;

    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };
},22402,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var UNKNOWN_FUNCTION = '<unknown>';

  function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function (stack, line) {
      var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);

      if (parseResult) {
        stack.push(parseResult);
      }

      return stack;
    }, []);
  }

  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;

  function parseChrome(line) {
    var parts = chromeRe.exec(line);

    if (!parts) {
      return null;
    }

    var isNative = parts[2] && parts[2].indexOf('native') === 0;
    var isEval = parts[2] && parts[2].indexOf('eval') === 0;
    var submatch = chromeEvalRe.exec(parts[2]);

    if (isEval && submatch != null) {
      parts[2] = submatch[1];
      parts[3] = submatch[2];
      parts[4] = submatch[3];
    }

    return {
      file: !isNative ? parts[2] : null,
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: isNative ? [parts[2]] : [],
      lineNumber: parts[3] ? +parts[3] : null,
      column: parts[4] ? +parts[4] : null
    };
  }

  var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;

  function parseWinjs(line) {
    var parts = winjsRe.exec(line);

    if (!parts) {
      return null;
    }

    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }

  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;

  function parseGecko(line) {
    var parts = geckoRe.exec(line);

    if (!parts) {
      return null;
    }

    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);

    if (isEval && submatch != null) {
      parts[3] = submatch[1];
      parts[4] = submatch[2];
      parts[5] = null;
    }

    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: parts[2] ? parts[2].split(',') : [],
      lineNumber: parts[4] ? +parts[4] : null,
      column: parts[5] ? +parts[5] : null
    };
  }

  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;

  function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);

    if (!parts) {
      return null;
    }

    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[4],
      column: parts[5] ? +parts[5] : null
    };
  }

  var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;

  function parseNode(line) {
    var parts = nodeRe.exec(line);

    if (!parts) {
      return null;
    }

    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }

  exports.parse = parse;
},22405,[]);
__r(10120);
__r(10001);